#include "Stable.h"
#include "QUuid"

#include "../include/ProtoSerialization.h"

#ifdef Q_OS_WIN
#pragma warning(push)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 6011)
#pragma warning(disable : 4100)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#endif

#include "../Proto/serialization.pb.cc"		// File generated by proto buffers compiller

#ifdef _MSC_VER
#pragma warning(pop)
#endif

namespace Proto
{

	// Функции для сериализации данных
	//
	const QUuid& Read(const Proto::Uuid& message)
	{
		return *(reinterpret_cast<const QUuid*>(message.uuid().c_str()));
	}

	void Write(Proto::Uuid* pMessage, const QUuid& guid)
	{
		if (pMessage == nullptr)
		{
			assert(pMessage != nullptr);
			return;
		}
		pMessage->set_uuid(&guid, sizeof(guid));
	}

	// Read/write wstring message
	//
	QString Read(const Proto::wstring& message)
	{
		QString qstr = QString::fromUtf16(reinterpret_cast<const ushort*>(message.text().data()),
										  static_cast<int>(message.text().size() / 2) - 1);
		return qstr;
	}

	void Write(Proto::wstring* pMessage, const QString& str)
	{
		assert(sizeof(wchar_t) == 2);
		//static_assert(sizeof(wchar_t) == 2, "wchar_t must be 16-bit.");

		if (pMessage == nullptr)
		{
			assert(pMessage != nullptr);
			return;
		}

		pMessage->set_text(str.toStdWString().c_str(), (str.length() + 1) * sizeof(wchar_t));
	}
}


