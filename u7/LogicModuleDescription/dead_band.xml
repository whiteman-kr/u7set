<?xml version="1.0" encoding="UTF-8"?>
<LogicModule Name="LM1_SR04" DescriptionNumber="4" ConfigurationScriptFile="LM1_SF00_Conf.js" Version="1.0025">
		<AFBComponent Caption="DEAD_ZONE"	OpCode="24"	ImpVersion="6"		VersionOpIndex="16"	MaxInstCount="256" SimulationFunc="afb_deadzone_v6">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_data_x1"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_data_x2"		OpIndex ="3"	PinType = "Param"/>
			<Pin OpName="i_data"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="9"	PinType = "Output"/>			
			<Pin OpName="o_overflow"	OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_dz_edi"		OpIndex ="15"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="16"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="17"	PinType = "Output"/>
		</AFBComponent>

		<AFB id="#db1_fp_v1"       Caption="db1_fp"       Version="1.0010">
			<Properties>				
				<Description>Dead zone Block with float data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="16" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x1" Caption="DataX1" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                   
				<Param OpName="i_data_x2" Caption="DataX2" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                   
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db1_si_v1"       Caption="db1_si"       Version="1.0009">
			<Properties>				
				<Description>Dead zone Block with signed int data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="9" Size="32"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="16" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x1" Caption="DataX1" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>           
				<Param OpName="i_data_x2" Caption="DataX2" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>           
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db2_fp_v1"       Caption="db2_fp"       Version="1.0010">
			<Properties>
				<Description>Dead zone Block with float data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="16" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x1" Caption="DataX1" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                   
				<Param OpName="i_data_x2" Caption="DataX2" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                   
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db2_si_v1"       Caption="db2_si"       Version="1.0010">
			<Properties>
				<Description>Dead zone Block with signed int data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="9" Size="32"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="16" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x1" Caption="DataX1" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                               
				<Param OpName="i_data_x2" Caption="DataX2" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                               
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
(function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
})
				</AfterCreation>
			</CommonScript>
		</AFB>
</LogicModule>
