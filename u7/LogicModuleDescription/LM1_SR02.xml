<?xml version="1.0" encoding="UTF-8"?>
<LogicModule Name="LM1_SR02" DescriptionNumber="2" ConfigurationScriptFile="LM1_SR02_Conf.js" Version="1.0018">
	<FlashMemory>
	    <AppLogicFrameCount>256</AppLogicFrameCount>
		<AppLogicFramePayload>1016</AppLogicFramePayload>
		<AppLogicFrameSize>1024</AppLogicFrameSize>
		<AppLogicUartID>257</AppLogicUartID>
		<AppLogicWriteBitstream>true</AppLogicWriteBitstream>
		<ConfigFrameCount>256</ConfigFrameCount>
		<ConfigFramePayload>1016</ConfigFramePayload>
		<ConfigFrameSize>1016</ConfigFrameSize>
		<ConfigUartID>258</ConfigUartID>
		<ConfigWriteBitstream>true</ConfigWriteBitstream>
		<TuningFrameCount>256</TuningFrameCount>
		<TuningFramePayload>1016</TuningFramePayload>
		<TuningFrameSize>1024</TuningFrameSize>
		<TuningUartID>260</TuningUartID>
		<TuningWriteBitstream>true</TuningWriteBitstream>
		<MaxConfigurationCount>12</MaxConfigurationCount>
	</FlashMemory>
	<Memory>
	    <CodeMemorySize>98304</CodeMemorySize>
		<AppMemorySize>65536</AppMemorySize>
		<AppDataOffset>57782</AppDataOffset>
		<AppDataSize>2</AppDataSize>
		<AppLogicBitDataOffset>46080</AppLogicBitDataOffset>
		<AppLogicBitDataSize>256</AppLogicBitDataSize>
		<AppLogicWordDataOffset>53956</AppLogicWordDataOffset>
		<AppLogicWordDataSize>3570</AppLogicWordDataSize>
		<ModuleDataOffset>0</ModuleDataOffset>
		<ModuleDataSize>2560</ModuleDataSize>
		<ModuleCount>14</ModuleCount>
		<TuningDataOffset>46336</TuningDataOffset>
		<TuningDataSize>7620</TuningDataSize>				<!--TuningDataFrameCount * TuningDataFramePayload-->
		<TuningDataFrameCount>15</TuningDataFrameCount>
		<TuningDataFramePayload>508</TuningDataFramePayload>
		<TuningDataFrameSize>512</TuningDataFrameSize>
		<TxDiagDataOffset>57526</TxDiagDataOffset>
		<TxDiagDataSize>188</TxDiagDataSize>
	</Memory>
	<LogicUnit>
		<ClockFrequency>96000000</ClockFrequency>
		<CycleDuration>5000</CycleDuration>
		<IDRPhaseTime>500</IDRPhaseTime>
		<ALPPhaseTime>3500</ALPPhaseTime>
	</LogicUnit>
	<OptoInterface>
		<OptoPortCount>3</OptoPortCount>
		<OptoPortAppDataOffset>0</OptoPortAppDataOffset>
		<OptoPortAppDataSize>2560</OptoPortAppDataSize>		
		<OptoInterfaceDataOffset>35840</OptoInterfaceDataOffset>
		<OptoPortDataSize>2560</OptoPortDataSize>
	</OptoInterface>

    <LogicUnitCommnads>
	    <Command Caption="nop"		Code="0040"	CodeMask="07c0"	SimulationFunc="command_nop"		ParseFunc="parse_nop"		Description="No operation"/>
		<Command Caption="startafb"	Code="0080"	CodeMask="07c0"	SimulationFunc="command_startafb"	ParseFunc="parse_startafb"	Description="Start AFB"/>
		<Command Caption="stop"		Code="00C0"	CodeMask="07c0"	SimulationFunc="command_stop"		ParseFunc="parse_stop"		Description="Stop phase (IDR or ALP)"/>
		<Command Caption="mov"		Code="0100"	CodeMask="07c0"	SimulationFunc="command_mov"		ParseFunc="parse_mov"		Description="Copy 16-bit word from memory to memory"/>
		<Command Caption="movmem"	Code="0140"	CodeMask="07c0"	SimulationFunc="command_movmem"		ParseFunc="parse_movmem"	Description="Copy array of 16-bit words from memory to memory"/>
		<Command Caption="movc"		Code="0180"	CodeMask="07c0"	SimulationFunc="command_movc"		ParseFunc="parse_movc"		Description="Write 16-bit word constant to memory"/>
		<Command Caption="movbc"	Code="01C0"	CodeMask="07c0"	SimulationFunc="command_movbc"		ParseFunc="parse_movbc"		Description="Write 1-bit constant to memory"/>
		<Command Caption="wrfb"		Code="0200"	CodeMask="07c0"	SimulationFunc="command_wrfb"		ParseFunc="parse_wrfb"		Description="Read 16-bit word from memory and write to AFB input"/>
		<Command Caption="rdfb"		Code="0240"	CodeMask="07c0"	SimulationFunc="command_rdfb"		ParseFunc="parse_rdfb"		Description="Read 16-bit word from AFB output and write to memory"/>
		<Command Caption="wrfbc"	Code="0280"	CodeMask="07c0"	SimulationFunc="command_wrfbc"		ParseFunc="parse_wrfbc"		Description="Write 16-bit word constant to AFB input"/>
		<Command Caption="wrfbb"	Code="02C0"	CodeMask="07c0"	SimulationFunc="command_wrfbb"		ParseFunc="parse_wrfbb"		Description="Read 1-bit from memory and write to AFB input"/>
		<Command Caption="rdfbb"	Code="0300"	CodeMask="07c0"	SimulationFunc="command_rdfbb"		ParseFunc="parse_rdfbb"		Description="Read 1-bit from AFB output and write to memory"/>
		<Command Caption="rdfbts"	Code="0340"	CodeMask="07c0"	SimulationFunc="command_rdfbts"		ParseFunc="parse_rdfbts"	Description="Read 16-bit word from AFB output, compare to constant and set flag if equal"/>
		<Command Caption="setmem"	Code="0380"	CodeMask="07c0"	SimulationFunc="command_setmem"		ParseFunc="parse_setmem"	Description="Set memory area to 16-bit word constant"/>
		<Command Caption="movb"		Code="03C0"	CodeMask="07c0"	SimulationFunc="command_movb"		ParseFunc="parse_movb"		Description="Copy 1-bit from memory to memory"/>
		<Command Caption="nstart"	Code="0400"	CodeMask="07c0"	SimulationFunc="command_nstart"		ParseFunc="parse_nstart"	Description="Start AFB n-times"/>
		<Command Caption="appstart"	Code="0440"	CodeMask="07c0"	SimulationFunc="command_appstart"	ParseFunc="parse_appstart"	Description="Set ALP phase start address"/>
		<Command Caption="mov32"	Code="0480"	CodeMask="07c0"	SimulationFunc="command_mov32"		ParseFunc="parse_mov32"		Description="Copy 32-bit data from memory to memory"/>
		<Command Caption="movc32"	Code="04C0"	CodeMask="07c0"	SimulationFunc="command_movc32"		ParseFunc="parse_movc32"	Description="Write 32-bit constant to memory"/>
		<Command Caption="wrfb32"	Code="0500"	CodeMask="07c0"	SimulationFunc="command_wrfb32"		ParseFunc="parse_wrfb32"	Description="Read 32-bit data from memory and write to AFB input"/>
		<Command Caption="rdfb32"	Code="0540"	CodeMask="07c0"	SimulationFunc="command_rdfb32"		ParseFunc="parse_rdfb32"	Description="Read 32-bit data from AFB output and write to memory"/>
		<Command Caption="wrfbc32"	Code="0580"	CodeMask="07c0"	SimulationFunc="command_wrfbc32"	ParseFunc="parse_wrfbc32"	Description="Write 32-bit constant to AFB input"/>
		<Command Caption="rdfbts32"	Code="05C0"	CodeMask="07c0"	SimulationFunc="command_rdfbts32"	ParseFunc="parse_rdfbts32"	Description="Read 32-bit data from AFB output, compare to constant and set flag if equal"/>
		<Command Caption="movcf"	Code="0600"	CodeMask="07c0"	SimulationFunc="command_movcf"		ParseFunc="parse_movcf"		Description="Write 16-bit constant to memory if flag is set [rdfbts(32)]"/>
		<Command Caption="pmov"		Code="0640"	CodeMask="07c0"	SimulationFunc="command_pmov"		ParseFunc="parse_pmov"		Description="Copy 16-bit word from memory to memory written in prior cycle"/>
		<Command Caption="pmov32"	Code="0680"	CodeMask="07c0"	SimulationFunc="command_pmov32"		ParseFunc="parse_pmov32"	Description="Copy 32-bit data from memory to memory written in prior cycle"/>
		<Command Caption="fillb"	Code="06C0"	CodeMask="07c0"	SimulationFunc="command_fillb"		ParseFunc="parse_fillb"		Description="Fill 16-bit word with 1-bit constant and write it to memory"/>
	</LogicUnitCommnads>
	
	<AFBImplementation>
	    <AFBComponent Caption="LOGIC"		OpCode="1"	ImpVersion="206"	VersionOpIndex="22"	MaxInstCount="256" SimulationFunc="afb_logic">
			<Pin OpName="i_oprd_quant"	OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_bus_width"	OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_conf"		OpIndex ="2"	PinType = "Param"/>
			<Pin OpName="i_1_oprd"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_2_oprd"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_3_oprd"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_4_oprd"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_5_oprd"		OpIndex ="7"	PinType = "Input"/>
			<Pin OpName="i_6_oprd"		OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="i_7_oprd"		OpIndex ="9"	PinType = "Input"/>
			<Pin OpName="i_8_oprd"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="i_9_oprd"		OpIndex ="11"	PinType = "Input"/>
			<Pin OpName="i_10_oprd"		OpIndex ="12"	PinType = "Input"/>
			<Pin OpName="i_11_oprd"		OpIndex ="13"	PinType = "Input"/>
			<Pin OpName="i_12_oprd"		OpIndex ="14"	PinType = "Input"/>
			<Pin OpName="i_13_oprd"		OpIndex ="15"	PinType = "Input"/>
			<Pin OpName="i_14_oprd"		OpIndex ="16"	PinType = "Input"/>
			<Pin OpName="i_15_oprd"		OpIndex ="17"	PinType = "Input"/>
			<Pin OpName="i_16_oprd"		OpIndex ="18"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="20"	PinType = "Output"/>
			<Pin OpName="o_logic_edi"	OpIndex ="21"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="22"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="NOT"			OpCode="2"	ImpVersion="103"	VersionOpIndex="3"	MaxInstCount="1" SimulationFunc="afb_not">
			<Pin OpName="i_oprd"		OpIndex ="0"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="2"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="3"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="TCT"			OpCode="3"	ImpVersion="207"	VersionOpIndex="14"	MaxInstCount="1024" SimulationFunc="afb_tct">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_counter"		OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_counter_dff"	OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_wave_dff_in"	OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_wave"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_counter_dff"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_wave_dff_in"	OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_tct_edi"		OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="14"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="FLIP_FLOP" 	OpCode="4"  ImpVersion="106"    VersionOpIndex="9"	MaxInstCount="256" SimulationFunc="afb_flipflop">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_result"		OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_c_t_prev"	OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="i_r_c_t"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_s_d"			OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="6"	PinType = "Output"/>
			<Pin OpName="o_c_t"			OpIndex ="7"	PinType = "Output"/>
			<Pin OpName="o_ff_edi"		OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="9"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="CTUD"		OpCode="5"	ImpVersion="106"	VersionOpIndex="11"	MaxInstCount="256" SimulationFunc="afb_stud">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_counter_dff"	OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_wave_dff"	OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_wave"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_reset"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="7"	PinType = "Output"/>
			<Pin OpName="o_wave_dff"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_ctud_edi"	OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="11"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="MAJ"			OpCode="6"	ImpVersion="106"	VersionOpIndex="23"	MaxInstCount="256" SimulationFunc="afb_maj">
			<Pin OpName="i_conf_x"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_conf_y"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_1_oprd"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="i_2_oprd"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_3_oprd"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_4_oprd"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_5_oprd"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_6_oprd"		OpIndex ="7"	PinType = "Input"/>
			<Pin OpName="i_7_oprd"		OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="i_8_oprd"		OpIndex ="9"	PinType = "Input"/>
			<Pin OpName="i_9_oprd"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="i_10_oprd"		OpIndex ="11"	PinType = "Input"/>
			<Pin OpName="i_11_oprd"		OpIndex ="12"	PinType = "Input"/>
			<Pin OpName="i_12_oprd"		OpIndex ="13"	PinType = "Input"/>
			<Pin OpName="i_13_oprd"		OpIndex ="14"	PinType = "Input"/>
			<Pin OpName="i_14_oprd"		OpIndex ="15"	PinType = "Input"/>
			<Pin OpName="i_15_oprd"		OpIndex ="16"	PinType = "Input"/>
			<Pin OpName="i_16_oprd"		OpIndex ="17"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="19"	PinType = "Output"/>
			<Pin OpName="o_maj_edi"		OpIndex ="20"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="21"	PinType = "Output"/>
			<Pin OpName="o_maj_1err"	OpIndex ="22"	PinType = "Output"/>
			<Pin OpName="o_maj_2err"	OpIndex ="23"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="SRSST"		OpCode="7"	ImpVersion="104"	VersionOpIndex="5"	MaxInstCount="1" SimulationFunc="afb_srsst">
			<Pin OpName="i_data"		OpIndex ="0"	PinType = "Input"/>
			<Pin OpName="i_set"			OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_reset"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="4"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="5"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="BCOD"		OpCode="8"	ImpVersion="103"	VersionOpIndex="38"	MaxInstCount="256" SimulationFunc="afb_bcod">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_conf_x"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_1_oprd"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="i_2_oprd"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_3_oprd"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_4_oprd"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_5_oprd"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_6_oprd"		OpIndex ="7"	PinType = "Input"/>
			<Pin OpName="i_7_oprd"		OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="i_8_oprd"		OpIndex ="9"	PinType = "Input"/>
			<Pin OpName="i_9_oprd"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="i_10_oprd"		OpIndex ="11"	PinType = "Input"/>
			<Pin OpName="i_11_oprd"		OpIndex ="12"	PinType = "Input"/>
			<Pin OpName="i_12_oprd"		OpIndex ="13"	PinType = "Input"/>
			<Pin OpName="i_13_oprd"		OpIndex ="14"	PinType = "Input"/>
			<Pin OpName="i_14_oprd"		OpIndex ="15"	PinType = "Input"/>
			<Pin OpName="i_15_oprd"		OpIndex ="16"	PinType = "Input"/>
			<Pin OpName="i_16_oprd"		OpIndex ="17"	PinType = "Input"/>
			<Pin OpName="i_17_oprd"		OpIndex ="18"	PinType = "Input"/>
			<Pin OpName="i_18_oprd"		OpIndex ="19"	PinType = "Input"/>
			<Pin OpName="i_19_oprd"		OpIndex ="20"	PinType = "Input"/>
			<Pin OpName="i_20_oprd"		OpIndex ="21"	PinType = "Input"/>
			<Pin OpName="i_21_oprd"		OpIndex ="22"	PinType = "Input"/>
			<Pin OpName="i_22_oprd"		OpIndex ="23"	PinType = "Input"/>
			<Pin OpName="i_23_oprd"		OpIndex ="24"	PinType = "Input"/>
			<Pin OpName="i_24_oprd"		OpIndex ="25"	PinType = "Input"/>
			<Pin OpName="i_25_oprd"		OpIndex ="26"	PinType = "Input"/>
			<Pin OpName="i_26_oprd"		OpIndex ="27"	PinType = "Input"/>
			<Pin OpName="i_27_oprd"		OpIndex ="28"	PinType = "Input"/>
			<Pin OpName="i_28_oprd"		OpIndex ="29"	PinType = "Input"/>
			<Pin OpName="i_29_oprd"		OpIndex ="30"	PinType = "Input"/>
			<Pin OpName="i_30_oprd"		OpIndex ="31"	PinType = "Input"/>
			<Pin OpName="i_31_oprd"		OpIndex ="32"	PinType = "Input"/>
			<Pin OpName="i_32_oprd"		OpIndex ="33"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="34"	PinType = "Output"/>
			<Pin OpName="o_in_activ"	OpIndex ="36"	PinType = "Output"/>
			<Pin OpName="o_bcod_edi"	OpIndex ="37"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="38"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="BDEC"		OpCode="9"	ImpVersion="103"	VersionOpIndex="37"	MaxInstCount="256" SimulationFunc="afb_bdec">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_conf_y"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_number"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="o_1_result"	OpIndex ="4"	PinType = "Output"/>
			<Pin OpName="o_2_result"	OpIndex ="5"	PinType = "Output"/>
			<Pin OpName="o_3_result"	OpIndex ="6"	PinType = "Output"/>
			<Pin OpName="o_4_result"	OpIndex ="7"	PinType = "Output"/>
			<Pin OpName="o_5_result"	OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_6_result"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_7_result"	OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_8_result"	OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_9_result"	OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_10_result"	OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_11_result"	OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_12_result"	OpIndex ="15"	PinType = "Output"/>
			<Pin OpName="o_13_result"	OpIndex ="16"	PinType = "Output"/>
			<Pin OpName="o_14_result"	OpIndex ="17"	PinType = "Output"/>
			<Pin OpName="o_15_result"	OpIndex ="18"	PinType = "Output"/>
			<Pin OpName="o_16_result"	OpIndex ="19"	PinType = "Output"/>
			<Pin OpName="o_17_result"	OpIndex ="20"	PinType = "Output"/>
			<Pin OpName="o_18_result"	OpIndex ="21"	PinType = "Output"/>
			<Pin OpName="o_19_result"	OpIndex ="22"	PinType = "Output"/>
			<Pin OpName="o_20_result"	OpIndex ="23"	PinType = "Output"/>
			<Pin OpName="o_21_result"	OpIndex ="24"	PinType = "Output"/>
			<Pin OpName="o_22_result"	OpIndex ="25"	PinType = "Output"/>
			<Pin OpName="o_23_result"	OpIndex ="26"	PinType = "Output"/>
			<Pin OpName="o_24_result"	OpIndex ="27"	PinType = "Output"/>
			<Pin OpName="o_25_result"	OpIndex ="28"	PinType = "Output"/>
			<Pin OpName="o_26_result"	OpIndex ="29"	PinType = "Output"/>
			<Pin OpName="o_27_result"	OpIndex ="30"	PinType = "Output"/>
			<Pin OpName="o_28_result"	OpIndex ="31"	PinType = "Output"/>
			<Pin OpName="o_29_result"	OpIndex ="32"	PinType = "Output"/>
			<Pin OpName="o_30_result"	OpIndex ="33"	PinType = "Output"/>
			<Pin OpName="o_31_result"	OpIndex ="34"	PinType = "Output"/>
			<Pin OpName="o_32_result"	OpIndex ="35"	PinType = "Output"/>
			<Pin OpName="o_bdec_edi"	OpIndex ="36"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="37"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="BCOMP"		OpCode="10"	ImpVersion="110"	VersionOpIndex="12"	MaxInstCount="512" SimulationFunc="afb_bcomp">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_sp_s"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_sp_r"		OpIndex ="3"	PinType = "Param"/>
			<Pin OpName="i_result"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_data"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_bcomp_edi"	OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="12"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="DAMPER"		OpCode="11"	ImpVersion="111"	VersionOpIndex="21"	MaxInstCount="256" SimulationFunc="afb_damper">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_del"			OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_data_dff"	OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_data"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_track"		OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="o_y"			OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="15"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="16"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="17"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="18"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="19"	PinType = "Output"/>
			<Pin OpName="o_damp_edi"	OpIndex ="20"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="21"	PinType = "Output"/>			
		</AFBComponent>
		<AFBComponent Caption="MEM"			OpCode="12"	ImpVersion="5"		VersionOpIndex="44"	MaxInstCount="256" SimulationFunc="afb_mem">
			<Pin OpName="i_count"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_conf"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_1_en"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="i_2_en"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_3_en"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_4_en"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_5_en"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_6_en"		OpIndex ="7"	PinType = "Input"/>
			<Pin OpName="i_7_en"		OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="i_8_en"		OpIndex ="9"	PinType = "Input"/>
			<Pin OpName="i_1_oprd"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="i_2_oprd"		OpIndex ="12"	PinType = "Input"/>
			<Pin OpName="i_3_oprd"		OpIndex ="14"	PinType = "Input"/>
			<Pin OpName="i_4_oprd"		OpIndex ="16"	PinType = "Input"/>
			<Pin OpName="i_5_oprd"		OpIndex ="18"	PinType = "Input"/>
			<Pin OpName="i_6_oprd"		OpIndex ="20"	PinType = "Input"/>
			<Pin OpName="i_7_oprd"		OpIndex ="22"	PinType = "Input"/>
			<Pin OpName="i_8_oprd"		OpIndex ="24"	PinType = "Input"/>
			<Pin OpName="o_med"			OpIndex ="28"	PinType = "Output"/>
			<Pin OpName="o_max"			OpIndex ="30"	PinType = "Output"/>
			<Pin OpName="o_min"			OpIndex ="32"	PinType = "Output"/>
			<Pin OpName="o_med_in"		OpIndex ="34"	PinType = "Output"/>
			<Pin OpName="o_max_in"		OpIndex ="35"	PinType = "Output"/>
			<Pin OpName="o_min_in"		OpIndex ="36"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="37"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="38"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="39"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="40"	PinType = "Output"/>
			<Pin OpName="o_div_by_zero"	OpIndex ="41"	PinType = "Output"/>
			<Pin OpName="o_mem_edi"		OpIndex ="43"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="44"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="MATH"		OpCode="13"	ImpVersion="104"	VersionOpIndex="14"	MaxInstCount="256" SimulationFunc="afb_math">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_1_oprd"		OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_2_oprd"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="6"	PinType = "Output"/>
			<Pin OpName="o_mat_edi"		OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_div_by_zero"	OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="14"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="SCALE"		OpCode="14"	ImpVersion="107"	VersionOpIndex="16"	MaxInstCount="256" SimulationFunc="afb_scale">
			<Pin OpName="i_conf"			OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_scal_k1_coef"	OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_scal_k2_coef"	OpIndex ="3"	PinType = "Param"/>
			<Pin OpName="i_ui_data"			OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_si_fp_data"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="o_ui_result"		OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_si_fp_result"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_scal_edi"		OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_overflow"		OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_underflow"		OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_zero"			OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_nan"				OpIndex ="15"	PinType = "Output"/>
			<Pin OpName="o_version"			OpIndex ="16"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="FUNC"		OpCode="16"	ImpVersion="1"		VersionOpIndex="13"	MaxInstCount="256" SimulationFunc="afb_func">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_data"		OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="5"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="7"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_div_by_zero"	OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_funct_edi"	OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="13"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="INT"			OpCode="17"	ImpVersion="5"		VersionOpIndex="29"	MaxInstCount="256" SimulationFunc="afb_int">
			<Pin OpName="i_ki"			OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_ti"			OpIndex ="2"	PinType = "Param"/>
			<Pin OpName="i_max"			OpIndex ="4"	PinType = "Param"/>
			<Pin OpName="i_min"			OpIndex ="6"	PinType = "Param"/>
			<Pin OpName="i_ri_const"	OpIndex ="8"	PinType = "Param"/>
			<Pin OpName="i_yi_prev"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="i_x_tr"		OpIndex ="12"	PinType = "Input"/>
			<Pin OpName="i_x"			OpIndex ="14"	PinType = "Input"/>
			<Pin OpName="i_reset"		OpIndex ="16"	PinType = "Input"/>
			<Pin OpName="i_pause"		OpIndex ="17"	PinType = "Input"/>
			<Pin OpName="i_track"		OpIndex ="18"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="20"	PinType = "Output"/>
			<Pin OpName="o_max"			OpIndex ="22"	PinType = "Output"/>
			<Pin OpName="o_min"			OpIndex ="23"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="24"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="25"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="26"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="27"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="28"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="29"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="DPCOMP"		OpCode="20"	ImpVersion="3"		VersionOpIndex="16"	MaxInstCount="512" SimulationFunc="afb_dpcomp">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_hys"			OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_result"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="i_data"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_sp_in"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_dpcomp_edi"	OpIndex ="15"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="16"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="MUX"			OpCode="21"	ImpVersion="1"		VersionOpIndex="8"	MaxInstCount="1" SimulationFunc="afb_mux">
			<Pin OpName="i_sel"			OpIndex ="0"	PinType = "Input"/>
			<Pin OpName="i_x1_data"		OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_x2_data"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="6"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="8"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="LATCH"		OpCode="22"	ImpVersion="3"		VersionOpIndex="15"	MaxInstCount="256" SimulationFunc="afb_latch">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_set_prev"	OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_y_prev"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="i_data"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_set"			OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_reset"		OpIndex ="7"	PinType = "Input"/>
			<Pin OpName="o_set_prev"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_y_prev"		OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_result"		OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_latch_edi"	OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="15"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="LIM"			OpCode="23"	ImpVersion="7"		VersionOpIndex="14"	MaxInstCount="256" SimulationFunc="afb_lim">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_lim_max"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_lim_min"		OpIndex ="3"	PinType = "Param"/>
			<Pin OpName="i_data"		OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_lim_edi"		OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_max"			OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_min"			OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="15"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="DEAD_ZONE"	OpCode="24"	ImpVersion="6"		VersionOpIndex="13"	MaxInstCount="256" SimulationFunc="afb_deadzone">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_data_x"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_data"		OpIndex ="3"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="6"	PinType = "Output"/>			
			<Pin OpName="o_overflow"	OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="11"	PinType = "Output"/>
			<Pin OpName="o_dz_edi"		OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="14"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="POL"			OpCode="25"	ImpVersion="3"		VersionOpIndex="31"	MaxInstCount="256" SimulationFunc="afb_pol">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_1_oprd"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_2_oprd"		OpIndex ="3"	PinType = "Param"/>
			<Pin OpName="i_3_oprd"		OpIndex ="5"	PinType = "Param"/>
			<Pin OpName="i_4_oprd"		OpIndex ="7"	PinType = "Param"/>
			<Pin OpName="i_5_oprd"		OpIndex ="9"	PinType = "Param"/>
			<Pin OpName="i_6_oprd"		OpIndex ="11"	PinType = "Param"/>
			<Pin OpName="i_7_oprd"		OpIndex ="13"	PinType = "Param"/>
			<Pin OpName="i_8_oprd"		OpIndex ="15"	PinType = "Param"/>
			<Pin OpName="i_9_oprd"		OpIndex ="17"	PinType = "Param"/>
			<Pin OpName="i_10_oprd"		OpIndex ="19"	PinType = "Param"/>
			<Pin OpName="i_data"		OpIndex ="21"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="24"	PinType = "Output"/>
			<Pin OpName="o_pol_edi"		OpIndex ="26"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="27"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="28"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="29"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="30"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="31"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="DER"			OpCode="26"	ImpVersion="4"		VersionOpIndex="28"	MaxInstCount="256" SimulationFunc="afb_der">
			<Pin OpName="i_kd"			OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_td"			OpIndex ="2"	PinType = "Param"/>
			<Pin OpName="i_max"			OpIndex ="4"	PinType = "Param"/>
			<Pin OpName="i_min"			OpIndex ="6"	PinType = "Param"/>
			<Pin OpName="i_x_prev"		OpIndex ="8"	PinType = "Param"/>
			<Pin OpName="i_yd_prev"		OpIndex ="10"	PinType = "Param"/>
			<Pin OpName="i_x"			OpIndex ="12"	PinType = "Input"/>
			<Pin OpName="i_reset"		OpIndex ="14"	PinType = "Input"/>
			<Pin OpName="i_pause"		OpIndex ="15"	PinType = "Input"/>
			<Pin OpName="o_x_prev"		OpIndex ="17"	PinType = "Output"/>
			<Pin OpName="o_result"		OpIndex ="19"	PinType = "Output"/>
			<Pin OpName="o_max"			OpIndex ="21"	PinType = "Output"/>
			<Pin OpName="o_min"			OpIndex ="22"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="23"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="24"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="25"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="26"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="27"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="28"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="MISMATCH"	OpCode="27"	ImpVersion="1"		VersionOpIndex="22"	MaxInstCount="256" SimulationFunc="afb_mismatch">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_conf_n"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_ust"			OpIndex ="2"	PinType = "Param"/>
			<Pin OpName="i_x1_data"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_x2_data"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_x3_data"		OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="i_x4_data"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="o_x1_mismatch"	OpIndex ="12"	PinType = "Output"/>
			<Pin OpName="o_x2_mismatch"	OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_x3_mismatch"	OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_x4_mismatch"	OpIndex ="15"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="16"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="17"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="18"	PinType = "Output"/>
			<Pin OpName="o_zero"		OpIndex ="19"	PinType = "Output"/>
			<Pin OpName="o_nan"			OpIndex ="20"	PinType = "Output"/>
			<Pin OpName="o_amismatch_edi"	OpIndex ="21"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="22"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="TCONV"		OpCode="28"	ImpVersion="0"		VersionOpIndex="11"	MaxInstCount="256" SimulationFunc="afb_tconv">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_data_x"		OpIndex ="1"	PinType = "Input"/>
			<Pin OpName="i_data"		OpIndex ="2"	PinType = "Input"/>
			<Pin OpName="o_result_y"	OpIndex ="4"	PinType = "Output"/>
			<Pin OpName="o_result"		OpIndex ="5"	PinType = "Output"/>
			<Pin OpName="o_overflow"	OpIndex ="7"	PinType = "Output"/>
			<Pin OpName="o_underflow"	OpIndex ="8"	PinType = "Output"/>			
			<Pin OpName="o_nan"			OpIndex ="9"	PinType = "Output"/>
			<Pin OpName="o_tconv_edi"	OpIndex ="10"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="11"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="INDICATION" OpCode="29" ImpVersion="0" VersionOpIndex="13" MaxInstCount="256" SimulationFunc="afb_indication">
		    <Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_input"		OpIndex ="4"	PinType = "Input"/>
			<Pin OpName="i_ack"			OpIndex ="5"	PinType = "Input"/>
			<Pin OpName="i_test"		OpIndex ="6"	PinType = "Input"/>
			<Pin OpName="i_sync"		OpIndex ="7"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="8"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="13"	PinType = "Output"/>
		</AFBComponent>
		<AFBComponent Caption="PULSE_GEN" OpCode="30" ImpVersion="0" VersionOpIndex="17" MaxInstCount="256" SimulationFunc="afb_pulse_gen">
			<Pin OpName="i_conf"		OpIndex ="0"	PinType = "Param"/>
			<Pin OpName="i_t_high"		OpIndex ="1"	PinType = "Param"/>
			<Pin OpName="i_t_low"		OpIndex ="3"	PinType = "Param"/>
			<Pin OpName="i_start_from"	OpIndex ="8"	PinType = "Input"/>
			<Pin OpName="i_enable"		OpIndex ="9"	PinType = "Input"/>
			<Pin OpName="i_sync"		OpIndex ="10"	PinType = "Input"/>
			<Pin OpName="o_result"		OpIndex ="13"	PinType = "Output"/>
			<Pin OpName="o_sync"		OpIndex ="14"	PinType = "Output"/>
			<Pin OpName="o_param_err"	OpIndex ="16"	PinType = "Output"/>
			<Pin OpName="o_version"		OpIndex ="17"	PinType = "Output"/>			
		</AFBComponent>
	</AFBImplementation>
	<AFBL>
	    <AFB id="#bus_switch_v1"       Caption="bus_switch"       Version="1.0002">
		    <Properties>
			    <Description>Multiplexor Block selects one of two input bus signals and output result in accordance with control signal.</Description>
				<Category>Bus Logic</Category>
				<OpCode>21</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_sel" Caption="sel" Type="Discrete" ByteOrder="BigEndian" OpIndex="0" Size="1"/>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Bus" ByteOrder="BigEndian" OpIndex="1" Size="32" BusDataFormat="Discrete"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Bus" ByteOrder="BigEndian" OpIndex="3" Size="32" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="6" Size="32" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_voter_v1"           Caption="bus_voter"           Version="1.0001">
		    <Properties>
			    <Description>Majority Block is intended to define majority decision in accordance with control signal and received configuration.</Description>
				<Category>Bus Logic</Category>
				<OpCode>6</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>19</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_1_oprd" Caption="in_1"   Type="Bus" ByteOrder="BigEndian" OpIndex="2"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_2_oprd" Caption="in_2"   Type="Bus" ByteOrder="BigEndian" OpIndex="3"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_3_oprd" Caption="in_3"   Type="Bus" ByteOrder="BigEndian" OpIndex="4"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_4_oprd" Caption="in_4"   Type="Bus" ByteOrder="BigEndian" OpIndex="5"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_5_oprd" Caption="in_5"   Type="Bus" ByteOrder="BigEndian" OpIndex="6"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_6_oprd" Caption="in_6"   Type="Bus" ByteOrder="BigEndian" OpIndex="7"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_7_oprd" Caption="in_7"   Type="Bus" ByteOrder="BigEndian" OpIndex="8"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_8_oprd" Caption="in_8"   Type="Bus" ByteOrder="BigEndian" OpIndex="9"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_9_oprd" Caption="in_9"   Type="Bus" ByteOrder="BigEndian" OpIndex="10" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Bus" ByteOrder="BigEndian" OpIndex="11" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Bus" ByteOrder="BigEndian" OpIndex="12" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Bus" ByteOrder="BigEndian" OpIndex="13" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Bus" ByteOrder="BigEndian" OpIndex="14" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Bus" ByteOrder="BigEndian" OpIndex="15" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Bus" ByteOrder="BigEndian" OpIndex="16" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Bus" ByteOrder="BigEndian" OpIndex="17" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="19" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf_x" Caption="XCount" Visible="true" OpIndex="0" Size="4" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>15</HighLimit>
					<Script>
					    <Changed>
						    function(videoItemFblElement, afbElement)
							{
							    var xCount = videoItemFblElement.getParamIntValue("XCount");
								if (xCount == -1)
								{
								    return false;
								}

                                var yCount = videoItemFblElement.getParamIntValue("YCount");
								if (yCount == -1)
								{
								    return false;
								}

                                if (xCount &gt;= yCount)
								{
								    videoItemFblElement.setAfbParamByOpName("i_conf_x", yCount - 1);
									return false;
								}
								return true;
							}
							</Changed>
					</Script>
				</Param>
				<Param OpName="i_conf_y" Caption="YCount" Visible="true" OpIndex="1" Size="4" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>3</Value>
					<Default>3</Default>
					<LowLimit>3</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
					    <Changed>
						    function(videoItemFblElement, afbElement)
							{
							    var xCount = videoItemFblElement.getParamIntValue("XCount");
								if (xCount == -1)
								{
								    return false;
								}

                                var yCount = videoItemFblElement.getParamIntValue("YCount");
								if (yCount == -1)
								{
								    return false;
								}

                                if (yCount &lt;= xCount)
								{
								    videoItemFblElement.setAfbParamByOpName("i_conf_y", xCount + 1);
								}

                                return createInputSignals(videoItemFblElement, afbElement);
							}
							</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library>
				    function createInputSignals(videoItemFblElement, afbElement)
					{
					    videoItemFblElement.removeInputSignals();

                        var yCount = videoItemFblElement.getParamIntValue("YCount");
						if (yCount == -1)
						{
						    return false;
						}

                        var opIndex = 2;
						for (var i = 0; i &lt; yCount; i++)
						{
						    var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
							if (afbInputSignal != null)
							{
							    var caption = afbInputSignal.jsCaption();
								var type = afbInputSignal.jsType();
								var operandIndex = afbInputSignal.operandIndex();
								var size = afbInputSignal.size();
								videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
							}
							opIndex++;
						}

                        videoItemFblElement.adjustHeight();

                        return true;
					}
					</Library>
				<AfterCreation>
				function(videoItemFblElement, afbElement)
				{
				    return createInputSignals(videoItemFblElement, afbElement);
				}
				</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_not_v1"            Caption="bus_not"            Version="1.0001">
		    <Properties>
			    <Description>NOT Block outputs the logical inverse of the input in accordance with control signal.</Description>
				<Category>Bus Logic</Category>
				<OpCode>2</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>19</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_oprd" Caption="in" Type="Bus" ByteOrder="BigEndian" OpIndex="0" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="2" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_xor_v1"             Caption="bus_xor"             Version="1.0000">
		    <Properties>
			    <Description>XOR Block outputs the logical XOR operation for inputs in accordance with control signal.</Description>
				<Category>Bus Logic</Category>
				<OpCode>1</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_1_oprd"  Caption="in_1"  Type="Bus" ByteOrder="BigEndian" OpIndex="3"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_2_oprd"  Caption="in_2"  Type="Bus" ByteOrder="BigEndian" OpIndex="4"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_3_oprd"  Caption="in_3"  Type="Bus" ByteOrder="BigEndian" OpIndex="5"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_4_oprd"  Caption="in_4"  Type="Bus" ByteOrder="BigEndian" OpIndex="6"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_5_oprd"  Caption="in_5"  Type="Bus" ByteOrder="BigEndian" OpIndex="7"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_6_oprd"  Caption="in_6"  Type="Bus" ByteOrder="BigEndian" OpIndex="8"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_7_oprd"  Caption="in_7"  Type="Bus" ByteOrder="BigEndian" OpIndex="9"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_8_oprd"  Caption="in_8"  Type="Bus" ByteOrder="BigEndian" OpIndex="10" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_9_oprd"  Caption="in_9"  Type="Bus" ByteOrder="BigEndian" OpIndex="11" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Bus" ByteOrder="BigEndian" OpIndex="12" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Bus" ByteOrder="BigEndian" OpIndex="13" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Bus" ByteOrder="BigEndian" OpIndex="14" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Bus" ByteOrder="BigEndian" OpIndex="15" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Bus" ByteOrder="BigEndian" OpIndex="16" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Bus" ByteOrder="BigEndian" OpIndex="17" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Bus" ByteOrder="BigEndian" OpIndex="18" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="20" Size="16"  BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			    <Param OpName="i_oprd_quant" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
					    <Changed>
						    function(videoItemFblElement, afbElement)
							{
							    return createInputSignals(videoItemFblElement, afbElement);
							}
							</Changed>
					</Script>
				</Param>
				<Param OpName="i_bus_width" Caption="BusWidth" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>16</Value>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="2" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>3</Value>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library>
				    function createInputSignals(videoItemFblElement, afbElement)
					{
					    videoItemFblElement.removeInputSignals();

                        var count = videoItemFblElement.getParamIntValue("OperandCount");
						if (count == -1)
						{
						    return false;
						}
						if (count &lt; 2)
						{
						    count = 2;
						}
						if (count &gt; 16)
						{
						    count = 16;
						}

                        var opIndex = 3;
						for (var i = 0; i &lt; count; i++)
						{
						    var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
							if (afbInputSignal != null)
							{
							    var caption = afbInputSignal.jsCaption();
								var type = afbInputSignal.jsType();
								var operandIndex = afbInputSignal.operandIndex();
								var size = afbInputSignal.size();
								videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
							}
							opIndex++;
						}

                        videoItemFblElement.adjustHeight();

                        return true;
					}
					</Library>
				<AfterCreation>
				    function(videoItemFblElement, afbElement)
					{
					    return createInputSignals(videoItemFblElement, afbElement);
					}
					</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_or_v1"             Caption="bus_or"             Version="1.0002">
			<Properties>				
				<Description>OR Block outputs the logical OR operation for inputs in accordance with control signal.</Description>
				<Category>Bus Logic</Category>
				<OpCode>1</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_1_oprd"  Caption="in_1"  Type="Bus" ByteOrder="BigEndian" OpIndex="3"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_2_oprd"  Caption="in_2"  Type="Bus" ByteOrder="BigEndian" OpIndex="4"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_3_oprd"  Caption="in_3"  Type="Bus" ByteOrder="BigEndian" OpIndex="5"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_4_oprd"  Caption="in_4"  Type="Bus" ByteOrder="BigEndian" OpIndex="6"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_5_oprd"  Caption="in_5"  Type="Bus" ByteOrder="BigEndian" OpIndex="7"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_6_oprd"  Caption="in_6"  Type="Bus" ByteOrder="BigEndian" OpIndex="8"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_7_oprd"  Caption="in_7"  Type="Bus" ByteOrder="BigEndian" OpIndex="9"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_8_oprd"  Caption="in_8"  Type="Bus" ByteOrder="BigEndian" OpIndex="10" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_9_oprd"  Caption="in_9"  Type="Bus" ByteOrder="BigEndian" OpIndex="11" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Bus" ByteOrder="BigEndian" OpIndex="12" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Bus" ByteOrder="BigEndian" OpIndex="13" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Bus" ByteOrder="BigEndian" OpIndex="14" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Bus" ByteOrder="BigEndian" OpIndex="15" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Bus" ByteOrder="BigEndian" OpIndex="16" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Bus" ByteOrder="BigEndian" OpIndex="17" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Bus" ByteOrder="BigEndian" OpIndex="18" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="20" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
				<Param OpName="i_oprd_quant" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_bus_width" Caption="BusWidth" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>16</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="2" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 16)
	{
		count = 16;
	}

	var opIndex = 3;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_simlock_v1"         Caption="bus_simlock"         Version="1.0002">
			<Properties>				
				<Description>Locking and simulation module</Description>
				<Category>Bus Logic</Category>
				<OpCode>7</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_data" Caption="in" Type="Bus" ByteOrder="BigEndian" OpIndex="0" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_set" Caption="sim" Type="Bus" ByteOrder="BigEndian" OpIndex="1" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_reset" Caption="block" Type="Bus" ByteOrder="BigEndian" OpIndex="2" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="4" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_and_v1"          Caption="bus_and"          Version="1.0002">
			<Properties>
				<Description>AND Block outputs the logical AND operation for inputs in accordance with control signal.</Description>
				<Category>Bus Logic</Category>
				<OpCode>1</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_1_oprd"  Caption="in_1"  Type="Bus" ByteOrder="BigEndian" OpIndex="3"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_2_oprd"  Caption="in_2"  Type="Bus" ByteOrder="BigEndian" OpIndex="4"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_3_oprd"  Caption="in_3"  Type="Bus" ByteOrder="BigEndian" OpIndex="5"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_4_oprd"  Caption="in_4"  Type="Bus" ByteOrder="BigEndian" OpIndex="6"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_5_oprd"  Caption="in_5"  Type="Bus" ByteOrder="BigEndian" OpIndex="7"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_6_oprd"  Caption="in_6"  Type="Bus" ByteOrder="BigEndian" OpIndex="8"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_7_oprd"  Caption="in_7"  Type="Bus" ByteOrder="BigEndian" OpIndex="9"  Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_8_oprd"  Caption="in_8"  Type="Bus" ByteOrder="BigEndian" OpIndex="10" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_9_oprd"  Caption="in_9"  Type="Bus" ByteOrder="BigEndian" OpIndex="11" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Bus" ByteOrder="BigEndian" OpIndex="12" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Bus" ByteOrder="BigEndian" OpIndex="13" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Bus" ByteOrder="BigEndian" OpIndex="14" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Bus" ByteOrder="BigEndian" OpIndex="15" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Bus" ByteOrder="BigEndian" OpIndex="16" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Bus" ByteOrder="BigEndian" OpIndex="17" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Bus" ByteOrder="BigEndian" OpIndex="18" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="20" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
				<Param OpName="i_oprd_quant" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_bus_width" Caption="BusWidth" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>16</Value>
					<Script>
						<Changed/>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="2" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed/>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 16)
	{
		count = 16;
	}

	var opIndex = 3;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>	
	
		<AFB id="#add_fp_v1"       Caption="add_fp"       Version="1.0005">
			<Properties>
				<Description>Adder Block with float data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="9" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="10" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="12" Size="1"/>            
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}						
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}						
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	
	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>
        <AFB id="#add_si_v1"       Caption="add_si"       Version="1.0005">
			<Properties>            
				<Description>Adder Block with signed int data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>            
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>				
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
			
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#and_v1"          Caption="and"          Version="1.0004">
			<Properties>
				<Description>AND Block outputs the logical AND operation for inputs in accordance with control signal.</Description>
				<Category>Logic</Category>
				<OpCode>1</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd"  Caption="in_1"  Type="Discrete" ByteOrder="BigEndian" OpIndex="3"  Size="1"/>
				<Pin OpName="i_2_oprd"  Caption="in_2"  Type="Discrete" ByteOrder="BigEndian" OpIndex="4"  Size="1"/>
				<Pin OpName="i_3_oprd"  Caption="in_3"  Type="Discrete" ByteOrder="BigEndian" OpIndex="5"  Size="1"/>
				<Pin OpName="i_4_oprd"  Caption="in_4"  Type="Discrete" ByteOrder="BigEndian" OpIndex="6"  Size="1"/>
				<Pin OpName="i_5_oprd"  Caption="in_5"  Type="Discrete" ByteOrder="BigEndian" OpIndex="7"  Size="1"/>
				<Pin OpName="i_6_oprd"  Caption="in_6"  Type="Discrete" ByteOrder="BigEndian" OpIndex="8"  Size="1"/>
				<Pin OpName="i_7_oprd"  Caption="in_7"  Type="Discrete" ByteOrder="BigEndian" OpIndex="9"  Size="1"/>
				<Pin OpName="i_8_oprd"  Caption="in_8"  Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="i_9_oprd"  Caption="in_9"  Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_oprd_quant" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_bus_width" Caption="BusWidth" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed/>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="2" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed/>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 16)
	{
		count = 16;
	}

	var opIndex = 3;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmp_dh_fp_eq_v1" Caption="cmp_dh_fp_eq" Version="1.0006">
			<Properties>								
				<Description>Comparator Block, equal single-precision floating-point comparison (dynamic deadband)</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="hysteresis" Caption="db" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>

			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>

				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>	

		<AFB id="#cmp_dh_fp_gr_v1" Caption="cmp_dh_fp_gr" Version="1.0006">
			<Properties>												
				<Description>Comparator Block, greater than single-precision floating-point format comparison (dynamic hysteresis)</Description>
				 <Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="hysteresis" Caption="hyst" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Default>6</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_dh_fp_ls_v1" Caption="cmp_dh_fp_ls" Version="1.0006">
			<Properties>												
				<Description>Comparator Block, less than single-precision floating-point comparison (dynamic hysteresis)</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="hysteresis" Caption="hyst" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>7</Value>
					<Default>7</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_dh_fp_ne_v1" Caption="cmp_dh_fp_ne" Version="1.0006">
			<Properties>								
				<Description>Comparator Block, not equal single-precision floating-point format comparison (dynamic deadband)</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="hysteresis" Caption="db" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>8</Value>
					<Default>8</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
			</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_fp_eq_v1"    Caption="cmp_fp_eq"    Version="1.0007">
			<Properties>
				<Description>Comparator Block, equal single-precision floating-point comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_fp_gr_v1"    Caption="cmp_fp_gr"    Version="1.0007">
			<Properties>				
				<Description>Comparator Block, greater than single-precision floating-point format comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>

				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Default>6</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>	

		<AFB id="#cmp_fp_ls_v1"    Caption="cmp_fp_ls"    Version="1.0007">
			<Properties>
				<Description>Comparator Block, less than single-precision floating-point comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>7</Value>
					<Default>7</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmp_fp_ne_v1"    Caption="cmp_fp_ne"    Version="1.0007">
			<Properties>				
				<Description>Comparator Block, not equal single-precision floating-point format comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>8</Value>
					<Default>8</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmp_si_eq_v1"    Caption="cmp_si_eq"    Version="1.0006">
			<Properties>
				<Description>Comparator Block, equal 32-bit signed int comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_si_gr_v1"    Caption="cmp_si_gr"    Version="1.0006">
			<Properties>								
				<Description>Comparator Block, greater than 32-bit signed integer comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_si_ls_v1"    Caption="cmp_si_ls"    Version="1.0006">
			<Properties>								
				<Description>Comparator Block, less than 32-bit signed integer comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#cmp_si_ne_v1"    Caption="cmp_si_ne"    Version="1.0006">
			<Properties>
				<Description>Comparator Block, not equal 32-bit signed integer comparison</Description>
				<Category>Compare</Category>
				<OpCode>20</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_sp_in" Caption="set" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>	

		<AFB id="#cmpc_fp_eq_v1"   Caption="cmpc_fp_eq"   Version="1.0007">
			<Properties>
				<Description>Comparator Block, equal single-precision floating-point comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>				
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
			</Outputs>
			<Params>
				 <Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				  </Param>
				  <Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_fp_gr_v1"   Caption="cmpc_fp_gr"   Version="1.0007">
			<Properties>				
				<Description>Comparator Block, greater than single-precision floating-point format comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>				
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
			</Outputs>
			<Params>
			   <Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Default>6</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_fp_ls_v1"   Caption="cmpc_fp_ls"   Version="1.0008">
			<Properties>								
				<Description>Comparator Block, less than single-precision floating-point comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>				
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
			</Outputs>
			<Params>
			   <Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>7</Value>
					<Default>7</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_fp_ne_v1"   Caption="cmpc_fp_ne"   Version="1.0007">
			<Properties>				
				<Description>Comparator Block, not equal single-precision floating-point format comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>				
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>8</Value>
					<Default>8</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_si_eq_v1"   Caption="cmpc_si_eq"   Version="1.0006">
			<Properties>
				<Description>Comparator Block, equal 32-bit signed int comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_si_gr_v1"   Caption="cmpc_si_gr"   Version="1.0006">
			<Properties>				
				<Description>Comparator Block, greater than 32-bit signed integer comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_si_ls_v1"   Caption="cmpc_si_ls"   Version="1.0006">
			<Properties>
				<Description>Comparator Block, less than 32-bit signed integer comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cmpc_si_ne_v1"   Caption="cmpc_si_ne"   Version="1.0006">
			<Properties>				
				<Description>Comparator Block, not equal 32-bit signed integer comparison with constant value</Description>
				<Category>Compare</Category>
				<OpCode>10</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_sp_s" Caption="SetPoint" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="hysteresis" Caption="Deadband" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				 <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cnt_dn_v1"	   Caption="cnt_dn"       Version="1.0005">
			<Properties>
				<Description>Down Counter Block performs the function of an Down Counter in accordance with control signal and received configuration.</Description>
				<Category>Counter</Category>
				<OpCode>5</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="7" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cnt_up_v1"       Caption="cnt_up"       Version="1.0005">
			<Properties>				
				<Description>Up Counter Block performs the function of an Up Counter in accordance with control signal and received configuration.</Description>
				<Category>Counter</Category>
				<OpCode>5</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="7" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#cod_v1"          Caption="cod"          Version="1.0007">
			<Properties>
				<Description>Binary Coder Block analyses input signals state strictly inorder in 32 downto in 1 and detects the number of inputs that are equal to 1. First detected number will be outputted in accordance with control signal.</Description>
				<Category>Logic</Category>
				<OpCode>8</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="i_9_oprd" Caption="in_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_17_oprd" Caption="in_17" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="i_18_oprd" Caption="in_18" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="i_19_oprd" Caption="in_19" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
				<Pin OpName="i_20_oprd" Caption="in_20" Type="Discrete" ByteOrder="BigEndian" OpIndex="21" Size="1"/>
				<Pin OpName="i_21_oprd" Caption="in_21" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="i_22_oprd" Caption="in_22" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="i_23_oprd" Caption="in_23" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="i_24_oprd" Caption="in_24" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="i_25_oprd" Caption="in_25" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="i_26_oprd" Caption="in_26" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="i_27_oprd" Caption="in_27" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
				<Pin OpName="i_28_oprd" Caption="in_28" Type="Discrete" ByteOrder="BigEndian" OpIndex="29" Size="1"/>
				<Pin OpName="i_29_oprd" Caption="in_29" Type="Discrete" ByteOrder="BigEndian" OpIndex="30" Size="1"/>
				<Pin OpName="i_30_oprd" Caption="in_30" Type="Discrete" ByteOrder="BigEndian" OpIndex="31" Size="1"/>
				<Pin OpName="i_31_oprd" Caption="in_31" Type="Discrete" ByteOrder="BigEndian" OpIndex="32" Size="1"/>
				<Pin OpName="i_32_oprd" Caption="in_32" Type="Discrete" ByteOrder="BigEndian" OpIndex="33" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="34" Size="32"/>
				<Pin OpName="o_in_activ" Caption="active" Type="Discrete" ByteOrder="BigEndian" OpIndex="36" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
						<Value>1</Value>
						<Default>1</Default>
						<LowLimit>1</LowLimit>
						<HighLimit>2</HighLimit>
						<Script>
							<Changed></Changed>
						</Script>
				</Param>
				<Param OpName="i_conf_x" Caption="OperandCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>32</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
				function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 1)
	{
		count = 1;
	}
	if (count &gt; 32)
	{
		count = 32;
	}

	var opIndex = 2;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>
		
		<AFB id="#cod_num_v1"          Caption="cod_num"          Version="1.0005">
			<Properties>
				<Description>Binary Coder Bus Block analyses input signals state strictly inorder in 32 downto in 1 and detects the bit mask of inputs that are equal to 1. A bit mask will be outputted in accordance with control signal.</Description>
				<Category>Logic</Category>
				<OpCode>8</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="i_9_oprd" Caption="in_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_17_oprd" Caption="in_17" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="i_18_oprd" Caption="in_18" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="i_19_oprd" Caption="in_19" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
				<Pin OpName="i_20_oprd" Caption="in_20" Type="Discrete" ByteOrder="BigEndian" OpIndex="21" Size="1"/>
				<Pin OpName="i_21_oprd" Caption="in_21" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="i_22_oprd" Caption="in_22" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="i_23_oprd" Caption="in_23" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="i_24_oprd" Caption="in_24" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="i_25_oprd" Caption="in_25" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="i_26_oprd" Caption="in_26" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="i_27_oprd" Caption="in_27" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
				<Pin OpName="i_28_oprd" Caption="in_28" Type="Discrete" ByteOrder="BigEndian" OpIndex="29" Size="1"/>
				<Pin OpName="i_29_oprd" Caption="in_29" Type="Discrete" ByteOrder="BigEndian" OpIndex="30" Size="1"/>
				<Pin OpName="i_30_oprd" Caption="in_30" Type="Discrete" ByteOrder="BigEndian" OpIndex="31" Size="1"/>
				<Pin OpName="i_31_oprd" Caption="in_31" Type="Discrete" ByteOrder="BigEndian" OpIndex="32" Size="1"/>
				<Pin OpName="i_32_oprd" Caption="in_32" Type="Discrete" ByteOrder="BigEndian" OpIndex="33" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="34" Size="32"/>				
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
						<Value>2</Value>
						<Default>2</Default>
						<LowLimit>1</LowLimit>
						<HighLimit>2</HighLimit>
						<Script>
							<Changed></Changed>
						</Script>
				</Param>
				<Param OpName="i_conf_x" Caption="OperandCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>32</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
				function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 1)
	{
		count = 1;
	}
	if (count &gt; 32)
	{
		count = 32;
	}

	var opIndex = 2;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#damp_fp_v1"      Caption="damp_fp"      Version="1.0011">
			<Properties>				
				<Description>Damper Block with float data format</Description>
				<Category>Damper</Category>
				<OpCode>11</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="i_track" Caption="track" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_del" Caption="dtime" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="13" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
			</Outputs>
			<Params>				
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutputUnconditional(videoItemFblElement, afbElement, signalCaption)
{
	var s = afbElement.getAfbSignalByCaption(signalCaption);
	if (s != null)
	{
		videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
	}
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	createOutputUnconditional(videoItemFblElement, afbElement, "out");	
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{	
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#damp_si_v1"      Caption="damp_si"      Version="1.0012">
			<Properties>				
				<Description>Damper Block with signed int data format</Description>
				<Category>Damper</Category>
				<OpCode>11</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
				<Pin OpName="i_track" Caption="track" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_del" Caption="dtime" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="13" Size="32"/>						
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
			</Outputs>
			<Params>				
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>           
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
            function createOutputUnconditional(videoItemFblElement, afbElement, signalCaption)
{
	var s = afbElement.getAfbSignalByCaption(signalCaption);
	if (s != null)
	{
		videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
	}
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	createOutputUnconditional(videoItemFblElement, afbElement, "out");	
	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{	
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#dampc_fp_v1"     Caption="dampc_fp"     Version="1.0012">
			<Properties>				
				<Description>Damper Block with float data format</Description>
				<Category>Damper</Category>
				<OpCode>11</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>				
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="13" Size="32"/>

				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_del" Caption="DTime" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_track" Caption="track" Visible="false" OpIndex="8" Size="1" Instantiator="false" User="false" Type="Discrete" ByteOrder="BigEndian">
					<Value>0</Value>
					<Default>0</Default>					
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutputUnconditional(videoItemFblElement, afbElement, signalCaption)
{
	var s = afbElement.getAfbSignalByCaption(signalCaption);
	if (s != null)
	{
		videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
	}
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	createOutputUnconditional(videoItemFblElement, afbElement, "out");	
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");


	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{	
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#dampc_si_v1"     Caption="dampc_si"     Version="1.0013">
			<Properties>				
				<Description>Damper Block with signed int data format</Description>
				<Category>Damper</Category>
				<OpCode>11</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>				
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="13" Size="32"/>						
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_del" Caption="DTime" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>           
				<Param OpName="i_track" Caption="track" Visible="false" OpIndex="8" Size="1" Instantiator="false" User="false" Type="Discrete" ByteOrder="BigEndian">
					<Value>0</Value>
					<Default>0</Default>					
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutputUnconditional(videoItemFblElement, afbElement, signalCaption)
{
	var s = afbElement.getAfbSignalByCaption(signalCaption);
	if (s != null)
	{
		videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
	}
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	createOutputUnconditional(videoItemFblElement, afbElement, "out");	
	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{	
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db1_fp_v1"       Caption="db1_fp"       Version="1.0008">
			<Properties>				
				<Description>Dead zone Block with float data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x" Caption="DataX" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                   
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db1_si_v1"       Caption="db1_si"       Version="1.0007">
			<Properties>				
				<Description>Dead zone Block with signed int data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x" Caption="DataX" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>           
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db2_fp_v1"       Caption="db2_fp"       Version="1.0008">
			<Properties>
				<Description>Dead zone Block with float data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x" Caption="DataX" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                   
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#db2_si_v1"       Caption="db2_si"       Version="1.0007">
			<Properties>
				<Description>Dead zone Block with signed int data format generates zero output within a specified region in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>24</OpCode>
				<HasRam>false</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_data_x" Caption="DataX" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                               
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#dec_v1"          Caption="dec"          Version="1.0006">
			<Properties>				
				<Description>Binary Decoder Block sets the needed output to state 1 in accordance with the received number and control signal.</Description>
				<Category>Logic</Category>
				<OpCode>9</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_number" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_1_oprd" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="o_2_oprd" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="o_3_oprd" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="o_4_oprd" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="o_5_oprd" Caption="out_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_6_oprd" Caption="out_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_7_oprd" Caption="out_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_8_oprd" Caption="out_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_9_oprd" Caption="out_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_10_oprd" Caption="out_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_11_oprd" Caption="out_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_12_oprd" Caption="out_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_13_oprd" Caption="out_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_14_oprd" Caption="out_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_15_oprd" Caption="out_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_16_oprd" Caption="out_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="o_17_oprd" Caption="out_17" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
				<Pin OpName="o_18_oprd" Caption="out_18" Type="Discrete" ByteOrder="BigEndian" OpIndex="21" Size="1"/>
				<Pin OpName="o_19_oprd" Caption="out_19" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_20_oprd" Caption="out_20" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="o_21_oprd" Caption="out_21" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="o_22_oprd" Caption="out_22" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="o_23_oprd" Caption="out_23" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="o_24_oprd" Caption="out_24" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="o_25_oprd" Caption="out_25" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
				<Pin OpName="o_26_oprd" Caption="out_26" Type="Discrete" ByteOrder="BigEndian" OpIndex="29" Size="1"/>
				<Pin OpName="o_27_oprd" Caption="out_27" Type="Discrete" ByteOrder="BigEndian" OpIndex="30" Size="1"/>
				<Pin OpName="o_28_oprd" Caption="out_28" Type="Discrete" ByteOrder="BigEndian" OpIndex="31" Size="1"/>
				<Pin OpName="o_29_oprd" Caption="out_29" Type="Discrete" ByteOrder="BigEndian" OpIndex="32" Size="1"/>
				<Pin OpName="o_30_oprd" Caption="out_30" Type="Discrete" ByteOrder="BigEndian" OpIndex="33" Size="1"/>
				<Pin OpName="o_31_oprd" Caption="out_31" Type="Discrete" ByteOrder="BigEndian" OpIndex="34" Size="1"/>
				<Pin OpName="o_32_oprd" Caption="out_32" Type="Discrete" ByteOrder="BigEndian" OpIndex="35" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
						<Value>1</Value>
						<Default>1</Default>
						<LowLimit>1</LowLimit>
						<HighLimit>2</HighLimit>
						<Script>
							<Changed></Changed>
						</Script>
				</Param>
				<Param OpName="i_conf_y" Caption="OutputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>32</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
				function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

	var count = videoItemFblElement.getParamIntValue("OutputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 1)
	{
		count = 1;
	}
	if (count &gt; 32)
	{
		count = 32;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbSignal != null)
		{
			var caption = afbSignal.jsCaption();
			var type = afbSignal.jsType();
			var operandIndex = afbSignal.operandIndex();
			var size = afbSignal.size();
			videoItemFblElement.addOutputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>
		
		<AFB id="#dec_num_v1"          Caption="dec_num"          Version="1.0003">
			<Properties>				
				<Description>Binary Decoder Block sets outputs to state 1 in accordance with bits set in the received number and control signal.</Description>
				<Category>Logic</Category>
				<OpCode>9</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_number" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_1_oprd" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="o_2_oprd" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="o_3_oprd" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="o_4_oprd" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="o_5_oprd" Caption="out_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_6_oprd" Caption="out_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_7_oprd" Caption="out_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_8_oprd" Caption="out_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_9_oprd" Caption="out_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_10_oprd" Caption="out_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_11_oprd" Caption="out_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_12_oprd" Caption="out_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_13_oprd" Caption="out_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_14_oprd" Caption="out_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_15_oprd" Caption="out_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_16_oprd" Caption="out_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="o_17_oprd" Caption="out_17" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
				<Pin OpName="o_18_oprd" Caption="out_18" Type="Discrete" ByteOrder="BigEndian" OpIndex="21" Size="1"/>
				<Pin OpName="o_19_oprd" Caption="out_19" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_20_oprd" Caption="out_20" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="o_21_oprd" Caption="out_21" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="o_22_oprd" Caption="out_22" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="o_23_oprd" Caption="out_23" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="o_24_oprd" Caption="out_24" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="o_25_oprd" Caption="out_25" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
				<Pin OpName="o_26_oprd" Caption="out_26" Type="Discrete" ByteOrder="BigEndian" OpIndex="29" Size="1"/>
				<Pin OpName="o_27_oprd" Caption="out_27" Type="Discrete" ByteOrder="BigEndian" OpIndex="30" Size="1"/>
				<Pin OpName="o_28_oprd" Caption="out_28" Type="Discrete" ByteOrder="BigEndian" OpIndex="31" Size="1"/>
				<Pin OpName="o_29_oprd" Caption="out_29" Type="Discrete" ByteOrder="BigEndian" OpIndex="32" Size="1"/>
				<Pin OpName="o_30_oprd" Caption="out_30" Type="Discrete" ByteOrder="BigEndian" OpIndex="33" Size="1"/>
				<Pin OpName="o_31_oprd" Caption="out_31" Type="Discrete" ByteOrder="BigEndian" OpIndex="34" Size="1"/>
				<Pin OpName="o_32_oprd" Caption="out_32" Type="Discrete" ByteOrder="BigEndian" OpIndex="35" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
						<Value>2</Value>
						<Default>2</Default>
						<LowLimit>1</LowLimit>
						<HighLimit>2</HighLimit>
						<Script>
							<Changed></Changed>
						</Script>
				</Param>
				<Param OpName="i_conf_y" Caption="OutputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>32</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
				function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

	var count = videoItemFblElement.getParamIntValue("OutputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 1)
	{
		count = 1;
	}
	if (count &gt; 32)
	{
		count = 32;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbSignal != null)
		{
			var caption = afbSignal.jsCaption();
			var type = afbSignal.jsType();
			var operandIndex = afbSignal.operandIndex();
			var size = afbSignal.size();
			videoItemFblElement.addOutputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#deriv_v1"        Caption="deriv"        Version="1.0009">
			<Properties>				
				<Description>Derive Block performs derivative calculation function in accordance with control signals.</Description>
				<Category>Other</Category>
				<OpCode>26</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_pause" Caption="pause" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_kd" Caption="kd" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="0" Size="32"/>
				<Pin OpName="i_td" Caption="td" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="19" Size="32"/>
				<Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="21" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
			</Outputs>
			<Params>				
				<Param OpName="i_max" Caption="Max" Visible="true" OpIndex="4" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_min" Caption="Min" Visible="true" OpIndex="6" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#derivc_v1"       Caption="derivc"       Version="1.0009">
			<Properties>				
				<Description>Derive Block performs derivative calculation function in accordance with control signals.</Description>
				<Category>Other</Category>
				<OpCode>26</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>				
			</Properties>
			<Inputs>
				<Pin OpName="i_x" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_pause" Caption="pause" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="19" Size="32"/>
				<Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="21" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_kd" Caption="Kd" Visible="true" OpIndex="0" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_td" Caption="Td" Visible="true" OpIndex="2" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
				    <Value>5</Value>
					<Default>5</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>350000</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_max" Caption="Max" Visible="true" OpIndex="4" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_min" Caption="Min" Visible="true" OpIndex="6" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#div_fp_v1"       Caption="div_fp"       Version="1.0005">
			<Properties>				
				<Description>Divider Block with float data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>				
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_div_by_zero" Caption="div_by_zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>8</Value>
					<Default>8</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutDivByZero" Caption="OutDivByZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutDivByZero", "div_by_zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
            
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#div_si_v1"       Caption="div_si"       Version="1.0005">
			<Properties>				
				<Description>Divider Block with signed int data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>						   
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_div_by_zero" Caption="div_by_zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutDivByZero" Caption="OutDivByZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutDivByZero", "div_by_zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#ff_d_decay_v1"   Caption="ff_d_decay"   Version="1.0005">
			<Properties>				
				<Description>The D Flip-Flop Block captures the value of the D-input at a decay portion of the clock cycle.</Description>
				<Category>FlipFlop</Category>
				<OpCode>4</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_s_d" Caption="d" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_r_c_t" Caption="c" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>                
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>
		
		<AFB id="#ff_d_front_v1"   Caption="ff_d_front"   Version="1.0005">
			<Properties>				
				<Description>The D Flip-Flop Block captures the value of the D-input at a front portion of the clock cycle.</Description>
				<Category>FlipFlop</Category>
				<OpCode>4</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_s_d" Caption="d" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_r_c_t" Caption="c" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>                
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#ff_rs_v1"        Caption="ff_rs"        Version="1.0005">
			<Properties>				
				<Description>Set/Reset Block performs input data validity checking, sets or resets the input data to 1 or 0 state respectively and outputs the result. The Reset signal has the priority.</Description>
				<Category>FlipFlop</Category>
				<OpCode>4</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_s_d" Caption="s" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_r_c_t" Caption="r" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>                
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#ff_sr_v1"        Caption="ff_sr"        Version="1.0005">
			<Properties>				
				<Description>Set/Reset Block performs input data validity checking, sets or resets the input data to 1 or 0 state respectively and outputs the result. The Reset signal has the priority.</Description>
				<Category>FlipFlop</Category>
				<OpCode>4</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_s_d" Caption="s" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_r_c_t" Caption="r" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>                
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#ff_t_decay_v1"   Caption="ff_t_decay"   Version="1.0005">
			<Properties>				
				<Description>If the T input is high, the T Flip-Flop changes state ("toggles") whenever the clock input is strobed. If the T input is low, the Flip-Flop holds the previous value. Changes state at a decay.</Description>
				<Category>FlipFlop</Category>
				<OpCode>4</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_r_c_t" Caption="t" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#ff_t_front_v1"   Caption="ff_t_front"   Version="1.0005">
			<Properties>				
				<Description>If the T input is high, the T Flip-Flop changes state ("toggles") whenever the clock input is strobed. If the T input is low, the Flip-Flop holds the previous value. Changes state at a front.</Description>
				<Category>FlipFlop</Category>
				<OpCode>4</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_r_c_t" Caption="t" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#integrator_v1"   Caption="integrator"   Version="1.0009">
			<Properties>				
				<Description>Integral Block performs integral calculation function in accordance with control signals.</Description>
				<Category>Other</Category>
				<OpCode>17</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x_tr" Caption="track_in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
				<Pin OpName="i_x" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="14" Size="32"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_pause" Caption="pause" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_track" Caption="track" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="i_ki" Caption="ki" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="0" Size="32"/>
				<Pin OpName="i_ti" Caption="ti" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
				<Pin OpName="i_min" Caption="min" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="i_max" Caption="max" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_ri_const" Caption="ri_const" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="8" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="20" Size="32"/>
				<Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
			</Outputs>
			<Params>				
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#integratorc_v1"  Caption="integratorc"  Version="1.0008">
			<Properties>
				<Description>Integral Block performs integral calculation function in accordance with control signals.</Description>
				<Category>Other</Category>
				<OpCode>17</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x_tr" Caption="track_in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
				<Pin OpName="i_x" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="14" Size="32"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_pause" Caption="pause" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_track" Caption="track" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="20" Size="32"/>
				<Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="24" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="25" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="26" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_ki" Caption="KI" Visible="true" OpIndex="0" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_ti" Caption="TI" Visible="true" OpIndex="2" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
				    <Value>5</Value>
					<Default>5</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>350000</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_max" Caption="Max" Visible="true" OpIndex="4" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_min" Caption="Min" Visible="true" OpIndex="6" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_ri_const" Caption="RIConst" Visible="true" OpIndex="8" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                             
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_decay_fp_v1" Caption="latch_decay_fp" Version="1.0006">
			<Properties>				
				<Description>Latch Block performs a latching of the input(floating-point) value by decay and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>30</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_set" Caption="set" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_decay_si_v1" Caption="latch_decay_si" Version="1.0006">
			<Properties>				
				<Description>Latch Block performs a latching of the input(signed integer) value by decay and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>30</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_set" Caption="set" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_front_fp_v1" Caption="latch_front_fp" Version="1.0006">
			<Properties>				
				<Description>Latch Block performs a latching of the input(floating-point) value by front and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>30</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_set" Caption="set" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_front_si_v1" Caption="latch_front_si" Version="1.0006">
			<Properties>				
				<Description>Latch Block performs a latching of the input(signed integer) value by front and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>30</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_set" Caption="set" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_state_fp_v1" Caption="latch_state_fp" Version="1.0006">
			<Properties>
				<Description>Latch Block performs a latching of the input(floating-point) value by state and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>30</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_set" Caption="set" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_state_si_v1" Caption="latch_state_si" Version="1.0006">
			<Properties>				
				<Description>Latch Block performs a latching of the input(signed integer) value by state and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>30</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_set" Caption="set" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_tm1_fp_v1"   Caption="latch_tm1_fp"   Version="1.0005">
			<Properties>				
				<Description>Latch Block performs a latching of the input(floating-point) value by one cycle and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>				
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#latch_tm1_si_v1"   Caption="latch_tm1_si"   Version="1.0006">
			<Properties>				
				<Description>Latch Block performs a latching of the input(signed integer) value by one cycle and outputs result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>22</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>				
				<Pin OpName="i_reset" Caption="reset" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="12" Size="32"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#lim_fp_v1"         Caption="lim_fp"         Version="1.0010">
			<Properties>				
				<Description>Limiter Block limits the value of a signal to be within the range specified by tunable limits.</Description>
				<Category>Other</Category>
				<OpCode>23</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
				<Pin OpName="i_lim_max" Caption="max_val" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
				<Pin OpName="i_lim_min" Caption="min_val" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="8" Size="32"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>            
				<Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				 <Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMax" Caption="OutMax" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMin" Caption="OutMin" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
		
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	
	createOutput(videoItemFblElement, afbElement, "OutMax", "max");
	createOutput(videoItemFblElement, afbElement, "OutMin", "min");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#lim_si_v1"         Caption="lim_si"         Version="1.0009">
			<Properties>				
				<Description>Limiter Block limits the value of a signal to be within the range specified by tunable limits.</Description>
				<Category>Other</Category>
				<OpCode>23</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="5" Size="32"/>
				<Pin OpName="i_lim_max" Caption="max_val" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
				<Pin OpName="i_lim_min" Caption="min_val" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>			
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="8" Size="32"/>
                <Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				 <Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutMax" Caption="OutMax" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMin" Caption="OutMin" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutMax", "max");
	createOutput(videoItemFblElement, afbElement, "OutMin", "min");
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>
		
		<AFB id="#limc_fp_v1"         Caption="limc_fp"         Version="1.0000">
			<Properties>				
				<Description>Limiter Block limits the value of a signal to be within the range specified by tunable limits.</Description>
				<Category>Other</Category>
				<OpCode>23</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="8" Size="32"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>            
				<Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>
				 <Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMax" Caption="OutMax" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMin" Caption="OutMin" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_lim_max" Caption="Max" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_lim_min" Caption="Min" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                        
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
		
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	
	createOutput(videoItemFblElement, afbElement, "OutMax", "max");
	createOutput(videoItemFblElement, afbElement, "OutMin", "min");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#limc_si_v1"         Caption="limc_si"         Version="1.0000">
			<Properties>				
				<Description>Limiter Block limits the value of a signal to be within the range specified by tunable limits.</Description>
				<Category>Other</Category>
				<OpCode>23</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="5" Size="32"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="8" Size="32"/>
                <Pin OpName="o_max" Caption="max" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_min" Caption="min" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>
				 <Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutMax" Caption="OutMax" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMin" Caption="OutMin" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_lim_max" Caption="Max" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_lim_min" Caption="Min" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>                        
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutMax", "max");
	createOutput(videoItemFblElement, afbElement, "OutMin", "min");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_abs_fp_v1"    Caption="math_abs_fp"    Version="1.0005">
			<Properties>								
				<Description>Function Block outputs the absolute value of the input signal</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_abs_si_v1"    Caption="math_abs_si"    Version="1.0005">
			<Properties>				
				<Description>Function Block outputs the absolute value of the input signal in signed integer data forma</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>8</Value>
					<Default>8</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_cos_fp_v1"    Caption="math_cos_fp"    Version="1.0006">
			<Properties>				
				<Description>mathtion Block outputs the cosine calculation result</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_exp_fp_v1"    Caption="math_exp_fp"    Version="1.0005">
			<Properties>				
				<Description>Function Block outputs the exponential calculation result</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>				
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Default>6</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
	}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_inv_fp_v1"    Caption="math_inv_fp"    Version="1.0005">
			<Properties>				
				<Description>Function Block outputs the inversion value of the input signal in accordance with control signals</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_div_by_zero" Caption="div_by_zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>7</Value>
					<Default>7</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutDivByZero" Caption="OutDivByZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutDivByZero", "div_by_zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_loge_fp_v1"   Caption="math_loge_fp"   Version="1.0005">
			<Properties>				
				<Description>Function Block outputs the natural logarithmic calculation result</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>            
				
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>            
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_sin_fp_v1"    Caption="math_sin_fp"    Version="1.0005">
			<Properties>				
				<Description>Function Block outputs the sine calculation result</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#math_sqrt_fp_v1"   Caption="math_sqrt_fp"   Version="1.0005">
			<Properties>				
				<Description>Function Block outputs the square root calculation result</Description>
				<Category>Math</Category>
				<OpCode>16</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>           
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>            
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#median_fp_v1"      Caption="median_fp"      Version="1.0006">
			<Properties>				
				<Description>Median and extremum Block outputs a median value and an extremum value (minimum and maximum) in accordance with control signals. Float data format</Description>
				<Category>Logic</Category>
				<OpCode>12</OpCode>
				<HasRam>false</HasRam>
				<RequiredStart>true</RequiredStart>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="10" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="12" Size="32"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="14" Size="32"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat= "Float" OpIndex="16" Size="32"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="18" Size="32"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="20" Size="32"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="22" Size="32"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="24" Size="32"/>
				<Pin OpName="i_1_en" Caption="in_1_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
				<Pin OpName="i_2_en" Caption="in_2_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_3_en" Caption="in_3_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_4_en" Caption="in_4_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_5_en" Caption="in_5_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_6_en" Caption="in_6_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_7_en" Caption="in_7_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_8_en" Caption="in_8_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_med" Caption="med" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="28" Size="32"/>
				<Pin OpName="o_max" Caption="max" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="30" Size="32"/>
				<Pin OpName="o_min" Caption="min" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="32" Size="32"/>
				<Pin OpName="o_med_in" Caption="med_in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="34" Size="16"/>
				<Pin OpName="o_max_in" Caption="max_in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="35" Size="16"/>
				<Pin OpName="o_min_in" Caption="min_in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="36" Size="16"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="37" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="38" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="39" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="40" Size="1"/>      
			</Outputs>
			<Params>
				<Param OpName="i_count" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>3</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutMax" Caption="OutMax" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMin" Caption="OutMin" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMedIn" Caption="OutMedIn" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMaxIn" Caption="OutMaxIn" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMinIn" Caption="OutMinIn" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 3)
	{
		count = 3;
	}
	if (count &gt; 8)
	{
		count = 8;
	}

	var opIndex = 10;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}

	opIndex = 2;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutputUnconditional(videoItemFblElement, afbElement, signalCaption)
{
	var s = afbElement.getAfbSignalByCaption(signalCaption);
	if (s != null)
	{
		videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
	}
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	createOutputUnconditional(videoItemFblElement, afbElement, "med");	
	
	createOutput(videoItemFblElement, afbElement, "OutMax", "max");
	createOutput(videoItemFblElement, afbElement, "OutMin", "min");
	createOutput(videoItemFblElement, afbElement, "OutMedIn", "med_in");
	createOutput(videoItemFblElement, afbElement, "OutMaxIn", "max_in");
	createOutput(videoItemFblElement, afbElement, "OutMinIn", "min_in");

    createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#median_si_v1"      Caption="median_si"      Version="1.0005">
			<Properties>
				<Description>Median and extremum Block outputs a median value and an extremum value (minimum and maximum) in accordance with control signals. Signed int data format</Description>
				<Category>Logic</Category>
				<OpCode>12</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="10" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="12" Size="32"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="14" Size="32"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="16" Size="32"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="18" Size="32"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="20" Size="32"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="22" Size="32"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="24" Size="32"/>
				<Pin OpName="i_1_en" Caption="in_1_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
				<Pin OpName="i_2_en" Caption="in_2_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_3_en" Caption="in_3_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_4_en" Caption="in_4_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_5_en" Caption="in_5_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_6_en" Caption="in_6_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_7_en" Caption="in_7_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_8_en" Caption="in_8_en" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_med" Caption="med" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="28" Size="32"/>
				<Pin OpName="o_max" Caption="max" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="30" Size="32"/>
				<Pin OpName="o_min" Caption="min" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="32" Size="32"/>
				<Pin OpName="o_med_in" Caption="med_in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="34" Size="5"/>
				<Pin OpName="o_max_in" Caption="max_in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="35" Size="5"/>
				<Pin OpName="o_min_in" Caption="min_in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="36" Size="5"/>
			</Outputs>
			<Params>
				<Param OpName="i_count" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>3</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutMax" Caption="OutMax" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMin" Caption="OutMin" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMedIn" Caption="OutMedIn" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMaxIn" Caption="OutMaxIn" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutMinIn" Caption="OutMinIn" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 3)
	{
		count = 3;
	}
	if (count &gt; 8)
	{
		count = 8;
	}

	var opIndex = 10;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}

	opIndex = 2;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutputUnconditional(videoItemFblElement, afbElement, signalCaption)
{
	var s = afbElement.getAfbSignalByCaption(signalCaption);
	if (s != null)
	{
		videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
	}
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	createOutputUnconditional(videoItemFblElement, afbElement, "med");	
	
	createOutput(videoItemFblElement, afbElement, "OutMax", "max");
	createOutput(videoItemFblElement, afbElement, "OutMin", "min");
	createOutput(videoItemFblElement, afbElement, "OutMedIn", "med_in");
	createOutput(videoItemFblElement, afbElement, "OutMaxIn", "max_in");
	createOutput(videoItemFblElement, afbElement, "OutMinIn", "min_in");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#mismatch_fp_v1"    Caption="mismatch_fp"    Version="1.0009">
			<Properties>				
				<Description>Analog mismatch block</Description>
				<Category>Other</Category>
				<OpCode>27</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="i_x3_data" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="8" Size="32"/>
				<Pin OpName="i_x4_data" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="10" Size="32"/>                               
			</Inputs>
			<Outputs>
				<Pin OpName="o_x1_mismatch" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_x2_mismatch" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_x3_mismatch" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_x4_mismatch" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>     
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_ust" Caption="Value" Visible="true" OpIndex="2" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#mismatch_d_fp_v1"    Caption="mismatch_d_fp"    Version="1.0001">
			<Properties>				
				<Description>Analog mismatch block</Description>
				<Category>Other</Category>
				<OpCode>27</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="i_x3_data" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="8" Size="32"/>
				<Pin OpName="i_x4_data" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="10" Size="32"/>
				<Pin OpName="i_ust" Caption="value" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_x1_mismatch" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_x2_mismatch" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_x3_mismatch" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_x4_mismatch" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>     
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
    videoItemFblElement.removeInputSignal("in_1");
	videoItemFblElement.removeInputSignal("in_2");
	videoItemFblElement.removeInputSignal("in_3");
	videoItemFblElement.removeInputSignal("in_4");

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#mismatch_r_fp_v1"  Caption="mismatch_r_fp"  Version="1.0006">
			<Properties>				
				<Description>Analog mismatch block with limits</Description>
				<Category>Other</Category>
				<OpCode>27</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="4" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
				<Pin OpName="i_x3_data" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="8" Size="32"/>
				<Pin OpName="i_x4_data" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="10" Size="32"/>                               
			</Inputs>
			<Outputs>
				<Pin OpName="o_x1_mismatch" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_x2_mismatch" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_x3_mismatch" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_x4_mismatch" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>     
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_ust" Caption="Value" Visible="false" OpIndex="2" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_relvalue" Caption="RelValue" Visible="true" OpIndex="-1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>5</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>100</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>%</Units>
				</Param>
				<Param OpName="i_lowlim" Caption="LowLimit" Visible="true" OpIndex="-1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_highlim" Caption="HighLimit" Visible="true" OpIndex="-1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#mismatch_r_si_v1"  Caption="mismatch_r_si"  Version="1.0007">
			<Properties>				
				<Description>Analog mismatch block with limits</Description>
				<Category>Other</Category>
				<OpCode>27</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
				<Pin OpName="i_x3_data" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="8" Size="32"/>
				<Pin OpName="i_x4_data" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="10" Size="32"/>                               
			</Inputs>
			<Outputs>
				<Pin OpName="o_x1_mismatch" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_x2_mismatch" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_x3_mismatch" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_x4_mismatch" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>                
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>            
				<Param OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_ust" Caption="Value" Visible="false" OpIndex="2" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_relvalue" Caption="RelValue" Visible="true" OpIndex="-1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="float">
					<Value>5</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>100</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>%</Units>
				</Param>
				<Param OpName="i_lowlim" Caption="LowLimit" Visible="true" OpIndex="-1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483647</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_highlim" Caption="HighLimit" Visible="true" OpIndex="-1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483647</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>  
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");
	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#mismatch_si_v1"    Caption="mismatch_si"    Version="1.0010">
			<Properties>				
				<Description>Analog mismatch block</Description>
				<Category>Other</Category>
				<OpCode>27</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
				<Pin OpName="i_x3_data" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="8" Size="32"/>
				<Pin OpName="i_x4_data" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="10" Size="32"/>                               
			</Inputs>
			<Outputs>
				<Pin OpName="o_x1_mismatch" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_x2_mismatch" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_x3_mismatch" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_x4_mismatch" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>                
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>            
				<Param OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_ust" Caption="Value" Visible="true" OpIndex="2" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#mul_fp_v1"         Caption="mul_fp"         Version="1.0005">
			<Properties>				
				<Description>Multiply Block with float data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>				
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>            
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>7</Value>
					<Default>7</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#mismatch_d_si_v1"    Caption="mismatch_d_si"    Version="1.0001">
			<Properties>				
				<Description>Analog mismatch block</Description>
				<Category>Other</Category>
				<OpCode>27</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_x1_data" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
				<Pin OpName="i_x3_data" Caption="in_3" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="8" Size="32"/>
				<Pin OpName="i_x4_data" Caption="in_4" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="10" Size="32"/>
				<Pin OpName="i_ust" Caption="value" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_x1_mismatch" Caption="out_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_x2_mismatch" Caption="out_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_x3_mismatch" Caption="out_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_x4_mismatch" Caption="out_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>                
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>            
				<Param OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignal("in_1");
	videoItemFblElement.removeInputSignal("in_2");
	videoItemFblElement.removeInputSignal("in_3");
	videoItemFblElement.removeInputSignal("in_4");

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
				</AfterCreation>
			</CommonScript>
		</AFB>		

		<AFB id="#mul_si_v1"         Caption="mul_si"         Version="1.0005">
			<Properties>				
				<Description>Multiply Block with signed int data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>				
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#not_v1"            Caption="not"            Version="1.0005">
			<Properties>				
				<Description>NOT Block outputs the logical inverse of the input in accordance with control signal.</Description>
				<Category>Logic</Category>
				<OpCode>2</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_oprd" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="0" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
			</Outputs>
			<Params>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#or_v1"             Caption="or"             Version="1.0005">
			<Properties>				
				<Description>OR Block outputs the logical OR operation for inputs in accordance with control signal.</Description>
				<Category>Logic</Category>
				<OpCode>1</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="i_9_oprd" Caption="in_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_oprd_quant" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_bus_width" Caption="BusWidth" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="2" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 16)
	{
		count = 16;
	}

	var opIndex = 3;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#poly_v1"           Caption="poly"           Version="1.0004">
			<Properties>								
				<Description>Polynomial function Block performs evaluation of polynomial coefficients on input values in accordance with control signal.</Description>
				<Category>Math</Category>
				<OpCode>25</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="x" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="21" Size="32"/>            
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="y" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="24" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="27" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="28" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="29" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="30" Size="1"/>
			</Outputs>
			<Params>           
				<Param OpName="i_1_oprd" Caption="C0" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_2_oprd" Caption="C1" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_3_oprd" Caption="C2" Visible="true" OpIndex="5" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_4_oprd" Caption="C3" Visible="true" OpIndex="7" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_5_oprd" Caption="C4" Visible="true" OpIndex="9" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_6_oprd" Caption="C5" Visible="true" OpIndex="11" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_7_oprd" Caption="C6" Visible="true" OpIndex="13" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_8_oprd" Caption="C7" Visible="true" OpIndex="15" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_9_oprd" Caption="C8" Visible="true" OpIndex="17" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_10_oprd" Caption="C9" Visible="true" OpIndex="19" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="CoefCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>10</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return showCoeffitients(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>          
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("y");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}

function showCoeffitients(videoItemFblElement, afbElement)
{
	var coefCount = videoItemFblElement.getParamIntValue("CoefCount");
	if (coefCount == -1)
	{
		return false;
	}
	
	for (var i = 0; i &lt; 10; i++)
	{
		var paramName = "C" + i;
		videoItemFblElement.setParamVisible(paramName, i &lt; coefCount);
	}

	return true;
}

				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	var result = showCoeffitients(videoItemFblElement, afbElement);
	result &amp;= createOutputSignals(videoItemFblElement, afbElement);
	return result;
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_16ui_16ui_v1" Caption="scale_16ui_16ui" Version="1.0004">
			<Properties>				
				<Description>Scaling Block, 16-bit unsigned integer to 16-bit unsigned integer</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>true</InternalUse>
			</Properties>
			<Inputs>
				<Pin OpName="i_ui_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="5" Size="16"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_ui_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="8" Size="16"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_16ui_fp_v1"   Caption="scale_16ui_fp"   Version="1.0004">
			<Properties>				
				<Description>Scaling Block, 16-bit unsigned integer to single-precision floating-point</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>true</InternalUse>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="5" Size="16"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>9</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
            function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_16ui_si_v1"   Caption="scale_16ui_si"   Version="1.0004">
			<Properties>				
				<Description>Scaling Block, 16-bit unsigned integer to 32-bit signed integer</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>true</InternalUse>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="5" Size="16"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>           
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
            function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_fp_16ui_v1"   Caption="scale_fp_16ui"   Version="1.0004">
			<Properties>
				<Description>Scaling Block, single-precision floating-point to 16-bit unsigned integer</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="8" Size="16"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>7</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
            function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_fp_fp_v1"     Caption="scale_fp_fp"     Version="1.0005">
			<Properties>				
				<Description>Scaling Block, single-precision floating-point to single-precision floating-point</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_fp_si_v1"     Caption="scale_fp_si"     Version="1.0005">
			<Properties>								
				<Description>Scaling Block, single-precision floating-point to 32-bit signed integer</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>8</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
            function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_si_16ui_v1"   Caption="scale_si_16ui"   Version="1.0004">
			<Properties>				
				<Description>Scaling Block, 32-bit signed integer to 16-bit unsigned integer</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>true</InternalUse>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="8" Size="16"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>           
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_si_fp_v1"     Caption="scale_si_fp"     Version="1.0005">
			<Properties>				
				<Description>Scaling Block, 32-bit signed integer to single-precision floating-point</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="Float">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-3.40282e+38</LowLimit>
					<HighLimit>3.40282e+38</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
            function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#scale_si_si_v1"     Caption="scale_si_si"     Version="1.0005">
			<Properties>				
				<Description>Scaling Block, 32-bit signed integer to 32-bit signed integer</Description>
				<Category>Scaling</Category>
				<OpCode>14</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>24</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="9" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_scal_k1_coef" Caption="K1" Visible="false" OpIndex="1" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_scal_k2_coef" Caption="K2" Visible="false" OpIndex="3" Size="32" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x1" Caption="X1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y1" Caption="Y1" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>0</Value>
					<Default>0</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="x2" Caption="X2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="y2" Caption="Y2" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt">
					<Value>100</Value>
					<Default>100</Default>
					<LowLimit>-2147483648</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>9</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#simlock_v1"         Caption="simlock"         Version="1.0007">
			<Properties>				
				<Description>Locking and simulation module</Description>
				<Category>Logic</Category>
				<OpCode>7</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
			    <Pin OpName="i_data" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="0" Size="1"/>
				<Pin OpName="i_set" Caption="sim" Type="Discrete" ByteOrder="BigEndian" OpIndex="1" Size="1"/>
				<Pin OpName="i_reset" Caption="block" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
			</Outputs>
			<Params>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#sub_fp_v1"          Caption="sub_fp"          Version="1.0005">
			<Properties>				
				<Description>Subtract Block with float data format</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>			   
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>            
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>6</Value>
					<Default>6</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");	

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#sub_si_v1"          Caption="sub_si"          Version="1.0005">
			<Properties>				
				<Description>Multiply Block with signed int data format.</Description>
				<Category>Math</Category>
				<OpCode>13</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>			   
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>            
				<Pin OpName="o_zero" Caption="zero" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>				
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>8</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>            
				<Param OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");	
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#switch_fp_v1"       Caption="switch_fp"       Version="1.0005">
			<Properties>				
				<Description>Multiplexor Block selects one of two floating-point input signals and output result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>21</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_sel" Caption="sel" Type="Discrete" ByteOrder="BigEndian" OpIndex="0" Size="1"/>
				<Pin OpName="i_x1_data" Caption="in_x1" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="1" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_x2" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="6" Size="32"/>            
			</Outputs>
			<Params>                          
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#switch_si_v1"       Caption="switch_si"       Version="1.0005">
			<Properties>				
				<Description>Multiplexor Block selects one of two signed integer input signals and output result in accordance with control signal.</Description>
				<Category>Other</Category>
				<OpCode>21</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_sel" Caption="sel" Type="Discrete" ByteOrder="BigEndian" OpIndex="0" Size="1"/>
				<Pin OpName="i_x1_data" Caption="in_x1" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="32"/>
				<Pin OpName="i_x2_data" Caption="in_x2" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="3" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="6" Size="32"/>            
			</Outputs>
			<Params>                          
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tct_filter_v1"      Caption="tct_filter"      Version="1.0005">
			<Properties>				
				<Description>Time Counter Block with dynamic time value, filtering function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>20</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_counter" Caption="time" Type="Analog" ByteOrder="BigEndian" OpIndex="1" Size="32" DataFormat="SignedInt"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tct_off_v1"         Caption="tct_off"         Version="1.0005">
			<Properties>				
				<Description>Time Counter Block with dynamic time value, turn off delay function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_counter" Caption="time" Type="Analog" ByteOrder="BigEndian" OpIndex="1" Size="32" DataFormat="SignedInt"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tct_on_v1"          Caption="tct_on"          Version="1.0005">
			<Properties>
				<Description>Time Counter Block with dynamic time value, turn on delay function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_counter" Caption="time" Type="Analog" ByteOrder="BigEndian" OpIndex="1" Size="32" DataFormat="SignedInt"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>
		<AFB id="#tct_rsv_v1"         Caption="tct_rsv"         Version="1.0005">
			<Properties>				
				<Description>Time Counter Block with dynamic time value, delay function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_counter" Caption="time" Type="Analog" ByteOrder="BigEndian" OpIndex="1" Size="32" DataFormat="SignedInt"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>5</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>
		<AFB id="#tct_vibr_v1"        Caption="tct_vibr"        Version="1.0005">
			<Properties>				
				<Description>Time Counter Block with dynamic time value, single vibrator function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>20</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_counter" Caption="time" Type="Analog" ByteOrder="BigEndian" OpIndex="1" Size="32" DataFormat="SignedInt"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="o_param_err" Caption="param_err" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>      
				<Param OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tctc_filter_v1"     Caption="tctc_filter"     Version="1.0007">
			<Properties>				
				<Description>Time Counter Block with constant time value, filtering function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_counter" Caption="Time" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1000</Value>
					<Default>1000</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tctc_off_v1"        Caption="tctc_off"        Version="1.0008">
			<Properties>				
				<Description>Time Counter Block with constant time value, turn off delay function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>20</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_counter" Caption="Time" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1000</Value>
					<Default>1000</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>					
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tctc_on_v1"         Caption="tctc_on"         Version="1.0007">
			<Properties>				
				<Description>Time Counter Block with constant time value, turn on delay function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>20</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_counter" Caption="Time" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1000</Value>
					<Default>1000</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tctc_rsv_v1"        Caption="tctc_rsv"        Version="1.0007">
			<Properties>				
				<Description>Time Counter Block with constant time value, delay function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>20</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_counter" Caption="Time" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1000</Value>
					<Default>1000</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>5</Value>
					<Default>5</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>5</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tctc_vibr_v1"       Caption="tctc_vibr"       Version="1.0007">
			<Properties>				
				<Description>Time Counter Block with constant time value, single vibrator function</Description>
				<Category>Delay</Category>
				<OpCode>3</OpCode>
				<HasRam>true</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
				<MinHeight>8</MinHeight>				
			</Properties>
			<Inputs>
				<Pin OpName="i_wave" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_counter" Caption="Time" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1000</Value>
					<Default>1000</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>2147483647</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#voter_v1"           Caption="voter"           Version="1.0006">
			<Properties>				
				<Description>Majority Block is intended to define majority decision in accordance with control signal and received configuration.</Description>
				<Category>Logic</Category>
				<OpCode>6</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>18</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="2" Size="1"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="i_9_oprd" Caption="in_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="19" Size="1"/>
				<Pin OpName="o_maj_1err" Caption="err_ms" Type="Discrete" ByteOrder="BigEndian" OpIndex="22" Size="1"/>
				<Pin OpName="o_maj_2err" Caption="err_st" Type="Discrete" ByteOrder="BigEndian" OpIndex="23" Size="1"/>				
			</Outputs>
			<Params>
				<Param OpName="i_conf_x" Caption="XCount" Visible="true" OpIndex="0" Size="4" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>15</HighLimit>
					<Script>
						<Changed>	
function(videoItemFblElement, afbElement)
{
	var xCount = videoItemFblElement.getParamIntValue("XCount");
	if (xCount == -1)
	{
		return false;
	}

	var yCount = videoItemFblElement.getParamIntValue("YCount");
	if (yCount == -1)
	{
		return false;
	}

	if (xCount &gt;= yCount)
	{	
		videoItemFblElement.setAfbParamByOpName("i_conf_x", yCount - 1);
		return false;
	}
	return true;
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_conf_y" Caption="YCount" Visible="true" OpIndex="1" Size="4" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>3</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	var xCount = videoItemFblElement.getParamIntValue("XCount");
	if (xCount == -1)
	{
		return false;
	}

	var yCount = videoItemFblElement.getParamIntValue("YCount");
	if (yCount == -1)
	{
		return false;
	}

	if (yCount &lt;= xCount)
	{	
		videoItemFblElement.setAfbParamByOpName("i_conf_y", xCount + 1);
	}

	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutErrMismatch" Caption="OutErrMismatch" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>0</Value>
					<Default>0</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutErrStrict" Caption="OutErrStrict" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var yCount = videoItemFblElement.getParamIntValue("YCount");
	if (yCount == -1)
	{
		return false;
	}

	var opIndex = 2;
	for (var i = 0; i &lt; yCount; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutErrMismatch", "err_ms");	
	createOutput(videoItemFblElement, afbElement, "OutErrStrict", "err_st");

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	createOutputSignals(videoItemFblElement, afbElement);
	return createInputSignals(videoItemFblElement, afbElement);
	
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#xor_v1"             Caption="xor"             Version="1.0005">
			<Properties>				
				<Description>XOR Block outputs the logical XOR operation for inputs in accordance with control signal.</Description>
				<Category>Logic</Category>
				<OpCode>1</OpCode>
				<HasRam>false</HasRam>				
				<InternalUse>false</InternalUse>
				<MinWidth>14</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_1_oprd" Caption="in_1" Type="Discrete" ByteOrder="BigEndian" OpIndex="3" Size="1"/>
				<Pin OpName="i_2_oprd" Caption="in_2" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_3_oprd" Caption="in_3" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_4_oprd" Caption="in_4" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_5_oprd" Caption="in_5" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
				<Pin OpName="i_6_oprd" Caption="in_6" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
				<Pin OpName="i_7_oprd" Caption="in_7" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="i_8_oprd" Caption="in_8" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
				<Pin OpName="i_9_oprd" Caption="in_9" Type="Discrete" ByteOrder="BigEndian" OpIndex="11" Size="1"/>
				<Pin OpName="i_10_oprd" Caption="in_10" Type="Discrete" ByteOrder="BigEndian" OpIndex="12" Size="1"/>
				<Pin OpName="i_11_oprd" Caption="in_11" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="i_12_oprd" Caption="in_12" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
				<Pin OpName="i_13_oprd" Caption="in_13" Type="Discrete" ByteOrder="BigEndian" OpIndex="15" Size="1"/>
				<Pin OpName="i_14_oprd" Caption="in_14" Type="Discrete" ByteOrder="BigEndian" OpIndex="16" Size="1"/>
				<Pin OpName="i_15_oprd" Caption="in_15" Type="Discrete" ByteOrder="BigEndian" OpIndex="17" Size="1"/>
				<Pin OpName="i_16_oprd" Caption="in_16" Type="Discrete" ByteOrder="BigEndian" OpIndex="18" Size="1"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="20" Size="1"/>
			</Outputs>
			<Params>
				<Param OpName="i_oprd_quant" Caption="OperandCount" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>2</LowLimit>
					<HighLimit>16</HighLimit>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
				<Param OpName="i_bus_width" Caption="BusWidth" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="2" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("OperandCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 16)
	{
		count = 16;
	}

	var opIndex = 3;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#be_to_le_16si_v1"       Caption="be_to_le_16si"       Version="1.0003">
			<Properties>
				<Description>Converts big-endian to little-endian</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="1" Size="16"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="LittleEndian" DataFormat="SignedInt" OpIndex="4" Size="16"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>
 
		<AFB id="#le_to_be_16si_v1"       Caption="le_to_be_16si"       Version="1.0003">
			<Properties>
				<Description>Converts big-endian to little-endian</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="LittleEndian" DataFormat="SignedInt" OpIndex="1" Size="16"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="4" Size="16"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#be_to_le_si_v1"       Caption="be_to_le_si"       Version="1.0004">
			<Properties>
				<Description>Converts big-endian to little-endian</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="LittleEndian" DataFormat="SignedInt" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#le_to_be_si_v1"       Caption="le_to_be_si"       Version="1.0004">
			<Properties>
				<Description>Converts little-endian to big-endian</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="LittleEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#be_to_le_fp_v1"       Caption="be_to_le_fp"       Version="1.0004">
			<Properties>
				<Description>Converts big-endian to liggle-endian</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="LittleEndian" DataFormat="Float" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#le_to_be_fp_v1"       Caption="le_to_be_fp"       Version="1.0004">
			<Properties>
				<Description>Converts little-endian to big-endian</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>true</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="LittleEndian" DataFormat="Float" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>

		<AFB id="#tconv_si_fp_v1"       Caption="tconv_si_fp"       Version="1.0003">
			<Properties>
				<Description>Type converter block from signed int to floating point</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="5" Size="32"/>
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>3</Value>
					<Default>3</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
			</Params>
			<CommonScript>
				<Library>
				</Library>
				<AfterCreation>
				</AfterCreation>
			</CommonScript>
		</AFB>
 
		<AFB id="#tconv_fp_si_v1"       Caption="tconv_fp_si"       Version="1.0003">
			<Properties>
				<Description>Type converter block from floating point to signed int</Description>
				<Category>Converter</Category>
				<OpCode>28</OpCode>
				<HasRam>false</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>36</MinWidth>
			</Properties>
			<Inputs>
				<Pin OpName="i_data" Caption="in" Type="Analog" ByteOrder="BigEndian" DataFormat="Float" OpIndex="2" Size="32"/>
			</Inputs>
			<Outputs>
				<Pin OpName="o_result" Caption="out" Type="Analog" ByteOrder="BigEndian" DataFormat="SignedInt" OpIndex="5" Size="32"/>
				<Pin OpName="o_overflow" Caption="overflow" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="7" Size="1"/>
				<Pin OpName="o_underflow" Caption="underflow" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="8" Size="1"/>
				<Pin OpName="o_nan" Caption="nan" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt" OpIndex="9" Size="1"/>            
			</Outputs>
			<Params>            
				<Param OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>4</Value>
					<Default>4</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
						<Changed/>
					</Script>
				</Param>            
				<Param OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}						
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}						
						</Changed>
					</Script>
				</Param>
				<Param OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
					<Value>1</Value>
					<Default>1</Default>
					<Script>
						<Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
						</Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
				<Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}
	
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	
	videoItemFblElement.adjustHeight();

	return true;
}
				</Library>
				<AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
				</AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#indic_stless_v1" Caption="indic_stless" Version="1.0001">
		    <Properties>
			    <Description>Non-latching indication block</Description>
				<Category>Indication</Category>
				<OpCode>29</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
			    <Pin OpName="i_input" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_ack" Caption="ack" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_test" Caption="test" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_sync" Caption="sync" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf" Caption="config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#indic_latch_v1" Caption="indic_latch" Version="1.0001">
		    <Properties>
			    <Description>Latching indication block</Description>
				<Category>Indication</Category>
				<OpCode>29</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>22</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
			    <Pin OpName="i_input" Caption="in" Type="Discrete" ByteOrder="BigEndian" OpIndex="4" Size="1"/>
				<Pin OpName="i_ack" Caption="ack" Type="Discrete" ByteOrder="BigEndian" OpIndex="5" Size="1"/>
				<Pin OpName="i_test" Caption="test" Type="Discrete" ByteOrder="BigEndian" OpIndex="6" Size="1"/>
				<Pin OpName="i_sync" Caption="sync" Type="Discrete" ByteOrder="BigEndian" OpIndex="7" Size="1"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="8" Size="1"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf" Caption="config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_indic_stless_v1" Caption="bus_indic_stless" Version="1.0001">
		    <Properties>
			    <Description>Non-latching indication block</Description>
				<Category>Indication</Category>
				<OpCode>29</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
			    <Pin OpName="i_input" Caption="in" Type="Bus" ByteOrder="BigEndian" OpIndex="4" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_ack" Caption="ack" Type="Bus" ByteOrder="BigEndian" OpIndex="5" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_test" Caption="test" Type="Bus" ByteOrder="BigEndian" OpIndex="6" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_sync" Caption="sync" Type="Bus" ByteOrder="BigEndian" OpIndex="7" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="8" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf" Caption="config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#bus_indic_latch_v1" Caption="bus_indic_latch" Version="1.0001">
		    <Properties>
			    <Description>Latching indication block</Description>
				<Category>Indication</Category>
				<OpCode>29</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>28</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
			    <Pin OpName="i_input" Caption="in" Type="Bus" ByteOrder="BigEndian" OpIndex="4" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_ack" Caption="ack" Type="Bus" ByteOrder="BigEndian" OpIndex="5" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_test" Caption="test" Type="Bus" ByteOrder="BigEndian" OpIndex="6" Size="16" BusDataFormat="Discrete"/>
				<Pin OpName="i_sync" Caption="sync" Type="Bus" ByteOrder="BigEndian" OpIndex="7" Size="16" BusDataFormat="Discrete"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Bus" ByteOrder="BigEndian" OpIndex="8" Size="16" BusDataFormat="Discrete"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf" Caption="config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>2</Value>
					<Default>2</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>4</HighLimit>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#pulse_gen_v1" Caption="pulse_gen" Version="1.0002">
		    <Properties>
			    <Description>Pulse generator</Description>
				<Category>Other</Category>
				<OpCode>30</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
			    <Pin OpName="i_enable" Caption="enable" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf" Caption="config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_t_high" Caption="High" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>250</Value>
					<Default>250</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
			    <Param OpName="i_t_low" Caption="Low" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>250</Value>
					<Default>250</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
			    <Param OpName="i_start_from" Caption="StartFrom" Visible="true" OpIndex="8" Size="1" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>1</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			    <Param OpName="i_sync" Caption="SyncInput" Visible="false" OpIndex="10" Size="1" Instantiator="false" User="false" Type="Discrete" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>0</Value>
					<Default>0</Default>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>								
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>

        <AFB id="#pulse_gen_sync_v1" Caption="pulse_gen_sync" Version="1.0002">
		    <Properties>
			    <Description>Synchronized pulse generator</Description>
				<Category>Other</Category>
				<OpCode>30</OpCode>
				<HasRam>true</HasRam>
				<InternalUse>false</InternalUse>
				<MinWidth>26</MinWidth>
				<MinHeight>8</MinHeight>
			</Properties>
			<Inputs>
			    <Pin OpName="i_enable" Caption="enable" Type="Discrete" ByteOrder="BigEndian" OpIndex="9" Size="1"/>
				<Pin OpName="i_sync" Caption="sync_in" Type="Discrete" ByteOrder="BigEndian" OpIndex="10" Size="1"/>
			</Inputs>
			<Outputs>
			    <Pin OpName="o_result" Caption="out" Type="Discrete" ByteOrder="BigEndian" OpIndex="13" Size="1"/>
				<Pin OpName="o_sync" Caption="sync_out" Type="Discrete" ByteOrder="BigEndian" OpIndex="14" Size="1"/>
			</Outputs>
			<Params>
			    <Param OpName="i_conf" Caption="config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
				    <Value>1</Value>
					<Default>1</Default>
					<LowLimit>1</LowLimit>
					<HighLimit>2</HighLimit>
					<Script>
					    <Changed></Changed>
					</Script>
				</Param>
				<Param OpName="i_t_high" Caption="High" Visible="true" OpIndex="1" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>250</Value>
					<Default>250</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
			    <Param OpName="i_t_low" Caption="Low" Visible="true" OpIndex="3" Size="32" Instantiator="true" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>250</Value>
					<Default>250</Default>
					<LowLimit>5</LowLimit>
					<HighLimit>65535</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
					<Units>ms</Units>
				</Param>
			    <Param OpName="i_start_from" Caption="StartFrom" Visible="true" OpIndex="8" Size="1" Instantiator="false" User="true" Type="Analog" ByteOrder="BigEndian" DataFormat="UnsignedInt">
					<Value>1</Value>
					<Default>1</Default>
					<LowLimit>0</LowLimit>
					<HighLimit>1</HighLimit>
					<Script>
						<Changed></Changed>
					</Script>
				</Param>
			</Params>
			<CommonScript>
			    <Library></Library>
				<AfterCreation></AfterCreation>
			</CommonScript>
		</AFB>				

	</AFBL>
</LogicModule>
