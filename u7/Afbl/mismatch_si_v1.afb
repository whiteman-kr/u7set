<?xml version="1.0" encoding="UTF-8"?>
<ApplicationFunctionalBlocks>
    <AfbElement StrId="#mismatch_si_v1">
        <Properties>
            <Caption>mismatch_si</Caption>
            <Version>1.0003</Version>
	  <Implementation Version="0" OpIndex="22"/>
            <Description>Analog mismatch block</Description>
            <Category>Other</Category>
            <OpCode>27</OpCode>
            <HasRam>false</HasRam>
            <RequiredStart>true</RequiredStart>
            <InternalUse>false</InternalUse>
        </Properties>
        <InputSignals>
            <AfbElementSignal OpName="i_x1_data" Caption="x1" Type="Analog" DataFormat="SignedInt" OpIndex="4" Size="32"/>
            <AfbElementSignal OpName="i_x2_data" Caption="x2" Type="Analog" DataFormat="SignedInt" OpIndex="6" Size="32"/>
            <AfbElementSignal OpName="i_x3_data" Caption="x3" Type="Analog" DataFormat="SignedInt" OpIndex="8" Size="32"/>
            <AfbElementSignal OpName="i_x4_data" Caption="x4" Type="Analog" DataFormat="SignedInt" OpIndex="10" Size="32"/>                               
        </InputSignals>
        <OutputSignals>
            <AfbElementSignal OpName="o_x1_mismatch" Caption="x1 mismatch" Type="Discrete" OpIndex="12" Size="1"/>
            <AfbElementSignal OpName="o_x2_mismatch" Caption="x2 mismatch" Type="Discrete" OpIndex="13" Size="1"/>
            <AfbElementSignal OpName="o_x3_mismatch" Caption="x3 mismatch" Type="Discrete" OpIndex="14" Size="1"/>
            <AfbElementSignal OpName="o_x4_mismatch" Caption="x4 mismatch" Type="Discrete" OpIndex="15" Size="1"/>

            <AfbElementSignal OpName="o_param_err" Caption="param_err" Type="Discrete" OpIndex="16" Size="1"/>                
        </OutputSignals>
        <Params>
            <AfbElementParam OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" DataFormat="UnsignedInt">
                <Value>1</Value>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>            
            <AfbElementParam OpName="i_conf_n" Caption="InputCount" Visible="false" OpIndex="1" Size="5" Instantiator="true" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>2</Value>
                <Default>2</Default>
                <LowLimit>2</LowLimit>
                <HighLimit>4</HighLimit>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_ust" Caption="MaxMismatch" Visible="true" OpIndex="2" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="SignedInt">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>0</LowLimit>
                <HighLimit>2147483647</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutParamErr" Caption="OutParamErr" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>1</Value>
                <Default>1</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>            
            <AfbElementParam OpName="OutOverflow" Caption="OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>1</Value>
                <Default>1</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutUnderflow" Caption="OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>1</Value>
                <Default>1</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutZero" Caption="OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>1</Value>
                <Default>1</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutNaN" Caption="OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>1</Value>
                <Default>1</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>                      
            <AfbElementParam OpName="test_start_count" Caption="TestStartCount" Visible="false" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>1</Value>
                <Default>1</Default>
                <LowLimit>0</LowLimit>
                <HighLimit>65535</HighLimit>
                <Script>
                    <Changed>
		</Changed>
                </Script>
            </AfbElementParam>
        </Params>
        <CommonScript>
            <Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 4;
	for (var i = 0; i &lt; count; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex+=2;
	}

	

	videoItemFblElement.adjustHeight();

	return true;
}

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();

          var count = videoItemFblElement.getParamIntValue("InputCount");
	if (count == -1)
	{
		return false;
	}
	if (count &lt; 2)
	{
		count = 2;
	}
	if (count &gt; 4)
	{
		count = 4;
	}

	var opIndex = 12;
	for (var i = 0; i &lt; count; i++)
	{
		var s = afbElement.getAfbSignalByOpIndex(opIndex);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}
		opIndex++;
	}
	
	createOutput(videoItemFblElement, afbElement, "OutParamErr", "param_err");	

	videoItemFblElement.adjustHeight();

	return true;
}
	</Library>
            <AfterCreation>
function(videoItemFblElement, afbElement)
{
	createInputSignals(videoItemFblElement, afbElement);
	createOutputSignals(videoItemFblElement, afbElement);
	return;
}

	 </AfterCreation>
        </CommonScript>
    </AfbElement>
</ApplicationFunctionalBlocks>
