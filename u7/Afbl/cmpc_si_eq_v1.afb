<?xml version="1.0" encoding="UTF-8"?>
<ApplicationFunctionalBlocks>
    <AfbElement StrId="#cmpc_si_eq_v1">
        <Properties>
            <Caption>cmpc_si_eq</Caption>
            <Version>1.0</Version>
            <Implementation Version="108" OpIndex="12"/>
            <Description>Comparator Block, equal 32-bit signed int comparison with constant value</Description>
            <Category>Compare</Category>
            <OpCode>10</OpCode>
            <HasRam>true</HasRam>
            <RequiredStart>true</RequiredStart>
            <InternalUse>false</InternalUse>
        </Properties>
        <InputSignals>
            <AfbElementSignal OpName="i_data" Caption="in" Type="Analog" DataFormat="SignedInt" OpIndex="6" Size="32"/>
        </InputSignals>
        <OutputSignals>
            <AfbElementSignal OpName="o_result" Caption="out" Type="Discrete" OpIndex="9" Size="1"/>
            
            <AfbElementSignal OpName="o_unordered" Caption="unordered" Type="Discrete" OpIndex="10" Size="1"/>
        </OutputSignals>
        <Params>
            <AfbElementParam OpName="i_sp_s" Caption="Setting" Visible="true" OpIndex="1" Size="32" Instantiator="false" User="true" Type="Analog" DataFormat="SignedInt">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-2147483648</LowLimit>
                <HighLimit>2147483647</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_sp_r" Caption="ValueR" Visible="false" OpIndex="3" Size="32" Instantiator="false" User="false" Type="Analog" DataFormat="SignedInt">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-2147483648</LowLimit>
                <HighLimit>2147483647</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="hysteresis" Caption="Hysteresis" Visible="true" OpIndex="-1" Size="32" Instantiator="false" User="true" Type="Analog" DataFormat="SignedInt">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-2147483648</LowLimit>
                <HighLimit>2147483647</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_conf" Caption="Config" Visible="false" OpIndex="0" Size="5" Instantiator="true" User="false" Type="Analog" DataFormat="UnsignedInt">
                <Value>1</Value>
                <Default>1</Default>
                <LowLimit>1</LowLimit>
                <HighLimit>4</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutUnordered" Caption="OutUnordered" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>0</Value>
                <Default>0</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="test_start_count" Caption="TestStartCount" Visible="false" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>1</Value>
                <Default>1</Default>
                <LowLimit>0</LowLimit>
                <HighLimit>65535</HighLimit>
                <Script>
                    <Changed>
		</Changed>
                </Script>
            </AfbElementParam>
        </Params>
        <CommonScript>
             <Library>
function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}	
	
	createOutput(videoItemFblElement, afbElement, "OutUnordered", "unordered");

	videoItemFblElement.adjustHeight();

	return true;
}
            </Library>
            <AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
            </AfterCreation>
        </CommonScript>
    </AfbElement>
</ApplicationFunctionalBlocks>