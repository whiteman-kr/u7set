<?xml version="1.0" encoding="UTF-8"?>
<ApplicationFunctionalBlocks>
    <AfbElement StrId="#int_v1">
        <Properties>
            <Caption>int</Caption>
            <Version>1.0</Version>
            <Implementation Version="1" OpIndex="29"/>
            <Description>Integral Block performs integral calculation function in accordance with control signals.</Description>
            <Category>Math</Category>
            <OpCode>17</OpCode>
            <HasRam>true</HasRam>
            <RequiredStart>true</RequiredStart>
            <InternalUse>false</InternalUse>
        </Properties>
        <InputSignals>
            <AfbElementSignal OpName="i_x" Caption="in" Type="Analog" DataFormat="Float" OpIndex = "14" Size = "32"/>
            <AfbElementSignal OpName="i_reset" Caption="reset" Type="Discrete" OpIndex = "16" Size = "1"/>
            <AfbElementSignal OpName="i_pause" Caption="pause" Type="Discrete" OpIndex = "17" Size = "1"/>
            <AfbElementSignal OpName="i_track" Caption="track" Type="Discrete" OpIndex = "18" Size = "1"/>
        </InputSignals>
        <OutputSignals>
            <AfbElementSignal OpName="o_result" Caption = "out" Type="Analog" DataFormat="Float" OpIndex = "20" Size = "32"/>
            <AfbElementSignal OpName="o_max" Caption = "max" Type="Discrete" OpIndex = "22" Size = "1"/>
            <AfbElementSignal OpName="o_min" Caption = "min" Type="Discrete" OpIndex = "23" Size = "1"/>

            <AfbElementSignal OpName="o_unordered" Caption = "unordered" Type="Discrete" OpIndex = "24" Size = "1"/>
            <AfbElementSignal OpName="o_overflow" Caption = "overflow" Type="Discrete" OpIndex = "25" Size = "1"/>
            <AfbElementSignal OpName="o_underflow" Caption = "underflow" Type="Discrete" OpIndex = "26" Size = "1"/>
            <AfbElementSignal OpName="o_zero" Caption = "zero" Type="Discrete" OpIndex = "27" Size = "1"/>
            <AfbElementSignal OpName="o_nan" Caption = "nan" Type="Discrete" OpIndex = "28" Size = "1"/>
        </OutputSignals>
        <Params>
            <AfbElementParam OpName="i_ki" Caption = "ki" Visible="true" OpIndex="0" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="Float">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-3.40282e+38</LowLimit>
                <HighLimit>3.40282e+38</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_ti" Caption = "ti" Visible="true" OpIndex="2" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="Float">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-3.40282e+38</LowLimit>
                <HighLimit>3.40282e+38</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_max" Caption = "max" Visible="true" OpIndex="4" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="Float">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-3.40282e+38</LowLimit>
                <HighLimit>3.40282e+38</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_min" Caption = "min" Visible="true" OpIndex="6" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="Float">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-3.40282e+38</LowLimit>
                <HighLimit>3.40282e+38</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_ri_const" Caption = "ri_const" Visible="true" OpIndex="8" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="Float">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-3.40282e+38</LowLimit>
                <HighLimit>3.40282e+38</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_x_tr" Caption = "x_tr" Visible="true" OpIndex="10" Size="32" Instantiator="true" User="true" Type="Analog" DataFormat="Float">
                <Value>0</Value>
                <Default>0</Default>
                <LowLimit>-3.40282e+38</LowLimit>
                <HighLimit>3.40282e+38</HighLimit>
                <Script>
                    <Changed></Changed>
                </Script>
            </AfbElementParam>                   
            <AfbElementParam OpName="OutUnordered" Caption = "OutUnordered" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>0</Value>
                <Default>0</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>            
            <AfbElementParam OpName="OutOverflow" Caption = "OutOverflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>0</Value>
                <Default>0</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutUnderflow" Caption = "OutUnderflow" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>0</Value>
                <Default>0</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutZero" Caption = "OutZero" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>0</Value>
                <Default>0</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="OutNaN" Caption = "OutNaN" Visible="false" OpIndex="-1" Size="1" Instantiator="false" User="true" Type="Discrete">
                <Value>0</Value>
                <Default>0</Default>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="test_start_count" Caption="TestStartCount" Visible="false" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>1</Value>
                <Default>1</Default>
                <LowLimit>0</LowLimit>
                <HighLimit>65535</HighLimit>
                <Script>
                    <Changed>
		</Changed>
                </Script>
            </AfbElementParam>
        </Params>
        <CommonScript>
            <Library>

function createOutput(videoItemFblElement, afbElement, paramName, signalCaption)
{
	var show = videoItemFblElement.getParamBoolValue(paramName);
	if (show == true)
	{
		var s = afbElement.getAfbSignalByCaption(signalCaption);
		if (s != null)
		{
			videoItemFblElement.addOutputSignal(s.jsCaption(), s.jsType(), s.operandIndex(), s.size());
		}	
	}
}

function createOutputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeOutputSignals();
	
	var out = afbElement.getAfbSignalByCaption("out");
	if (out != null)
	{
		videoItemFblElement.addOutputSignal(out.jsCaption(), out.jsType(), out.operandIndex(), out.size());
	}

	createOutput(videoItemFblElement, afbElement, "OutUnordered", "unordered");
	createOutput(videoItemFblElement, afbElement, "OutOverflow", "overflow");
	createOutput(videoItemFblElement, afbElement, "OutUnderflow", "underflow");
	createOutput(videoItemFblElement, afbElement, "OutZero", "zero");
	createOutput(videoItemFblElement, afbElement, "OutNaN", "nan");
	createOutput(videoItemFblElement, afbElement, "OutDivByZero", "div_by_zero");

	videoItemFblElement.adjustHeight();

	return true;
}
            </Library>
            <AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createOutputSignals(videoItemFblElement, afbElement);
}
            </AfterCreation>
        </CommonScript>
    </AfbElement>
</ApplicationFunctionalBlocks>