<?xml version="1.0" encoding="UTF-8"?>
<ApplicationFunctionalBlocks>
    <AfbElement StrId="#voter_v1">
        <Properties>
            <Caption>voter</Caption>
            <Version>1.0001</Version>
            <Implementation Version="104" OpIndex="21"/>
            <Description>Majority Block is intended to define majority decision in accordance with control signal and received configuration.</Description>
            <Category>Logic</Category>
            <OpCode>6</OpCode>
            <HasRam>false</HasRam>
            <RequiredStart>true</RequiredStart>
            <InternalUse>false</InternalUse>
        </Properties>
        <InputSignals>
            <AfbElementSignal OpName="i_1_oprd" Caption="in_1" Type="Discrete" OpIndex="2" Size="1"/>
            <AfbElementSignal OpName="i_2_oprd" Caption="in_2" Type="Discrete" OpIndex="3" Size="1"/>
            <AfbElementSignal OpName="i_3_oprd" Caption="in_3" Type="Discrete" OpIndex="4" Size="1"/>
            <AfbElementSignal OpName="i_4_oprd" Caption="in_4" Type="Discrete" OpIndex="5" Size="1"/>
            <AfbElementSignal OpName="i_5_oprd" Caption="in_5" Type="Discrete" OpIndex="6" Size="1"/>
            <AfbElementSignal OpName="i_6_oprd" Caption="in_6" Type="Discrete" OpIndex="7" Size="1"/>
            <AfbElementSignal OpName="i_7_oprd" Caption="in_7" Type="Discrete" OpIndex="8" Size="1"/>
            <AfbElementSignal OpName="i_8_oprd" Caption="in_8" Type="Discrete" OpIndex="9" Size="1"/>
            <AfbElementSignal OpName="i_9_oprd" Caption="in_9" Type="Discrete" OpIndex="10" Size="1"/>
            <AfbElementSignal OpName="i_10_oprd" Caption="in_10" Type="Discrete" OpIndex="11" Size="1"/>
            <AfbElementSignal OpName="i_11_oprd" Caption="in_11" Type="Discrete" OpIndex="12" Size="1"/>
            <AfbElementSignal OpName="i_12_oprd" Caption="in_12" Type="Discrete" OpIndex="13" Size="1"/>
            <AfbElementSignal OpName="i_13_oprd" Caption="in_13" Type="Discrete" OpIndex="14" Size="1"/>
            <AfbElementSignal OpName="i_14_oprd" Caption="in_14" Type="Discrete" OpIndex="15" Size="1"/>
            <AfbElementSignal OpName="i_15_oprd" Caption="in_15" Type="Discrete" OpIndex="16" Size="1"/>
            <AfbElementSignal OpName="i_16_oprd" Caption="in_16" Type="Discrete" OpIndex="17" Size="1"/>
        </InputSignals>
        <OutputSignals>
            <AfbElementSignal OpName="o_result" Caption="out" Type="Discrete" OpIndex="19" Size="1"/>
        </OutputSignals>
        <Params>
            <AfbElementParam OpName="i_conf_x" Caption="XCount" Visible="true" OpIndex="0" Size="4" Instantiator="true" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>2</Value>
                <Default>2</Default>
                <LowLimit>2</LowLimit>
                <HighLimit>15</HighLimit>
                <Script>
                    <Changed>	
function(videoItemFblElement, afbElement)
{
	var xCount = videoItemFblElement.getParamIntValue("XCount");
	if (xCount == -1)
	{
		return false;
	}

	var yCount = videoItemFblElement.getParamIntValue("YCount");
	if (yCount == -1)
	{
		return false;
	}

	if (xCount &gt;= yCount)
	{	
		videoItemFblElement.setAfbParamByOpName("i_conf_x", yCount - 1);
		return false;
	}
	return true;
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="i_conf_y" Caption="YCount" Visible="true" OpIndex="1" Size="4" Instantiator="true" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>3</Value>
                <Default>3</Default>
                <LowLimit>3</LowLimit>
                <HighLimit>16</HighLimit>
                <Script>
                    <Changed>
function(videoItemFblElement, afbElement)
{
	var xCount = videoItemFblElement.getParamIntValue("XCount");
	if (xCount == -1)
	{
		return false;
	}

	var yCount = videoItemFblElement.getParamIntValue("YCount");
	if (yCount == -1)
	{
		return false;
	}

	if (yCount &lt;= xCount)
	{	
		videoItemFblElement.setAfbParamByOpName("i_conf_y", xCount + 1);
	}

	return createInputSignals(videoItemFblElement, afbElement);
}
		</Changed>
                </Script>
            </AfbElementParam>
            <AfbElementParam OpName="test_start_count" Caption="TestStartCount" Visible="false" OpIndex="-1" Size="16" Instantiator="false" User="true" Type="Analog" DataFormat="UnsignedInt">
                <Value>1</Value>
                <Default>1</Default>
                <LowLimit>0</LowLimit>
                <HighLimit>65535</HighLimit>
                <Script>
                    <Changed>
		</Changed>
                </Script>
            </AfbElementParam>
        </Params>
        <CommonScript>
            <Library>
function createInputSignals(videoItemFblElement, afbElement)
{
	videoItemFblElement.removeInputSignals();

	var yCount = videoItemFblElement.getParamIntValue("YCount");
	if (yCount == -1)
	{
		return false;
	}

	var opIndex = 2;
	for (var i = 0; i &lt; yCount; i++)
	{
		var afbInputSignal = afbElement.getAfbSignalByOpIndex(opIndex);
		if (afbInputSignal != null)
		{
			var caption = afbInputSignal.jsCaption();
			var type = afbInputSignal.jsType();
			var operandIndex = afbInputSignal.operandIndex();
			var size = afbInputSignal.size();
			videoItemFblElement.addInputSignal(caption, type, operandIndex, size);
		}
		opIndex++;
	}

	videoItemFblElement.adjustHeight();

	return true;
}
	</Library>
            <AfterCreation>
function(videoItemFblElement, afbElement)
{
	return createInputSignals(videoItemFblElement, afbElement);
}
	</AfterCreation>
        </CommonScript>
    </AfbElement>
</ApplicationFunctionalBlocks>
