/** \mainpage

The following manual describes RPCT scripting tools. Using scripts project developer can automate and customize
different tasks for MATS user interface, application logic testing and more.

This manual is divided in the following sections:
- \subpage schemaScripts describes Schema scripts API used for developing MATS user interface.
- \subpage testsScripts describes Testing scripts API used for automated application logic simulation and testing.

*/

/** \defgroup groupSchemaScripts Schema Scripts
  */

/**
 *  @defgroup controllers Controllers
 *  \ingroup groupSchemaScripts
 */

/**
 *  @defgroup staticSchemaItems Static Schema Items
 *  \ingroup groupSchemaScripts
 */

/**
 *  @defgroup dynamicSchemaItems Dynamic Schema Items
 *  \ingroup groupSchemaScripts
 */

/**
 *  @defgroup controlSchemaItems Control Schema Items
 *  \ingroup groupSchemaScripts
 */

/**
 *  @defgroup appLogicSchemaItems Application Logic Items
 *  \ingroup groupSchemaScripts
 */

/**
 *  @defgroup widgets Schema Widgets
 *  \ingroup groupSchemaScripts
 */

/**
 *  @defgroup groupParamsStates Signal Parameters and States
 *  \ingroup groupSchemaScripts
 */

/** \defgroup testsScripts Tests Scripts
 */

/** @addtogroup simulator Core Objects
  * \ingroup testsScripts
  *  @{ */

  // classes, etc.

  /** @} */


/*! @page schemaScripts Schema Scripts Introduction

Using scripts, project designer can customize appearance of MATS schema items and implement advanced logic 
in MATS user interface. 

For example, scripts allow to change colors, text messages, and other properties 
of schema items. Also using scripts developer can request signal values and parameters, process them by 
required logic, set tunable signal values. Using special schema items like push buttons and line editors 
project designer can create interactive schemas.

Scripts are written in JavaScript language.

MATS schema items emit events on different user and system actions. The set of events depends on item's type.

Dynamic schema items like 
\ref VFrame30::SchemaItemValue "SchemaItemValue"
, 
\ref VFrame30::SchemaItemImageValue "SchemaItemImageValue"
or
\ref VFrame30::SchemaItemSignal "SchemaItemSignal"

usually process pre-draw event to define item apperance depending on some signals values.

Properties of static schema items like 
\ref VFrame30::SchemaItemLine "SchemaItemLine",
\ref VFrame30::SchemaItemPath "SchemaItemPath",
\ref VFrame30::SchemaItemRect "SchemaItemRect",
\ref VFrame30::SchemaItemImage "SchemaItemImage"
can be changed by pre-draw event too.

Control schema items have additional events. 
\ref VFrame30::SchemaItemPushButton "SchemaItemPushButton" emits additional events when user pushes and releases the button. 
\ref VFrame30::SchemaItemLineEdit "SchemaItemLineEdit" emits an event when user changes its text, etc.

All MATS schema items have special properties to store script code for different event handlers of this item.

<b>Monitor</b> and <b>TuningClient</b> equipment presets have special <b>GlobalScript</b> property that stores library script functions 
defined by user. Library functions are available to all schema items displayed by appropriate software. 
For example, if many schema items have scripts with same logic (maybe with own signal identifiers), this logic 
can be described in global script function and called from items scripts with different arguments.

Script event handlers have predefined function prototypes. They are described in corresponding items descriptions 
and examples in this document.

A few global classes can be accessed by scripts:

- \ref VFrame30::ScriptSchemaView "ScriptSchemaView" class (<b>view</b> object) is used to access schema items and variables, 
switch between schemas, display message boxes;

- \ref VFrame30::ScriptSchema "ScriptSchema" class (<b>view.Schema</b> object) is used to access schema;

- \ref VFrame30::ScriptAppSignalController "ScriptAppSignalController" class (<b>signals</b> object) is used to access 
signal parameters (AppSignalParam) and values (AppSignalState) received from <b>ApplicationDataService</b>;

- \ref VFrame30::TuningController "TuningController" class (<b>tuning</b> object) is used to access tunable 
signal parameters (AppSignalParam), requesting and setting tunable values (TuningSignalState) using <b>TuningService</b>.

- \ref VFrame30::LogController "LogController" class (<b>log</b> object) is used to write messages and alerts
to application's log file.

Script code error messages are displayed directly on appropriate schema item when script is executed.

*/

/*! @page testsScripts Tests Scripts Introduction

During project development it is necessary to test its correctness. For example, project designer has
to check if required signals were not deleted or application logic still performs correct calculations
before uploading the executable code into logic modules.

Testing can be performed using RPCT simulation tools. Ttis approach does not require physical hardware. 
RPCT simulates application logic of the project just on developer's computer. Simulator can set
required input signal values and allows to see how logic works. Simulation tools cover all AFBL library elements,
connections, busses and other parts of the project.

Testing can be automated by scripts. Testing scripts are written in JavaScript language using special simulator API
and stored in project's database. They can be executed after each successful build.

Testin scripts can perform following actions:

- access Logic Modules descriptions;
- access Connections descriptions;
- access Application Signals descriptions;
- read signals values;
- override signals values;
- start and stop Application Logic simulation;
- send signal data to Application Data Service
.... and more features will be added!

The following classes are used to perform testing:

- \ref Sim::ScriptSimulator "ScriptSimulator" is s class that runs all simulations on compiled project. 
*/