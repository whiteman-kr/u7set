#include "Stable.h"
#include "VFrame30.pb.h"

#ifdef Q_OS_WIN
	#pragma warning(push)
	#pragma warning(disable : 4244)
	#pragma warning(disable : 4125)
	#pragma warning(disable : 6011)
	#pragma warning(disable : 4100)
	#pragma warning(disable : 4267)
	#pragma warning(disable : 4512)
	#pragma warning(disable : 4127)
	#pragma warning(disable : 4996)
#endif

#include "VideoFrame.pb.cc"		// File generated by proto buffers compiller

#ifdef _MSC_VER
	#pragma warning(pop)
#endif

namespace VFrame30
{
	namespace Proto
	{
//		CStreamedData::CStreamedData()
//		{
//		}

//		CStreamedData::CStreamedData(const char* pSrc, size_t size)
//		{
//			m_data.assign(pSrc, size);
//		}

//		CStreamedData::CStreamedData(const QByteArray& src)
//		{
//			m_data.assign(src.data(), src.size());
//		}

//		CStreamedData::CStreamedData(size_t capacity)
//		{
//			m_data.reserve(capacity);
//		}

//		CStreamedData::~CStreamedData()
//		{
//		}

//		const char* CStreamedData::data() const
//		{
//			return m_data.data();
//		}

//		size_t CStreamedData::length() const
//		{
//			return m_data.size() * sizeof(m_data[0]);
//		}

//		void CStreamedData::clear()
//		{
//			m_data.clear();
//		}

		// Функции для сериализации данных
		//
		const QUuid& Read(const VFrame30::Proto::Guid& message)
		{
			return *(reinterpret_cast<const QUuid*>(message.guid().c_str()));
		}

		void Write(VFrame30::Proto::Guid* pMessage, const QUuid& guid)
		{
			if (pMessage == nullptr)
			{
				assert(pMessage != nullptr);
				return;
			}
			pMessage->set_guid(&guid, sizeof(guid));
		}

		// Read/write wstring message
		//
		QString Read(const VFrame30::Proto::wstring& message)
		{
			QString qstr = QString::fromUtf16(reinterpret_cast<const ushort*>(message.text().data()),
											  static_cast<int>(message.text().size() / 2) - 1);
			return qstr;
		}

		void Write(VFrame30::Proto::wstring* pMessage, const QString& str)
		{
			assert(sizeof(wchar_t) == 2);
			//static_assert(sizeof(wchar_t) == 2, "wchar_t must be 16-bit.");

			if (pMessage == nullptr)
			{
				assert(pMessage != nullptr);
				return;
			}

			pMessage->set_text(str.toStdWString().c_str(), (str.length() + 1) * sizeof(wchar_t));
		}
	}
}

