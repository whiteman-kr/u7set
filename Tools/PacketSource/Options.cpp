#include "Options.h"

#include <QSettings>

// -------------------------------------------------------------------------------------------------------------------

Options theOptions;

// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------

PathOption::PathOption(QObject *parent) :
	QObject(parent)
{
	clear();
}

// -------------------------------------------------------------------------------------------------------------------

PathOption::PathOption(const PathOption& from, QObject *parent) :
	QObject(parent)
{
	*this = from;
}

// -------------------------------------------------------------------------------------------------------------------

PathOption::~PathOption()
{
}

// -------------------------------------------------------------------------------------------------------------------

void PathOption::clear()
{
	m_signalPath.clear();
	m_sourcePath.clear();
	m_appDataSrvIP.clear();
	m_ualTesterIP.clear();
}

// -------------------------------------------------------------------------------------------------------------------

void PathOption::load()
{
	QSettings s;

	m_signalPath = s.value(QString("%1SignalPath").arg(SOURCE_REG_KEY), QString()).toString();
	m_sourcePath = s.value(QString("%1SourcePath").arg(SOURCE_REG_KEY), QString()).toString();
	m_appDataSrvIP = s.value(QString("%1AppDataSrvIP").arg(SOURCE_REG_KEY), QString("127.0.0.1")).toString();
	m_ualTesterIP = s.value(QString("%1UalTesterIP").arg(SOURCE_REG_KEY), QString("127.0.0.1")).toString();
}

// -------------------------------------------------------------------------------------------------------------------

void PathOption::save()
{
	QSettings s;

	s.setValue(QString("%1SignalPath").arg(SOURCE_REG_KEY), m_signalPath);
	s.setValue(QString("%1SourcePath").arg(SOURCE_REG_KEY), m_sourcePath);
	s.setValue(QString("%1AppDataSrvIP").arg(SOURCE_REG_KEY), m_appDataSrvIP);
	s.setValue(QString("%1UalTesterIP").arg(SOURCE_REG_KEY), m_ualTesterIP);
}

// -------------------------------------------------------------------------------------------------------------------

PathOption& PathOption::operator=(const PathOption& from)
{
	m_signalPath = from.m_signalPath;
	m_sourcePath = from.m_sourcePath;
	m_appDataSrvIP = from.m_appDataSrvIP;
	m_ualTesterIP = from.m_ualTesterIP;

	return *this;
}

// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------

bool compareDouble(double lDouble, double rDouble)
{
	return std::nextafter(lDouble, std::numeric_limits<double>::lowest()) <= rDouble && std::nextafter(lDouble, std::numeric_limits<double>::max()) >= rDouble;
}

// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------

Options::Options(QObject *parent) :
	QObject(parent)
{
}

// -------------------------------------------------------------------------------------------------------------------

Options::Options(const Options& from, QObject *parent) :
	QObject(parent)
{
	*this = from;
}

// -------------------------------------------------------------------------------------------------------------------

Options::~Options()
{
}

// -------------------------------------------------------------------------------------------------------------------

void Options::load()
{
	m_path.load();
}

// -------------------------------------------------------------------------------------------------------------------

void Options::save()
{
	m_path.save();
}

// -------------------------------------------------------------------------------------------------------------------

void Options::unload()
{
}

// -------------------------------------------------------------------------------------------------------------------

bool Options::readFromXml()
{
	bool result = false;

	return result;
}

// -------------------------------------------------------------------------------------------------------------------

Options& Options::operator=(const Options& from)
{
	m_mutex.lock();

		m_path = from.m_path;

	m_mutex.unlock();

	return *this;
}

// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------
