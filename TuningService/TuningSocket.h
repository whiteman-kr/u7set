#pragma once

#include <QtCore>
#include <QUdpSocket>
#include "../include/SocketIO.h"
#include "../include/SimpleThread.h"
#include "../include/DataProtocols.h"
#include "../include/Queue.h"

namespace Tuning
{
	enum OperationCode
	{
		Read = 1200,
		Write = 1400,
	};

	enum DataType
	{
		AnalogSignedInt = 1300,
		AnalogFloat = 1500,
		Discrete = 1700
	};

	struct SocketRequest
	{
		quint32 lmIP;
		int lmPort;
		int lmNumber;
		quint16 numerator;
		OperationCode operation;
		int startAddressW;
		int frameSizeW;
		DataType dataType;
		int romSizeW;

		char frameData[1024];
	};


	struct RequestHeader
	{
		quint16 version;				// current version 1
		quint64 tuningID;				// unique connection ID generated by RPCT
		quint16 subsystemKey;			// key of Subsystem assigned in RPCT Subsystems List Editor
		quint16 operationCode;			// OperationCode enum values
		quint16 flags;
		quint32 startAddressW;			//
		quint16 requestSizeB;			// UDP frame size = 1432 bytes
		quint32 romSizeB;				// = ROM_SIZE_B
		quint16 romFrameSizeB;			// = ROM_FRAME_SIZE_B
		quint16 dataType;				// DataType enum values
	};

	class TuningSocketWorker : public SimpleThreadWorker
	{
	private:
/*

static const int ROM_FRAME_SIZE_B = 1016;
	static const int ROM_FRAME_SIZE_W = ROM_FRAME_SIZE_B / 2;

	#pragma pack(push, 1)



		struct Request
		{
			RequestHeader header;

			char reserv[98];

			char data[ROM_FRAME_SIZE_B];

			char cmpResult[64];

			char reserv2[224];

			void initToRead(const TuningSettings& settings, quint64 tuningID, int frameNo);
		};

	#pragma pack(pop)

		TuningSettings m_settings;*/

		HostAddressPort m_tuningIP;

		QTimer m_timer;

		QUdpSocket* m_socket = nullptr;
		bool m_socketBound = false;

		RupFotipFrame m_ackFrame;
		RupFotipFrame m_reqFrame;

		virtual void onThreadStarted() override;
		virtual void onThreadFinished() override;

		virtual void onTimer();

		void createAndBindSocket();
		void closeSocket();
		void onSocketReadyRead();

		void clear();

		Queue<SocketRequest> m_requests;

	private slots:
		void onSocketRequest();

	public:
		TuningSocketWorker(const HostAddressPort& tuningIP);

		void sendRequest(const SocketRequest& socketRequest);
	};


	class TuningSocket : public SimpleThread
	{
	public:
		TuningSocket(const HostAddressPort& tuningIP);
	};

}
