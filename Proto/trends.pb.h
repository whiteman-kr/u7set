#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 4127)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4996)
#pragma warning(disable : 6011)
#pragma warning(disable : 6326)
#pragma warning(disable : 6385)
#pragma warning(disable : 6387)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trends.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trends_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trends_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trends_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trends_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trends_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_trends_2eproto_metadata_getter(int index);
namespace Proto {
class Trend;
struct TrendDefaultTypeInternal;
extern TrendDefaultTypeInternal _Trend_default_instance_;
class TrendArchive;
struct TrendArchiveDefaultTypeInternal;
extern TrendArchiveDefaultTypeInternal _TrendArchive_default_instance_;
class TrendArchiveHour;
struct TrendArchiveHourDefaultTypeInternal;
extern TrendArchiveHourDefaultTypeInternal _TrendArchiveHour_default_instance_;
class TrendParam;
struct TrendParamDefaultTypeInternal;
extern TrendParamDefaultTypeInternal _TrendParam_default_instance_;
class TrendRuler;
struct TrendRulerDefaultTypeInternal;
extern TrendRulerDefaultTypeInternal _TrendRuler_default_instance_;
class TrendRulerSet;
struct TrendRulerSetDefaultTypeInternal;
extern TrendRulerSetDefaultTypeInternal _TrendRulerSet_default_instance_;
class TrendSignalParam;
struct TrendSignalParamDefaultTypeInternal;
extern TrendSignalParamDefaultTypeInternal _TrendSignalParam_default_instance_;
class TrendSignalSet;
struct TrendSignalSetDefaultTypeInternal;
extern TrendSignalSetDefaultTypeInternal _TrendSignalSet_default_instance_;
class TrendStateRecord;
struct TrendStateRecordDefaultTypeInternal;
extern TrendStateRecordDefaultTypeInternal _TrendStateRecord_default_instance_;
class TrendViewLimit;
struct TrendViewLimitDefaultTypeInternal;
extern TrendViewLimitDefaultTypeInternal _TrendViewLimit_default_instance_;
class TrendWidget;
struct TrendWidgetDefaultTypeInternal;
extern TrendWidgetDefaultTypeInternal _TrendWidget_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Trend* Arena::CreateMaybeMessage<::Proto::Trend>(Arena*);
template<> ::Proto::TrendArchive* Arena::CreateMaybeMessage<::Proto::TrendArchive>(Arena*);
template<> ::Proto::TrendArchiveHour* Arena::CreateMaybeMessage<::Proto::TrendArchiveHour>(Arena*);
template<> ::Proto::TrendParam* Arena::CreateMaybeMessage<::Proto::TrendParam>(Arena*);
template<> ::Proto::TrendRuler* Arena::CreateMaybeMessage<::Proto::TrendRuler>(Arena*);
template<> ::Proto::TrendRulerSet* Arena::CreateMaybeMessage<::Proto::TrendRulerSet>(Arena*);
template<> ::Proto::TrendSignalParam* Arena::CreateMaybeMessage<::Proto::TrendSignalParam>(Arena*);
template<> ::Proto::TrendSignalSet* Arena::CreateMaybeMessage<::Proto::TrendSignalSet>(Arena*);
template<> ::Proto::TrendStateRecord* Arena::CreateMaybeMessage<::Proto::TrendStateRecord>(Arena*);
template<> ::Proto::TrendViewLimit* Arena::CreateMaybeMessage<::Proto::TrendViewLimit>(Arena*);
template<> ::Proto::TrendWidget* Arena::CreateMaybeMessage<::Proto::TrendWidget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

// ===================================================================

class TrendStateRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendStateRecord) */ {
 public:
  inline TrendStateRecord() : TrendStateRecord(nullptr) {}
  virtual ~TrendStateRecord();
  explicit constexpr TrendStateRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendStateRecord(const TrendStateRecord& from);
  TrendStateRecord(TrendStateRecord&& from) noexcept
    : TrendStateRecord() {
    *this = ::std::move(from);
  }

  inline TrendStateRecord& operator=(const TrendStateRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendStateRecord& operator=(TrendStateRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendStateRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendStateRecord* internal_default_instance() {
    return reinterpret_cast<const TrendStateRecord*>(
               &_TrendStateRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrendStateRecord& a, TrendStateRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendStateRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendStateRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendStateRecord* New() const final {
    return CreateMaybeMessage<TrendStateRecord>(nullptr);
  }

  TrendStateRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendStateRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendStateRecord& from);
  void MergeFrom(const TrendStateRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendStateRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendStateRecord";
  }
  protected:
  explicit TrendStateRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesRawBufferV1FieldNumber = 4,
  };
  // optional bytes states_raw_buffer_v1 = 4;
  bool has_states_raw_buffer_v1() const;
  private:
  bool _internal_has_states_raw_buffer_v1() const;
  public:
  void clear_states_raw_buffer_v1();
  const std::string& states_raw_buffer_v1() const;
  void set_states_raw_buffer_v1(const std::string& value);
  void set_states_raw_buffer_v1(std::string&& value);
  void set_states_raw_buffer_v1(const char* value);
  void set_states_raw_buffer_v1(const void* value, size_t size);
  std::string* mutable_states_raw_buffer_v1();
  std::string* release_states_raw_buffer_v1();
  void set_allocated_states_raw_buffer_v1(std::string* states_raw_buffer_v1);
  private:
  const std::string& _internal_states_raw_buffer_v1() const;
  void _internal_set_states_raw_buffer_v1(const std::string& value);
  std::string* _internal_mutable_states_raw_buffer_v1();
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendStateRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr states_raw_buffer_v1_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendArchiveHour PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendArchiveHour) */ {
 public:
  inline TrendArchiveHour() : TrendArchiveHour(nullptr) {}
  virtual ~TrendArchiveHour();
  explicit constexpr TrendArchiveHour(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendArchiveHour(const TrendArchiveHour& from);
  TrendArchiveHour(TrendArchiveHour&& from) noexcept
    : TrendArchiveHour() {
    *this = ::std::move(from);
  }

  inline TrendArchiveHour& operator=(const TrendArchiveHour& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendArchiveHour& operator=(TrendArchiveHour&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendArchiveHour& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendArchiveHour* internal_default_instance() {
    return reinterpret_cast<const TrendArchiveHour*>(
               &_TrendArchiveHour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrendArchiveHour& a, TrendArchiveHour& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendArchiveHour* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendArchiveHour* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendArchiveHour* New() const final {
    return CreateMaybeMessage<TrendArchiveHour>(nullptr);
  }

  TrendArchiveHour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendArchiveHour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendArchiveHour& from);
  void MergeFrom(const TrendArchiveHour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendArchiveHour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendArchiveHour";
  }
  protected:
  explicit TrendArchiveHour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 4,
    kTimeStampFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // repeated .Proto.TrendStateRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::Proto::TrendStateRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendStateRecord >*
      mutable_records();
  private:
  const ::Proto::TrendStateRecord& _internal_records(int index) const;
  ::Proto::TrendStateRecord* _internal_add_records();
  public:
  const ::Proto::TrendStateRecord& records(int index) const;
  ::Proto::TrendStateRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendStateRecord >&
      records() const;

  // optional fixed64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendArchiveHour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendStateRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendArchive) */ {
 public:
  inline TrendArchive() : TrendArchive(nullptr) {}
  virtual ~TrendArchive();
  explicit constexpr TrendArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendArchive(const TrendArchive& from);
  TrendArchive(TrendArchive&& from) noexcept
    : TrendArchive() {
    *this = ::std::move(from);
  }

  inline TrendArchive& operator=(const TrendArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendArchive& operator=(TrendArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendArchive* internal_default_instance() {
    return reinterpret_cast<const TrendArchive*>(
               &_TrendArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrendArchive& a, TrendArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendArchive* New() const final {
    return CreateMaybeMessage<TrendArchive>(nullptr);
  }

  TrendArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendArchive& from);
  void MergeFrom(const TrendArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendArchive";
  }
  protected:
  explicit TrendArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoursFieldNumber = 10,
    kAppSignalIdFieldNumber = 2,
  };
  // repeated .Proto.TrendArchiveHour hours = 10;
  int hours_size() const;
  private:
  int _internal_hours_size() const;
  public:
  void clear_hours();
  ::Proto::TrendArchiveHour* mutable_hours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchiveHour >*
      mutable_hours();
  private:
  const ::Proto::TrendArchiveHour& _internal_hours(int index) const;
  ::Proto::TrendArchiveHour* _internal_add_hours();
  public:
  const ::Proto::TrendArchiveHour& hours(int index) const;
  ::Proto::TrendArchiveHour* add_hours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchiveHour >&
      hours() const;

  // optional string app_signal_id = 2;
  bool has_app_signal_id() const;
  private:
  bool _internal_has_app_signal_id() const;
  public:
  void clear_app_signal_id();
  const std::string& app_signal_id() const;
  void set_app_signal_id(const std::string& value);
  void set_app_signal_id(std::string&& value);
  void set_app_signal_id(const char* value);
  void set_app_signal_id(const char* value, size_t size);
  std::string* mutable_app_signal_id();
  std::string* release_app_signal_id();
  void set_allocated_app_signal_id(std::string* app_signal_id);
  private:
  const std::string& _internal_app_signal_id() const;
  void _internal_set_app_signal_id(const std::string& value);
  std::string* _internal_mutable_app_signal_id();
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchiveHour > hours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_signal_id_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendViewLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendViewLimit) */ {
 public:
  inline TrendViewLimit() : TrendViewLimit(nullptr) {}
  virtual ~TrendViewLimit();
  explicit constexpr TrendViewLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendViewLimit(const TrendViewLimit& from);
  TrendViewLimit(TrendViewLimit&& from) noexcept
    : TrendViewLimit() {
    *this = ::std::move(from);
  }

  inline TrendViewLimit& operator=(const TrendViewLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendViewLimit& operator=(TrendViewLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendViewLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendViewLimit* internal_default_instance() {
    return reinterpret_cast<const TrendViewLimit*>(
               &_TrendViewLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrendViewLimit& a, TrendViewLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendViewLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendViewLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendViewLimit* New() const final {
    return CreateMaybeMessage<TrendViewLimit>(nullptr);
  }

  TrendViewLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendViewLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendViewLimit& from);
  void MergeFrom(const TrendViewLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendViewLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendViewLimit";
  }
  protected:
  explicit TrendViewLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLimitFieldNumber = 2,
    kLowLimitFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional double high_limit = 2;
  bool has_high_limit() const;
  private:
  bool _internal_has_high_limit() const;
  public:
  void clear_high_limit();
  double high_limit() const;
  void set_high_limit(double value);
  private:
  double _internal_high_limit() const;
  void _internal_set_high_limit(double value);
  public:

  // optional double low_limit = 3;
  bool has_low_limit() const;
  private:
  bool _internal_has_low_limit() const;
  public:
  void clear_low_limit();
  double low_limit() const;
  void set_low_limit(double value);
  private:
  double _internal_low_limit() const;
  void _internal_set_low_limit(double value);
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendViewLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double high_limit_;
  double low_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendSignalParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendSignalParam) */ {
 public:
  inline TrendSignalParam() : TrendSignalParam(nullptr) {}
  virtual ~TrendSignalParam();
  explicit constexpr TrendSignalParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendSignalParam(const TrendSignalParam& from);
  TrendSignalParam(TrendSignalParam&& from) noexcept
    : TrendSignalParam() {
    *this = ::std::move(from);
  }

  inline TrendSignalParam& operator=(const TrendSignalParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendSignalParam& operator=(TrendSignalParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendSignalParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendSignalParam* internal_default_instance() {
    return reinterpret_cast<const TrendSignalParam*>(
               &_TrendSignalParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrendSignalParam& a, TrendSignalParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendSignalParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendSignalParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendSignalParam* New() const final {
    return CreateMaybeMessage<TrendSignalParam>(nullptr);
  }

  TrendSignalParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendSignalParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendSignalParam& from);
  void MergeFrom(const TrendSignalParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendSignalParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendSignalParam";
  }
  protected:
  explicit TrendSignalParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewLimitsFieldNumber = 33,
    kSignalIdFieldNumber = 2,
    kAppSignalIdFieldNumber = 3,
    kCaptionFieldNumber = 4,
    kEquipmentIdFieldNumber = 5,
    kUnitFieldNumber = 11,
    kAnalogFormatFieldNumber = 41,
    kTypeFieldNumber = 10,
    kPrecisionFieldNumber = 12,
    kColorFieldNumber = 40,
    kLineWeightFieldNumber = 19,
    kHighLimitFieldNumber = 20,
    kLowLimitFieldNumber = 21,
    kViewHighLimitFieldNumber = 31,
    kViewLowLimitFieldNumber = 32,
  };
  // repeated .Proto.TrendViewLimit view_limits = 33;
  int view_limits_size() const;
  private:
  int _internal_view_limits_size() const;
  public:
  void clear_view_limits();
  ::Proto::TrendViewLimit* mutable_view_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendViewLimit >*
      mutable_view_limits();
  private:
  const ::Proto::TrendViewLimit& _internal_view_limits(int index) const;
  ::Proto::TrendViewLimit* _internal_add_view_limits();
  public:
  const ::Proto::TrendViewLimit& view_limits(int index) const;
  ::Proto::TrendViewLimit* add_view_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendViewLimit >&
      view_limits() const;

  // optional string signal_id = 2;
  bool has_signal_id() const;
  private:
  bool _internal_has_signal_id() const;
  public:
  void clear_signal_id();
  const std::string& signal_id() const;
  void set_signal_id(const std::string& value);
  void set_signal_id(std::string&& value);
  void set_signal_id(const char* value);
  void set_signal_id(const char* value, size_t size);
  std::string* mutable_signal_id();
  std::string* release_signal_id();
  void set_allocated_signal_id(std::string* signal_id);
  private:
  const std::string& _internal_signal_id() const;
  void _internal_set_signal_id(const std::string& value);
  std::string* _internal_mutable_signal_id();
  public:

  // optional string app_signal_id = 3;
  bool has_app_signal_id() const;
  private:
  bool _internal_has_app_signal_id() const;
  public:
  void clear_app_signal_id();
  const std::string& app_signal_id() const;
  void set_app_signal_id(const std::string& value);
  void set_app_signal_id(std::string&& value);
  void set_app_signal_id(const char* value);
  void set_app_signal_id(const char* value, size_t size);
  std::string* mutable_app_signal_id();
  std::string* release_app_signal_id();
  void set_allocated_app_signal_id(std::string* app_signal_id);
  private:
  const std::string& _internal_app_signal_id() const;
  void _internal_set_app_signal_id(const std::string& value);
  std::string* _internal_mutable_app_signal_id();
  public:

  // optional string caption = 4;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional string equipment_id = 5;
  bool has_equipment_id() const;
  private:
  bool _internal_has_equipment_id() const;
  public:
  void clear_equipment_id();
  const std::string& equipment_id() const;
  void set_equipment_id(const std::string& value);
  void set_equipment_id(std::string&& value);
  void set_equipment_id(const char* value);
  void set_equipment_id(const char* value, size_t size);
  std::string* mutable_equipment_id();
  std::string* release_equipment_id();
  void set_allocated_equipment_id(std::string* equipment_id);
  private:
  const std::string& _internal_equipment_id() const;
  void _internal_set_equipment_id(const std::string& value);
  std::string* _internal_mutable_equipment_id();
  public:

  // optional string unit = 11;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional string analog_format = 41 [default = "g_9_or_9e"];
  bool has_analog_format() const;
  private:
  bool _internal_has_analog_format() const;
  public:
  void clear_analog_format();
  const std::string& analog_format() const;
  void set_analog_format(const std::string& value);
  void set_analog_format(std::string&& value);
  void set_analog_format(const char* value);
  void set_analog_format(const char* value, size_t size);
  std::string* mutable_analog_format();
  std::string* release_analog_format();
  void set_allocated_analog_format(std::string* analog_format);
  private:
  const std::string& _internal_analog_format() const;
  void _internal_set_analog_format(const std::string& value);
  std::string* _internal_mutable_analog_format();
  public:

  // optional int32 type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 precision = 12;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 color = 40;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double line_weight = 19 [default = 0];
  bool has_line_weight() const;
  private:
  bool _internal_has_line_weight() const;
  public:
  void clear_line_weight();
  double line_weight() const;
  void set_line_weight(double value);
  private:
  double _internal_line_weight() const;
  void _internal_set_line_weight(double value);
  public:

  // optional double high_limit = 20;
  bool has_high_limit() const;
  private:
  bool _internal_has_high_limit() const;
  public:
  void clear_high_limit();
  double high_limit() const;
  void set_high_limit(double value);
  private:
  double _internal_high_limit() const;
  void _internal_set_high_limit(double value);
  public:

  // optional double low_limit = 21;
  bool has_low_limit() const;
  private:
  bool _internal_has_low_limit() const;
  public:
  void clear_low_limit();
  double low_limit() const;
  void set_low_limit(double value);
  private:
  double _internal_low_limit() const;
  void _internal_set_low_limit(double value);
  public:

  // optional double view_high_limit = 31;
  bool has_view_high_limit() const;
  private:
  bool _internal_has_view_high_limit() const;
  public:
  void clear_view_high_limit();
  double view_high_limit() const;
  void set_view_high_limit(double value);
  private:
  double _internal_view_high_limit() const;
  void _internal_set_view_high_limit(double value);
  public:

  // optional double view_low_limit = 32;
  bool has_view_low_limit() const;
  private:
  bool _internal_has_view_low_limit() const;
  public:
  void clear_view_low_limit();
  double view_low_limit() const;
  void set_view_low_limit(double value);
  private:
  double _internal_view_low_limit() const;
  void _internal_set_view_low_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendSignalParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendViewLimit > view_limits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_signal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_analog_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analog_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  double line_weight_;
  double high_limit_;
  double low_limit_;
  double view_high_limit_;
  double view_low_limit_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendSignalSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendSignalSet) */ {
 public:
  inline TrendSignalSet() : TrendSignalSet(nullptr) {}
  virtual ~TrendSignalSet();
  explicit constexpr TrendSignalSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendSignalSet(const TrendSignalSet& from);
  TrendSignalSet(TrendSignalSet&& from) noexcept
    : TrendSignalSet() {
    *this = ::std::move(from);
  }

  inline TrendSignalSet& operator=(const TrendSignalSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendSignalSet& operator=(TrendSignalSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendSignalSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendSignalSet* internal_default_instance() {
    return reinterpret_cast<const TrendSignalSet*>(
               &_TrendSignalSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrendSignalSet& a, TrendSignalSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendSignalSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendSignalSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendSignalSet* New() const final {
    return CreateMaybeMessage<TrendSignalSet>(nullptr);
  }

  TrendSignalSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendSignalSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendSignalSet& from);
  void MergeFrom(const TrendSignalSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendSignalSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendSignalSet";
  }
  protected:
  explicit TrendSignalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalParamsFieldNumber = 2,
    kArchiveLocalTimeFieldNumber = 10,
    kArchiveSystemTimeFieldNumber = 11,
    kArchivePlantTimeFieldNumber = 12,
  };
  // repeated .Proto.TrendSignalParam signal_params = 2;
  int signal_params_size() const;
  private:
  int _internal_signal_params_size() const;
  public:
  void clear_signal_params();
  ::Proto::TrendSignalParam* mutable_signal_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendSignalParam >*
      mutable_signal_params();
  private:
  const ::Proto::TrendSignalParam& _internal_signal_params(int index) const;
  ::Proto::TrendSignalParam* _internal_add_signal_params();
  public:
  const ::Proto::TrendSignalParam& signal_params(int index) const;
  ::Proto::TrendSignalParam* add_signal_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendSignalParam >&
      signal_params() const;

  // repeated .Proto.TrendArchive archive_local_time = 10;
  int archive_local_time_size() const;
  private:
  int _internal_archive_local_time_size() const;
  public:
  void clear_archive_local_time();
  ::Proto::TrendArchive* mutable_archive_local_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >*
      mutable_archive_local_time();
  private:
  const ::Proto::TrendArchive& _internal_archive_local_time(int index) const;
  ::Proto::TrendArchive* _internal_add_archive_local_time();
  public:
  const ::Proto::TrendArchive& archive_local_time(int index) const;
  ::Proto::TrendArchive* add_archive_local_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >&
      archive_local_time() const;

  // repeated .Proto.TrendArchive archive_system_time = 11;
  int archive_system_time_size() const;
  private:
  int _internal_archive_system_time_size() const;
  public:
  void clear_archive_system_time();
  ::Proto::TrendArchive* mutable_archive_system_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >*
      mutable_archive_system_time();
  private:
  const ::Proto::TrendArchive& _internal_archive_system_time(int index) const;
  ::Proto::TrendArchive* _internal_add_archive_system_time();
  public:
  const ::Proto::TrendArchive& archive_system_time(int index) const;
  ::Proto::TrendArchive* add_archive_system_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >&
      archive_system_time() const;

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  int archive_plant_time_size() const;
  private:
  int _internal_archive_plant_time_size() const;
  public:
  void clear_archive_plant_time();
  ::Proto::TrendArchive* mutable_archive_plant_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >*
      mutable_archive_plant_time();
  private:
  const ::Proto::TrendArchive& _internal_archive_plant_time(int index) const;
  ::Proto::TrendArchive* _internal_add_archive_plant_time();
  public:
  const ::Proto::TrendArchive& archive_plant_time(int index) const;
  ::Proto::TrendArchive* add_archive_plant_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >&
      archive_plant_time() const;

  // @@protoc_insertion_point(class_scope:Proto.TrendSignalSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendSignalParam > signal_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive > archive_local_time_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive > archive_system_time_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive > archive_plant_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendRuler PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendRuler) */ {
 public:
  inline TrendRuler() : TrendRuler(nullptr) {}
  virtual ~TrendRuler();
  explicit constexpr TrendRuler(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendRuler(const TrendRuler& from);
  TrendRuler(TrendRuler&& from) noexcept
    : TrendRuler() {
    *this = ::std::move(from);
  }

  inline TrendRuler& operator=(const TrendRuler& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendRuler& operator=(TrendRuler&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendRuler& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendRuler* internal_default_instance() {
    return reinterpret_cast<const TrendRuler*>(
               &_TrendRuler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrendRuler& a, TrendRuler& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendRuler* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendRuler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendRuler* New() const final {
    return CreateMaybeMessage<TrendRuler>(nullptr);
  }

  TrendRuler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendRuler>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendRuler& from);
  void MergeFrom(const TrendRuler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendRuler* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendRuler";
  }
  protected:
  explicit TrendRuler(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kShowFieldNumber = 3,
    kShowSignalValuesFieldNumber = 4,
  };
  // optional fixed64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool show = 3 [default = true];
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  bool show() const;
  void set_show(bool value);
  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);
  public:

  // optional bool show_signal_values = 4 [default = true];
  bool has_show_signal_values() const;
  private:
  bool _internal_has_show_signal_values() const;
  public:
  void clear_show_signal_values();
  bool show_signal_values() const;
  void set_show_signal_values(bool value);
  private:
  bool _internal_show_signal_values() const;
  void _internal_set_show_signal_values(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendRuler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  bool show_;
  bool show_signal_values_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendRulerSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendRulerSet) */ {
 public:
  inline TrendRulerSet() : TrendRulerSet(nullptr) {}
  virtual ~TrendRulerSet();
  explicit constexpr TrendRulerSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendRulerSet(const TrendRulerSet& from);
  TrendRulerSet(TrendRulerSet&& from) noexcept
    : TrendRulerSet() {
    *this = ::std::move(from);
  }

  inline TrendRulerSet& operator=(const TrendRulerSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendRulerSet& operator=(TrendRulerSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendRulerSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendRulerSet* internal_default_instance() {
    return reinterpret_cast<const TrendRulerSet*>(
               &_TrendRulerSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrendRulerSet& a, TrendRulerSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendRulerSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendRulerSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendRulerSet* New() const final {
    return CreateMaybeMessage<TrendRulerSet>(nullptr);
  }

  TrendRulerSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendRulerSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendRulerSet& from);
  void MergeFrom(const TrendRulerSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendRulerSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendRulerSet";
  }
  protected:
  explicit TrendRulerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulersFieldNumber = 2,
  };
  // repeated .Proto.TrendRuler rulers = 2;
  int rulers_size() const;
  private:
  int _internal_rulers_size() const;
  public:
  void clear_rulers();
  ::Proto::TrendRuler* mutable_rulers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendRuler >*
      mutable_rulers();
  private:
  const ::Proto::TrendRuler& _internal_rulers(int index) const;
  ::Proto::TrendRuler* _internal_add_rulers();
  public:
  const ::Proto::TrendRuler& rulers(int index) const;
  ::Proto::TrendRuler* add_rulers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendRuler >&
      rulers() const;

  // @@protoc_insertion_point(class_scope:Proto.TrendRulerSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendRuler > rulers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class Trend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Trend) */ {
 public:
  inline Trend() : Trend(nullptr) {}
  virtual ~Trend();
  explicit constexpr Trend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trend(const Trend& from);
  Trend(Trend&& from) noexcept
    : Trend() {
    *this = ::std::move(from);
  }

  inline Trend& operator=(const Trend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trend& operator=(Trend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trend& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trend* internal_default_instance() {
    return reinterpret_cast<const Trend*>(
               &_Trend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Trend& a, Trend& b) {
    a.Swap(&b);
  }
  inline void Swap(Trend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trend* New() const final {
    return CreateMaybeMessage<Trend>(nullptr);
  }

  Trend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trend& from);
  void MergeFrom(const Trend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Trend";
  }
  protected:
  explicit Trend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalSetFieldNumber = 2,
    kRulerSetFieldNumber = 3,
  };
  // optional .Proto.TrendSignalSet signal_set = 2;
  bool has_signal_set() const;
  private:
  bool _internal_has_signal_set() const;
  public:
  void clear_signal_set();
  const ::Proto::TrendSignalSet& signal_set() const;
  ::Proto::TrendSignalSet* release_signal_set();
  ::Proto::TrendSignalSet* mutable_signal_set();
  void set_allocated_signal_set(::Proto::TrendSignalSet* signal_set);
  private:
  const ::Proto::TrendSignalSet& _internal_signal_set() const;
  ::Proto::TrendSignalSet* _internal_mutable_signal_set();
  public:
  void unsafe_arena_set_allocated_signal_set(
      ::Proto::TrendSignalSet* signal_set);
  ::Proto::TrendSignalSet* unsafe_arena_release_signal_set();

  // optional .Proto.TrendRulerSet ruler_set = 3;
  bool has_ruler_set() const;
  private:
  bool _internal_has_ruler_set() const;
  public:
  void clear_ruler_set();
  const ::Proto::TrendRulerSet& ruler_set() const;
  ::Proto::TrendRulerSet* release_ruler_set();
  ::Proto::TrendRulerSet* mutable_ruler_set();
  void set_allocated_ruler_set(::Proto::TrendRulerSet* ruler_set);
  private:
  const ::Proto::TrendRulerSet& _internal_ruler_set() const;
  ::Proto::TrendRulerSet* _internal_mutable_ruler_set();
  public:
  void unsafe_arena_set_allocated_ruler_set(
      ::Proto::TrendRulerSet* ruler_set);
  ::Proto::TrendRulerSet* unsafe_arena_release_ruler_set();

  // @@protoc_insertion_point(class_scope:Proto.Trend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::TrendSignalSet* signal_set_;
  ::Proto::TrendRulerSet* ruler_set_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendParam) */ {
 public:
  inline TrendParam() : TrendParam(nullptr) {}
  virtual ~TrendParam();
  explicit constexpr TrendParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendParam(const TrendParam& from);
  TrendParam(TrendParam&& from) noexcept
    : TrendParam() {
    *this = ::std::move(from);
  }

  inline TrendParam& operator=(const TrendParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendParam& operator=(TrendParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendParam* internal_default_instance() {
    return reinterpret_cast<const TrendParam*>(
               &_TrendParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TrendParam& a, TrendParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendParam* New() const final {
    return CreateMaybeMessage<TrendParam>(nullptr);
  }

  TrendParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendParam& from);
  void MergeFrom(const TrendParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendParam";
  }
  protected:
  explicit TrendParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewModeFieldNumber = 2,
    kScaleTypeFieldNumber = 5,
    kStartTimeFieldNumber = 50,
    kDurationFieldNumber = 51,
    kBackColor1StFieldNumber = 70,
    kBackColor2NdFieldNumber = 71,
    kTimeTypeFieldNumber = 3,
    kLaneCountFieldNumber = 4,
  };
  // optional int32 view_mode = 2 [default = 0];
  bool has_view_mode() const;
  private:
  bool _internal_has_view_mode() const;
  public:
  void clear_view_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 view_mode() const;
  void set_view_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view_mode() const;
  void _internal_set_view_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scale_type = 5 [default = 0];
  bool has_scale_type() const;
  private:
  bool _internal_has_scale_type() const;
  public:
  void clear_scale_type();
  ::PROTOBUF_NAMESPACE_ID::int32 scale_type() const;
  void set_scale_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale_type() const;
  void _internal_set_scale_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 start_time = 50;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 duration = 51;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint32 back_color_1st = 70;
  bool has_back_color_1st() const;
  private:
  bool _internal_has_back_color_1st() const;
  public:
  void clear_back_color_1st();
  ::PROTOBUF_NAMESPACE_ID::uint32 back_color_1st() const;
  void set_back_color_1st(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_back_color_1st() const;
  void _internal_set_back_color_1st(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 back_color_2nd = 71;
  bool has_back_color_2nd() const;
  private:
  bool _internal_has_back_color_2nd() const;
  public:
  void clear_back_color_2nd();
  ::PROTOBUF_NAMESPACE_ID::uint32 back_color_2nd() const;
  void set_back_color_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_back_color_2nd() const;
  void _internal_set_back_color_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 time_type = 3 [default = 2];
  bool has_time_type() const;
  private:
  bool _internal_has_time_type() const;
  public:
  void clear_time_type();
  ::PROTOBUF_NAMESPACE_ID::int32 time_type() const;
  void set_time_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_type() const;
  void _internal_set_time_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lane_count = 4 [default = 1];
  bool has_lane_count() const;
  private:
  bool _internal_has_lane_count() const;
  public:
  void clear_lane_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_count() const;
  void set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_count() const;
  void _internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TrendParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 back_color_1st_;
  ::PROTOBUF_NAMESPACE_ID::uint32 back_color_2nd_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_count_;
  friend struct ::TableStruct_trends_2eproto;
};
// -------------------------------------------------------------------

class TrendWidget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrendWidget) */ {
 public:
  inline TrendWidget() : TrendWidget(nullptr) {}
  virtual ~TrendWidget();
  explicit constexpr TrendWidget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrendWidget(const TrendWidget& from);
  TrendWidget(TrendWidget&& from) noexcept
    : TrendWidget() {
    *this = ::std::move(from);
  }

  inline TrendWidget& operator=(const TrendWidget& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrendWidget& operator=(TrendWidget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrendWidget& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrendWidget* internal_default_instance() {
    return reinterpret_cast<const TrendWidget*>(
               &_TrendWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrendWidget& a, TrendWidget& b) {
    a.Swap(&b);
  }
  inline void Swap(TrendWidget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrendWidget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrendWidget* New() const final {
    return CreateMaybeMessage<TrendWidget>(nullptr);
  }

  TrendWidget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrendWidget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrendWidget& from);
  void MergeFrom(const TrendWidget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrendWidget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrendWidget";
  }
  protected:
  explicit TrendWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trends_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrendFieldNumber = 2,
    kTrendParamFieldNumber = 3,
  };
  // optional .Proto.Trend trend = 2;
  bool has_trend() const;
  private:
  bool _internal_has_trend() const;
  public:
  void clear_trend();
  const ::Proto::Trend& trend() const;
  ::Proto::Trend* release_trend();
  ::Proto::Trend* mutable_trend();
  void set_allocated_trend(::Proto::Trend* trend);
  private:
  const ::Proto::Trend& _internal_trend() const;
  ::Proto::Trend* _internal_mutable_trend();
  public:
  void unsafe_arena_set_allocated_trend(
      ::Proto::Trend* trend);
  ::Proto::Trend* unsafe_arena_release_trend();

  // optional .Proto.TrendParam trend_param = 3;
  bool has_trend_param() const;
  private:
  bool _internal_has_trend_param() const;
  public:
  void clear_trend_param();
  const ::Proto::TrendParam& trend_param() const;
  ::Proto::TrendParam* release_trend_param();
  ::Proto::TrendParam* mutable_trend_param();
  void set_allocated_trend_param(::Proto::TrendParam* trend_param);
  private:
  const ::Proto::TrendParam& _internal_trend_param() const;
  ::Proto::TrendParam* _internal_mutable_trend_param();
  public:
  void unsafe_arena_set_allocated_trend_param(
      ::Proto::TrendParam* trend_param);
  ::Proto::TrendParam* unsafe_arena_release_trend_param();

  // @@protoc_insertion_point(class_scope:Proto.TrendWidget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::Trend* trend_;
  ::Proto::TrendParam* trend_param_;
  friend struct ::TableStruct_trends_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrendStateRecord

// optional bytes states_raw_buffer_v1 = 4;
inline bool TrendStateRecord::_internal_has_states_raw_buffer_v1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendStateRecord::has_states_raw_buffer_v1() const {
  return _internal_has_states_raw_buffer_v1();
}
inline void TrendStateRecord::clear_states_raw_buffer_v1() {
  states_raw_buffer_v1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrendStateRecord::states_raw_buffer_v1() const {
  // @@protoc_insertion_point(field_get:Proto.TrendStateRecord.states_raw_buffer_v1)
  return _internal_states_raw_buffer_v1();
}
inline void TrendStateRecord::set_states_raw_buffer_v1(const std::string& value) {
  _internal_set_states_raw_buffer_v1(value);
  // @@protoc_insertion_point(field_set:Proto.TrendStateRecord.states_raw_buffer_v1)
}
inline std::string* TrendStateRecord::mutable_states_raw_buffer_v1() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendStateRecord.states_raw_buffer_v1)
  return _internal_mutable_states_raw_buffer_v1();
}
inline const std::string& TrendStateRecord::_internal_states_raw_buffer_v1() const {
  return states_raw_buffer_v1_.Get();
}
inline void TrendStateRecord::_internal_set_states_raw_buffer_v1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  states_raw_buffer_v1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendStateRecord::set_states_raw_buffer_v1(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  states_raw_buffer_v1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendStateRecord.states_raw_buffer_v1)
}
inline void TrendStateRecord::set_states_raw_buffer_v1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  states_raw_buffer_v1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendStateRecord.states_raw_buffer_v1)
}
inline void TrendStateRecord::set_states_raw_buffer_v1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  states_raw_buffer_v1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendStateRecord.states_raw_buffer_v1)
}
inline std::string* TrendStateRecord::_internal_mutable_states_raw_buffer_v1() {
  _has_bits_[0] |= 0x00000001u;
  return states_raw_buffer_v1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendStateRecord::release_states_raw_buffer_v1() {
  // @@protoc_insertion_point(field_release:Proto.TrendStateRecord.states_raw_buffer_v1)
  if (!_internal_has_states_raw_buffer_v1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return states_raw_buffer_v1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendStateRecord::set_allocated_states_raw_buffer_v1(std::string* states_raw_buffer_v1) {
  if (states_raw_buffer_v1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  states_raw_buffer_v1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), states_raw_buffer_v1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendStateRecord.states_raw_buffer_v1)
}

// -------------------------------------------------------------------

// TrendArchiveHour

// optional fixed64 time_stamp = 2;
inline bool TrendArchiveHour::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendArchiveHour::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void TrendArchiveHour::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrendArchiveHour::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrendArchiveHour::time_stamp() const {
  // @@protoc_insertion_point(field_get:Proto.TrendArchiveHour.time_stamp)
  return _internal_time_stamp();
}
inline void TrendArchiveHour::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
}
inline void TrendArchiveHour::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Proto.TrendArchiveHour.time_stamp)
}

// optional int32 state = 3;
inline bool TrendArchiveHour::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrendArchiveHour::has_state() const {
  return _internal_has_state();
}
inline void TrendArchiveHour::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendArchiveHour::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendArchiveHour::state() const {
  // @@protoc_insertion_point(field_get:Proto.TrendArchiveHour.state)
  return _internal_state();
}
inline void TrendArchiveHour::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void TrendArchiveHour::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Proto.TrendArchiveHour.state)
}

// repeated .Proto.TrendStateRecord records = 4;
inline int TrendArchiveHour::_internal_records_size() const {
  return records_.size();
}
inline int TrendArchiveHour::records_size() const {
  return _internal_records_size();
}
inline void TrendArchiveHour::clear_records() {
  records_.Clear();
}
inline ::Proto::TrendStateRecord* TrendArchiveHour::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendArchiveHour.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendStateRecord >*
TrendArchiveHour::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendArchiveHour.records)
  return &records_;
}
inline const ::Proto::TrendStateRecord& TrendArchiveHour::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::Proto::TrendStateRecord& TrendArchiveHour::records(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendArchiveHour.records)
  return _internal_records(index);
}
inline ::Proto::TrendStateRecord* TrendArchiveHour::_internal_add_records() {
  return records_.Add();
}
inline ::Proto::TrendStateRecord* TrendArchiveHour::add_records() {
  // @@protoc_insertion_point(field_add:Proto.TrendArchiveHour.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendStateRecord >&
TrendArchiveHour::records() const {
  // @@protoc_insertion_point(field_list:Proto.TrendArchiveHour.records)
  return records_;
}

// -------------------------------------------------------------------

// TrendArchive

// optional string app_signal_id = 2;
inline bool TrendArchive::_internal_has_app_signal_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendArchive::has_app_signal_id() const {
  return _internal_has_app_signal_id();
}
inline void TrendArchive::clear_app_signal_id() {
  app_signal_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrendArchive::app_signal_id() const {
  // @@protoc_insertion_point(field_get:Proto.TrendArchive.app_signal_id)
  return _internal_app_signal_id();
}
inline void TrendArchive::set_app_signal_id(const std::string& value) {
  _internal_set_app_signal_id(value);
  // @@protoc_insertion_point(field_set:Proto.TrendArchive.app_signal_id)
}
inline std::string* TrendArchive::mutable_app_signal_id() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendArchive.app_signal_id)
  return _internal_mutable_app_signal_id();
}
inline const std::string& TrendArchive::_internal_app_signal_id() const {
  return app_signal_id_.Get();
}
inline void TrendArchive::_internal_set_app_signal_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendArchive::set_app_signal_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_signal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendArchive.app_signal_id)
}
inline void TrendArchive::set_app_signal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendArchive.app_signal_id)
}
inline void TrendArchive::set_app_signal_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendArchive.app_signal_id)
}
inline std::string* TrendArchive::_internal_mutable_app_signal_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_signal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendArchive::release_app_signal_id() {
  // @@protoc_insertion_point(field_release:Proto.TrendArchive.app_signal_id)
  if (!_internal_has_app_signal_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_signal_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendArchive::set_allocated_app_signal_id(std::string* app_signal_id) {
  if (app_signal_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_signal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_signal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendArchive.app_signal_id)
}

// repeated .Proto.TrendArchiveHour hours = 10;
inline int TrendArchive::_internal_hours_size() const {
  return hours_.size();
}
inline int TrendArchive::hours_size() const {
  return _internal_hours_size();
}
inline void TrendArchive::clear_hours() {
  hours_.Clear();
}
inline ::Proto::TrendArchiveHour* TrendArchive::mutable_hours(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendArchive.hours)
  return hours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchiveHour >*
TrendArchive::mutable_hours() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendArchive.hours)
  return &hours_;
}
inline const ::Proto::TrendArchiveHour& TrendArchive::_internal_hours(int index) const {
  return hours_.Get(index);
}
inline const ::Proto::TrendArchiveHour& TrendArchive::hours(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendArchive.hours)
  return _internal_hours(index);
}
inline ::Proto::TrendArchiveHour* TrendArchive::_internal_add_hours() {
  return hours_.Add();
}
inline ::Proto::TrendArchiveHour* TrendArchive::add_hours() {
  // @@protoc_insertion_point(field_add:Proto.TrendArchive.hours)
  return _internal_add_hours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchiveHour >&
TrendArchive::hours() const {
  // @@protoc_insertion_point(field_list:Proto.TrendArchive.hours)
  return hours_;
}

// -------------------------------------------------------------------

// TrendViewLimit

// optional int32 type = 1;
inline bool TrendViewLimit::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrendViewLimit::has_type() const {
  return _internal_has_type();
}
inline void TrendViewLimit::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendViewLimit::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendViewLimit::type() const {
  // @@protoc_insertion_point(field_get:Proto.TrendViewLimit.type)
  return _internal_type();
}
inline void TrendViewLimit::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void TrendViewLimit::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.TrendViewLimit.type)
}

// optional double high_limit = 2;
inline bool TrendViewLimit::_internal_has_high_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendViewLimit::has_high_limit() const {
  return _internal_has_high_limit();
}
inline void TrendViewLimit::clear_high_limit() {
  high_limit_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double TrendViewLimit::_internal_high_limit() const {
  return high_limit_;
}
inline double TrendViewLimit::high_limit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendViewLimit.high_limit)
  return _internal_high_limit();
}
inline void TrendViewLimit::_internal_set_high_limit(double value) {
  _has_bits_[0] |= 0x00000001u;
  high_limit_ = value;
}
inline void TrendViewLimit::set_high_limit(double value) {
  _internal_set_high_limit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendViewLimit.high_limit)
}

// optional double low_limit = 3;
inline bool TrendViewLimit::_internal_has_low_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrendViewLimit::has_low_limit() const {
  return _internal_has_low_limit();
}
inline void TrendViewLimit::clear_low_limit() {
  low_limit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrendViewLimit::_internal_low_limit() const {
  return low_limit_;
}
inline double TrendViewLimit::low_limit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendViewLimit.low_limit)
  return _internal_low_limit();
}
inline void TrendViewLimit::_internal_set_low_limit(double value) {
  _has_bits_[0] |= 0x00000002u;
  low_limit_ = value;
}
inline void TrendViewLimit::set_low_limit(double value) {
  _internal_set_low_limit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendViewLimit.low_limit)
}

// -------------------------------------------------------------------

// TrendSignalParam

// optional string signal_id = 2;
inline bool TrendSignalParam::_internal_has_signal_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendSignalParam::has_signal_id() const {
  return _internal_has_signal_id();
}
inline void TrendSignalParam::clear_signal_id() {
  signal_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrendSignalParam::signal_id() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.signal_id)
  return _internal_signal_id();
}
inline void TrendSignalParam::set_signal_id(const std::string& value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.signal_id)
}
inline std::string* TrendSignalParam::mutable_signal_id() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.signal_id)
  return _internal_mutable_signal_id();
}
inline const std::string& TrendSignalParam::_internal_signal_id() const {
  return signal_id_.Get();
}
inline void TrendSignalParam::_internal_set_signal_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendSignalParam::set_signal_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendSignalParam.signal_id)
}
inline void TrendSignalParam::set_signal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendSignalParam.signal_id)
}
inline void TrendSignalParam::set_signal_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendSignalParam.signal_id)
}
inline std::string* TrendSignalParam::_internal_mutable_signal_id() {
  _has_bits_[0] |= 0x00000001u;
  return signal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendSignalParam::release_signal_id() {
  // @@protoc_insertion_point(field_release:Proto.TrendSignalParam.signal_id)
  if (!_internal_has_signal_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signal_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendSignalParam::set_allocated_signal_id(std::string* signal_id) {
  if (signal_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendSignalParam.signal_id)
}

// optional string app_signal_id = 3;
inline bool TrendSignalParam::_internal_has_app_signal_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrendSignalParam::has_app_signal_id() const {
  return _internal_has_app_signal_id();
}
inline void TrendSignalParam::clear_app_signal_id() {
  app_signal_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrendSignalParam::app_signal_id() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.app_signal_id)
  return _internal_app_signal_id();
}
inline void TrendSignalParam::set_app_signal_id(const std::string& value) {
  _internal_set_app_signal_id(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.app_signal_id)
}
inline std::string* TrendSignalParam::mutable_app_signal_id() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.app_signal_id)
  return _internal_mutable_app_signal_id();
}
inline const std::string& TrendSignalParam::_internal_app_signal_id() const {
  return app_signal_id_.Get();
}
inline void TrendSignalParam::_internal_set_app_signal_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendSignalParam::set_app_signal_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  app_signal_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendSignalParam.app_signal_id)
}
inline void TrendSignalParam::set_app_signal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendSignalParam.app_signal_id)
}
inline void TrendSignalParam::set_app_signal_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendSignalParam.app_signal_id)
}
inline std::string* TrendSignalParam::_internal_mutable_app_signal_id() {
  _has_bits_[0] |= 0x00000002u;
  return app_signal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendSignalParam::release_app_signal_id() {
  // @@protoc_insertion_point(field_release:Proto.TrendSignalParam.app_signal_id)
  if (!_internal_has_app_signal_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return app_signal_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendSignalParam::set_allocated_app_signal_id(std::string* app_signal_id) {
  if (app_signal_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_signal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_signal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendSignalParam.app_signal_id)
}

// optional string caption = 4;
inline bool TrendSignalParam::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrendSignalParam::has_caption() const {
  return _internal_has_caption();
}
inline void TrendSignalParam::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrendSignalParam::caption() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.caption)
  return _internal_caption();
}
inline void TrendSignalParam::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.caption)
}
inline std::string* TrendSignalParam::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.caption)
  return _internal_mutable_caption();
}
inline const std::string& TrendSignalParam::_internal_caption() const {
  return caption_.Get();
}
inline void TrendSignalParam::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendSignalParam::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendSignalParam.caption)
}
inline void TrendSignalParam::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendSignalParam.caption)
}
inline void TrendSignalParam::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendSignalParam.caption)
}
inline std::string* TrendSignalParam::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000004u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendSignalParam::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.TrendSignalParam.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendSignalParam::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendSignalParam.caption)
}

// optional string equipment_id = 5;
inline bool TrendSignalParam::_internal_has_equipment_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrendSignalParam::has_equipment_id() const {
  return _internal_has_equipment_id();
}
inline void TrendSignalParam::clear_equipment_id() {
  equipment_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TrendSignalParam::equipment_id() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.equipment_id)
  return _internal_equipment_id();
}
inline void TrendSignalParam::set_equipment_id(const std::string& value) {
  _internal_set_equipment_id(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.equipment_id)
}
inline std::string* TrendSignalParam::mutable_equipment_id() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.equipment_id)
  return _internal_mutable_equipment_id();
}
inline const std::string& TrendSignalParam::_internal_equipment_id() const {
  return equipment_id_.Get();
}
inline void TrendSignalParam::_internal_set_equipment_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  equipment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendSignalParam::set_equipment_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  equipment_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendSignalParam.equipment_id)
}
inline void TrendSignalParam::set_equipment_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  equipment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendSignalParam.equipment_id)
}
inline void TrendSignalParam::set_equipment_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  equipment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendSignalParam.equipment_id)
}
inline std::string* TrendSignalParam::_internal_mutable_equipment_id() {
  _has_bits_[0] |= 0x00000008u;
  return equipment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendSignalParam::release_equipment_id() {
  // @@protoc_insertion_point(field_release:Proto.TrendSignalParam.equipment_id)
  if (!_internal_has_equipment_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return equipment_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendSignalParam::set_allocated_equipment_id(std::string* equipment_id) {
  if (equipment_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  equipment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipment_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendSignalParam.equipment_id)
}

// optional int32 type = 10;
inline bool TrendSignalParam::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrendSignalParam::has_type() const {
  return _internal_has_type();
}
inline void TrendSignalParam::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendSignalParam::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendSignalParam::type() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.type)
  return _internal_type();
}
inline void TrendSignalParam::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void TrendSignalParam::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.type)
}

// optional string unit = 11;
inline bool TrendSignalParam::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrendSignalParam::has_unit() const {
  return _internal_has_unit();
}
inline void TrendSignalParam::clear_unit() {
  unit_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TrendSignalParam::unit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.unit)
  return _internal_unit();
}
inline void TrendSignalParam::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.unit)
}
inline std::string* TrendSignalParam::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.unit)
  return _internal_mutable_unit();
}
inline const std::string& TrendSignalParam::_internal_unit() const {
  return unit_.Get();
}
inline void TrendSignalParam::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrendSignalParam::set_unit(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendSignalParam.unit)
}
inline void TrendSignalParam::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendSignalParam.unit)
}
inline void TrendSignalParam::set_unit(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendSignalParam.unit)
}
inline std::string* TrendSignalParam::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000010u;
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrendSignalParam::release_unit() {
  // @@protoc_insertion_point(field_release:Proto.TrendSignalParam.unit)
  if (!_internal_has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return unit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrendSignalParam::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendSignalParam.unit)
}

// optional int32 precision = 12;
inline bool TrendSignalParam::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrendSignalParam::has_precision() const {
  return _internal_has_precision();
}
inline void TrendSignalParam::clear_precision() {
  precision_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendSignalParam::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendSignalParam::precision() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.precision)
  return _internal_precision();
}
inline void TrendSignalParam::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  precision_ = value;
}
inline void TrendSignalParam::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.precision)
}

// optional double line_weight = 19 [default = 0];
inline bool TrendSignalParam::_internal_has_line_weight() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrendSignalParam::has_line_weight() const {
  return _internal_has_line_weight();
}
inline void TrendSignalParam::clear_line_weight() {
  line_weight_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double TrendSignalParam::_internal_line_weight() const {
  return line_weight_;
}
inline double TrendSignalParam::line_weight() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.line_weight)
  return _internal_line_weight();
}
inline void TrendSignalParam::_internal_set_line_weight(double value) {
  _has_bits_[0] |= 0x00000200u;
  line_weight_ = value;
}
inline void TrendSignalParam::set_line_weight(double value) {
  _internal_set_line_weight(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.line_weight)
}

// optional double high_limit = 20;
inline bool TrendSignalParam::_internal_has_high_limit() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrendSignalParam::has_high_limit() const {
  return _internal_has_high_limit();
}
inline void TrendSignalParam::clear_high_limit() {
  high_limit_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double TrendSignalParam::_internal_high_limit() const {
  return high_limit_;
}
inline double TrendSignalParam::high_limit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.high_limit)
  return _internal_high_limit();
}
inline void TrendSignalParam::_internal_set_high_limit(double value) {
  _has_bits_[0] |= 0x00000400u;
  high_limit_ = value;
}
inline void TrendSignalParam::set_high_limit(double value) {
  _internal_set_high_limit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.high_limit)
}

// optional double low_limit = 21;
inline bool TrendSignalParam::_internal_has_low_limit() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrendSignalParam::has_low_limit() const {
  return _internal_has_low_limit();
}
inline void TrendSignalParam::clear_low_limit() {
  low_limit_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double TrendSignalParam::_internal_low_limit() const {
  return low_limit_;
}
inline double TrendSignalParam::low_limit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.low_limit)
  return _internal_low_limit();
}
inline void TrendSignalParam::_internal_set_low_limit(double value) {
  _has_bits_[0] |= 0x00000800u;
  low_limit_ = value;
}
inline void TrendSignalParam::set_low_limit(double value) {
  _internal_set_low_limit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.low_limit)
}

// optional double view_high_limit = 31;
inline bool TrendSignalParam::_internal_has_view_high_limit() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrendSignalParam::has_view_high_limit() const {
  return _internal_has_view_high_limit();
}
inline void TrendSignalParam::clear_view_high_limit() {
  view_high_limit_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double TrendSignalParam::_internal_view_high_limit() const {
  return view_high_limit_;
}
inline double TrendSignalParam::view_high_limit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.view_high_limit)
  return _internal_view_high_limit();
}
inline void TrendSignalParam::_internal_set_view_high_limit(double value) {
  _has_bits_[0] |= 0x00001000u;
  view_high_limit_ = value;
}
inline void TrendSignalParam::set_view_high_limit(double value) {
  _internal_set_view_high_limit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.view_high_limit)
}

// optional double view_low_limit = 32;
inline bool TrendSignalParam::_internal_has_view_low_limit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrendSignalParam::has_view_low_limit() const {
  return _internal_has_view_low_limit();
}
inline void TrendSignalParam::clear_view_low_limit() {
  view_low_limit_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double TrendSignalParam::_internal_view_low_limit() const {
  return view_low_limit_;
}
inline double TrendSignalParam::view_low_limit() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.view_low_limit)
  return _internal_view_low_limit();
}
inline void TrendSignalParam::_internal_set_view_low_limit(double value) {
  _has_bits_[0] |= 0x00002000u;
  view_low_limit_ = value;
}
inline void TrendSignalParam::set_view_low_limit(double value) {
  _internal_set_view_low_limit(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.view_low_limit)
}

// repeated .Proto.TrendViewLimit view_limits = 33;
inline int TrendSignalParam::_internal_view_limits_size() const {
  return view_limits_.size();
}
inline int TrendSignalParam::view_limits_size() const {
  return _internal_view_limits_size();
}
inline void TrendSignalParam::clear_view_limits() {
  view_limits_.Clear();
}
inline ::Proto::TrendViewLimit* TrendSignalParam::mutable_view_limits(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.view_limits)
  return view_limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendViewLimit >*
TrendSignalParam::mutable_view_limits() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendSignalParam.view_limits)
  return &view_limits_;
}
inline const ::Proto::TrendViewLimit& TrendSignalParam::_internal_view_limits(int index) const {
  return view_limits_.Get(index);
}
inline const ::Proto::TrendViewLimit& TrendSignalParam::view_limits(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.view_limits)
  return _internal_view_limits(index);
}
inline ::Proto::TrendViewLimit* TrendSignalParam::_internal_add_view_limits() {
  return view_limits_.Add();
}
inline ::Proto::TrendViewLimit* TrendSignalParam::add_view_limits() {
  // @@protoc_insertion_point(field_add:Proto.TrendSignalParam.view_limits)
  return _internal_add_view_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendViewLimit >&
TrendSignalParam::view_limits() const {
  // @@protoc_insertion_point(field_list:Proto.TrendSignalParam.view_limits)
  return view_limits_;
}

// optional uint32 color = 40;
inline bool TrendSignalParam::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrendSignalParam::has_color() const {
  return _internal_has_color();
}
inline void TrendSignalParam::clear_color() {
  color_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrendSignalParam::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrendSignalParam::color() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.color)
  return _internal_color();
}
inline void TrendSignalParam::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  color_ = value;
}
inline void TrendSignalParam::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.color)
}

// optional string analog_format = 41 [default = "g_9_or_9e"];
inline bool TrendSignalParam::_internal_has_analog_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrendSignalParam::has_analog_format() const {
  return _internal_has_analog_format();
}
inline void TrendSignalParam::clear_analog_format() {
  analog_format_.ClearToDefault(::Proto::TrendSignalParam::_i_give_permission_to_break_this_code_default_analog_format_, GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TrendSignalParam::analog_format() const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalParam.analog_format)
  if (analog_format_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_analog_format_.get();
  return _internal_analog_format();
}
inline void TrendSignalParam::set_analog_format(const std::string& value) {
  _internal_set_analog_format(value);
  // @@protoc_insertion_point(field_set:Proto.TrendSignalParam.analog_format)
}
inline std::string* TrendSignalParam::mutable_analog_format() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalParam.analog_format)
  return _internal_mutable_analog_format();
}
inline const std::string& TrendSignalParam::_internal_analog_format() const {
  return analog_format_.Get();
}
inline void TrendSignalParam::_internal_set_analog_format(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  analog_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void TrendSignalParam::set_analog_format(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  analog_format_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.TrendSignalParam.analog_format)
}
inline void TrendSignalParam::set_analog_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  analog_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.TrendSignalParam.analog_format)
}
inline void TrendSignalParam::set_analog_format(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  analog_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.TrendSignalParam.analog_format)
}
inline std::string* TrendSignalParam::_internal_mutable_analog_format() {
  _has_bits_[0] |= 0x00000020u;
  return analog_format_.Mutable(::Proto::TrendSignalParam::_i_give_permission_to_break_this_code_default_analog_format_, GetArena());
}
inline std::string* TrendSignalParam::release_analog_format() {
  // @@protoc_insertion_point(field_release:Proto.TrendSignalParam.analog_format)
  if (!_internal_has_analog_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return analog_format_.ReleaseNonDefault(nullptr, GetArena());
}
inline void TrendSignalParam::set_allocated_analog_format(std::string* analog_format) {
  if (analog_format != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  analog_format_.SetAllocated(nullptr, analog_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendSignalParam.analog_format)
}

// -------------------------------------------------------------------

// TrendSignalSet

// repeated .Proto.TrendSignalParam signal_params = 2;
inline int TrendSignalSet::_internal_signal_params_size() const {
  return signal_params_.size();
}
inline int TrendSignalSet::signal_params_size() const {
  return _internal_signal_params_size();
}
inline void TrendSignalSet::clear_signal_params() {
  signal_params_.Clear();
}
inline ::Proto::TrendSignalParam* TrendSignalSet::mutable_signal_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalSet.signal_params)
  return signal_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendSignalParam >*
TrendSignalSet::mutable_signal_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendSignalSet.signal_params)
  return &signal_params_;
}
inline const ::Proto::TrendSignalParam& TrendSignalSet::_internal_signal_params(int index) const {
  return signal_params_.Get(index);
}
inline const ::Proto::TrendSignalParam& TrendSignalSet::signal_params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalSet.signal_params)
  return _internal_signal_params(index);
}
inline ::Proto::TrendSignalParam* TrendSignalSet::_internal_add_signal_params() {
  return signal_params_.Add();
}
inline ::Proto::TrendSignalParam* TrendSignalSet::add_signal_params() {
  // @@protoc_insertion_point(field_add:Proto.TrendSignalSet.signal_params)
  return _internal_add_signal_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendSignalParam >&
TrendSignalSet::signal_params() const {
  // @@protoc_insertion_point(field_list:Proto.TrendSignalSet.signal_params)
  return signal_params_;
}

// repeated .Proto.TrendArchive archive_local_time = 10;
inline int TrendSignalSet::_internal_archive_local_time_size() const {
  return archive_local_time_.size();
}
inline int TrendSignalSet::archive_local_time_size() const {
  return _internal_archive_local_time_size();
}
inline void TrendSignalSet::clear_archive_local_time() {
  archive_local_time_.Clear();
}
inline ::Proto::TrendArchive* TrendSignalSet::mutable_archive_local_time(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalSet.archive_local_time)
  return archive_local_time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >*
TrendSignalSet::mutable_archive_local_time() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendSignalSet.archive_local_time)
  return &archive_local_time_;
}
inline const ::Proto::TrendArchive& TrendSignalSet::_internal_archive_local_time(int index) const {
  return archive_local_time_.Get(index);
}
inline const ::Proto::TrendArchive& TrendSignalSet::archive_local_time(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalSet.archive_local_time)
  return _internal_archive_local_time(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::_internal_add_archive_local_time() {
  return archive_local_time_.Add();
}
inline ::Proto::TrendArchive* TrendSignalSet::add_archive_local_time() {
  // @@protoc_insertion_point(field_add:Proto.TrendSignalSet.archive_local_time)
  return _internal_add_archive_local_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >&
TrendSignalSet::archive_local_time() const {
  // @@protoc_insertion_point(field_list:Proto.TrendSignalSet.archive_local_time)
  return archive_local_time_;
}

// repeated .Proto.TrendArchive archive_system_time = 11;
inline int TrendSignalSet::_internal_archive_system_time_size() const {
  return archive_system_time_.size();
}
inline int TrendSignalSet::archive_system_time_size() const {
  return _internal_archive_system_time_size();
}
inline void TrendSignalSet::clear_archive_system_time() {
  archive_system_time_.Clear();
}
inline ::Proto::TrendArchive* TrendSignalSet::mutable_archive_system_time(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalSet.archive_system_time)
  return archive_system_time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >*
TrendSignalSet::mutable_archive_system_time() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendSignalSet.archive_system_time)
  return &archive_system_time_;
}
inline const ::Proto::TrendArchive& TrendSignalSet::_internal_archive_system_time(int index) const {
  return archive_system_time_.Get(index);
}
inline const ::Proto::TrendArchive& TrendSignalSet::archive_system_time(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalSet.archive_system_time)
  return _internal_archive_system_time(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::_internal_add_archive_system_time() {
  return archive_system_time_.Add();
}
inline ::Proto::TrendArchive* TrendSignalSet::add_archive_system_time() {
  // @@protoc_insertion_point(field_add:Proto.TrendSignalSet.archive_system_time)
  return _internal_add_archive_system_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >&
TrendSignalSet::archive_system_time() const {
  // @@protoc_insertion_point(field_list:Proto.TrendSignalSet.archive_system_time)
  return archive_system_time_;
}

// repeated .Proto.TrendArchive archive_plant_time = 12;
inline int TrendSignalSet::_internal_archive_plant_time_size() const {
  return archive_plant_time_.size();
}
inline int TrendSignalSet::archive_plant_time_size() const {
  return _internal_archive_plant_time_size();
}
inline void TrendSignalSet::clear_archive_plant_time() {
  archive_plant_time_.Clear();
}
inline ::Proto::TrendArchive* TrendSignalSet::mutable_archive_plant_time(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendSignalSet.archive_plant_time)
  return archive_plant_time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >*
TrendSignalSet::mutable_archive_plant_time() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendSignalSet.archive_plant_time)
  return &archive_plant_time_;
}
inline const ::Proto::TrendArchive& TrendSignalSet::_internal_archive_plant_time(int index) const {
  return archive_plant_time_.Get(index);
}
inline const ::Proto::TrendArchive& TrendSignalSet::archive_plant_time(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendSignalSet.archive_plant_time)
  return _internal_archive_plant_time(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::_internal_add_archive_plant_time() {
  return archive_plant_time_.Add();
}
inline ::Proto::TrendArchive* TrendSignalSet::add_archive_plant_time() {
  // @@protoc_insertion_point(field_add:Proto.TrendSignalSet.archive_plant_time)
  return _internal_add_archive_plant_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendArchive >&
TrendSignalSet::archive_plant_time() const {
  // @@protoc_insertion_point(field_list:Proto.TrendSignalSet.archive_plant_time)
  return archive_plant_time_;
}

// -------------------------------------------------------------------

// TrendRuler

// optional fixed64 time_stamp = 2;
inline bool TrendRuler::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendRuler::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void TrendRuler::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrendRuler::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrendRuler::time_stamp() const {
  // @@protoc_insertion_point(field_get:Proto.TrendRuler.time_stamp)
  return _internal_time_stamp();
}
inline void TrendRuler::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
}
inline void TrendRuler::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Proto.TrendRuler.time_stamp)
}

// optional bool show = 3 [default = true];
inline bool TrendRuler::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrendRuler::has_show() const {
  return _internal_has_show();
}
inline void TrendRuler::clear_show() {
  show_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TrendRuler::_internal_show() const {
  return show_;
}
inline bool TrendRuler::show() const {
  // @@protoc_insertion_point(field_get:Proto.TrendRuler.show)
  return _internal_show();
}
inline void TrendRuler::_internal_set_show(bool value) {
  _has_bits_[0] |= 0x00000002u;
  show_ = value;
}
inline void TrendRuler::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:Proto.TrendRuler.show)
}

// optional bool show_signal_values = 4 [default = true];
inline bool TrendRuler::_internal_has_show_signal_values() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrendRuler::has_show_signal_values() const {
  return _internal_has_show_signal_values();
}
inline void TrendRuler::clear_show_signal_values() {
  show_signal_values_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TrendRuler::_internal_show_signal_values() const {
  return show_signal_values_;
}
inline bool TrendRuler::show_signal_values() const {
  // @@protoc_insertion_point(field_get:Proto.TrendRuler.show_signal_values)
  return _internal_show_signal_values();
}
inline void TrendRuler::_internal_set_show_signal_values(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_signal_values_ = value;
}
inline void TrendRuler::set_show_signal_values(bool value) {
  _internal_set_show_signal_values(value);
  // @@protoc_insertion_point(field_set:Proto.TrendRuler.show_signal_values)
}

// -------------------------------------------------------------------

// TrendRulerSet

// repeated .Proto.TrendRuler rulers = 2;
inline int TrendRulerSet::_internal_rulers_size() const {
  return rulers_.size();
}
inline int TrendRulerSet::rulers_size() const {
  return _internal_rulers_size();
}
inline void TrendRulerSet::clear_rulers() {
  rulers_.Clear();
}
inline ::Proto::TrendRuler* TrendRulerSet::mutable_rulers(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrendRulerSet.rulers)
  return rulers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendRuler >*
TrendRulerSet::mutable_rulers() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrendRulerSet.rulers)
  return &rulers_;
}
inline const ::Proto::TrendRuler& TrendRulerSet::_internal_rulers(int index) const {
  return rulers_.Get(index);
}
inline const ::Proto::TrendRuler& TrendRulerSet::rulers(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrendRulerSet.rulers)
  return _internal_rulers(index);
}
inline ::Proto::TrendRuler* TrendRulerSet::_internal_add_rulers() {
  return rulers_.Add();
}
inline ::Proto::TrendRuler* TrendRulerSet::add_rulers() {
  // @@protoc_insertion_point(field_add:Proto.TrendRulerSet.rulers)
  return _internal_add_rulers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TrendRuler >&
TrendRulerSet::rulers() const {
  // @@protoc_insertion_point(field_list:Proto.TrendRulerSet.rulers)
  return rulers_;
}

// -------------------------------------------------------------------

// Trend

// optional .Proto.TrendSignalSet signal_set = 2;
inline bool Trend::_internal_has_signal_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || signal_set_ != nullptr);
  return value;
}
inline bool Trend::has_signal_set() const {
  return _internal_has_signal_set();
}
inline void Trend::clear_signal_set() {
  if (signal_set_ != nullptr) signal_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::TrendSignalSet& Trend::_internal_signal_set() const {
  const ::Proto::TrendSignalSet* p = signal_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TrendSignalSet&>(
      ::Proto::_TrendSignalSet_default_instance_);
}
inline const ::Proto::TrendSignalSet& Trend::signal_set() const {
  // @@protoc_insertion_point(field_get:Proto.Trend.signal_set)
  return _internal_signal_set();
}
inline void Trend::unsafe_arena_set_allocated_signal_set(
    ::Proto::TrendSignalSet* signal_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_set_);
  }
  signal_set_ = signal_set;
  if (signal_set) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Trend.signal_set)
}
inline ::Proto::TrendSignalSet* Trend::release_signal_set() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TrendSignalSet* temp = signal_set_;
  signal_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TrendSignalSet* Trend::unsafe_arena_release_signal_set() {
  // @@protoc_insertion_point(field_release:Proto.Trend.signal_set)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TrendSignalSet* temp = signal_set_;
  signal_set_ = nullptr;
  return temp;
}
inline ::Proto::TrendSignalSet* Trend::_internal_mutable_signal_set() {
  _has_bits_[0] |= 0x00000001u;
  if (signal_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TrendSignalSet>(GetArena());
    signal_set_ = p;
  }
  return signal_set_;
}
inline ::Proto::TrendSignalSet* Trend::mutable_signal_set() {
  // @@protoc_insertion_point(field_mutable:Proto.Trend.signal_set)
  return _internal_mutable_signal_set();
}
inline void Trend::set_allocated_signal_set(::Proto::TrendSignalSet* signal_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signal_set_;
  }
  if (signal_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signal_set);
    if (message_arena != submessage_arena) {
      signal_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signal_set_ = signal_set;
  // @@protoc_insertion_point(field_set_allocated:Proto.Trend.signal_set)
}

// optional .Proto.TrendRulerSet ruler_set = 3;
inline bool Trend::_internal_has_ruler_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ruler_set_ != nullptr);
  return value;
}
inline bool Trend::has_ruler_set() const {
  return _internal_has_ruler_set();
}
inline void Trend::clear_ruler_set() {
  if (ruler_set_ != nullptr) ruler_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::TrendRulerSet& Trend::_internal_ruler_set() const {
  const ::Proto::TrendRulerSet* p = ruler_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TrendRulerSet&>(
      ::Proto::_TrendRulerSet_default_instance_);
}
inline const ::Proto::TrendRulerSet& Trend::ruler_set() const {
  // @@protoc_insertion_point(field_get:Proto.Trend.ruler_set)
  return _internal_ruler_set();
}
inline void Trend::unsafe_arena_set_allocated_ruler_set(
    ::Proto::TrendRulerSet* ruler_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ruler_set_);
  }
  ruler_set_ = ruler_set;
  if (ruler_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Trend.ruler_set)
}
inline ::Proto::TrendRulerSet* Trend::release_ruler_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::TrendRulerSet* temp = ruler_set_;
  ruler_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TrendRulerSet* Trend::unsafe_arena_release_ruler_set() {
  // @@protoc_insertion_point(field_release:Proto.Trend.ruler_set)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::TrendRulerSet* temp = ruler_set_;
  ruler_set_ = nullptr;
  return temp;
}
inline ::Proto::TrendRulerSet* Trend::_internal_mutable_ruler_set() {
  _has_bits_[0] |= 0x00000002u;
  if (ruler_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TrendRulerSet>(GetArena());
    ruler_set_ = p;
  }
  return ruler_set_;
}
inline ::Proto::TrendRulerSet* Trend::mutable_ruler_set() {
  // @@protoc_insertion_point(field_mutable:Proto.Trend.ruler_set)
  return _internal_mutable_ruler_set();
}
inline void Trend::set_allocated_ruler_set(::Proto::TrendRulerSet* ruler_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ruler_set_;
  }
  if (ruler_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ruler_set);
    if (message_arena != submessage_arena) {
      ruler_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ruler_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ruler_set_ = ruler_set;
  // @@protoc_insertion_point(field_set_allocated:Proto.Trend.ruler_set)
}

// -------------------------------------------------------------------

// TrendParam

// optional int32 view_mode = 2 [default = 0];
inline bool TrendParam::_internal_has_view_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrendParam::has_view_mode() const {
  return _internal_has_view_mode();
}
inline void TrendParam::clear_view_mode() {
  view_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::_internal_view_mode() const {
  return view_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::view_mode() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.view_mode)
  return _internal_view_mode();
}
inline void TrendParam::_internal_set_view_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  view_mode_ = value;
}
inline void TrendParam::set_view_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view_mode(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.view_mode)
}

// optional int32 time_type = 3 [default = 2];
inline bool TrendParam::_internal_has_time_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrendParam::has_time_type() const {
  return _internal_has_time_type();
}
inline void TrendParam::clear_time_type() {
  time_type_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::_internal_time_type() const {
  return time_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::time_type() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.time_type)
  return _internal_time_type();
}
inline void TrendParam::_internal_set_time_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  time_type_ = value;
}
inline void TrendParam::set_time_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_type(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.time_type)
}

// optional int32 lane_count = 4 [default = 1];
inline bool TrendParam::_internal_has_lane_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrendParam::has_lane_count() const {
  return _internal_has_lane_count();
}
inline void TrendParam::clear_lane_count() {
  lane_count_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::_internal_lane_count() const {
  return lane_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::lane_count() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.lane_count)
  return _internal_lane_count();
}
inline void TrendParam::_internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lane_count_ = value;
}
inline void TrendParam::set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_count(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.lane_count)
}

// optional fixed64 start_time = 50;
inline bool TrendParam::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrendParam::has_start_time() const {
  return _internal_has_start_time();
}
inline void TrendParam::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrendParam::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrendParam::start_time() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.start_time)
  return _internal_start_time();
}
inline void TrendParam::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
}
inline void TrendParam::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.start_time)
}

// optional int64 duration = 51;
inline bool TrendParam::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrendParam::has_duration() const {
  return _internal_has_duration();
}
inline void TrendParam::clear_duration() {
  duration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrendParam::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrendParam::duration() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.duration)
  return _internal_duration();
}
inline void TrendParam::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void TrendParam::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.duration)
}

// optional uint32 back_color_1st = 70;
inline bool TrendParam::_internal_has_back_color_1st() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrendParam::has_back_color_1st() const {
  return _internal_has_back_color_1st();
}
inline void TrendParam::clear_back_color_1st() {
  back_color_1st_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrendParam::_internal_back_color_1st() const {
  return back_color_1st_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrendParam::back_color_1st() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.back_color_1st)
  return _internal_back_color_1st();
}
inline void TrendParam::_internal_set_back_color_1st(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  back_color_1st_ = value;
}
inline void TrendParam::set_back_color_1st(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_back_color_1st(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.back_color_1st)
}

// optional uint32 back_color_2nd = 71;
inline bool TrendParam::_internal_has_back_color_2nd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrendParam::has_back_color_2nd() const {
  return _internal_has_back_color_2nd();
}
inline void TrendParam::clear_back_color_2nd() {
  back_color_2nd_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrendParam::_internal_back_color_2nd() const {
  return back_color_2nd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrendParam::back_color_2nd() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.back_color_2nd)
  return _internal_back_color_2nd();
}
inline void TrendParam::_internal_set_back_color_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  back_color_2nd_ = value;
}
inline void TrendParam::set_back_color_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_back_color_2nd(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.back_color_2nd)
}

// optional int32 scale_type = 5 [default = 0];
inline bool TrendParam::_internal_has_scale_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrendParam::has_scale_type() const {
  return _internal_has_scale_type();
}
inline void TrendParam::clear_scale_type() {
  scale_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::_internal_scale_type() const {
  return scale_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrendParam::scale_type() const {
  // @@protoc_insertion_point(field_get:Proto.TrendParam.scale_type)
  return _internal_scale_type();
}
inline void TrendParam::_internal_set_scale_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  scale_type_ = value;
}
inline void TrendParam::set_scale_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale_type(value);
  // @@protoc_insertion_point(field_set:Proto.TrendParam.scale_type)
}

// -------------------------------------------------------------------

// TrendWidget

// optional .Proto.Trend trend = 2;
inline bool TrendWidget::_internal_has_trend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || trend_ != nullptr);
  return value;
}
inline bool TrendWidget::has_trend() const {
  return _internal_has_trend();
}
inline void TrendWidget::clear_trend() {
  if (trend_ != nullptr) trend_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::Trend& TrendWidget::_internal_trend() const {
  const ::Proto::Trend* p = trend_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Trend&>(
      ::Proto::_Trend_default_instance_);
}
inline const ::Proto::Trend& TrendWidget::trend() const {
  // @@protoc_insertion_point(field_get:Proto.TrendWidget.trend)
  return _internal_trend();
}
inline void TrendWidget::unsafe_arena_set_allocated_trend(
    ::Proto::Trend* trend) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trend_);
  }
  trend_ = trend;
  if (trend) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.TrendWidget.trend)
}
inline ::Proto::Trend* TrendWidget::release_trend() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Trend* temp = trend_;
  trend_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Trend* TrendWidget::unsafe_arena_release_trend() {
  // @@protoc_insertion_point(field_release:Proto.TrendWidget.trend)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Trend* temp = trend_;
  trend_ = nullptr;
  return temp;
}
inline ::Proto::Trend* TrendWidget::_internal_mutable_trend() {
  _has_bits_[0] |= 0x00000001u;
  if (trend_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Trend>(GetArena());
    trend_ = p;
  }
  return trend_;
}
inline ::Proto::Trend* TrendWidget::mutable_trend() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendWidget.trend)
  return _internal_mutable_trend();
}
inline void TrendWidget::set_allocated_trend(::Proto::Trend* trend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trend_;
  }
  if (trend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trend);
    if (message_arena != submessage_arena) {
      trend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trend_ = trend;
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendWidget.trend)
}

// optional .Proto.TrendParam trend_param = 3;
inline bool TrendWidget::_internal_has_trend_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || trend_param_ != nullptr);
  return value;
}
inline bool TrendWidget::has_trend_param() const {
  return _internal_has_trend_param();
}
inline void TrendWidget::clear_trend_param() {
  if (trend_param_ != nullptr) trend_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::TrendParam& TrendWidget::_internal_trend_param() const {
  const ::Proto::TrendParam* p = trend_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TrendParam&>(
      ::Proto::_TrendParam_default_instance_);
}
inline const ::Proto::TrendParam& TrendWidget::trend_param() const {
  // @@protoc_insertion_point(field_get:Proto.TrendWidget.trend_param)
  return _internal_trend_param();
}
inline void TrendWidget::unsafe_arena_set_allocated_trend_param(
    ::Proto::TrendParam* trend_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trend_param_);
  }
  trend_param_ = trend_param;
  if (trend_param) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.TrendWidget.trend_param)
}
inline ::Proto::TrendParam* TrendWidget::release_trend_param() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::TrendParam* temp = trend_param_;
  trend_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TrendParam* TrendWidget::unsafe_arena_release_trend_param() {
  // @@protoc_insertion_point(field_release:Proto.TrendWidget.trend_param)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::TrendParam* temp = trend_param_;
  trend_param_ = nullptr;
  return temp;
}
inline ::Proto::TrendParam* TrendWidget::_internal_mutable_trend_param() {
  _has_bits_[0] |= 0x00000002u;
  if (trend_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TrendParam>(GetArena());
    trend_param_ = p;
  }
  return trend_param_;
}
inline ::Proto::TrendParam* TrendWidget::mutable_trend_param() {
  // @@protoc_insertion_point(field_mutable:Proto.TrendWidget.trend_param)
  return _internal_mutable_trend_param();
}
inline void TrendWidget::set_allocated_trend_param(::Proto::TrendParam* trend_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trend_param_;
  }
  if (trend_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trend_param);
    if (message_arena != submessage_arena) {
      trend_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trend_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trend_param_ = trend_param;
  // @@protoc_insertion_point(field_set_allocated:Proto.TrendWidget.trend_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trends_2eproto

#ifdef _MSC_VER
#pragma warning(pop)
#endif