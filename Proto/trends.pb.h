// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trends.proto

#ifndef PROTOBUF_trends_2eproto__INCLUDED
#define PROTOBUF_trends_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trends_2eproto();
void protobuf_AssignDesc_trends_2eproto();
void protobuf_ShutdownFile_trends_2eproto();

class TrendStateItem;
class TrendStateRecord;
class TrendArchiveHour;
class TrendArchive;
class TrendSignalParam;
class TrendSignalSet;
class TrendRuller;
class TrendRullerSet;
class Trend;
class TrendParam;
class TrendWidget;

// ===================================================================

class TrendStateItem : public ::google::protobuf::Message {
 public:
  TrendStateItem();
  virtual ~TrendStateItem();

  TrendStateItem(const TrendStateItem& from);

  inline TrendStateItem& operator=(const TrendStateItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendStateItem& default_instance();

  void Swap(TrendStateItem* other);

  // implements Message ----------------------------------------------

  TrendStateItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendStateItem& from);
  void MergeFrom(const TrendStateItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 time_system = 2;
  inline bool has_time_system() const;
  inline void clear_time_system();
  static const int kTimeSystemFieldNumber = 2;
  inline ::google::protobuf::uint64 time_system() const;
  inline void set_time_system(::google::protobuf::uint64 value);

  // optional fixed64 time_local = 3;
  inline bool has_time_local() const;
  inline void clear_time_local();
  static const int kTimeLocalFieldNumber = 3;
  inline ::google::protobuf::uint64 time_local() const;
  inline void set_time_local(::google::protobuf::uint64 value);

  // optional fixed64 time_plant = 4;
  inline bool has_time_plant() const;
  inline void clear_time_plant();
  static const int kTimePlantFieldNumber = 4;
  inline ::google::protobuf::uint64 time_plant() const;
  inline void set_time_plant(::google::protobuf::uint64 value);

  // optional int64 archive_index = 5 [default = 0];
  inline bool has_archive_index() const;
  inline void clear_archive_index();
  static const int kArchiveIndexFieldNumber = 5;
  inline ::google::protobuf::int64 archive_index() const;
  inline void set_archive_index(::google::protobuf::int64 value);

  // optional int32 flags = 8;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 8;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // optional double value = 12;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 12;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:Proto.TrendStateItem)
 private:
  inline void set_has_time_system();
  inline void clear_has_time_system();
  inline void set_has_time_local();
  inline void clear_has_time_local();
  inline void set_has_time_plant();
  inline void clear_has_time_plant();
  inline void set_has_archive_index();
  inline void clear_has_archive_index();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_system_;
  ::google::protobuf::uint64 time_local_;
  ::google::protobuf::uint64 time_plant_;
  ::google::protobuf::int64 archive_index_;
  double value_;
  ::google::protobuf::int32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendStateItem* default_instance_;
};
// -------------------------------------------------------------------

class TrendStateRecord : public ::google::protobuf::Message {
 public:
  TrendStateRecord();
  virtual ~TrendStateRecord();

  TrendStateRecord(const TrendStateRecord& from);

  inline TrendStateRecord& operator=(const TrendStateRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendStateRecord& default_instance();

  void Swap(TrendStateRecord* other);

  // implements Message ----------------------------------------------

  TrendStateRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendStateRecord& from);
  void MergeFrom(const TrendStateRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.TrendStateItem states = 3;
  inline int states_size() const;
  inline void clear_states();
  static const int kStatesFieldNumber = 3;
  inline const ::Proto::TrendStateItem& states(int index) const;
  inline ::Proto::TrendStateItem* mutable_states(int index);
  inline ::Proto::TrendStateItem* add_states();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateItem >&
      states() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateItem >*
      mutable_states();

  // @@protoc_insertion_point(class_scope:Proto.TrendStateRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateItem > states_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendStateRecord* default_instance_;
};
// -------------------------------------------------------------------

class TrendArchiveHour : public ::google::protobuf::Message {
 public:
  TrendArchiveHour();
  virtual ~TrendArchiveHour();

  TrendArchiveHour(const TrendArchiveHour& from);

  inline TrendArchiveHour& operator=(const TrendArchiveHour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendArchiveHour& default_instance();

  void Swap(TrendArchiveHour* other);

  // implements Message ----------------------------------------------

  TrendArchiveHour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendArchiveHour& from);
  void MergeFrom(const TrendArchiveHour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated .Proto.TrendStateRecord records = 4;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 4;
  inline const ::Proto::TrendStateRecord& records(int index) const;
  inline ::Proto::TrendStateRecord* mutable_records(int index);
  inline ::Proto::TrendStateRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateRecord >*
      mutable_records();

  // @@protoc_insertion_point(class_scope:Proto.TrendArchiveHour)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateRecord > records_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendArchiveHour* default_instance_;
};
// -------------------------------------------------------------------

class TrendArchive : public ::google::protobuf::Message {
 public:
  TrendArchive();
  virtual ~TrendArchive();

  TrendArchive(const TrendArchive& from);

  inline TrendArchive& operator=(const TrendArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendArchive& default_instance();

  void Swap(TrendArchive* other);

  // implements Message ----------------------------------------------

  TrendArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendArchive& from);
  void MergeFrom(const TrendArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_signal_id = 2;
  inline bool has_app_signal_id() const;
  inline void clear_app_signal_id();
  static const int kAppSignalIdFieldNumber = 2;
  inline const ::std::string& app_signal_id() const;
  inline void set_app_signal_id(const ::std::string& value);
  inline void set_app_signal_id(const char* value);
  inline void set_app_signal_id(const char* value, size_t size);
  inline ::std::string* mutable_app_signal_id();
  inline ::std::string* release_app_signal_id();
  inline void set_allocated_app_signal_id(::std::string* app_signal_id);

  // repeated .Proto.TrendArchiveHour hours = 10;
  inline int hours_size() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 10;
  inline const ::Proto::TrendArchiveHour& hours(int index) const;
  inline ::Proto::TrendArchiveHour* mutable_hours(int index);
  inline ::Proto::TrendArchiveHour* add_hours();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchiveHour >&
      hours() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchiveHour >*
      mutable_hours();

  // @@protoc_insertion_point(class_scope:Proto.TrendArchive)
 private:
  inline void set_has_app_signal_id();
  inline void clear_has_app_signal_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* app_signal_id_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchiveHour > hours_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendArchive* default_instance_;
};
// -------------------------------------------------------------------

class TrendSignalParam : public ::google::protobuf::Message {
 public:
  TrendSignalParam();
  virtual ~TrendSignalParam();

  TrendSignalParam(const TrendSignalParam& from);

  inline TrendSignalParam& operator=(const TrendSignalParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendSignalParam& default_instance();

  void Swap(TrendSignalParam* other);

  // implements Message ----------------------------------------------

  TrendSignalParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendSignalParam& from);
  void MergeFrom(const TrendSignalParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signal_id = 2;
  inline bool has_signal_id() const;
  inline void clear_signal_id();
  static const int kSignalIdFieldNumber = 2;
  inline const ::std::string& signal_id() const;
  inline void set_signal_id(const ::std::string& value);
  inline void set_signal_id(const char* value);
  inline void set_signal_id(const char* value, size_t size);
  inline ::std::string* mutable_signal_id();
  inline ::std::string* release_signal_id();
  inline void set_allocated_signal_id(::std::string* signal_id);

  // optional string app_signal_id = 3;
  inline bool has_app_signal_id() const;
  inline void clear_app_signal_id();
  static const int kAppSignalIdFieldNumber = 3;
  inline const ::std::string& app_signal_id() const;
  inline void set_app_signal_id(const ::std::string& value);
  inline void set_app_signal_id(const char* value);
  inline void set_app_signal_id(const char* value, size_t size);
  inline ::std::string* mutable_app_signal_id();
  inline ::std::string* release_app_signal_id();
  inline void set_allocated_app_signal_id(::std::string* app_signal_id);

  // optional string caption = 4;
  inline bool has_caption() const;
  inline void clear_caption();
  static const int kCaptionFieldNumber = 4;
  inline const ::std::string& caption() const;
  inline void set_caption(const ::std::string& value);
  inline void set_caption(const char* value);
  inline void set_caption(const char* value, size_t size);
  inline ::std::string* mutable_caption();
  inline ::std::string* release_caption();
  inline void set_allocated_caption(::std::string* caption);

  // optional string equipment_id = 5;
  inline bool has_equipment_id() const;
  inline void clear_equipment_id();
  static const int kEquipmentIdFieldNumber = 5;
  inline const ::std::string& equipment_id() const;
  inline void set_equipment_id(const ::std::string& value);
  inline void set_equipment_id(const char* value);
  inline void set_equipment_id(const char* value, size_t size);
  inline ::std::string* mutable_equipment_id();
  inline ::std::string* release_equipment_id();
  inline void set_allocated_equipment_id(::std::string* equipment_id);

  // optional int32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string unit = 11;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 11;
  inline const ::std::string& unit() const;
  inline void set_unit(const ::std::string& value);
  inline void set_unit(const char* value);
  inline void set_unit(const char* value, size_t size);
  inline ::std::string* mutable_unit();
  inline ::std::string* release_unit();
  inline void set_allocated_unit(::std::string* unit);

  // optional double high_limit = 20;
  inline bool has_high_limit() const;
  inline void clear_high_limit();
  static const int kHighLimitFieldNumber = 20;
  inline double high_limit() const;
  inline void set_high_limit(double value);

  // optional double low_limit = 21;
  inline bool has_low_limit() const;
  inline void clear_low_limit();
  static const int kLowLimitFieldNumber = 21;
  inline double low_limit() const;
  inline void set_low_limit(double value);

  // optional double view_high_limit = 31;
  inline bool has_view_high_limit() const;
  inline void clear_view_high_limit();
  static const int kViewHighLimitFieldNumber = 31;
  inline double view_high_limit() const;
  inline void set_view_high_limit(double value);

  // optional double view_low_limit = 32;
  inline bool has_view_low_limit() const;
  inline void clear_view_low_limit();
  static const int kViewLowLimitFieldNumber = 32;
  inline double view_low_limit() const;
  inline void set_view_low_limit(double value);

  // optional uint32 color = 40;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 40;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.TrendSignalParam)
 private:
  inline void set_has_signal_id();
  inline void clear_has_signal_id();
  inline void set_has_app_signal_id();
  inline void clear_has_app_signal_id();
  inline void set_has_caption();
  inline void clear_has_caption();
  inline void set_has_equipment_id();
  inline void clear_has_equipment_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_high_limit();
  inline void clear_has_high_limit();
  inline void set_has_low_limit();
  inline void clear_has_low_limit();
  inline void set_has_view_high_limit();
  inline void clear_has_view_high_limit();
  inline void set_has_view_low_limit();
  inline void clear_has_view_low_limit();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signal_id_;
  ::std::string* app_signal_id_;
  ::std::string* caption_;
  ::std::string* equipment_id_;
  ::std::string* unit_;
  double high_limit_;
  double low_limit_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 color_;
  double view_high_limit_;
  double view_low_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendSignalParam* default_instance_;
};
// -------------------------------------------------------------------

class TrendSignalSet : public ::google::protobuf::Message {
 public:
  TrendSignalSet();
  virtual ~TrendSignalSet();

  TrendSignalSet(const TrendSignalSet& from);

  inline TrendSignalSet& operator=(const TrendSignalSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendSignalSet& default_instance();

  void Swap(TrendSignalSet* other);

  // implements Message ----------------------------------------------

  TrendSignalSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendSignalSet& from);
  void MergeFrom(const TrendSignalSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.TrendSignalParam signal_params = 2;
  inline int signal_params_size() const;
  inline void clear_signal_params();
  static const int kSignalParamsFieldNumber = 2;
  inline const ::Proto::TrendSignalParam& signal_params(int index) const;
  inline ::Proto::TrendSignalParam* mutable_signal_params(int index);
  inline ::Proto::TrendSignalParam* add_signal_params();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendSignalParam >&
      signal_params() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendSignalParam >*
      mutable_signal_params();

  // repeated .Proto.TrendArchive archive_local_time = 10;
  inline int archive_local_time_size() const;
  inline void clear_archive_local_time();
  static const int kArchiveLocalTimeFieldNumber = 10;
  inline const ::Proto::TrendArchive& archive_local_time(int index) const;
  inline ::Proto::TrendArchive* mutable_archive_local_time(int index);
  inline ::Proto::TrendArchive* add_archive_local_time();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >&
      archive_local_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >*
      mutable_archive_local_time();

  // repeated .Proto.TrendArchive archive_system_time = 11;
  inline int archive_system_time_size() const;
  inline void clear_archive_system_time();
  static const int kArchiveSystemTimeFieldNumber = 11;
  inline const ::Proto::TrendArchive& archive_system_time(int index) const;
  inline ::Proto::TrendArchive* mutable_archive_system_time(int index);
  inline ::Proto::TrendArchive* add_archive_system_time();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >&
      archive_system_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >*
      mutable_archive_system_time();

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  inline int archive_plant_time_size() const;
  inline void clear_archive_plant_time();
  static const int kArchivePlantTimeFieldNumber = 12;
  inline const ::Proto::TrendArchive& archive_plant_time(int index) const;
  inline ::Proto::TrendArchive* mutable_archive_plant_time(int index);
  inline ::Proto::TrendArchive* add_archive_plant_time();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >&
      archive_plant_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >*
      mutable_archive_plant_time();

  // @@protoc_insertion_point(class_scope:Proto.TrendSignalSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Proto::TrendSignalParam > signal_params_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive > archive_local_time_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive > archive_system_time_;
  ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive > archive_plant_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendSignalSet* default_instance_;
};
// -------------------------------------------------------------------

class TrendRuller : public ::google::protobuf::Message {
 public:
  TrendRuller();
  virtual ~TrendRuller();

  TrendRuller(const TrendRuller& from);

  inline TrendRuller& operator=(const TrendRuller& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendRuller& default_instance();

  void Swap(TrendRuller* other);

  // implements Message ----------------------------------------------

  TrendRuller* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendRuller& from);
  void MergeFrom(const TrendRuller& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);

  // optional bool show = 3 [default = true];
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 3;
  inline bool show() const;
  inline void set_show(bool value);

  // optional bool show_signal_values = 4 [default = true];
  inline bool has_show_signal_values() const;
  inline void clear_show_signal_values();
  static const int kShowSignalValuesFieldNumber = 4;
  inline bool show_signal_values() const;
  inline void set_show_signal_values(bool value);

  // @@protoc_insertion_point(class_scope:Proto.TrendRuller)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_show();
  inline void clear_has_show();
  inline void set_has_show_signal_values();
  inline void clear_has_show_signal_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_stamp_;
  bool show_;
  bool show_signal_values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendRuller* default_instance_;
};
// -------------------------------------------------------------------

class TrendRullerSet : public ::google::protobuf::Message {
 public:
  TrendRullerSet();
  virtual ~TrendRullerSet();

  TrendRullerSet(const TrendRullerSet& from);

  inline TrendRullerSet& operator=(const TrendRullerSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendRullerSet& default_instance();

  void Swap(TrendRullerSet* other);

  // implements Message ----------------------------------------------

  TrendRullerSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendRullerSet& from);
  void MergeFrom(const TrendRullerSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.TrendRuller rullers = 2;
  inline int rullers_size() const;
  inline void clear_rullers();
  static const int kRullersFieldNumber = 2;
  inline const ::Proto::TrendRuller& rullers(int index) const;
  inline ::Proto::TrendRuller* mutable_rullers(int index);
  inline ::Proto::TrendRuller* add_rullers();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendRuller >&
      rullers() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendRuller >*
      mutable_rullers();

  // @@protoc_insertion_point(class_scope:Proto.TrendRullerSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Proto::TrendRuller > rullers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendRullerSet* default_instance_;
};
// -------------------------------------------------------------------

class Trend : public ::google::protobuf::Message {
 public:
  Trend();
  virtual ~Trend();

  Trend(const Trend& from);

  inline Trend& operator=(const Trend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trend& default_instance();

  void Swap(Trend* other);

  // implements Message ----------------------------------------------

  Trend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trend& from);
  void MergeFrom(const Trend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Proto.TrendSignalSet signal_set = 2;
  inline bool has_signal_set() const;
  inline void clear_signal_set();
  static const int kSignalSetFieldNumber = 2;
  inline const ::Proto::TrendSignalSet& signal_set() const;
  inline ::Proto::TrendSignalSet* mutable_signal_set();
  inline ::Proto::TrendSignalSet* release_signal_set();
  inline void set_allocated_signal_set(::Proto::TrendSignalSet* signal_set);

  // optional .Proto.TrendRullerSet ruller_set = 3;
  inline bool has_ruller_set() const;
  inline void clear_ruller_set();
  static const int kRullerSetFieldNumber = 3;
  inline const ::Proto::TrendRullerSet& ruller_set() const;
  inline ::Proto::TrendRullerSet* mutable_ruller_set();
  inline ::Proto::TrendRullerSet* release_ruller_set();
  inline void set_allocated_ruller_set(::Proto::TrendRullerSet* ruller_set);

  // @@protoc_insertion_point(class_scope:Proto.Trend)
 private:
  inline void set_has_signal_set();
  inline void clear_has_signal_set();
  inline void set_has_ruller_set();
  inline void clear_has_ruller_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Proto::TrendSignalSet* signal_set_;
  ::Proto::TrendRullerSet* ruller_set_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static Trend* default_instance_;
};
// -------------------------------------------------------------------

class TrendParam : public ::google::protobuf::Message {
 public:
  TrendParam();
  virtual ~TrendParam();

  TrendParam(const TrendParam& from);

  inline TrendParam& operator=(const TrendParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendParam& default_instance();

  void Swap(TrendParam* other);

  // implements Message ----------------------------------------------

  TrendParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendParam& from);
  void MergeFrom(const TrendParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 view_mode = 2 [default = 0];
  inline bool has_view_mode() const;
  inline void clear_view_mode();
  static const int kViewModeFieldNumber = 2;
  inline ::google::protobuf::int32 view_mode() const;
  inline void set_view_mode(::google::protobuf::int32 value);

  // optional int32 time_type = 3 [default = 2];
  inline bool has_time_type() const;
  inline void clear_time_type();
  static const int kTimeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 time_type() const;
  inline void set_time_type(::google::protobuf::int32 value);

  // optional int32 lane_count = 4 [default = 1];
  inline bool has_lane_count() const;
  inline void clear_lane_count();
  static const int kLaneCountFieldNumber = 4;
  inline ::google::protobuf::int32 lane_count() const;
  inline void set_lane_count(::google::protobuf::int32 value);

  // optional fixed64 start_time = 50;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 50;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional int64 duration = 51;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 51;
  inline ::google::protobuf::int64 duration() const;
  inline void set_duration(::google::protobuf::int64 value);

  // optional uint32 back_color_1st = 70;
  inline bool has_back_color_1st() const;
  inline void clear_back_color_1st();
  static const int kBackColor1StFieldNumber = 70;
  inline ::google::protobuf::uint32 back_color_1st() const;
  inline void set_back_color_1st(::google::protobuf::uint32 value);

  // optional uint32 back_color_2nd = 71;
  inline bool has_back_color_2nd() const;
  inline void clear_back_color_2nd();
  static const int kBackColor2NdFieldNumber = 71;
  inline ::google::protobuf::uint32 back_color_2nd() const;
  inline void set_back_color_2nd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.TrendParam)
 private:
  inline void set_has_view_mode();
  inline void clear_has_view_mode();
  inline void set_has_time_type();
  inline void clear_has_time_type();
  inline void set_has_lane_count();
  inline void clear_has_lane_count();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_back_color_1st();
  inline void clear_has_back_color_1st();
  inline void set_has_back_color_2nd();
  inline void clear_has_back_color_2nd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 view_mode_;
  ::google::protobuf::int32 time_type_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::int32 lane_count_;
  ::google::protobuf::uint32 back_color_1st_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::uint32 back_color_2nd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendParam* default_instance_;
};
// -------------------------------------------------------------------

class TrendWidget : public ::google::protobuf::Message {
 public:
  TrendWidget();
  virtual ~TrendWidget();

  TrendWidget(const TrendWidget& from);

  inline TrendWidget& operator=(const TrendWidget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrendWidget& default_instance();

  void Swap(TrendWidget* other);

  // implements Message ----------------------------------------------

  TrendWidget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrendWidget& from);
  void MergeFrom(const TrendWidget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Proto.Trend trend = 2;
  inline bool has_trend() const;
  inline void clear_trend();
  static const int kTrendFieldNumber = 2;
  inline const ::Proto::Trend& trend() const;
  inline ::Proto::Trend* mutable_trend();
  inline ::Proto::Trend* release_trend();
  inline void set_allocated_trend(::Proto::Trend* trend);

  // optional .Proto.TrendParam trend_param = 3;
  inline bool has_trend_param() const;
  inline void clear_trend_param();
  static const int kTrendParamFieldNumber = 3;
  inline const ::Proto::TrendParam& trend_param() const;
  inline ::Proto::TrendParam* mutable_trend_param();
  inline ::Proto::TrendParam* release_trend_param();
  inline void set_allocated_trend_param(::Proto::TrendParam* trend_param);

  // @@protoc_insertion_point(class_scope:Proto.TrendWidget)
 private:
  inline void set_has_trend();
  inline void clear_has_trend();
  inline void set_has_trend_param();
  inline void clear_has_trend_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Proto::Trend* trend_;
  ::Proto::TrendParam* trend_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trends_2eproto();
  friend void protobuf_AssignDesc_trends_2eproto();
  friend void protobuf_ShutdownFile_trends_2eproto();

  void InitAsDefaultInstance();
  static TrendWidget* default_instance_;
};
// ===================================================================


// ===================================================================

// TrendStateItem

// optional fixed64 time_system = 2;
inline bool TrendStateItem::has_time_system() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendStateItem::set_has_time_system() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendStateItem::clear_has_time_system() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendStateItem::clear_time_system() {
  time_system_ = GOOGLE_ULONGLONG(0);
  clear_has_time_system();
}
inline ::google::protobuf::uint64 TrendStateItem::time_system() const {
  return time_system_;
}
inline void TrendStateItem::set_time_system(::google::protobuf::uint64 value) {
  set_has_time_system();
  time_system_ = value;
}

// optional fixed64 time_local = 3;
inline bool TrendStateItem::has_time_local() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrendStateItem::set_has_time_local() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrendStateItem::clear_has_time_local() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrendStateItem::clear_time_local() {
  time_local_ = GOOGLE_ULONGLONG(0);
  clear_has_time_local();
}
inline ::google::protobuf::uint64 TrendStateItem::time_local() const {
  return time_local_;
}
inline void TrendStateItem::set_time_local(::google::protobuf::uint64 value) {
  set_has_time_local();
  time_local_ = value;
}

// optional fixed64 time_plant = 4;
inline bool TrendStateItem::has_time_plant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrendStateItem::set_has_time_plant() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrendStateItem::clear_has_time_plant() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrendStateItem::clear_time_plant() {
  time_plant_ = GOOGLE_ULONGLONG(0);
  clear_has_time_plant();
}
inline ::google::protobuf::uint64 TrendStateItem::time_plant() const {
  return time_plant_;
}
inline void TrendStateItem::set_time_plant(::google::protobuf::uint64 value) {
  set_has_time_plant();
  time_plant_ = value;
}

// optional int64 archive_index = 5 [default = 0];
inline bool TrendStateItem::has_archive_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrendStateItem::set_has_archive_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrendStateItem::clear_has_archive_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrendStateItem::clear_archive_index() {
  archive_index_ = GOOGLE_LONGLONG(0);
  clear_has_archive_index();
}
inline ::google::protobuf::int64 TrendStateItem::archive_index() const {
  return archive_index_;
}
inline void TrendStateItem::set_archive_index(::google::protobuf::int64 value) {
  set_has_archive_index();
  archive_index_ = value;
}

// optional int32 flags = 8;
inline bool TrendStateItem::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrendStateItem::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrendStateItem::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrendStateItem::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 TrendStateItem::flags() const {
  return flags_;
}
inline void TrendStateItem::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
}

// optional double value = 12;
inline bool TrendStateItem::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrendStateItem::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrendStateItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrendStateItem::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double TrendStateItem::value() const {
  return value_;
}
inline void TrendStateItem::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// TrendStateRecord

// repeated .Proto.TrendStateItem states = 3;
inline int TrendStateRecord::states_size() const {
  return states_.size();
}
inline void TrendStateRecord::clear_states() {
  states_.Clear();
}
inline const ::Proto::TrendStateItem& TrendStateRecord::states(int index) const {
  return states_.Get(index);
}
inline ::Proto::TrendStateItem* TrendStateRecord::mutable_states(int index) {
  return states_.Mutable(index);
}
inline ::Proto::TrendStateItem* TrendStateRecord::add_states() {
  return states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateItem >&
TrendStateRecord::states() const {
  return states_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateItem >*
TrendStateRecord::mutable_states() {
  return &states_;
}

// -------------------------------------------------------------------

// TrendArchiveHour

// optional fixed64 time_stamp = 2;
inline bool TrendArchiveHour::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendArchiveHour::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendArchiveHour::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendArchiveHour::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 TrendArchiveHour::time_stamp() const {
  return time_stamp_;
}
inline void TrendArchiveHour::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional int32 state = 3;
inline bool TrendArchiveHour::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrendArchiveHour::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrendArchiveHour::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrendArchiveHour::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 TrendArchiveHour::state() const {
  return state_;
}
inline void TrendArchiveHour::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// repeated .Proto.TrendStateRecord records = 4;
inline int TrendArchiveHour::records_size() const {
  return records_.size();
}
inline void TrendArchiveHour::clear_records() {
  records_.Clear();
}
inline const ::Proto::TrendStateRecord& TrendArchiveHour::records(int index) const {
  return records_.Get(index);
}
inline ::Proto::TrendStateRecord* TrendArchiveHour::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::Proto::TrendStateRecord* TrendArchiveHour::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateRecord >&
TrendArchiveHour::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendStateRecord >*
TrendArchiveHour::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// TrendArchive

// optional string app_signal_id = 2;
inline bool TrendArchive::has_app_signal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendArchive::set_has_app_signal_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendArchive::clear_has_app_signal_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendArchive::clear_app_signal_id() {
  if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
    app_signal_id_->clear();
  }
  clear_has_app_signal_id();
}
inline const ::std::string& TrendArchive::app_signal_id() const {
  return *app_signal_id_;
}
inline void TrendArchive::set_app_signal_id(const ::std::string& value) {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  app_signal_id_->assign(value);
}
inline void TrendArchive::set_app_signal_id(const char* value) {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  app_signal_id_->assign(value);
}
inline void TrendArchive::set_app_signal_id(const char* value, size_t size) {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  app_signal_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrendArchive::mutable_app_signal_id() {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  return app_signal_id_;
}
inline ::std::string* TrendArchive::release_app_signal_id() {
  clear_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_signal_id_;
    app_signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrendArchive::set_allocated_app_signal_id(::std::string* app_signal_id) {
  if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_signal_id_;
  }
  if (app_signal_id) {
    set_has_app_signal_id();
    app_signal_id_ = app_signal_id;
  } else {
    clear_has_app_signal_id();
    app_signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Proto.TrendArchiveHour hours = 10;
inline int TrendArchive::hours_size() const {
  return hours_.size();
}
inline void TrendArchive::clear_hours() {
  hours_.Clear();
}
inline const ::Proto::TrendArchiveHour& TrendArchive::hours(int index) const {
  return hours_.Get(index);
}
inline ::Proto::TrendArchiveHour* TrendArchive::mutable_hours(int index) {
  return hours_.Mutable(index);
}
inline ::Proto::TrendArchiveHour* TrendArchive::add_hours() {
  return hours_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchiveHour >&
TrendArchive::hours() const {
  return hours_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchiveHour >*
TrendArchive::mutable_hours() {
  return &hours_;
}

// -------------------------------------------------------------------

// TrendSignalParam

// optional string signal_id = 2;
inline bool TrendSignalParam::has_signal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendSignalParam::set_has_signal_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendSignalParam::clear_has_signal_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendSignalParam::clear_signal_id() {
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    signal_id_->clear();
  }
  clear_has_signal_id();
}
inline const ::std::string& TrendSignalParam::signal_id() const {
  return *signal_id_;
}
inline void TrendSignalParam::set_signal_id(const ::std::string& value) {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  signal_id_->assign(value);
}
inline void TrendSignalParam::set_signal_id(const char* value) {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  signal_id_->assign(value);
}
inline void TrendSignalParam::set_signal_id(const char* value, size_t size) {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  signal_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrendSignalParam::mutable_signal_id() {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  return signal_id_;
}
inline ::std::string* TrendSignalParam::release_signal_id() {
  clear_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signal_id_;
    signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrendSignalParam::set_allocated_signal_id(::std::string* signal_id) {
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_id_;
  }
  if (signal_id) {
    set_has_signal_id();
    signal_id_ = signal_id;
  } else {
    clear_has_signal_id();
    signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_signal_id = 3;
inline bool TrendSignalParam::has_app_signal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrendSignalParam::set_has_app_signal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrendSignalParam::clear_has_app_signal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrendSignalParam::clear_app_signal_id() {
  if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
    app_signal_id_->clear();
  }
  clear_has_app_signal_id();
}
inline const ::std::string& TrendSignalParam::app_signal_id() const {
  return *app_signal_id_;
}
inline void TrendSignalParam::set_app_signal_id(const ::std::string& value) {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  app_signal_id_->assign(value);
}
inline void TrendSignalParam::set_app_signal_id(const char* value) {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  app_signal_id_->assign(value);
}
inline void TrendSignalParam::set_app_signal_id(const char* value, size_t size) {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  app_signal_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrendSignalParam::mutable_app_signal_id() {
  set_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    app_signal_id_ = new ::std::string;
  }
  return app_signal_id_;
}
inline ::std::string* TrendSignalParam::release_app_signal_id() {
  clear_has_app_signal_id();
  if (app_signal_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_signal_id_;
    app_signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrendSignalParam::set_allocated_app_signal_id(::std::string* app_signal_id) {
  if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_signal_id_;
  }
  if (app_signal_id) {
    set_has_app_signal_id();
    app_signal_id_ = app_signal_id;
  } else {
    clear_has_app_signal_id();
    app_signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string caption = 4;
inline bool TrendSignalParam::has_caption() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrendSignalParam::set_has_caption() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrendSignalParam::clear_has_caption() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrendSignalParam::clear_caption() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    caption_->clear();
  }
  clear_has_caption();
}
inline const ::std::string& TrendSignalParam::caption() const {
  return *caption_;
}
inline void TrendSignalParam::set_caption(const ::std::string& value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
}
inline void TrendSignalParam::set_caption(const char* value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
}
inline void TrendSignalParam::set_caption(const char* value, size_t size) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrendSignalParam::mutable_caption() {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  return caption_;
}
inline ::std::string* TrendSignalParam::release_caption() {
  clear_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caption_;
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrendSignalParam::set_allocated_caption(::std::string* caption) {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (caption) {
    set_has_caption();
    caption_ = caption;
  } else {
    clear_has_caption();
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string equipment_id = 5;
inline bool TrendSignalParam::has_equipment_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrendSignalParam::set_has_equipment_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrendSignalParam::clear_has_equipment_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrendSignalParam::clear_equipment_id() {
  if (equipment_id_ != &::google::protobuf::internal::kEmptyString) {
    equipment_id_->clear();
  }
  clear_has_equipment_id();
}
inline const ::std::string& TrendSignalParam::equipment_id() const {
  return *equipment_id_;
}
inline void TrendSignalParam::set_equipment_id(const ::std::string& value) {
  set_has_equipment_id();
  if (equipment_id_ == &::google::protobuf::internal::kEmptyString) {
    equipment_id_ = new ::std::string;
  }
  equipment_id_->assign(value);
}
inline void TrendSignalParam::set_equipment_id(const char* value) {
  set_has_equipment_id();
  if (equipment_id_ == &::google::protobuf::internal::kEmptyString) {
    equipment_id_ = new ::std::string;
  }
  equipment_id_->assign(value);
}
inline void TrendSignalParam::set_equipment_id(const char* value, size_t size) {
  set_has_equipment_id();
  if (equipment_id_ == &::google::protobuf::internal::kEmptyString) {
    equipment_id_ = new ::std::string;
  }
  equipment_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrendSignalParam::mutable_equipment_id() {
  set_has_equipment_id();
  if (equipment_id_ == &::google::protobuf::internal::kEmptyString) {
    equipment_id_ = new ::std::string;
  }
  return equipment_id_;
}
inline ::std::string* TrendSignalParam::release_equipment_id() {
  clear_has_equipment_id();
  if (equipment_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipment_id_;
    equipment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrendSignalParam::set_allocated_equipment_id(::std::string* equipment_id) {
  if (equipment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete equipment_id_;
  }
  if (equipment_id) {
    set_has_equipment_id();
    equipment_id_ = equipment_id;
  } else {
    clear_has_equipment_id();
    equipment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 10;
inline bool TrendSignalParam::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrendSignalParam::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrendSignalParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrendSignalParam::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrendSignalParam::type() const {
  return type_;
}
inline void TrendSignalParam::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string unit = 11;
inline bool TrendSignalParam::has_unit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrendSignalParam::set_has_unit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrendSignalParam::clear_has_unit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrendSignalParam::clear_unit() {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    unit_->clear();
  }
  clear_has_unit();
}
inline const ::std::string& TrendSignalParam::unit() const {
  return *unit_;
}
inline void TrendSignalParam::set_unit(const ::std::string& value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void TrendSignalParam::set_unit(const char* value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void TrendSignalParam::set_unit(const char* value, size_t size) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrendSignalParam::mutable_unit() {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  return unit_;
}
inline ::std::string* TrendSignalParam::release_unit() {
  clear_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_;
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrendSignalParam::set_allocated_unit(::std::string* unit) {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (unit) {
    set_has_unit();
    unit_ = unit;
  } else {
    clear_has_unit();
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double high_limit = 20;
inline bool TrendSignalParam::has_high_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrendSignalParam::set_has_high_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrendSignalParam::clear_has_high_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrendSignalParam::clear_high_limit() {
  high_limit_ = 0;
  clear_has_high_limit();
}
inline double TrendSignalParam::high_limit() const {
  return high_limit_;
}
inline void TrendSignalParam::set_high_limit(double value) {
  set_has_high_limit();
  high_limit_ = value;
}

// optional double low_limit = 21;
inline bool TrendSignalParam::has_low_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrendSignalParam::set_has_low_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrendSignalParam::clear_has_low_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrendSignalParam::clear_low_limit() {
  low_limit_ = 0;
  clear_has_low_limit();
}
inline double TrendSignalParam::low_limit() const {
  return low_limit_;
}
inline void TrendSignalParam::set_low_limit(double value) {
  set_has_low_limit();
  low_limit_ = value;
}

// optional double view_high_limit = 31;
inline bool TrendSignalParam::has_view_high_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrendSignalParam::set_has_view_high_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrendSignalParam::clear_has_view_high_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrendSignalParam::clear_view_high_limit() {
  view_high_limit_ = 0;
  clear_has_view_high_limit();
}
inline double TrendSignalParam::view_high_limit() const {
  return view_high_limit_;
}
inline void TrendSignalParam::set_view_high_limit(double value) {
  set_has_view_high_limit();
  view_high_limit_ = value;
}

// optional double view_low_limit = 32;
inline bool TrendSignalParam::has_view_low_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrendSignalParam::set_has_view_low_limit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrendSignalParam::clear_has_view_low_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrendSignalParam::clear_view_low_limit() {
  view_low_limit_ = 0;
  clear_has_view_low_limit();
}
inline double TrendSignalParam::view_low_limit() const {
  return view_low_limit_;
}
inline void TrendSignalParam::set_view_low_limit(double value) {
  set_has_view_low_limit();
  view_low_limit_ = value;
}

// optional uint32 color = 40;
inline bool TrendSignalParam::has_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrendSignalParam::set_has_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrendSignalParam::clear_has_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrendSignalParam::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 TrendSignalParam::color() const {
  return color_;
}
inline void TrendSignalParam::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// TrendSignalSet

// repeated .Proto.TrendSignalParam signal_params = 2;
inline int TrendSignalSet::signal_params_size() const {
  return signal_params_.size();
}
inline void TrendSignalSet::clear_signal_params() {
  signal_params_.Clear();
}
inline const ::Proto::TrendSignalParam& TrendSignalSet::signal_params(int index) const {
  return signal_params_.Get(index);
}
inline ::Proto::TrendSignalParam* TrendSignalSet::mutable_signal_params(int index) {
  return signal_params_.Mutable(index);
}
inline ::Proto::TrendSignalParam* TrendSignalSet::add_signal_params() {
  return signal_params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendSignalParam >&
TrendSignalSet::signal_params() const {
  return signal_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendSignalParam >*
TrendSignalSet::mutable_signal_params() {
  return &signal_params_;
}

// repeated .Proto.TrendArchive archive_local_time = 10;
inline int TrendSignalSet::archive_local_time_size() const {
  return archive_local_time_.size();
}
inline void TrendSignalSet::clear_archive_local_time() {
  archive_local_time_.Clear();
}
inline const ::Proto::TrendArchive& TrendSignalSet::archive_local_time(int index) const {
  return archive_local_time_.Get(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::mutable_archive_local_time(int index) {
  return archive_local_time_.Mutable(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::add_archive_local_time() {
  return archive_local_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >&
TrendSignalSet::archive_local_time() const {
  return archive_local_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >*
TrendSignalSet::mutable_archive_local_time() {
  return &archive_local_time_;
}

// repeated .Proto.TrendArchive archive_system_time = 11;
inline int TrendSignalSet::archive_system_time_size() const {
  return archive_system_time_.size();
}
inline void TrendSignalSet::clear_archive_system_time() {
  archive_system_time_.Clear();
}
inline const ::Proto::TrendArchive& TrendSignalSet::archive_system_time(int index) const {
  return archive_system_time_.Get(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::mutable_archive_system_time(int index) {
  return archive_system_time_.Mutable(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::add_archive_system_time() {
  return archive_system_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >&
TrendSignalSet::archive_system_time() const {
  return archive_system_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >*
TrendSignalSet::mutable_archive_system_time() {
  return &archive_system_time_;
}

// repeated .Proto.TrendArchive archive_plant_time = 12;
inline int TrendSignalSet::archive_plant_time_size() const {
  return archive_plant_time_.size();
}
inline void TrendSignalSet::clear_archive_plant_time() {
  archive_plant_time_.Clear();
}
inline const ::Proto::TrendArchive& TrendSignalSet::archive_plant_time(int index) const {
  return archive_plant_time_.Get(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::mutable_archive_plant_time(int index) {
  return archive_plant_time_.Mutable(index);
}
inline ::Proto::TrendArchive* TrendSignalSet::add_archive_plant_time() {
  return archive_plant_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >&
TrendSignalSet::archive_plant_time() const {
  return archive_plant_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendArchive >*
TrendSignalSet::mutable_archive_plant_time() {
  return &archive_plant_time_;
}

// -------------------------------------------------------------------

// TrendRuller

// optional fixed64 time_stamp = 2;
inline bool TrendRuller::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendRuller::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendRuller::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendRuller::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 TrendRuller::time_stamp() const {
  return time_stamp_;
}
inline void TrendRuller::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional bool show = 3 [default = true];
inline bool TrendRuller::has_show() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrendRuller::set_has_show() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrendRuller::clear_has_show() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrendRuller::clear_show() {
  show_ = true;
  clear_has_show();
}
inline bool TrendRuller::show() const {
  return show_;
}
inline void TrendRuller::set_show(bool value) {
  set_has_show();
  show_ = value;
}

// optional bool show_signal_values = 4 [default = true];
inline bool TrendRuller::has_show_signal_values() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrendRuller::set_has_show_signal_values() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrendRuller::clear_has_show_signal_values() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrendRuller::clear_show_signal_values() {
  show_signal_values_ = true;
  clear_has_show_signal_values();
}
inline bool TrendRuller::show_signal_values() const {
  return show_signal_values_;
}
inline void TrendRuller::set_show_signal_values(bool value) {
  set_has_show_signal_values();
  show_signal_values_ = value;
}

// -------------------------------------------------------------------

// TrendRullerSet

// repeated .Proto.TrendRuller rullers = 2;
inline int TrendRullerSet::rullers_size() const {
  return rullers_.size();
}
inline void TrendRullerSet::clear_rullers() {
  rullers_.Clear();
}
inline const ::Proto::TrendRuller& TrendRullerSet::rullers(int index) const {
  return rullers_.Get(index);
}
inline ::Proto::TrendRuller* TrendRullerSet::mutable_rullers(int index) {
  return rullers_.Mutable(index);
}
inline ::Proto::TrendRuller* TrendRullerSet::add_rullers() {
  return rullers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::TrendRuller >&
TrendRullerSet::rullers() const {
  return rullers_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::TrendRuller >*
TrendRullerSet::mutable_rullers() {
  return &rullers_;
}

// -------------------------------------------------------------------

// Trend

// optional .Proto.TrendSignalSet signal_set = 2;
inline bool Trend::has_signal_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trend::set_has_signal_set() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trend::clear_has_signal_set() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trend::clear_signal_set() {
  if (signal_set_ != NULL) signal_set_->::Proto::TrendSignalSet::Clear();
  clear_has_signal_set();
}
inline const ::Proto::TrendSignalSet& Trend::signal_set() const {
  return signal_set_ != NULL ? *signal_set_ : *default_instance_->signal_set_;
}
inline ::Proto::TrendSignalSet* Trend::mutable_signal_set() {
  set_has_signal_set();
  if (signal_set_ == NULL) signal_set_ = new ::Proto::TrendSignalSet;
  return signal_set_;
}
inline ::Proto::TrendSignalSet* Trend::release_signal_set() {
  clear_has_signal_set();
  ::Proto::TrendSignalSet* temp = signal_set_;
  signal_set_ = NULL;
  return temp;
}
inline void Trend::set_allocated_signal_set(::Proto::TrendSignalSet* signal_set) {
  delete signal_set_;
  signal_set_ = signal_set;
  if (signal_set) {
    set_has_signal_set();
  } else {
    clear_has_signal_set();
  }
}

// optional .Proto.TrendRullerSet ruller_set = 3;
inline bool Trend::has_ruller_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trend::set_has_ruller_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trend::clear_has_ruller_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trend::clear_ruller_set() {
  if (ruller_set_ != NULL) ruller_set_->::Proto::TrendRullerSet::Clear();
  clear_has_ruller_set();
}
inline const ::Proto::TrendRullerSet& Trend::ruller_set() const {
  return ruller_set_ != NULL ? *ruller_set_ : *default_instance_->ruller_set_;
}
inline ::Proto::TrendRullerSet* Trend::mutable_ruller_set() {
  set_has_ruller_set();
  if (ruller_set_ == NULL) ruller_set_ = new ::Proto::TrendRullerSet;
  return ruller_set_;
}
inline ::Proto::TrendRullerSet* Trend::release_ruller_set() {
  clear_has_ruller_set();
  ::Proto::TrendRullerSet* temp = ruller_set_;
  ruller_set_ = NULL;
  return temp;
}
inline void Trend::set_allocated_ruller_set(::Proto::TrendRullerSet* ruller_set) {
  delete ruller_set_;
  ruller_set_ = ruller_set;
  if (ruller_set) {
    set_has_ruller_set();
  } else {
    clear_has_ruller_set();
  }
}

// -------------------------------------------------------------------

// TrendParam

// optional int32 view_mode = 2 [default = 0];
inline bool TrendParam::has_view_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendParam::set_has_view_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendParam::clear_has_view_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendParam::clear_view_mode() {
  view_mode_ = 0;
  clear_has_view_mode();
}
inline ::google::protobuf::int32 TrendParam::view_mode() const {
  return view_mode_;
}
inline void TrendParam::set_view_mode(::google::protobuf::int32 value) {
  set_has_view_mode();
  view_mode_ = value;
}

// optional int32 time_type = 3 [default = 2];
inline bool TrendParam::has_time_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrendParam::set_has_time_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrendParam::clear_has_time_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrendParam::clear_time_type() {
  time_type_ = 2;
  clear_has_time_type();
}
inline ::google::protobuf::int32 TrendParam::time_type() const {
  return time_type_;
}
inline void TrendParam::set_time_type(::google::protobuf::int32 value) {
  set_has_time_type();
  time_type_ = value;
}

// optional int32 lane_count = 4 [default = 1];
inline bool TrendParam::has_lane_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrendParam::set_has_lane_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrendParam::clear_has_lane_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrendParam::clear_lane_count() {
  lane_count_ = 1;
  clear_has_lane_count();
}
inline ::google::protobuf::int32 TrendParam::lane_count() const {
  return lane_count_;
}
inline void TrendParam::set_lane_count(::google::protobuf::int32 value) {
  set_has_lane_count();
  lane_count_ = value;
}

// optional fixed64 start_time = 50;
inline bool TrendParam::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrendParam::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrendParam::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrendParam::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 TrendParam::start_time() const {
  return start_time_;
}
inline void TrendParam::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 duration = 51;
inline bool TrendParam::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrendParam::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrendParam::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrendParam::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 TrendParam::duration() const {
  return duration_;
}
inline void TrendParam::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
}

// optional uint32 back_color_1st = 70;
inline bool TrendParam::has_back_color_1st() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrendParam::set_has_back_color_1st() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrendParam::clear_has_back_color_1st() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrendParam::clear_back_color_1st() {
  back_color_1st_ = 0u;
  clear_has_back_color_1st();
}
inline ::google::protobuf::uint32 TrendParam::back_color_1st() const {
  return back_color_1st_;
}
inline void TrendParam::set_back_color_1st(::google::protobuf::uint32 value) {
  set_has_back_color_1st();
  back_color_1st_ = value;
}

// optional uint32 back_color_2nd = 71;
inline bool TrendParam::has_back_color_2nd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrendParam::set_has_back_color_2nd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrendParam::clear_has_back_color_2nd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrendParam::clear_back_color_2nd() {
  back_color_2nd_ = 0u;
  clear_has_back_color_2nd();
}
inline ::google::protobuf::uint32 TrendParam::back_color_2nd() const {
  return back_color_2nd_;
}
inline void TrendParam::set_back_color_2nd(::google::protobuf::uint32 value) {
  set_has_back_color_2nd();
  back_color_2nd_ = value;
}

// -------------------------------------------------------------------

// TrendWidget

// optional .Proto.Trend trend = 2;
inline bool TrendWidget::has_trend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrendWidget::set_has_trend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrendWidget::clear_has_trend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrendWidget::clear_trend() {
  if (trend_ != NULL) trend_->::Proto::Trend::Clear();
  clear_has_trend();
}
inline const ::Proto::Trend& TrendWidget::trend() const {
  return trend_ != NULL ? *trend_ : *default_instance_->trend_;
}
inline ::Proto::Trend* TrendWidget::mutable_trend() {
  set_has_trend();
  if (trend_ == NULL) trend_ = new ::Proto::Trend;
  return trend_;
}
inline ::Proto::Trend* TrendWidget::release_trend() {
  clear_has_trend();
  ::Proto::Trend* temp = trend_;
  trend_ = NULL;
  return temp;
}
inline void TrendWidget::set_allocated_trend(::Proto::Trend* trend) {
  delete trend_;
  trend_ = trend;
  if (trend) {
    set_has_trend();
  } else {
    clear_has_trend();
  }
}

// optional .Proto.TrendParam trend_param = 3;
inline bool TrendWidget::has_trend_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrendWidget::set_has_trend_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrendWidget::clear_has_trend_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrendWidget::clear_trend_param() {
  if (trend_param_ != NULL) trend_param_->::Proto::TrendParam::Clear();
  clear_has_trend_param();
}
inline const ::Proto::TrendParam& TrendWidget::trend_param() const {
  return trend_param_ != NULL ? *trend_param_ : *default_instance_->trend_param_;
}
inline ::Proto::TrendParam* TrendWidget::mutable_trend_param() {
  set_has_trend_param();
  if (trend_param_ == NULL) trend_param_ = new ::Proto::TrendParam;
  return trend_param_;
}
inline ::Proto::TrendParam* TrendWidget::release_trend_param() {
  clear_has_trend_param();
  ::Proto::TrendParam* temp = trend_param_;
  trend_param_ = NULL;
  return temp;
}
inline void TrendWidget::set_allocated_trend_param(::Proto::TrendParam* trend_param) {
  delete trend_param_;
  trend_param_ = trend_param;
  if (trend_param) {
    set_has_trend_param();
  } else {
    clear_has_trend_param();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trends_2eproto__INCLUDED
