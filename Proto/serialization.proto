package Proto;

//------------------------------------------------------------------------------------------
//
//
//								Global structs
//
//
//------------------------------------------------------------------------------------------

//
//
// QUuid
//
//
message Uuid
{
	required bytes uuid = 1;
}


//
//
// Unicode строка
//
//
//
message wstring
{
	required bytes text = 1;
}


//
//
// FontParam
//
//
message FontParam
{
	required wstring name = 1;
	required double size = 2;
	required bool bold = 3;
	required bool italic = 4;
}

//
//
// VideoItemPoint
//
//
message VideoItemPoint
{
	required double x = 1;
	required double y = 2;
}

//
//
// SchemeUnit
//
//
enum SchemeUnit
{
	Display = 0;			// измерение в точках устройства (пиксели для дисплея)
	Millimeter = 1;			// измерение в мм
	Inch = 2;				// измерение в дюймах
}


//
//
// ConnectionDirrection
//
//
enum ConnectionDirrection
{
	Input = 0;
	Output = 1;
}


//------------------------------------------------------------------------------------------
//
//
//		Envelope - универсальная структура, хранит любой корневой тип
//
//
//------------------------------------------------------------------------------------------
message Envelope
{
	// Класс, для сериализации
	//
	required uint32 classnamehash = 1;				// Hash from classname, the way of getting the hash is always same

	// возможные типы для хранения
	//
	optional VideoItem videoitem = 6;				// VFrame30::CVideoItem
	optional DeviceObject deviceobject = 7;			// Hardware::DeviceObject
	optional VideoFrame videoframe = 100;			// VFrame30::CVideoFrame
	optional VideoLayer videolayer = 101;			// VFrame30::CVideoLayer
	optional FblElement fblelement = 102;			// Fbl::FblElement
	optional Configuration configuration = 103;		// VFrame30::Configuration
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::Configuration
//
//
//------------------------------------------------------------------------------------------
message Configuration
{
	required Uuid uuid = 1;
	required wstring strID = 2;
	required wstring caption = 3;
	required wstring variables = 4;
	required wstring globals = 5; 
	
	repeated Uuid videoFramesIDs = 100;
	repeated Envelope videoFrames = 101;
}


//------------------------------------------------------------------------------------------
//
//
//								Afbl namespace
//
//
//------------------------------------------------------------------------------------------


//
//
// Afbl::AfbElementCollection stored as XML
//
//
message AfbElementCollection
{
	repeated AfbElementXml elements = 1;
}


//
//
// Afbl::AfbElement stored as XML
//
//
message AfbElementXml
{
	required bytes data = 1;
}


//
//
// Afbl::FblElement stored as Protobuf
//
//
message FblElement
{
	required Uuid uuid = 1;
	required wstring strID = 2;
	required wstring caption = 3;
	required uint32 opcode = 4;

	repeated FblElementSignal inputSignals = 11;
	repeated FblElementSignal outputSignals = 12;
	repeated FblElementParam params = 13;
}


//
//
// Afbl::FblElementSignal
//
//
message FblElementSignal
{
	required wstring caption = 1;
	required FblSignalType type = 2;
}


//
//
// Afbl::FblElementParam
//
//
message FblElementParam
{
	required wstring caption = 1;
	required FblParamType type = 2;
	required FblParamValue value = 3;
	required FblParamValue defaultvalue = 4;
	required FblParamValue lowlimit = 5;
	required FblParamValue highlimit = 6;
	required bool visible = 7;
}


//
//
// Afbl::FblParamValue
//
//
message FblParamValue
{
	required int32 integralvalue = 1;
	required double floatingpoint = 2;
	required bool discrete = 3;
	required int32 type = 4;
}


//
//
// FblSignalType - тип сигнала в FblElement
//
//
enum FblSignalType
{
	Analog = 0;
	Discrete = 1;
}

//
//
// FblParamType	- Тип параметра для FblElement
//
//
enum FblParamType
{
	AnalogIntegral = 0;			// Аналоговый целочисленный (32bit signed int)
	AnalogFloatingPoint = 1;	// Аналоговый с плавающей запятой (double, 64bit)
	DiscreteValue = 2;			// Дискретный (c++ bool)
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::CVideoFrame
//
//
//------------------------------------------------------------------------------------------
message VideoFrame
{
	required Uuid uuid = 1;
	required wstring strID = 2;
	required wstring caption = 3;
	required double width = 4;
	required double height = 5;
	required SchemeUnit unit = 6;

	repeated Envelope layers = 100;				// Список слоев
	required AfbElementCollection afbs = 101;	// Application Fuynctional Block stored as XML

	// Derived from VideoFrame
	//
	optional LogicScheme logics_scheme = 200;
}


//
//
// LogicScheme
//
//
message LogicScheme
{
	repeated wstring hardware_strids = 1;
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::VideoLayer
//
//
//------------------------------------------------------------------------------------------
message VideoLayer
{
	required Uuid uuid = 1;
	required wstring name = 2;
	required bool compile = 3;
	required bool show = 4;
	required bool print = 5;

	repeated Envelope items = 15;		// Список CVideoItem'ов
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::VideItems
//
//
//------------------------------------------------------------------------------------------
message VideoItem
{
	required Uuid uuid = 1;
	required bool isStatic = 2;
	required bool isLocked = 3;
	required SchemeUnit itemUnit = 4;
	optional bool acceptClick = 5 [default = false];
	optional wstring clickScript = 6;

	// Наследуемые от CVideoItem
	//
	optional PosRectImpl PosRectImpl = 10;
	optional PosLineImpl PosLineImpl = 11;
	optional PosConnectionImpl PosConnectionImpl = 12;

	// --
	//
	optional FblItem FblItem = 106;							// 
	optional FblItemRect FblItemRect = 107;						// +PosRectImpl, FblItem
	optional FblItemLine FblItemLine = 108;						// +PosConnectionImpl, FblItem
	
	// Наслдедуемые от PosRectImpl, PosLineImpl, PosConnectionImpl
	//
	optional VideoItemRect Rect = 116;						// +PosRectImpl
	optional VideoItemLine Line = 117;						// +PosLineImpl
	optional VideoItemConnectionLine ConnectionLine = 118;				// +PosConnectionImpl
	
	optional VideoItemSignal Signal = 124;						// +FblItemRect
	optional VideoItemInputSignal InputSignal = 125;			// +Signal
	optional VideoItemOutputSignal OutputSignal = 126;			// +Signal
	optional VideoItemLink Link = 127;							// +FblItemLine
	optional VideoItemFblElement VideoItemFblElement = 128;	// +FblItemRect
}


//
//
// PosRectImpl
//
//
message PosRectImpl
{
	required double leftDocPt = 1;
	required double topDocPt = 2;
	required double widthDocPt = 3;
	required double heightDocPt = 4;
}


//
//
// PosLineImpl
//
//
message PosLineImpl
{
	required double startXDocPt = 1;
	required double startYDocPt = 2;
	required double endXDocPt = 3;
	required double endYDocPt = 4;
}


//
//
// PosConnectionImpl
//
//
message PosConnectionImpl
{
	repeated VideoItemPoint points = 1;
}


//
//
// VideoItemRect
//
//
message VideoItemRect
{
	required double weight = 1;
	required uint32 lineColor = 2;
	required uint32 fillColor = 3;
	required wstring text = 4;
	required uint32 textColor = 5;
	required FontParam font = 6;
	required bool fill = 7;
	optional bool drawrect = 8 [default = true];
}

//
//
// VideoItemLine
//
//
message VideoItemLine
{
	required double weight = 1;
	required uint32 lineColor = 2;
}

//
//
// VideoItemConnectionLine
//
//
message VideoItemConnectionLine
{
	required double weight = 1;
	required uint32 lineColor = 2;
}


//
//
// FblConnectionPoint
//
//
message FblConnectionPoint
{
	required VideoItemPoint point = 1;
	required ConnectionDirrection dirrection = 2;
	required Uuid uuid = 3;
	
	optional Uuid signalUuid = 10;
	optional wstring signalStrID = 11;
	optional wstring signalCaption = 12;
}


//
//
// FblItem
//
//
message FblItem
{
	repeated FblConnectionPoint points = 1;
}


//
//
// FblItemRect
//
//
message FblItemRect
{
	required double weight = 1;
	required uint32 lineColor = 2;
	required uint32 fillColor = 3;
	required uint32 textColor = 4;
	required FontParam font = 5;
}


//
//
// FblItemLine
//
//
message FblItemLine
{
	required double weight = 1;
	required uint32 lineColor = 2;
}


//
//
// VideoItemSignal
//
//
message VideoItemSignal
{
	repeated wstring signalStrIDs = 1;
}


//
//
// VideoItemInputSignal
//
//
message VideoItemInputSignal
{
}



//
//
// VideoItemOutputSignal
//
//
message VideoItemOutputSignal
{
}


//
//
// VideoItemLink
//
//
message VideoItemLink
{
}


//
//
// VideoItemFblElement
//
//
message VideoItemFblElement
{
	required Uuid afbGuid = 1;
	repeated FblElementParam params = 2;
}


//------------------------------------------------------------------------------------------
//
//
//								Hardware::DeviceObject
//
//
//------------------------------------------------------------------------------------------

message DeviceObject
{
	required Uuid uuid = 1;
	required wstring strId = 2;
	required wstring caption = 3;
	optional wstring childRestriction = 4;
	optional int32 place = 5 [default = 0];
	optional string dynamic_properties_struct = 6;
	repeated Property properties = 7;

	optional bool preset = 32 [default = false];
	optional bool presetRoot = 33 [default = false];
	optional wstring presetName = 34;

	// Derived from Hardware::DeviceObject
	//
	optional DeviceRoot Root = 100;					// Not used
	optional DeviceSystem System = 101;
	optional DeviceRack Rack = 102;
	optional DeviceChassis Chassis = 103;
	optional DeviceModule Module = 104;
	optional DeviceController Controller = 105;
        optional DeviceSignal Signal = 106;
        optional Workstation Workstation = 107;
        optional Software Software = 108;

}

message DeviceRoot
{
}

message DeviceSystem
{
}

message DeviceRack
{
}

message DeviceChassis
{
	optional int32 type = 1 [default = 0];
}

message DeviceModule
{
	optional int32 type = 1 [default = 0];

    optional int32 Channel = 2 [default = 0];
	optional string SubsysID = 3 [default = ""];
	optional string ConfType = 4 [default = ""];
}

message DeviceController
{
}

message DeviceSignal
{
        optional int32 type = 1 [default = 0];
}

message Workstation
{
        optional int32 type = 1 [default = 0];
}

message Software
{
        optional int32 type = 1 [default = 0];
}


// Module Configuration
//
message ModuleConfiguration
{
	optional string struct_description = 1;				// XML description of the mudule configuration structure
	repeated ModuleConfigurationValue values = 2;		// Values array
    optional string name = 3 [default = ""];            // Configuration Name
}

message ModuleConfigurationValue
{
	required string name = 1;
	required string value = 2;
}

message Property
{
	required string name = 1;
	required string value = 2;
}

//------------------------------------------------------------------------------------------
//
//
//			??????
//
//
//------------------------------------------------------------------------------------------
