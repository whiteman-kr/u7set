package Proto;

//------------------------------------------------------------------------------------------
//
//
//								Global structs
//
//
//------------------------------------------------------------------------------------------

//
// QUuid
//
message Uuid
{
	required bytes uuid = 1;
}

//
// QVariant
//
message qvariant
{
	required int32 type = 1;
	optional int32 intValue = 2 [default = 0];
	optional uint32 uintValue = 3 [default = 0];
	optional double doubleValue = 4 [default = 0];
	optional bool boolValue = 5 [default = false];
	optional float floatValue = 6 [default = 0];
}

//
// Unicode string
//
message wstring
{
	required bytes text = 1;
}


//
// FontParam
//
message FontParam
{
    required wstring name_obsolete = 1;
	required double size = 2;
	required bool bold = 3;
	required bool italic = 4;
	optional string name = 5;
}

//
// SchemaPoint
//
message SchemaPoint
{
	required double x = 1;
	required double y = 2;
}

//
// SchemaUnit
//
enum SchemaUnit
{
    Display = 0;		// Display pixels
	Millimeter = 1;		// Millimeters
	Inch = 2;			// Inches
}


//
// ConnectionDirrection
//
enum ConnectionDirrection
{
	Input = 0;
	Output = 1;
}

//
// ImageItem
//
message ImageItem
{
    optional bool allowScale = 1 [default = true];
	optional bool keepAspectRatio = 2 [default = true];
	optional string imageId = 3;
	optional bytes imageData = 8;
	optional string svgData = 9;
}


//------------------------------------------------------------------------------------------
//
//
//		Envelope - General struct, keeps any base type
//
//
//------------------------------------------------------------------------------------------
message Envelope
{
	// C++ Class for serizalization
	//
	required uint32 classnamehash = 1;				// Hash from classname, the way of getting the hash is always the same
	optional bytes compressedObject = 2;			// Can contain Envelope iself in compressed state, after uncompression should
	                                                // be possible to read one of possible types for storing.
													// Compression is done by qCompress
													// To decompress it with zlib extra actions are required, read qUncompress help

	// Possible types for storing
	//
	optional SchemaItem schemaitem = 6;				// VFrame30::SchemaItem
	optional DeviceObject deviceobject = 7;			// Hardware::DeviceObject
	optional Schema schema = 100;					// VFrame30::Schema
	optional SchemaLayer schemalayer = 101;			// VFrame30::SchemaLayer
	optional FblElement fblelement = 102;			// Fbl::FblElement
	optional Configuration configuration = 103;		// VFrame30::Configuration
	optional Connection connection = 104;			// Hardware::Connection
	optional SchemaDetailsSet schemaDetailsSet = 105; // VFrame30::SchemaDetailsSet

    optional Bus bus = 200;							// VFrame30::Bus
}


// This message is used for clipboard
//
message EnvelopeSet
{
    repeated Envelope items = 1;
}

message EnvelopeSetShortDescription
{
    optional uint32 projectdbversion = 1;
	repeated uint32 classnamehash = 2;				// Hash from classname, the way of getting the hash is always the same
	repeated int32 devicetype = 10;					// DeviceObject::type()
	optional bool equipmentEditor = 3;				// Copy from Equipmnet editor
	optional bool presetEditor = 4;					// Copy from Equipment preset editor
	optional bool presetRoot = 5;					// All objects are preset root
}

// Export Device Preset Message
//
message ExportedDevicePreset
{
    optional EnvelopeSetShortDescription description = 1;
	optional EnvelopeSet items = 2;
}

//------------------------------------------------------------------------------------------
//
//
//			VFrame30::Configuration
//
//
//------------------------------------------------------------------------------------------
message Configuration
{
	required Uuid uuid = 1;
	required wstring strID = 2;
	required wstring caption = 3;
	required wstring variables = 4;
	required wstring globals = 5;

	repeated Uuid schemasIDs = 100;
	repeated Envelope schemas = 101;
}


//------------------------------------------------------------------------------------------
//
//
//								Afbl namespace
//
//
//------------------------------------------------------------------------------------------


//
//
// Afbl::AfbElementCollection stored as XML
//
//
message AfbElementCollection
{
	repeated AfbElementXml elements = 1;
}


//
//
// Afbl::AfbElement stored as XML
//
//
message AfbElementXml
{
	required bytes data = 1;
}


//
//
// Afbl::FblElement stored as Protobuf
//
//
message FblElement
{
	required wstring strID = 2;
	required wstring caption = 3;
	required uint32 opcode = 4;
	optional bool hasRam = 5 [default = false];
	optional bool requiredStart = 6 [default = true];

	repeated AfbSignal inputs = 11;
	repeated AfbSignal outputs = 12;
	repeated AfbParam params = 13;

	optional wstring description = 14;
}


//
//
// Afbl::AfbSignal
//
//
message AfbSignal
{
	required wstring caption = 1;
	required FblSignalType type = 2;
	optional int32 operandIndex = 3 [default = 0];
	optional int32 size = 4 [default = 0];
	optional wstring opName = 5;
	optional FblDataFormat dataFormat = 6;

}


//
//
// Afbl::AfbParam
//
//
message AfbParam
{
	required wstring caption = 1;
	required bool visible = 7;
	optional int32 operandIndex = 8 [default = 0];
	optional int32 size = 9 [default = 0];
	optional bool instantiator = 10 [default = false];
	optional bool user = 11 [default = false];
	optional wstring changedScript = 12;
	optional qvariant value = 13;
	optional qvariant defaultvalue = 14;
	optional qvariant lowlimit = 15;
	optional qvariant highlimit = 16;
	optional wstring opName = 17;
	optional FblSignalType type = 18;
	optional FblDataFormat dataFormat = 19;
}


//
//
// FblSignalType
//
//
enum FblSignalType
{
	Analog = 0;
	Discrete = 1;
}

//
//
// FblDataFormat
//
//
enum FblDataFormat
{
	UnsignedInt = 0;
	SignedInt = 1;
	Float = 2;
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::Schema
//
//
//------------------------------------------------------------------------------------------
message Schema
{
	required Uuid uuid = 1;
	required wstring schemaID = 2;
	required wstring caption = 3;
	required double width = 4;
	required double height = 5;
	required SchemaUnit unit = 6;
	optional bool excludeFromBuild = 7 [default = false];
	optional uint32 backgroundColor = 8;
	optional string tags = 9;

    optional bool joinHorzPriority = 31 [default = false];
    optional string joinLeftSchemaId = 32;
	optional string joinTopSchemaId = 33;
	optional string joinRightSchemaId = 34;
	optional string joinBottomSchemaId = 35;

	repeated Envelope layers = 100;				// Layer list
	required AfbElementCollection afbs = 101;	// Not used anymore, keep for compability

	// Derived from Schema
	//
	optional LogicSchema logic_schema = 200;
	optional UfbSchema ufb_schema = 201;
}


//
//
// LogicSchema
//
//
message LogicSchema
{
	repeated wstring equipmentids = 1;
	optional int32 counter = 2 [default = 0];
	optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
}

//
//
// UfbSchema
//
//
message UfbSchema
{
    optional string description = 1;
	optional int32 version = 2 [default = 1];
	optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::SchemaLayer
//
//
//------------------------------------------------------------------------------------------
message SchemaLayer
{
	required Uuid uuid = 1;
	required wstring name = 2;
	required bool compile = 3;
	required bool show = 4;
	required bool print = 5;

	repeated Envelope items = 15;		// SchmeItems list
}


//------------------------------------------------------------------------------------------
//
//
//			VFrame30::SchemaItem
//
//
//------------------------------------------------------------------------------------------
message SchemaItem
{
	required Uuid uuid = 1;
	required bool isStatic = 2;
	required bool isLocked = 3;
	required SchemaUnit itemUnit = 4;
	optional bool acceptClick = 5 [default = false];
	//optional wstring clickScript = 6;	DON'T REUSE IT
	optional string clickScript = 7;
	optional bool isCommented = 8 [default = false];
	optional string objectName = 9;

    optional string label = 14;
	optional int32  labelPos = 15 [default = 2];		// enum E::UserTextPos, 2 - RightTop

	optional string preDrawScript = 30;

	// Inherited from SchmeItem
	//
	optional PosRectImpl PosRectImpl = 10;
	optional PosLineImpl PosLineImpl = 11;
	optional PosConnectionImpl PosConnectionImpl = 12;

	// --
	//
	optional FblItem FblItem = 106;							//
	optional FblItemRect FblItemRect = 107;					// +PosRectImpl, FblItem
	optional FblItemLine FblItemLine = 108;					// +PosConnectionImpl, FblItem

	// Inherited from PosRectImpl, PosLineImpl, PosConnectionImpl
	//
	optional SchemaItemRect Rect = 116;						// +PosRectImpl
	optional SchemaItemLine Line = 117;						// +PosLineImpl
	optional SchemaItemPath Path = 118;						// +PosConnectionImpl
	optional SchemaItemImage Image = 119;					// +PosRectImpl
	optional SchemaItemFrame Frame = 120;					// +PosRectImpl
	optional SchemaItemIndicator Indicator = 121;			// +PosRectImpl

    optional SchemaItemSignal Signal = 124;					// +FblItemRect
	optional SchemaItemInput InputSignal = 125;				// +Signal
	optional SchemaItemOutput OutputSignal = 126;           // +Signal
	optional SchemaItemLink Link = 127;						// +FblItemLine
	optional SchemaItemAfb Afb = 128;						// +FblItemRect
	optional SchemaItemConst ConstItem = 129;				// +FblItemRect
	optional SchemaItemConnection ConnectionItem = 130;		// +FblItemRect
	optional SchemaItemTransmitter TransmitterItem = 131;	// +ConnectionItem, FblItemRect
	optional SchemaItemReceiver ReceiverItem = 132;			// +ConnectionItem, FblItemRect
	optional SchemaItemInOut InOutSignal = 133;				// +Signal
	optional SchemaItemUfb ufb = 134;						// +FblItemRect
	optional SchemaItemTerminator terminator = 135;			// +FblItemRect
	optional SchemaItemValue Value = 136;					// +PosRectImpl
	optional SchemaItemImageValue ImageValue = 137;			// +PosRectImpl

    optional SchemaItemBus BusItem = 150;					// +FblItemRect
	optional SchemaItemBusComposer BusComposer = 151;		// +SchemaItemBus, FblItemRect
	optional SchemaItemBusExtractor BusExtractor = 152;		// +SchemaItemBus, FblItemRect

    optional SchemaItemLoopback LoopbackItem = 155;			// +FblItemRect
	optional SchemaItemLoopbackSource loopbackSource = 156;	// +SchemaItemLoopback, FblItemRect
	optional SchemaItemLoopbackTarget loopbackTarget = 157;	// +SchemaItemLoopback, FblItemRect

    optional SchemaItemControl control = 200;				// +FblItemRect
	optional SchemaItemPushButton pushButton = 210;			// +SchemaItemControl
	optional SchemaItemLineEdit lineEdit = 211;				// +SchemaItemControl
}

//
// PosRectImpl
//
message PosRectImpl
{
	required double leftDocPt = 1;
	required double topDocPt = 2;
	required double widthDocPt = 3;
	required double heightDocPt = 4;
}


//
// PosLineImpl
//
message PosLineImpl
{
	required double startXDocPt = 1;
	required double startYDocPt = 2;
	required double endXDocPt = 3;
	required double endYDocPt = 4;
}


//
// PosConnectionImpl
//
message PosConnectionImpl
{
	repeated SchemaPoint points = 1;
}


//
// SchemaItemRect
//
message SchemaItemRect
{
	required double weight = 1;
	required uint32 lineColor = 2;
	required uint32 fillColor = 3;
	required wstring text = 4;
	required uint32 textColor = 5;
	required FontParam font = 6;
	required bool fill = 7;
	optional bool drawrect = 8 [default = true];
	optional int32 horzAlign = 9  [default = 4];	// Qt::AlignHCenter 0x0004 Centers horizontally in the available space.
	optional int32 vertAlign = 10  [default = 128];	// Qt::AlignVCenter 0x0080 Centers vertically in the available space.
	optional bool wordWrap = 11 [default = false];
	optional int32 lineStyle = 12 [default = 1];	// 1 is SolidLine
}

//
// SchemaItemLine
//
message SchemaItemLine
{
	required double weight = 1;
	required uint32 lineColor = 2;
	optional int32 lineStyle = 3 [default = 1];			// 1 is SolidLine

    optional int32 lineStyleCap = 7 [default = 16];		// 16 is default Qt::SquareCap
	optional int32 lineCapStart = 4 [default = 0];		// 16 is default NoCap
	optional int32 lineCapEnd = 5 [default = 0];		// 16 is default NoCap
	optional double lineCapFactor = 6 [default = 2.0];
}

//
// SchemaItemPath
//
message SchemaItemPath
{
	required double weight = 1;
	required uint32 lineColor = 2;
	optional int32 lineStyle = 3 [default = 1];		// 1 is SolidLine

    optional int32 lineStyleCap = 7 [default = 16];		// 16 is default Qt::SquareCap
	optional int32 lineCapStart = 4 [default = 0];		// 16 is default NoCap
	optional int32 lineCapEnd = 5 [default = 0];		// 16 is default NoCap
	optional double lineCapFactor = 6 [default = 2.0];
}

//
// SchemaItemImage
//
message SchemaItemImage
{
    optional ImageItem image = 1;
}

//
// SchemaItemFrame
//
message SchemaItemFrame
{
    optional string schemaId = 1 [default = "SCHEMAID"];
	optional bool allowScale = 2 [default = true];
	optional bool keepAspectRatio = 3 [default = true];
}

//
// VFrameSetPoint
//
message VFrameSetPoint
{
	optional uint32 color = 3;
	optional int32 colorSource = 4 [default = 0];		// Is mapped to enum E::IndicatorColorSource, 0 is ClientBehaviorByOutputSignalTag

    optional string outputAppSignalId = 20;
}

//
// SchemaItemIndicator
//
message IndicatorHistogramVert
{
    optional double startValue = 1;
	optional double endValue = 2;

    optional double barWidth = 16;

    optional double leftMargin = 20;
	optional double topMargin = 21;
	optional double rightMargin = 22;
	optional double bottomMargin = 23;

    optional bool drawBarRect = 32 [default = true];

    optional bool drawGrid = 40 [default = true];
	optional bool drawGridForAllBars = 41 [default = false];
	optional bool drawGridValues = 42 [default = true];
	optional bool drawGridValueForAllBars = 43 [default = false];
	optional bool drawGridValueUnits = 44 [default = true];
	optional double linearGridMainStep = 50 [default = 50.0];
	optional double linearGridSmallStep = 51 [default = 10.0];
	optional double logarithmicGridMainStep = 52 [default = 1.0];
	optional double logarithmicGridSmallStep = 53 [default = 0.5];

    optional int32 drawSetpoints = 70 [default = 0];
	repeated VFrameSetPoint customSetPoints = 72;

    optional int32 scaleType = 75 [default = 0];
}

message IndicatorArrowIndicator
{
    optional double startValue = 1;
	optional double endValue = 2;

    optional double startAngle = 16;
	optional double spanAngle = 17;
}

message SchemaItemIndicator
{
    optional string signalIds = 1;
	optional int32 signalSource = 2 [default = 0];
	optional int32 precision = 3 [default = 2];
	optional int32 analogFormat = 4 [default = 102];	// Default 102 (charcode for 'f') is AnalogFormat::f

    optional FontParam font = 9;

    optional bool drawRect = 10 [default = false];
	optional double lineWeight = 11 [default = 0];

    optional uint32 backgroundColor = 16;
	optional uint32 lineColor = 17;
	repeated uint32 signalColors = 18;

    optional uint32 type = 32 [default = 0];

    optional IndicatorHistogramVert indicatorHistogramVert = 48;
	optional IndicatorArrowIndicator indicatorArrowIndicator = 49;
}


//
// FblConnectionPoint
//
message FblConnectionPoint
{
	optional SchemaPoint point = 1;                             // Can be removed in future, not used anymore
	optional ConnectionDirrection dirrection = 2;
	optional Uuid uuid = 3;
	optional int32 operandIndex = 4 [default = -1];             // -1 is not used, for links etc...
	optional string caption = 5 [default = ""];
	repeated Uuid associatedIos = 6;
	optional int32 signalType = 7 [default = 0];

	//optional Uuid signalUuid = 10;
	//optional wstring signalStrID = 11;
}


//
// FblItem
//
message FblItem
{
	repeated FblConnectionPoint points = 1;
}


//
// FblItemRect
//
message FblItemRect
{
	required double weight = 1;
	required uint32 lineColor = 2;
	required uint32 fillColor = 3;
	required uint32 textColor = 4;
	required FontParam font = 5;
	optional string obsoleteLabel = 6;		// Obsolote, moved to SchemaItem buf for compatibility left here also
	optional string userText = 7;
	optional int32 userTextPos = 8 [default = 1];			// enum E::UserTextPos, 1 - Top
	optional int32 obsoleteLabelPos = 9 [default = -1];	// enum E::UserTextPos, 2 - RightTop	// Obsolote, moved to SchemaItem buf for compatibility left here also
}


//
// FblItemLine
//
message FblItemLine
{
	required double weight = 1;
	required uint32 lineColor = 2;
	optional int32 lineStyle = 3 [default = 1];		// 1 is SolidLine
}


//
// SchemaItemSignal
//
message SchemaItemSignalColumn
{
    optional double width = 1 [default = 20.0];
	optional int32 data = 2 [default = 0];			// Reflected to E::ColumnData
	optional int32 horzAlign = 3 [default = 1];		// Default: AlignLeft = 0x0001
}

message SchemaItemSignal
{
	repeated wstring appSignalIDs = 1;
	optional int32 precision = 2 [default = 2];
	optional int32 analogFormat = 3 [default = 102];	// Default 102 (charcode for 'f') is AnalogFormat::f (format as [-]9.9)
	repeated SchemaItemSignalColumn columns = 4;
	optional bool multiLine = 5 [default = true];
	repeated string impactAppSignalIDs = 6;

    optional string customText = 16;
}

//
// SchemaItemInput
//
message SchemaItemInput
{
}

// SchemaItemOutput
//
message SchemaItemOutput
{
}

// SchemaItemInOut
//
message SchemaItemInOut
{
}

//
// SchemaItemLink
//
message SchemaItemLink
{
}

//
// SchemaItemAfb
//
message SchemaItemAfb
{
    repeated AfbParam params = 2;						// NOT USED anymore, keep it for a while, RPCT-812
	optional wstring afbStrid = 3;						// NOT USED anymore, keep it for a while, RPCT-812
	optional int32 precision = 4 [default = 2];
	optional AfbElementXml deprecated_afbelement = 5;	// Old formatted XML for AFB, use now afbelement = 7
	optional string deprecated_label = 6;				// Don't use 6 anymore
	optional AfbElementXml afbelement = 7;
}

//
// SchemaItemConst
//
message SchemaItemConst
{
	optional int32 type = 1 [default = 0];
	optional int32 intValue = 2 [default = 0];
	optional double floatValue = 3 [default = 0.0];
	optional int32 discreteValue = 7 [default = 0];
	optional int32 precision = 4 [default = 2];
	optional int32 horzAlign = 5  [default = 4];		// Qt::AlignHCenter 0x0004 Centers horizontally in the available space.
	optional int32 vertAlign = 6  [default = 128];		// Qt::AlignVCenter 0x0080 Centers vertically in the available space.
	optional int32 analogFormat = 8 [default = 102];	// Default 102 (charcode for 'f') is AnalogFormat::f (format as [-]9.9)
}

//
// SchemaItemConnection
//
message SchemaItemConnection
{
    optional string connectionid = 1;
}

// SchemaItemTransmitter
//
message SchemaItemTransmitter
{
    optional int32 pinCount = 1 [default = 1];
}

// SchemaItemReceiver
//
message SchemaItemReceiver
{
    optional bool showValidity = 1 [default = true];
	optional string appSignalIds = 2;
	optional int32 dataType = 3 [default = 0];
	optional int32 precision = 4 [default = 2];
	optional int32 analogFormat = 5 [default = 102];	// Default 102 (charcode for 'f') is AnalogFormat::f (format as [-]9.9)
	//optional bool multiline = 6 [default = true];

    optional string customText = 16;
}

//
// SchemaItemUfb
//
message SchemaItemUfb
{
    optional string ufbSchemaId = 1;
	optional string ufbCaption = 2;
	optional int32 ufbVersion = 3 [default = -1];
}

//
// SchemaItemTerminator
//
message SchemaItemTerminator
{
}

//
// SchemaItemValue
//
message SchemaItemValue
{
    optional string signalIds = 1;
	optional int32 signalSource = 2 [default = 0];

    optional double lineWeight = 4;
	optional uint32 lineColor = 5;
	optional uint32 fillColor = 6;
	optional uint32 textColor = 7;
	optional string text = 8;
	optional FontParam font = 9;
	optional bool drawRect = 10 [default = true];
	optional int32 horzAlign = 11  [default = 4];		// Qt::AlignHCenter 0x0004 Centers horizontally in the available space.
	optional int32 vertAlign = 12  [default = 128];		// Qt::AlignVCenter 0x0080 Centers vertically in the available space.

    optional int32 precision = 13 [default = -1];		// -1: Take precision value from signal description
	optional int32 analogFormat = 14 [default = 102];	// Default 102 (charcode for 'f') is AnalogFormat::f (format as [-]9.9)
}

//
// SchemaItemImageValue
//
message SchemaItemImageValue
{
    optional string signalIds = 1;
	optional int32 signalSource = 2 [default = 0];
	optional string currentImageId = 3;

    optional double lineWeight = 6 [default = 0];
	optional uint32 lineColor = 7 [default = 0xFF000000];
	optional uint32 fillColor = 8 [default = 0xFF0000C0];
	optional bool drawRect = 9 [default = false];
	optional bool fillRect = 10 [default = false];

    repeated ImageItem images = 14;
}

//
// SchemaItemBus
//
message SchemaItemBus
{
    optional string busTypeId = 2;
	optional fixed64 busTypeHash = 3;
	optional Bus bus = 5;
}

// SchemaItemBusComposer
//
message SchemaItemBusComposer
{
}

// SchemaItemBusExtractor
//
message SchemaItemBusExtractor
{
    repeated Property properties = 2;
}

//
//
// SchemaItemLoopback
//
//
message SchemaItemLoopback
{
    optional string loopbackId = 2;
}

// SchemaItemLoopbackSource
//
message SchemaItemLoopbackSource
{
}

// SchemaItemLoopbackTarget
//
message SchemaItemLoopbackTarget
{
}

//
// SchemaItemControl
//
message SchemaItemControl
{
    optional string styleSheet = 1;
	optional string toolTip = 2;
}

//
// SchemaItemPushButton
//
message SchemaItemPushButton
{
    optional string text = 1;
	optional bool checkable = 2;
	optional bool checkedDefault = 3;

    optional bool autoRepeat = 4;
	optional int32 autoRepeatDelay = 5;
	optional int32 autoRepeatInterval = 6;

    optional string scriptAfterCreate = 21;
	optional string scriptClicked = 22;
	optional string scriptPressed = 23;
	optional string scriptReleased = 24;
	optional string scriptToggled = 25;
}

//
// SchemaItemLineEdit
//
message SchemaItemLineEdit
{
    optional string text = 1;
	optional int32 horzAlign = 2;
	optional int32 vertAlign = 3;
	optional int32 maxLength = 4;
	optional string placeholderText = 5;
	optional bool readOnly = 6;

    optional string scriptAfterCreate = 21;
	optional string scriptEditingFinished = 22;
	optional string scriptReturnPressed = 23;
	optional string scriptTextChanged = 24;
}




//------------------------------------------------------------------------------------------
//
//
//								Hardware::DeviceObject
//
//
//------------------------------------------------------------------------------------------

message DeviceObject
{
	required Uuid uuid = 1;
	required wstring equipmentId = 2;
	required wstring caption = 3;
	optional wstring childRestriction = 4;
	optional int32 place = 5 [default = 0];
	optional string specific_properties_struct = 6;
	repeated Property properties = 7;

	optional bool preset = 32 [default = false];
	optional bool presetRoot = 33 [default = false];
	optional wstring presetName = 34;
	optional Uuid presetObjectUuid = 35;
	optional int32 childCountHint = 36 [default = 0];	// Hint for calling m_children.reserve()

	// Derived from Hardware::DeviceObject
	//
	optional DeviceRoot Root = 100;					// Not used
	optional DeviceSystem System = 101;
	optional DeviceRack Rack = 102;
	optional DeviceChassis Chassis = 103;
	optional DeviceModule Module = 104;
	optional DeviceController Controller = 105;
	optional DeviceSignal Signal = 106;
	optional Workstation Workstation = 107;
	optional Software Software = 108;

    // Children usualy are not stored in this object, but if required to store objects
	// with hierarchy (exmaple is clipboard) then use this filed
	//
	repeated Envelope children = 200;
}

message DeviceRoot
{
}

message DeviceSystem
{
}

message DeviceRack
{
}

message DeviceChassis
{
	optional int32 type = 1 [default = 0];
}

message DeviceModule
{
	optional int32 typeObsolete = 1 [default = 0];
	optional string configurationScript = 2;
	optional int32 moduleType = 3;
	optional string rawDataDescription = 4;
	optional int32 customModuleFamily = 5 [default = 0];
}

message DeviceController
{
}

message DeviceSignal
{
	optional int32 obsoletetype = 1 [default = 0];			// old type format, not used anymore, RPCT-345

	optional int32 byteOrder = 2 [default = 0];
	optional int32 format = 3 [default = 0];
	optional int32 size = 4 [default = 0];
	//optional int32 validityOffset = 5 [default = 0];		// Obsolete from RPCT-1660
	//optional int32 validityBit = 6 [default = 0];			// Obsolete from RPCT-1660
	optional int32 valueOffset = 7 [default = 0];
	optional int32 valueBit = 8 [default = 0];
	optional int32 type = 9 [default = 0];					// RPCT-345
	optional int32 function = 10 [default = 0];				// RPCT-345
	optional int32 memoryArea = 11 [default = 0];			// RPCT-888

    optional int32 appSignalLowAdc = 12 [default = 0];
	optional int32 appSignalHighAdc = 13 [default = 65535];
	optional double appSignalLowEngUnits = 14 [default = 0];
	optional double appSignalHighEngUnits = 15 [default = 100];
	optional int32 appSignalDataFormat = 16 [default = 2];	// E::DataFormat::Float = 2

    optional string validitySignalId = 20;					// RPCT-1660

    optional string appSignalBusTypeId = 26;

    optional string signalSpecPropsStruct = 40;
	optional bool signalSpecPropsStructWasFixed = 41 [default = false];		// The sign that signalSpecPropsStruct already got replaced EngEneered -> EngIneered
}

message Workstation
{
	optional int32 type = 1 [default = 0];
}

message Software
{
	optional int32 type = 1 [default = 0];
}


// Module Configuration
//
message ModuleConfiguration
{
	optional string struct_description = 1;                     // XML description of the mudule configuration structure
	repeated ModuleConfigurationValue values = 2;               // Values array
	optional string name = 3 [default = ""];                    // Configuration Name
}

message ModuleConfigurationValue
{
	required string name = 1;
	required string value = 2;
}

message Property
{
	required string name = 1;
	required string value = 2;
}

// Signal specific properties values messages

message SignalSpecPropValue
{
    required string name = 1;
    required int32 type = 2 [default = 0 /* QVariant::Invalid */];	// values of enum QVariant::Type
    required bool isEnum = 3 [default = false];

    optional int32  int32Val = 10;
    optional uint32 uint32Val = 11;
    optional int64  int64Val = 12;
    optional uint64 uint64Val = 13;
    optional double doubleVal = 14;
    optional bool   boolVal = 15;
    optional string stringVal = 16;
}

message SignalSpecPropValues
{
    repeated SignalSpecPropValue value = 1;
}

//------------------------------------------------------------------------------------------
//
//  WhiteMan's serialization
//
//------------------------------------------------------------------------------------------


message Address16
{
    // Changes in Address16 fields numbering are FORBIDDEN !!!
    // Only new numbers adding is allowed!
    //
    // This protobuf messages already stored in database.
    //

    required int32 offset = 1 [default = -1];
    required int32 bit = 2 [default = -1];
}

message Unit
{
    required int32 id = 1 [default = 0];
    required string caption = 2;
}

message UnitSet
{
    repeated Unit unit = 1;
}

message TuningValue
{
    optional int32 type = 1;					// enum TuningValueType values
    optional int64 intValue = 2 [default = 0];
    optional double doubleValue = 3 [default = 0.0];
}

message AppSignalDbField
{
    optional int32 ID = 1 [default = -1];
    optional int32 signalGroupID = 2 [default = -1];
    optional int32 signalInstanceID = 3 [default = -1];
    optional int32 changesetID = 4 [default = -1];
    optional bool checkedOut = 5 [default = false];
    optional int32 userID = 6 [default = -1];
    optional int64 created = 7 [default = 0];
    optional bool deleted = 8 [default = false];
    optional int64 instanceCreated = 9 [default = 0];
    optional int32 instanceAction = 10 [default = 0];		// VcsItemActionType::Unknown
}

message StateFlagSignal
{
	optional int32 flagType = 1 [default = 0	/* E::AppSignalStateFlagType::Validity */];		// E::AppSignalStateFlagType values
	optional string flagSignalID = 2;
}

message AppSignalCalculatedParam
{
    optional uint64 hash = 1 [default = 0];
    optional Address16 ioBufAddr = 2;
    optional Address16 tuningAddr = 3;
    optional Address16 ualAddr = 4;
    optional Address16 regBufAddr = 5;
    optional Address16 regValueAddr = 6;
    optional Address16 regValidityAddr = 7;
	optional int32 lmRamAccess = 8 [default = 0 /* E::LogicModuleRamAccess::Undefined */];		// E::LogicModuleRamAccess values
    optional bool isConst = 9 [default = false];
    optional double constValue = 10 [default = 0];
	repeated StateFlagSignal stateFlagsSignals = 11;
}

message AppSignal
{
    // Signal identificators

    optional string appSignalID = 1;
    optional string customAppSignalID = 2;
    optional string caption = 3;
    optional string equipmentID = 4;				// should be transformed to portEquipmentID
    optional string lmEquipmentID = 5;
    optional string busTypeID = 6;
    optional int32 channel = 7 [default = 0];
	optional bool excludeFromBuild = 8 [default = false];

    // Signal type

    optional int32 signalType = 16 [default = 1];		// E::SignalType::Discrete
    optional int32 inOutType = 17 [default = 2];		// E::SignalInOutType::Internal

    // Signal format

    optional int32 dataSize = 21 [default = 0];
    optional int32 byteOrder = 22 [default = 1];		// E::ByteOrder::BigEndian

    // Analog signal properties

    optional int32 analogSignalFormat = 26 [default = 1];	// E::AnalogSignalFormat::SignedInt32
    optional string unit = 27;

    // Tuning signal properties

    optional bool enableTuning = 71 [default = false];

    optional TuningValue tuningDefaultValue = 72;
    optional TuningValue tuningLowBound = 73;
    optional TuningValue tuningHighBound = 74;

    // Signal properties for MATS

    optional bool acquire = 81 [default = false];
    optional bool archive = 82 [default = false];

    optional int32 decimalPlaces = 83 [default = 2];
    optional double coarseAperture = 84 [default = 1];
    optional double fineAperture = 85 [default = 0.5];
    optional bool adaptiveAperture = 86 [default = false];

    // Signal specific properties

    optional string specPropStruct = 90;
    optional bytes specPropValues = 91;				// serialized message Proto::SignalSpecPropValues

    repeated string tags = 92;

    // Signal fields from database

    optional AppSignalDbField dbField = 120;

    // Signal properties calculated in compile-time

    optional AppSignalCalculatedParam calcParam = 121;
}

message AppSignalSet
{
    repeated AppSignal appSignal = 1;
}


// Fields of AppSignal serialized and saved in field ProtoData of table SignalInstance
//
//  After adding or removing fields - check Signal::saveProtoData, Signal::loadProtoData !!!
//
message ProtoAppSignalData							
{
	optional string busTypeID = 1;
	optional string caption = 2;
	optional int32 channel = 3 [default = 0 /* E::Channel::A */];

	optional int32 dataSize = 4 [default = 32];
	optional int32 byteOrder = 5 [default = 1 /* E::ByteOrder::BigEndian */];
	optional int32 analogSignalFormat = 6 [default = 2 /* E::AnalogAppSignalFormat::Float32 */];
	optional string unit = 7;
	
	optional bool enableTuning = 8 [default = false];
	optional TuningValue tuningDefaultValue = 9;
	optional TuningValue tuningLowBound = 10;
	optional TuningValue tuningHighBound = 11;
	
	optional bool acquire = 12 [default = true];
	optional bool archive = 13 [default = true];
	optional int32 decimalPlaces = 14 [default = 2];
	optional double coarseAperture = 15 [default = 1.0];
	optional double fineAperture = 16 [default = 0.5];
	optional bool adaptiveAperture = 17 [default = false];
	optional bool excludefromBuild = 18 [default = false];

    optional string tags = 19;

    optional string userSpecPropStruct = 20;
	optional bytes userSpecPropValues = 21;				// serialized message Proto::SignalSpecPropValues
}

// Data structs
//
message AppSignalState
{
    optional uint64 hash = 1 [default = 0];
    optional double value = 2 [default = 0];
    optional uint32 flags = 3 [default = 0];
    optional sfixed64 systemTime = 4 [default = 0];
    optional sfixed64 localTime = 5 [default = 0];
    optional sfixed64 plantTime = 6 [default = 0];
    optional sfixed64 archiveId = 7 [default = -1];
	optional uint32 packetNo = 8 [default = 0];
}

message Connection
{
    optional string ConnectionID = 2 [default = ""];

    optional string Port1EquipmentID = 3 [default = ""];
    optional string Port2EquipmentID = 4 [default = ""];

    optional string Port1RawDataDescription = 5 [default = ""];
    optional string Port2RawDataDescription = 6 [default = ""];

    // Flags
	//
    optional bool ManualSettings = 11 [default = false];
    optional bool DisableDataID = 12 [default = false];
    optional bool GenerateVHDFile = 13 [default = false];

    // Memory
	//
    optional int32 Port1TxStartAddress = 14 [default = 0];
    optional int32 Port1TxWordsQuantity = 15 [default = 479];
    optional int32 Port1RxWordsQuantity = 16 [default = 479];

    optional int32 Port2TxStartAddress = 17 [default = 0];
    optional int32 Port2TxWordsQuantity = 18 [default = 479];
    optional int32 Port2RxWordsQuantity = 19 [default = 479];

    optional Uuid uuid = 20;

    // Serial

    optional bool Port1EnableSerial = 21 [default = false];
    optional int32 Port1SerialMode = 22 [default = 0];
    optional bool Port1EnableDuplex = 23 [default = false];

    optional bool Port2EnableSerial = 24 [default = false];
    optional int32 Port2SerialMode = 25 [default = 0];
    optional bool Port2EnableDuplex = 26 [default = false];

    //

    optional int32 Type = 27 [default = 0];

    // Obsolete fields

    optional int32 ObsoleteMode = 8 [default = 0];
    optional int32 ObsoleteSerialMode = 7 [default = 0];
    optional bool ObsoleteEnableDuplex = 10 [default = false];
}

message SchemaDetailsSet
{
    repeated SchemaDetails schemasDetails = 2;
}

message SchemaDetails
{
    optional int32 version = 2;
	optional string schemaId = 4;
	optional string caption = 5;
	optional bool excludedfromBuild = 6;
	optional string equipmentId = 7;
	optional string lmDescriptionFile = 8;
	optional string path = 9;
	repeated string signalIds = 20;
	repeated string labels = 21;
	repeated string connections = 22;
	repeated Uuid guids = 23;
	repeated string tags = 24;
	repeated string loopbacks = 25;
}


message ArchSignal
{
    required uint64 hash = 1;
    required bool isAnalog = 2;
    required string appSignalID = 3;
}


message ArchSignals
{
    repeated ArchSignal archSignals = 1;
}

//
// Busses
//
message BusSignal
{
    optional string signalId = 1;
	optional string caption = 2;
	optional int32 type = 3;
	optional string units = 4;
	optional int32 analogFormat = 10;
	optional int32 precision = 11 [default = 2];
	optional double coarseAperture = 12 [default = 1];
	optional double fineAperture = 13 [default = 0.5];
	optional bool adaptiveAperture = 14 [default = false];
	optional string busTypeId = 15;

    optional int32 inbusOffset = 32;
	optional int32 inbusDiscreteBitNo = 40;
	optional int32 inbusAnalogSize = 50;
	optional int32 inbusAnalogFormat = 51;
	optional int32 inbusAnalogByteOrder = 52;
	optional double busAnalogLowLimit = 53;
	optional double busAnalogHighLimit = 54;
	optional double inbusAnalogLowLimit = 55;
	optional double inbusAnalogHighLimit = 56;
}

message Bus
{
    optional Uuid uuid = 1;
	optional string busTypeId = 2;
	repeated BusSignal busSignals = 3;
	optional bool autoSignalPlacement = 10 [default = true];
	optional int32 manualBusSize = 11 [default = 0];
	optional bool enableManualBusSize = 12 [default = false];

    // On Bus message reading:
	//
	// if enableManualBusSizeIsNotInitialized == TRUE then enableManualBusSize should be set to NOT autoSignalPlacement,
	// and enableManualBusSizeIsNotInitialized should be set to FALSE
	//
	// if enableManualBusSizeIsNotInitialized == FALSE nothing to do required
	//
	optional bool enableManualBusSizeIsNotInitialized = 13 [default = true];

}


//
// Comparator
//
message ComparatorSignal
{
    optional bool isConst = 1 [default = true];
	optional double constValue = 2 [default = 0.0];
	optional string appSignalId = 3;
	optional bool isAcquired = 4 [default = false];
}

message Comparator
{
    optional int32 cmpType = 1 [default = 1];				// Comparator::CmpType::Equ;

    optional int32 inAnalogSignalFormat = 2 [default = 1];	// E::AnalogSignalFormat::SignedInt32

    optional ComparatorSignal input = 3;
	optional ComparatorSignal compare = 4;
	optional ComparatorSignal hysteresis = 5;
	optional ComparatorSignal output = 6;

    optional bool allSignalsIsAcquired = 7 [default = false];

    optional int32 precision = 8 [default = 2];
	optional string label = 9;
	optional string schemaId = 10;
	optional Uuid schemaItemUuid = 11;
}

message LmComparatorSet
{
    optional string lmEquipmentID = 1;
	repeated Comparator comparator = 2;
}

message ComparatorSet
{
    repeated LmComparatorSet lmComparatorSet = 1;
}

//
// Metrology signals
//

message MetrologySignalLocation
{
    optional string rackID = 1;

    optional string chassisID = 2;
	optional int32 chassis = 3 [default = -1];

    optional string moduleID = 4;
	optional int32 module = 5 [default = -1];

    optional int32 place = 6 [default = -1];
	optional string contact = 7;

    optional bool shownOnSchemas = 8 [default = false];
}

message MetrologySignal
{
    optional AppSignal appSignal = 1;

    optional MetrologySignalLocation location = 2;

    optional double electricLowLimit = 3 [default = 0.0];
	optional double electricHighLimit = 4 [default = 0.0];
	optional int32 electricUnitID = 5 [default = 1];			// E::ElectricUnit::NoUnit;
	optional int32 electricSensorType = 6 [default = 1];		// E::SensorType::NoSensor;
        optional double electricRload = 11 [default = 0];
	optional double electricR0 = 7 [default = 0];
	optional int32 electricPrecision = 8 [default = 4];
	

    optional double physicalLowLimit = 9 [default = 0.0];
	optional double physicalHighLimit = 10 [default = 0.0];
}

message MetrologySignalSet
{
    repeated MetrologySignal metrologySignal = 1;
}


// Simulator
//
message SimOverrideSignal
{
    optional bool enabled = 2;
	optional int32 index = 3;

    optional string appSignalId = 10;
	optional int32 overrideMethod = 30;

    optional qvariant overrideValue = 40;
	optional string overrideScript = 50;		// if method == OverrideSignalMethod::Script
}

message SimOverrideSignalWorkspace
{
    repeated SimOverrideSignal overrideSignals = 2;
}

