package Network;

import "serialization.proto";

// Get signal list
// 1. Request GetSignalListStartRequest, wait for reply GetSignalListStartReply
// 2. Request GetSignalListStartReply.partCount times GetSignalListNextRequest (and get GetSignalListNextReply in reply)
//
message GetSignalListStartRequest
{
}

message GetSignalListStartReply
{
	optional int32 error = 1 [default = 0];
	optional int32 totalItemCount = 2;
	optional int32 partCount = 3;
	optional int32 itemsPerPart = 4;
}

message GetSignalListNextRequest
{
	optional int32 part = 1;
}

message GetSignalListNextReply
{
	optional int32 error = 1 [default = 0];
	optional int32 part = 2;
	repeated string appSignalIds = 3;
}

// Geetting class AppSignalParam
//
message GetAppSignalParamRequest
{
	repeated uint64 signalHashes = 1;						// Limited to ADS_GET_APP_SIGNAL_PARAM_MAX (500)
}

message GetAppSignalParamReply
{
	optional int32 error = 1 [default = 0];
	repeated Proto.AppSignal appSignals = 2;				// Limited to ADS_GET_APP_SIGNAL_PARAM_MAX (500)
}

// Get class Signal
//
message GetAppSignalRequest									// Get Sig
{
    repeated uint64 signalHashes = 1;						// Limited to ADS_GET_APP_SIGNAL_PARAM_MAX (500)
}

message GetAppSignalReply
{
    optional int32 error = 1 [default = 0];
	repeated Proto.AppSignal appSignals = 2;					// Limited to ADS_GET_APP_SIGNAL_PARAM_MAX (500)
}

// Geetting application signal states
//
message GetAppSignalStateRequest
{
	repeated uint64 signalHashes = 1;						// Limited to ADS_GET_APP_SIGNAL_STATE_MAX (2000)
}

message GetAppSignalStateReply
{
	optional int32 error = 1 [default = 0];
	repeated Proto.AppSignalState appSignalStates = 2;		// Limited to ADS_GET_APP_SIGNAL_STATE_MAX (2000)
}


// Getting Data Sources info
//

message DataSourceInfo
{
    optional uint64 id = 1;				// unique id
    optional string equipmentID = 2;
    optional string caption = 3;
    optional int32 dataType = 4;
    optional string ip = 5;
    optional int32 port = 6;
    optional int32 channel = 7;
    optional int32 subsystemID = 8;
    optional string subsystem = 9;

    optional int32 lmNumber = 10;
    optional int32 lmModuleType = 11;
    optional string lmAdapterID = 12;
    optional bool lmDataEnable = 13;
    optional uint64 lmDataID = 14;
}


message GetDataSourcesInfoRequest
{
}


message GetDataSourcesInfoReply
{
    optional int32 error = 1 [default = 0];
    repeated DataSourceInfo dataSourceInfo = 2;
}


// Getting Application Data Sources states
//

message AppDataSourceState
{
    optional uint64 id = 1;			    // unique id
    optional int64 uptime = 2;			    // time from start of data receiving
    optional int64 receivedDataSize = 3;	    //
    optional double dataReceivingRate = 4;	    // bytes/sec
    optional int64 receivedFramesCount = 5;
    optional bool processingEnabled = 6;
    optional int64 processedPacketCount = 7;
    optional int64 errorProtocolVersion = 8;
    optional int64 errorFramesQuantity = 9;
    optional int64 errorFrameNo = 10;
    optional int64 lostedPackets = 11;
    optional int64 errorDataID = 12;
    optional uint64 receivedDataID = 13;
    optional bool processingSkiped = 14;
    optional int32 state = 15;			    // receive, noData, stopped
    optional int64 errorBadFrameSize = 16;
    optional bool hasErrors = 17;
}


message GetAppDataSourcesStatesReply
{
    optional int32 error = 1 [default = 0];
    repeated AppDataSourceState appDataSourcesStates = 2;
}


// Get Units
//
message GetUnitsRequest
{
}

message Unit
{
    optional int32 id = 1;
    optional string unit = 2;
}

message GetUnitsReply
{
    optional int32 error = 1 [default = 0];
    repeated Unit units = 2;
}

message AppDataServiceState
{
    required bool CfgServiceIsConnected = 1 [default = false];
	optional string CfgServiceIp = 2;
	optional int32 CfgServicePort = 3;

    required bool ArchiveServiceIsConnected = 4 [default = false];
	optional string ArchiveServiceIp = 5;
	optional int32 ArchiveServicePort = 6;
}


message SoftwareInfo
{
    required int32 softwareType = 1 [default = 8000];		// E::SoftwareType::Unknown = 8000
    required string equipmentId = 2;
    required int32 majorVersion = 3 [default = 0];
    required int32 minorVersion = 4 [default = 0];
    required int32 commitNo = 5 [default = 0];
    required string buildBranch = 6;
    required string commitSHA = 7;
    required string userName = 8;
    required int32 buildNo = 9 [default = 0];
    required uint32 crc = 10 [default = 0];
}

// Get Service Info
//
message GetServiceInfoRequest
{
}

message ServiceInfo
{
    required SoftwareInfo softwareInfo = 1;

    optional int64 uptime = 2 [default = 0];
    optional int32 serviceState = 3 [default = 0];		// ServiceState::Undefined;
    optional int64 serviceUptime = 4 [default = 0];

    optional uint32 clientRequestIP = 5 [default = 0];
    optional int32 clientRequestPort = 6 [default = 0];
}

message GetServiceInfoReply
{
    required int32 error = 1 [default = 0];
    required ServiceInfo serviceInfo = 2;
}

message ConfigurationServiceState
{
    required string currentBuildDirectory = 1;
    required int32 checkBuildAttemptQuantity = 2;
    required int32 buildCheckerState = 3;
}

message ServiceClientInfo
{
    required int32 ip = 3;
    required int64 uptime = 5;
    required bool isActual = 6;
    required int64 replyQuantity = 7;
    required SoftwareInfo softwareInfo = 11;
}

message ServiceClients
{
    repeated ServiceClientInfo clients = 1;
}

message BuildInfo
{
    required string project = 1;
    required int32 id = 2 [default = -1];
    required bool release = 3 [default = false];
    required int64 date = 4;
    required int32 changeset = 5 [default = 0];
    required string user = 6;
    required string workstation = 7;
}

message ConfigurationServiceSettings
{
    required string equipmentID = 1;
    required string autoloadBuildPath = 2;
    required string workDirectory = 3;
}


// TuningService requests and replies
//

// Tuning sources info request

message GetTuningSourcesInfo
{
}

message GetTuningSourcesInfoReply
{
    optional int32 error = 1 [default = 0];
    repeated DataSourceInfo tuningSourceInfo= 2;
}

// Tuning sources states request

message GetTuningSourcesStates
{
}

message TuningSourceState
{
    optional uint64 sourceID = 1 [default = 0];

    optional bool isReply = 2 [default = false];

    optional int64 requestCount = 3 [default = 0];
    optional int64 replyCount = 4 [default = 0];

    optional int32 commandQueueSize = 5 [default = 0];

    optional int64 errUntimelyReplay = 6 [default = 0];
    optional int64 errSent = 7 [default = 0];
    optional int64 errPartialSent = 8 [default = 0];
    optional int64 errReplySize = 9 [default = 0];
    optional int64 errNoReply = 10 [default = 0];

    // errors in reply RupFrameHeader
    //
    optional int64 errRupProtocolVersion = 11 [default = 0];
    optional int64 errRupFrameSize = 12 [default = 0];
    optional int64 errRupNonTuningData = 13 [default = 0];
    optional int64 errRupModuleType = 14 [default = 0];
    optional int64 errRupFramesQuantity = 15 [default = 0];
    optional int64 errRupFrameNumber = 16 [default = 0];

    // errors in reply FotipHeader
    //
    optional int64 errFotipProtocolVersion = 17 [default = 0];
    optional int64 errFotipUniqueID = 18 [default = 0];
    optional int64 errFotipLmNumber = 19 [default = 0];
    optional int64 errFotipSubsystemCode = 20 [default = 0];
    optional int64 errFotipOperationCode = 21 [default = 0];
    optional int64 errFotipFrameSize = 22 [default = 0];
    optional int64 errFotipRomSize = 23 [default = 0];
    optional int64 errFotipRomFrameSize = 24 [default = 0];

    // errors reported by LM in reply FotipHeader.flags
    //
    optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
    optional int64 fotipFlagWriteSuccess = 26 [default = 0];
    optional int64 fotipFlagDataTypeErr = 27 [default = 0];
    optional int64 fotipFlagOpCodeErr = 28 [default = 0];
    optional int64 fotipFlagStartAddrErr = 29 [default = 0];
    optional int64 fotipFlagRomSizeErr = 30 [default = 0];
    optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
    optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
    optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
    optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
    optional int64 fotipFlagUniueIDErr = 35 [default = 0];
    optional int64 fotipFlagOffsetErr = 36 [default = 0];
    optional int64 fotipFlagApplySuccess = 37 [default = 0];
    optional int64 fotipFlagSetSOR = 38 [default = 0];

    optional int64 errAnalogLowBoundCheck = 39 [default = 0];
    optional int64 errAnalogHighBoundCheck = 40 [default = 0];
}

message GetTuningSourcesStatesReply
{
    optional int32 error = 1 [default = 0];
    repeated TuningSourceState tuningSourcesState = 2;
}

// Tuning signals read request

message TuningSignalsRead
{
    repeated uint64 signalHash = 2;
}

message TuningValue
{
    optional int32 type = 1;
	optional int32 intValue = 2 [default = 0];
	optional float floatValue = 3  [default = 0.0];
	optional double doubleValue = 4  [default = 0.0];
}

message TuningSignalState
{
    optional fixed64 signalHash = 1 [default = 0];
    optional int32 error = 2 [default = 0];
    optional bool valid = 3 [default = false];
	optional TuningValue value = 4;
	optional TuningValue readLowBound = 5;
	optional TuningValue readHighBound = 6;
	optional bool writeInProgress = 7 [default = false];
	optional int32 writeErrorCode = 8 [default = 0];
	optional fixed64 writeClient = 9 [default = 0];			// Hash code from Clinet's EquipmentID
}

message TuningSignalsReadReply
{
    optional int32 error = 1 [default = 0];
    repeated TuningSignalState tuningSignalState = 2;
}

// Write tuning signals request

message TuningWriteCommand
{
    optional uint64 signalHash = 1 [default = 0];
	optional TuningValue value = 2;
}

message TuningSignalsWrite
{
    optional bool autoApply = 2 [default = false];
	repeated TuningWriteCommand commands = 3;
}

message TuningSignalWriteResult
{
    optional uint64 signalHash = 1 [default = 0];
    optional int32 error = 2 [default = 0];
}

message TuningSignalsWriteReply
{
    optional int32 error = 1 [default = 0];
    repeated TuningSignalWriteResult writeResult = 2;
}


// Apply tuning signals request

message TuningSignalsApply
{
    optional string clientEquipmentID = 1;
}


message TuningSignalsApplyReply
{
    optional int32 error = 1 [default = 0];
}

// ArchService requests and replies
//

message SaveAppSignalsStatesToArchiveRequest
{
    optional string clientEquipmentID = 1;
    repeated Proto.AppSignalState appSignalStates = 2;
}

message SaveAppSignalsStatesToArchiveReply
{
    optional int32 error = 1 [default = 0];

    optional int32 archError = 2 [default = 100];
}

//

message GetAppSignalStatesFromArchiveStartRequest
{
    optional string clientEquipmentID = 1;
	optional int32 timeType = 2 [default = 1];		// enum TimeType values:
	                                                // 0 - plant time
													// 1 - system time
													// 2 - local time
													// 3 - archive id
    optional sfixed64 startTime = 3 [default = 0];
    optional sfixed64 endTime = 4 [default = 0];

    repeated uint64 signalHashes = 5;				// max hashes count should be less or equal to 32 (ARCH_REQUEST_MAX_SIGNALS at SocketIO.h)

    optional bool removePeriodic = 6 [default = true];
}

message GetAppSignalStatesFromArchiveStartReply
{
    optional int32 error = 1 [default = 0];
    optional int32 archError = 2 [default = 100];
	optional string errorString = 4;
    optional uint32 requestID = 3 [default = 0];
}

//

message GetAppSignalStatesFromArchiveNextRequest
{
    optional uint32 requestID = 1 [default = 0];
}

message GetAppSignalStatesFromArchiveNextReply
{
    optional int32 error = 1 [default = 0];
    optional int32 archError = 2 [default = 100];
    optional uint32 requestID = 3 [default = 0];
	optional string errorString = 10;
    optional bool dataReady = 4 [default = false];
    optional int32 totalStatesCount = 5 [default = 0];		// The actual number of transmitted states can be less than totalStatesCount
    optional int32 sentStatesCount = 6 [default = 0];
    optional int32 statesInPartCount = 7 [default = 0];
    optional bool isLastPart = 8 [default = false];
    repeated Proto.AppSignalState appSignalStates = 9;
}

//

message GetAppSignalStatesFromArchiveCancelRequest
{
    optional uint32 requestID = 1 [default = 0];
}

message GetAppSignalStatesFromArchiveCancelReply
{
    optional int32 error = 1 [default = 0];
    optional int32 archError = 2 [default = 100];
	optional string errorString = 3;
}





