#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 4127)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4996)
#pragma warning(disable : 6011)
#pragma warning(disable : 6326)
#pragma warning(disable : 6385)
#pragma warning(disable : 6387)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serialization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serialization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serialization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serialization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[102]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serialization_2eproto;
namespace Proto {
class Address16;
class Address16DefaultTypeInternal;
extern Address16DefaultTypeInternal _Address16_default_instance_;
class AfbElementCollection;
class AfbElementCollectionDefaultTypeInternal;
extern AfbElementCollectionDefaultTypeInternal _AfbElementCollection_default_instance_;
class AfbElementXml;
class AfbElementXmlDefaultTypeInternal;
extern AfbElementXmlDefaultTypeInternal _AfbElementXml_default_instance_;
class AfbParam;
class AfbParamDefaultTypeInternal;
extern AfbParamDefaultTypeInternal _AfbParam_default_instance_;
class AfbSignal;
class AfbSignalDefaultTypeInternal;
extern AfbSignalDefaultTypeInternal _AfbSignal_default_instance_;
class AppSignal;
class AppSignalDefaultTypeInternal;
extern AppSignalDefaultTypeInternal _AppSignal_default_instance_;
class AppSignalCalculatedParam;
class AppSignalCalculatedParamDefaultTypeInternal;
extern AppSignalCalculatedParamDefaultTypeInternal _AppSignalCalculatedParam_default_instance_;
class AppSignalDbField;
class AppSignalDbFieldDefaultTypeInternal;
extern AppSignalDbFieldDefaultTypeInternal _AppSignalDbField_default_instance_;
class AppSignalSet;
class AppSignalSetDefaultTypeInternal;
extern AppSignalSetDefaultTypeInternal _AppSignalSet_default_instance_;
class AppSignalState;
class AppSignalStateDefaultTypeInternal;
extern AppSignalStateDefaultTypeInternal _AppSignalState_default_instance_;
class ArchSignal;
class ArchSignalDefaultTypeInternal;
extern ArchSignalDefaultTypeInternal _ArchSignal_default_instance_;
class ArchSignals;
class ArchSignalsDefaultTypeInternal;
extern ArchSignalsDefaultTypeInternal _ArchSignals_default_instance_;
class Bus;
class BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class BusSignal;
class BusSignalDefaultTypeInternal;
extern BusSignalDefaultTypeInternal _BusSignal_default_instance_;
class Comparator;
class ComparatorDefaultTypeInternal;
extern ComparatorDefaultTypeInternal _Comparator_default_instance_;
class ComparatorSet;
class ComparatorSetDefaultTypeInternal;
extern ComparatorSetDefaultTypeInternal _ComparatorSet_default_instance_;
class ComparatorSignal;
class ComparatorSignalDefaultTypeInternal;
extern ComparatorSignalDefaultTypeInternal _ComparatorSignal_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class DeviceChassis;
class DeviceChassisDefaultTypeInternal;
extern DeviceChassisDefaultTypeInternal _DeviceChassis_default_instance_;
class DeviceController;
class DeviceControllerDefaultTypeInternal;
extern DeviceControllerDefaultTypeInternal _DeviceController_default_instance_;
class DeviceModule;
class DeviceModuleDefaultTypeInternal;
extern DeviceModuleDefaultTypeInternal _DeviceModule_default_instance_;
class DeviceObject;
class DeviceObjectDefaultTypeInternal;
extern DeviceObjectDefaultTypeInternal _DeviceObject_default_instance_;
class DeviceRack;
class DeviceRackDefaultTypeInternal;
extern DeviceRackDefaultTypeInternal _DeviceRack_default_instance_;
class DeviceRoot;
class DeviceRootDefaultTypeInternal;
extern DeviceRootDefaultTypeInternal _DeviceRoot_default_instance_;
class DeviceSignal;
class DeviceSignalDefaultTypeInternal;
extern DeviceSignalDefaultTypeInternal _DeviceSignal_default_instance_;
class DeviceSystem;
class DeviceSystemDefaultTypeInternal;
extern DeviceSystemDefaultTypeInternal _DeviceSystem_default_instance_;
class Envelope;
class EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
class EnvelopeSet;
class EnvelopeSetDefaultTypeInternal;
extern EnvelopeSetDefaultTypeInternal _EnvelopeSet_default_instance_;
class EnvelopeSetShortDescription;
class EnvelopeSetShortDescriptionDefaultTypeInternal;
extern EnvelopeSetShortDescriptionDefaultTypeInternal _EnvelopeSetShortDescription_default_instance_;
class FblConnectionPoint;
class FblConnectionPointDefaultTypeInternal;
extern FblConnectionPointDefaultTypeInternal _FblConnectionPoint_default_instance_;
class FblElement;
class FblElementDefaultTypeInternal;
extern FblElementDefaultTypeInternal _FblElement_default_instance_;
class FblItem;
class FblItemDefaultTypeInternal;
extern FblItemDefaultTypeInternal _FblItem_default_instance_;
class FblItemLine;
class FblItemLineDefaultTypeInternal;
extern FblItemLineDefaultTypeInternal _FblItemLine_default_instance_;
class FblItemRect;
class FblItemRectDefaultTypeInternal;
extern FblItemRectDefaultTypeInternal _FblItemRect_default_instance_;
class FontParam;
class FontParamDefaultTypeInternal;
extern FontParamDefaultTypeInternal _FontParam_default_instance_;
class ImageItem;
class ImageItemDefaultTypeInternal;
extern ImageItemDefaultTypeInternal _ImageItem_default_instance_;
class IndicatorArrowIndicator;
class IndicatorArrowIndicatorDefaultTypeInternal;
extern IndicatorArrowIndicatorDefaultTypeInternal _IndicatorArrowIndicator_default_instance_;
class IndicatorHistogramVert;
class IndicatorHistogramVertDefaultTypeInternal;
extern IndicatorHistogramVertDefaultTypeInternal _IndicatorHistogramVert_default_instance_;
class LmComparatorSet;
class LmComparatorSetDefaultTypeInternal;
extern LmComparatorSetDefaultTypeInternal _LmComparatorSet_default_instance_;
class LogicSchema;
class LogicSchemaDefaultTypeInternal;
extern LogicSchemaDefaultTypeInternal _LogicSchema_default_instance_;
class MetrologySignal;
class MetrologySignalDefaultTypeInternal;
extern MetrologySignalDefaultTypeInternal _MetrologySignal_default_instance_;
class MetrologySignalLocation;
class MetrologySignalLocationDefaultTypeInternal;
extern MetrologySignalLocationDefaultTypeInternal _MetrologySignalLocation_default_instance_;
class MetrologySignalSet;
class MetrologySignalSetDefaultTypeInternal;
extern MetrologySignalSetDefaultTypeInternal _MetrologySignalSet_default_instance_;
class ModuleConfiguration;
class ModuleConfigurationDefaultTypeInternal;
extern ModuleConfigurationDefaultTypeInternal _ModuleConfiguration_default_instance_;
class ModuleConfigurationValue;
class ModuleConfigurationValueDefaultTypeInternal;
extern ModuleConfigurationValueDefaultTypeInternal _ModuleConfigurationValue_default_instance_;
class PosConnectionImpl;
class PosConnectionImplDefaultTypeInternal;
extern PosConnectionImplDefaultTypeInternal _PosConnectionImpl_default_instance_;
class PosLineImpl;
class PosLineImplDefaultTypeInternal;
extern PosLineImplDefaultTypeInternal _PosLineImpl_default_instance_;
class PosRectImpl;
class PosRectImplDefaultTypeInternal;
extern PosRectImplDefaultTypeInternal _PosRectImpl_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class ProtoAppSignalData;
class ProtoAppSignalDataDefaultTypeInternal;
extern ProtoAppSignalDataDefaultTypeInternal _ProtoAppSignalData_default_instance_;
class Schema;
class SchemaDefaultTypeInternal;
extern SchemaDefaultTypeInternal _Schema_default_instance_;
class SchemaDetails;
class SchemaDetailsDefaultTypeInternal;
extern SchemaDetailsDefaultTypeInternal _SchemaDetails_default_instance_;
class SchemaDetailsSet;
class SchemaDetailsSetDefaultTypeInternal;
extern SchemaDetailsSetDefaultTypeInternal _SchemaDetailsSet_default_instance_;
class SchemaItem;
class SchemaItemDefaultTypeInternal;
extern SchemaItemDefaultTypeInternal _SchemaItem_default_instance_;
class SchemaItemAfb;
class SchemaItemAfbDefaultTypeInternal;
extern SchemaItemAfbDefaultTypeInternal _SchemaItemAfb_default_instance_;
class SchemaItemBus;
class SchemaItemBusDefaultTypeInternal;
extern SchemaItemBusDefaultTypeInternal _SchemaItemBus_default_instance_;
class SchemaItemBusComposer;
class SchemaItemBusComposerDefaultTypeInternal;
extern SchemaItemBusComposerDefaultTypeInternal _SchemaItemBusComposer_default_instance_;
class SchemaItemBusExtractor;
class SchemaItemBusExtractorDefaultTypeInternal;
extern SchemaItemBusExtractorDefaultTypeInternal _SchemaItemBusExtractor_default_instance_;
class SchemaItemConnection;
class SchemaItemConnectionDefaultTypeInternal;
extern SchemaItemConnectionDefaultTypeInternal _SchemaItemConnection_default_instance_;
class SchemaItemConst;
class SchemaItemConstDefaultTypeInternal;
extern SchemaItemConstDefaultTypeInternal _SchemaItemConst_default_instance_;
class SchemaItemControl;
class SchemaItemControlDefaultTypeInternal;
extern SchemaItemControlDefaultTypeInternal _SchemaItemControl_default_instance_;
class SchemaItemFrame;
class SchemaItemFrameDefaultTypeInternal;
extern SchemaItemFrameDefaultTypeInternal _SchemaItemFrame_default_instance_;
class SchemaItemImage;
class SchemaItemImageDefaultTypeInternal;
extern SchemaItemImageDefaultTypeInternal _SchemaItemImage_default_instance_;
class SchemaItemImageValue;
class SchemaItemImageValueDefaultTypeInternal;
extern SchemaItemImageValueDefaultTypeInternal _SchemaItemImageValue_default_instance_;
class SchemaItemInOut;
class SchemaItemInOutDefaultTypeInternal;
extern SchemaItemInOutDefaultTypeInternal _SchemaItemInOut_default_instance_;
class SchemaItemIndicator;
class SchemaItemIndicatorDefaultTypeInternal;
extern SchemaItemIndicatorDefaultTypeInternal _SchemaItemIndicator_default_instance_;
class SchemaItemInput;
class SchemaItemInputDefaultTypeInternal;
extern SchemaItemInputDefaultTypeInternal _SchemaItemInput_default_instance_;
class SchemaItemLine;
class SchemaItemLineDefaultTypeInternal;
extern SchemaItemLineDefaultTypeInternal _SchemaItemLine_default_instance_;
class SchemaItemLineEdit;
class SchemaItemLineEditDefaultTypeInternal;
extern SchemaItemLineEditDefaultTypeInternal _SchemaItemLineEdit_default_instance_;
class SchemaItemLink;
class SchemaItemLinkDefaultTypeInternal;
extern SchemaItemLinkDefaultTypeInternal _SchemaItemLink_default_instance_;
class SchemaItemLoopback;
class SchemaItemLoopbackDefaultTypeInternal;
extern SchemaItemLoopbackDefaultTypeInternal _SchemaItemLoopback_default_instance_;
class SchemaItemLoopbackSource;
class SchemaItemLoopbackSourceDefaultTypeInternal;
extern SchemaItemLoopbackSourceDefaultTypeInternal _SchemaItemLoopbackSource_default_instance_;
class SchemaItemLoopbackTarget;
class SchemaItemLoopbackTargetDefaultTypeInternal;
extern SchemaItemLoopbackTargetDefaultTypeInternal _SchemaItemLoopbackTarget_default_instance_;
class SchemaItemOutput;
class SchemaItemOutputDefaultTypeInternal;
extern SchemaItemOutputDefaultTypeInternal _SchemaItemOutput_default_instance_;
class SchemaItemPath;
class SchemaItemPathDefaultTypeInternal;
extern SchemaItemPathDefaultTypeInternal _SchemaItemPath_default_instance_;
class SchemaItemPushButton;
class SchemaItemPushButtonDefaultTypeInternal;
extern SchemaItemPushButtonDefaultTypeInternal _SchemaItemPushButton_default_instance_;
class SchemaItemReceiver;
class SchemaItemReceiverDefaultTypeInternal;
extern SchemaItemReceiverDefaultTypeInternal _SchemaItemReceiver_default_instance_;
class SchemaItemRect;
class SchemaItemRectDefaultTypeInternal;
extern SchemaItemRectDefaultTypeInternal _SchemaItemRect_default_instance_;
class SchemaItemSignal;
class SchemaItemSignalDefaultTypeInternal;
extern SchemaItemSignalDefaultTypeInternal _SchemaItemSignal_default_instance_;
class SchemaItemSignalColumn;
class SchemaItemSignalColumnDefaultTypeInternal;
extern SchemaItemSignalColumnDefaultTypeInternal _SchemaItemSignalColumn_default_instance_;
class SchemaItemTerminator;
class SchemaItemTerminatorDefaultTypeInternal;
extern SchemaItemTerminatorDefaultTypeInternal _SchemaItemTerminator_default_instance_;
class SchemaItemTransmitter;
class SchemaItemTransmitterDefaultTypeInternal;
extern SchemaItemTransmitterDefaultTypeInternal _SchemaItemTransmitter_default_instance_;
class SchemaItemUfb;
class SchemaItemUfbDefaultTypeInternal;
extern SchemaItemUfbDefaultTypeInternal _SchemaItemUfb_default_instance_;
class SchemaItemValue;
class SchemaItemValueDefaultTypeInternal;
extern SchemaItemValueDefaultTypeInternal _SchemaItemValue_default_instance_;
class SchemaLayer;
class SchemaLayerDefaultTypeInternal;
extern SchemaLayerDefaultTypeInternal _SchemaLayer_default_instance_;
class SchemaPoint;
class SchemaPointDefaultTypeInternal;
extern SchemaPointDefaultTypeInternal _SchemaPoint_default_instance_;
class SignalSpecPropValue;
class SignalSpecPropValueDefaultTypeInternal;
extern SignalSpecPropValueDefaultTypeInternal _SignalSpecPropValue_default_instance_;
class SignalSpecPropValues;
class SignalSpecPropValuesDefaultTypeInternal;
extern SignalSpecPropValuesDefaultTypeInternal _SignalSpecPropValues_default_instance_;
class SimOverrideSignal;
class SimOverrideSignalDefaultTypeInternal;
extern SimOverrideSignalDefaultTypeInternal _SimOverrideSignal_default_instance_;
class SimOverrideSignalWorkspace;
class SimOverrideSignalWorkspaceDefaultTypeInternal;
extern SimOverrideSignalWorkspaceDefaultTypeInternal _SimOverrideSignalWorkspace_default_instance_;
class Software;
class SoftwareDefaultTypeInternal;
extern SoftwareDefaultTypeInternal _Software_default_instance_;
class StateFlagSignal;
class StateFlagSignalDefaultTypeInternal;
extern StateFlagSignalDefaultTypeInternal _StateFlagSignal_default_instance_;
class TuningValue;
class TuningValueDefaultTypeInternal;
extern TuningValueDefaultTypeInternal _TuningValue_default_instance_;
class UfbSchema;
class UfbSchemaDefaultTypeInternal;
extern UfbSchemaDefaultTypeInternal _UfbSchema_default_instance_;
class Unit;
class UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
class UnitSet;
class UnitSetDefaultTypeInternal;
extern UnitSetDefaultTypeInternal _UnitSet_default_instance_;
class Uuid;
class UuidDefaultTypeInternal;
extern UuidDefaultTypeInternal _Uuid_default_instance_;
class VFrameSetPoint;
class VFrameSetPointDefaultTypeInternal;
extern VFrameSetPointDefaultTypeInternal _VFrameSetPoint_default_instance_;
class Workstation;
class WorkstationDefaultTypeInternal;
extern WorkstationDefaultTypeInternal _Workstation_default_instance_;
class qvariant;
class qvariantDefaultTypeInternal;
extern qvariantDefaultTypeInternal _qvariant_default_instance_;
class wstring;
class wstringDefaultTypeInternal;
extern wstringDefaultTypeInternal _wstring_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Address16* Arena::CreateMaybeMessage<::Proto::Address16>(Arena*);
template<> ::Proto::AfbElementCollection* Arena::CreateMaybeMessage<::Proto::AfbElementCollection>(Arena*);
template<> ::Proto::AfbElementXml* Arena::CreateMaybeMessage<::Proto::AfbElementXml>(Arena*);
template<> ::Proto::AfbParam* Arena::CreateMaybeMessage<::Proto::AfbParam>(Arena*);
template<> ::Proto::AfbSignal* Arena::CreateMaybeMessage<::Proto::AfbSignal>(Arena*);
template<> ::Proto::AppSignal* Arena::CreateMaybeMessage<::Proto::AppSignal>(Arena*);
template<> ::Proto::AppSignalCalculatedParam* Arena::CreateMaybeMessage<::Proto::AppSignalCalculatedParam>(Arena*);
template<> ::Proto::AppSignalDbField* Arena::CreateMaybeMessage<::Proto::AppSignalDbField>(Arena*);
template<> ::Proto::AppSignalSet* Arena::CreateMaybeMessage<::Proto::AppSignalSet>(Arena*);
template<> ::Proto::AppSignalState* Arena::CreateMaybeMessage<::Proto::AppSignalState>(Arena*);
template<> ::Proto::ArchSignal* Arena::CreateMaybeMessage<::Proto::ArchSignal>(Arena*);
template<> ::Proto::ArchSignals* Arena::CreateMaybeMessage<::Proto::ArchSignals>(Arena*);
template<> ::Proto::Bus* Arena::CreateMaybeMessage<::Proto::Bus>(Arena*);
template<> ::Proto::BusSignal* Arena::CreateMaybeMessage<::Proto::BusSignal>(Arena*);
template<> ::Proto::Comparator* Arena::CreateMaybeMessage<::Proto::Comparator>(Arena*);
template<> ::Proto::ComparatorSet* Arena::CreateMaybeMessage<::Proto::ComparatorSet>(Arena*);
template<> ::Proto::ComparatorSignal* Arena::CreateMaybeMessage<::Proto::ComparatorSignal>(Arena*);
template<> ::Proto::Configuration* Arena::CreateMaybeMessage<::Proto::Configuration>(Arena*);
template<> ::Proto::Connection* Arena::CreateMaybeMessage<::Proto::Connection>(Arena*);
template<> ::Proto::DeviceChassis* Arena::CreateMaybeMessage<::Proto::DeviceChassis>(Arena*);
template<> ::Proto::DeviceController* Arena::CreateMaybeMessage<::Proto::DeviceController>(Arena*);
template<> ::Proto::DeviceModule* Arena::CreateMaybeMessage<::Proto::DeviceModule>(Arena*);
template<> ::Proto::DeviceObject* Arena::CreateMaybeMessage<::Proto::DeviceObject>(Arena*);
template<> ::Proto::DeviceRack* Arena::CreateMaybeMessage<::Proto::DeviceRack>(Arena*);
template<> ::Proto::DeviceRoot* Arena::CreateMaybeMessage<::Proto::DeviceRoot>(Arena*);
template<> ::Proto::DeviceSignal* Arena::CreateMaybeMessage<::Proto::DeviceSignal>(Arena*);
template<> ::Proto::DeviceSystem* Arena::CreateMaybeMessage<::Proto::DeviceSystem>(Arena*);
template<> ::Proto::Envelope* Arena::CreateMaybeMessage<::Proto::Envelope>(Arena*);
template<> ::Proto::EnvelopeSet* Arena::CreateMaybeMessage<::Proto::EnvelopeSet>(Arena*);
template<> ::Proto::EnvelopeSetShortDescription* Arena::CreateMaybeMessage<::Proto::EnvelopeSetShortDescription>(Arena*);
template<> ::Proto::FblConnectionPoint* Arena::CreateMaybeMessage<::Proto::FblConnectionPoint>(Arena*);
template<> ::Proto::FblElement* Arena::CreateMaybeMessage<::Proto::FblElement>(Arena*);
template<> ::Proto::FblItem* Arena::CreateMaybeMessage<::Proto::FblItem>(Arena*);
template<> ::Proto::FblItemLine* Arena::CreateMaybeMessage<::Proto::FblItemLine>(Arena*);
template<> ::Proto::FblItemRect* Arena::CreateMaybeMessage<::Proto::FblItemRect>(Arena*);
template<> ::Proto::FontParam* Arena::CreateMaybeMessage<::Proto::FontParam>(Arena*);
template<> ::Proto::ImageItem* Arena::CreateMaybeMessage<::Proto::ImageItem>(Arena*);
template<> ::Proto::IndicatorArrowIndicator* Arena::CreateMaybeMessage<::Proto::IndicatorArrowIndicator>(Arena*);
template<> ::Proto::IndicatorHistogramVert* Arena::CreateMaybeMessage<::Proto::IndicatorHistogramVert>(Arena*);
template<> ::Proto::LmComparatorSet* Arena::CreateMaybeMessage<::Proto::LmComparatorSet>(Arena*);
template<> ::Proto::LogicSchema* Arena::CreateMaybeMessage<::Proto::LogicSchema>(Arena*);
template<> ::Proto::MetrologySignal* Arena::CreateMaybeMessage<::Proto::MetrologySignal>(Arena*);
template<> ::Proto::MetrologySignalLocation* Arena::CreateMaybeMessage<::Proto::MetrologySignalLocation>(Arena*);
template<> ::Proto::MetrologySignalSet* Arena::CreateMaybeMessage<::Proto::MetrologySignalSet>(Arena*);
template<> ::Proto::ModuleConfiguration* Arena::CreateMaybeMessage<::Proto::ModuleConfiguration>(Arena*);
template<> ::Proto::ModuleConfigurationValue* Arena::CreateMaybeMessage<::Proto::ModuleConfigurationValue>(Arena*);
template<> ::Proto::PosConnectionImpl* Arena::CreateMaybeMessage<::Proto::PosConnectionImpl>(Arena*);
template<> ::Proto::PosLineImpl* Arena::CreateMaybeMessage<::Proto::PosLineImpl>(Arena*);
template<> ::Proto::PosRectImpl* Arena::CreateMaybeMessage<::Proto::PosRectImpl>(Arena*);
template<> ::Proto::Property* Arena::CreateMaybeMessage<::Proto::Property>(Arena*);
template<> ::Proto::ProtoAppSignalData* Arena::CreateMaybeMessage<::Proto::ProtoAppSignalData>(Arena*);
template<> ::Proto::Schema* Arena::CreateMaybeMessage<::Proto::Schema>(Arena*);
template<> ::Proto::SchemaDetails* Arena::CreateMaybeMessage<::Proto::SchemaDetails>(Arena*);
template<> ::Proto::SchemaDetailsSet* Arena::CreateMaybeMessage<::Proto::SchemaDetailsSet>(Arena*);
template<> ::Proto::SchemaItem* Arena::CreateMaybeMessage<::Proto::SchemaItem>(Arena*);
template<> ::Proto::SchemaItemAfb* Arena::CreateMaybeMessage<::Proto::SchemaItemAfb>(Arena*);
template<> ::Proto::SchemaItemBus* Arena::CreateMaybeMessage<::Proto::SchemaItemBus>(Arena*);
template<> ::Proto::SchemaItemBusComposer* Arena::CreateMaybeMessage<::Proto::SchemaItemBusComposer>(Arena*);
template<> ::Proto::SchemaItemBusExtractor* Arena::CreateMaybeMessage<::Proto::SchemaItemBusExtractor>(Arena*);
template<> ::Proto::SchemaItemConnection* Arena::CreateMaybeMessage<::Proto::SchemaItemConnection>(Arena*);
template<> ::Proto::SchemaItemConst* Arena::CreateMaybeMessage<::Proto::SchemaItemConst>(Arena*);
template<> ::Proto::SchemaItemControl* Arena::CreateMaybeMessage<::Proto::SchemaItemControl>(Arena*);
template<> ::Proto::SchemaItemFrame* Arena::CreateMaybeMessage<::Proto::SchemaItemFrame>(Arena*);
template<> ::Proto::SchemaItemImage* Arena::CreateMaybeMessage<::Proto::SchemaItemImage>(Arena*);
template<> ::Proto::SchemaItemImageValue* Arena::CreateMaybeMessage<::Proto::SchemaItemImageValue>(Arena*);
template<> ::Proto::SchemaItemInOut* Arena::CreateMaybeMessage<::Proto::SchemaItemInOut>(Arena*);
template<> ::Proto::SchemaItemIndicator* Arena::CreateMaybeMessage<::Proto::SchemaItemIndicator>(Arena*);
template<> ::Proto::SchemaItemInput* Arena::CreateMaybeMessage<::Proto::SchemaItemInput>(Arena*);
template<> ::Proto::SchemaItemLine* Arena::CreateMaybeMessage<::Proto::SchemaItemLine>(Arena*);
template<> ::Proto::SchemaItemLineEdit* Arena::CreateMaybeMessage<::Proto::SchemaItemLineEdit>(Arena*);
template<> ::Proto::SchemaItemLink* Arena::CreateMaybeMessage<::Proto::SchemaItemLink>(Arena*);
template<> ::Proto::SchemaItemLoopback* Arena::CreateMaybeMessage<::Proto::SchemaItemLoopback>(Arena*);
template<> ::Proto::SchemaItemLoopbackSource* Arena::CreateMaybeMessage<::Proto::SchemaItemLoopbackSource>(Arena*);
template<> ::Proto::SchemaItemLoopbackTarget* Arena::CreateMaybeMessage<::Proto::SchemaItemLoopbackTarget>(Arena*);
template<> ::Proto::SchemaItemOutput* Arena::CreateMaybeMessage<::Proto::SchemaItemOutput>(Arena*);
template<> ::Proto::SchemaItemPath* Arena::CreateMaybeMessage<::Proto::SchemaItemPath>(Arena*);
template<> ::Proto::SchemaItemPushButton* Arena::CreateMaybeMessage<::Proto::SchemaItemPushButton>(Arena*);
template<> ::Proto::SchemaItemReceiver* Arena::CreateMaybeMessage<::Proto::SchemaItemReceiver>(Arena*);
template<> ::Proto::SchemaItemRect* Arena::CreateMaybeMessage<::Proto::SchemaItemRect>(Arena*);
template<> ::Proto::SchemaItemSignal* Arena::CreateMaybeMessage<::Proto::SchemaItemSignal>(Arena*);
template<> ::Proto::SchemaItemSignalColumn* Arena::CreateMaybeMessage<::Proto::SchemaItemSignalColumn>(Arena*);
template<> ::Proto::SchemaItemTerminator* Arena::CreateMaybeMessage<::Proto::SchemaItemTerminator>(Arena*);
template<> ::Proto::SchemaItemTransmitter* Arena::CreateMaybeMessage<::Proto::SchemaItemTransmitter>(Arena*);
template<> ::Proto::SchemaItemUfb* Arena::CreateMaybeMessage<::Proto::SchemaItemUfb>(Arena*);
template<> ::Proto::SchemaItemValue* Arena::CreateMaybeMessage<::Proto::SchemaItemValue>(Arena*);
template<> ::Proto::SchemaLayer* Arena::CreateMaybeMessage<::Proto::SchemaLayer>(Arena*);
template<> ::Proto::SchemaPoint* Arena::CreateMaybeMessage<::Proto::SchemaPoint>(Arena*);
template<> ::Proto::SignalSpecPropValue* Arena::CreateMaybeMessage<::Proto::SignalSpecPropValue>(Arena*);
template<> ::Proto::SignalSpecPropValues* Arena::CreateMaybeMessage<::Proto::SignalSpecPropValues>(Arena*);
template<> ::Proto::SimOverrideSignal* Arena::CreateMaybeMessage<::Proto::SimOverrideSignal>(Arena*);
template<> ::Proto::SimOverrideSignalWorkspace* Arena::CreateMaybeMessage<::Proto::SimOverrideSignalWorkspace>(Arena*);
template<> ::Proto::Software* Arena::CreateMaybeMessage<::Proto::Software>(Arena*);
template<> ::Proto::StateFlagSignal* Arena::CreateMaybeMessage<::Proto::StateFlagSignal>(Arena*);
template<> ::Proto::TuningValue* Arena::CreateMaybeMessage<::Proto::TuningValue>(Arena*);
template<> ::Proto::UfbSchema* Arena::CreateMaybeMessage<::Proto::UfbSchema>(Arena*);
template<> ::Proto::Unit* Arena::CreateMaybeMessage<::Proto::Unit>(Arena*);
template<> ::Proto::UnitSet* Arena::CreateMaybeMessage<::Proto::UnitSet>(Arena*);
template<> ::Proto::Uuid* Arena::CreateMaybeMessage<::Proto::Uuid>(Arena*);
template<> ::Proto::VFrameSetPoint* Arena::CreateMaybeMessage<::Proto::VFrameSetPoint>(Arena*);
template<> ::Proto::Workstation* Arena::CreateMaybeMessage<::Proto::Workstation>(Arena*);
template<> ::Proto::qvariant* Arena::CreateMaybeMessage<::Proto::qvariant>(Arena*);
template<> ::Proto::wstring* Arena::CreateMaybeMessage<::Proto::wstring>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum SchemaUnit : int {
  Display = 0,
  Millimeter = 1,
  Inch = 2
};
bool SchemaUnit_IsValid(int value);
constexpr SchemaUnit SchemaUnit_MIN = Display;
constexpr SchemaUnit SchemaUnit_MAX = Inch;
constexpr int SchemaUnit_ARRAYSIZE = SchemaUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemaUnit_descriptor();
template<typename T>
inline const std::string& SchemaUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchemaUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchemaUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SchemaUnit_descriptor(), enum_t_value);
}
inline bool SchemaUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchemaUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SchemaUnit>(
    SchemaUnit_descriptor(), name, value);
}
enum ConnectionDirrection : int {
  Input = 0,
  Output = 1
};
bool ConnectionDirrection_IsValid(int value);
constexpr ConnectionDirrection ConnectionDirrection_MIN = Input;
constexpr ConnectionDirrection ConnectionDirrection_MAX = Output;
constexpr int ConnectionDirrection_ARRAYSIZE = ConnectionDirrection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionDirrection_descriptor();
template<typename T>
inline const std::string& ConnectionDirrection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionDirrection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionDirrection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionDirrection_descriptor(), enum_t_value);
}
inline bool ConnectionDirrection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionDirrection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionDirrection>(
    ConnectionDirrection_descriptor(), name, value);
}
enum FblSignalType : int {
  Analog = 0,
  Discrete = 1
};
bool FblSignalType_IsValid(int value);
constexpr FblSignalType FblSignalType_MIN = Analog;
constexpr FblSignalType FblSignalType_MAX = Discrete;
constexpr int FblSignalType_ARRAYSIZE = FblSignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FblSignalType_descriptor();
template<typename T>
inline const std::string& FblSignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FblSignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FblSignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FblSignalType_descriptor(), enum_t_value);
}
inline bool FblSignalType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FblSignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FblSignalType>(
    FblSignalType_descriptor(), name, value);
}
enum FblDataFormat : int {
  UnsignedInt = 0,
  SignedInt = 1,
  Float = 2
};
bool FblDataFormat_IsValid(int value);
constexpr FblDataFormat FblDataFormat_MIN = UnsignedInt;
constexpr FblDataFormat FblDataFormat_MAX = Float;
constexpr int FblDataFormat_ARRAYSIZE = FblDataFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FblDataFormat_descriptor();
template<typename T>
inline const std::string& FblDataFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FblDataFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FblDataFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FblDataFormat_descriptor(), enum_t_value);
}
inline bool FblDataFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FblDataFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FblDataFormat>(
    FblDataFormat_descriptor(), name, value);
}
// ===================================================================

class Uuid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Uuid) */ {
 public:
  inline Uuid() : Uuid(nullptr) {}
  virtual ~Uuid();

  Uuid(const Uuid& from);
  Uuid(Uuid&& from) noexcept
    : Uuid() {
    *this = ::std::move(from);
  }

  inline Uuid& operator=(const Uuid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uuid& operator=(Uuid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uuid& default_instance();

  static inline const Uuid* internal_default_instance() {
    return reinterpret_cast<const Uuid*>(
               &_Uuid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uuid& a, Uuid& b) {
    a.Swap(&b);
  }
  inline void Swap(Uuid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uuid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uuid* New() const final {
    return CreateMaybeMessage<Uuid>(nullptr);
  }

  Uuid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uuid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uuid& from);
  void MergeFrom(const Uuid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uuid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Uuid";
  }
  protected:
  explicit Uuid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
  };
  // required bytes uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:Proto.Uuid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class qvariant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.qvariant) */ {
 public:
  inline qvariant() : qvariant(nullptr) {}
  virtual ~qvariant();

  qvariant(const qvariant& from);
  qvariant(qvariant&& from) noexcept
    : qvariant() {
    *this = ::std::move(from);
  }

  inline qvariant& operator=(const qvariant& from) {
    CopyFrom(from);
    return *this;
  }
  inline qvariant& operator=(qvariant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const qvariant& default_instance();

  static inline const qvariant* internal_default_instance() {
    return reinterpret_cast<const qvariant*>(
               &_qvariant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(qvariant& a, qvariant& b) {
    a.Swap(&b);
  }
  inline void Swap(qvariant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(qvariant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline qvariant* New() const final {
    return CreateMaybeMessage<qvariant>(nullptr);
  }

  qvariant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<qvariant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const qvariant& from);
  void MergeFrom(const qvariant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(qvariant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.qvariant";
  }
  protected:
  explicit qvariant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kDoubleValueFieldNumber = 4,
    kUintValueFieldNumber = 3,
    kBoolValueFieldNumber = 5,
    kFloatValueFieldNumber = 6,
  };
  // required int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 intValue = 2 [default = 0];
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 intvalue() const;
  void set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intvalue() const;
  void _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double doubleValue = 4 [default = 0];
  bool has_doublevalue() const;
  private:
  bool _internal_has_doublevalue() const;
  public:
  void clear_doublevalue();
  double doublevalue() const;
  void set_doublevalue(double value);
  private:
  double _internal_doublevalue() const;
  void _internal_set_doublevalue(double value);
  public:

  // optional uint32 uintValue = 3 [default = 0];
  bool has_uintvalue() const;
  private:
  bool _internal_has_uintvalue() const;
  public:
  void clear_uintvalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 uintvalue() const;
  void set_uintvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uintvalue() const;
  void _internal_set_uintvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool boolValue = 5 [default = false];
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // optional float floatValue = 6 [default = 0];
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.qvariant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 intvalue_;
  double doublevalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uintvalue_;
  bool boolvalue_;
  float floatvalue_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class wstring PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.wstring) */ {
 public:
  inline wstring() : wstring(nullptr) {}
  virtual ~wstring();

  wstring(const wstring& from);
  wstring(wstring&& from) noexcept
    : wstring() {
    *this = ::std::move(from);
  }

  inline wstring& operator=(const wstring& from) {
    CopyFrom(from);
    return *this;
  }
  inline wstring& operator=(wstring&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const wstring& default_instance();

  static inline const wstring* internal_default_instance() {
    return reinterpret_cast<const wstring*>(
               &_wstring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(wstring& a, wstring& b) {
    a.Swap(&b);
  }
  inline void Swap(wstring* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(wstring* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline wstring* New() const final {
    return CreateMaybeMessage<wstring>(nullptr);
  }

  wstring* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<wstring>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const wstring& from);
  void MergeFrom(const wstring& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wstring* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.wstring";
  }
  protected:
  explicit wstring(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // required bytes text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:Proto.wstring)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class FontParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.FontParam) */ {
 public:
  inline FontParam() : FontParam(nullptr) {}
  virtual ~FontParam();

  FontParam(const FontParam& from);
  FontParam(FontParam&& from) noexcept
    : FontParam() {
    *this = ::std::move(from);
  }

  inline FontParam& operator=(const FontParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontParam& operator=(FontParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FontParam& default_instance();

  static inline const FontParam* internal_default_instance() {
    return reinterpret_cast<const FontParam*>(
               &_FontParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FontParam& a, FontParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FontParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FontParam* New() const final {
    return CreateMaybeMessage<FontParam>(nullptr);
  }

  FontParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FontParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FontParam& from);
  void MergeFrom(const FontParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FontParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.FontParam";
  }
  protected:
  explicit FontParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kNameObsoleteFieldNumber = 1,
    kSizeFieldNumber = 2,
    kBoldFieldNumber = 3,
    kItalicFieldNumber = 4,
  };
  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Proto.wstring name_obsolete = 1;
  bool has_name_obsolete() const;
  private:
  bool _internal_has_name_obsolete() const;
  public:
  void clear_name_obsolete();
  const ::Proto::wstring& name_obsolete() const;
  ::Proto::wstring* release_name_obsolete();
  ::Proto::wstring* mutable_name_obsolete();
  void set_allocated_name_obsolete(::Proto::wstring* name_obsolete);
  private:
  const ::Proto::wstring& _internal_name_obsolete() const;
  ::Proto::wstring* _internal_mutable_name_obsolete();
  public:
  void unsafe_arena_set_allocated_name_obsolete(
      ::Proto::wstring* name_obsolete);
  ::Proto::wstring* unsafe_arena_release_name_obsolete();

  // required double size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // required bool bold = 3;
  bool has_bold() const;
  private:
  bool _internal_has_bold() const;
  public:
  void clear_bold();
  bool bold() const;
  void set_bold(bool value);
  private:
  bool _internal_bold() const;
  void _internal_set_bold(bool value);
  public:

  // required bool italic = 4;
  bool has_italic() const;
  private:
  bool _internal_has_italic() const;
  public:
  void clear_italic();
  bool italic() const;
  void set_italic(bool value);
  private:
  bool _internal_italic() const;
  void _internal_set_italic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.FontParam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Proto::wstring* name_obsolete_;
  double size_;
  bool bold_;
  bool italic_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaPoint) */ {
 public:
  inline SchemaPoint() : SchemaPoint(nullptr) {}
  virtual ~SchemaPoint();

  SchemaPoint(const SchemaPoint& from);
  SchemaPoint(SchemaPoint&& from) noexcept
    : SchemaPoint() {
    *this = ::std::move(from);
  }

  inline SchemaPoint& operator=(const SchemaPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaPoint& operator=(SchemaPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaPoint& default_instance();

  static inline const SchemaPoint* internal_default_instance() {
    return reinterpret_cast<const SchemaPoint*>(
               &_SchemaPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SchemaPoint& a, SchemaPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaPoint* New() const final {
    return CreateMaybeMessage<SchemaPoint>(nullptr);
  }

  SchemaPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaPoint& from);
  void MergeFrom(const SchemaPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaPoint";
  }
  protected:
  explicit SchemaPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ImageItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ImageItem) */ {
 public:
  inline ImageItem() : ImageItem(nullptr) {}
  virtual ~ImageItem();

  ImageItem(const ImageItem& from);
  ImageItem(ImageItem&& from) noexcept
    : ImageItem() {
    *this = ::std::move(from);
  }

  inline ImageItem& operator=(const ImageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageItem& operator=(ImageItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageItem& default_instance();

  static inline const ImageItem* internal_default_instance() {
    return reinterpret_cast<const ImageItem*>(
               &_ImageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageItem& a, ImageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageItem* New() const final {
    return CreateMaybeMessage<ImageItem>(nullptr);
  }

  ImageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageItem& from);
  void MergeFrom(const ImageItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ImageItem";
  }
  protected:
  explicit ImageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 3,
    kImageDataFieldNumber = 8,
    kSvgDataFieldNumber = 9,
    kAllowScaleFieldNumber = 1,
    kKeepAspectRatioFieldNumber = 2,
  };
  // optional string imageId = 3;
  bool has_imageid() const;
  private:
  bool _internal_has_imageid() const;
  public:
  void clear_imageid();
  const std::string& imageid() const;
  void set_imageid(const std::string& value);
  void set_imageid(std::string&& value);
  void set_imageid(const char* value);
  void set_imageid(const char* value, size_t size);
  std::string* mutable_imageid();
  std::string* release_imageid();
  void set_allocated_imageid(std::string* imageid);
  private:
  const std::string& _internal_imageid() const;
  void _internal_set_imageid(const std::string& value);
  std::string* _internal_mutable_imageid();
  public:

  // optional bytes imageData = 8;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // optional string svgData = 9;
  bool has_svgdata() const;
  private:
  bool _internal_has_svgdata() const;
  public:
  void clear_svgdata();
  const std::string& svgdata() const;
  void set_svgdata(const std::string& value);
  void set_svgdata(std::string&& value);
  void set_svgdata(const char* value);
  void set_svgdata(const char* value, size_t size);
  std::string* mutable_svgdata();
  std::string* release_svgdata();
  void set_allocated_svgdata(std::string* svgdata);
  private:
  const std::string& _internal_svgdata() const;
  void _internal_set_svgdata(const std::string& value);
  std::string* _internal_mutable_svgdata();
  public:

  // optional bool allowScale = 1 [default = true];
  bool has_allowscale() const;
  private:
  bool _internal_has_allowscale() const;
  public:
  void clear_allowscale();
  bool allowscale() const;
  void set_allowscale(bool value);
  private:
  bool _internal_allowscale() const;
  void _internal_set_allowscale(bool value);
  public:

  // optional bool keepAspectRatio = 2 [default = true];
  bool has_keepaspectratio() const;
  private:
  bool _internal_has_keepaspectratio() const;
  public:
  void clear_keepaspectratio();
  bool keepaspectratio() const;
  void set_keepaspectratio(bool value);
  private:
  bool _internal_keepaspectratio() const;
  void _internal_set_keepaspectratio(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.ImageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr svgdata_;
  bool allowscale_;
  bool keepaspectratio_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Envelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  virtual ~Envelope();

  Envelope(const Envelope& from);
  Envelope(Envelope&& from) noexcept
    : Envelope() {
    *this = ::std::move(from);
  }

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Envelope& default_instance();

  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
               &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Envelope& a, Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Envelope* New() const final {
    return CreateMaybeMessage<Envelope>(nullptr);
  }

  Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Envelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Envelope& from);
  void MergeFrom(const Envelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Envelope";
  }
  protected:
  explicit Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompressedObjectFieldNumber = 2,
    kSchemaitemFieldNumber = 6,
    kDeviceobjectFieldNumber = 7,
    kSchemaFieldNumber = 100,
    kSchemalayerFieldNumber = 101,
    kFblelementFieldNumber = 102,
    kConfigurationFieldNumber = 103,
    kConnectionFieldNumber = 104,
    kSchemaDetailsSetFieldNumber = 105,
    kBusFieldNumber = 200,
    kClassnamehashFieldNumber = 1,
  };
  // optional bytes compressedObject = 2;
  bool has_compressedobject() const;
  private:
  bool _internal_has_compressedobject() const;
  public:
  void clear_compressedobject();
  const std::string& compressedobject() const;
  void set_compressedobject(const std::string& value);
  void set_compressedobject(std::string&& value);
  void set_compressedobject(const char* value);
  void set_compressedobject(const void* value, size_t size);
  std::string* mutable_compressedobject();
  std::string* release_compressedobject();
  void set_allocated_compressedobject(std::string* compressedobject);
  private:
  const std::string& _internal_compressedobject() const;
  void _internal_set_compressedobject(const std::string& value);
  std::string* _internal_mutable_compressedobject();
  public:

  // optional .Proto.SchemaItem schemaitem = 6;
  bool has_schemaitem() const;
  private:
  bool _internal_has_schemaitem() const;
  public:
  void clear_schemaitem();
  const ::Proto::SchemaItem& schemaitem() const;
  ::Proto::SchemaItem* release_schemaitem();
  ::Proto::SchemaItem* mutable_schemaitem();
  void set_allocated_schemaitem(::Proto::SchemaItem* schemaitem);
  private:
  const ::Proto::SchemaItem& _internal_schemaitem() const;
  ::Proto::SchemaItem* _internal_mutable_schemaitem();
  public:
  void unsafe_arena_set_allocated_schemaitem(
      ::Proto::SchemaItem* schemaitem);
  ::Proto::SchemaItem* unsafe_arena_release_schemaitem();

  // optional .Proto.DeviceObject deviceobject = 7;
  bool has_deviceobject() const;
  private:
  bool _internal_has_deviceobject() const;
  public:
  void clear_deviceobject();
  const ::Proto::DeviceObject& deviceobject() const;
  ::Proto::DeviceObject* release_deviceobject();
  ::Proto::DeviceObject* mutable_deviceobject();
  void set_allocated_deviceobject(::Proto::DeviceObject* deviceobject);
  private:
  const ::Proto::DeviceObject& _internal_deviceobject() const;
  ::Proto::DeviceObject* _internal_mutable_deviceobject();
  public:
  void unsafe_arena_set_allocated_deviceobject(
      ::Proto::DeviceObject* deviceobject);
  ::Proto::DeviceObject* unsafe_arena_release_deviceobject();

  // optional .Proto.Schema schema = 100;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::Proto::Schema& schema() const;
  ::Proto::Schema* release_schema();
  ::Proto::Schema* mutable_schema();
  void set_allocated_schema(::Proto::Schema* schema);
  private:
  const ::Proto::Schema& _internal_schema() const;
  ::Proto::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::Proto::Schema* schema);
  ::Proto::Schema* unsafe_arena_release_schema();

  // optional .Proto.SchemaLayer schemalayer = 101;
  bool has_schemalayer() const;
  private:
  bool _internal_has_schemalayer() const;
  public:
  void clear_schemalayer();
  const ::Proto::SchemaLayer& schemalayer() const;
  ::Proto::SchemaLayer* release_schemalayer();
  ::Proto::SchemaLayer* mutable_schemalayer();
  void set_allocated_schemalayer(::Proto::SchemaLayer* schemalayer);
  private:
  const ::Proto::SchemaLayer& _internal_schemalayer() const;
  ::Proto::SchemaLayer* _internal_mutable_schemalayer();
  public:
  void unsafe_arena_set_allocated_schemalayer(
      ::Proto::SchemaLayer* schemalayer);
  ::Proto::SchemaLayer* unsafe_arena_release_schemalayer();

  // optional .Proto.FblElement fblelement = 102;
  bool has_fblelement() const;
  private:
  bool _internal_has_fblelement() const;
  public:
  void clear_fblelement();
  const ::Proto::FblElement& fblelement() const;
  ::Proto::FblElement* release_fblelement();
  ::Proto::FblElement* mutable_fblelement();
  void set_allocated_fblelement(::Proto::FblElement* fblelement);
  private:
  const ::Proto::FblElement& _internal_fblelement() const;
  ::Proto::FblElement* _internal_mutable_fblelement();
  public:
  void unsafe_arena_set_allocated_fblelement(
      ::Proto::FblElement* fblelement);
  ::Proto::FblElement* unsafe_arena_release_fblelement();

  // optional .Proto.Configuration configuration = 103;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::Proto::Configuration& configuration() const;
  ::Proto::Configuration* release_configuration();
  ::Proto::Configuration* mutable_configuration();
  void set_allocated_configuration(::Proto::Configuration* configuration);
  private:
  const ::Proto::Configuration& _internal_configuration() const;
  ::Proto::Configuration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::Proto::Configuration* configuration);
  ::Proto::Configuration* unsafe_arena_release_configuration();

  // optional .Proto.Connection connection = 104;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::Proto::Connection& connection() const;
  ::Proto::Connection* release_connection();
  ::Proto::Connection* mutable_connection();
  void set_allocated_connection(::Proto::Connection* connection);
  private:
  const ::Proto::Connection& _internal_connection() const;
  ::Proto::Connection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::Proto::Connection* connection);
  ::Proto::Connection* unsafe_arena_release_connection();

  // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
  bool has_schemadetailsset() const;
  private:
  bool _internal_has_schemadetailsset() const;
  public:
  void clear_schemadetailsset();
  const ::Proto::SchemaDetailsSet& schemadetailsset() const;
  ::Proto::SchemaDetailsSet* release_schemadetailsset();
  ::Proto::SchemaDetailsSet* mutable_schemadetailsset();
  void set_allocated_schemadetailsset(::Proto::SchemaDetailsSet* schemadetailsset);
  private:
  const ::Proto::SchemaDetailsSet& _internal_schemadetailsset() const;
  ::Proto::SchemaDetailsSet* _internal_mutable_schemadetailsset();
  public:
  void unsafe_arena_set_allocated_schemadetailsset(
      ::Proto::SchemaDetailsSet* schemadetailsset);
  ::Proto::SchemaDetailsSet* unsafe_arena_release_schemadetailsset();

  // optional .Proto.Bus bus = 200;
  bool has_bus() const;
  private:
  bool _internal_has_bus() const;
  public:
  void clear_bus();
  const ::Proto::Bus& bus() const;
  ::Proto::Bus* release_bus();
  ::Proto::Bus* mutable_bus();
  void set_allocated_bus(::Proto::Bus* bus);
  private:
  const ::Proto::Bus& _internal_bus() const;
  ::Proto::Bus* _internal_mutable_bus();
  public:
  void unsafe_arena_set_allocated_bus(
      ::Proto::Bus* bus);
  ::Proto::Bus* unsafe_arena_release_bus();

  // required uint32 classnamehash = 1;
  bool has_classnamehash() const;
  private:
  bool _internal_has_classnamehash() const;
  public:
  void clear_classnamehash();
  ::PROTOBUF_NAMESPACE_ID::uint32 classnamehash() const;
  void set_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classnamehash() const;
  void _internal_set_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressedobject_;
  ::Proto::SchemaItem* schemaitem_;
  ::Proto::DeviceObject* deviceobject_;
  ::Proto::Schema* schema_;
  ::Proto::SchemaLayer* schemalayer_;
  ::Proto::FblElement* fblelement_;
  ::Proto::Configuration* configuration_;
  ::Proto::Connection* connection_;
  ::Proto::SchemaDetailsSet* schemadetailsset_;
  ::Proto::Bus* bus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 classnamehash_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.EnvelopeSet) */ {
 public:
  inline EnvelopeSet() : EnvelopeSet(nullptr) {}
  virtual ~EnvelopeSet();

  EnvelopeSet(const EnvelopeSet& from);
  EnvelopeSet(EnvelopeSet&& from) noexcept
    : EnvelopeSet() {
    *this = ::std::move(from);
  }

  inline EnvelopeSet& operator=(const EnvelopeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeSet& operator=(EnvelopeSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeSet& default_instance();

  static inline const EnvelopeSet* internal_default_instance() {
    return reinterpret_cast<const EnvelopeSet*>(
               &_EnvelopeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnvelopeSet& a, EnvelopeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeSet* New() const final {
    return CreateMaybeMessage<EnvelopeSet>(nullptr);
  }

  EnvelopeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeSet& from);
  void MergeFrom(const EnvelopeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.EnvelopeSet";
  }
  protected:
  explicit EnvelopeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .Proto.Envelope items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Proto::Envelope* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
      mutable_items();
  private:
  const ::Proto::Envelope& _internal_items(int index) const;
  ::Proto::Envelope* _internal_add_items();
  public:
  const ::Proto::Envelope& items(int index) const;
  ::Proto::Envelope* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
      items() const;

  // @@protoc_insertion_point(class_scope:Proto.EnvelopeSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeSetShortDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.EnvelopeSetShortDescription) */ {
 public:
  inline EnvelopeSetShortDescription() : EnvelopeSetShortDescription(nullptr) {}
  virtual ~EnvelopeSetShortDescription();

  EnvelopeSetShortDescription(const EnvelopeSetShortDescription& from);
  EnvelopeSetShortDescription(EnvelopeSetShortDescription&& from) noexcept
    : EnvelopeSetShortDescription() {
    *this = ::std::move(from);
  }

  inline EnvelopeSetShortDescription& operator=(const EnvelopeSetShortDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeSetShortDescription& operator=(EnvelopeSetShortDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeSetShortDescription& default_instance();

  static inline const EnvelopeSetShortDescription* internal_default_instance() {
    return reinterpret_cast<const EnvelopeSetShortDescription*>(
               &_EnvelopeSetShortDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EnvelopeSetShortDescription& a, EnvelopeSetShortDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeSetShortDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeSetShortDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeSetShortDescription* New() const final {
    return CreateMaybeMessage<EnvelopeSetShortDescription>(nullptr);
  }

  EnvelopeSetShortDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeSetShortDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeSetShortDescription& from);
  void MergeFrom(const EnvelopeSetShortDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeSetShortDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.EnvelopeSetShortDescription";
  }
  protected:
  explicit EnvelopeSetShortDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassnamehashFieldNumber = 2,
    kProjectdbversionFieldNumber = 1,
    kEquipmentEditorFieldNumber = 3,
    kPresetEditorFieldNumber = 4,
    kPresetRootFieldNumber = 5,
  };
  // repeated uint32 classnamehash = 2;
  int classnamehash_size() const;
  private:
  int _internal_classnamehash_size() const;
  public:
  void clear_classnamehash();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classnamehash(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_classnamehash() const;
  void _internal_add_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_classnamehash();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 classnamehash(int index) const;
  void set_classnamehash(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      classnamehash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_classnamehash();

  // optional uint32 projectdbversion = 1;
  bool has_projectdbversion() const;
  private:
  bool _internal_has_projectdbversion() const;
  public:
  void clear_projectdbversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 projectdbversion() const;
  void set_projectdbversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_projectdbversion() const;
  void _internal_set_projectdbversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool equipmentEditor = 3;
  bool has_equipmenteditor() const;
  private:
  bool _internal_has_equipmenteditor() const;
  public:
  void clear_equipmenteditor();
  bool equipmenteditor() const;
  void set_equipmenteditor(bool value);
  private:
  bool _internal_equipmenteditor() const;
  void _internal_set_equipmenteditor(bool value);
  public:

  // optional bool presetEditor = 4;
  bool has_preseteditor() const;
  private:
  bool _internal_has_preseteditor() const;
  public:
  void clear_preseteditor();
  bool preseteditor() const;
  void set_preseteditor(bool value);
  private:
  bool _internal_preseteditor() const;
  void _internal_set_preseteditor(bool value);
  public:

  // optional bool presetRoot = 5;
  bool has_presetroot() const;
  private:
  bool _internal_has_presetroot() const;
  public:
  void clear_presetroot();
  bool presetroot() const;
  void set_presetroot(bool value);
  private:
  bool _internal_presetroot() const;
  void _internal_set_presetroot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.EnvelopeSetShortDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > classnamehash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 projectdbversion_;
  bool equipmenteditor_;
  bool preseteditor_;
  bool presetroot_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Configuration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  virtual ~Configuration();

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Configuration& default_instance();

  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(nullptr);
  }

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemasIDsFieldNumber = 100,
    kSchemasFieldNumber = 101,
    kUuidFieldNumber = 1,
    kStrIDFieldNumber = 2,
    kCaptionFieldNumber = 3,
    kVariablesFieldNumber = 4,
    kGlobalsFieldNumber = 5,
  };
  // repeated .Proto.Uuid schemasIDs = 100;
  int schemasids_size() const;
  private:
  int _internal_schemasids_size() const;
  public:
  void clear_schemasids();
  ::Proto::Uuid* mutable_schemasids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >*
      mutable_schemasids();
  private:
  const ::Proto::Uuid& _internal_schemasids(int index) const;
  ::Proto::Uuid* _internal_add_schemasids();
  public:
  const ::Proto::Uuid& schemasids(int index) const;
  ::Proto::Uuid* add_schemasids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >&
      schemasids() const;

  // repeated .Proto.Envelope schemas = 101;
  int schemas_size() const;
  private:
  int _internal_schemas_size() const;
  public:
  void clear_schemas();
  ::Proto::Envelope* mutable_schemas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
      mutable_schemas();
  private:
  const ::Proto::Envelope& _internal_schemas(int index) const;
  ::Proto::Envelope* _internal_add_schemas();
  public:
  const ::Proto::Envelope& schemas(int index) const;
  ::Proto::Envelope* add_schemas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
      schemas() const;

  // required .Proto.Uuid uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // required .Proto.wstring strID = 2;
  bool has_strid() const;
  private:
  bool _internal_has_strid() const;
  public:
  void clear_strid();
  const ::Proto::wstring& strid() const;
  ::Proto::wstring* release_strid();
  ::Proto::wstring* mutable_strid();
  void set_allocated_strid(::Proto::wstring* strid);
  private:
  const ::Proto::wstring& _internal_strid() const;
  ::Proto::wstring* _internal_mutable_strid();
  public:
  void unsafe_arena_set_allocated_strid(
      ::Proto::wstring* strid);
  ::Proto::wstring* unsafe_arena_release_strid();

  // required .Proto.wstring caption = 3;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::Proto::wstring& caption() const;
  ::Proto::wstring* release_caption();
  ::Proto::wstring* mutable_caption();
  void set_allocated_caption(::Proto::wstring* caption);
  private:
  const ::Proto::wstring& _internal_caption() const;
  ::Proto::wstring* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::Proto::wstring* caption);
  ::Proto::wstring* unsafe_arena_release_caption();

  // required .Proto.wstring variables = 4;
  bool has_variables() const;
  private:
  bool _internal_has_variables() const;
  public:
  void clear_variables();
  const ::Proto::wstring& variables() const;
  ::Proto::wstring* release_variables();
  ::Proto::wstring* mutable_variables();
  void set_allocated_variables(::Proto::wstring* variables);
  private:
  const ::Proto::wstring& _internal_variables() const;
  ::Proto::wstring* _internal_mutable_variables();
  public:
  void unsafe_arena_set_allocated_variables(
      ::Proto::wstring* variables);
  ::Proto::wstring* unsafe_arena_release_variables();

  // required .Proto.wstring globals = 5;
  bool has_globals() const;
  private:
  bool _internal_has_globals() const;
  public:
  void clear_globals();
  const ::Proto::wstring& globals() const;
  ::Proto::wstring* release_globals();
  ::Proto::wstring* mutable_globals();
  void set_allocated_globals(::Proto::wstring* globals);
  private:
  const ::Proto::wstring& _internal_globals() const;
  ::Proto::wstring* _internal_mutable_globals();
  public:
  void unsafe_arena_set_allocated_globals(
      ::Proto::wstring* globals);
  ::Proto::wstring* unsafe_arena_release_globals();

  // @@protoc_insertion_point(class_scope:Proto.Configuration)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid > schemasids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope > schemas_;
  ::Proto::Uuid* uuid_;
  ::Proto::wstring* strid_;
  ::Proto::wstring* caption_;
  ::Proto::wstring* variables_;
  ::Proto::wstring* globals_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AfbElementCollection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AfbElementCollection) */ {
 public:
  inline AfbElementCollection() : AfbElementCollection(nullptr) {}
  virtual ~AfbElementCollection();

  AfbElementCollection(const AfbElementCollection& from);
  AfbElementCollection(AfbElementCollection&& from) noexcept
    : AfbElementCollection() {
    *this = ::std::move(from);
  }

  inline AfbElementCollection& operator=(const AfbElementCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfbElementCollection& operator=(AfbElementCollection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfbElementCollection& default_instance();

  static inline const AfbElementCollection* internal_default_instance() {
    return reinterpret_cast<const AfbElementCollection*>(
               &_AfbElementCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AfbElementCollection& a, AfbElementCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(AfbElementCollection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AfbElementCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfbElementCollection* New() const final {
    return CreateMaybeMessage<AfbElementCollection>(nullptr);
  }

  AfbElementCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfbElementCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfbElementCollection& from);
  void MergeFrom(const AfbElementCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfbElementCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AfbElementCollection";
  }
  protected:
  explicit AfbElementCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .Proto.AfbElementXml elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::Proto::AfbElementXml* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbElementXml >*
      mutable_elements();
  private:
  const ::Proto::AfbElementXml& _internal_elements(int index) const;
  ::Proto::AfbElementXml* _internal_add_elements();
  public:
  const ::Proto::AfbElementXml& elements(int index) const;
  ::Proto::AfbElementXml* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbElementXml >&
      elements() const;

  // @@protoc_insertion_point(class_scope:Proto.AfbElementCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbElementXml > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AfbElementXml PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AfbElementXml) */ {
 public:
  inline AfbElementXml() : AfbElementXml(nullptr) {}
  virtual ~AfbElementXml();

  AfbElementXml(const AfbElementXml& from);
  AfbElementXml(AfbElementXml&& from) noexcept
    : AfbElementXml() {
    *this = ::std::move(from);
  }

  inline AfbElementXml& operator=(const AfbElementXml& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfbElementXml& operator=(AfbElementXml&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfbElementXml& default_instance();

  static inline const AfbElementXml* internal_default_instance() {
    return reinterpret_cast<const AfbElementXml*>(
               &_AfbElementXml_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AfbElementXml& a, AfbElementXml& b) {
    a.Swap(&b);
  }
  inline void Swap(AfbElementXml* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AfbElementXml* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfbElementXml* New() const final {
    return CreateMaybeMessage<AfbElementXml>(nullptr);
  }

  AfbElementXml* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfbElementXml>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfbElementXml& from);
  void MergeFrom(const AfbElementXml& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfbElementXml* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AfbElementXml";
  }
  protected:
  explicit AfbElementXml(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:Proto.AfbElementXml)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class FblElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.FblElement) */ {
 public:
  inline FblElement() : FblElement(nullptr) {}
  virtual ~FblElement();

  FblElement(const FblElement& from);
  FblElement(FblElement&& from) noexcept
    : FblElement() {
    *this = ::std::move(from);
  }

  inline FblElement& operator=(const FblElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline FblElement& operator=(FblElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FblElement& default_instance();

  static inline const FblElement* internal_default_instance() {
    return reinterpret_cast<const FblElement*>(
               &_FblElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FblElement& a, FblElement& b) {
    a.Swap(&b);
  }
  inline void Swap(FblElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FblElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FblElement* New() const final {
    return CreateMaybeMessage<FblElement>(nullptr);
  }

  FblElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FblElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FblElement& from);
  void MergeFrom(const FblElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FblElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.FblElement";
  }
  protected:
  explicit FblElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 11,
    kOutputsFieldNumber = 12,
    kParamsFieldNumber = 13,
    kStrIDFieldNumber = 2,
    kCaptionFieldNumber = 3,
    kDescriptionFieldNumber = 14,
    kOpcodeFieldNumber = 4,
    kHasRamFieldNumber = 5,
    kRequiredStartFieldNumber = 6,
  };
  // repeated .Proto.AfbSignal inputs = 11;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::Proto::AfbSignal* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >*
      mutable_inputs();
  private:
  const ::Proto::AfbSignal& _internal_inputs(int index) const;
  ::Proto::AfbSignal* _internal_add_inputs();
  public:
  const ::Proto::AfbSignal& inputs(int index) const;
  ::Proto::AfbSignal* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >&
      inputs() const;

  // repeated .Proto.AfbSignal outputs = 12;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::Proto::AfbSignal* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >*
      mutable_outputs();
  private:
  const ::Proto::AfbSignal& _internal_outputs(int index) const;
  ::Proto::AfbSignal* _internal_add_outputs();
  public:
  const ::Proto::AfbSignal& outputs(int index) const;
  ::Proto::AfbSignal* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >&
      outputs() const;

  // repeated .Proto.AfbParam params = 13;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::Proto::AfbParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >*
      mutable_params();
  private:
  const ::Proto::AfbParam& _internal_params(int index) const;
  ::Proto::AfbParam* _internal_add_params();
  public:
  const ::Proto::AfbParam& params(int index) const;
  ::Proto::AfbParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >&
      params() const;

  // required .Proto.wstring strID = 2;
  bool has_strid() const;
  private:
  bool _internal_has_strid() const;
  public:
  void clear_strid();
  const ::Proto::wstring& strid() const;
  ::Proto::wstring* release_strid();
  ::Proto::wstring* mutable_strid();
  void set_allocated_strid(::Proto::wstring* strid);
  private:
  const ::Proto::wstring& _internal_strid() const;
  ::Proto::wstring* _internal_mutable_strid();
  public:
  void unsafe_arena_set_allocated_strid(
      ::Proto::wstring* strid);
  ::Proto::wstring* unsafe_arena_release_strid();

  // required .Proto.wstring caption = 3;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::Proto::wstring& caption() const;
  ::Proto::wstring* release_caption();
  ::Proto::wstring* mutable_caption();
  void set_allocated_caption(::Proto::wstring* caption);
  private:
  const ::Proto::wstring& _internal_caption() const;
  ::Proto::wstring* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::Proto::wstring* caption);
  ::Proto::wstring* unsafe_arena_release_caption();

  // optional .Proto.wstring description = 14;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::Proto::wstring& description() const;
  ::Proto::wstring* release_description();
  ::Proto::wstring* mutable_description();
  void set_allocated_description(::Proto::wstring* description);
  private:
  const ::Proto::wstring& _internal_description() const;
  ::Proto::wstring* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::Proto::wstring* description);
  ::Proto::wstring* unsafe_arena_release_description();

  // required uint32 opcode = 4;
  bool has_opcode() const;
  private:
  bool _internal_has_opcode() const;
  public:
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcode() const;
  void _internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool hasRam = 5 [default = false];
  bool has_hasram() const;
  private:
  bool _internal_has_hasram() const;
  public:
  void clear_hasram();
  bool hasram() const;
  void set_hasram(bool value);
  private:
  bool _internal_hasram() const;
  void _internal_set_hasram(bool value);
  public:

  // optional bool requiredStart = 6 [default = true];
  bool has_requiredstart() const;
  private:
  bool _internal_has_requiredstart() const;
  public:
  void clear_requiredstart();
  bool requiredstart() const;
  void set_requiredstart(bool value);
  private:
  bool _internal_requiredstart() const;
  void _internal_set_requiredstart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.FblElement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam > params_;
  ::Proto::wstring* strid_;
  ::Proto::wstring* caption_;
  ::Proto::wstring* description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode_;
  bool hasram_;
  bool requiredstart_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AfbSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AfbSignal) */ {
 public:
  inline AfbSignal() : AfbSignal(nullptr) {}
  virtual ~AfbSignal();

  AfbSignal(const AfbSignal& from);
  AfbSignal(AfbSignal&& from) noexcept
    : AfbSignal() {
    *this = ::std::move(from);
  }

  inline AfbSignal& operator=(const AfbSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfbSignal& operator=(AfbSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfbSignal& default_instance();

  static inline const AfbSignal* internal_default_instance() {
    return reinterpret_cast<const AfbSignal*>(
               &_AfbSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AfbSignal& a, AfbSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(AfbSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AfbSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfbSignal* New() const final {
    return CreateMaybeMessage<AfbSignal>(nullptr);
  }

  AfbSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfbSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfbSignal& from);
  void MergeFrom(const AfbSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfbSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AfbSignal";
  }
  protected:
  explicit AfbSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionFieldNumber = 1,
    kOpNameFieldNumber = 5,
    kTypeFieldNumber = 2,
    kOperandIndexFieldNumber = 3,
    kSizeFieldNumber = 4,
    kDataFormatFieldNumber = 6,
  };
  // required .Proto.wstring caption = 1;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::Proto::wstring& caption() const;
  ::Proto::wstring* release_caption();
  ::Proto::wstring* mutable_caption();
  void set_allocated_caption(::Proto::wstring* caption);
  private:
  const ::Proto::wstring& _internal_caption() const;
  ::Proto::wstring* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::Proto::wstring* caption);
  ::Proto::wstring* unsafe_arena_release_caption();

  // optional .Proto.wstring opName = 5;
  bool has_opname() const;
  private:
  bool _internal_has_opname() const;
  public:
  void clear_opname();
  const ::Proto::wstring& opname() const;
  ::Proto::wstring* release_opname();
  ::Proto::wstring* mutable_opname();
  void set_allocated_opname(::Proto::wstring* opname);
  private:
  const ::Proto::wstring& _internal_opname() const;
  ::Proto::wstring* _internal_mutable_opname();
  public:
  void unsafe_arena_set_allocated_opname(
      ::Proto::wstring* opname);
  ::Proto::wstring* unsafe_arena_release_opname();

  // required .Proto.FblSignalType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Proto::FblSignalType type() const;
  void set_type(::Proto::FblSignalType value);
  private:
  ::Proto::FblSignalType _internal_type() const;
  void _internal_set_type(::Proto::FblSignalType value);
  public:

  // optional int32 operandIndex = 3 [default = 0];
  bool has_operandindex() const;
  private:
  bool _internal_has_operandindex() const;
  public:
  void clear_operandindex();
  ::PROTOBUF_NAMESPACE_ID::int32 operandindex() const;
  void set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operandindex() const;
  void _internal_set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 size = 4 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .Proto.FblDataFormat dataFormat = 6;
  bool has_dataformat() const;
  private:
  bool _internal_has_dataformat() const;
  public:
  void clear_dataformat();
  ::Proto::FblDataFormat dataformat() const;
  void set_dataformat(::Proto::FblDataFormat value);
  private:
  ::Proto::FblDataFormat _internal_dataformat() const;
  void _internal_set_dataformat(::Proto::FblDataFormat value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.AfbSignal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::wstring* caption_;
  ::Proto::wstring* opname_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 operandindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  int dataformat_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AfbParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AfbParam) */ {
 public:
  inline AfbParam() : AfbParam(nullptr) {}
  virtual ~AfbParam();

  AfbParam(const AfbParam& from);
  AfbParam(AfbParam&& from) noexcept
    : AfbParam() {
    *this = ::std::move(from);
  }

  inline AfbParam& operator=(const AfbParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfbParam& operator=(AfbParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfbParam& default_instance();

  static inline const AfbParam* internal_default_instance() {
    return reinterpret_cast<const AfbParam*>(
               &_AfbParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AfbParam& a, AfbParam& b) {
    a.Swap(&b);
  }
  inline void Swap(AfbParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AfbParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfbParam* New() const final {
    return CreateMaybeMessage<AfbParam>(nullptr);
  }

  AfbParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfbParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfbParam& from);
  void MergeFrom(const AfbParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfbParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AfbParam";
  }
  protected:
  explicit AfbParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionFieldNumber = 1,
    kChangedScriptFieldNumber = 12,
    kValueFieldNumber = 13,
    kDefaultvalueFieldNumber = 14,
    kLowlimitFieldNumber = 15,
    kHighlimitFieldNumber = 16,
    kOpNameFieldNumber = 17,
    kOperandIndexFieldNumber = 8,
    kSizeFieldNumber = 9,
    kVisibleFieldNumber = 7,
    kInstantiatorFieldNumber = 10,
    kUserFieldNumber = 11,
    kTypeFieldNumber = 18,
    kDataFormatFieldNumber = 19,
  };
  // required .Proto.wstring caption = 1;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::Proto::wstring& caption() const;
  ::Proto::wstring* release_caption();
  ::Proto::wstring* mutable_caption();
  void set_allocated_caption(::Proto::wstring* caption);
  private:
  const ::Proto::wstring& _internal_caption() const;
  ::Proto::wstring* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::Proto::wstring* caption);
  ::Proto::wstring* unsafe_arena_release_caption();

  // optional .Proto.wstring changedScript = 12;
  bool has_changedscript() const;
  private:
  bool _internal_has_changedscript() const;
  public:
  void clear_changedscript();
  const ::Proto::wstring& changedscript() const;
  ::Proto::wstring* release_changedscript();
  ::Proto::wstring* mutable_changedscript();
  void set_allocated_changedscript(::Proto::wstring* changedscript);
  private:
  const ::Proto::wstring& _internal_changedscript() const;
  ::Proto::wstring* _internal_mutable_changedscript();
  public:
  void unsafe_arena_set_allocated_changedscript(
      ::Proto::wstring* changedscript);
  ::Proto::wstring* unsafe_arena_release_changedscript();

  // optional .Proto.qvariant value = 13;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Proto::qvariant& value() const;
  ::Proto::qvariant* release_value();
  ::Proto::qvariant* mutable_value();
  void set_allocated_value(::Proto::qvariant* value);
  private:
  const ::Proto::qvariant& _internal_value() const;
  ::Proto::qvariant* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Proto::qvariant* value);
  ::Proto::qvariant* unsafe_arena_release_value();

  // optional .Proto.qvariant defaultvalue = 14;
  bool has_defaultvalue() const;
  private:
  bool _internal_has_defaultvalue() const;
  public:
  void clear_defaultvalue();
  const ::Proto::qvariant& defaultvalue() const;
  ::Proto::qvariant* release_defaultvalue();
  ::Proto::qvariant* mutable_defaultvalue();
  void set_allocated_defaultvalue(::Proto::qvariant* defaultvalue);
  private:
  const ::Proto::qvariant& _internal_defaultvalue() const;
  ::Proto::qvariant* _internal_mutable_defaultvalue();
  public:
  void unsafe_arena_set_allocated_defaultvalue(
      ::Proto::qvariant* defaultvalue);
  ::Proto::qvariant* unsafe_arena_release_defaultvalue();

  // optional .Proto.qvariant lowlimit = 15;
  bool has_lowlimit() const;
  private:
  bool _internal_has_lowlimit() const;
  public:
  void clear_lowlimit();
  const ::Proto::qvariant& lowlimit() const;
  ::Proto::qvariant* release_lowlimit();
  ::Proto::qvariant* mutable_lowlimit();
  void set_allocated_lowlimit(::Proto::qvariant* lowlimit);
  private:
  const ::Proto::qvariant& _internal_lowlimit() const;
  ::Proto::qvariant* _internal_mutable_lowlimit();
  public:
  void unsafe_arena_set_allocated_lowlimit(
      ::Proto::qvariant* lowlimit);
  ::Proto::qvariant* unsafe_arena_release_lowlimit();

  // optional .Proto.qvariant highlimit = 16;
  bool has_highlimit() const;
  private:
  bool _internal_has_highlimit() const;
  public:
  void clear_highlimit();
  const ::Proto::qvariant& highlimit() const;
  ::Proto::qvariant* release_highlimit();
  ::Proto::qvariant* mutable_highlimit();
  void set_allocated_highlimit(::Proto::qvariant* highlimit);
  private:
  const ::Proto::qvariant& _internal_highlimit() const;
  ::Proto::qvariant* _internal_mutable_highlimit();
  public:
  void unsafe_arena_set_allocated_highlimit(
      ::Proto::qvariant* highlimit);
  ::Proto::qvariant* unsafe_arena_release_highlimit();

  // optional .Proto.wstring opName = 17;
  bool has_opname() const;
  private:
  bool _internal_has_opname() const;
  public:
  void clear_opname();
  const ::Proto::wstring& opname() const;
  ::Proto::wstring* release_opname();
  ::Proto::wstring* mutable_opname();
  void set_allocated_opname(::Proto::wstring* opname);
  private:
  const ::Proto::wstring& _internal_opname() const;
  ::Proto::wstring* _internal_mutable_opname();
  public:
  void unsafe_arena_set_allocated_opname(
      ::Proto::wstring* opname);
  ::Proto::wstring* unsafe_arena_release_opname();

  // optional int32 operandIndex = 8 [default = 0];
  bool has_operandindex() const;
  private:
  bool _internal_has_operandindex() const;
  public:
  void clear_operandindex();
  ::PROTOBUF_NAMESPACE_ID::int32 operandindex() const;
  void set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operandindex() const;
  void _internal_set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 size = 9 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool visible = 7;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional bool instantiator = 10 [default = false];
  bool has_instantiator() const;
  private:
  bool _internal_has_instantiator() const;
  public:
  void clear_instantiator();
  bool instantiator() const;
  void set_instantiator(bool value);
  private:
  bool _internal_instantiator() const;
  void _internal_set_instantiator(bool value);
  public:

  // optional bool user = 11 [default = false];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  bool user() const;
  void set_user(bool value);
  private:
  bool _internal_user() const;
  void _internal_set_user(bool value);
  public:

  // optional .Proto.FblSignalType type = 18;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Proto::FblSignalType type() const;
  void set_type(::Proto::FblSignalType value);
  private:
  ::Proto::FblSignalType _internal_type() const;
  void _internal_set_type(::Proto::FblSignalType value);
  public:

  // optional .Proto.FblDataFormat dataFormat = 19;
  bool has_dataformat() const;
  private:
  bool _internal_has_dataformat() const;
  public:
  void clear_dataformat();
  ::Proto::FblDataFormat dataformat() const;
  void set_dataformat(::Proto::FblDataFormat value);
  private:
  ::Proto::FblDataFormat _internal_dataformat() const;
  void _internal_set_dataformat(::Proto::FblDataFormat value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.AfbParam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::wstring* caption_;
  ::Proto::wstring* changedscript_;
  ::Proto::qvariant* value_;
  ::Proto::qvariant* defaultvalue_;
  ::Proto::qvariant* lowlimit_;
  ::Proto::qvariant* highlimit_;
  ::Proto::wstring* opname_;
  ::PROTOBUF_NAMESPACE_ID::int32 operandindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  bool visible_;
  bool instantiator_;
  bool user_;
  int type_;
  int dataformat_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Schema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Schema) */ {
 public:
  inline Schema() : Schema(nullptr) {}
  virtual ~Schema();

  Schema(const Schema& from);
  Schema(Schema&& from) noexcept
    : Schema() {
    *this = ::std::move(from);
  }

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schema& operator=(Schema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Schema& default_instance();

  static inline const Schema* internal_default_instance() {
    return reinterpret_cast<const Schema*>(
               &_Schema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Schema& a, Schema& b) {
    a.Swap(&b);
  }
  inline void Swap(Schema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Schema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Schema* New() const final {
    return CreateMaybeMessage<Schema>(nullptr);
  }

  Schema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Schema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Schema";
  }
  protected:
  explicit Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 100,
    kTagsFieldNumber = 9,
    kJoinLeftSchemaIdFieldNumber = 32,
    kJoinTopSchemaIdFieldNumber = 33,
    kJoinRightSchemaIdFieldNumber = 34,
    kJoinBottomSchemaIdFieldNumber = 35,
    kUuidFieldNumber = 1,
    kSchemaIDFieldNumber = 2,
    kCaptionFieldNumber = 3,
    kAfbsFieldNumber = 101,
    kLogicSchemaFieldNumber = 200,
    kUfbSchemaFieldNumber = 201,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kUnitFieldNumber = 6,
    kBackgroundColorFieldNumber = 8,
    kExcludeFromBuildFieldNumber = 7,
    kJoinHorzPriorityFieldNumber = 31,
  };
  // repeated .Proto.Envelope layers = 100;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::Proto::Envelope* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
      mutable_layers();
  private:
  const ::Proto::Envelope& _internal_layers(int index) const;
  ::Proto::Envelope* _internal_add_layers();
  public:
  const ::Proto::Envelope& layers(int index) const;
  ::Proto::Envelope* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
      layers() const;

  // optional string tags = 9;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const std::string& tags() const;
  void set_tags(const std::string& value);
  void set_tags(std::string&& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  std::string* mutable_tags();
  std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // optional string joinLeftSchemaId = 32;
  bool has_joinleftschemaid() const;
  private:
  bool _internal_has_joinleftschemaid() const;
  public:
  void clear_joinleftschemaid();
  const std::string& joinleftschemaid() const;
  void set_joinleftschemaid(const std::string& value);
  void set_joinleftschemaid(std::string&& value);
  void set_joinleftschemaid(const char* value);
  void set_joinleftschemaid(const char* value, size_t size);
  std::string* mutable_joinleftschemaid();
  std::string* release_joinleftschemaid();
  void set_allocated_joinleftschemaid(std::string* joinleftschemaid);
  private:
  const std::string& _internal_joinleftschemaid() const;
  void _internal_set_joinleftschemaid(const std::string& value);
  std::string* _internal_mutable_joinleftschemaid();
  public:

  // optional string joinTopSchemaId = 33;
  bool has_jointopschemaid() const;
  private:
  bool _internal_has_jointopschemaid() const;
  public:
  void clear_jointopschemaid();
  const std::string& jointopschemaid() const;
  void set_jointopschemaid(const std::string& value);
  void set_jointopschemaid(std::string&& value);
  void set_jointopschemaid(const char* value);
  void set_jointopschemaid(const char* value, size_t size);
  std::string* mutable_jointopschemaid();
  std::string* release_jointopschemaid();
  void set_allocated_jointopschemaid(std::string* jointopschemaid);
  private:
  const std::string& _internal_jointopschemaid() const;
  void _internal_set_jointopschemaid(const std::string& value);
  std::string* _internal_mutable_jointopschemaid();
  public:

  // optional string joinRightSchemaId = 34;
  bool has_joinrightschemaid() const;
  private:
  bool _internal_has_joinrightschemaid() const;
  public:
  void clear_joinrightschemaid();
  const std::string& joinrightschemaid() const;
  void set_joinrightschemaid(const std::string& value);
  void set_joinrightschemaid(std::string&& value);
  void set_joinrightschemaid(const char* value);
  void set_joinrightschemaid(const char* value, size_t size);
  std::string* mutable_joinrightschemaid();
  std::string* release_joinrightschemaid();
  void set_allocated_joinrightschemaid(std::string* joinrightschemaid);
  private:
  const std::string& _internal_joinrightschemaid() const;
  void _internal_set_joinrightschemaid(const std::string& value);
  std::string* _internal_mutable_joinrightschemaid();
  public:

  // optional string joinBottomSchemaId = 35;
  bool has_joinbottomschemaid() const;
  private:
  bool _internal_has_joinbottomschemaid() const;
  public:
  void clear_joinbottomschemaid();
  const std::string& joinbottomschemaid() const;
  void set_joinbottomschemaid(const std::string& value);
  void set_joinbottomschemaid(std::string&& value);
  void set_joinbottomschemaid(const char* value);
  void set_joinbottomschemaid(const char* value, size_t size);
  std::string* mutable_joinbottomschemaid();
  std::string* release_joinbottomschemaid();
  void set_allocated_joinbottomschemaid(std::string* joinbottomschemaid);
  private:
  const std::string& _internal_joinbottomschemaid() const;
  void _internal_set_joinbottomschemaid(const std::string& value);
  std::string* _internal_mutable_joinbottomschemaid();
  public:

  // required .Proto.Uuid uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // required .Proto.wstring schemaID = 2;
  bool has_schemaid() const;
  private:
  bool _internal_has_schemaid() const;
  public:
  void clear_schemaid();
  const ::Proto::wstring& schemaid() const;
  ::Proto::wstring* release_schemaid();
  ::Proto::wstring* mutable_schemaid();
  void set_allocated_schemaid(::Proto::wstring* schemaid);
  private:
  const ::Proto::wstring& _internal_schemaid() const;
  ::Proto::wstring* _internal_mutable_schemaid();
  public:
  void unsafe_arena_set_allocated_schemaid(
      ::Proto::wstring* schemaid);
  ::Proto::wstring* unsafe_arena_release_schemaid();

  // required .Proto.wstring caption = 3;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::Proto::wstring& caption() const;
  ::Proto::wstring* release_caption();
  ::Proto::wstring* mutable_caption();
  void set_allocated_caption(::Proto::wstring* caption);
  private:
  const ::Proto::wstring& _internal_caption() const;
  ::Proto::wstring* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::Proto::wstring* caption);
  ::Proto::wstring* unsafe_arena_release_caption();

  // required .Proto.AfbElementCollection afbs = 101;
  bool has_afbs() const;
  private:
  bool _internal_has_afbs() const;
  public:
  void clear_afbs();
  const ::Proto::AfbElementCollection& afbs() const;
  ::Proto::AfbElementCollection* release_afbs();
  ::Proto::AfbElementCollection* mutable_afbs();
  void set_allocated_afbs(::Proto::AfbElementCollection* afbs);
  private:
  const ::Proto::AfbElementCollection& _internal_afbs() const;
  ::Proto::AfbElementCollection* _internal_mutable_afbs();
  public:
  void unsafe_arena_set_allocated_afbs(
      ::Proto::AfbElementCollection* afbs);
  ::Proto::AfbElementCollection* unsafe_arena_release_afbs();

  // optional .Proto.LogicSchema logic_schema = 200;
  bool has_logic_schema() const;
  private:
  bool _internal_has_logic_schema() const;
  public:
  void clear_logic_schema();
  const ::Proto::LogicSchema& logic_schema() const;
  ::Proto::LogicSchema* release_logic_schema();
  ::Proto::LogicSchema* mutable_logic_schema();
  void set_allocated_logic_schema(::Proto::LogicSchema* logic_schema);
  private:
  const ::Proto::LogicSchema& _internal_logic_schema() const;
  ::Proto::LogicSchema* _internal_mutable_logic_schema();
  public:
  void unsafe_arena_set_allocated_logic_schema(
      ::Proto::LogicSchema* logic_schema);
  ::Proto::LogicSchema* unsafe_arena_release_logic_schema();

  // optional .Proto.UfbSchema ufb_schema = 201;
  bool has_ufb_schema() const;
  private:
  bool _internal_has_ufb_schema() const;
  public:
  void clear_ufb_schema();
  const ::Proto::UfbSchema& ufb_schema() const;
  ::Proto::UfbSchema* release_ufb_schema();
  ::Proto::UfbSchema* mutable_ufb_schema();
  void set_allocated_ufb_schema(::Proto::UfbSchema* ufb_schema);
  private:
  const ::Proto::UfbSchema& _internal_ufb_schema() const;
  ::Proto::UfbSchema* _internal_mutable_ufb_schema();
  public:
  void unsafe_arena_set_allocated_ufb_schema(
      ::Proto::UfbSchema* ufb_schema);
  ::Proto::UfbSchema* unsafe_arena_release_ufb_schema();

  // required double width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // required double height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // required .Proto.SchemaUnit unit = 6;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  ::Proto::SchemaUnit unit() const;
  void set_unit(::Proto::SchemaUnit value);
  private:
  ::Proto::SchemaUnit _internal_unit() const;
  void _internal_set_unit(::Proto::SchemaUnit value);
  public:

  // optional uint32 backgroundColor = 8;
  bool has_backgroundcolor() const;
  private:
  bool _internal_has_backgroundcolor() const;
  public:
  void clear_backgroundcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 backgroundcolor() const;
  void set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_backgroundcolor() const;
  void _internal_set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool excludeFromBuild = 7 [default = false];
  bool has_excludefrombuild() const;
  private:
  bool _internal_has_excludefrombuild() const;
  public:
  void clear_excludefrombuild();
  bool excludefrombuild() const;
  void set_excludefrombuild(bool value);
  private:
  bool _internal_excludefrombuild() const;
  void _internal_set_excludefrombuild(bool value);
  public:

  // optional bool joinHorzPriority = 31 [default = false];
  bool has_joinhorzpriority() const;
  private:
  bool _internal_has_joinhorzpriority() const;
  public:
  void clear_joinhorzpriority();
  bool joinhorzpriority() const;
  void set_joinhorzpriority(bool value);
  private:
  bool _internal_joinhorzpriority() const;
  void _internal_set_joinhorzpriority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Schema)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope > layers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr joinleftschemaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jointopschemaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr joinrightschemaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr joinbottomschemaid_;
  ::Proto::Uuid* uuid_;
  ::Proto::wstring* schemaid_;
  ::Proto::wstring* caption_;
  ::Proto::AfbElementCollection* afbs_;
  ::Proto::LogicSchema* logic_schema_;
  ::Proto::UfbSchema* ufb_schema_;
  double width_;
  double height_;
  int unit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 backgroundcolor_;
  bool excludefrombuild_;
  bool joinhorzpriority_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class LogicSchema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LogicSchema) */ {
 public:
  inline LogicSchema() : LogicSchema(nullptr) {}
  virtual ~LogicSchema();

  LogicSchema(const LogicSchema& from);
  LogicSchema(LogicSchema&& from) noexcept
    : LogicSchema() {
    *this = ::std::move(from);
  }

  inline LogicSchema& operator=(const LogicSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicSchema& operator=(LogicSchema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicSchema& default_instance();

  static inline const LogicSchema* internal_default_instance() {
    return reinterpret_cast<const LogicSchema*>(
               &_LogicSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LogicSchema& a, LogicSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicSchema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicSchema* New() const final {
    return CreateMaybeMessage<LogicSchema>(nullptr);
  }

  LogicSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicSchema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicSchema& from);
  void MergeFrom(const LogicSchema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicSchema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LogicSchema";
  }
  protected:
  explicit LogicSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentidsFieldNumber = 1,
    kLmDescriptionFileFieldNumber = 3,
    kCounterFieldNumber = 2,
  };
  // repeated .Proto.wstring equipmentids = 1;
  int equipmentids_size() const;
  private:
  int _internal_equipmentids_size() const;
  public:
  void clear_equipmentids();
  ::Proto::wstring* mutable_equipmentids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >*
      mutable_equipmentids();
  private:
  const ::Proto::wstring& _internal_equipmentids(int index) const;
  ::Proto::wstring* _internal_add_equipmentids();
  public:
  const ::Proto::wstring& equipmentids(int index) const;
  ::Proto::wstring* add_equipmentids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >&
      equipmentids() const;

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  bool has_lmdescriptionfile() const;
  private:
  bool _internal_has_lmdescriptionfile() const;
  public:
  void clear_lmdescriptionfile();
  const std::string& lmdescriptionfile() const;
  void set_lmdescriptionfile(const std::string& value);
  void set_lmdescriptionfile(std::string&& value);
  void set_lmdescriptionfile(const char* value);
  void set_lmdescriptionfile(const char* value, size_t size);
  std::string* mutable_lmdescriptionfile();
  std::string* release_lmdescriptionfile();
  void set_allocated_lmdescriptionfile(std::string* lmdescriptionfile);
  private:
  const std::string& _internal_lmdescriptionfile() const;
  void _internal_set_lmdescriptionfile(const std::string& value);
  std::string* _internal_mutable_lmdescriptionfile();
  public:

  // optional int32 counter = 2 [default = 0];
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 counter() const;
  void set_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_counter() const;
  void _internal_set_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.LogicSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring > equipmentids_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_lmdescriptionfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmdescriptionfile_;
  ::PROTOBUF_NAMESPACE_ID::int32 counter_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class UfbSchema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.UfbSchema) */ {
 public:
  inline UfbSchema() : UfbSchema(nullptr) {}
  virtual ~UfbSchema();

  UfbSchema(const UfbSchema& from);
  UfbSchema(UfbSchema&& from) noexcept
    : UfbSchema() {
    *this = ::std::move(from);
  }

  inline UfbSchema& operator=(const UfbSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline UfbSchema& operator=(UfbSchema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UfbSchema& default_instance();

  static inline const UfbSchema* internal_default_instance() {
    return reinterpret_cast<const UfbSchema*>(
               &_UfbSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UfbSchema& a, UfbSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(UfbSchema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UfbSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UfbSchema* New() const final {
    return CreateMaybeMessage<UfbSchema>(nullptr);
  }

  UfbSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UfbSchema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UfbSchema& from);
  void MergeFrom(const UfbSchema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UfbSchema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.UfbSchema";
  }
  protected:
  explicit UfbSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kLmDescriptionFileFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // optional string description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  bool has_lmdescriptionfile() const;
  private:
  bool _internal_has_lmdescriptionfile() const;
  public:
  void clear_lmdescriptionfile();
  const std::string& lmdescriptionfile() const;
  void set_lmdescriptionfile(const std::string& value);
  void set_lmdescriptionfile(std::string&& value);
  void set_lmdescriptionfile(const char* value);
  void set_lmdescriptionfile(const char* value, size_t size);
  std::string* mutable_lmdescriptionfile();
  std::string* release_lmdescriptionfile();
  void set_allocated_lmdescriptionfile(std::string* lmdescriptionfile);
  private:
  const std::string& _internal_lmdescriptionfile() const;
  void _internal_set_lmdescriptionfile(const std::string& value);
  std::string* _internal_mutable_lmdescriptionfile();
  public:

  // optional int32 version = 2 [default = 1];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.UfbSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_lmdescriptionfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmdescriptionfile_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaLayer) */ {
 public:
  inline SchemaLayer() : SchemaLayer(nullptr) {}
  virtual ~SchemaLayer();

  SchemaLayer(const SchemaLayer& from);
  SchemaLayer(SchemaLayer&& from) noexcept
    : SchemaLayer() {
    *this = ::std::move(from);
  }

  inline SchemaLayer& operator=(const SchemaLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaLayer& operator=(SchemaLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaLayer& default_instance();

  static inline const SchemaLayer* internal_default_instance() {
    return reinterpret_cast<const SchemaLayer*>(
               &_SchemaLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SchemaLayer& a, SchemaLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaLayer* New() const final {
    return CreateMaybeMessage<SchemaLayer>(nullptr);
  }

  SchemaLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaLayer& from);
  void MergeFrom(const SchemaLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaLayer";
  }
  protected:
  explicit SchemaLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 15,
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kCompileFieldNumber = 3,
    kShowFieldNumber = 4,
    kPrintFieldNumber = 5,
  };
  // repeated .Proto.Envelope items = 15;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Proto::Envelope* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
      mutable_items();
  private:
  const ::Proto::Envelope& _internal_items(int index) const;
  ::Proto::Envelope* _internal_add_items();
  public:
  const ::Proto::Envelope& items(int index) const;
  ::Proto::Envelope* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
      items() const;

  // required .Proto.Uuid uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // required .Proto.wstring name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::Proto::wstring& name() const;
  ::Proto::wstring* release_name();
  ::Proto::wstring* mutable_name();
  void set_allocated_name(::Proto::wstring* name);
  private:
  const ::Proto::wstring& _internal_name() const;
  ::Proto::wstring* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::Proto::wstring* name);
  ::Proto::wstring* unsafe_arena_release_name();

  // required bool compile = 3;
  bool has_compile() const;
  private:
  bool _internal_has_compile() const;
  public:
  void clear_compile();
  bool compile() const;
  void set_compile(bool value);
  private:
  bool _internal_compile() const;
  void _internal_set_compile(bool value);
  public:

  // required bool show = 4;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  bool show() const;
  void set_show(bool value);
  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);
  public:

  // required bool print = 5;
  bool has_print() const;
  private:
  bool _internal_has_print() const;
  public:
  void clear_print();
  bool print() const;
  void set_print(bool value);
  private:
  bool _internal_print() const;
  void _internal_set_print(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaLayer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope > items_;
  ::Proto::Uuid* uuid_;
  ::Proto::wstring* name_;
  bool compile_;
  bool show_;
  bool print_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItem) */ {
 public:
  inline SchemaItem() : SchemaItem(nullptr) {}
  virtual ~SchemaItem();

  SchemaItem(const SchemaItem& from);
  SchemaItem(SchemaItem&& from) noexcept
    : SchemaItem() {
    *this = ::std::move(from);
  }

  inline SchemaItem& operator=(const SchemaItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItem& operator=(SchemaItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItem& default_instance();

  static inline const SchemaItem* internal_default_instance() {
    return reinterpret_cast<const SchemaItem*>(
               &_SchemaItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SchemaItem& a, SchemaItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItem* New() const final {
    return CreateMaybeMessage<SchemaItem>(nullptr);
  }

  SchemaItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItem& from);
  void MergeFrom(const SchemaItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItem";
  }
  protected:
  explicit SchemaItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickScriptFieldNumber = 7,
    kObjectNameFieldNumber = 9,
    kLabelFieldNumber = 14,
    kPreDrawScriptFieldNumber = 30,
    kUuidFieldNumber = 1,
    kPosRectImplFieldNumber = 10,
    kPosLineImplFieldNumber = 11,
    kPosConnectionImplFieldNumber = 12,
    kFblItemFieldNumber = 106,
    kFblItemRectFieldNumber = 107,
    kFblItemLineFieldNumber = 108,
    kRectFieldNumber = 116,
    kLineFieldNumber = 117,
    kPathFieldNumber = 118,
    kImageFieldNumber = 119,
    kFrameFieldNumber = 120,
    kIndicatorFieldNumber = 121,
    kSignalFieldNumber = 124,
    kInputSignalFieldNumber = 125,
    kOutputSignalFieldNumber = 126,
    kLinkFieldNumber = 127,
    kAfbFieldNumber = 128,
    kConstItemFieldNumber = 129,
    kConnectionItemFieldNumber = 130,
    kTransmitterItemFieldNumber = 131,
    kReceiverItemFieldNumber = 132,
    kInOutSignalFieldNumber = 133,
    kUfbFieldNumber = 134,
    kTerminatorFieldNumber = 135,
    kValueFieldNumber = 136,
    kImageValueFieldNumber = 137,
    kBusItemFieldNumber = 150,
    kBusComposerFieldNumber = 151,
    kBusExtractorFieldNumber = 152,
    kLoopbackItemFieldNumber = 155,
    kLoopbackSourceFieldNumber = 156,
    kLoopbackTargetFieldNumber = 157,
    kControlFieldNumber = 200,
    kPushButtonFieldNumber = 210,
    kLineEditFieldNumber = 211,
    kItemUnitFieldNumber = 4,
    kIsStaticFieldNumber = 2,
    kIsLockedFieldNumber = 3,
    kAcceptClickFieldNumber = 5,
    kIsCommentedFieldNumber = 8,
    kLabelPosFieldNumber = 15,
  };
  // optional string clickScript = 7;
  bool has_clickscript() const;
  private:
  bool _internal_has_clickscript() const;
  public:
  void clear_clickscript();
  const std::string& clickscript() const;
  void set_clickscript(const std::string& value);
  void set_clickscript(std::string&& value);
  void set_clickscript(const char* value);
  void set_clickscript(const char* value, size_t size);
  std::string* mutable_clickscript();
  std::string* release_clickscript();
  void set_allocated_clickscript(std::string* clickscript);
  private:
  const std::string& _internal_clickscript() const;
  void _internal_set_clickscript(const std::string& value);
  std::string* _internal_mutable_clickscript();
  public:

  // optional string objectName = 9;
  bool has_objectname() const;
  private:
  bool _internal_has_objectname() const;
  public:
  void clear_objectname();
  const std::string& objectname() const;
  void set_objectname(const std::string& value);
  void set_objectname(std::string&& value);
  void set_objectname(const char* value);
  void set_objectname(const char* value, size_t size);
  std::string* mutable_objectname();
  std::string* release_objectname();
  void set_allocated_objectname(std::string* objectname);
  private:
  const std::string& _internal_objectname() const;
  void _internal_set_objectname(const std::string& value);
  std::string* _internal_mutable_objectname();
  public:

  // optional string label = 14;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string preDrawScript = 30;
  bool has_predrawscript() const;
  private:
  bool _internal_has_predrawscript() const;
  public:
  void clear_predrawscript();
  const std::string& predrawscript() const;
  void set_predrawscript(const std::string& value);
  void set_predrawscript(std::string&& value);
  void set_predrawscript(const char* value);
  void set_predrawscript(const char* value, size_t size);
  std::string* mutable_predrawscript();
  std::string* release_predrawscript();
  void set_allocated_predrawscript(std::string* predrawscript);
  private:
  const std::string& _internal_predrawscript() const;
  void _internal_set_predrawscript(const std::string& value);
  std::string* _internal_mutable_predrawscript();
  public:

  // required .Proto.Uuid uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  bool has_posrectimpl() const;
  private:
  bool _internal_has_posrectimpl() const;
  public:
  void clear_posrectimpl();
  const ::Proto::PosRectImpl& posrectimpl() const;
  ::Proto::PosRectImpl* release_posrectimpl();
  ::Proto::PosRectImpl* mutable_posrectimpl();
  void set_allocated_posrectimpl(::Proto::PosRectImpl* posrectimpl);
  private:
  const ::Proto::PosRectImpl& _internal_posrectimpl() const;
  ::Proto::PosRectImpl* _internal_mutable_posrectimpl();
  public:
  void unsafe_arena_set_allocated_posrectimpl(
      ::Proto::PosRectImpl* posrectimpl);
  ::Proto::PosRectImpl* unsafe_arena_release_posrectimpl();

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  bool has_poslineimpl() const;
  private:
  bool _internal_has_poslineimpl() const;
  public:
  void clear_poslineimpl();
  const ::Proto::PosLineImpl& poslineimpl() const;
  ::Proto::PosLineImpl* release_poslineimpl();
  ::Proto::PosLineImpl* mutable_poslineimpl();
  void set_allocated_poslineimpl(::Proto::PosLineImpl* poslineimpl);
  private:
  const ::Proto::PosLineImpl& _internal_poslineimpl() const;
  ::Proto::PosLineImpl* _internal_mutable_poslineimpl();
  public:
  void unsafe_arena_set_allocated_poslineimpl(
      ::Proto::PosLineImpl* poslineimpl);
  ::Proto::PosLineImpl* unsafe_arena_release_poslineimpl();

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  bool has_posconnectionimpl() const;
  private:
  bool _internal_has_posconnectionimpl() const;
  public:
  void clear_posconnectionimpl();
  const ::Proto::PosConnectionImpl& posconnectionimpl() const;
  ::Proto::PosConnectionImpl* release_posconnectionimpl();
  ::Proto::PosConnectionImpl* mutable_posconnectionimpl();
  void set_allocated_posconnectionimpl(::Proto::PosConnectionImpl* posconnectionimpl);
  private:
  const ::Proto::PosConnectionImpl& _internal_posconnectionimpl() const;
  ::Proto::PosConnectionImpl* _internal_mutable_posconnectionimpl();
  public:
  void unsafe_arena_set_allocated_posconnectionimpl(
      ::Proto::PosConnectionImpl* posconnectionimpl);
  ::Proto::PosConnectionImpl* unsafe_arena_release_posconnectionimpl();

  // optional .Proto.FblItem FblItem = 106;
  bool has_fblitem() const;
  private:
  bool _internal_has_fblitem() const;
  public:
  void clear_fblitem();
  const ::Proto::FblItem& fblitem() const;
  ::Proto::FblItem* release_fblitem();
  ::Proto::FblItem* mutable_fblitem();
  void set_allocated_fblitem(::Proto::FblItem* fblitem);
  private:
  const ::Proto::FblItem& _internal_fblitem() const;
  ::Proto::FblItem* _internal_mutable_fblitem();
  public:
  void unsafe_arena_set_allocated_fblitem(
      ::Proto::FblItem* fblitem);
  ::Proto::FblItem* unsafe_arena_release_fblitem();

  // optional .Proto.FblItemRect FblItemRect = 107;
  bool has_fblitemrect() const;
  private:
  bool _internal_has_fblitemrect() const;
  public:
  void clear_fblitemrect();
  const ::Proto::FblItemRect& fblitemrect() const;
  ::Proto::FblItemRect* release_fblitemrect();
  ::Proto::FblItemRect* mutable_fblitemrect();
  void set_allocated_fblitemrect(::Proto::FblItemRect* fblitemrect);
  private:
  const ::Proto::FblItemRect& _internal_fblitemrect() const;
  ::Proto::FblItemRect* _internal_mutable_fblitemrect();
  public:
  void unsafe_arena_set_allocated_fblitemrect(
      ::Proto::FblItemRect* fblitemrect);
  ::Proto::FblItemRect* unsafe_arena_release_fblitemrect();

  // optional .Proto.FblItemLine FblItemLine = 108;
  bool has_fblitemline() const;
  private:
  bool _internal_has_fblitemline() const;
  public:
  void clear_fblitemline();
  const ::Proto::FblItemLine& fblitemline() const;
  ::Proto::FblItemLine* release_fblitemline();
  ::Proto::FblItemLine* mutable_fblitemline();
  void set_allocated_fblitemline(::Proto::FblItemLine* fblitemline);
  private:
  const ::Proto::FblItemLine& _internal_fblitemline() const;
  ::Proto::FblItemLine* _internal_mutable_fblitemline();
  public:
  void unsafe_arena_set_allocated_fblitemline(
      ::Proto::FblItemLine* fblitemline);
  ::Proto::FblItemLine* unsafe_arena_release_fblitemline();

  // optional .Proto.SchemaItemRect Rect = 116;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::Proto::SchemaItemRect& rect() const;
  ::Proto::SchemaItemRect* release_rect();
  ::Proto::SchemaItemRect* mutable_rect();
  void set_allocated_rect(::Proto::SchemaItemRect* rect);
  private:
  const ::Proto::SchemaItemRect& _internal_rect() const;
  ::Proto::SchemaItemRect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::Proto::SchemaItemRect* rect);
  ::Proto::SchemaItemRect* unsafe_arena_release_rect();

  // optional .Proto.SchemaItemLine Line = 117;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const ::Proto::SchemaItemLine& line() const;
  ::Proto::SchemaItemLine* release_line();
  ::Proto::SchemaItemLine* mutable_line();
  void set_allocated_line(::Proto::SchemaItemLine* line);
  private:
  const ::Proto::SchemaItemLine& _internal_line() const;
  ::Proto::SchemaItemLine* _internal_mutable_line();
  public:
  void unsafe_arena_set_allocated_line(
      ::Proto::SchemaItemLine* line);
  ::Proto::SchemaItemLine* unsafe_arena_release_line();

  // optional .Proto.SchemaItemPath Path = 118;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::Proto::SchemaItemPath& path() const;
  ::Proto::SchemaItemPath* release_path();
  ::Proto::SchemaItemPath* mutable_path();
  void set_allocated_path(::Proto::SchemaItemPath* path);
  private:
  const ::Proto::SchemaItemPath& _internal_path() const;
  ::Proto::SchemaItemPath* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::Proto::SchemaItemPath* path);
  ::Proto::SchemaItemPath* unsafe_arena_release_path();

  // optional .Proto.SchemaItemImage Image = 119;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::Proto::SchemaItemImage& image() const;
  ::Proto::SchemaItemImage* release_image();
  ::Proto::SchemaItemImage* mutable_image();
  void set_allocated_image(::Proto::SchemaItemImage* image);
  private:
  const ::Proto::SchemaItemImage& _internal_image() const;
  ::Proto::SchemaItemImage* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::Proto::SchemaItemImage* image);
  ::Proto::SchemaItemImage* unsafe_arena_release_image();

  // optional .Proto.SchemaItemFrame Frame = 120;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::Proto::SchemaItemFrame& frame() const;
  ::Proto::SchemaItemFrame* release_frame();
  ::Proto::SchemaItemFrame* mutable_frame();
  void set_allocated_frame(::Proto::SchemaItemFrame* frame);
  private:
  const ::Proto::SchemaItemFrame& _internal_frame() const;
  ::Proto::SchemaItemFrame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::Proto::SchemaItemFrame* frame);
  ::Proto::SchemaItemFrame* unsafe_arena_release_frame();

  // optional .Proto.SchemaItemIndicator Indicator = 121;
  bool has_indicator() const;
  private:
  bool _internal_has_indicator() const;
  public:
  void clear_indicator();
  const ::Proto::SchemaItemIndicator& indicator() const;
  ::Proto::SchemaItemIndicator* release_indicator();
  ::Proto::SchemaItemIndicator* mutable_indicator();
  void set_allocated_indicator(::Proto::SchemaItemIndicator* indicator);
  private:
  const ::Proto::SchemaItemIndicator& _internal_indicator() const;
  ::Proto::SchemaItemIndicator* _internal_mutable_indicator();
  public:
  void unsafe_arena_set_allocated_indicator(
      ::Proto::SchemaItemIndicator* indicator);
  ::Proto::SchemaItemIndicator* unsafe_arena_release_indicator();

  // optional .Proto.SchemaItemSignal Signal = 124;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  const ::Proto::SchemaItemSignal& signal() const;
  ::Proto::SchemaItemSignal* release_signal();
  ::Proto::SchemaItemSignal* mutable_signal();
  void set_allocated_signal(::Proto::SchemaItemSignal* signal);
  private:
  const ::Proto::SchemaItemSignal& _internal_signal() const;
  ::Proto::SchemaItemSignal* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::Proto::SchemaItemSignal* signal);
  ::Proto::SchemaItemSignal* unsafe_arena_release_signal();

  // optional .Proto.SchemaItemInput InputSignal = 125;
  bool has_inputsignal() const;
  private:
  bool _internal_has_inputsignal() const;
  public:
  void clear_inputsignal();
  const ::Proto::SchemaItemInput& inputsignal() const;
  ::Proto::SchemaItemInput* release_inputsignal();
  ::Proto::SchemaItemInput* mutable_inputsignal();
  void set_allocated_inputsignal(::Proto::SchemaItemInput* inputsignal);
  private:
  const ::Proto::SchemaItemInput& _internal_inputsignal() const;
  ::Proto::SchemaItemInput* _internal_mutable_inputsignal();
  public:
  void unsafe_arena_set_allocated_inputsignal(
      ::Proto::SchemaItemInput* inputsignal);
  ::Proto::SchemaItemInput* unsafe_arena_release_inputsignal();

  // optional .Proto.SchemaItemOutput OutputSignal = 126;
  bool has_outputsignal() const;
  private:
  bool _internal_has_outputsignal() const;
  public:
  void clear_outputsignal();
  const ::Proto::SchemaItemOutput& outputsignal() const;
  ::Proto::SchemaItemOutput* release_outputsignal();
  ::Proto::SchemaItemOutput* mutable_outputsignal();
  void set_allocated_outputsignal(::Proto::SchemaItemOutput* outputsignal);
  private:
  const ::Proto::SchemaItemOutput& _internal_outputsignal() const;
  ::Proto::SchemaItemOutput* _internal_mutable_outputsignal();
  public:
  void unsafe_arena_set_allocated_outputsignal(
      ::Proto::SchemaItemOutput* outputsignal);
  ::Proto::SchemaItemOutput* unsafe_arena_release_outputsignal();

  // optional .Proto.SchemaItemLink Link = 127;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::Proto::SchemaItemLink& link() const;
  ::Proto::SchemaItemLink* release_link();
  ::Proto::SchemaItemLink* mutable_link();
  void set_allocated_link(::Proto::SchemaItemLink* link);
  private:
  const ::Proto::SchemaItemLink& _internal_link() const;
  ::Proto::SchemaItemLink* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::Proto::SchemaItemLink* link);
  ::Proto::SchemaItemLink* unsafe_arena_release_link();

  // optional .Proto.SchemaItemAfb Afb = 128;
  bool has_afb() const;
  private:
  bool _internal_has_afb() const;
  public:
  void clear_afb();
  const ::Proto::SchemaItemAfb& afb() const;
  ::Proto::SchemaItemAfb* release_afb();
  ::Proto::SchemaItemAfb* mutable_afb();
  void set_allocated_afb(::Proto::SchemaItemAfb* afb);
  private:
  const ::Proto::SchemaItemAfb& _internal_afb() const;
  ::Proto::SchemaItemAfb* _internal_mutable_afb();
  public:
  void unsafe_arena_set_allocated_afb(
      ::Proto::SchemaItemAfb* afb);
  ::Proto::SchemaItemAfb* unsafe_arena_release_afb();

  // optional .Proto.SchemaItemConst ConstItem = 129;
  bool has_constitem() const;
  private:
  bool _internal_has_constitem() const;
  public:
  void clear_constitem();
  const ::Proto::SchemaItemConst& constitem() const;
  ::Proto::SchemaItemConst* release_constitem();
  ::Proto::SchemaItemConst* mutable_constitem();
  void set_allocated_constitem(::Proto::SchemaItemConst* constitem);
  private:
  const ::Proto::SchemaItemConst& _internal_constitem() const;
  ::Proto::SchemaItemConst* _internal_mutable_constitem();
  public:
  void unsafe_arena_set_allocated_constitem(
      ::Proto::SchemaItemConst* constitem);
  ::Proto::SchemaItemConst* unsafe_arena_release_constitem();

  // optional .Proto.SchemaItemConnection ConnectionItem = 130;
  bool has_connectionitem() const;
  private:
  bool _internal_has_connectionitem() const;
  public:
  void clear_connectionitem();
  const ::Proto::SchemaItemConnection& connectionitem() const;
  ::Proto::SchemaItemConnection* release_connectionitem();
  ::Proto::SchemaItemConnection* mutable_connectionitem();
  void set_allocated_connectionitem(::Proto::SchemaItemConnection* connectionitem);
  private:
  const ::Proto::SchemaItemConnection& _internal_connectionitem() const;
  ::Proto::SchemaItemConnection* _internal_mutable_connectionitem();
  public:
  void unsafe_arena_set_allocated_connectionitem(
      ::Proto::SchemaItemConnection* connectionitem);
  ::Proto::SchemaItemConnection* unsafe_arena_release_connectionitem();

  // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
  bool has_transmitteritem() const;
  private:
  bool _internal_has_transmitteritem() const;
  public:
  void clear_transmitteritem();
  const ::Proto::SchemaItemTransmitter& transmitteritem() const;
  ::Proto::SchemaItemTransmitter* release_transmitteritem();
  ::Proto::SchemaItemTransmitter* mutable_transmitteritem();
  void set_allocated_transmitteritem(::Proto::SchemaItemTransmitter* transmitteritem);
  private:
  const ::Proto::SchemaItemTransmitter& _internal_transmitteritem() const;
  ::Proto::SchemaItemTransmitter* _internal_mutable_transmitteritem();
  public:
  void unsafe_arena_set_allocated_transmitteritem(
      ::Proto::SchemaItemTransmitter* transmitteritem);
  ::Proto::SchemaItemTransmitter* unsafe_arena_release_transmitteritem();

  // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
  bool has_receiveritem() const;
  private:
  bool _internal_has_receiveritem() const;
  public:
  void clear_receiveritem();
  const ::Proto::SchemaItemReceiver& receiveritem() const;
  ::Proto::SchemaItemReceiver* release_receiveritem();
  ::Proto::SchemaItemReceiver* mutable_receiveritem();
  void set_allocated_receiveritem(::Proto::SchemaItemReceiver* receiveritem);
  private:
  const ::Proto::SchemaItemReceiver& _internal_receiveritem() const;
  ::Proto::SchemaItemReceiver* _internal_mutable_receiveritem();
  public:
  void unsafe_arena_set_allocated_receiveritem(
      ::Proto::SchemaItemReceiver* receiveritem);
  ::Proto::SchemaItemReceiver* unsafe_arena_release_receiveritem();

  // optional .Proto.SchemaItemInOut InOutSignal = 133;
  bool has_inoutsignal() const;
  private:
  bool _internal_has_inoutsignal() const;
  public:
  void clear_inoutsignal();
  const ::Proto::SchemaItemInOut& inoutsignal() const;
  ::Proto::SchemaItemInOut* release_inoutsignal();
  ::Proto::SchemaItemInOut* mutable_inoutsignal();
  void set_allocated_inoutsignal(::Proto::SchemaItemInOut* inoutsignal);
  private:
  const ::Proto::SchemaItemInOut& _internal_inoutsignal() const;
  ::Proto::SchemaItemInOut* _internal_mutable_inoutsignal();
  public:
  void unsafe_arena_set_allocated_inoutsignal(
      ::Proto::SchemaItemInOut* inoutsignal);
  ::Proto::SchemaItemInOut* unsafe_arena_release_inoutsignal();

  // optional .Proto.SchemaItemUfb ufb = 134;
  bool has_ufb() const;
  private:
  bool _internal_has_ufb() const;
  public:
  void clear_ufb();
  const ::Proto::SchemaItemUfb& ufb() const;
  ::Proto::SchemaItemUfb* release_ufb();
  ::Proto::SchemaItemUfb* mutable_ufb();
  void set_allocated_ufb(::Proto::SchemaItemUfb* ufb);
  private:
  const ::Proto::SchemaItemUfb& _internal_ufb() const;
  ::Proto::SchemaItemUfb* _internal_mutable_ufb();
  public:
  void unsafe_arena_set_allocated_ufb(
      ::Proto::SchemaItemUfb* ufb);
  ::Proto::SchemaItemUfb* unsafe_arena_release_ufb();

  // optional .Proto.SchemaItemTerminator terminator = 135;
  bool has_terminator() const;
  private:
  bool _internal_has_terminator() const;
  public:
  void clear_terminator();
  const ::Proto::SchemaItemTerminator& terminator() const;
  ::Proto::SchemaItemTerminator* release_terminator();
  ::Proto::SchemaItemTerminator* mutable_terminator();
  void set_allocated_terminator(::Proto::SchemaItemTerminator* terminator);
  private:
  const ::Proto::SchemaItemTerminator& _internal_terminator() const;
  ::Proto::SchemaItemTerminator* _internal_mutable_terminator();
  public:
  void unsafe_arena_set_allocated_terminator(
      ::Proto::SchemaItemTerminator* terminator);
  ::Proto::SchemaItemTerminator* unsafe_arena_release_terminator();

  // optional .Proto.SchemaItemValue Value = 136;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Proto::SchemaItemValue& value() const;
  ::Proto::SchemaItemValue* release_value();
  ::Proto::SchemaItemValue* mutable_value();
  void set_allocated_value(::Proto::SchemaItemValue* value);
  private:
  const ::Proto::SchemaItemValue& _internal_value() const;
  ::Proto::SchemaItemValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Proto::SchemaItemValue* value);
  ::Proto::SchemaItemValue* unsafe_arena_release_value();

  // optional .Proto.SchemaItemImageValue ImageValue = 137;
  bool has_imagevalue() const;
  private:
  bool _internal_has_imagevalue() const;
  public:
  void clear_imagevalue();
  const ::Proto::SchemaItemImageValue& imagevalue() const;
  ::Proto::SchemaItemImageValue* release_imagevalue();
  ::Proto::SchemaItemImageValue* mutable_imagevalue();
  void set_allocated_imagevalue(::Proto::SchemaItemImageValue* imagevalue);
  private:
  const ::Proto::SchemaItemImageValue& _internal_imagevalue() const;
  ::Proto::SchemaItemImageValue* _internal_mutable_imagevalue();
  public:
  void unsafe_arena_set_allocated_imagevalue(
      ::Proto::SchemaItemImageValue* imagevalue);
  ::Proto::SchemaItemImageValue* unsafe_arena_release_imagevalue();

  // optional .Proto.SchemaItemBus BusItem = 150;
  bool has_busitem() const;
  private:
  bool _internal_has_busitem() const;
  public:
  void clear_busitem();
  const ::Proto::SchemaItemBus& busitem() const;
  ::Proto::SchemaItemBus* release_busitem();
  ::Proto::SchemaItemBus* mutable_busitem();
  void set_allocated_busitem(::Proto::SchemaItemBus* busitem);
  private:
  const ::Proto::SchemaItemBus& _internal_busitem() const;
  ::Proto::SchemaItemBus* _internal_mutable_busitem();
  public:
  void unsafe_arena_set_allocated_busitem(
      ::Proto::SchemaItemBus* busitem);
  ::Proto::SchemaItemBus* unsafe_arena_release_busitem();

  // optional .Proto.SchemaItemBusComposer BusComposer = 151;
  bool has_buscomposer() const;
  private:
  bool _internal_has_buscomposer() const;
  public:
  void clear_buscomposer();
  const ::Proto::SchemaItemBusComposer& buscomposer() const;
  ::Proto::SchemaItemBusComposer* release_buscomposer();
  ::Proto::SchemaItemBusComposer* mutable_buscomposer();
  void set_allocated_buscomposer(::Proto::SchemaItemBusComposer* buscomposer);
  private:
  const ::Proto::SchemaItemBusComposer& _internal_buscomposer() const;
  ::Proto::SchemaItemBusComposer* _internal_mutable_buscomposer();
  public:
  void unsafe_arena_set_allocated_buscomposer(
      ::Proto::SchemaItemBusComposer* buscomposer);
  ::Proto::SchemaItemBusComposer* unsafe_arena_release_buscomposer();

  // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
  bool has_busextractor() const;
  private:
  bool _internal_has_busextractor() const;
  public:
  void clear_busextractor();
  const ::Proto::SchemaItemBusExtractor& busextractor() const;
  ::Proto::SchemaItemBusExtractor* release_busextractor();
  ::Proto::SchemaItemBusExtractor* mutable_busextractor();
  void set_allocated_busextractor(::Proto::SchemaItemBusExtractor* busextractor);
  private:
  const ::Proto::SchemaItemBusExtractor& _internal_busextractor() const;
  ::Proto::SchemaItemBusExtractor* _internal_mutable_busextractor();
  public:
  void unsafe_arena_set_allocated_busextractor(
      ::Proto::SchemaItemBusExtractor* busextractor);
  ::Proto::SchemaItemBusExtractor* unsafe_arena_release_busextractor();

  // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
  bool has_loopbackitem() const;
  private:
  bool _internal_has_loopbackitem() const;
  public:
  void clear_loopbackitem();
  const ::Proto::SchemaItemLoopback& loopbackitem() const;
  ::Proto::SchemaItemLoopback* release_loopbackitem();
  ::Proto::SchemaItemLoopback* mutable_loopbackitem();
  void set_allocated_loopbackitem(::Proto::SchemaItemLoopback* loopbackitem);
  private:
  const ::Proto::SchemaItemLoopback& _internal_loopbackitem() const;
  ::Proto::SchemaItemLoopback* _internal_mutable_loopbackitem();
  public:
  void unsafe_arena_set_allocated_loopbackitem(
      ::Proto::SchemaItemLoopback* loopbackitem);
  ::Proto::SchemaItemLoopback* unsafe_arena_release_loopbackitem();

  // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
  bool has_loopbacksource() const;
  private:
  bool _internal_has_loopbacksource() const;
  public:
  void clear_loopbacksource();
  const ::Proto::SchemaItemLoopbackSource& loopbacksource() const;
  ::Proto::SchemaItemLoopbackSource* release_loopbacksource();
  ::Proto::SchemaItemLoopbackSource* mutable_loopbacksource();
  void set_allocated_loopbacksource(::Proto::SchemaItemLoopbackSource* loopbacksource);
  private:
  const ::Proto::SchemaItemLoopbackSource& _internal_loopbacksource() const;
  ::Proto::SchemaItemLoopbackSource* _internal_mutable_loopbacksource();
  public:
  void unsafe_arena_set_allocated_loopbacksource(
      ::Proto::SchemaItemLoopbackSource* loopbacksource);
  ::Proto::SchemaItemLoopbackSource* unsafe_arena_release_loopbacksource();

  // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
  bool has_loopbacktarget() const;
  private:
  bool _internal_has_loopbacktarget() const;
  public:
  void clear_loopbacktarget();
  const ::Proto::SchemaItemLoopbackTarget& loopbacktarget() const;
  ::Proto::SchemaItemLoopbackTarget* release_loopbacktarget();
  ::Proto::SchemaItemLoopbackTarget* mutable_loopbacktarget();
  void set_allocated_loopbacktarget(::Proto::SchemaItemLoopbackTarget* loopbacktarget);
  private:
  const ::Proto::SchemaItemLoopbackTarget& _internal_loopbacktarget() const;
  ::Proto::SchemaItemLoopbackTarget* _internal_mutable_loopbacktarget();
  public:
  void unsafe_arena_set_allocated_loopbacktarget(
      ::Proto::SchemaItemLoopbackTarget* loopbacktarget);
  ::Proto::SchemaItemLoopbackTarget* unsafe_arena_release_loopbacktarget();

  // optional .Proto.SchemaItemControl control = 200;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::Proto::SchemaItemControl& control() const;
  ::Proto::SchemaItemControl* release_control();
  ::Proto::SchemaItemControl* mutable_control();
  void set_allocated_control(::Proto::SchemaItemControl* control);
  private:
  const ::Proto::SchemaItemControl& _internal_control() const;
  ::Proto::SchemaItemControl* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::Proto::SchemaItemControl* control);
  ::Proto::SchemaItemControl* unsafe_arena_release_control();

  // optional .Proto.SchemaItemPushButton pushButton = 210;
  bool has_pushbutton() const;
  private:
  bool _internal_has_pushbutton() const;
  public:
  void clear_pushbutton();
  const ::Proto::SchemaItemPushButton& pushbutton() const;
  ::Proto::SchemaItemPushButton* release_pushbutton();
  ::Proto::SchemaItemPushButton* mutable_pushbutton();
  void set_allocated_pushbutton(::Proto::SchemaItemPushButton* pushbutton);
  private:
  const ::Proto::SchemaItemPushButton& _internal_pushbutton() const;
  ::Proto::SchemaItemPushButton* _internal_mutable_pushbutton();
  public:
  void unsafe_arena_set_allocated_pushbutton(
      ::Proto::SchemaItemPushButton* pushbutton);
  ::Proto::SchemaItemPushButton* unsafe_arena_release_pushbutton();

  // optional .Proto.SchemaItemLineEdit lineEdit = 211;
  bool has_lineedit() const;
  private:
  bool _internal_has_lineedit() const;
  public:
  void clear_lineedit();
  const ::Proto::SchemaItemLineEdit& lineedit() const;
  ::Proto::SchemaItemLineEdit* release_lineedit();
  ::Proto::SchemaItemLineEdit* mutable_lineedit();
  void set_allocated_lineedit(::Proto::SchemaItemLineEdit* lineedit);
  private:
  const ::Proto::SchemaItemLineEdit& _internal_lineedit() const;
  ::Proto::SchemaItemLineEdit* _internal_mutable_lineedit();
  public:
  void unsafe_arena_set_allocated_lineedit(
      ::Proto::SchemaItemLineEdit* lineedit);
  ::Proto::SchemaItemLineEdit* unsafe_arena_release_lineedit();

  // required .Proto.SchemaUnit itemUnit = 4;
  bool has_itemunit() const;
  private:
  bool _internal_has_itemunit() const;
  public:
  void clear_itemunit();
  ::Proto::SchemaUnit itemunit() const;
  void set_itemunit(::Proto::SchemaUnit value);
  private:
  ::Proto::SchemaUnit _internal_itemunit() const;
  void _internal_set_itemunit(::Proto::SchemaUnit value);
  public:

  // required bool isStatic = 2;
  bool has_isstatic() const;
  private:
  bool _internal_has_isstatic() const;
  public:
  void clear_isstatic();
  bool isstatic() const;
  void set_isstatic(bool value);
  private:
  bool _internal_isstatic() const;
  void _internal_set_isstatic(bool value);
  public:

  // required bool isLocked = 3;
  bool has_islocked() const;
  private:
  bool _internal_has_islocked() const;
  public:
  void clear_islocked();
  bool islocked() const;
  void set_islocked(bool value);
  private:
  bool _internal_islocked() const;
  void _internal_set_islocked(bool value);
  public:

  // optional bool acceptClick = 5 [default = false];
  bool has_acceptclick() const;
  private:
  bool _internal_has_acceptclick() const;
  public:
  void clear_acceptclick();
  bool acceptclick() const;
  void set_acceptclick(bool value);
  private:
  bool _internal_acceptclick() const;
  void _internal_set_acceptclick(bool value);
  public:

  // optional bool isCommented = 8 [default = false];
  bool has_iscommented() const;
  private:
  bool _internal_has_iscommented() const;
  public:
  void clear_iscommented();
  bool iscommented() const;
  void set_iscommented(bool value);
  private:
  bool _internal_iscommented() const;
  void _internal_set_iscommented(bool value);
  public:

  // optional int32 labelPos = 15 [default = 2];
  bool has_labelpos() const;
  private:
  bool _internal_has_labelpos() const;
  public:
  void clear_labelpos();
  ::PROTOBUF_NAMESPACE_ID::int32 labelpos() const;
  void set_labelpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_labelpos() const;
  void _internal_set_labelpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clickscript_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predrawscript_;
  ::Proto::Uuid* uuid_;
  ::Proto::PosRectImpl* posrectimpl_;
  ::Proto::PosLineImpl* poslineimpl_;
  ::Proto::PosConnectionImpl* posconnectionimpl_;
  ::Proto::FblItem* fblitem_;
  ::Proto::FblItemRect* fblitemrect_;
  ::Proto::FblItemLine* fblitemline_;
  ::Proto::SchemaItemRect* rect_;
  ::Proto::SchemaItemLine* line_;
  ::Proto::SchemaItemPath* path_;
  ::Proto::SchemaItemImage* image_;
  ::Proto::SchemaItemFrame* frame_;
  ::Proto::SchemaItemIndicator* indicator_;
  ::Proto::SchemaItemSignal* signal_;
  ::Proto::SchemaItemInput* inputsignal_;
  ::Proto::SchemaItemOutput* outputsignal_;
  ::Proto::SchemaItemLink* link_;
  ::Proto::SchemaItemAfb* afb_;
  ::Proto::SchemaItemConst* constitem_;
  ::Proto::SchemaItemConnection* connectionitem_;
  ::Proto::SchemaItemTransmitter* transmitteritem_;
  ::Proto::SchemaItemReceiver* receiveritem_;
  ::Proto::SchemaItemInOut* inoutsignal_;
  ::Proto::SchemaItemUfb* ufb_;
  ::Proto::SchemaItemTerminator* terminator_;
  ::Proto::SchemaItemValue* value_;
  ::Proto::SchemaItemImageValue* imagevalue_;
  ::Proto::SchemaItemBus* busitem_;
  ::Proto::SchemaItemBusComposer* buscomposer_;
  ::Proto::SchemaItemBusExtractor* busextractor_;
  ::Proto::SchemaItemLoopback* loopbackitem_;
  ::Proto::SchemaItemLoopbackSource* loopbacksource_;
  ::Proto::SchemaItemLoopbackTarget* loopbacktarget_;
  ::Proto::SchemaItemControl* control_;
  ::Proto::SchemaItemPushButton* pushbutton_;
  ::Proto::SchemaItemLineEdit* lineedit_;
  int itemunit_;
  bool isstatic_;
  bool islocked_;
  bool acceptclick_;
  bool iscommented_;
  ::PROTOBUF_NAMESPACE_ID::int32 labelpos_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class PosRectImpl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PosRectImpl) */ {
 public:
  inline PosRectImpl() : PosRectImpl(nullptr) {}
  virtual ~PosRectImpl();

  PosRectImpl(const PosRectImpl& from);
  PosRectImpl(PosRectImpl&& from) noexcept
    : PosRectImpl() {
    *this = ::std::move(from);
  }

  inline PosRectImpl& operator=(const PosRectImpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosRectImpl& operator=(PosRectImpl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosRectImpl& default_instance();

  static inline const PosRectImpl* internal_default_instance() {
    return reinterpret_cast<const PosRectImpl*>(
               &_PosRectImpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PosRectImpl& a, PosRectImpl& b) {
    a.Swap(&b);
  }
  inline void Swap(PosRectImpl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosRectImpl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosRectImpl* New() const final {
    return CreateMaybeMessage<PosRectImpl>(nullptr);
  }

  PosRectImpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosRectImpl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosRectImpl& from);
  void MergeFrom(const PosRectImpl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosRectImpl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PosRectImpl";
  }
  protected:
  explicit PosRectImpl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftDocPtFieldNumber = 1,
    kTopDocPtFieldNumber = 2,
    kWidthDocPtFieldNumber = 3,
    kHeightDocPtFieldNumber = 4,
  };
  // required double leftDocPt = 1;
  bool has_leftdocpt() const;
  private:
  bool _internal_has_leftdocpt() const;
  public:
  void clear_leftdocpt();
  double leftdocpt() const;
  void set_leftdocpt(double value);
  private:
  double _internal_leftdocpt() const;
  void _internal_set_leftdocpt(double value);
  public:

  // required double topDocPt = 2;
  bool has_topdocpt() const;
  private:
  bool _internal_has_topdocpt() const;
  public:
  void clear_topdocpt();
  double topdocpt() const;
  void set_topdocpt(double value);
  private:
  double _internal_topdocpt() const;
  void _internal_set_topdocpt(double value);
  public:

  // required double widthDocPt = 3;
  bool has_widthdocpt() const;
  private:
  bool _internal_has_widthdocpt() const;
  public:
  void clear_widthdocpt();
  double widthdocpt() const;
  void set_widthdocpt(double value);
  private:
  double _internal_widthdocpt() const;
  void _internal_set_widthdocpt(double value);
  public:

  // required double heightDocPt = 4;
  bool has_heightdocpt() const;
  private:
  bool _internal_has_heightdocpt() const;
  public:
  void clear_heightdocpt();
  double heightdocpt() const;
  void set_heightdocpt(double value);
  private:
  double _internal_heightdocpt() const;
  void _internal_set_heightdocpt(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.PosRectImpl)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double leftdocpt_;
  double topdocpt_;
  double widthdocpt_;
  double heightdocpt_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class PosLineImpl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PosLineImpl) */ {
 public:
  inline PosLineImpl() : PosLineImpl(nullptr) {}
  virtual ~PosLineImpl();

  PosLineImpl(const PosLineImpl& from);
  PosLineImpl(PosLineImpl&& from) noexcept
    : PosLineImpl() {
    *this = ::std::move(from);
  }

  inline PosLineImpl& operator=(const PosLineImpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosLineImpl& operator=(PosLineImpl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosLineImpl& default_instance();

  static inline const PosLineImpl* internal_default_instance() {
    return reinterpret_cast<const PosLineImpl*>(
               &_PosLineImpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PosLineImpl& a, PosLineImpl& b) {
    a.Swap(&b);
  }
  inline void Swap(PosLineImpl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosLineImpl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosLineImpl* New() const final {
    return CreateMaybeMessage<PosLineImpl>(nullptr);
  }

  PosLineImpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosLineImpl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosLineImpl& from);
  void MergeFrom(const PosLineImpl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosLineImpl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PosLineImpl";
  }
  protected:
  explicit PosLineImpl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartXDocPtFieldNumber = 1,
    kStartYDocPtFieldNumber = 2,
    kEndXDocPtFieldNumber = 3,
    kEndYDocPtFieldNumber = 4,
  };
  // required double startXDocPt = 1;
  bool has_startxdocpt() const;
  private:
  bool _internal_has_startxdocpt() const;
  public:
  void clear_startxdocpt();
  double startxdocpt() const;
  void set_startxdocpt(double value);
  private:
  double _internal_startxdocpt() const;
  void _internal_set_startxdocpt(double value);
  public:

  // required double startYDocPt = 2;
  bool has_startydocpt() const;
  private:
  bool _internal_has_startydocpt() const;
  public:
  void clear_startydocpt();
  double startydocpt() const;
  void set_startydocpt(double value);
  private:
  double _internal_startydocpt() const;
  void _internal_set_startydocpt(double value);
  public:

  // required double endXDocPt = 3;
  bool has_endxdocpt() const;
  private:
  bool _internal_has_endxdocpt() const;
  public:
  void clear_endxdocpt();
  double endxdocpt() const;
  void set_endxdocpt(double value);
  private:
  double _internal_endxdocpt() const;
  void _internal_set_endxdocpt(double value);
  public:

  // required double endYDocPt = 4;
  bool has_endydocpt() const;
  private:
  bool _internal_has_endydocpt() const;
  public:
  void clear_endydocpt();
  double endydocpt() const;
  void set_endydocpt(double value);
  private:
  double _internal_endydocpt() const;
  void _internal_set_endydocpt(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.PosLineImpl)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double startxdocpt_;
  double startydocpt_;
  double endxdocpt_;
  double endydocpt_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class PosConnectionImpl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PosConnectionImpl) */ {
 public:
  inline PosConnectionImpl() : PosConnectionImpl(nullptr) {}
  virtual ~PosConnectionImpl();

  PosConnectionImpl(const PosConnectionImpl& from);
  PosConnectionImpl(PosConnectionImpl&& from) noexcept
    : PosConnectionImpl() {
    *this = ::std::move(from);
  }

  inline PosConnectionImpl& operator=(const PosConnectionImpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosConnectionImpl& operator=(PosConnectionImpl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosConnectionImpl& default_instance();

  static inline const PosConnectionImpl* internal_default_instance() {
    return reinterpret_cast<const PosConnectionImpl*>(
               &_PosConnectionImpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PosConnectionImpl& a, PosConnectionImpl& b) {
    a.Swap(&b);
  }
  inline void Swap(PosConnectionImpl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosConnectionImpl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosConnectionImpl* New() const final {
    return CreateMaybeMessage<PosConnectionImpl>(nullptr);
  }

  PosConnectionImpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosConnectionImpl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosConnectionImpl& from);
  void MergeFrom(const PosConnectionImpl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosConnectionImpl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PosConnectionImpl";
  }
  protected:
  explicit PosConnectionImpl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .Proto.SchemaPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::Proto::SchemaPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaPoint >*
      mutable_points();
  private:
  const ::Proto::SchemaPoint& _internal_points(int index) const;
  ::Proto::SchemaPoint* _internal_add_points();
  public:
  const ::Proto::SchemaPoint& points(int index) const;
  ::Proto::SchemaPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:Proto.PosConnectionImpl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaPoint > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemRect) */ {
 public:
  inline SchemaItemRect() : SchemaItemRect(nullptr) {}
  virtual ~SchemaItemRect();

  SchemaItemRect(const SchemaItemRect& from);
  SchemaItemRect(SchemaItemRect&& from) noexcept
    : SchemaItemRect() {
    *this = ::std::move(from);
  }

  inline SchemaItemRect& operator=(const SchemaItemRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemRect& operator=(SchemaItemRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemRect& default_instance();

  static inline const SchemaItemRect* internal_default_instance() {
    return reinterpret_cast<const SchemaItemRect*>(
               &_SchemaItemRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SchemaItemRect& a, SchemaItemRect& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemRect* New() const final {
    return CreateMaybeMessage<SchemaItemRect>(nullptr);
  }

  SchemaItemRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemRect& from);
  void MergeFrom(const SchemaItemRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemRect";
  }
  protected:
  explicit SchemaItemRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 4,
    kFontFieldNumber = 6,
    kWeightFieldNumber = 1,
    kLineColorFieldNumber = 2,
    kFillColorFieldNumber = 3,
    kTextColorFieldNumber = 5,
    kFillFieldNumber = 7,
    kWordWrapFieldNumber = 11,
    kVertAlignFieldNumber = 10,
    kDrawrectFieldNumber = 8,
    kHorzAlignFieldNumber = 9,
  };
  // required .Proto.wstring text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::Proto::wstring& text() const;
  ::Proto::wstring* release_text();
  ::Proto::wstring* mutable_text();
  void set_allocated_text(::Proto::wstring* text);
  private:
  const ::Proto::wstring& _internal_text() const;
  ::Proto::wstring* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::Proto::wstring* text);
  ::Proto::wstring* unsafe_arena_release_text();

  // required .Proto.FontParam font = 6;
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  const ::Proto::FontParam& font() const;
  ::Proto::FontParam* release_font();
  ::Proto::FontParam* mutable_font();
  void set_allocated_font(::Proto::FontParam* font);
  private:
  const ::Proto::FontParam& _internal_font() const;
  ::Proto::FontParam* _internal_mutable_font();
  public:
  void unsafe_arena_set_allocated_font(
      ::Proto::FontParam* font);
  ::Proto::FontParam* unsafe_arena_release_font();

  // required double weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // required uint32 lineColor = 2;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fillColor = 3;
  bool has_fillcolor() const;
  private:
  bool _internal_has_fillcolor() const;
  public:
  void clear_fillcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor() const;
  void set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fillcolor() const;
  void _internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 textColor = 5;
  bool has_textcolor() const;
  private:
  bool _internal_has_textcolor() const;
  public:
  void clear_textcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 textcolor() const;
  void set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_textcolor() const;
  void _internal_set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool fill = 7;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  bool fill() const;
  void set_fill(bool value);
  private:
  bool _internal_fill() const;
  void _internal_set_fill(bool value);
  public:

  // optional bool wordWrap = 11 [default = false];
  bool has_wordwrap() const;
  private:
  bool _internal_has_wordwrap() const;
  public:
  void clear_wordwrap();
  bool wordwrap() const;
  void set_wordwrap(bool value);
  private:
  bool _internal_wordwrap() const;
  void _internal_set_wordwrap(bool value);
  public:

  // optional int32 vertAlign = 10 [default = 128];
  bool has_vertalign() const;
  private:
  bool _internal_has_vertalign() const;
  public:
  void clear_vertalign();
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign() const;
  void set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertalign() const;
  void _internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool drawrect = 8 [default = true];
  bool has_drawrect() const;
  private:
  bool _internal_has_drawrect() const;
  public:
  void clear_drawrect();
  bool drawrect() const;
  void set_drawrect(bool value);
  private:
  bool _internal_drawrect() const;
  void _internal_set_drawrect(bool value);
  public:

  // optional int32 horzAlign = 9 [default = 4];
  bool has_horzalign() const;
  private:
  bool _internal_has_horzalign() const;
  public:
  void clear_horzalign();
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign() const;
  void set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_horzalign() const;
  void _internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemRect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::wstring* text_;
  ::Proto::FontParam* font_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 textcolor_;
  bool fill_;
  bool wordwrap_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign_;
  bool drawrect_;
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemLine) */ {
 public:
  inline SchemaItemLine() : SchemaItemLine(nullptr) {}
  virtual ~SchemaItemLine();

  SchemaItemLine(const SchemaItemLine& from);
  SchemaItemLine(SchemaItemLine&& from) noexcept
    : SchemaItemLine() {
    *this = ::std::move(from);
  }

  inline SchemaItemLine& operator=(const SchemaItemLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemLine& operator=(SchemaItemLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemLine& default_instance();

  static inline const SchemaItemLine* internal_default_instance() {
    return reinterpret_cast<const SchemaItemLine*>(
               &_SchemaItemLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SchemaItemLine& a, SchemaItemLine& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemLine* New() const final {
    return CreateMaybeMessage<SchemaItemLine>(nullptr);
  }

  SchemaItemLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemLine& from);
  void MergeFrom(const SchemaItemLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemLine";
  }
  protected:
  explicit SchemaItemLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kLineColorFieldNumber = 2,
  };
  // required double weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // required uint32 lineColor = 2;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemLine)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemPath) */ {
 public:
  inline SchemaItemPath() : SchemaItemPath(nullptr) {}
  virtual ~SchemaItemPath();

  SchemaItemPath(const SchemaItemPath& from);
  SchemaItemPath(SchemaItemPath&& from) noexcept
    : SchemaItemPath() {
    *this = ::std::move(from);
  }

  inline SchemaItemPath& operator=(const SchemaItemPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemPath& operator=(SchemaItemPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemPath& default_instance();

  static inline const SchemaItemPath* internal_default_instance() {
    return reinterpret_cast<const SchemaItemPath*>(
               &_SchemaItemPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SchemaItemPath& a, SchemaItemPath& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemPath* New() const final {
    return CreateMaybeMessage<SchemaItemPath>(nullptr);
  }

  SchemaItemPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemPath& from);
  void MergeFrom(const SchemaItemPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemPath";
  }
  protected:
  explicit SchemaItemPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kLineColorFieldNumber = 2,
  };
  // required double weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // required uint32 lineColor = 2;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemPath)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemImage) */ {
 public:
  inline SchemaItemImage() : SchemaItemImage(nullptr) {}
  virtual ~SchemaItemImage();

  SchemaItemImage(const SchemaItemImage& from);
  SchemaItemImage(SchemaItemImage&& from) noexcept
    : SchemaItemImage() {
    *this = ::std::move(from);
  }

  inline SchemaItemImage& operator=(const SchemaItemImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemImage& operator=(SchemaItemImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemImage& default_instance();

  static inline const SchemaItemImage* internal_default_instance() {
    return reinterpret_cast<const SchemaItemImage*>(
               &_SchemaItemImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SchemaItemImage& a, SchemaItemImage& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemImage* New() const final {
    return CreateMaybeMessage<SchemaItemImage>(nullptr);
  }

  SchemaItemImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemImage& from);
  void MergeFrom(const SchemaItemImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemImage";
  }
  protected:
  explicit SchemaItemImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // optional .Proto.ImageItem image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::Proto::ImageItem& image() const;
  ::Proto::ImageItem* release_image();
  ::Proto::ImageItem* mutable_image();
  void set_allocated_image(::Proto::ImageItem* image);
  private:
  const ::Proto::ImageItem& _internal_image() const;
  ::Proto::ImageItem* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::Proto::ImageItem* image);
  ::Proto::ImageItem* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::ImageItem* image_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemFrame) */ {
 public:
  inline SchemaItemFrame() : SchemaItemFrame(nullptr) {}
  virtual ~SchemaItemFrame();

  SchemaItemFrame(const SchemaItemFrame& from);
  SchemaItemFrame(SchemaItemFrame&& from) noexcept
    : SchemaItemFrame() {
    *this = ::std::move(from);
  }

  inline SchemaItemFrame& operator=(const SchemaItemFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemFrame& operator=(SchemaItemFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemFrame& default_instance();

  static inline const SchemaItemFrame* internal_default_instance() {
    return reinterpret_cast<const SchemaItemFrame*>(
               &_SchemaItemFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SchemaItemFrame& a, SchemaItemFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemFrame* New() const final {
    return CreateMaybeMessage<SchemaItemFrame>(nullptr);
  }

  SchemaItemFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemFrame& from);
  void MergeFrom(const SchemaItemFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemFrame";
  }
  protected:
  explicit SchemaItemFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaIdFieldNumber = 1,
    kAllowScaleFieldNumber = 2,
    kKeepAspectRatioFieldNumber = 3,
  };
  // optional string schemaId = 1 [default = "SCHEMAID"];
  bool has_schemaid() const;
  private:
  bool _internal_has_schemaid() const;
  public:
  void clear_schemaid();
  const std::string& schemaid() const;
  void set_schemaid(const std::string& value);
  void set_schemaid(std::string&& value);
  void set_schemaid(const char* value);
  void set_schemaid(const char* value, size_t size);
  std::string* mutable_schemaid();
  std::string* release_schemaid();
  void set_allocated_schemaid(std::string* schemaid);
  private:
  const std::string& _internal_schemaid() const;
  void _internal_set_schemaid(const std::string& value);
  std::string* _internal_mutable_schemaid();
  public:

  // optional bool allowScale = 2 [default = true];
  bool has_allowscale() const;
  private:
  bool _internal_has_allowscale() const;
  public:
  void clear_allowscale();
  bool allowscale() const;
  void set_allowscale(bool value);
  private:
  bool _internal_allowscale() const;
  void _internal_set_allowscale(bool value);
  public:

  // optional bool keepAspectRatio = 3 [default = true];
  bool has_keepaspectratio() const;
  private:
  bool _internal_has_keepaspectratio() const;
  public:
  void clear_keepaspectratio();
  bool keepaspectratio() const;
  void set_keepaspectratio(bool value);
  private:
  bool _internal_keepaspectratio() const;
  void _internal_set_keepaspectratio(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_schemaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schemaid_;
  bool allowscale_;
  bool keepaspectratio_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class VFrameSetPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.VFrameSetPoint) */ {
 public:
  inline VFrameSetPoint() : VFrameSetPoint(nullptr) {}
  virtual ~VFrameSetPoint();

  VFrameSetPoint(const VFrameSetPoint& from);
  VFrameSetPoint(VFrameSetPoint&& from) noexcept
    : VFrameSetPoint() {
    *this = ::std::move(from);
  }

  inline VFrameSetPoint& operator=(const VFrameSetPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline VFrameSetPoint& operator=(VFrameSetPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VFrameSetPoint& default_instance();

  static inline const VFrameSetPoint* internal_default_instance() {
    return reinterpret_cast<const VFrameSetPoint*>(
               &_VFrameSetPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(VFrameSetPoint& a, VFrameSetPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(VFrameSetPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VFrameSetPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VFrameSetPoint* New() const final {
    return CreateMaybeMessage<VFrameSetPoint>(nullptr);
  }

  VFrameSetPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VFrameSetPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VFrameSetPoint& from);
  void MergeFrom(const VFrameSetPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VFrameSetPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.VFrameSetPoint";
  }
  protected:
  explicit VFrameSetPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputAppSignalIdFieldNumber = 20,
    kColorFieldNumber = 3,
    kColorSourceFieldNumber = 4,
  };
  // optional string outputAppSignalId = 20;
  bool has_outputappsignalid() const;
  private:
  bool _internal_has_outputappsignalid() const;
  public:
  void clear_outputappsignalid();
  const std::string& outputappsignalid() const;
  void set_outputappsignalid(const std::string& value);
  void set_outputappsignalid(std::string&& value);
  void set_outputappsignalid(const char* value);
  void set_outputappsignalid(const char* value, size_t size);
  std::string* mutable_outputappsignalid();
  std::string* release_outputappsignalid();
  void set_allocated_outputappsignalid(std::string* outputappsignalid);
  private:
  const std::string& _internal_outputappsignalid() const;
  void _internal_set_outputappsignalid(const std::string& value);
  std::string* _internal_mutable_outputappsignalid();
  public:

  // optional uint32 color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 colorSource = 4 [default = 0];
  bool has_colorsource() const;
  private:
  bool _internal_has_colorsource() const;
  public:
  void clear_colorsource();
  ::PROTOBUF_NAMESPACE_ID::int32 colorsource() const;
  void set_colorsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colorsource() const;
  void _internal_set_colorsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.VFrameSetPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputappsignalid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  ::PROTOBUF_NAMESPACE_ID::int32 colorsource_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class IndicatorHistogramVert PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.IndicatorHistogramVert) */ {
 public:
  inline IndicatorHistogramVert() : IndicatorHistogramVert(nullptr) {}
  virtual ~IndicatorHistogramVert();

  IndicatorHistogramVert(const IndicatorHistogramVert& from);
  IndicatorHistogramVert(IndicatorHistogramVert&& from) noexcept
    : IndicatorHistogramVert() {
    *this = ::std::move(from);
  }

  inline IndicatorHistogramVert& operator=(const IndicatorHistogramVert& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicatorHistogramVert& operator=(IndicatorHistogramVert&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndicatorHistogramVert& default_instance();

  static inline const IndicatorHistogramVert* internal_default_instance() {
    return reinterpret_cast<const IndicatorHistogramVert*>(
               &_IndicatorHistogramVert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(IndicatorHistogramVert& a, IndicatorHistogramVert& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicatorHistogramVert* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicatorHistogramVert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndicatorHistogramVert* New() const final {
    return CreateMaybeMessage<IndicatorHistogramVert>(nullptr);
  }

  IndicatorHistogramVert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndicatorHistogramVert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndicatorHistogramVert& from);
  void MergeFrom(const IndicatorHistogramVert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndicatorHistogramVert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.IndicatorHistogramVert";
  }
  protected:
  explicit IndicatorHistogramVert(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomSetPointsFieldNumber = 72,
    kStartValueFieldNumber = 1,
    kEndValueFieldNumber = 2,
    kBarWidthFieldNumber = 16,
    kLeftMarginFieldNumber = 20,
    kTopMarginFieldNumber = 21,
    kScaleTypeFieldNumber = 75,
    kRightMarginFieldNumber = 22,
    kBottomMarginFieldNumber = 23,
    kDrawGridForAllBarsFieldNumber = 41,
    kDrawGridValueForAllBarsFieldNumber = 43,
    kDrawSetpointsFieldNumber = 70,
    kDrawBarRectFieldNumber = 32,
    kDrawGridFieldNumber = 40,
    kDrawGridValuesFieldNumber = 42,
    kDrawGridValueUnitsFieldNumber = 44,
    kLinearGridMainStepFieldNumber = 50,
    kLinearGridSmallStepFieldNumber = 51,
    kLogarithmicGridMainStepFieldNumber = 52,
    kLogarithmicGridSmallStepFieldNumber = 53,
  };
  // repeated .Proto.VFrameSetPoint customSetPoints = 72;
  int customsetpoints_size() const;
  private:
  int _internal_customsetpoints_size() const;
  public:
  void clear_customsetpoints();
  ::Proto::VFrameSetPoint* mutable_customsetpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::VFrameSetPoint >*
      mutable_customsetpoints();
  private:
  const ::Proto::VFrameSetPoint& _internal_customsetpoints(int index) const;
  ::Proto::VFrameSetPoint* _internal_add_customsetpoints();
  public:
  const ::Proto::VFrameSetPoint& customsetpoints(int index) const;
  ::Proto::VFrameSetPoint* add_customsetpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::VFrameSetPoint >&
      customsetpoints() const;

  // optional double startValue = 1;
  bool has_startvalue() const;
  private:
  bool _internal_has_startvalue() const;
  public:
  void clear_startvalue();
  double startvalue() const;
  void set_startvalue(double value);
  private:
  double _internal_startvalue() const;
  void _internal_set_startvalue(double value);
  public:

  // optional double endValue = 2;
  bool has_endvalue() const;
  private:
  bool _internal_has_endvalue() const;
  public:
  void clear_endvalue();
  double endvalue() const;
  void set_endvalue(double value);
  private:
  double _internal_endvalue() const;
  void _internal_set_endvalue(double value);
  public:

  // optional double barWidth = 16;
  bool has_barwidth() const;
  private:
  bool _internal_has_barwidth() const;
  public:
  void clear_barwidth();
  double barwidth() const;
  void set_barwidth(double value);
  private:
  double _internal_barwidth() const;
  void _internal_set_barwidth(double value);
  public:

  // optional double leftMargin = 20;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  double leftmargin() const;
  void set_leftmargin(double value);
  private:
  double _internal_leftmargin() const;
  void _internal_set_leftmargin(double value);
  public:

  // optional double topMargin = 21;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  double topmargin() const;
  void set_topmargin(double value);
  private:
  double _internal_topmargin() const;
  void _internal_set_topmargin(double value);
  public:

  // optional int32 scaleType = 75 [default = 0];
  bool has_scaletype() const;
  private:
  bool _internal_has_scaletype() const;
  public:
  void clear_scaletype();
  ::PROTOBUF_NAMESPACE_ID::int32 scaletype() const;
  void set_scaletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scaletype() const;
  void _internal_set_scaletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double rightMargin = 22;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  double rightmargin() const;
  void set_rightmargin(double value);
  private:
  double _internal_rightmargin() const;
  void _internal_set_rightmargin(double value);
  public:

  // optional double bottomMargin = 23;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  double bottommargin() const;
  void set_bottommargin(double value);
  private:
  double _internal_bottommargin() const;
  void _internal_set_bottommargin(double value);
  public:

  // optional bool drawGridForAllBars = 41 [default = false];
  bool has_drawgridforallbars() const;
  private:
  bool _internal_has_drawgridforallbars() const;
  public:
  void clear_drawgridforallbars();
  bool drawgridforallbars() const;
  void set_drawgridforallbars(bool value);
  private:
  bool _internal_drawgridforallbars() const;
  void _internal_set_drawgridforallbars(bool value);
  public:

  // optional bool drawGridValueForAllBars = 43 [default = false];
  bool has_drawgridvalueforallbars() const;
  private:
  bool _internal_has_drawgridvalueforallbars() const;
  public:
  void clear_drawgridvalueforallbars();
  bool drawgridvalueforallbars() const;
  void set_drawgridvalueforallbars(bool value);
  private:
  bool _internal_drawgridvalueforallbars() const;
  void _internal_set_drawgridvalueforallbars(bool value);
  public:

  // optional int32 drawSetpoints = 70 [default = 0];
  bool has_drawsetpoints() const;
  private:
  bool _internal_has_drawsetpoints() const;
  public:
  void clear_drawsetpoints();
  ::PROTOBUF_NAMESPACE_ID::int32 drawsetpoints() const;
  void set_drawsetpoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drawsetpoints() const;
  void _internal_set_drawsetpoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool drawBarRect = 32 [default = true];
  bool has_drawbarrect() const;
  private:
  bool _internal_has_drawbarrect() const;
  public:
  void clear_drawbarrect();
  bool drawbarrect() const;
  void set_drawbarrect(bool value);
  private:
  bool _internal_drawbarrect() const;
  void _internal_set_drawbarrect(bool value);
  public:

  // optional bool drawGrid = 40 [default = true];
  bool has_drawgrid() const;
  private:
  bool _internal_has_drawgrid() const;
  public:
  void clear_drawgrid();
  bool drawgrid() const;
  void set_drawgrid(bool value);
  private:
  bool _internal_drawgrid() const;
  void _internal_set_drawgrid(bool value);
  public:

  // optional bool drawGridValues = 42 [default = true];
  bool has_drawgridvalues() const;
  private:
  bool _internal_has_drawgridvalues() const;
  public:
  void clear_drawgridvalues();
  bool drawgridvalues() const;
  void set_drawgridvalues(bool value);
  private:
  bool _internal_drawgridvalues() const;
  void _internal_set_drawgridvalues(bool value);
  public:

  // optional bool drawGridValueUnits = 44 [default = true];
  bool has_drawgridvalueunits() const;
  private:
  bool _internal_has_drawgridvalueunits() const;
  public:
  void clear_drawgridvalueunits();
  bool drawgridvalueunits() const;
  void set_drawgridvalueunits(bool value);
  private:
  bool _internal_drawgridvalueunits() const;
  void _internal_set_drawgridvalueunits(bool value);
  public:

  // optional double linearGridMainStep = 50 [default = 50];
  bool has_lineargridmainstep() const;
  private:
  bool _internal_has_lineargridmainstep() const;
  public:
  void clear_lineargridmainstep();
  double lineargridmainstep() const;
  void set_lineargridmainstep(double value);
  private:
  double _internal_lineargridmainstep() const;
  void _internal_set_lineargridmainstep(double value);
  public:

  // optional double linearGridSmallStep = 51 [default = 10];
  bool has_lineargridsmallstep() const;
  private:
  bool _internal_has_lineargridsmallstep() const;
  public:
  void clear_lineargridsmallstep();
  double lineargridsmallstep() const;
  void set_lineargridsmallstep(double value);
  private:
  double _internal_lineargridsmallstep() const;
  void _internal_set_lineargridsmallstep(double value);
  public:

  // optional double logarithmicGridMainStep = 52 [default = 1];
  bool has_logarithmicgridmainstep() const;
  private:
  bool _internal_has_logarithmicgridmainstep() const;
  public:
  void clear_logarithmicgridmainstep();
  double logarithmicgridmainstep() const;
  void set_logarithmicgridmainstep(double value);
  private:
  double _internal_logarithmicgridmainstep() const;
  void _internal_set_logarithmicgridmainstep(double value);
  public:

  // optional double logarithmicGridSmallStep = 53 [default = 0.5];
  bool has_logarithmicgridsmallstep() const;
  private:
  bool _internal_has_logarithmicgridsmallstep() const;
  public:
  void clear_logarithmicgridsmallstep();
  double logarithmicgridsmallstep() const;
  void set_logarithmicgridsmallstep(double value);
  private:
  double _internal_logarithmicgridsmallstep() const;
  void _internal_set_logarithmicgridsmallstep(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.IndicatorHistogramVert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::VFrameSetPoint > customsetpoints_;
  double startvalue_;
  double endvalue_;
  double barwidth_;
  double leftmargin_;
  double topmargin_;
  ::PROTOBUF_NAMESPACE_ID::int32 scaletype_;
  double rightmargin_;
  double bottommargin_;
  bool drawgridforallbars_;
  bool drawgridvalueforallbars_;
  ::PROTOBUF_NAMESPACE_ID::int32 drawsetpoints_;
  bool drawbarrect_;
  bool drawgrid_;
  bool drawgridvalues_;
  bool drawgridvalueunits_;
  double lineargridmainstep_;
  double lineargridsmallstep_;
  double logarithmicgridmainstep_;
  double logarithmicgridsmallstep_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class IndicatorArrowIndicator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.IndicatorArrowIndicator) */ {
 public:
  inline IndicatorArrowIndicator() : IndicatorArrowIndicator(nullptr) {}
  virtual ~IndicatorArrowIndicator();

  IndicatorArrowIndicator(const IndicatorArrowIndicator& from);
  IndicatorArrowIndicator(IndicatorArrowIndicator&& from) noexcept
    : IndicatorArrowIndicator() {
    *this = ::std::move(from);
  }

  inline IndicatorArrowIndicator& operator=(const IndicatorArrowIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicatorArrowIndicator& operator=(IndicatorArrowIndicator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndicatorArrowIndicator& default_instance();

  static inline const IndicatorArrowIndicator* internal_default_instance() {
    return reinterpret_cast<const IndicatorArrowIndicator*>(
               &_IndicatorArrowIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(IndicatorArrowIndicator& a, IndicatorArrowIndicator& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicatorArrowIndicator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicatorArrowIndicator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndicatorArrowIndicator* New() const final {
    return CreateMaybeMessage<IndicatorArrowIndicator>(nullptr);
  }

  IndicatorArrowIndicator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndicatorArrowIndicator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndicatorArrowIndicator& from);
  void MergeFrom(const IndicatorArrowIndicator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndicatorArrowIndicator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.IndicatorArrowIndicator";
  }
  protected:
  explicit IndicatorArrowIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartValueFieldNumber = 1,
    kEndValueFieldNumber = 2,
    kStartAngleFieldNumber = 16,
    kSpanAngleFieldNumber = 17,
  };
  // optional double startValue = 1;
  bool has_startvalue() const;
  private:
  bool _internal_has_startvalue() const;
  public:
  void clear_startvalue();
  double startvalue() const;
  void set_startvalue(double value);
  private:
  double _internal_startvalue() const;
  void _internal_set_startvalue(double value);
  public:

  // optional double endValue = 2;
  bool has_endvalue() const;
  private:
  bool _internal_has_endvalue() const;
  public:
  void clear_endvalue();
  double endvalue() const;
  void set_endvalue(double value);
  private:
  double _internal_endvalue() const;
  void _internal_set_endvalue(double value);
  public:

  // optional double startAngle = 16;
  bool has_startangle() const;
  private:
  bool _internal_has_startangle() const;
  public:
  void clear_startangle();
  double startangle() const;
  void set_startangle(double value);
  private:
  double _internal_startangle() const;
  void _internal_set_startangle(double value);
  public:

  // optional double spanAngle = 17;
  bool has_spanangle() const;
  private:
  bool _internal_has_spanangle() const;
  public:
  void clear_spanangle();
  double spanangle() const;
  void set_spanangle(double value);
  private:
  double _internal_spanangle() const;
  void _internal_set_spanangle(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.IndicatorArrowIndicator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double startvalue_;
  double endvalue_;
  double startangle_;
  double spanangle_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemIndicator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemIndicator) */ {
 public:
  inline SchemaItemIndicator() : SchemaItemIndicator(nullptr) {}
  virtual ~SchemaItemIndicator();

  SchemaItemIndicator(const SchemaItemIndicator& from);
  SchemaItemIndicator(SchemaItemIndicator&& from) noexcept
    : SchemaItemIndicator() {
    *this = ::std::move(from);
  }

  inline SchemaItemIndicator& operator=(const SchemaItemIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemIndicator& operator=(SchemaItemIndicator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemIndicator& default_instance();

  static inline const SchemaItemIndicator* internal_default_instance() {
    return reinterpret_cast<const SchemaItemIndicator*>(
               &_SchemaItemIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SchemaItemIndicator& a, SchemaItemIndicator& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemIndicator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemIndicator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemIndicator* New() const final {
    return CreateMaybeMessage<SchemaItemIndicator>(nullptr);
  }

  SchemaItemIndicator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemIndicator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemIndicator& from);
  void MergeFrom(const SchemaItemIndicator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemIndicator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemIndicator";
  }
  protected:
  explicit SchemaItemIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalColorsFieldNumber = 18,
    kSignalIdsFieldNumber = 1,
    kFontFieldNumber = 9,
    kIndicatorHistogramVertFieldNumber = 48,
    kIndicatorArrowIndicatorFieldNumber = 49,
    kSignalSourceFieldNumber = 2,
    kDrawRectFieldNumber = 10,
    kLineWeightFieldNumber = 11,
    kTypeFieldNumber = 32,
    kBackgroundColorFieldNumber = 16,
    kLineColorFieldNumber = 17,
    kPrecisionFieldNumber = 3,
    kAnalogFormatFieldNumber = 4,
  };
  // repeated uint32 signalColors = 18;
  int signalcolors_size() const;
  private:
  int _internal_signalcolors_size() const;
  public:
  void clear_signalcolors();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signalcolors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_signalcolors() const;
  void _internal_add_signalcolors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_signalcolors();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 signalcolors(int index) const;
  void set_signalcolors(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_signalcolors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      signalcolors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_signalcolors();

  // optional string signalIds = 1;
  bool has_signalids() const;
  private:
  bool _internal_has_signalids() const;
  public:
  void clear_signalids();
  const std::string& signalids() const;
  void set_signalids(const std::string& value);
  void set_signalids(std::string&& value);
  void set_signalids(const char* value);
  void set_signalids(const char* value, size_t size);
  std::string* mutable_signalids();
  std::string* release_signalids();
  void set_allocated_signalids(std::string* signalids);
  private:
  const std::string& _internal_signalids() const;
  void _internal_set_signalids(const std::string& value);
  std::string* _internal_mutable_signalids();
  public:

  // optional .Proto.FontParam font = 9;
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  const ::Proto::FontParam& font() const;
  ::Proto::FontParam* release_font();
  ::Proto::FontParam* mutable_font();
  void set_allocated_font(::Proto::FontParam* font);
  private:
  const ::Proto::FontParam& _internal_font() const;
  ::Proto::FontParam* _internal_mutable_font();
  public:
  void unsafe_arena_set_allocated_font(
      ::Proto::FontParam* font);
  ::Proto::FontParam* unsafe_arena_release_font();

  // optional .Proto.IndicatorHistogramVert indicatorHistogramVert = 48;
  bool has_indicatorhistogramvert() const;
  private:
  bool _internal_has_indicatorhistogramvert() const;
  public:
  void clear_indicatorhistogramvert();
  const ::Proto::IndicatorHistogramVert& indicatorhistogramvert() const;
  ::Proto::IndicatorHistogramVert* release_indicatorhistogramvert();
  ::Proto::IndicatorHistogramVert* mutable_indicatorhistogramvert();
  void set_allocated_indicatorhistogramvert(::Proto::IndicatorHistogramVert* indicatorhistogramvert);
  private:
  const ::Proto::IndicatorHistogramVert& _internal_indicatorhistogramvert() const;
  ::Proto::IndicatorHistogramVert* _internal_mutable_indicatorhistogramvert();
  public:
  void unsafe_arena_set_allocated_indicatorhistogramvert(
      ::Proto::IndicatorHistogramVert* indicatorhistogramvert);
  ::Proto::IndicatorHistogramVert* unsafe_arena_release_indicatorhistogramvert();

  // optional .Proto.IndicatorArrowIndicator indicatorArrowIndicator = 49;
  bool has_indicatorarrowindicator() const;
  private:
  bool _internal_has_indicatorarrowindicator() const;
  public:
  void clear_indicatorarrowindicator();
  const ::Proto::IndicatorArrowIndicator& indicatorarrowindicator() const;
  ::Proto::IndicatorArrowIndicator* release_indicatorarrowindicator();
  ::Proto::IndicatorArrowIndicator* mutable_indicatorarrowindicator();
  void set_allocated_indicatorarrowindicator(::Proto::IndicatorArrowIndicator* indicatorarrowindicator);
  private:
  const ::Proto::IndicatorArrowIndicator& _internal_indicatorarrowindicator() const;
  ::Proto::IndicatorArrowIndicator* _internal_mutable_indicatorarrowindicator();
  public:
  void unsafe_arena_set_allocated_indicatorarrowindicator(
      ::Proto::IndicatorArrowIndicator* indicatorarrowindicator);
  ::Proto::IndicatorArrowIndicator* unsafe_arena_release_indicatorarrowindicator();

  // optional int32 signalSource = 2 [default = 0];
  bool has_signalsource() const;
  private:
  bool _internal_has_signalsource() const;
  public:
  void clear_signalsource();
  ::PROTOBUF_NAMESPACE_ID::int32 signalsource() const;
  void set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalsource() const;
  void _internal_set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool drawRect = 10 [default = false];
  bool has_drawrect() const;
  private:
  bool _internal_has_drawrect() const;
  public:
  void clear_drawrect();
  bool drawrect() const;
  void set_drawrect(bool value);
  private:
  bool _internal_drawrect() const;
  void _internal_set_drawrect(bool value);
  public:

  // optional double lineWeight = 11 [default = 0];
  bool has_lineweight() const;
  private:
  bool _internal_has_lineweight() const;
  public:
  void clear_lineweight();
  double lineweight() const;
  void set_lineweight(double value);
  private:
  double _internal_lineweight() const;
  void _internal_set_lineweight(double value);
  public:

  // optional uint32 type = 32 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 backgroundColor = 16;
  bool has_backgroundcolor() const;
  private:
  bool _internal_has_backgroundcolor() const;
  public:
  void clear_backgroundcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 backgroundcolor() const;
  void set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_backgroundcolor() const;
  void _internal_set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lineColor = 17;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 precision = 3 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogFormat = 4 [default = 102];
  bool has_analogformat() const;
  private:
  bool _internal_has_analogformat() const;
  public:
  void clear_analogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat() const;
  void set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogformat() const;
  void _internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemIndicator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > signalcolors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalids_;
  ::Proto::FontParam* font_;
  ::Proto::IndicatorHistogramVert* indicatorhistogramvert_;
  ::Proto::IndicatorArrowIndicator* indicatorarrowindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalsource_;
  bool drawrect_;
  double lineweight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 backgroundcolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class FblConnectionPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.FblConnectionPoint) */ {
 public:
  inline FblConnectionPoint() : FblConnectionPoint(nullptr) {}
  virtual ~FblConnectionPoint();

  FblConnectionPoint(const FblConnectionPoint& from);
  FblConnectionPoint(FblConnectionPoint&& from) noexcept
    : FblConnectionPoint() {
    *this = ::std::move(from);
  }

  inline FblConnectionPoint& operator=(const FblConnectionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline FblConnectionPoint& operator=(FblConnectionPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FblConnectionPoint& default_instance();

  static inline const FblConnectionPoint* internal_default_instance() {
    return reinterpret_cast<const FblConnectionPoint*>(
               &_FblConnectionPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FblConnectionPoint& a, FblConnectionPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(FblConnectionPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FblConnectionPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FblConnectionPoint* New() const final {
    return CreateMaybeMessage<FblConnectionPoint>(nullptr);
  }

  FblConnectionPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FblConnectionPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FblConnectionPoint& from);
  void MergeFrom(const FblConnectionPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FblConnectionPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.FblConnectionPoint";
  }
  protected:
  explicit FblConnectionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociatedIosFieldNumber = 6,
    kCaptionFieldNumber = 5,
    kPointFieldNumber = 1,
    kUuidFieldNumber = 3,
    kDirrectionFieldNumber = 2,
    kSignalTypeFieldNumber = 7,
    kOperandIndexFieldNumber = 4,
  };
  // repeated .Proto.Uuid associatedIos = 6;
  int associatedios_size() const;
  private:
  int _internal_associatedios_size() const;
  public:
  void clear_associatedios();
  ::Proto::Uuid* mutable_associatedios(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >*
      mutable_associatedios();
  private:
  const ::Proto::Uuid& _internal_associatedios(int index) const;
  ::Proto::Uuid* _internal_add_associatedios();
  public:
  const ::Proto::Uuid& associatedios(int index) const;
  ::Proto::Uuid* add_associatedios();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >&
      associatedios() const;

  // optional string caption = 5 [default = ""];
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional .Proto.SchemaPoint point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::Proto::SchemaPoint& point() const;
  ::Proto::SchemaPoint* release_point();
  ::Proto::SchemaPoint* mutable_point();
  void set_allocated_point(::Proto::SchemaPoint* point);
  private:
  const ::Proto::SchemaPoint& _internal_point() const;
  ::Proto::SchemaPoint* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::Proto::SchemaPoint* point);
  ::Proto::SchemaPoint* unsafe_arena_release_point();

  // optional .Proto.Uuid uuid = 3;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // optional .Proto.ConnectionDirrection dirrection = 2;
  bool has_dirrection() const;
  private:
  bool _internal_has_dirrection() const;
  public:
  void clear_dirrection();
  ::Proto::ConnectionDirrection dirrection() const;
  void set_dirrection(::Proto::ConnectionDirrection value);
  private:
  ::Proto::ConnectionDirrection _internal_dirrection() const;
  void _internal_set_dirrection(::Proto::ConnectionDirrection value);
  public:

  // optional int32 signalType = 7 [default = 0];
  bool has_signaltype() const;
  private:
  bool _internal_has_signaltype() const;
  public:
  void clear_signaltype();
  ::PROTOBUF_NAMESPACE_ID::int32 signaltype() const;
  void set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signaltype() const;
  void _internal_set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 operandIndex = 4 [default = -1];
  bool has_operandindex() const;
  private:
  bool _internal_has_operandindex() const;
  public:
  void clear_operandindex();
  ::PROTOBUF_NAMESPACE_ID::int32 operandindex() const;
  void set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operandindex() const;
  void _internal_set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.FblConnectionPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid > associatedios_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::Proto::SchemaPoint* point_;
  ::Proto::Uuid* uuid_;
  int dirrection_;
  ::PROTOBUF_NAMESPACE_ID::int32 signaltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 operandindex_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class FblItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.FblItem) */ {
 public:
  inline FblItem() : FblItem(nullptr) {}
  virtual ~FblItem();

  FblItem(const FblItem& from);
  FblItem(FblItem&& from) noexcept
    : FblItem() {
    *this = ::std::move(from);
  }

  inline FblItem& operator=(const FblItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FblItem& operator=(FblItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FblItem& default_instance();

  static inline const FblItem* internal_default_instance() {
    return reinterpret_cast<const FblItem*>(
               &_FblItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FblItem& a, FblItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FblItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FblItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FblItem* New() const final {
    return CreateMaybeMessage<FblItem>(nullptr);
  }

  FblItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FblItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FblItem& from);
  void MergeFrom(const FblItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FblItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.FblItem";
  }
  protected:
  explicit FblItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .Proto.FblConnectionPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::Proto::FblConnectionPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::FblConnectionPoint >*
      mutable_points();
  private:
  const ::Proto::FblConnectionPoint& _internal_points(int index) const;
  ::Proto::FblConnectionPoint* _internal_add_points();
  public:
  const ::Proto::FblConnectionPoint& points(int index) const;
  ::Proto::FblConnectionPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::FblConnectionPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:Proto.FblItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::FblConnectionPoint > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class FblItemRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.FblItemRect) */ {
 public:
  inline FblItemRect() : FblItemRect(nullptr) {}
  virtual ~FblItemRect();

  FblItemRect(const FblItemRect& from);
  FblItemRect(FblItemRect&& from) noexcept
    : FblItemRect() {
    *this = ::std::move(from);
  }

  inline FblItemRect& operator=(const FblItemRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline FblItemRect& operator=(FblItemRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FblItemRect& default_instance();

  static inline const FblItemRect* internal_default_instance() {
    return reinterpret_cast<const FblItemRect*>(
               &_FblItemRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FblItemRect& a, FblItemRect& b) {
    a.Swap(&b);
  }
  inline void Swap(FblItemRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FblItemRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FblItemRect* New() const final {
    return CreateMaybeMessage<FblItemRect>(nullptr);
  }

  FblItemRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FblItemRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FblItemRect& from);
  void MergeFrom(const FblItemRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FblItemRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.FblItemRect";
  }
  protected:
  explicit FblItemRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObsoleteLabelFieldNumber = 6,
    kUserTextFieldNumber = 7,
    kFontFieldNumber = 5,
    kWeightFieldNumber = 1,
    kLineColorFieldNumber = 2,
    kFillColorFieldNumber = 3,
    kTextColorFieldNumber = 4,
    kUserTextPosFieldNumber = 8,
    kObsoleteLabelPosFieldNumber = 9,
  };
  // optional string obsoleteLabel = 6;
  bool has_obsoletelabel() const;
  private:
  bool _internal_has_obsoletelabel() const;
  public:
  void clear_obsoletelabel();
  const std::string& obsoletelabel() const;
  void set_obsoletelabel(const std::string& value);
  void set_obsoletelabel(std::string&& value);
  void set_obsoletelabel(const char* value);
  void set_obsoletelabel(const char* value, size_t size);
  std::string* mutable_obsoletelabel();
  std::string* release_obsoletelabel();
  void set_allocated_obsoletelabel(std::string* obsoletelabel);
  private:
  const std::string& _internal_obsoletelabel() const;
  void _internal_set_obsoletelabel(const std::string& value);
  std::string* _internal_mutable_obsoletelabel();
  public:

  // optional string userText = 7;
  bool has_usertext() const;
  private:
  bool _internal_has_usertext() const;
  public:
  void clear_usertext();
  const std::string& usertext() const;
  void set_usertext(const std::string& value);
  void set_usertext(std::string&& value);
  void set_usertext(const char* value);
  void set_usertext(const char* value, size_t size);
  std::string* mutable_usertext();
  std::string* release_usertext();
  void set_allocated_usertext(std::string* usertext);
  private:
  const std::string& _internal_usertext() const;
  void _internal_set_usertext(const std::string& value);
  std::string* _internal_mutable_usertext();
  public:

  // required .Proto.FontParam font = 5;
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  const ::Proto::FontParam& font() const;
  ::Proto::FontParam* release_font();
  ::Proto::FontParam* mutable_font();
  void set_allocated_font(::Proto::FontParam* font);
  private:
  const ::Proto::FontParam& _internal_font() const;
  ::Proto::FontParam* _internal_mutable_font();
  public:
  void unsafe_arena_set_allocated_font(
      ::Proto::FontParam* font);
  ::Proto::FontParam* unsafe_arena_release_font();

  // required double weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // required uint32 lineColor = 2;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fillColor = 3;
  bool has_fillcolor() const;
  private:
  bool _internal_has_fillcolor() const;
  public:
  void clear_fillcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor() const;
  void set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fillcolor() const;
  void _internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 textColor = 4;
  bool has_textcolor() const;
  private:
  bool _internal_has_textcolor() const;
  public:
  void clear_textcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 textcolor() const;
  void set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_textcolor() const;
  void _internal_set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 userTextPos = 8 [default = 1];
  bool has_usertextpos() const;
  private:
  bool _internal_has_usertextpos() const;
  public:
  void clear_usertextpos();
  ::PROTOBUF_NAMESPACE_ID::int32 usertextpos() const;
  void set_usertextpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usertextpos() const;
  void _internal_set_usertextpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 obsoleteLabelPos = 9 [default = -1];
  bool has_obsoletelabelpos() const;
  private:
  bool _internal_has_obsoletelabelpos() const;
  public:
  void clear_obsoletelabelpos();
  ::PROTOBUF_NAMESPACE_ID::int32 obsoletelabelpos() const;
  void set_obsoletelabelpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obsoletelabelpos() const;
  void _internal_set_obsoletelabelpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.FblItemRect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsoletelabel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usertext_;
  ::Proto::FontParam* font_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 textcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 usertextpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 obsoletelabelpos_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class FblItemLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.FblItemLine) */ {
 public:
  inline FblItemLine() : FblItemLine(nullptr) {}
  virtual ~FblItemLine();

  FblItemLine(const FblItemLine& from);
  FblItemLine(FblItemLine&& from) noexcept
    : FblItemLine() {
    *this = ::std::move(from);
  }

  inline FblItemLine& operator=(const FblItemLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline FblItemLine& operator=(FblItemLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FblItemLine& default_instance();

  static inline const FblItemLine* internal_default_instance() {
    return reinterpret_cast<const FblItemLine*>(
               &_FblItemLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FblItemLine& a, FblItemLine& b) {
    a.Swap(&b);
  }
  inline void Swap(FblItemLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FblItemLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FblItemLine* New() const final {
    return CreateMaybeMessage<FblItemLine>(nullptr);
  }

  FblItemLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FblItemLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FblItemLine& from);
  void MergeFrom(const FblItemLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FblItemLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.FblItemLine";
  }
  protected:
  explicit FblItemLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kLineColorFieldNumber = 2,
  };
  // required double weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // required uint32 lineColor = 2;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.FblItemLine)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemSignalColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemSignalColumn) */ {
 public:
  inline SchemaItemSignalColumn() : SchemaItemSignalColumn(nullptr) {}
  virtual ~SchemaItemSignalColumn();

  SchemaItemSignalColumn(const SchemaItemSignalColumn& from);
  SchemaItemSignalColumn(SchemaItemSignalColumn&& from) noexcept
    : SchemaItemSignalColumn() {
    *this = ::std::move(from);
  }

  inline SchemaItemSignalColumn& operator=(const SchemaItemSignalColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemSignalColumn& operator=(SchemaItemSignalColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemSignalColumn& default_instance();

  static inline const SchemaItemSignalColumn* internal_default_instance() {
    return reinterpret_cast<const SchemaItemSignalColumn*>(
               &_SchemaItemSignalColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SchemaItemSignalColumn& a, SchemaItemSignalColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemSignalColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemSignalColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemSignalColumn* New() const final {
    return CreateMaybeMessage<SchemaItemSignalColumn>(nullptr);
  }

  SchemaItemSignalColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemSignalColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemSignalColumn& from);
  void MergeFrom(const SchemaItemSignalColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemSignalColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemSignalColumn";
  }
  protected:
  explicit SchemaItemSignalColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kHorzAlignFieldNumber = 3,
    kWidthFieldNumber = 1,
  };
  // optional int32 data = 2 [default = 0];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 horzAlign = 3 [default = 1];
  bool has_horzalign() const;
  private:
  bool _internal_has_horzalign() const;
  public:
  void clear_horzalign();
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign() const;
  void set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_horzalign() const;
  void _internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double width = 1 [default = 20];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemSignalColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_;
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign_;
  double width_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemSignal) */ {
 public:
  inline SchemaItemSignal() : SchemaItemSignal(nullptr) {}
  virtual ~SchemaItemSignal();

  SchemaItemSignal(const SchemaItemSignal& from);
  SchemaItemSignal(SchemaItemSignal&& from) noexcept
    : SchemaItemSignal() {
    *this = ::std::move(from);
  }

  inline SchemaItemSignal& operator=(const SchemaItemSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemSignal& operator=(SchemaItemSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemSignal& default_instance();

  static inline const SchemaItemSignal* internal_default_instance() {
    return reinterpret_cast<const SchemaItemSignal*>(
               &_SchemaItemSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SchemaItemSignal& a, SchemaItemSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemSignal* New() const final {
    return CreateMaybeMessage<SchemaItemSignal>(nullptr);
  }

  SchemaItemSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemSignal& from);
  void MergeFrom(const SchemaItemSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemSignal";
  }
  protected:
  explicit SchemaItemSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalIDsFieldNumber = 1,
    kColumnsFieldNumber = 4,
    kImpactAppSignalIDsFieldNumber = 6,
    kCustomTextFieldNumber = 16,
    kMultiLineFieldNumber = 5,
    kPrecisionFieldNumber = 2,
    kAnalogFormatFieldNumber = 3,
  };
  // repeated .Proto.wstring appSignalIDs = 1;
  int appsignalids_size() const;
  private:
  int _internal_appsignalids_size() const;
  public:
  void clear_appsignalids();
  ::Proto::wstring* mutable_appsignalids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >*
      mutable_appsignalids();
  private:
  const ::Proto::wstring& _internal_appsignalids(int index) const;
  ::Proto::wstring* _internal_add_appsignalids();
  public:
  const ::Proto::wstring& appsignalids(int index) const;
  ::Proto::wstring* add_appsignalids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >&
      appsignalids() const;

  // repeated .Proto.SchemaItemSignalColumn columns = 4;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::Proto::SchemaItemSignalColumn* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaItemSignalColumn >*
      mutable_columns();
  private:
  const ::Proto::SchemaItemSignalColumn& _internal_columns(int index) const;
  ::Proto::SchemaItemSignalColumn* _internal_add_columns();
  public:
  const ::Proto::SchemaItemSignalColumn& columns(int index) const;
  ::Proto::SchemaItemSignalColumn* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaItemSignalColumn >&
      columns() const;

  // repeated string impactAppSignalIDs = 6;
  int impactappsignalids_size() const;
  private:
  int _internal_impactappsignalids_size() const;
  public:
  void clear_impactappsignalids();
  const std::string& impactappsignalids(int index) const;
  std::string* mutable_impactappsignalids(int index);
  void set_impactappsignalids(int index, const std::string& value);
  void set_impactappsignalids(int index, std::string&& value);
  void set_impactappsignalids(int index, const char* value);
  void set_impactappsignalids(int index, const char* value, size_t size);
  std::string* add_impactappsignalids();
  void add_impactappsignalids(const std::string& value);
  void add_impactappsignalids(std::string&& value);
  void add_impactappsignalids(const char* value);
  void add_impactappsignalids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& impactappsignalids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_impactappsignalids();
  private:
  const std::string& _internal_impactappsignalids(int index) const;
  std::string* _internal_add_impactappsignalids();
  public:

  // optional string customText = 16;
  bool has_customtext() const;
  private:
  bool _internal_has_customtext() const;
  public:
  void clear_customtext();
  const std::string& customtext() const;
  void set_customtext(const std::string& value);
  void set_customtext(std::string&& value);
  void set_customtext(const char* value);
  void set_customtext(const char* value, size_t size);
  std::string* mutable_customtext();
  std::string* release_customtext();
  void set_allocated_customtext(std::string* customtext);
  private:
  const std::string& _internal_customtext() const;
  void _internal_set_customtext(const std::string& value);
  std::string* _internal_mutable_customtext();
  public:

  // optional bool multiLine = 5 [default = true];
  bool has_multiline() const;
  private:
  bool _internal_has_multiline() const;
  public:
  void clear_multiline();
  bool multiline() const;
  void set_multiline(bool value);
  private:
  bool _internal_multiline() const;
  void _internal_set_multiline(bool value);
  public:

  // optional int32 precision = 2 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogFormat = 3 [default = 102];
  bool has_analogformat() const;
  private:
  bool _internal_has_analogformat() const;
  public:
  void clear_analogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat() const;
  void set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogformat() const;
  void _internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring > appsignalids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaItemSignalColumn > columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> impactappsignalids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customtext_;
  bool multiline_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemInput) */ {
 public:
  inline SchemaItemInput() : SchemaItemInput(nullptr) {}
  virtual ~SchemaItemInput();

  SchemaItemInput(const SchemaItemInput& from);
  SchemaItemInput(SchemaItemInput&& from) noexcept
    : SchemaItemInput() {
    *this = ::std::move(from);
  }

  inline SchemaItemInput& operator=(const SchemaItemInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemInput& operator=(SchemaItemInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemInput& default_instance();

  static inline const SchemaItemInput* internal_default_instance() {
    return reinterpret_cast<const SchemaItemInput*>(
               &_SchemaItemInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SchemaItemInput& a, SchemaItemInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemInput* New() const final {
    return CreateMaybeMessage<SchemaItemInput>(nullptr);
  }

  SchemaItemInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemInput& from);
  void MergeFrom(const SchemaItemInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemInput";
  }
  protected:
  explicit SchemaItemInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemOutput) */ {
 public:
  inline SchemaItemOutput() : SchemaItemOutput(nullptr) {}
  virtual ~SchemaItemOutput();

  SchemaItemOutput(const SchemaItemOutput& from);
  SchemaItemOutput(SchemaItemOutput&& from) noexcept
    : SchemaItemOutput() {
    *this = ::std::move(from);
  }

  inline SchemaItemOutput& operator=(const SchemaItemOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemOutput& operator=(SchemaItemOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemOutput& default_instance();

  static inline const SchemaItemOutput* internal_default_instance() {
    return reinterpret_cast<const SchemaItemOutput*>(
               &_SchemaItemOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SchemaItemOutput& a, SchemaItemOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemOutput* New() const final {
    return CreateMaybeMessage<SchemaItemOutput>(nullptr);
  }

  SchemaItemOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemOutput& from);
  void MergeFrom(const SchemaItemOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemOutput";
  }
  protected:
  explicit SchemaItemOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemInOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemInOut) */ {
 public:
  inline SchemaItemInOut() : SchemaItemInOut(nullptr) {}
  virtual ~SchemaItemInOut();

  SchemaItemInOut(const SchemaItemInOut& from);
  SchemaItemInOut(SchemaItemInOut&& from) noexcept
    : SchemaItemInOut() {
    *this = ::std::move(from);
  }

  inline SchemaItemInOut& operator=(const SchemaItemInOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemInOut& operator=(SchemaItemInOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemInOut& default_instance();

  static inline const SchemaItemInOut* internal_default_instance() {
    return reinterpret_cast<const SchemaItemInOut*>(
               &_SchemaItemInOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SchemaItemInOut& a, SchemaItemInOut& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemInOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemInOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemInOut* New() const final {
    return CreateMaybeMessage<SchemaItemInOut>(nullptr);
  }

  SchemaItemInOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemInOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemInOut& from);
  void MergeFrom(const SchemaItemInOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemInOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemInOut";
  }
  protected:
  explicit SchemaItemInOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemInOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemLink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemLink) */ {
 public:
  inline SchemaItemLink() : SchemaItemLink(nullptr) {}
  virtual ~SchemaItemLink();

  SchemaItemLink(const SchemaItemLink& from);
  SchemaItemLink(SchemaItemLink&& from) noexcept
    : SchemaItemLink() {
    *this = ::std::move(from);
  }

  inline SchemaItemLink& operator=(const SchemaItemLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemLink& operator=(SchemaItemLink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemLink& default_instance();

  static inline const SchemaItemLink* internal_default_instance() {
    return reinterpret_cast<const SchemaItemLink*>(
               &_SchemaItemLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SchemaItemLink& a, SchemaItemLink& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemLink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemLink* New() const final {
    return CreateMaybeMessage<SchemaItemLink>(nullptr);
  }

  SchemaItemLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemLink& from);
  void MergeFrom(const SchemaItemLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemLink";
  }
  protected:
  explicit SchemaItemLink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemAfb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemAfb) */ {
 public:
  inline SchemaItemAfb() : SchemaItemAfb(nullptr) {}
  virtual ~SchemaItemAfb();

  SchemaItemAfb(const SchemaItemAfb& from);
  SchemaItemAfb(SchemaItemAfb&& from) noexcept
    : SchemaItemAfb() {
    *this = ::std::move(from);
  }

  inline SchemaItemAfb& operator=(const SchemaItemAfb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemAfb& operator=(SchemaItemAfb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemAfb& default_instance();

  static inline const SchemaItemAfb* internal_default_instance() {
    return reinterpret_cast<const SchemaItemAfb*>(
               &_SchemaItemAfb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SchemaItemAfb& a, SchemaItemAfb& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemAfb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemAfb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemAfb* New() const final {
    return CreateMaybeMessage<SchemaItemAfb>(nullptr);
  }

  SchemaItemAfb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemAfb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemAfb& from);
  void MergeFrom(const SchemaItemAfb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemAfb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemAfb";
  }
  protected:
  explicit SchemaItemAfb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kDeprecatedLabelFieldNumber = 6,
    kAfbStridFieldNumber = 3,
    kDeprecatedAfbelementFieldNumber = 5,
    kAfbelementFieldNumber = 7,
    kPrecisionFieldNumber = 4,
  };
  // repeated .Proto.AfbParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::Proto::AfbParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >*
      mutable_params();
  private:
  const ::Proto::AfbParam& _internal_params(int index) const;
  ::Proto::AfbParam* _internal_add_params();
  public:
  const ::Proto::AfbParam& params(int index) const;
  ::Proto::AfbParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >&
      params() const;

  // optional string deprecated_label = 6;
  bool has_deprecated_label() const;
  private:
  bool _internal_has_deprecated_label() const;
  public:
  void clear_deprecated_label();
  const std::string& deprecated_label() const;
  void set_deprecated_label(const std::string& value);
  void set_deprecated_label(std::string&& value);
  void set_deprecated_label(const char* value);
  void set_deprecated_label(const char* value, size_t size);
  std::string* mutable_deprecated_label();
  std::string* release_deprecated_label();
  void set_allocated_deprecated_label(std::string* deprecated_label);
  private:
  const std::string& _internal_deprecated_label() const;
  void _internal_set_deprecated_label(const std::string& value);
  std::string* _internal_mutable_deprecated_label();
  public:

  // optional .Proto.wstring afbStrid = 3;
  bool has_afbstrid() const;
  private:
  bool _internal_has_afbstrid() const;
  public:
  void clear_afbstrid();
  const ::Proto::wstring& afbstrid() const;
  ::Proto::wstring* release_afbstrid();
  ::Proto::wstring* mutable_afbstrid();
  void set_allocated_afbstrid(::Proto::wstring* afbstrid);
  private:
  const ::Proto::wstring& _internal_afbstrid() const;
  ::Proto::wstring* _internal_mutable_afbstrid();
  public:
  void unsafe_arena_set_allocated_afbstrid(
      ::Proto::wstring* afbstrid);
  ::Proto::wstring* unsafe_arena_release_afbstrid();

  // optional .Proto.AfbElementXml deprecated_afbelement = 5;
  bool has_deprecated_afbelement() const;
  private:
  bool _internal_has_deprecated_afbelement() const;
  public:
  void clear_deprecated_afbelement();
  const ::Proto::AfbElementXml& deprecated_afbelement() const;
  ::Proto::AfbElementXml* release_deprecated_afbelement();
  ::Proto::AfbElementXml* mutable_deprecated_afbelement();
  void set_allocated_deprecated_afbelement(::Proto::AfbElementXml* deprecated_afbelement);
  private:
  const ::Proto::AfbElementXml& _internal_deprecated_afbelement() const;
  ::Proto::AfbElementXml* _internal_mutable_deprecated_afbelement();
  public:
  void unsafe_arena_set_allocated_deprecated_afbelement(
      ::Proto::AfbElementXml* deprecated_afbelement);
  ::Proto::AfbElementXml* unsafe_arena_release_deprecated_afbelement();

  // optional .Proto.AfbElementXml afbelement = 7;
  bool has_afbelement() const;
  private:
  bool _internal_has_afbelement() const;
  public:
  void clear_afbelement();
  const ::Proto::AfbElementXml& afbelement() const;
  ::Proto::AfbElementXml* release_afbelement();
  ::Proto::AfbElementXml* mutable_afbelement();
  void set_allocated_afbelement(::Proto::AfbElementXml* afbelement);
  private:
  const ::Proto::AfbElementXml& _internal_afbelement() const;
  ::Proto::AfbElementXml* _internal_mutable_afbelement();
  public:
  void unsafe_arena_set_allocated_afbelement(
      ::Proto::AfbElementXml* afbelement);
  ::Proto::AfbElementXml* unsafe_arena_release_afbelement();

  // optional int32 precision = 4 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemAfb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_label_;
  ::Proto::wstring* afbstrid_;
  ::Proto::AfbElementXml* deprecated_afbelement_;
  ::Proto::AfbElementXml* afbelement_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemConst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemConst) */ {
 public:
  inline SchemaItemConst() : SchemaItemConst(nullptr) {}
  virtual ~SchemaItemConst();

  SchemaItemConst(const SchemaItemConst& from);
  SchemaItemConst(SchemaItemConst&& from) noexcept
    : SchemaItemConst() {
    *this = ::std::move(from);
  }

  inline SchemaItemConst& operator=(const SchemaItemConst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemConst& operator=(SchemaItemConst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemConst& default_instance();

  static inline const SchemaItemConst* internal_default_instance() {
    return reinterpret_cast<const SchemaItemConst*>(
               &_SchemaItemConst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SchemaItemConst& a, SchemaItemConst& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemConst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemConst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemConst* New() const final {
    return CreateMaybeMessage<SchemaItemConst>(nullptr);
  }

  SchemaItemConst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemConst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemConst& from);
  void MergeFrom(const SchemaItemConst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemConst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemConst";
  }
  protected:
  explicit SchemaItemConst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kDiscreteValueFieldNumber = 7,
    kPrecisionFieldNumber = 4,
    kHorzAlignFieldNumber = 5,
    kVertAlignFieldNumber = 6,
    kAnalogFormatFieldNumber = 8,
  };
  // optional int32 type = 1 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 intValue = 2 [default = 0];
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 intvalue() const;
  void set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intvalue() const;
  void _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double floatValue = 3 [default = 0];
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  double floatvalue() const;
  void set_floatvalue(double value);
  private:
  double _internal_floatvalue() const;
  void _internal_set_floatvalue(double value);
  public:

  // optional int32 discreteValue = 7 [default = 0];
  bool has_discretevalue() const;
  private:
  bool _internal_has_discretevalue() const;
  public:
  void clear_discretevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 discretevalue() const;
  void set_discretevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_discretevalue() const;
  void _internal_set_discretevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 precision = 4 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 horzAlign = 5 [default = 4];
  bool has_horzalign() const;
  private:
  bool _internal_has_horzalign() const;
  public:
  void clear_horzalign();
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign() const;
  void set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_horzalign() const;
  void _internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vertAlign = 6 [default = 128];
  bool has_vertalign() const;
  private:
  bool _internal_has_vertalign() const;
  public:
  void clear_vertalign();
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign() const;
  void set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertalign() const;
  void _internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogFormat = 8 [default = 102];
  bool has_analogformat() const;
  private:
  bool _internal_has_analogformat() const;
  public:
  void clear_analogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat() const;
  void set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogformat() const;
  void _internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemConst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 intvalue_;
  double floatvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 discretevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemConnection) */ {
 public:
  inline SchemaItemConnection() : SchemaItemConnection(nullptr) {}
  virtual ~SchemaItemConnection();

  SchemaItemConnection(const SchemaItemConnection& from);
  SchemaItemConnection(SchemaItemConnection&& from) noexcept
    : SchemaItemConnection() {
    *this = ::std::move(from);
  }

  inline SchemaItemConnection& operator=(const SchemaItemConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemConnection& operator=(SchemaItemConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemConnection& default_instance();

  static inline const SchemaItemConnection* internal_default_instance() {
    return reinterpret_cast<const SchemaItemConnection*>(
               &_SchemaItemConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SchemaItemConnection& a, SchemaItemConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemConnection* New() const final {
    return CreateMaybeMessage<SchemaItemConnection>(nullptr);
  }

  SchemaItemConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemConnection& from);
  void MergeFrom(const SchemaItemConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemConnection";
  }
  protected:
  explicit SchemaItemConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionidFieldNumber = 1,
  };
  // optional string connectionid = 1;
  bool has_connectionid() const;
  private:
  bool _internal_has_connectionid() const;
  public:
  void clear_connectionid();
  const std::string& connectionid() const;
  void set_connectionid(const std::string& value);
  void set_connectionid(std::string&& value);
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  std::string* mutable_connectionid();
  std::string* release_connectionid();
  void set_allocated_connectionid(std::string* connectionid);
  private:
  const std::string& _internal_connectionid() const;
  void _internal_set_connectionid(const std::string& value);
  std::string* _internal_mutable_connectionid();
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectionid_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemTransmitter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemTransmitter) */ {
 public:
  inline SchemaItemTransmitter() : SchemaItemTransmitter(nullptr) {}
  virtual ~SchemaItemTransmitter();

  SchemaItemTransmitter(const SchemaItemTransmitter& from);
  SchemaItemTransmitter(SchemaItemTransmitter&& from) noexcept
    : SchemaItemTransmitter() {
    *this = ::std::move(from);
  }

  inline SchemaItemTransmitter& operator=(const SchemaItemTransmitter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemTransmitter& operator=(SchemaItemTransmitter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemTransmitter& default_instance();

  static inline const SchemaItemTransmitter* internal_default_instance() {
    return reinterpret_cast<const SchemaItemTransmitter*>(
               &_SchemaItemTransmitter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SchemaItemTransmitter& a, SchemaItemTransmitter& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemTransmitter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemTransmitter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemTransmitter* New() const final {
    return CreateMaybeMessage<SchemaItemTransmitter>(nullptr);
  }

  SchemaItemTransmitter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemTransmitter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemTransmitter& from);
  void MergeFrom(const SchemaItemTransmitter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemTransmitter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemTransmitter";
  }
  protected:
  explicit SchemaItemTransmitter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinCountFieldNumber = 1,
  };
  // optional int32 pinCount = 1 [default = 1];
  bool has_pincount() const;
  private:
  bool _internal_has_pincount() const;
  public:
  void clear_pincount();
  ::PROTOBUF_NAMESPACE_ID::int32 pincount() const;
  void set_pincount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pincount() const;
  void _internal_set_pincount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemTransmitter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pincount_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemReceiver PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemReceiver) */ {
 public:
  inline SchemaItemReceiver() : SchemaItemReceiver(nullptr) {}
  virtual ~SchemaItemReceiver();

  SchemaItemReceiver(const SchemaItemReceiver& from);
  SchemaItemReceiver(SchemaItemReceiver&& from) noexcept
    : SchemaItemReceiver() {
    *this = ::std::move(from);
  }

  inline SchemaItemReceiver& operator=(const SchemaItemReceiver& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemReceiver& operator=(SchemaItemReceiver&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemReceiver& default_instance();

  static inline const SchemaItemReceiver* internal_default_instance() {
    return reinterpret_cast<const SchemaItemReceiver*>(
               &_SchemaItemReceiver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SchemaItemReceiver& a, SchemaItemReceiver& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemReceiver* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemReceiver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemReceiver* New() const final {
    return CreateMaybeMessage<SchemaItemReceiver>(nullptr);
  }

  SchemaItemReceiver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemReceiver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemReceiver& from);
  void MergeFrom(const SchemaItemReceiver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemReceiver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemReceiver";
  }
  protected:
  explicit SchemaItemReceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalIdsFieldNumber = 2,
    kCustomTextFieldNumber = 16,
    kDataTypeFieldNumber = 3,
    kAnalogFormatFieldNumber = 5,
    kShowValidityFieldNumber = 1,
    kPrecisionFieldNumber = 4,
  };
  // optional string appSignalIds = 2;
  bool has_appsignalids() const;
  private:
  bool _internal_has_appsignalids() const;
  public:
  void clear_appsignalids();
  const std::string& appsignalids() const;
  void set_appsignalids(const std::string& value);
  void set_appsignalids(std::string&& value);
  void set_appsignalids(const char* value);
  void set_appsignalids(const char* value, size_t size);
  std::string* mutable_appsignalids();
  std::string* release_appsignalids();
  void set_allocated_appsignalids(std::string* appsignalids);
  private:
  const std::string& _internal_appsignalids() const;
  void _internal_set_appsignalids(const std::string& value);
  std::string* _internal_mutable_appsignalids();
  public:

  // optional string customText = 16;
  bool has_customtext() const;
  private:
  bool _internal_has_customtext() const;
  public:
  void clear_customtext();
  const std::string& customtext() const;
  void set_customtext(const std::string& value);
  void set_customtext(std::string&& value);
  void set_customtext(const char* value);
  void set_customtext(const char* value, size_t size);
  std::string* mutable_customtext();
  std::string* release_customtext();
  void set_allocated_customtext(std::string* customtext);
  private:
  const std::string& _internal_customtext() const;
  void _internal_set_customtext(const std::string& value);
  std::string* _internal_mutable_customtext();
  public:

  // optional int32 dataType = 3 [default = 0];
  bool has_datatype() const;
  private:
  bool _internal_has_datatype() const;
  public:
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::int32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogFormat = 5 [default = 102];
  bool has_analogformat() const;
  private:
  bool _internal_has_analogformat() const;
  public:
  void clear_analogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat() const;
  void set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogformat() const;
  void _internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool showValidity = 1 [default = true];
  bool has_showvalidity() const;
  private:
  bool _internal_has_showvalidity() const;
  public:
  void clear_showvalidity();
  bool showvalidity() const;
  void set_showvalidity(bool value);
  private:
  bool _internal_showvalidity() const;
  void _internal_set_showvalidity(bool value);
  public:

  // optional int32 precision = 4 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemReceiver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsignalids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customtext_;
  ::PROTOBUF_NAMESPACE_ID::int32 datatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat_;
  bool showvalidity_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemUfb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemUfb) */ {
 public:
  inline SchemaItemUfb() : SchemaItemUfb(nullptr) {}
  virtual ~SchemaItemUfb();

  SchemaItemUfb(const SchemaItemUfb& from);
  SchemaItemUfb(SchemaItemUfb&& from) noexcept
    : SchemaItemUfb() {
    *this = ::std::move(from);
  }

  inline SchemaItemUfb& operator=(const SchemaItemUfb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemUfb& operator=(SchemaItemUfb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemUfb& default_instance();

  static inline const SchemaItemUfb* internal_default_instance() {
    return reinterpret_cast<const SchemaItemUfb*>(
               &_SchemaItemUfb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SchemaItemUfb& a, SchemaItemUfb& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemUfb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemUfb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemUfb* New() const final {
    return CreateMaybeMessage<SchemaItemUfb>(nullptr);
  }

  SchemaItemUfb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemUfb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemUfb& from);
  void MergeFrom(const SchemaItemUfb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemUfb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemUfb";
  }
  protected:
  explicit SchemaItemUfb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUfbSchemaIdFieldNumber = 1,
    kUfbCaptionFieldNumber = 2,
    kUfbVersionFieldNumber = 3,
  };
  // optional string ufbSchemaId = 1;
  bool has_ufbschemaid() const;
  private:
  bool _internal_has_ufbschemaid() const;
  public:
  void clear_ufbschemaid();
  const std::string& ufbschemaid() const;
  void set_ufbschemaid(const std::string& value);
  void set_ufbschemaid(std::string&& value);
  void set_ufbschemaid(const char* value);
  void set_ufbschemaid(const char* value, size_t size);
  std::string* mutable_ufbschemaid();
  std::string* release_ufbschemaid();
  void set_allocated_ufbschemaid(std::string* ufbschemaid);
  private:
  const std::string& _internal_ufbschemaid() const;
  void _internal_set_ufbschemaid(const std::string& value);
  std::string* _internal_mutable_ufbschemaid();
  public:

  // optional string ufbCaption = 2;
  bool has_ufbcaption() const;
  private:
  bool _internal_has_ufbcaption() const;
  public:
  void clear_ufbcaption();
  const std::string& ufbcaption() const;
  void set_ufbcaption(const std::string& value);
  void set_ufbcaption(std::string&& value);
  void set_ufbcaption(const char* value);
  void set_ufbcaption(const char* value, size_t size);
  std::string* mutable_ufbcaption();
  std::string* release_ufbcaption();
  void set_allocated_ufbcaption(std::string* ufbcaption);
  private:
  const std::string& _internal_ufbcaption() const;
  void _internal_set_ufbcaption(const std::string& value);
  std::string* _internal_mutable_ufbcaption();
  public:

  // optional int32 ufbVersion = 3 [default = -1];
  bool has_ufbversion() const;
  private:
  bool _internal_has_ufbversion() const;
  public:
  void clear_ufbversion();
  ::PROTOBUF_NAMESPACE_ID::int32 ufbversion() const;
  void set_ufbversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ufbversion() const;
  void _internal_set_ufbversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemUfb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ufbschemaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ufbcaption_;
  ::PROTOBUF_NAMESPACE_ID::int32 ufbversion_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemTerminator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemTerminator) */ {
 public:
  inline SchemaItemTerminator() : SchemaItemTerminator(nullptr) {}
  virtual ~SchemaItemTerminator();

  SchemaItemTerminator(const SchemaItemTerminator& from);
  SchemaItemTerminator(SchemaItemTerminator&& from) noexcept
    : SchemaItemTerminator() {
    *this = ::std::move(from);
  }

  inline SchemaItemTerminator& operator=(const SchemaItemTerminator& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemTerminator& operator=(SchemaItemTerminator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemTerminator& default_instance();

  static inline const SchemaItemTerminator* internal_default_instance() {
    return reinterpret_cast<const SchemaItemTerminator*>(
               &_SchemaItemTerminator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SchemaItemTerminator& a, SchemaItemTerminator& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemTerminator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemTerminator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemTerminator* New() const final {
    return CreateMaybeMessage<SchemaItemTerminator>(nullptr);
  }

  SchemaItemTerminator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemTerminator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemTerminator& from);
  void MergeFrom(const SchemaItemTerminator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemTerminator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemTerminator";
  }
  protected:
  explicit SchemaItemTerminator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemTerminator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemValue) */ {
 public:
  inline SchemaItemValue() : SchemaItemValue(nullptr) {}
  virtual ~SchemaItemValue();

  SchemaItemValue(const SchemaItemValue& from);
  SchemaItemValue(SchemaItemValue&& from) noexcept
    : SchemaItemValue() {
    *this = ::std::move(from);
  }

  inline SchemaItemValue& operator=(const SchemaItemValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemValue& operator=(SchemaItemValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemValue& default_instance();

  static inline const SchemaItemValue* internal_default_instance() {
    return reinterpret_cast<const SchemaItemValue*>(
               &_SchemaItemValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SchemaItemValue& a, SchemaItemValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemValue* New() const final {
    return CreateMaybeMessage<SchemaItemValue>(nullptr);
  }

  SchemaItemValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemValue& from);
  void MergeFrom(const SchemaItemValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemValue";
  }
  protected:
  explicit SchemaItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalIdsFieldNumber = 1,
    kTextFieldNumber = 8,
    kFontFieldNumber = 9,
    kSignalSourceFieldNumber = 2,
    kLineColorFieldNumber = 5,
    kLineWeightFieldNumber = 4,
    kFillColorFieldNumber = 6,
    kTextColorFieldNumber = 7,
    kAnalogFormatFieldNumber = 14,
    kDrawRectFieldNumber = 10,
    kHorzAlignFieldNumber = 11,
    kVertAlignFieldNumber = 12,
    kPrecisionFieldNumber = 13,
  };
  // optional string signalIds = 1;
  bool has_signalids() const;
  private:
  bool _internal_has_signalids() const;
  public:
  void clear_signalids();
  const std::string& signalids() const;
  void set_signalids(const std::string& value);
  void set_signalids(std::string&& value);
  void set_signalids(const char* value);
  void set_signalids(const char* value, size_t size);
  std::string* mutable_signalids();
  std::string* release_signalids();
  void set_allocated_signalids(std::string* signalids);
  private:
  const std::string& _internal_signalids() const;
  void _internal_set_signalids(const std::string& value);
  std::string* _internal_mutable_signalids();
  public:

  // optional string text = 8;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional .Proto.FontParam font = 9;
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  const ::Proto::FontParam& font() const;
  ::Proto::FontParam* release_font();
  ::Proto::FontParam* mutable_font();
  void set_allocated_font(::Proto::FontParam* font);
  private:
  const ::Proto::FontParam& _internal_font() const;
  ::Proto::FontParam* _internal_mutable_font();
  public:
  void unsafe_arena_set_allocated_font(
      ::Proto::FontParam* font);
  ::Proto::FontParam* unsafe_arena_release_font();

  // optional int32 signalSource = 2 [default = 0];
  bool has_signalsource() const;
  private:
  bool _internal_has_signalsource() const;
  public:
  void clear_signalsource();
  ::PROTOBUF_NAMESPACE_ID::int32 signalsource() const;
  void set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalsource() const;
  void _internal_set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 lineColor = 5;
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double lineWeight = 4;
  bool has_lineweight() const;
  private:
  bool _internal_has_lineweight() const;
  public:
  void clear_lineweight();
  double lineweight() const;
  void set_lineweight(double value);
  private:
  double _internal_lineweight() const;
  void _internal_set_lineweight(double value);
  public:

  // optional uint32 fillColor = 6;
  bool has_fillcolor() const;
  private:
  bool _internal_has_fillcolor() const;
  public:
  void clear_fillcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor() const;
  void set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fillcolor() const;
  void _internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 textColor = 7;
  bool has_textcolor() const;
  private:
  bool _internal_has_textcolor() const;
  public:
  void clear_textcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 textcolor() const;
  void set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_textcolor() const;
  void _internal_set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 analogFormat = 14 [default = 102];
  bool has_analogformat() const;
  private:
  bool _internal_has_analogformat() const;
  public:
  void clear_analogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat() const;
  void set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogformat() const;
  void _internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool drawRect = 10 [default = true];
  bool has_drawrect() const;
  private:
  bool _internal_has_drawrect() const;
  public:
  void clear_drawrect();
  bool drawrect() const;
  void set_drawrect(bool value);
  private:
  bool _internal_drawrect() const;
  void _internal_set_drawrect(bool value);
  public:

  // optional int32 horzAlign = 11 [default = 4];
  bool has_horzalign() const;
  private:
  bool _internal_has_horzalign() const;
  public:
  void clear_horzalign();
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign() const;
  void set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_horzalign() const;
  void _internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vertAlign = 12 [default = 128];
  bool has_vertalign() const;
  private:
  bool _internal_has_vertalign() const;
  public:
  void clear_vertalign();
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign() const;
  void set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertalign() const;
  void _internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 precision = 13 [default = -1];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::Proto::FontParam* font_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalsource_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  double lineweight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 textcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat_;
  bool drawrect_;
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemImageValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemImageValue) */ {
 public:
  inline SchemaItemImageValue() : SchemaItemImageValue(nullptr) {}
  virtual ~SchemaItemImageValue();

  SchemaItemImageValue(const SchemaItemImageValue& from);
  SchemaItemImageValue(SchemaItemImageValue&& from) noexcept
    : SchemaItemImageValue() {
    *this = ::std::move(from);
  }

  inline SchemaItemImageValue& operator=(const SchemaItemImageValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemImageValue& operator=(SchemaItemImageValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemImageValue& default_instance();

  static inline const SchemaItemImageValue* internal_default_instance() {
    return reinterpret_cast<const SchemaItemImageValue*>(
               &_SchemaItemImageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SchemaItemImageValue& a, SchemaItemImageValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemImageValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemImageValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemImageValue* New() const final {
    return CreateMaybeMessage<SchemaItemImageValue>(nullptr);
  }

  SchemaItemImageValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemImageValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemImageValue& from);
  void MergeFrom(const SchemaItemImageValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemImageValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemImageValue";
  }
  protected:
  explicit SchemaItemImageValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 14,
    kSignalIdsFieldNumber = 1,
    kCurrentImageIdFieldNumber = 3,
    kLineWeightFieldNumber = 6,
    kSignalSourceFieldNumber = 2,
    kDrawRectFieldNumber = 9,
    kFillRectFieldNumber = 10,
    kLineColorFieldNumber = 7,
    kFillColorFieldNumber = 8,
  };
  // repeated .Proto.ImageItem images = 14;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::Proto::ImageItem* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ImageItem >*
      mutable_images();
  private:
  const ::Proto::ImageItem& _internal_images(int index) const;
  ::Proto::ImageItem* _internal_add_images();
  public:
  const ::Proto::ImageItem& images(int index) const;
  ::Proto::ImageItem* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ImageItem >&
      images() const;

  // optional string signalIds = 1;
  bool has_signalids() const;
  private:
  bool _internal_has_signalids() const;
  public:
  void clear_signalids();
  const std::string& signalids() const;
  void set_signalids(const std::string& value);
  void set_signalids(std::string&& value);
  void set_signalids(const char* value);
  void set_signalids(const char* value, size_t size);
  std::string* mutable_signalids();
  std::string* release_signalids();
  void set_allocated_signalids(std::string* signalids);
  private:
  const std::string& _internal_signalids() const;
  void _internal_set_signalids(const std::string& value);
  std::string* _internal_mutable_signalids();
  public:

  // optional string currentImageId = 3;
  bool has_currentimageid() const;
  private:
  bool _internal_has_currentimageid() const;
  public:
  void clear_currentimageid();
  const std::string& currentimageid() const;
  void set_currentimageid(const std::string& value);
  void set_currentimageid(std::string&& value);
  void set_currentimageid(const char* value);
  void set_currentimageid(const char* value, size_t size);
  std::string* mutable_currentimageid();
  std::string* release_currentimageid();
  void set_allocated_currentimageid(std::string* currentimageid);
  private:
  const std::string& _internal_currentimageid() const;
  void _internal_set_currentimageid(const std::string& value);
  std::string* _internal_mutable_currentimageid();
  public:

  // optional double lineWeight = 6 [default = 0];
  bool has_lineweight() const;
  private:
  bool _internal_has_lineweight() const;
  public:
  void clear_lineweight();
  double lineweight() const;
  void set_lineweight(double value);
  private:
  double _internal_lineweight() const;
  void _internal_set_lineweight(double value);
  public:

  // optional int32 signalSource = 2 [default = 0];
  bool has_signalsource() const;
  private:
  bool _internal_has_signalsource() const;
  public:
  void clear_signalsource();
  ::PROTOBUF_NAMESPACE_ID::int32 signalsource() const;
  void set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalsource() const;
  void _internal_set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool drawRect = 9 [default = false];
  bool has_drawrect() const;
  private:
  bool _internal_has_drawrect() const;
  public:
  void clear_drawrect();
  bool drawrect() const;
  void set_drawrect(bool value);
  private:
  bool _internal_drawrect() const;
  void _internal_set_drawrect(bool value);
  public:

  // optional bool fillRect = 10 [default = false];
  bool has_fillrect() const;
  private:
  bool _internal_has_fillrect() const;
  public:
  void clear_fillrect();
  bool fillrect() const;
  void set_fillrect(bool value);
  private:
  bool _internal_fillrect() const;
  void _internal_set_fillrect(bool value);
  public:

  // optional uint32 lineColor = 7 [default = 4278190080];
  bool has_linecolor() const;
  private:
  bool _internal_has_linecolor() const;
  public:
  void clear_linecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor() const;
  void set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolor() const;
  void _internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fillColor = 8 [default = 4278190272];
  bool has_fillcolor() const;
  private:
  bool _internal_has_fillcolor() const;
  public:
  void clear_fillcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor() const;
  void set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fillcolor() const;
  void _internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemImageValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ImageItem > images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentimageid_;
  double lineweight_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalsource_;
  bool drawrect_;
  bool fillrect_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fillcolor_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemBus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemBus) */ {
 public:
  inline SchemaItemBus() : SchemaItemBus(nullptr) {}
  virtual ~SchemaItemBus();

  SchemaItemBus(const SchemaItemBus& from);
  SchemaItemBus(SchemaItemBus&& from) noexcept
    : SchemaItemBus() {
    *this = ::std::move(from);
  }

  inline SchemaItemBus& operator=(const SchemaItemBus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemBus& operator=(SchemaItemBus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemBus& default_instance();

  static inline const SchemaItemBus* internal_default_instance() {
    return reinterpret_cast<const SchemaItemBus*>(
               &_SchemaItemBus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SchemaItemBus& a, SchemaItemBus& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemBus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemBus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemBus* New() const final {
    return CreateMaybeMessage<SchemaItemBus>(nullptr);
  }

  SchemaItemBus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemBus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemBus& from);
  void MergeFrom(const SchemaItemBus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemBus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemBus";
  }
  protected:
  explicit SchemaItemBus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusTypeIdFieldNumber = 2,
    kBusFieldNumber = 5,
    kBusTypeHashFieldNumber = 3,
  };
  // optional string busTypeId = 2;
  bool has_bustypeid() const;
  private:
  bool _internal_has_bustypeid() const;
  public:
  void clear_bustypeid();
  const std::string& bustypeid() const;
  void set_bustypeid(const std::string& value);
  void set_bustypeid(std::string&& value);
  void set_bustypeid(const char* value);
  void set_bustypeid(const char* value, size_t size);
  std::string* mutable_bustypeid();
  std::string* release_bustypeid();
  void set_allocated_bustypeid(std::string* bustypeid);
  private:
  const std::string& _internal_bustypeid() const;
  void _internal_set_bustypeid(const std::string& value);
  std::string* _internal_mutable_bustypeid();
  public:

  // optional .Proto.Bus bus = 5;
  bool has_bus() const;
  private:
  bool _internal_has_bus() const;
  public:
  void clear_bus();
  const ::Proto::Bus& bus() const;
  ::Proto::Bus* release_bus();
  ::Proto::Bus* mutable_bus();
  void set_allocated_bus(::Proto::Bus* bus);
  private:
  const ::Proto::Bus& _internal_bus() const;
  ::Proto::Bus* _internal_mutable_bus();
  public:
  void unsafe_arena_set_allocated_bus(
      ::Proto::Bus* bus);
  ::Proto::Bus* unsafe_arena_release_bus();

  // optional fixed64 busTypeHash = 3;
  bool has_bustypehash() const;
  private:
  bool _internal_has_bustypehash() const;
  public:
  void clear_bustypehash();
  ::PROTOBUF_NAMESPACE_ID::uint64 bustypehash() const;
  void set_bustypehash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bustypehash() const;
  void _internal_set_bustypehash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemBus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bustypeid_;
  ::Proto::Bus* bus_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bustypehash_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemBusComposer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemBusComposer) */ {
 public:
  inline SchemaItemBusComposer() : SchemaItemBusComposer(nullptr) {}
  virtual ~SchemaItemBusComposer();

  SchemaItemBusComposer(const SchemaItemBusComposer& from);
  SchemaItemBusComposer(SchemaItemBusComposer&& from) noexcept
    : SchemaItemBusComposer() {
    *this = ::std::move(from);
  }

  inline SchemaItemBusComposer& operator=(const SchemaItemBusComposer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemBusComposer& operator=(SchemaItemBusComposer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemBusComposer& default_instance();

  static inline const SchemaItemBusComposer* internal_default_instance() {
    return reinterpret_cast<const SchemaItemBusComposer*>(
               &_SchemaItemBusComposer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SchemaItemBusComposer& a, SchemaItemBusComposer& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemBusComposer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemBusComposer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemBusComposer* New() const final {
    return CreateMaybeMessage<SchemaItemBusComposer>(nullptr);
  }

  SchemaItemBusComposer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemBusComposer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemBusComposer& from);
  void MergeFrom(const SchemaItemBusComposer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemBusComposer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemBusComposer";
  }
  protected:
  explicit SchemaItemBusComposer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemBusComposer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemBusExtractor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemBusExtractor) */ {
 public:
  inline SchemaItemBusExtractor() : SchemaItemBusExtractor(nullptr) {}
  virtual ~SchemaItemBusExtractor();

  SchemaItemBusExtractor(const SchemaItemBusExtractor& from);
  SchemaItemBusExtractor(SchemaItemBusExtractor&& from) noexcept
    : SchemaItemBusExtractor() {
    *this = ::std::move(from);
  }

  inline SchemaItemBusExtractor& operator=(const SchemaItemBusExtractor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemBusExtractor& operator=(SchemaItemBusExtractor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemBusExtractor& default_instance();

  static inline const SchemaItemBusExtractor* internal_default_instance() {
    return reinterpret_cast<const SchemaItemBusExtractor*>(
               &_SchemaItemBusExtractor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SchemaItemBusExtractor& a, SchemaItemBusExtractor& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemBusExtractor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemBusExtractor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemBusExtractor* New() const final {
    return CreateMaybeMessage<SchemaItemBusExtractor>(nullptr);
  }

  SchemaItemBusExtractor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemBusExtractor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemBusExtractor& from);
  void MergeFrom(const SchemaItemBusExtractor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemBusExtractor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemBusExtractor";
  }
  protected:
  explicit SchemaItemBusExtractor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
  };
  // repeated .Proto.Property properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::Proto::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >*
      mutable_properties();
  private:
  const ::Proto::Property& _internal_properties(int index) const;
  ::Proto::Property* _internal_add_properties();
  public:
  const ::Proto::Property& properties(int index) const;
  ::Proto::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >&
      properties() const;

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemBusExtractor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemLoopback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemLoopback) */ {
 public:
  inline SchemaItemLoopback() : SchemaItemLoopback(nullptr) {}
  virtual ~SchemaItemLoopback();

  SchemaItemLoopback(const SchemaItemLoopback& from);
  SchemaItemLoopback(SchemaItemLoopback&& from) noexcept
    : SchemaItemLoopback() {
    *this = ::std::move(from);
  }

  inline SchemaItemLoopback& operator=(const SchemaItemLoopback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemLoopback& operator=(SchemaItemLoopback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemLoopback& default_instance();

  static inline const SchemaItemLoopback* internal_default_instance() {
    return reinterpret_cast<const SchemaItemLoopback*>(
               &_SchemaItemLoopback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SchemaItemLoopback& a, SchemaItemLoopback& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemLoopback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemLoopback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemLoopback* New() const final {
    return CreateMaybeMessage<SchemaItemLoopback>(nullptr);
  }

  SchemaItemLoopback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemLoopback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemLoopback& from);
  void MergeFrom(const SchemaItemLoopback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemLoopback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemLoopback";
  }
  protected:
  explicit SchemaItemLoopback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopbackIdFieldNumber = 2,
  };
  // optional string loopbackId = 2;
  bool has_loopbackid() const;
  private:
  bool _internal_has_loopbackid() const;
  public:
  void clear_loopbackid();
  const std::string& loopbackid() const;
  void set_loopbackid(const std::string& value);
  void set_loopbackid(std::string&& value);
  void set_loopbackid(const char* value);
  void set_loopbackid(const char* value, size_t size);
  std::string* mutable_loopbackid();
  std::string* release_loopbackid();
  void set_allocated_loopbackid(std::string* loopbackid);
  private:
  const std::string& _internal_loopbackid() const;
  void _internal_set_loopbackid(const std::string& value);
  std::string* _internal_mutable_loopbackid();
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemLoopback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loopbackid_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemLoopbackSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemLoopbackSource) */ {
 public:
  inline SchemaItemLoopbackSource() : SchemaItemLoopbackSource(nullptr) {}
  virtual ~SchemaItemLoopbackSource();

  SchemaItemLoopbackSource(const SchemaItemLoopbackSource& from);
  SchemaItemLoopbackSource(SchemaItemLoopbackSource&& from) noexcept
    : SchemaItemLoopbackSource() {
    *this = ::std::move(from);
  }

  inline SchemaItemLoopbackSource& operator=(const SchemaItemLoopbackSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemLoopbackSource& operator=(SchemaItemLoopbackSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemLoopbackSource& default_instance();

  static inline const SchemaItemLoopbackSource* internal_default_instance() {
    return reinterpret_cast<const SchemaItemLoopbackSource*>(
               &_SchemaItemLoopbackSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SchemaItemLoopbackSource& a, SchemaItemLoopbackSource& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemLoopbackSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemLoopbackSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemLoopbackSource* New() const final {
    return CreateMaybeMessage<SchemaItemLoopbackSource>(nullptr);
  }

  SchemaItemLoopbackSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemLoopbackSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemLoopbackSource& from);
  void MergeFrom(const SchemaItemLoopbackSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemLoopbackSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemLoopbackSource";
  }
  protected:
  explicit SchemaItemLoopbackSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemLoopbackSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemLoopbackTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemLoopbackTarget) */ {
 public:
  inline SchemaItemLoopbackTarget() : SchemaItemLoopbackTarget(nullptr) {}
  virtual ~SchemaItemLoopbackTarget();

  SchemaItemLoopbackTarget(const SchemaItemLoopbackTarget& from);
  SchemaItemLoopbackTarget(SchemaItemLoopbackTarget&& from) noexcept
    : SchemaItemLoopbackTarget() {
    *this = ::std::move(from);
  }

  inline SchemaItemLoopbackTarget& operator=(const SchemaItemLoopbackTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemLoopbackTarget& operator=(SchemaItemLoopbackTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemLoopbackTarget& default_instance();

  static inline const SchemaItemLoopbackTarget* internal_default_instance() {
    return reinterpret_cast<const SchemaItemLoopbackTarget*>(
               &_SchemaItemLoopbackTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SchemaItemLoopbackTarget& a, SchemaItemLoopbackTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemLoopbackTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemLoopbackTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemLoopbackTarget* New() const final {
    return CreateMaybeMessage<SchemaItemLoopbackTarget>(nullptr);
  }

  SchemaItemLoopbackTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemLoopbackTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemLoopbackTarget& from);
  void MergeFrom(const SchemaItemLoopbackTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemLoopbackTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemLoopbackTarget";
  }
  protected:
  explicit SchemaItemLoopbackTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemLoopbackTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemControl) */ {
 public:
  inline SchemaItemControl() : SchemaItemControl(nullptr) {}
  virtual ~SchemaItemControl();

  SchemaItemControl(const SchemaItemControl& from);
  SchemaItemControl(SchemaItemControl&& from) noexcept
    : SchemaItemControl() {
    *this = ::std::move(from);
  }

  inline SchemaItemControl& operator=(const SchemaItemControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemControl& operator=(SchemaItemControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemControl& default_instance();

  static inline const SchemaItemControl* internal_default_instance() {
    return reinterpret_cast<const SchemaItemControl*>(
               &_SchemaItemControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SchemaItemControl& a, SchemaItemControl& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemControl* New() const final {
    return CreateMaybeMessage<SchemaItemControl>(nullptr);
  }

  SchemaItemControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemControl& from);
  void MergeFrom(const SchemaItemControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemControl";
  }
  protected:
  explicit SchemaItemControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleSheetFieldNumber = 1,
    kToolTipFieldNumber = 2,
  };
  // optional string styleSheet = 1;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const std::string& stylesheet() const;
  void set_stylesheet(const std::string& value);
  void set_stylesheet(std::string&& value);
  void set_stylesheet(const char* value);
  void set_stylesheet(const char* value, size_t size);
  std::string* mutable_stylesheet();
  std::string* release_stylesheet();
  void set_allocated_stylesheet(std::string* stylesheet);
  private:
  const std::string& _internal_stylesheet() const;
  void _internal_set_stylesheet(const std::string& value);
  std::string* _internal_mutable_stylesheet();
  public:

  // optional string toolTip = 2;
  bool has_tooltip() const;
  private:
  bool _internal_has_tooltip() const;
  public:
  void clear_tooltip();
  const std::string& tooltip() const;
  void set_tooltip(const std::string& value);
  void set_tooltip(std::string&& value);
  void set_tooltip(const char* value);
  void set_tooltip(const char* value, size_t size);
  std::string* mutable_tooltip();
  std::string* release_tooltip();
  void set_allocated_tooltip(std::string* tooltip);
  private:
  const std::string& _internal_tooltip() const;
  void _internal_set_tooltip(const std::string& value);
  std::string* _internal_mutable_tooltip();
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stylesheet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tooltip_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemPushButton PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemPushButton) */ {
 public:
  inline SchemaItemPushButton() : SchemaItemPushButton(nullptr) {}
  virtual ~SchemaItemPushButton();

  SchemaItemPushButton(const SchemaItemPushButton& from);
  SchemaItemPushButton(SchemaItemPushButton&& from) noexcept
    : SchemaItemPushButton() {
    *this = ::std::move(from);
  }

  inline SchemaItemPushButton& operator=(const SchemaItemPushButton& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemPushButton& operator=(SchemaItemPushButton&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemPushButton& default_instance();

  static inline const SchemaItemPushButton* internal_default_instance() {
    return reinterpret_cast<const SchemaItemPushButton*>(
               &_SchemaItemPushButton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SchemaItemPushButton& a, SchemaItemPushButton& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemPushButton* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemPushButton* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemPushButton* New() const final {
    return CreateMaybeMessage<SchemaItemPushButton>(nullptr);
  }

  SchemaItemPushButton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemPushButton>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemPushButton& from);
  void MergeFrom(const SchemaItemPushButton& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemPushButton* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemPushButton";
  }
  protected:
  explicit SchemaItemPushButton(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kScriptAfterCreateFieldNumber = 21,
    kScriptClickedFieldNumber = 22,
    kScriptPressedFieldNumber = 23,
    kScriptReleasedFieldNumber = 24,
    kScriptToggledFieldNumber = 25,
    kCheckableFieldNumber = 2,
    kCheckedDefaultFieldNumber = 3,
    kAutoRepeatFieldNumber = 4,
    kAutoRepeatDelayFieldNumber = 5,
    kAutoRepeatIntervalFieldNumber = 6,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string scriptAfterCreate = 21;
  bool has_scriptaftercreate() const;
  private:
  bool _internal_has_scriptaftercreate() const;
  public:
  void clear_scriptaftercreate();
  const std::string& scriptaftercreate() const;
  void set_scriptaftercreate(const std::string& value);
  void set_scriptaftercreate(std::string&& value);
  void set_scriptaftercreate(const char* value);
  void set_scriptaftercreate(const char* value, size_t size);
  std::string* mutable_scriptaftercreate();
  std::string* release_scriptaftercreate();
  void set_allocated_scriptaftercreate(std::string* scriptaftercreate);
  private:
  const std::string& _internal_scriptaftercreate() const;
  void _internal_set_scriptaftercreate(const std::string& value);
  std::string* _internal_mutable_scriptaftercreate();
  public:

  // optional string scriptClicked = 22;
  bool has_scriptclicked() const;
  private:
  bool _internal_has_scriptclicked() const;
  public:
  void clear_scriptclicked();
  const std::string& scriptclicked() const;
  void set_scriptclicked(const std::string& value);
  void set_scriptclicked(std::string&& value);
  void set_scriptclicked(const char* value);
  void set_scriptclicked(const char* value, size_t size);
  std::string* mutable_scriptclicked();
  std::string* release_scriptclicked();
  void set_allocated_scriptclicked(std::string* scriptclicked);
  private:
  const std::string& _internal_scriptclicked() const;
  void _internal_set_scriptclicked(const std::string& value);
  std::string* _internal_mutable_scriptclicked();
  public:

  // optional string scriptPressed = 23;
  bool has_scriptpressed() const;
  private:
  bool _internal_has_scriptpressed() const;
  public:
  void clear_scriptpressed();
  const std::string& scriptpressed() const;
  void set_scriptpressed(const std::string& value);
  void set_scriptpressed(std::string&& value);
  void set_scriptpressed(const char* value);
  void set_scriptpressed(const char* value, size_t size);
  std::string* mutable_scriptpressed();
  std::string* release_scriptpressed();
  void set_allocated_scriptpressed(std::string* scriptpressed);
  private:
  const std::string& _internal_scriptpressed() const;
  void _internal_set_scriptpressed(const std::string& value);
  std::string* _internal_mutable_scriptpressed();
  public:

  // optional string scriptReleased = 24;
  bool has_scriptreleased() const;
  private:
  bool _internal_has_scriptreleased() const;
  public:
  void clear_scriptreleased();
  const std::string& scriptreleased() const;
  void set_scriptreleased(const std::string& value);
  void set_scriptreleased(std::string&& value);
  void set_scriptreleased(const char* value);
  void set_scriptreleased(const char* value, size_t size);
  std::string* mutable_scriptreleased();
  std::string* release_scriptreleased();
  void set_allocated_scriptreleased(std::string* scriptreleased);
  private:
  const std::string& _internal_scriptreleased() const;
  void _internal_set_scriptreleased(const std::string& value);
  std::string* _internal_mutable_scriptreleased();
  public:

  // optional string scriptToggled = 25;
  bool has_scripttoggled() const;
  private:
  bool _internal_has_scripttoggled() const;
  public:
  void clear_scripttoggled();
  const std::string& scripttoggled() const;
  void set_scripttoggled(const std::string& value);
  void set_scripttoggled(std::string&& value);
  void set_scripttoggled(const char* value);
  void set_scripttoggled(const char* value, size_t size);
  std::string* mutable_scripttoggled();
  std::string* release_scripttoggled();
  void set_allocated_scripttoggled(std::string* scripttoggled);
  private:
  const std::string& _internal_scripttoggled() const;
  void _internal_set_scripttoggled(const std::string& value);
  std::string* _internal_mutable_scripttoggled();
  public:

  // optional bool checkable = 2;
  bool has_checkable() const;
  private:
  bool _internal_has_checkable() const;
  public:
  void clear_checkable();
  bool checkable() const;
  void set_checkable(bool value);
  private:
  bool _internal_checkable() const;
  void _internal_set_checkable(bool value);
  public:

  // optional bool checkedDefault = 3;
  bool has_checkeddefault() const;
  private:
  bool _internal_has_checkeddefault() const;
  public:
  void clear_checkeddefault();
  bool checkeddefault() const;
  void set_checkeddefault(bool value);
  private:
  bool _internal_checkeddefault() const;
  void _internal_set_checkeddefault(bool value);
  public:

  // optional bool autoRepeat = 4;
  bool has_autorepeat() const;
  private:
  bool _internal_has_autorepeat() const;
  public:
  void clear_autorepeat();
  bool autorepeat() const;
  void set_autorepeat(bool value);
  private:
  bool _internal_autorepeat() const;
  void _internal_set_autorepeat(bool value);
  public:

  // optional int32 autoRepeatDelay = 5;
  bool has_autorepeatdelay() const;
  private:
  bool _internal_has_autorepeatdelay() const;
  public:
  void clear_autorepeatdelay();
  ::PROTOBUF_NAMESPACE_ID::int32 autorepeatdelay() const;
  void set_autorepeatdelay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_autorepeatdelay() const;
  void _internal_set_autorepeatdelay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 autoRepeatInterval = 6;
  bool has_autorepeatinterval() const;
  private:
  bool _internal_has_autorepeatinterval() const;
  public:
  void clear_autorepeatinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 autorepeatinterval() const;
  void set_autorepeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_autorepeatinterval() const;
  void _internal_set_autorepeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemPushButton)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptaftercreate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptclicked_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpressed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptreleased_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scripttoggled_;
  bool checkable_;
  bool checkeddefault_;
  bool autorepeat_;
  ::PROTOBUF_NAMESPACE_ID::int32 autorepeatdelay_;
  ::PROTOBUF_NAMESPACE_ID::int32 autorepeatinterval_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaItemLineEdit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaItemLineEdit) */ {
 public:
  inline SchemaItemLineEdit() : SchemaItemLineEdit(nullptr) {}
  virtual ~SchemaItemLineEdit();

  SchemaItemLineEdit(const SchemaItemLineEdit& from);
  SchemaItemLineEdit(SchemaItemLineEdit&& from) noexcept
    : SchemaItemLineEdit() {
    *this = ::std::move(from);
  }

  inline SchemaItemLineEdit& operator=(const SchemaItemLineEdit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaItemLineEdit& operator=(SchemaItemLineEdit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaItemLineEdit& default_instance();

  static inline const SchemaItemLineEdit* internal_default_instance() {
    return reinterpret_cast<const SchemaItemLineEdit*>(
               &_SchemaItemLineEdit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SchemaItemLineEdit& a, SchemaItemLineEdit& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaItemLineEdit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaItemLineEdit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaItemLineEdit* New() const final {
    return CreateMaybeMessage<SchemaItemLineEdit>(nullptr);
  }

  SchemaItemLineEdit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaItemLineEdit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaItemLineEdit& from);
  void MergeFrom(const SchemaItemLineEdit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaItemLineEdit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaItemLineEdit";
  }
  protected:
  explicit SchemaItemLineEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kPlaceholderTextFieldNumber = 5,
    kScriptAfterCreateFieldNumber = 21,
    kScriptEditingFinishedFieldNumber = 22,
    kScriptReturnPressedFieldNumber = 23,
    kScriptTextChangedFieldNumber = 24,
    kHorzAlignFieldNumber = 2,
    kVertAlignFieldNumber = 3,
    kMaxLengthFieldNumber = 4,
    kReadOnlyFieldNumber = 6,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string placeholderText = 5;
  bool has_placeholdertext() const;
  private:
  bool _internal_has_placeholdertext() const;
  public:
  void clear_placeholdertext();
  const std::string& placeholdertext() const;
  void set_placeholdertext(const std::string& value);
  void set_placeholdertext(std::string&& value);
  void set_placeholdertext(const char* value);
  void set_placeholdertext(const char* value, size_t size);
  std::string* mutable_placeholdertext();
  std::string* release_placeholdertext();
  void set_allocated_placeholdertext(std::string* placeholdertext);
  private:
  const std::string& _internal_placeholdertext() const;
  void _internal_set_placeholdertext(const std::string& value);
  std::string* _internal_mutable_placeholdertext();
  public:

  // optional string scriptAfterCreate = 21;
  bool has_scriptaftercreate() const;
  private:
  bool _internal_has_scriptaftercreate() const;
  public:
  void clear_scriptaftercreate();
  const std::string& scriptaftercreate() const;
  void set_scriptaftercreate(const std::string& value);
  void set_scriptaftercreate(std::string&& value);
  void set_scriptaftercreate(const char* value);
  void set_scriptaftercreate(const char* value, size_t size);
  std::string* mutable_scriptaftercreate();
  std::string* release_scriptaftercreate();
  void set_allocated_scriptaftercreate(std::string* scriptaftercreate);
  private:
  const std::string& _internal_scriptaftercreate() const;
  void _internal_set_scriptaftercreate(const std::string& value);
  std::string* _internal_mutable_scriptaftercreate();
  public:

  // optional string scriptEditingFinished = 22;
  bool has_scripteditingfinished() const;
  private:
  bool _internal_has_scripteditingfinished() const;
  public:
  void clear_scripteditingfinished();
  const std::string& scripteditingfinished() const;
  void set_scripteditingfinished(const std::string& value);
  void set_scripteditingfinished(std::string&& value);
  void set_scripteditingfinished(const char* value);
  void set_scripteditingfinished(const char* value, size_t size);
  std::string* mutable_scripteditingfinished();
  std::string* release_scripteditingfinished();
  void set_allocated_scripteditingfinished(std::string* scripteditingfinished);
  private:
  const std::string& _internal_scripteditingfinished() const;
  void _internal_set_scripteditingfinished(const std::string& value);
  std::string* _internal_mutable_scripteditingfinished();
  public:

  // optional string scriptReturnPressed = 23;
  bool has_scriptreturnpressed() const;
  private:
  bool _internal_has_scriptreturnpressed() const;
  public:
  void clear_scriptreturnpressed();
  const std::string& scriptreturnpressed() const;
  void set_scriptreturnpressed(const std::string& value);
  void set_scriptreturnpressed(std::string&& value);
  void set_scriptreturnpressed(const char* value);
  void set_scriptreturnpressed(const char* value, size_t size);
  std::string* mutable_scriptreturnpressed();
  std::string* release_scriptreturnpressed();
  void set_allocated_scriptreturnpressed(std::string* scriptreturnpressed);
  private:
  const std::string& _internal_scriptreturnpressed() const;
  void _internal_set_scriptreturnpressed(const std::string& value);
  std::string* _internal_mutable_scriptreturnpressed();
  public:

  // optional string scriptTextChanged = 24;
  bool has_scripttextchanged() const;
  private:
  bool _internal_has_scripttextchanged() const;
  public:
  void clear_scripttextchanged();
  const std::string& scripttextchanged() const;
  void set_scripttextchanged(const std::string& value);
  void set_scripttextchanged(std::string&& value);
  void set_scripttextchanged(const char* value);
  void set_scripttextchanged(const char* value, size_t size);
  std::string* mutable_scripttextchanged();
  std::string* release_scripttextchanged();
  void set_allocated_scripttextchanged(std::string* scripttextchanged);
  private:
  const std::string& _internal_scripttextchanged() const;
  void _internal_set_scripttextchanged(const std::string& value);
  std::string* _internal_mutable_scripttextchanged();
  public:

  // optional int32 horzAlign = 2;
  bool has_horzalign() const;
  private:
  bool _internal_has_horzalign() const;
  public:
  void clear_horzalign();
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign() const;
  void set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_horzalign() const;
  void _internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vertAlign = 3;
  bool has_vertalign() const;
  private:
  bool _internal_has_vertalign() const;
  public:
  void clear_vertalign();
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign() const;
  void set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertalign() const;
  void _internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 maxLength = 4;
  bool has_maxlength() const;
  private:
  bool _internal_has_maxlength() const;
  public:
  void clear_maxlength();
  ::PROTOBUF_NAMESPACE_ID::int32 maxlength() const;
  void set_maxlength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxlength() const;
  void _internal_set_maxlength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool readOnly = 6;
  bool has_readonly() const;
  private:
  bool _internal_has_readonly() const;
  public:
  void clear_readonly();
  bool readonly() const;
  void set_readonly(bool value);
  private:
  bool _internal_readonly() const;
  void _internal_set_readonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaItemLineEdit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholdertext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptaftercreate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scripteditingfinished_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptreturnpressed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scripttextchanged_;
  ::PROTOBUF_NAMESPACE_ID::int32 horzalign_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertalign_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxlength_;
  bool readonly_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceObject) */ {
 public:
  inline DeviceObject() : DeviceObject(nullptr) {}
  virtual ~DeviceObject();

  DeviceObject(const DeviceObject& from);
  DeviceObject(DeviceObject&& from) noexcept
    : DeviceObject() {
    *this = ::std::move(from);
  }

  inline DeviceObject& operator=(const DeviceObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceObject& operator=(DeviceObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceObject& default_instance();

  static inline const DeviceObject* internal_default_instance() {
    return reinterpret_cast<const DeviceObject*>(
               &_DeviceObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(DeviceObject& a, DeviceObject& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceObject* New() const final {
    return CreateMaybeMessage<DeviceObject>(nullptr);
  }

  DeviceObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceObject& from);
  void MergeFrom(const DeviceObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceObject";
  }
  protected:
  explicit DeviceObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 7,
    kChildrenFieldNumber = 200,
    kSpecificPropertiesStructFieldNumber = 6,
    kUuidFieldNumber = 1,
    kEquipmentIdFieldNumber = 2,
    kCaptionFieldNumber = 3,
    kChildRestrictionFieldNumber = 4,
    kPresetNameFieldNumber = 34,
    kPresetObjectUuidFieldNumber = 35,
    kRootFieldNumber = 100,
    kSystemFieldNumber = 101,
    kRackFieldNumber = 102,
    kChassisFieldNumber = 103,
    kModuleFieldNumber = 104,
    kControllerFieldNumber = 105,
    kSignalFieldNumber = 106,
    kWorkstationFieldNumber = 107,
    kSoftwareFieldNumber = 108,
    kChildCountHintFieldNumber = 36,
    kPlaceFieldNumber = 5,
    kPresetFieldNumber = 32,
    kPresetRootFieldNumber = 33,
  };
  // repeated .Proto.Property properties = 7;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::Proto::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >*
      mutable_properties();
  private:
  const ::Proto::Property& _internal_properties(int index) const;
  ::Proto::Property* _internal_add_properties();
  public:
  const ::Proto::Property& properties(int index) const;
  ::Proto::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >&
      properties() const;

  // repeated .Proto.Envelope children = 200;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::Proto::Envelope* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
      mutable_children();
  private:
  const ::Proto::Envelope& _internal_children(int index) const;
  ::Proto::Envelope* _internal_add_children();
  public:
  const ::Proto::Envelope& children(int index) const;
  ::Proto::Envelope* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
      children() const;

  // optional string specific_properties_struct = 6;
  bool has_specific_properties_struct() const;
  private:
  bool _internal_has_specific_properties_struct() const;
  public:
  void clear_specific_properties_struct();
  const std::string& specific_properties_struct() const;
  void set_specific_properties_struct(const std::string& value);
  void set_specific_properties_struct(std::string&& value);
  void set_specific_properties_struct(const char* value);
  void set_specific_properties_struct(const char* value, size_t size);
  std::string* mutable_specific_properties_struct();
  std::string* release_specific_properties_struct();
  void set_allocated_specific_properties_struct(std::string* specific_properties_struct);
  private:
  const std::string& _internal_specific_properties_struct() const;
  void _internal_set_specific_properties_struct(const std::string& value);
  std::string* _internal_mutable_specific_properties_struct();
  public:

  // required .Proto.Uuid uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // required .Proto.wstring equipmentId = 2;
  bool has_equipmentid() const;
  private:
  bool _internal_has_equipmentid() const;
  public:
  void clear_equipmentid();
  const ::Proto::wstring& equipmentid() const;
  ::Proto::wstring* release_equipmentid();
  ::Proto::wstring* mutable_equipmentid();
  void set_allocated_equipmentid(::Proto::wstring* equipmentid);
  private:
  const ::Proto::wstring& _internal_equipmentid() const;
  ::Proto::wstring* _internal_mutable_equipmentid();
  public:
  void unsafe_arena_set_allocated_equipmentid(
      ::Proto::wstring* equipmentid);
  ::Proto::wstring* unsafe_arena_release_equipmentid();

  // required .Proto.wstring caption = 3;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const ::Proto::wstring& caption() const;
  ::Proto::wstring* release_caption();
  ::Proto::wstring* mutable_caption();
  void set_allocated_caption(::Proto::wstring* caption);
  private:
  const ::Proto::wstring& _internal_caption() const;
  ::Proto::wstring* _internal_mutable_caption();
  public:
  void unsafe_arena_set_allocated_caption(
      ::Proto::wstring* caption);
  ::Proto::wstring* unsafe_arena_release_caption();

  // optional .Proto.wstring childRestriction = 4;
  bool has_childrestriction() const;
  private:
  bool _internal_has_childrestriction() const;
  public:
  void clear_childrestriction();
  const ::Proto::wstring& childrestriction() const;
  ::Proto::wstring* release_childrestriction();
  ::Proto::wstring* mutable_childrestriction();
  void set_allocated_childrestriction(::Proto::wstring* childrestriction);
  private:
  const ::Proto::wstring& _internal_childrestriction() const;
  ::Proto::wstring* _internal_mutable_childrestriction();
  public:
  void unsafe_arena_set_allocated_childrestriction(
      ::Proto::wstring* childrestriction);
  ::Proto::wstring* unsafe_arena_release_childrestriction();

  // optional .Proto.wstring presetName = 34;
  bool has_presetname() const;
  private:
  bool _internal_has_presetname() const;
  public:
  void clear_presetname();
  const ::Proto::wstring& presetname() const;
  ::Proto::wstring* release_presetname();
  ::Proto::wstring* mutable_presetname();
  void set_allocated_presetname(::Proto::wstring* presetname);
  private:
  const ::Proto::wstring& _internal_presetname() const;
  ::Proto::wstring* _internal_mutable_presetname();
  public:
  void unsafe_arena_set_allocated_presetname(
      ::Proto::wstring* presetname);
  ::Proto::wstring* unsafe_arena_release_presetname();

  // optional .Proto.Uuid presetObjectUuid = 35;
  bool has_presetobjectuuid() const;
  private:
  bool _internal_has_presetobjectuuid() const;
  public:
  void clear_presetobjectuuid();
  const ::Proto::Uuid& presetobjectuuid() const;
  ::Proto::Uuid* release_presetobjectuuid();
  ::Proto::Uuid* mutable_presetobjectuuid();
  void set_allocated_presetobjectuuid(::Proto::Uuid* presetobjectuuid);
  private:
  const ::Proto::Uuid& _internal_presetobjectuuid() const;
  ::Proto::Uuid* _internal_mutable_presetobjectuuid();
  public:
  void unsafe_arena_set_allocated_presetobjectuuid(
      ::Proto::Uuid* presetobjectuuid);
  ::Proto::Uuid* unsafe_arena_release_presetobjectuuid();

  // optional .Proto.DeviceRoot Root = 100;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::Proto::DeviceRoot& root() const;
  ::Proto::DeviceRoot* release_root();
  ::Proto::DeviceRoot* mutable_root();
  void set_allocated_root(::Proto::DeviceRoot* root);
  private:
  const ::Proto::DeviceRoot& _internal_root() const;
  ::Proto::DeviceRoot* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::Proto::DeviceRoot* root);
  ::Proto::DeviceRoot* unsafe_arena_release_root();

  // optional .Proto.DeviceSystem System = 101;
  bool has_system() const;
  private:
  bool _internal_has_system() const;
  public:
  void clear_system();
  const ::Proto::DeviceSystem& system() const;
  ::Proto::DeviceSystem* release_system();
  ::Proto::DeviceSystem* mutable_system();
  void set_allocated_system(::Proto::DeviceSystem* system);
  private:
  const ::Proto::DeviceSystem& _internal_system() const;
  ::Proto::DeviceSystem* _internal_mutable_system();
  public:
  void unsafe_arena_set_allocated_system(
      ::Proto::DeviceSystem* system);
  ::Proto::DeviceSystem* unsafe_arena_release_system();

  // optional .Proto.DeviceRack Rack = 102;
  bool has_rack() const;
  private:
  bool _internal_has_rack() const;
  public:
  void clear_rack();
  const ::Proto::DeviceRack& rack() const;
  ::Proto::DeviceRack* release_rack();
  ::Proto::DeviceRack* mutable_rack();
  void set_allocated_rack(::Proto::DeviceRack* rack);
  private:
  const ::Proto::DeviceRack& _internal_rack() const;
  ::Proto::DeviceRack* _internal_mutable_rack();
  public:
  void unsafe_arena_set_allocated_rack(
      ::Proto::DeviceRack* rack);
  ::Proto::DeviceRack* unsafe_arena_release_rack();

  // optional .Proto.DeviceChassis Chassis = 103;
  bool has_chassis() const;
  private:
  bool _internal_has_chassis() const;
  public:
  void clear_chassis();
  const ::Proto::DeviceChassis& chassis() const;
  ::Proto::DeviceChassis* release_chassis();
  ::Proto::DeviceChassis* mutable_chassis();
  void set_allocated_chassis(::Proto::DeviceChassis* chassis);
  private:
  const ::Proto::DeviceChassis& _internal_chassis() const;
  ::Proto::DeviceChassis* _internal_mutable_chassis();
  public:
  void unsafe_arena_set_allocated_chassis(
      ::Proto::DeviceChassis* chassis);
  ::Proto::DeviceChassis* unsafe_arena_release_chassis();

  // optional .Proto.DeviceModule Module = 104;
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const ::Proto::DeviceModule& module() const;
  ::Proto::DeviceModule* release_module();
  ::Proto::DeviceModule* mutable_module();
  void set_allocated_module(::Proto::DeviceModule* module);
  private:
  const ::Proto::DeviceModule& _internal_module() const;
  ::Proto::DeviceModule* _internal_mutable_module();
  public:
  void unsafe_arena_set_allocated_module(
      ::Proto::DeviceModule* module);
  ::Proto::DeviceModule* unsafe_arena_release_module();

  // optional .Proto.DeviceController Controller = 105;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::Proto::DeviceController& controller() const;
  ::Proto::DeviceController* release_controller();
  ::Proto::DeviceController* mutable_controller();
  void set_allocated_controller(::Proto::DeviceController* controller);
  private:
  const ::Proto::DeviceController& _internal_controller() const;
  ::Proto::DeviceController* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::Proto::DeviceController* controller);
  ::Proto::DeviceController* unsafe_arena_release_controller();

  // optional .Proto.DeviceSignal Signal = 106;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  const ::Proto::DeviceSignal& signal() const;
  ::Proto::DeviceSignal* release_signal();
  ::Proto::DeviceSignal* mutable_signal();
  void set_allocated_signal(::Proto::DeviceSignal* signal);
  private:
  const ::Proto::DeviceSignal& _internal_signal() const;
  ::Proto::DeviceSignal* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::Proto::DeviceSignal* signal);
  ::Proto::DeviceSignal* unsafe_arena_release_signal();

  // optional .Proto.Workstation Workstation = 107;
  bool has_workstation() const;
  private:
  bool _internal_has_workstation() const;
  public:
  void clear_workstation();
  const ::Proto::Workstation& workstation() const;
  ::Proto::Workstation* release_workstation();
  ::Proto::Workstation* mutable_workstation();
  void set_allocated_workstation(::Proto::Workstation* workstation);
  private:
  const ::Proto::Workstation& _internal_workstation() const;
  ::Proto::Workstation* _internal_mutable_workstation();
  public:
  void unsafe_arena_set_allocated_workstation(
      ::Proto::Workstation* workstation);
  ::Proto::Workstation* unsafe_arena_release_workstation();

  // optional .Proto.Software Software = 108;
  bool has_software() const;
  private:
  bool _internal_has_software() const;
  public:
  void clear_software();
  const ::Proto::Software& software() const;
  ::Proto::Software* release_software();
  ::Proto::Software* mutable_software();
  void set_allocated_software(::Proto::Software* software);
  private:
  const ::Proto::Software& _internal_software() const;
  ::Proto::Software* _internal_mutable_software();
  public:
  void unsafe_arena_set_allocated_software(
      ::Proto::Software* software);
  ::Proto::Software* unsafe_arena_release_software();

  // optional int32 childCountHint = 36 [default = 0];
  bool has_childcounthint() const;
  private:
  bool _internal_has_childcounthint() const;
  public:
  void clear_childcounthint();
  ::PROTOBUF_NAMESPACE_ID::int32 childcounthint() const;
  void set_childcounthint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_childcounthint() const;
  void _internal_set_childcounthint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 place = 5 [default = 0];
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  ::PROTOBUF_NAMESPACE_ID::int32 place() const;
  void set_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_place() const;
  void _internal_set_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool preset = 32 [default = false];
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  bool preset() const;
  void set_preset(bool value);
  private:
  bool _internal_preset() const;
  void _internal_set_preset(bool value);
  public:

  // optional bool presetRoot = 33 [default = false];
  bool has_presetroot() const;
  private:
  bool _internal_has_presetroot() const;
  public:
  void clear_presetroot();
  bool presetroot() const;
  void set_presetroot(bool value);
  private:
  bool _internal_presetroot() const;
  void _internal_set_presetroot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.DeviceObject)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specific_properties_struct_;
  ::Proto::Uuid* uuid_;
  ::Proto::wstring* equipmentid_;
  ::Proto::wstring* caption_;
  ::Proto::wstring* childrestriction_;
  ::Proto::wstring* presetname_;
  ::Proto::Uuid* presetobjectuuid_;
  ::Proto::DeviceRoot* root_;
  ::Proto::DeviceSystem* system_;
  ::Proto::DeviceRack* rack_;
  ::Proto::DeviceChassis* chassis_;
  ::Proto::DeviceModule* module_;
  ::Proto::DeviceController* controller_;
  ::Proto::DeviceSignal* signal_;
  ::Proto::Workstation* workstation_;
  ::Proto::Software* software_;
  ::PROTOBUF_NAMESPACE_ID::int32 childcounthint_;
  ::PROTOBUF_NAMESPACE_ID::int32 place_;
  bool preset_;
  bool presetroot_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceRoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceRoot) */ {
 public:
  inline DeviceRoot() : DeviceRoot(nullptr) {}
  virtual ~DeviceRoot();

  DeviceRoot(const DeviceRoot& from);
  DeviceRoot(DeviceRoot&& from) noexcept
    : DeviceRoot() {
    *this = ::std::move(from);
  }

  inline DeviceRoot& operator=(const DeviceRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRoot& operator=(DeviceRoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRoot& default_instance();

  static inline const DeviceRoot* internal_default_instance() {
    return reinterpret_cast<const DeviceRoot*>(
               &_DeviceRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(DeviceRoot& a, DeviceRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRoot* New() const final {
    return CreateMaybeMessage<DeviceRoot>(nullptr);
  }

  DeviceRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRoot& from);
  void MergeFrom(const DeviceRoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceRoot";
  }
  protected:
  explicit DeviceRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.DeviceRoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceSystem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceSystem) */ {
 public:
  inline DeviceSystem() : DeviceSystem(nullptr) {}
  virtual ~DeviceSystem();

  DeviceSystem(const DeviceSystem& from);
  DeviceSystem(DeviceSystem&& from) noexcept
    : DeviceSystem() {
    *this = ::std::move(from);
  }

  inline DeviceSystem& operator=(const DeviceSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSystem& operator=(DeviceSystem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceSystem& default_instance();

  static inline const DeviceSystem* internal_default_instance() {
    return reinterpret_cast<const DeviceSystem*>(
               &_DeviceSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(DeviceSystem& a, DeviceSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSystem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceSystem* New() const final {
    return CreateMaybeMessage<DeviceSystem>(nullptr);
  }

  DeviceSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceSystem& from);
  void MergeFrom(const DeviceSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceSystem";
  }
  protected:
  explicit DeviceSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.DeviceSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceRack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceRack) */ {
 public:
  inline DeviceRack() : DeviceRack(nullptr) {}
  virtual ~DeviceRack();

  DeviceRack(const DeviceRack& from);
  DeviceRack(DeviceRack&& from) noexcept
    : DeviceRack() {
    *this = ::std::move(from);
  }

  inline DeviceRack& operator=(const DeviceRack& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRack& operator=(DeviceRack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRack& default_instance();

  static inline const DeviceRack* internal_default_instance() {
    return reinterpret_cast<const DeviceRack*>(
               &_DeviceRack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(DeviceRack& a, DeviceRack& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRack* New() const final {
    return CreateMaybeMessage<DeviceRack>(nullptr);
  }

  DeviceRack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRack& from);
  void MergeFrom(const DeviceRack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceRack";
  }
  protected:
  explicit DeviceRack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.DeviceRack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceChassis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceChassis) */ {
 public:
  inline DeviceChassis() : DeviceChassis(nullptr) {}
  virtual ~DeviceChassis();

  DeviceChassis(const DeviceChassis& from);
  DeviceChassis(DeviceChassis&& from) noexcept
    : DeviceChassis() {
    *this = ::std::move(from);
  }

  inline DeviceChassis& operator=(const DeviceChassis& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceChassis& operator=(DeviceChassis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceChassis& default_instance();

  static inline const DeviceChassis* internal_default_instance() {
    return reinterpret_cast<const DeviceChassis*>(
               &_DeviceChassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DeviceChassis& a, DeviceChassis& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceChassis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceChassis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceChassis* New() const final {
    return CreateMaybeMessage<DeviceChassis>(nullptr);
  }

  DeviceChassis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceChassis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceChassis& from);
  void MergeFrom(const DeviceChassis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceChassis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceChassis";
  }
  protected:
  explicit DeviceChassis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional int32 type = 1 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.DeviceChassis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceModule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceModule) */ {
 public:
  inline DeviceModule() : DeviceModule(nullptr) {}
  virtual ~DeviceModule();

  DeviceModule(const DeviceModule& from);
  DeviceModule(DeviceModule&& from) noexcept
    : DeviceModule() {
    *this = ::std::move(from);
  }

  inline DeviceModule& operator=(const DeviceModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceModule& operator=(DeviceModule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceModule& default_instance();

  static inline const DeviceModule* internal_default_instance() {
    return reinterpret_cast<const DeviceModule*>(
               &_DeviceModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(DeviceModule& a, DeviceModule& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceModule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceModule* New() const final {
    return CreateMaybeMessage<DeviceModule>(nullptr);
  }

  DeviceModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceModule& from);
  void MergeFrom(const DeviceModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceModule";
  }
  protected:
  explicit DeviceModule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationScriptFieldNumber = 2,
    kRawDataDescriptionFieldNumber = 4,
    kTypeObsoleteFieldNumber = 1,
    kModuleTypeFieldNumber = 3,
    kCustomModuleFamilyFieldNumber = 5,
  };
  // optional string configurationScript = 2;
  bool has_configurationscript() const;
  private:
  bool _internal_has_configurationscript() const;
  public:
  void clear_configurationscript();
  const std::string& configurationscript() const;
  void set_configurationscript(const std::string& value);
  void set_configurationscript(std::string&& value);
  void set_configurationscript(const char* value);
  void set_configurationscript(const char* value, size_t size);
  std::string* mutable_configurationscript();
  std::string* release_configurationscript();
  void set_allocated_configurationscript(std::string* configurationscript);
  private:
  const std::string& _internal_configurationscript() const;
  void _internal_set_configurationscript(const std::string& value);
  std::string* _internal_mutable_configurationscript();
  public:

  // optional string rawDataDescription = 4;
  bool has_rawdatadescription() const;
  private:
  bool _internal_has_rawdatadescription() const;
  public:
  void clear_rawdatadescription();
  const std::string& rawdatadescription() const;
  void set_rawdatadescription(const std::string& value);
  void set_rawdatadescription(std::string&& value);
  void set_rawdatadescription(const char* value);
  void set_rawdatadescription(const char* value, size_t size);
  std::string* mutable_rawdatadescription();
  std::string* release_rawdatadescription();
  void set_allocated_rawdatadescription(std::string* rawdatadescription);
  private:
  const std::string& _internal_rawdatadescription() const;
  void _internal_set_rawdatadescription(const std::string& value);
  std::string* _internal_mutable_rawdatadescription();
  public:

  // optional int32 typeObsolete = 1 [default = 0];
  bool has_typeobsolete() const;
  private:
  bool _internal_has_typeobsolete() const;
  public:
  void clear_typeobsolete();
  ::PROTOBUF_NAMESPACE_ID::int32 typeobsolete() const;
  void set_typeobsolete(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_typeobsolete() const;
  void _internal_set_typeobsolete(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 moduleType = 3;
  bool has_moduletype() const;
  private:
  bool _internal_has_moduletype() const;
  public:
  void clear_moduletype();
  ::PROTOBUF_NAMESPACE_ID::int32 moduletype() const;
  void set_moduletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moduletype() const;
  void _internal_set_moduletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 customModuleFamily = 5 [default = 0];
  bool has_custommodulefamily() const;
  private:
  bool _internal_has_custommodulefamily() const;
  public:
  void clear_custommodulefamily();
  ::PROTOBUF_NAMESPACE_ID::int32 custommodulefamily() const;
  void set_custommodulefamily(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_custommodulefamily() const;
  void _internal_set_custommodulefamily(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.DeviceModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurationscript_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawdatadescription_;
  ::PROTOBUF_NAMESPACE_ID::int32 typeobsolete_;
  ::PROTOBUF_NAMESPACE_ID::int32 moduletype_;
  ::PROTOBUF_NAMESPACE_ID::int32 custommodulefamily_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceController PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceController) */ {
 public:
  inline DeviceController() : DeviceController(nullptr) {}
  virtual ~DeviceController();

  DeviceController(const DeviceController& from);
  DeviceController(DeviceController&& from) noexcept
    : DeviceController() {
    *this = ::std::move(from);
  }

  inline DeviceController& operator=(const DeviceController& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceController& operator=(DeviceController&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceController& default_instance();

  static inline const DeviceController* internal_default_instance() {
    return reinterpret_cast<const DeviceController*>(
               &_DeviceController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeviceController& a, DeviceController& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceController* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceController* New() const final {
    return CreateMaybeMessage<DeviceController>(nullptr);
  }

  DeviceController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceController& from);
  void MergeFrom(const DeviceController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceController";
  }
  protected:
  explicit DeviceController(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.DeviceController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class DeviceSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DeviceSignal) */ {
 public:
  inline DeviceSignal() : DeviceSignal(nullptr) {}
  virtual ~DeviceSignal();

  DeviceSignal(const DeviceSignal& from);
  DeviceSignal(DeviceSignal&& from) noexcept
    : DeviceSignal() {
    *this = ::std::move(from);
  }

  inline DeviceSignal& operator=(const DeviceSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSignal& operator=(DeviceSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceSignal& default_instance();

  static inline const DeviceSignal* internal_default_instance() {
    return reinterpret_cast<const DeviceSignal*>(
               &_DeviceSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DeviceSignal& a, DeviceSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceSignal* New() const final {
    return CreateMaybeMessage<DeviceSignal>(nullptr);
  }

  DeviceSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceSignal& from);
  void MergeFrom(const DeviceSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DeviceSignal";
  }
  protected:
  explicit DeviceSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValiditySignalIdFieldNumber = 20,
    kAppSignalBusTypeIdFieldNumber = 26,
    kSignalSpecPropsStructFieldNumber = 40,
    kObsoletetypeFieldNumber = 1,
    kByteOrderFieldNumber = 2,
    kFormatFieldNumber = 3,
    kSizeFieldNumber = 4,
    kValueOffsetFieldNumber = 7,
    kValueBitFieldNumber = 8,
    kTypeFieldNumber = 9,
    kFunctionFieldNumber = 10,
    kMemoryAreaFieldNumber = 11,
    kAppSignalLowAdcFieldNumber = 12,
    kAppSignalLowEngUnitsFieldNumber = 14,
    kSignalSpecPropsStructWasFixedFieldNumber = 41,
    kAppSignalHighAdcFieldNumber = 13,
    kAppSignalDataFormatFieldNumber = 16,
    kAppSignalHighEngUnitsFieldNumber = 15,
  };
  // optional string validitySignalId = 20;
  bool has_validitysignalid() const;
  private:
  bool _internal_has_validitysignalid() const;
  public:
  void clear_validitysignalid();
  const std::string& validitysignalid() const;
  void set_validitysignalid(const std::string& value);
  void set_validitysignalid(std::string&& value);
  void set_validitysignalid(const char* value);
  void set_validitysignalid(const char* value, size_t size);
  std::string* mutable_validitysignalid();
  std::string* release_validitysignalid();
  void set_allocated_validitysignalid(std::string* validitysignalid);
  private:
  const std::string& _internal_validitysignalid() const;
  void _internal_set_validitysignalid(const std::string& value);
  std::string* _internal_mutable_validitysignalid();
  public:

  // optional string appSignalBusTypeId = 26;
  bool has_appsignalbustypeid() const;
  private:
  bool _internal_has_appsignalbustypeid() const;
  public:
  void clear_appsignalbustypeid();
  const std::string& appsignalbustypeid() const;
  void set_appsignalbustypeid(const std::string& value);
  void set_appsignalbustypeid(std::string&& value);
  void set_appsignalbustypeid(const char* value);
  void set_appsignalbustypeid(const char* value, size_t size);
  std::string* mutable_appsignalbustypeid();
  std::string* release_appsignalbustypeid();
  void set_allocated_appsignalbustypeid(std::string* appsignalbustypeid);
  private:
  const std::string& _internal_appsignalbustypeid() const;
  void _internal_set_appsignalbustypeid(const std::string& value);
  std::string* _internal_mutable_appsignalbustypeid();
  public:

  // optional string signalSpecPropsStruct = 40;
  bool has_signalspecpropsstruct() const;
  private:
  bool _internal_has_signalspecpropsstruct() const;
  public:
  void clear_signalspecpropsstruct();
  const std::string& signalspecpropsstruct() const;
  void set_signalspecpropsstruct(const std::string& value);
  void set_signalspecpropsstruct(std::string&& value);
  void set_signalspecpropsstruct(const char* value);
  void set_signalspecpropsstruct(const char* value, size_t size);
  std::string* mutable_signalspecpropsstruct();
  std::string* release_signalspecpropsstruct();
  void set_allocated_signalspecpropsstruct(std::string* signalspecpropsstruct);
  private:
  const std::string& _internal_signalspecpropsstruct() const;
  void _internal_set_signalspecpropsstruct(const std::string& value);
  std::string* _internal_mutable_signalspecpropsstruct();
  public:

  // optional int32 obsoletetype = 1 [default = 0];
  bool has_obsoletetype() const;
  private:
  bool _internal_has_obsoletetype() const;
  public:
  void clear_obsoletetype();
  ::PROTOBUF_NAMESPACE_ID::int32 obsoletetype() const;
  void set_obsoletetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obsoletetype() const;
  void _internal_set_obsoletetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 byteOrder = 2 [default = 0];
  bool has_byteorder() const;
  private:
  bool _internal_has_byteorder() const;
  public:
  void clear_byteorder();
  ::PROTOBUF_NAMESPACE_ID::int32 byteorder() const;
  void set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_byteorder() const;
  void _internal_set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 format = 3 [default = 0];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 size = 4 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 valueOffset = 7 [default = 0];
  bool has_valueoffset() const;
  private:
  bool _internal_has_valueoffset() const;
  public:
  void clear_valueoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 valueoffset() const;
  void set_valueoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_valueoffset() const;
  void _internal_set_valueoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 valueBit = 8 [default = 0];
  bool has_valuebit() const;
  private:
  bool _internal_has_valuebit() const;
  public:
  void clear_valuebit();
  ::PROTOBUF_NAMESPACE_ID::int32 valuebit() const;
  void set_valuebit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_valuebit() const;
  void _internal_set_valuebit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 type = 9 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 function = 10 [default = 0];
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  ::PROTOBUF_NAMESPACE_ID::int32 function() const;
  void set_function(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_function() const;
  void _internal_set_function(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 memoryArea = 11 [default = 0];
  bool has_memoryarea() const;
  private:
  bool _internal_has_memoryarea() const;
  public:
  void clear_memoryarea();
  ::PROTOBUF_NAMESPACE_ID::int32 memoryarea() const;
  void set_memoryarea(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memoryarea() const;
  void _internal_set_memoryarea(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 appSignalLowAdc = 12 [default = 0];
  bool has_appsignallowadc() const;
  private:
  bool _internal_has_appsignallowadc() const;
  public:
  void clear_appsignallowadc();
  ::PROTOBUF_NAMESPACE_ID::int32 appsignallowadc() const;
  void set_appsignallowadc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appsignallowadc() const;
  void _internal_set_appsignallowadc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double appSignalLowEngUnits = 14 [default = 0];
  bool has_appsignallowengunits() const;
  private:
  bool _internal_has_appsignallowengunits() const;
  public:
  void clear_appsignallowengunits();
  double appsignallowengunits() const;
  void set_appsignallowengunits(double value);
  private:
  double _internal_appsignallowengunits() const;
  void _internal_set_appsignallowengunits(double value);
  public:

  // optional bool signalSpecPropsStructWasFixed = 41 [default = false];
  bool has_signalspecpropsstructwasfixed() const;
  private:
  bool _internal_has_signalspecpropsstructwasfixed() const;
  public:
  void clear_signalspecpropsstructwasfixed();
  bool signalspecpropsstructwasfixed() const;
  void set_signalspecpropsstructwasfixed(bool value);
  private:
  bool _internal_signalspecpropsstructwasfixed() const;
  void _internal_set_signalspecpropsstructwasfixed(bool value);
  public:

  // optional int32 appSignalHighAdc = 13 [default = 65535];
  bool has_appsignalhighadc() const;
  private:
  bool _internal_has_appsignalhighadc() const;
  public:
  void clear_appsignalhighadc();
  ::PROTOBUF_NAMESPACE_ID::int32 appsignalhighadc() const;
  void set_appsignalhighadc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appsignalhighadc() const;
  void _internal_set_appsignalhighadc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 appSignalDataFormat = 16 [default = 2];
  bool has_appsignaldataformat() const;
  private:
  bool _internal_has_appsignaldataformat() const;
  public:
  void clear_appsignaldataformat();
  ::PROTOBUF_NAMESPACE_ID::int32 appsignaldataformat() const;
  void set_appsignaldataformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appsignaldataformat() const;
  void _internal_set_appsignaldataformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double appSignalHighEngUnits = 15 [default = 100];
  bool has_appsignalhighengunits() const;
  private:
  bool _internal_has_appsignalhighengunits() const;
  public:
  void clear_appsignalhighengunits();
  double appsignalhighengunits() const;
  void set_appsignalhighengunits(double value);
  private:
  double _internal_appsignalhighengunits() const;
  void _internal_set_appsignalhighengunits(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.DeviceSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validitysignalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsignalbustypeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalspecpropsstruct_;
  ::PROTOBUF_NAMESPACE_ID::int32 obsoletetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 byteorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 valueoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 valuebit_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 function_;
  ::PROTOBUF_NAMESPACE_ID::int32 memoryarea_;
  ::PROTOBUF_NAMESPACE_ID::int32 appsignallowadc_;
  double appsignallowengunits_;
  bool signalspecpropsstructwasfixed_;
  ::PROTOBUF_NAMESPACE_ID::int32 appsignalhighadc_;
  ::PROTOBUF_NAMESPACE_ID::int32 appsignaldataformat_;
  double appsignalhighengunits_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Workstation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Workstation) */ {
 public:
  inline Workstation() : Workstation(nullptr) {}
  virtual ~Workstation();

  Workstation(const Workstation& from);
  Workstation(Workstation&& from) noexcept
    : Workstation() {
    *this = ::std::move(from);
  }

  inline Workstation& operator=(const Workstation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workstation& operator=(Workstation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Workstation& default_instance();

  static inline const Workstation* internal_default_instance() {
    return reinterpret_cast<const Workstation*>(
               &_Workstation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Workstation& a, Workstation& b) {
    a.Swap(&b);
  }
  inline void Swap(Workstation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workstation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Workstation* New() const final {
    return CreateMaybeMessage<Workstation>(nullptr);
  }

  Workstation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Workstation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Workstation& from);
  void MergeFrom(const Workstation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workstation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Workstation";
  }
  protected:
  explicit Workstation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional int32 type = 1 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Workstation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Software PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Software) */ {
 public:
  inline Software() : Software(nullptr) {}
  virtual ~Software();

  Software(const Software& from);
  Software(Software&& from) noexcept
    : Software() {
    *this = ::std::move(from);
  }

  inline Software& operator=(const Software& from) {
    CopyFrom(from);
    return *this;
  }
  inline Software& operator=(Software&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Software& default_instance();

  static inline const Software* internal_default_instance() {
    return reinterpret_cast<const Software*>(
               &_Software_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Software& a, Software& b) {
    a.Swap(&b);
  }
  inline void Swap(Software* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Software* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Software* New() const final {
    return CreateMaybeMessage<Software>(nullptr);
  }

  Software* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Software>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Software& from);
  void MergeFrom(const Software& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Software* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Software";
  }
  protected:
  explicit Software(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional int32 type = 1 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Software)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ModuleConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ModuleConfiguration) */ {
 public:
  inline ModuleConfiguration() : ModuleConfiguration(nullptr) {}
  virtual ~ModuleConfiguration();

  ModuleConfiguration(const ModuleConfiguration& from);
  ModuleConfiguration(ModuleConfiguration&& from) noexcept
    : ModuleConfiguration() {
    *this = ::std::move(from);
  }

  inline ModuleConfiguration& operator=(const ModuleConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleConfiguration& operator=(ModuleConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleConfiguration& default_instance();

  static inline const ModuleConfiguration* internal_default_instance() {
    return reinterpret_cast<const ModuleConfiguration*>(
               &_ModuleConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ModuleConfiguration& a, ModuleConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleConfiguration* New() const final {
    return CreateMaybeMessage<ModuleConfiguration>(nullptr);
  }

  ModuleConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleConfiguration& from);
  void MergeFrom(const ModuleConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ModuleConfiguration";
  }
  protected:
  explicit ModuleConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kStructDescriptionFieldNumber = 1,
    kNameFieldNumber = 3,
  };
  // repeated .Proto.ModuleConfigurationValue values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Proto::ModuleConfigurationValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ModuleConfigurationValue >*
      mutable_values();
  private:
  const ::Proto::ModuleConfigurationValue& _internal_values(int index) const;
  ::Proto::ModuleConfigurationValue* _internal_add_values();
  public:
  const ::Proto::ModuleConfigurationValue& values(int index) const;
  ::Proto::ModuleConfigurationValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ModuleConfigurationValue >&
      values() const;

  // optional string struct_description = 1;
  bool has_struct_description() const;
  private:
  bool _internal_has_struct_description() const;
  public:
  void clear_struct_description();
  const std::string& struct_description() const;
  void set_struct_description(const std::string& value);
  void set_struct_description(std::string&& value);
  void set_struct_description(const char* value);
  void set_struct_description(const char* value, size_t size);
  std::string* mutable_struct_description();
  std::string* release_struct_description();
  void set_allocated_struct_description(std::string* struct_description);
  private:
  const std::string& _internal_struct_description() const;
  void _internal_set_struct_description(const std::string& value);
  std::string* _internal_mutable_struct_description();
  public:

  // optional string name = 3 [default = ""];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Proto.ModuleConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ModuleConfigurationValue > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr struct_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ModuleConfigurationValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ModuleConfigurationValue) */ {
 public:
  inline ModuleConfigurationValue() : ModuleConfigurationValue(nullptr) {}
  virtual ~ModuleConfigurationValue();

  ModuleConfigurationValue(const ModuleConfigurationValue& from);
  ModuleConfigurationValue(ModuleConfigurationValue&& from) noexcept
    : ModuleConfigurationValue() {
    *this = ::std::move(from);
  }

  inline ModuleConfigurationValue& operator=(const ModuleConfigurationValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleConfigurationValue& operator=(ModuleConfigurationValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleConfigurationValue& default_instance();

  static inline const ModuleConfigurationValue* internal_default_instance() {
    return reinterpret_cast<const ModuleConfigurationValue*>(
               &_ModuleConfigurationValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ModuleConfigurationValue& a, ModuleConfigurationValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleConfigurationValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleConfigurationValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleConfigurationValue* New() const final {
    return CreateMaybeMessage<ModuleConfigurationValue>(nullptr);
  }

  ModuleConfigurationValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleConfigurationValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleConfigurationValue& from);
  void MergeFrom(const ModuleConfigurationValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleConfigurationValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ModuleConfigurationValue";
  }
  protected:
  explicit ModuleConfigurationValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Proto.ModuleConfigurationValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  virtual ~Property();

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property& default_instance();

  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Proto.Property)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SignalSpecPropValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SignalSpecPropValue) */ {
 public:
  inline SignalSpecPropValue() : SignalSpecPropValue(nullptr) {}
  virtual ~SignalSpecPropValue();

  SignalSpecPropValue(const SignalSpecPropValue& from);
  SignalSpecPropValue(SignalSpecPropValue&& from) noexcept
    : SignalSpecPropValue() {
    *this = ::std::move(from);
  }

  inline SignalSpecPropValue& operator=(const SignalSpecPropValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalSpecPropValue& operator=(SignalSpecPropValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalSpecPropValue& default_instance();

  static inline const SignalSpecPropValue* internal_default_instance() {
    return reinterpret_cast<const SignalSpecPropValue*>(
               &_SignalSpecPropValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SignalSpecPropValue& a, SignalSpecPropValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalSpecPropValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalSpecPropValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalSpecPropValue* New() const final {
    return CreateMaybeMessage<SignalSpecPropValue>(nullptr);
  }

  SignalSpecPropValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalSpecPropValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalSpecPropValue& from);
  void MergeFrom(const SignalSpecPropValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalSpecPropValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SignalSpecPropValue";
  }
  protected:
  explicit SignalSpecPropValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringValFieldNumber = 16,
    kTypeFieldNumber = 2,
    kIsEnumFieldNumber = 3,
    kBoolValFieldNumber = 15,
    kInt32ValFieldNumber = 10,
    kUint32ValFieldNumber = 11,
    kInt64ValFieldNumber = 12,
    kUint64ValFieldNumber = 13,
    kDoubleValFieldNumber = 14,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string stringVal = 16;
  bool has_stringval() const;
  private:
  bool _internal_has_stringval() const;
  public:
  void clear_stringval();
  const std::string& stringval() const;
  void set_stringval(const std::string& value);
  void set_stringval(std::string&& value);
  void set_stringval(const char* value);
  void set_stringval(const char* value, size_t size);
  std::string* mutable_stringval();
  std::string* release_stringval();
  void set_allocated_stringval(std::string* stringval);
  private:
  const std::string& _internal_stringval() const;
  void _internal_set_stringval(const std::string& value);
  std::string* _internal_mutable_stringval();
  public:

  // required int32 type = 2 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool isEnum = 3 [default = false];
  bool has_isenum() const;
  private:
  bool _internal_has_isenum() const;
  public:
  void clear_isenum();
  bool isenum() const;
  void set_isenum(bool value);
  private:
  bool _internal_isenum() const;
  void _internal_set_isenum(bool value);
  public:

  // optional bool boolVal = 15;
  bool has_boolval() const;
  private:
  bool _internal_has_boolval() const;
  public:
  void clear_boolval();
  bool boolval() const;
  void set_boolval(bool value);
  private:
  bool _internal_boolval() const;
  void _internal_set_boolval(bool value);
  public:

  // optional int32 int32Val = 10;
  bool has_int32val() const;
  private:
  bool _internal_has_int32val() const;
  public:
  void clear_int32val();
  ::PROTOBUF_NAMESPACE_ID::int32 int32val() const;
  void set_int32val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32val() const;
  void _internal_set_int32val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 uint32Val = 11;
  bool has_uint32val() const;
  private:
  bool _internal_has_uint32val() const;
  public:
  void clear_uint32val();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32val() const;
  void set_uint32val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32val() const;
  void _internal_set_uint32val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 int64Val = 12;
  bool has_int64val() const;
  private:
  bool _internal_has_int64val() const;
  public:
  void clear_int64val();
  ::PROTOBUF_NAMESPACE_ID::int64 int64val() const;
  void set_int64val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64val() const;
  void _internal_set_int64val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 uint64Val = 13;
  bool has_uint64val() const;
  private:
  bool _internal_has_uint64val() const;
  public:
  void clear_uint64val();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64val() const;
  void set_uint64val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64val() const;
  void _internal_set_uint64val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double doubleVal = 14;
  bool has_doubleval() const;
  private:
  bool _internal_has_doubleval() const;
  public:
  void clear_doubleval();
  double doubleval() const;
  void set_doubleval(double value);
  private:
  double _internal_doubleval() const;
  void _internal_set_doubleval(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SignalSpecPropValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringval_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool isenum_;
  bool boolval_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32val_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64val_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64val_;
  double doubleval_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SignalSpecPropValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SignalSpecPropValues) */ {
 public:
  inline SignalSpecPropValues() : SignalSpecPropValues(nullptr) {}
  virtual ~SignalSpecPropValues();

  SignalSpecPropValues(const SignalSpecPropValues& from);
  SignalSpecPropValues(SignalSpecPropValues&& from) noexcept
    : SignalSpecPropValues() {
    *this = ::std::move(from);
  }

  inline SignalSpecPropValues& operator=(const SignalSpecPropValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalSpecPropValues& operator=(SignalSpecPropValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalSpecPropValues& default_instance();

  static inline const SignalSpecPropValues* internal_default_instance() {
    return reinterpret_cast<const SignalSpecPropValues*>(
               &_SignalSpecPropValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SignalSpecPropValues& a, SignalSpecPropValues& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalSpecPropValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalSpecPropValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalSpecPropValues* New() const final {
    return CreateMaybeMessage<SignalSpecPropValues>(nullptr);
  }

  SignalSpecPropValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalSpecPropValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalSpecPropValues& from);
  void MergeFrom(const SignalSpecPropValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalSpecPropValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SignalSpecPropValues";
  }
  protected:
  explicit SignalSpecPropValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .Proto.SignalSpecPropValue value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::Proto::SignalSpecPropValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SignalSpecPropValue >*
      mutable_value();
  private:
  const ::Proto::SignalSpecPropValue& _internal_value(int index) const;
  ::Proto::SignalSpecPropValue* _internal_add_value();
  public:
  const ::Proto::SignalSpecPropValue& value(int index) const;
  ::Proto::SignalSpecPropValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SignalSpecPropValue >&
      value() const;

  // @@protoc_insertion_point(class_scope:Proto.SignalSpecPropValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SignalSpecPropValue > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Address16 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Address16) */ {
 public:
  inline Address16() : Address16(nullptr) {}
  virtual ~Address16();

  Address16(const Address16& from);
  Address16(Address16&& from) noexcept
    : Address16() {
    *this = ::std::move(from);
  }

  inline Address16& operator=(const Address16& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address16& operator=(Address16&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address16& default_instance();

  static inline const Address16* internal_default_instance() {
    return reinterpret_cast<const Address16*>(
               &_Address16_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Address16& a, Address16& b) {
    a.Swap(&b);
  }
  inline void Swap(Address16* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address16* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address16* New() const final {
    return CreateMaybeMessage<Address16>(nullptr);
  }

  Address16* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address16>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address16& from);
  void MergeFrom(const Address16& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address16* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Address16";
  }
  protected:
  explicit Address16(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kBitFieldNumber = 2,
  };
  // required int32 offset = 1 [default = -1];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 bit = 2 [default = -1];
  bool has_bit() const;
  private:
  bool _internal_has_bit() const;
  public:
  void clear_bit();
  ::PROTOBUF_NAMESPACE_ID::int32 bit() const;
  void set_bit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bit() const;
  void _internal_set_bit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Address16)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 bit_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Unit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Unit) */ {
 public:
  inline Unit() : Unit(nullptr) {}
  virtual ~Unit();

  Unit(const Unit& from);
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unit& operator=(Unit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Unit& default_instance();

  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }
  inline void Swap(Unit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Unit* New() const final {
    return CreateMaybeMessage<Unit>(nullptr);
  }

  Unit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Unit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Unit& from);
  void MergeFrom(const Unit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Unit";
  }
  protected:
  explicit Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string caption = 2;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // required int32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Unit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class UnitSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.UnitSet) */ {
 public:
  inline UnitSet() : UnitSet(nullptr) {}
  virtual ~UnitSet();

  UnitSet(const UnitSet& from);
  UnitSet(UnitSet&& from) noexcept
    : UnitSet() {
    *this = ::std::move(from);
  }

  inline UnitSet& operator=(const UnitSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitSet& operator=(UnitSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnitSet& default_instance();

  static inline const UnitSet* internal_default_instance() {
    return reinterpret_cast<const UnitSet*>(
               &_UnitSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(UnitSet& a, UnitSet& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnitSet* New() const final {
    return CreateMaybeMessage<UnitSet>(nullptr);
  }

  UnitSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnitSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnitSet& from);
  void MergeFrom(const UnitSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.UnitSet";
  }
  protected:
  explicit UnitSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
  };
  // repeated .Proto.Unit unit = 1;
  int unit_size() const;
  private:
  int _internal_unit_size() const;
  public:
  void clear_unit();
  ::Proto::Unit* mutable_unit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Unit >*
      mutable_unit();
  private:
  const ::Proto::Unit& _internal_unit(int index) const;
  ::Proto::Unit* _internal_add_unit();
  public:
  const ::Proto::Unit& unit(int index) const;
  ::Proto::Unit* add_unit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Unit >&
      unit() const;

  // @@protoc_insertion_point(class_scope:Proto.UnitSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Unit > unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class TuningValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TuningValue) */ {
 public:
  inline TuningValue() : TuningValue(nullptr) {}
  virtual ~TuningValue();

  TuningValue(const TuningValue& from);
  TuningValue(TuningValue&& from) noexcept
    : TuningValue() {
    *this = ::std::move(from);
  }

  inline TuningValue& operator=(const TuningValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningValue& operator=(TuningValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningValue& default_instance();

  static inline const TuningValue* internal_default_instance() {
    return reinterpret_cast<const TuningValue*>(
               &_TuningValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TuningValue& a, TuningValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningValue* New() const final {
    return CreateMaybeMessage<TuningValue>(nullptr);
  }

  TuningValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningValue& from);
  void MergeFrom(const TuningValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TuningValue";
  }
  protected:
  explicit TuningValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional int64 intValue = 2 [default = 0];
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  ::PROTOBUF_NAMESPACE_ID::int64 intvalue() const;
  void set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_intvalue() const;
  void _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double doubleValue = 3 [default = 0];
  bool has_doublevalue() const;
  private:
  bool _internal_has_doublevalue() const;
  public:
  void clear_doublevalue();
  double doublevalue() const;
  void set_doublevalue(double value);
  private:
  double _internal_doublevalue() const;
  void _internal_set_doublevalue(double value);
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TuningValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 intvalue_;
  double doublevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AppSignalDbField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppSignalDbField) */ {
 public:
  inline AppSignalDbField() : AppSignalDbField(nullptr) {}
  virtual ~AppSignalDbField();

  AppSignalDbField(const AppSignalDbField& from);
  AppSignalDbField(AppSignalDbField&& from) noexcept
    : AppSignalDbField() {
    *this = ::std::move(from);
  }

  inline AppSignalDbField& operator=(const AppSignalDbField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSignalDbField& operator=(AppSignalDbField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppSignalDbField& default_instance();

  static inline const AppSignalDbField* internal_default_instance() {
    return reinterpret_cast<const AppSignalDbField*>(
               &_AppSignalDbField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(AppSignalDbField& a, AppSignalDbField& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSignalDbField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSignalDbField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppSignalDbField* New() const final {
    return CreateMaybeMessage<AppSignalDbField>(nullptr);
  }

  AppSignalDbField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppSignalDbField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppSignalDbField& from);
  void MergeFrom(const AppSignalDbField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSignalDbField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppSignalDbField";
  }
  protected:
  explicit AppSignalDbField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 7,
    kCheckedOutFieldNumber = 5,
    kDeletedFieldNumber = 8,
    kInstanceActionFieldNumber = 10,
    kInstanceCreatedFieldNumber = 9,
    kUserIDFieldNumber = 6,
    kIDFieldNumber = 1,
    kSignalGroupIDFieldNumber = 2,
    kSignalInstanceIDFieldNumber = 3,
    kChangesetIDFieldNumber = 4,
  };
  // optional int64 created = 7 [default = 0];
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created() const;
  void _internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool checkedOut = 5 [default = false];
  bool has_checkedout() const;
  private:
  bool _internal_has_checkedout() const;
  public:
  void clear_checkedout();
  bool checkedout() const;
  void set_checkedout(bool value);
  private:
  bool _internal_checkedout() const;
  void _internal_set_checkedout(bool value);
  public:

  // optional bool deleted = 8 [default = false];
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // optional int32 instanceAction = 10 [default = 0];
  bool has_instanceaction() const;
  private:
  bool _internal_has_instanceaction() const;
  public:
  void clear_instanceaction();
  ::PROTOBUF_NAMESPACE_ID::int32 instanceaction() const;
  void set_instanceaction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instanceaction() const;
  void _internal_set_instanceaction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 instanceCreated = 9 [default = 0];
  bool has_instancecreated() const;
  private:
  bool _internal_has_instancecreated() const;
  public:
  void clear_instancecreated();
  ::PROTOBUF_NAMESPACE_ID::int64 instancecreated() const;
  void set_instancecreated(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instancecreated() const;
  void _internal_set_instancecreated(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 userID = 6 [default = -1];
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ID = 1 [default = -1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 signalGroupID = 2 [default = -1];
  bool has_signalgroupid() const;
  private:
  bool _internal_has_signalgroupid() const;
  public:
  void clear_signalgroupid();
  ::PROTOBUF_NAMESPACE_ID::int32 signalgroupid() const;
  void set_signalgroupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalgroupid() const;
  void _internal_set_signalgroupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 signalInstanceID = 3 [default = -1];
  bool has_signalinstanceid() const;
  private:
  bool _internal_has_signalinstanceid() const;
  public:
  void clear_signalinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 signalinstanceid() const;
  void set_signalinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalinstanceid() const;
  void _internal_set_signalinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 changesetID = 4 [default = -1];
  bool has_changesetid() const;
  private:
  bool _internal_has_changesetid() const;
  public:
  void clear_changesetid();
  ::PROTOBUF_NAMESPACE_ID::int32 changesetid() const;
  void set_changesetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changesetid() const;
  void _internal_set_changesetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.AppSignalDbField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  bool checkedout_;
  bool deleted_;
  ::PROTOBUF_NAMESPACE_ID::int32 instanceaction_;
  ::PROTOBUF_NAMESPACE_ID::int64 instancecreated_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalgroupid_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 changesetid_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class StateFlagSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.StateFlagSignal) */ {
 public:
  inline StateFlagSignal() : StateFlagSignal(nullptr) {}
  virtual ~StateFlagSignal();

  StateFlagSignal(const StateFlagSignal& from);
  StateFlagSignal(StateFlagSignal&& from) noexcept
    : StateFlagSignal() {
    *this = ::std::move(from);
  }

  inline StateFlagSignal& operator=(const StateFlagSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateFlagSignal& operator=(StateFlagSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateFlagSignal& default_instance();

  static inline const StateFlagSignal* internal_default_instance() {
    return reinterpret_cast<const StateFlagSignal*>(
               &_StateFlagSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(StateFlagSignal& a, StateFlagSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(StateFlagSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateFlagSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateFlagSignal* New() const final {
    return CreateMaybeMessage<StateFlagSignal>(nullptr);
  }

  StateFlagSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateFlagSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateFlagSignal& from);
  void MergeFrom(const StateFlagSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateFlagSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.StateFlagSignal";
  }
  protected:
  explicit StateFlagSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagSignalIDFieldNumber = 2,
    kFlagTypeFieldNumber = 1,
  };
  // optional string flagSignalID = 2;
  bool has_flagsignalid() const;
  private:
  bool _internal_has_flagsignalid() const;
  public:
  void clear_flagsignalid();
  const std::string& flagsignalid() const;
  void set_flagsignalid(const std::string& value);
  void set_flagsignalid(std::string&& value);
  void set_flagsignalid(const char* value);
  void set_flagsignalid(const char* value, size_t size);
  std::string* mutable_flagsignalid();
  std::string* release_flagsignalid();
  void set_allocated_flagsignalid(std::string* flagsignalid);
  private:
  const std::string& _internal_flagsignalid() const;
  void _internal_set_flagsignalid(const std::string& value);
  std::string* _internal_mutable_flagsignalid();
  public:

  // optional int32 flagType = 1 [default = 0];
  bool has_flagtype() const;
  private:
  bool _internal_has_flagtype() const;
  public:
  void clear_flagtype();
  ::PROTOBUF_NAMESPACE_ID::int32 flagtype() const;
  void set_flagtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flagtype() const;
  void _internal_set_flagtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.StateFlagSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flagsignalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 flagtype_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AppSignalCalculatedParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppSignalCalculatedParam) */ {
 public:
  inline AppSignalCalculatedParam() : AppSignalCalculatedParam(nullptr) {}
  virtual ~AppSignalCalculatedParam();

  AppSignalCalculatedParam(const AppSignalCalculatedParam& from);
  AppSignalCalculatedParam(AppSignalCalculatedParam&& from) noexcept
    : AppSignalCalculatedParam() {
    *this = ::std::move(from);
  }

  inline AppSignalCalculatedParam& operator=(const AppSignalCalculatedParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSignalCalculatedParam& operator=(AppSignalCalculatedParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppSignalCalculatedParam& default_instance();

  static inline const AppSignalCalculatedParam* internal_default_instance() {
    return reinterpret_cast<const AppSignalCalculatedParam*>(
               &_AppSignalCalculatedParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(AppSignalCalculatedParam& a, AppSignalCalculatedParam& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSignalCalculatedParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSignalCalculatedParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppSignalCalculatedParam* New() const final {
    return CreateMaybeMessage<AppSignalCalculatedParam>(nullptr);
  }

  AppSignalCalculatedParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppSignalCalculatedParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppSignalCalculatedParam& from);
  void MergeFrom(const AppSignalCalculatedParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSignalCalculatedParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppSignalCalculatedParam";
  }
  protected:
  explicit AppSignalCalculatedParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFlagsSignalsFieldNumber = 11,
    kIoBufAddrFieldNumber = 2,
    kTuningAddrFieldNumber = 3,
    kUalAddrFieldNumber = 4,
    kRegBufAddrFieldNumber = 5,
    kRegValueAddrFieldNumber = 6,
    kRegValidityAddrFieldNumber = 7,
    kHashFieldNumber = 1,
    kLmRamAccessFieldNumber = 8,
    kIsConstFieldNumber = 9,
    kConstValueFieldNumber = 10,
  };
  // repeated .Proto.StateFlagSignal stateFlagsSignals = 11;
  int stateflagssignals_size() const;
  private:
  int _internal_stateflagssignals_size() const;
  public:
  void clear_stateflagssignals();
  ::Proto::StateFlagSignal* mutable_stateflagssignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::StateFlagSignal >*
      mutable_stateflagssignals();
  private:
  const ::Proto::StateFlagSignal& _internal_stateflagssignals(int index) const;
  ::Proto::StateFlagSignal* _internal_add_stateflagssignals();
  public:
  const ::Proto::StateFlagSignal& stateflagssignals(int index) const;
  ::Proto::StateFlagSignal* add_stateflagssignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::StateFlagSignal >&
      stateflagssignals() const;

  // optional .Proto.Address16 ioBufAddr = 2;
  bool has_iobufaddr() const;
  private:
  bool _internal_has_iobufaddr() const;
  public:
  void clear_iobufaddr();
  const ::Proto::Address16& iobufaddr() const;
  ::Proto::Address16* release_iobufaddr();
  ::Proto::Address16* mutable_iobufaddr();
  void set_allocated_iobufaddr(::Proto::Address16* iobufaddr);
  private:
  const ::Proto::Address16& _internal_iobufaddr() const;
  ::Proto::Address16* _internal_mutable_iobufaddr();
  public:
  void unsafe_arena_set_allocated_iobufaddr(
      ::Proto::Address16* iobufaddr);
  ::Proto::Address16* unsafe_arena_release_iobufaddr();

  // optional .Proto.Address16 tuningAddr = 3;
  bool has_tuningaddr() const;
  private:
  bool _internal_has_tuningaddr() const;
  public:
  void clear_tuningaddr();
  const ::Proto::Address16& tuningaddr() const;
  ::Proto::Address16* release_tuningaddr();
  ::Proto::Address16* mutable_tuningaddr();
  void set_allocated_tuningaddr(::Proto::Address16* tuningaddr);
  private:
  const ::Proto::Address16& _internal_tuningaddr() const;
  ::Proto::Address16* _internal_mutable_tuningaddr();
  public:
  void unsafe_arena_set_allocated_tuningaddr(
      ::Proto::Address16* tuningaddr);
  ::Proto::Address16* unsafe_arena_release_tuningaddr();

  // optional .Proto.Address16 ualAddr = 4;
  bool has_ualaddr() const;
  private:
  bool _internal_has_ualaddr() const;
  public:
  void clear_ualaddr();
  const ::Proto::Address16& ualaddr() const;
  ::Proto::Address16* release_ualaddr();
  ::Proto::Address16* mutable_ualaddr();
  void set_allocated_ualaddr(::Proto::Address16* ualaddr);
  private:
  const ::Proto::Address16& _internal_ualaddr() const;
  ::Proto::Address16* _internal_mutable_ualaddr();
  public:
  void unsafe_arena_set_allocated_ualaddr(
      ::Proto::Address16* ualaddr);
  ::Proto::Address16* unsafe_arena_release_ualaddr();

  // optional .Proto.Address16 regBufAddr = 5;
  bool has_regbufaddr() const;
  private:
  bool _internal_has_regbufaddr() const;
  public:
  void clear_regbufaddr();
  const ::Proto::Address16& regbufaddr() const;
  ::Proto::Address16* release_regbufaddr();
  ::Proto::Address16* mutable_regbufaddr();
  void set_allocated_regbufaddr(::Proto::Address16* regbufaddr);
  private:
  const ::Proto::Address16& _internal_regbufaddr() const;
  ::Proto::Address16* _internal_mutable_regbufaddr();
  public:
  void unsafe_arena_set_allocated_regbufaddr(
      ::Proto::Address16* regbufaddr);
  ::Proto::Address16* unsafe_arena_release_regbufaddr();

  // optional .Proto.Address16 regValueAddr = 6;
  bool has_regvalueaddr() const;
  private:
  bool _internal_has_regvalueaddr() const;
  public:
  void clear_regvalueaddr();
  const ::Proto::Address16& regvalueaddr() const;
  ::Proto::Address16* release_regvalueaddr();
  ::Proto::Address16* mutable_regvalueaddr();
  void set_allocated_regvalueaddr(::Proto::Address16* regvalueaddr);
  private:
  const ::Proto::Address16& _internal_regvalueaddr() const;
  ::Proto::Address16* _internal_mutable_regvalueaddr();
  public:
  void unsafe_arena_set_allocated_regvalueaddr(
      ::Proto::Address16* regvalueaddr);
  ::Proto::Address16* unsafe_arena_release_regvalueaddr();

  // optional .Proto.Address16 regValidityAddr = 7;
  bool has_regvalidityaddr() const;
  private:
  bool _internal_has_regvalidityaddr() const;
  public:
  void clear_regvalidityaddr();
  const ::Proto::Address16& regvalidityaddr() const;
  ::Proto::Address16* release_regvalidityaddr();
  ::Proto::Address16* mutable_regvalidityaddr();
  void set_allocated_regvalidityaddr(::Proto::Address16* regvalidityaddr);
  private:
  const ::Proto::Address16& _internal_regvalidityaddr() const;
  ::Proto::Address16* _internal_mutable_regvalidityaddr();
  public:
  void unsafe_arena_set_allocated_regvalidityaddr(
      ::Proto::Address16* regvalidityaddr);
  ::Proto::Address16* unsafe_arena_release_regvalidityaddr();

  // optional uint64 hash = 1 [default = 0];
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 lmRamAccess = 8 [default = 0];
  bool has_lmramaccess() const;
  private:
  bool _internal_has_lmramaccess() const;
  public:
  void clear_lmramaccess();
  ::PROTOBUF_NAMESPACE_ID::int32 lmramaccess() const;
  void set_lmramaccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmramaccess() const;
  void _internal_set_lmramaccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool isConst = 9 [default = false];
  bool has_isconst() const;
  private:
  bool _internal_has_isconst() const;
  public:
  void clear_isconst();
  bool isconst() const;
  void set_isconst(bool value);
  private:
  bool _internal_isconst() const;
  void _internal_set_isconst(bool value);
  public:

  // optional double constValue = 10 [default = 0];
  bool has_constvalue() const;
  private:
  bool _internal_has_constvalue() const;
  public:
  void clear_constvalue();
  double constvalue() const;
  void set_constvalue(double value);
  private:
  double _internal_constvalue() const;
  void _internal_set_constvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.AppSignalCalculatedParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::StateFlagSignal > stateflagssignals_;
  ::Proto::Address16* iobufaddr_;
  ::Proto::Address16* tuningaddr_;
  ::Proto::Address16* ualaddr_;
  ::Proto::Address16* regbufaddr_;
  ::Proto::Address16* regvalueaddr_;
  ::Proto::Address16* regvalidityaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmramaccess_;
  bool isconst_;
  double constvalue_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AppSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppSignal) */ {
 public:
  inline AppSignal() : AppSignal(nullptr) {}
  virtual ~AppSignal();

  AppSignal(const AppSignal& from);
  AppSignal(AppSignal&& from) noexcept
    : AppSignal() {
    *this = ::std::move(from);
  }

  inline AppSignal& operator=(const AppSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSignal& operator=(AppSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppSignal& default_instance();

  static inline const AppSignal* internal_default_instance() {
    return reinterpret_cast<const AppSignal*>(
               &_AppSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(AppSignal& a, AppSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppSignal* New() const final {
    return CreateMaybeMessage<AppSignal>(nullptr);
  }

  AppSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppSignal& from);
  void MergeFrom(const AppSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppSignal";
  }
  protected:
  explicit AppSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 92,
    kAppSignalIDFieldNumber = 1,
    kCustomAppSignalIDFieldNumber = 2,
    kCaptionFieldNumber = 3,
    kEquipmentIDFieldNumber = 4,
    kLmEquipmentIDFieldNumber = 5,
    kBusTypeIDFieldNumber = 6,
    kUnitFieldNumber = 27,
    kSpecPropStructFieldNumber = 90,
    kSpecPropValuesFieldNumber = 91,
    kTuningDefaultValueFieldNumber = 72,
    kTuningLowBoundFieldNumber = 73,
    kTuningHighBoundFieldNumber = 74,
    kDbFieldFieldNumber = 120,
    kCalcParamFieldNumber = 121,
    kChannelFieldNumber = 7,
    kDataSizeFieldNumber = 21,
    kExcludeFromBuildFieldNumber = 8,
    kEnableTuningFieldNumber = 71,
    kAcquireFieldNumber = 81,
    kArchiveFieldNumber = 82,
    kAdaptiveApertureFieldNumber = 86,
    kDecimalPlacesFieldNumber = 83,
    kSignalTypeFieldNumber = 16,
    kInOutTypeFieldNumber = 17,
    kByteOrderFieldNumber = 22,
    kAnalogSignalFormatFieldNumber = 26,
    kCoarseApertureFieldNumber = 84,
    kFineApertureFieldNumber = 85,
  };
  // repeated string tags = 92;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string appSignalID = 1;
  bool has_appsignalid() const;
  private:
  bool _internal_has_appsignalid() const;
  public:
  void clear_appsignalid();
  const std::string& appsignalid() const;
  void set_appsignalid(const std::string& value);
  void set_appsignalid(std::string&& value);
  void set_appsignalid(const char* value);
  void set_appsignalid(const char* value, size_t size);
  std::string* mutable_appsignalid();
  std::string* release_appsignalid();
  void set_allocated_appsignalid(std::string* appsignalid);
  private:
  const std::string& _internal_appsignalid() const;
  void _internal_set_appsignalid(const std::string& value);
  std::string* _internal_mutable_appsignalid();
  public:

  // optional string customAppSignalID = 2;
  bool has_customappsignalid() const;
  private:
  bool _internal_has_customappsignalid() const;
  public:
  void clear_customappsignalid();
  const std::string& customappsignalid() const;
  void set_customappsignalid(const std::string& value);
  void set_customappsignalid(std::string&& value);
  void set_customappsignalid(const char* value);
  void set_customappsignalid(const char* value, size_t size);
  std::string* mutable_customappsignalid();
  std::string* release_customappsignalid();
  void set_allocated_customappsignalid(std::string* customappsignalid);
  private:
  const std::string& _internal_customappsignalid() const;
  void _internal_set_customappsignalid(const std::string& value);
  std::string* _internal_mutable_customappsignalid();
  public:

  // optional string caption = 3;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional string equipmentID = 4;
  bool has_equipmentid() const;
  private:
  bool _internal_has_equipmentid() const;
  public:
  void clear_equipmentid();
  const std::string& equipmentid() const;
  void set_equipmentid(const std::string& value);
  void set_equipmentid(std::string&& value);
  void set_equipmentid(const char* value);
  void set_equipmentid(const char* value, size_t size);
  std::string* mutable_equipmentid();
  std::string* release_equipmentid();
  void set_allocated_equipmentid(std::string* equipmentid);
  private:
  const std::string& _internal_equipmentid() const;
  void _internal_set_equipmentid(const std::string& value);
  std::string* _internal_mutable_equipmentid();
  public:

  // optional string lmEquipmentID = 5;
  bool has_lmequipmentid() const;
  private:
  bool _internal_has_lmequipmentid() const;
  public:
  void clear_lmequipmentid();
  const std::string& lmequipmentid() const;
  void set_lmequipmentid(const std::string& value);
  void set_lmequipmentid(std::string&& value);
  void set_lmequipmentid(const char* value);
  void set_lmequipmentid(const char* value, size_t size);
  std::string* mutable_lmequipmentid();
  std::string* release_lmequipmentid();
  void set_allocated_lmequipmentid(std::string* lmequipmentid);
  private:
  const std::string& _internal_lmequipmentid() const;
  void _internal_set_lmequipmentid(const std::string& value);
  std::string* _internal_mutable_lmequipmentid();
  public:

  // optional string busTypeID = 6;
  bool has_bustypeid() const;
  private:
  bool _internal_has_bustypeid() const;
  public:
  void clear_bustypeid();
  const std::string& bustypeid() const;
  void set_bustypeid(const std::string& value);
  void set_bustypeid(std::string&& value);
  void set_bustypeid(const char* value);
  void set_bustypeid(const char* value, size_t size);
  std::string* mutable_bustypeid();
  std::string* release_bustypeid();
  void set_allocated_bustypeid(std::string* bustypeid);
  private:
  const std::string& _internal_bustypeid() const;
  void _internal_set_bustypeid(const std::string& value);
  std::string* _internal_mutable_bustypeid();
  public:

  // optional string unit = 27;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional string specPropStruct = 90;
  bool has_specpropstruct() const;
  private:
  bool _internal_has_specpropstruct() const;
  public:
  void clear_specpropstruct();
  const std::string& specpropstruct() const;
  void set_specpropstruct(const std::string& value);
  void set_specpropstruct(std::string&& value);
  void set_specpropstruct(const char* value);
  void set_specpropstruct(const char* value, size_t size);
  std::string* mutable_specpropstruct();
  std::string* release_specpropstruct();
  void set_allocated_specpropstruct(std::string* specpropstruct);
  private:
  const std::string& _internal_specpropstruct() const;
  void _internal_set_specpropstruct(const std::string& value);
  std::string* _internal_mutable_specpropstruct();
  public:

  // optional bytes specPropValues = 91;
  bool has_specpropvalues() const;
  private:
  bool _internal_has_specpropvalues() const;
  public:
  void clear_specpropvalues();
  const std::string& specpropvalues() const;
  void set_specpropvalues(const std::string& value);
  void set_specpropvalues(std::string&& value);
  void set_specpropvalues(const char* value);
  void set_specpropvalues(const void* value, size_t size);
  std::string* mutable_specpropvalues();
  std::string* release_specpropvalues();
  void set_allocated_specpropvalues(std::string* specpropvalues);
  private:
  const std::string& _internal_specpropvalues() const;
  void _internal_set_specpropvalues(const std::string& value);
  std::string* _internal_mutable_specpropvalues();
  public:

  // optional .Proto.TuningValue tuningDefaultValue = 72;
  bool has_tuningdefaultvalue() const;
  private:
  bool _internal_has_tuningdefaultvalue() const;
  public:
  void clear_tuningdefaultvalue();
  const ::Proto::TuningValue& tuningdefaultvalue() const;
  ::Proto::TuningValue* release_tuningdefaultvalue();
  ::Proto::TuningValue* mutable_tuningdefaultvalue();
  void set_allocated_tuningdefaultvalue(::Proto::TuningValue* tuningdefaultvalue);
  private:
  const ::Proto::TuningValue& _internal_tuningdefaultvalue() const;
  ::Proto::TuningValue* _internal_mutable_tuningdefaultvalue();
  public:
  void unsafe_arena_set_allocated_tuningdefaultvalue(
      ::Proto::TuningValue* tuningdefaultvalue);
  ::Proto::TuningValue* unsafe_arena_release_tuningdefaultvalue();

  // optional .Proto.TuningValue tuningLowBound = 73;
  bool has_tuninglowbound() const;
  private:
  bool _internal_has_tuninglowbound() const;
  public:
  void clear_tuninglowbound();
  const ::Proto::TuningValue& tuninglowbound() const;
  ::Proto::TuningValue* release_tuninglowbound();
  ::Proto::TuningValue* mutable_tuninglowbound();
  void set_allocated_tuninglowbound(::Proto::TuningValue* tuninglowbound);
  private:
  const ::Proto::TuningValue& _internal_tuninglowbound() const;
  ::Proto::TuningValue* _internal_mutable_tuninglowbound();
  public:
  void unsafe_arena_set_allocated_tuninglowbound(
      ::Proto::TuningValue* tuninglowbound);
  ::Proto::TuningValue* unsafe_arena_release_tuninglowbound();

  // optional .Proto.TuningValue tuningHighBound = 74;
  bool has_tuninghighbound() const;
  private:
  bool _internal_has_tuninghighbound() const;
  public:
  void clear_tuninghighbound();
  const ::Proto::TuningValue& tuninghighbound() const;
  ::Proto::TuningValue* release_tuninghighbound();
  ::Proto::TuningValue* mutable_tuninghighbound();
  void set_allocated_tuninghighbound(::Proto::TuningValue* tuninghighbound);
  private:
  const ::Proto::TuningValue& _internal_tuninghighbound() const;
  ::Proto::TuningValue* _internal_mutable_tuninghighbound();
  public:
  void unsafe_arena_set_allocated_tuninghighbound(
      ::Proto::TuningValue* tuninghighbound);
  ::Proto::TuningValue* unsafe_arena_release_tuninghighbound();

  // optional .Proto.AppSignalDbField dbField = 120;
  bool has_dbfield() const;
  private:
  bool _internal_has_dbfield() const;
  public:
  void clear_dbfield();
  const ::Proto::AppSignalDbField& dbfield() const;
  ::Proto::AppSignalDbField* release_dbfield();
  ::Proto::AppSignalDbField* mutable_dbfield();
  void set_allocated_dbfield(::Proto::AppSignalDbField* dbfield);
  private:
  const ::Proto::AppSignalDbField& _internal_dbfield() const;
  ::Proto::AppSignalDbField* _internal_mutable_dbfield();
  public:
  void unsafe_arena_set_allocated_dbfield(
      ::Proto::AppSignalDbField* dbfield);
  ::Proto::AppSignalDbField* unsafe_arena_release_dbfield();

  // optional .Proto.AppSignalCalculatedParam calcParam = 121;
  bool has_calcparam() const;
  private:
  bool _internal_has_calcparam() const;
  public:
  void clear_calcparam();
  const ::Proto::AppSignalCalculatedParam& calcparam() const;
  ::Proto::AppSignalCalculatedParam* release_calcparam();
  ::Proto::AppSignalCalculatedParam* mutable_calcparam();
  void set_allocated_calcparam(::Proto::AppSignalCalculatedParam* calcparam);
  private:
  const ::Proto::AppSignalCalculatedParam& _internal_calcparam() const;
  ::Proto::AppSignalCalculatedParam* _internal_mutable_calcparam();
  public:
  void unsafe_arena_set_allocated_calcparam(
      ::Proto::AppSignalCalculatedParam* calcparam);
  ::Proto::AppSignalCalculatedParam* unsafe_arena_release_calcparam();

  // optional int32 channel = 7 [default = 0];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dataSize = 21 [default = 0];
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool excludeFromBuild = 8 [default = false];
  bool has_excludefrombuild() const;
  private:
  bool _internal_has_excludefrombuild() const;
  public:
  void clear_excludefrombuild();
  bool excludefrombuild() const;
  void set_excludefrombuild(bool value);
  private:
  bool _internal_excludefrombuild() const;
  void _internal_set_excludefrombuild(bool value);
  public:

  // optional bool enableTuning = 71 [default = false];
  bool has_enabletuning() const;
  private:
  bool _internal_has_enabletuning() const;
  public:
  void clear_enabletuning();
  bool enabletuning() const;
  void set_enabletuning(bool value);
  private:
  bool _internal_enabletuning() const;
  void _internal_set_enabletuning(bool value);
  public:

  // optional bool acquire = 81 [default = false];
  bool has_acquire() const;
  private:
  bool _internal_has_acquire() const;
  public:
  void clear_acquire();
  bool acquire() const;
  void set_acquire(bool value);
  private:
  bool _internal_acquire() const;
  void _internal_set_acquire(bool value);
  public:

  // optional bool archive = 82 [default = false];
  bool has_archive() const;
  private:
  bool _internal_has_archive() const;
  public:
  void clear_archive();
  bool archive() const;
  void set_archive(bool value);
  private:
  bool _internal_archive() const;
  void _internal_set_archive(bool value);
  public:

  // optional bool adaptiveAperture = 86 [default = false];
  bool has_adaptiveaperture() const;
  private:
  bool _internal_has_adaptiveaperture() const;
  public:
  void clear_adaptiveaperture();
  bool adaptiveaperture() const;
  void set_adaptiveaperture(bool value);
  private:
  bool _internal_adaptiveaperture() const;
  void _internal_set_adaptiveaperture(bool value);
  public:

  // optional int32 decimalPlaces = 83 [default = 2];
  bool has_decimalplaces() const;
  private:
  bool _internal_has_decimalplaces() const;
  public:
  void clear_decimalplaces();
  ::PROTOBUF_NAMESPACE_ID::int32 decimalplaces() const;
  void set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_decimalplaces() const;
  void _internal_set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 signalType = 16 [default = 1];
  bool has_signaltype() const;
  private:
  bool _internal_has_signaltype() const;
  public:
  void clear_signaltype();
  ::PROTOBUF_NAMESPACE_ID::int32 signaltype() const;
  void set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signaltype() const;
  void _internal_set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 inOutType = 17 [default = 2];
  bool has_inouttype() const;
  private:
  bool _internal_has_inouttype() const;
  public:
  void clear_inouttype();
  ::PROTOBUF_NAMESPACE_ID::int32 inouttype() const;
  void set_inouttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inouttype() const;
  void _internal_set_inouttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 byteOrder = 22 [default = 1];
  bool has_byteorder() const;
  private:
  bool _internal_has_byteorder() const;
  public:
  void clear_byteorder();
  ::PROTOBUF_NAMESPACE_ID::int32 byteorder() const;
  void set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_byteorder() const;
  void _internal_set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogSignalFormat = 26 [default = 1];
  bool has_analogsignalformat() const;
  private:
  bool _internal_has_analogsignalformat() const;
  public:
  void clear_analogsignalformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogsignalformat() const;
  void set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogsignalformat() const;
  void _internal_set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double coarseAperture = 84 [default = 1];
  bool has_coarseaperture() const;
  private:
  bool _internal_has_coarseaperture() const;
  public:
  void clear_coarseaperture();
  double coarseaperture() const;
  void set_coarseaperture(double value);
  private:
  double _internal_coarseaperture() const;
  void _internal_set_coarseaperture(double value);
  public:

  // optional double fineAperture = 85 [default = 0.5];
  bool has_fineaperture() const;
  private:
  bool _internal_has_fineaperture() const;
  public:
  void clear_fineaperture();
  double fineaperture() const;
  void set_fineaperture(double value);
  private:
  double _internal_fineaperture() const;
  void _internal_set_fineaperture(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.AppSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsignalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customappsignalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmequipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bustypeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specpropstruct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specpropvalues_;
  ::Proto::TuningValue* tuningdefaultvalue_;
  ::Proto::TuningValue* tuninglowbound_;
  ::Proto::TuningValue* tuninghighbound_;
  ::Proto::AppSignalDbField* dbfield_;
  ::Proto::AppSignalCalculatedParam* calcparam_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasize_;
  bool excludefrombuild_;
  bool enabletuning_;
  bool acquire_;
  bool archive_;
  bool adaptiveaperture_;
  ::PROTOBUF_NAMESPACE_ID::int32 decimalplaces_;
  ::PROTOBUF_NAMESPACE_ID::int32 signaltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 inouttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 byteorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogsignalformat_;
  double coarseaperture_;
  double fineaperture_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AppSignalSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppSignalSet) */ {
 public:
  inline AppSignalSet() : AppSignalSet(nullptr) {}
  virtual ~AppSignalSet();

  AppSignalSet(const AppSignalSet& from);
  AppSignalSet(AppSignalSet&& from) noexcept
    : AppSignalSet() {
    *this = ::std::move(from);
  }

  inline AppSignalSet& operator=(const AppSignalSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSignalSet& operator=(AppSignalSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppSignalSet& default_instance();

  static inline const AppSignalSet* internal_default_instance() {
    return reinterpret_cast<const AppSignalSet*>(
               &_AppSignalSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(AppSignalSet& a, AppSignalSet& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSignalSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSignalSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppSignalSet* New() const final {
    return CreateMaybeMessage<AppSignalSet>(nullptr);
  }

  AppSignalSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppSignalSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppSignalSet& from);
  void MergeFrom(const AppSignalSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSignalSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppSignalSet";
  }
  protected:
  explicit AppSignalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalFieldNumber = 1,
  };
  // repeated .Proto.AppSignal appSignal = 1;
  int appsignal_size() const;
  private:
  int _internal_appsignal_size() const;
  public:
  void clear_appsignal();
  ::Proto::AppSignal* mutable_appsignal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >*
      mutable_appsignal();
  private:
  const ::Proto::AppSignal& _internal_appsignal(int index) const;
  ::Proto::AppSignal* _internal_add_appsignal();
  public:
  const ::Proto::AppSignal& appsignal(int index) const;
  ::Proto::AppSignal* add_appsignal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >&
      appsignal() const;

  // @@protoc_insertion_point(class_scope:Proto.AppSignalSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal > appsignal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ProtoAppSignalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ProtoAppSignalData) */ {
 public:
  inline ProtoAppSignalData() : ProtoAppSignalData(nullptr) {}
  virtual ~ProtoAppSignalData();

  ProtoAppSignalData(const ProtoAppSignalData& from);
  ProtoAppSignalData(ProtoAppSignalData&& from) noexcept
    : ProtoAppSignalData() {
    *this = ::std::move(from);
  }

  inline ProtoAppSignalData& operator=(const ProtoAppSignalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoAppSignalData& operator=(ProtoAppSignalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoAppSignalData& default_instance();

  static inline const ProtoAppSignalData* internal_default_instance() {
    return reinterpret_cast<const ProtoAppSignalData*>(
               &_ProtoAppSignalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ProtoAppSignalData& a, ProtoAppSignalData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoAppSignalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoAppSignalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoAppSignalData* New() const final {
    return CreateMaybeMessage<ProtoAppSignalData>(nullptr);
  }

  ProtoAppSignalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoAppSignalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoAppSignalData& from);
  void MergeFrom(const ProtoAppSignalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoAppSignalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ProtoAppSignalData";
  }
  protected:
  explicit ProtoAppSignalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusTypeIDFieldNumber = 1,
    kCaptionFieldNumber = 2,
    kUnitFieldNumber = 7,
    kTagsFieldNumber = 19,
    kUserSpecPropStructFieldNumber = 20,
    kUserSpecPropValuesFieldNumber = 21,
    kTuningDefaultValueFieldNumber = 9,
    kTuningLowBoundFieldNumber = 10,
    kTuningHighBoundFieldNumber = 11,
    kChannelFieldNumber = 3,
    kEnableTuningFieldNumber = 8,
    kAdaptiveApertureFieldNumber = 17,
    kExcludefromBuildFieldNumber = 18,
    kDecimalPlacesFieldNumber = 14,
    kDataSizeFieldNumber = 4,
    kByteOrderFieldNumber = 5,
    kAnalogSignalFormatFieldNumber = 6,
    kAcquireFieldNumber = 12,
    kArchiveFieldNumber = 13,
    kCoarseApertureFieldNumber = 15,
    kFineApertureFieldNumber = 16,
  };
  // optional string busTypeID = 1;
  bool has_bustypeid() const;
  private:
  bool _internal_has_bustypeid() const;
  public:
  void clear_bustypeid();
  const std::string& bustypeid() const;
  void set_bustypeid(const std::string& value);
  void set_bustypeid(std::string&& value);
  void set_bustypeid(const char* value);
  void set_bustypeid(const char* value, size_t size);
  std::string* mutable_bustypeid();
  std::string* release_bustypeid();
  void set_allocated_bustypeid(std::string* bustypeid);
  private:
  const std::string& _internal_bustypeid() const;
  void _internal_set_bustypeid(const std::string& value);
  std::string* _internal_mutable_bustypeid();
  public:

  // optional string caption = 2;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional string unit = 7;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional string tags = 19;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const std::string& tags() const;
  void set_tags(const std::string& value);
  void set_tags(std::string&& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  std::string* mutable_tags();
  std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // optional string userSpecPropStruct = 20;
  bool has_userspecpropstruct() const;
  private:
  bool _internal_has_userspecpropstruct() const;
  public:
  void clear_userspecpropstruct();
  const std::string& userspecpropstruct() const;
  void set_userspecpropstruct(const std::string& value);
  void set_userspecpropstruct(std::string&& value);
  void set_userspecpropstruct(const char* value);
  void set_userspecpropstruct(const char* value, size_t size);
  std::string* mutable_userspecpropstruct();
  std::string* release_userspecpropstruct();
  void set_allocated_userspecpropstruct(std::string* userspecpropstruct);
  private:
  const std::string& _internal_userspecpropstruct() const;
  void _internal_set_userspecpropstruct(const std::string& value);
  std::string* _internal_mutable_userspecpropstruct();
  public:

  // optional bytes userSpecPropValues = 21;
  bool has_userspecpropvalues() const;
  private:
  bool _internal_has_userspecpropvalues() const;
  public:
  void clear_userspecpropvalues();
  const std::string& userspecpropvalues() const;
  void set_userspecpropvalues(const std::string& value);
  void set_userspecpropvalues(std::string&& value);
  void set_userspecpropvalues(const char* value);
  void set_userspecpropvalues(const void* value, size_t size);
  std::string* mutable_userspecpropvalues();
  std::string* release_userspecpropvalues();
  void set_allocated_userspecpropvalues(std::string* userspecpropvalues);
  private:
  const std::string& _internal_userspecpropvalues() const;
  void _internal_set_userspecpropvalues(const std::string& value);
  std::string* _internal_mutable_userspecpropvalues();
  public:

  // optional .Proto.TuningValue tuningDefaultValue = 9;
  bool has_tuningdefaultvalue() const;
  private:
  bool _internal_has_tuningdefaultvalue() const;
  public:
  void clear_tuningdefaultvalue();
  const ::Proto::TuningValue& tuningdefaultvalue() const;
  ::Proto::TuningValue* release_tuningdefaultvalue();
  ::Proto::TuningValue* mutable_tuningdefaultvalue();
  void set_allocated_tuningdefaultvalue(::Proto::TuningValue* tuningdefaultvalue);
  private:
  const ::Proto::TuningValue& _internal_tuningdefaultvalue() const;
  ::Proto::TuningValue* _internal_mutable_tuningdefaultvalue();
  public:
  void unsafe_arena_set_allocated_tuningdefaultvalue(
      ::Proto::TuningValue* tuningdefaultvalue);
  ::Proto::TuningValue* unsafe_arena_release_tuningdefaultvalue();

  // optional .Proto.TuningValue tuningLowBound = 10;
  bool has_tuninglowbound() const;
  private:
  bool _internal_has_tuninglowbound() const;
  public:
  void clear_tuninglowbound();
  const ::Proto::TuningValue& tuninglowbound() const;
  ::Proto::TuningValue* release_tuninglowbound();
  ::Proto::TuningValue* mutable_tuninglowbound();
  void set_allocated_tuninglowbound(::Proto::TuningValue* tuninglowbound);
  private:
  const ::Proto::TuningValue& _internal_tuninglowbound() const;
  ::Proto::TuningValue* _internal_mutable_tuninglowbound();
  public:
  void unsafe_arena_set_allocated_tuninglowbound(
      ::Proto::TuningValue* tuninglowbound);
  ::Proto::TuningValue* unsafe_arena_release_tuninglowbound();

  // optional .Proto.TuningValue tuningHighBound = 11;
  bool has_tuninghighbound() const;
  private:
  bool _internal_has_tuninghighbound() const;
  public:
  void clear_tuninghighbound();
  const ::Proto::TuningValue& tuninghighbound() const;
  ::Proto::TuningValue* release_tuninghighbound();
  ::Proto::TuningValue* mutable_tuninghighbound();
  void set_allocated_tuninghighbound(::Proto::TuningValue* tuninghighbound);
  private:
  const ::Proto::TuningValue& _internal_tuninghighbound() const;
  ::Proto::TuningValue* _internal_mutable_tuninghighbound();
  public:
  void unsafe_arena_set_allocated_tuninghighbound(
      ::Proto::TuningValue* tuninghighbound);
  ::Proto::TuningValue* unsafe_arena_release_tuninghighbound();

  // optional int32 channel = 3 [default = 0];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool enableTuning = 8 [default = false];
  bool has_enabletuning() const;
  private:
  bool _internal_has_enabletuning() const;
  public:
  void clear_enabletuning();
  bool enabletuning() const;
  void set_enabletuning(bool value);
  private:
  bool _internal_enabletuning() const;
  void _internal_set_enabletuning(bool value);
  public:

  // optional bool adaptiveAperture = 17 [default = false];
  bool has_adaptiveaperture() const;
  private:
  bool _internal_has_adaptiveaperture() const;
  public:
  void clear_adaptiveaperture();
  bool adaptiveaperture() const;
  void set_adaptiveaperture(bool value);
  private:
  bool _internal_adaptiveaperture() const;
  void _internal_set_adaptiveaperture(bool value);
  public:

  // optional bool excludefromBuild = 18 [default = false];
  bool has_excludefrombuild() const;
  private:
  bool _internal_has_excludefrombuild() const;
  public:
  void clear_excludefrombuild();
  bool excludefrombuild() const;
  void set_excludefrombuild(bool value);
  private:
  bool _internal_excludefrombuild() const;
  void _internal_set_excludefrombuild(bool value);
  public:

  // optional int32 decimalPlaces = 14 [default = 2];
  bool has_decimalplaces() const;
  private:
  bool _internal_has_decimalplaces() const;
  public:
  void clear_decimalplaces();
  ::PROTOBUF_NAMESPACE_ID::int32 decimalplaces() const;
  void set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_decimalplaces() const;
  void _internal_set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dataSize = 4 [default = 32];
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 byteOrder = 5 [default = 1];
  bool has_byteorder() const;
  private:
  bool _internal_has_byteorder() const;
  public:
  void clear_byteorder();
  ::PROTOBUF_NAMESPACE_ID::int32 byteorder() const;
  void set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_byteorder() const;
  void _internal_set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogSignalFormat = 6 [default = 2];
  bool has_analogsignalformat() const;
  private:
  bool _internal_has_analogsignalformat() const;
  public:
  void clear_analogsignalformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogsignalformat() const;
  void set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogsignalformat() const;
  void _internal_set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool acquire = 12 [default = true];
  bool has_acquire() const;
  private:
  bool _internal_has_acquire() const;
  public:
  void clear_acquire();
  bool acquire() const;
  void set_acquire(bool value);
  private:
  bool _internal_acquire() const;
  void _internal_set_acquire(bool value);
  public:

  // optional bool archive = 13 [default = true];
  bool has_archive() const;
  private:
  bool _internal_has_archive() const;
  public:
  void clear_archive();
  bool archive() const;
  void set_archive(bool value);
  private:
  bool _internal_archive() const;
  void _internal_set_archive(bool value);
  public:

  // optional double coarseAperture = 15 [default = 1];
  bool has_coarseaperture() const;
  private:
  bool _internal_has_coarseaperture() const;
  public:
  void clear_coarseaperture();
  double coarseaperture() const;
  void set_coarseaperture(double value);
  private:
  double _internal_coarseaperture() const;
  void _internal_set_coarseaperture(double value);
  public:

  // optional double fineAperture = 16 [default = 0.5];
  bool has_fineaperture() const;
  private:
  bool _internal_has_fineaperture() const;
  public:
  void clear_fineaperture();
  double fineaperture() const;
  void set_fineaperture(double value);
  private:
  double _internal_fineaperture() const;
  void _internal_set_fineaperture(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.ProtoAppSignalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bustypeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userspecpropstruct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userspecpropvalues_;
  ::Proto::TuningValue* tuningdefaultvalue_;
  ::Proto::TuningValue* tuninglowbound_;
  ::Proto::TuningValue* tuninghighbound_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  bool enabletuning_;
  bool adaptiveaperture_;
  bool excludefrombuild_;
  ::PROTOBUF_NAMESPACE_ID::int32 decimalplaces_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::int32 byteorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogsignalformat_;
  bool acquire_;
  bool archive_;
  double coarseaperture_;
  double fineaperture_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class AppSignalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppSignalState) */ {
 public:
  inline AppSignalState() : AppSignalState(nullptr) {}
  virtual ~AppSignalState();

  AppSignalState(const AppSignalState& from);
  AppSignalState(AppSignalState&& from) noexcept
    : AppSignalState() {
    *this = ::std::move(from);
  }

  inline AppSignalState& operator=(const AppSignalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSignalState& operator=(AppSignalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppSignalState& default_instance();

  static inline const AppSignalState* internal_default_instance() {
    return reinterpret_cast<const AppSignalState*>(
               &_AppSignalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(AppSignalState& a, AppSignalState& b) {
    a.Swap(&b);
  }
  inline void Swap(AppSignalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSignalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppSignalState* New() const final {
    return CreateMaybeMessage<AppSignalState>(nullptr);
  }

  AppSignalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppSignalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppSignalState& from);
  void MergeFrom(const AppSignalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppSignalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppSignalState";
  }
  protected:
  explicit AppSignalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kValueFieldNumber = 2,
    kSystemTimeFieldNumber = 4,
    kLocalTimeFieldNumber = 5,
    kFlagsFieldNumber = 3,
    kPacketNoFieldNumber = 8,
    kPlantTimeFieldNumber = 6,
    kArchiveIdFieldNumber = 7,
  };
  // optional uint64 hash = 1 [default = 0];
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double value = 2 [default = 0];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // optional sfixed64 systemTime = 4 [default = 0];
  bool has_systemtime() const;
  private:
  bool _internal_has_systemtime() const;
  public:
  void clear_systemtime();
  ::PROTOBUF_NAMESPACE_ID::int64 systemtime() const;
  void set_systemtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_systemtime() const;
  void _internal_set_systemtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 localTime = 5 [default = 0];
  bool has_localtime() const;
  private:
  bool _internal_has_localtime() const;
  public:
  void clear_localtime();
  ::PROTOBUF_NAMESPACE_ID::int64 localtime() const;
  void set_localtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_localtime() const;
  void _internal_set_localtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint32 flags = 3 [default = 0];
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 packetNo = 8 [default = 0];
  bool has_packetno() const;
  private:
  bool _internal_has_packetno() const;
  public:
  void clear_packetno();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetno() const;
  void set_packetno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetno() const;
  void _internal_set_packetno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sfixed64 plantTime = 6 [default = 0];
  bool has_planttime() const;
  private:
  bool _internal_has_planttime() const;
  public:
  void clear_planttime();
  ::PROTOBUF_NAMESPACE_ID::int64 planttime() const;
  void set_planttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_planttime() const;
  void _internal_set_planttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 archiveId = 7 [default = -1];
  bool has_archiveid() const;
  private:
  bool _internal_has_archiveid() const;
  public:
  void clear_archiveid();
  ::PROTOBUF_NAMESPACE_ID::int64 archiveid() const;
  void set_archiveid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_archiveid() const;
  void _internal_set_archiveid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.AppSignalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_;
  double value_;
  ::PROTOBUF_NAMESPACE_ID::int64 systemtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 localtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetno_;
  ::PROTOBUF_NAMESPACE_ID::int64 planttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 archiveid_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Connection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  virtual ~Connection();

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Connection& default_instance();

  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const final {
    return CreateMaybeMessage<Connection>(nullptr);
  }

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Connection";
  }
  protected:
  explicit Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIDFieldNumber = 2,
    kPort1EquipmentIDFieldNumber = 3,
    kPort2EquipmentIDFieldNumber = 4,
    kPort1RawDataDescriptionFieldNumber = 5,
    kPort2RawDataDescriptionFieldNumber = 6,
    kUuidFieldNumber = 20,
    kObsoleteSerialModeFieldNumber = 7,
    kObsoleteModeFieldNumber = 8,
    kPort1TxStartAddressFieldNumber = 14,
    kManualSettingsFieldNumber = 11,
    kDisableDataIDFieldNumber = 12,
    kGenerateVHDFileFieldNumber = 13,
    kPort1EnableSerialFieldNumber = 21,
    kPort2TxStartAddressFieldNumber = 17,
    kPort1EnableDuplexFieldNumber = 23,
    kPort2EnableSerialFieldNumber = 24,
    kPort2EnableDuplexFieldNumber = 26,
    kObsoleteEnableDuplexFieldNumber = 10,
    kPort1SerialModeFieldNumber = 22,
    kPort2SerialModeFieldNumber = 25,
    kTypeFieldNumber = 27,
    kPort1TxWordsQuantityFieldNumber = 15,
    kPort1RxWordsQuantityFieldNumber = 16,
    kPort2TxWordsQuantityFieldNumber = 18,
    kPort2RxWordsQuantityFieldNumber = 19,
  };
  // optional string ConnectionID = 2 [default = ""];
  bool has_connectionid() const;
  private:
  bool _internal_has_connectionid() const;
  public:
  void clear_connectionid();
  const std::string& connectionid() const;
  void set_connectionid(const std::string& value);
  void set_connectionid(std::string&& value);
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  std::string* mutable_connectionid();
  std::string* release_connectionid();
  void set_allocated_connectionid(std::string* connectionid);
  private:
  const std::string& _internal_connectionid() const;
  void _internal_set_connectionid(const std::string& value);
  std::string* _internal_mutable_connectionid();
  public:

  // optional string Port1EquipmentID = 3 [default = ""];
  bool has_port1equipmentid() const;
  private:
  bool _internal_has_port1equipmentid() const;
  public:
  void clear_port1equipmentid();
  const std::string& port1equipmentid() const;
  void set_port1equipmentid(const std::string& value);
  void set_port1equipmentid(std::string&& value);
  void set_port1equipmentid(const char* value);
  void set_port1equipmentid(const char* value, size_t size);
  std::string* mutable_port1equipmentid();
  std::string* release_port1equipmentid();
  void set_allocated_port1equipmentid(std::string* port1equipmentid);
  private:
  const std::string& _internal_port1equipmentid() const;
  void _internal_set_port1equipmentid(const std::string& value);
  std::string* _internal_mutable_port1equipmentid();
  public:

  // optional string Port2EquipmentID = 4 [default = ""];
  bool has_port2equipmentid() const;
  private:
  bool _internal_has_port2equipmentid() const;
  public:
  void clear_port2equipmentid();
  const std::string& port2equipmentid() const;
  void set_port2equipmentid(const std::string& value);
  void set_port2equipmentid(std::string&& value);
  void set_port2equipmentid(const char* value);
  void set_port2equipmentid(const char* value, size_t size);
  std::string* mutable_port2equipmentid();
  std::string* release_port2equipmentid();
  void set_allocated_port2equipmentid(std::string* port2equipmentid);
  private:
  const std::string& _internal_port2equipmentid() const;
  void _internal_set_port2equipmentid(const std::string& value);
  std::string* _internal_mutable_port2equipmentid();
  public:

  // optional string Port1RawDataDescription = 5 [default = ""];
  bool has_port1rawdatadescription() const;
  private:
  bool _internal_has_port1rawdatadescription() const;
  public:
  void clear_port1rawdatadescription();
  const std::string& port1rawdatadescription() const;
  void set_port1rawdatadescription(const std::string& value);
  void set_port1rawdatadescription(std::string&& value);
  void set_port1rawdatadescription(const char* value);
  void set_port1rawdatadescription(const char* value, size_t size);
  std::string* mutable_port1rawdatadescription();
  std::string* release_port1rawdatadescription();
  void set_allocated_port1rawdatadescription(std::string* port1rawdatadescription);
  private:
  const std::string& _internal_port1rawdatadescription() const;
  void _internal_set_port1rawdatadescription(const std::string& value);
  std::string* _internal_mutable_port1rawdatadescription();
  public:

  // optional string Port2RawDataDescription = 6 [default = ""];
  bool has_port2rawdatadescription() const;
  private:
  bool _internal_has_port2rawdatadescription() const;
  public:
  void clear_port2rawdatadescription();
  const std::string& port2rawdatadescription() const;
  void set_port2rawdatadescription(const std::string& value);
  void set_port2rawdatadescription(std::string&& value);
  void set_port2rawdatadescription(const char* value);
  void set_port2rawdatadescription(const char* value, size_t size);
  std::string* mutable_port2rawdatadescription();
  std::string* release_port2rawdatadescription();
  void set_allocated_port2rawdatadescription(std::string* port2rawdatadescription);
  private:
  const std::string& _internal_port2rawdatadescription() const;
  void _internal_set_port2rawdatadescription(const std::string& value);
  std::string* _internal_mutable_port2rawdatadescription();
  public:

  // optional .Proto.Uuid uuid = 20;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // optional int32 ObsoleteSerialMode = 7 [default = 0];
  bool has_obsoleteserialmode() const;
  private:
  bool _internal_has_obsoleteserialmode() const;
  public:
  void clear_obsoleteserialmode();
  ::PROTOBUF_NAMESPACE_ID::int32 obsoleteserialmode() const;
  void set_obsoleteserialmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obsoleteserialmode() const;
  void _internal_set_obsoleteserialmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ObsoleteMode = 8 [default = 0];
  bool has_obsoletemode() const;
  private:
  bool _internal_has_obsoletemode() const;
  public:
  void clear_obsoletemode();
  ::PROTOBUF_NAMESPACE_ID::int32 obsoletemode() const;
  void set_obsoletemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obsoletemode() const;
  void _internal_set_obsoletemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Port1TxStartAddress = 14 [default = 0];
  bool has_port1txstartaddress() const;
  private:
  bool _internal_has_port1txstartaddress() const;
  public:
  void clear_port1txstartaddress();
  ::PROTOBUF_NAMESPACE_ID::int32 port1txstartaddress() const;
  void set_port1txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port1txstartaddress() const;
  void _internal_set_port1txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool ManualSettings = 11 [default = false];
  bool has_manualsettings() const;
  private:
  bool _internal_has_manualsettings() const;
  public:
  void clear_manualsettings();
  bool manualsettings() const;
  void set_manualsettings(bool value);
  private:
  bool _internal_manualsettings() const;
  void _internal_set_manualsettings(bool value);
  public:

  // optional bool DisableDataID = 12 [default = false];
  bool has_disabledataid() const;
  private:
  bool _internal_has_disabledataid() const;
  public:
  void clear_disabledataid();
  bool disabledataid() const;
  void set_disabledataid(bool value);
  private:
  bool _internal_disabledataid() const;
  void _internal_set_disabledataid(bool value);
  public:

  // optional bool GenerateVHDFile = 13 [default = false];
  bool has_generatevhdfile() const;
  private:
  bool _internal_has_generatevhdfile() const;
  public:
  void clear_generatevhdfile();
  bool generatevhdfile() const;
  void set_generatevhdfile(bool value);
  private:
  bool _internal_generatevhdfile() const;
  void _internal_set_generatevhdfile(bool value);
  public:

  // optional bool Port1EnableSerial = 21 [default = false];
  bool has_port1enableserial() const;
  private:
  bool _internal_has_port1enableserial() const;
  public:
  void clear_port1enableserial();
  bool port1enableserial() const;
  void set_port1enableserial(bool value);
  private:
  bool _internal_port1enableserial() const;
  void _internal_set_port1enableserial(bool value);
  public:

  // optional int32 Port2TxStartAddress = 17 [default = 0];
  bool has_port2txstartaddress() const;
  private:
  bool _internal_has_port2txstartaddress() const;
  public:
  void clear_port2txstartaddress();
  ::PROTOBUF_NAMESPACE_ID::int32 port2txstartaddress() const;
  void set_port2txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port2txstartaddress() const;
  void _internal_set_port2txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool Port1EnableDuplex = 23 [default = false];
  bool has_port1enableduplex() const;
  private:
  bool _internal_has_port1enableduplex() const;
  public:
  void clear_port1enableduplex();
  bool port1enableduplex() const;
  void set_port1enableduplex(bool value);
  private:
  bool _internal_port1enableduplex() const;
  void _internal_set_port1enableduplex(bool value);
  public:

  // optional bool Port2EnableSerial = 24 [default = false];
  bool has_port2enableserial() const;
  private:
  bool _internal_has_port2enableserial() const;
  public:
  void clear_port2enableserial();
  bool port2enableserial() const;
  void set_port2enableserial(bool value);
  private:
  bool _internal_port2enableserial() const;
  void _internal_set_port2enableserial(bool value);
  public:

  // optional bool Port2EnableDuplex = 26 [default = false];
  bool has_port2enableduplex() const;
  private:
  bool _internal_has_port2enableduplex() const;
  public:
  void clear_port2enableduplex();
  bool port2enableduplex() const;
  void set_port2enableduplex(bool value);
  private:
  bool _internal_port2enableduplex() const;
  void _internal_set_port2enableduplex(bool value);
  public:

  // optional bool ObsoleteEnableDuplex = 10 [default = false];
  bool has_obsoleteenableduplex() const;
  private:
  bool _internal_has_obsoleteenableduplex() const;
  public:
  void clear_obsoleteenableduplex();
  bool obsoleteenableduplex() const;
  void set_obsoleteenableduplex(bool value);
  private:
  bool _internal_obsoleteenableduplex() const;
  void _internal_set_obsoleteenableduplex(bool value);
  public:

  // optional int32 Port1SerialMode = 22 [default = 0];
  bool has_port1serialmode() const;
  private:
  bool _internal_has_port1serialmode() const;
  public:
  void clear_port1serialmode();
  ::PROTOBUF_NAMESPACE_ID::int32 port1serialmode() const;
  void set_port1serialmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port1serialmode() const;
  void _internal_set_port1serialmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Port2SerialMode = 25 [default = 0];
  bool has_port2serialmode() const;
  private:
  bool _internal_has_port2serialmode() const;
  public:
  void clear_port2serialmode();
  ::PROTOBUF_NAMESPACE_ID::int32 port2serialmode() const;
  void set_port2serialmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port2serialmode() const;
  void _internal_set_port2serialmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Type = 27 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Port1TxWordsQuantity = 15 [default = 479];
  bool has_port1txwordsquantity() const;
  private:
  bool _internal_has_port1txwordsquantity() const;
  public:
  void clear_port1txwordsquantity();
  ::PROTOBUF_NAMESPACE_ID::int32 port1txwordsquantity() const;
  void set_port1txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port1txwordsquantity() const;
  void _internal_set_port1txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Port1RxWordsQuantity = 16 [default = 479];
  bool has_port1rxwordsquantity() const;
  private:
  bool _internal_has_port1rxwordsquantity() const;
  public:
  void clear_port1rxwordsquantity();
  ::PROTOBUF_NAMESPACE_ID::int32 port1rxwordsquantity() const;
  void set_port1rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port1rxwordsquantity() const;
  void _internal_set_port1rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Port2TxWordsQuantity = 18 [default = 479];
  bool has_port2txwordsquantity() const;
  private:
  bool _internal_has_port2txwordsquantity() const;
  public:
  void clear_port2txwordsquantity();
  ::PROTOBUF_NAMESPACE_ID::int32 port2txwordsquantity() const;
  void set_port2txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port2txwordsquantity() const;
  void _internal_set_port2txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Port2RxWordsQuantity = 19 [default = 479];
  bool has_port2rxwordsquantity() const;
  private:
  bool _internal_has_port2rxwordsquantity() const;
  public:
  void clear_port2rxwordsquantity();
  ::PROTOBUF_NAMESPACE_ID::int32 port2rxwordsquantity() const;
  void set_port2rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port2rxwordsquantity() const;
  void _internal_set_port2rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port1equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port2equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port1rawdatadescription_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port2rawdatadescription_;
  ::Proto::Uuid* uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 obsoleteserialmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 obsoletemode_;
  ::PROTOBUF_NAMESPACE_ID::int32 port1txstartaddress_;
  bool manualsettings_;
  bool disabledataid_;
  bool generatevhdfile_;
  bool port1enableserial_;
  ::PROTOBUF_NAMESPACE_ID::int32 port2txstartaddress_;
  bool port1enableduplex_;
  bool port2enableserial_;
  bool port2enableduplex_;
  bool obsoleteenableduplex_;
  ::PROTOBUF_NAMESPACE_ID::int32 port1serialmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 port2serialmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port1txwordsquantity_;
  ::PROTOBUF_NAMESPACE_ID::int32 port1rxwordsquantity_;
  ::PROTOBUF_NAMESPACE_ID::int32 port2txwordsquantity_;
  ::PROTOBUF_NAMESPACE_ID::int32 port2rxwordsquantity_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaDetailsSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaDetailsSet) */ {
 public:
  inline SchemaDetailsSet() : SchemaDetailsSet(nullptr) {}
  virtual ~SchemaDetailsSet();

  SchemaDetailsSet(const SchemaDetailsSet& from);
  SchemaDetailsSet(SchemaDetailsSet&& from) noexcept
    : SchemaDetailsSet() {
    *this = ::std::move(from);
  }

  inline SchemaDetailsSet& operator=(const SchemaDetailsSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaDetailsSet& operator=(SchemaDetailsSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaDetailsSet& default_instance();

  static inline const SchemaDetailsSet* internal_default_instance() {
    return reinterpret_cast<const SchemaDetailsSet*>(
               &_SchemaDetailsSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SchemaDetailsSet& a, SchemaDetailsSet& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaDetailsSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaDetailsSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaDetailsSet* New() const final {
    return CreateMaybeMessage<SchemaDetailsSet>(nullptr);
  }

  SchemaDetailsSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaDetailsSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaDetailsSet& from);
  void MergeFrom(const SchemaDetailsSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaDetailsSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaDetailsSet";
  }
  protected:
  explicit SchemaDetailsSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemasDetailsFieldNumber = 2,
  };
  // repeated .Proto.SchemaDetails schemasDetails = 2;
  int schemasdetails_size() const;
  private:
  int _internal_schemasdetails_size() const;
  public:
  void clear_schemasdetails();
  ::Proto::SchemaDetails* mutable_schemasdetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaDetails >*
      mutable_schemasdetails();
  private:
  const ::Proto::SchemaDetails& _internal_schemasdetails(int index) const;
  ::Proto::SchemaDetails* _internal_add_schemasdetails();
  public:
  const ::Proto::SchemaDetails& schemasdetails(int index) const;
  ::Proto::SchemaDetails* add_schemasdetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaDetails >&
      schemasdetails() const;

  // @@protoc_insertion_point(class_scope:Proto.SchemaDetailsSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaDetails > schemasdetails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SchemaDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SchemaDetails) */ {
 public:
  inline SchemaDetails() : SchemaDetails(nullptr) {}
  virtual ~SchemaDetails();

  SchemaDetails(const SchemaDetails& from);
  SchemaDetails(SchemaDetails&& from) noexcept
    : SchemaDetails() {
    *this = ::std::move(from);
  }

  inline SchemaDetails& operator=(const SchemaDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaDetails& operator=(SchemaDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchemaDetails& default_instance();

  static inline const SchemaDetails* internal_default_instance() {
    return reinterpret_cast<const SchemaDetails*>(
               &_SchemaDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SchemaDetails& a, SchemaDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchemaDetails* New() const final {
    return CreateMaybeMessage<SchemaDetails>(nullptr);
  }

  SchemaDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchemaDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchemaDetails& from);
  void MergeFrom(const SchemaDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SchemaDetails";
  }
  protected:
  explicit SchemaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalIdsFieldNumber = 20,
    kLabelsFieldNumber = 21,
    kConnectionsFieldNumber = 22,
    kGuidsFieldNumber = 23,
    kTagsFieldNumber = 24,
    kLoopbacksFieldNumber = 25,
    kSchemaIdFieldNumber = 4,
    kCaptionFieldNumber = 5,
    kEquipmentIdFieldNumber = 7,
    kLmDescriptionFileFieldNumber = 8,
    kPathFieldNumber = 9,
    kVersionFieldNumber = 2,
    kExcludedfromBuildFieldNumber = 6,
  };
  // repeated string signalIds = 20;
  int signalids_size() const;
  private:
  int _internal_signalids_size() const;
  public:
  void clear_signalids();
  const std::string& signalids(int index) const;
  std::string* mutable_signalids(int index);
  void set_signalids(int index, const std::string& value);
  void set_signalids(int index, std::string&& value);
  void set_signalids(int index, const char* value);
  void set_signalids(int index, const char* value, size_t size);
  std::string* add_signalids();
  void add_signalids(const std::string& value);
  void add_signalids(std::string&& value);
  void add_signalids(const char* value);
  void add_signalids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signalids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signalids();
  private:
  const std::string& _internal_signalids(int index) const;
  std::string* _internal_add_signalids();
  public:

  // repeated string labels = 21;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // repeated string connections = 22;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  const std::string& connections(int index) const;
  std::string* mutable_connections(int index);
  void set_connections(int index, const std::string& value);
  void set_connections(int index, std::string&& value);
  void set_connections(int index, const char* value);
  void set_connections(int index, const char* value, size_t size);
  std::string* add_connections();
  void add_connections(const std::string& value);
  void add_connections(std::string&& value);
  void add_connections(const char* value);
  void add_connections(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& connections() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_connections();
  private:
  const std::string& _internal_connections(int index) const;
  std::string* _internal_add_connections();
  public:

  // repeated .Proto.Uuid guids = 23;
  int guids_size() const;
  private:
  int _internal_guids_size() const;
  public:
  void clear_guids();
  ::Proto::Uuid* mutable_guids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >*
      mutable_guids();
  private:
  const ::Proto::Uuid& _internal_guids(int index) const;
  ::Proto::Uuid* _internal_add_guids();
  public:
  const ::Proto::Uuid& guids(int index) const;
  ::Proto::Uuid* add_guids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >&
      guids() const;

  // repeated string tags = 24;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string loopbacks = 25;
  int loopbacks_size() const;
  private:
  int _internal_loopbacks_size() const;
  public:
  void clear_loopbacks();
  const std::string& loopbacks(int index) const;
  std::string* mutable_loopbacks(int index);
  void set_loopbacks(int index, const std::string& value);
  void set_loopbacks(int index, std::string&& value);
  void set_loopbacks(int index, const char* value);
  void set_loopbacks(int index, const char* value, size_t size);
  std::string* add_loopbacks();
  void add_loopbacks(const std::string& value);
  void add_loopbacks(std::string&& value);
  void add_loopbacks(const char* value);
  void add_loopbacks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& loopbacks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_loopbacks();
  private:
  const std::string& _internal_loopbacks(int index) const;
  std::string* _internal_add_loopbacks();
  public:

  // optional string schemaId = 4;
  bool has_schemaid() const;
  private:
  bool _internal_has_schemaid() const;
  public:
  void clear_schemaid();
  const std::string& schemaid() const;
  void set_schemaid(const std::string& value);
  void set_schemaid(std::string&& value);
  void set_schemaid(const char* value);
  void set_schemaid(const char* value, size_t size);
  std::string* mutable_schemaid();
  std::string* release_schemaid();
  void set_allocated_schemaid(std::string* schemaid);
  private:
  const std::string& _internal_schemaid() const;
  void _internal_set_schemaid(const std::string& value);
  std::string* _internal_mutable_schemaid();
  public:

  // optional string caption = 5;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional string equipmentId = 7;
  bool has_equipmentid() const;
  private:
  bool _internal_has_equipmentid() const;
  public:
  void clear_equipmentid();
  const std::string& equipmentid() const;
  void set_equipmentid(const std::string& value);
  void set_equipmentid(std::string&& value);
  void set_equipmentid(const char* value);
  void set_equipmentid(const char* value, size_t size);
  std::string* mutable_equipmentid();
  std::string* release_equipmentid();
  void set_allocated_equipmentid(std::string* equipmentid);
  private:
  const std::string& _internal_equipmentid() const;
  void _internal_set_equipmentid(const std::string& value);
  std::string* _internal_mutable_equipmentid();
  public:

  // optional string lmDescriptionFile = 8;
  bool has_lmdescriptionfile() const;
  private:
  bool _internal_has_lmdescriptionfile() const;
  public:
  void clear_lmdescriptionfile();
  const std::string& lmdescriptionfile() const;
  void set_lmdescriptionfile(const std::string& value);
  void set_lmdescriptionfile(std::string&& value);
  void set_lmdescriptionfile(const char* value);
  void set_lmdescriptionfile(const char* value, size_t size);
  std::string* mutable_lmdescriptionfile();
  std::string* release_lmdescriptionfile();
  void set_allocated_lmdescriptionfile(std::string* lmdescriptionfile);
  private:
  const std::string& _internal_lmdescriptionfile() const;
  void _internal_set_lmdescriptionfile(const std::string& value);
  std::string* _internal_mutable_lmdescriptionfile();
  public:

  // optional string path = 9;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool excludedfromBuild = 6;
  bool has_excludedfrombuild() const;
  private:
  bool _internal_has_excludedfrombuild() const;
  public:
  void clear_excludedfrombuild();
  bool excludedfrombuild() const;
  void set_excludedfrombuild(bool value);
  private:
  bool _internal_excludedfrombuild() const;
  void _internal_set_excludedfrombuild(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SchemaDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signalids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> connections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid > guids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> loopbacks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schemaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmdescriptionfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  bool excludedfrombuild_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ArchSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ArchSignal) */ {
 public:
  inline ArchSignal() : ArchSignal(nullptr) {}
  virtual ~ArchSignal();

  ArchSignal(const ArchSignal& from);
  ArchSignal(ArchSignal&& from) noexcept
    : ArchSignal() {
    *this = ::std::move(from);
  }

  inline ArchSignal& operator=(const ArchSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchSignal& operator=(ArchSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArchSignal& default_instance();

  static inline const ArchSignal* internal_default_instance() {
    return reinterpret_cast<const ArchSignal*>(
               &_ArchSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ArchSignal& a, ArchSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArchSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArchSignal* New() const final {
    return CreateMaybeMessage<ArchSignal>(nullptr);
  }

  ArchSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArchSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArchSignal& from);
  void MergeFrom(const ArchSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ArchSignal";
  }
  protected:
  explicit ArchSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalIDFieldNumber = 3,
    kHashFieldNumber = 1,
    kIsAnalogFieldNumber = 2,
  };
  // required string appSignalID = 3;
  bool has_appsignalid() const;
  private:
  bool _internal_has_appsignalid() const;
  public:
  void clear_appsignalid();
  const std::string& appsignalid() const;
  void set_appsignalid(const std::string& value);
  void set_appsignalid(std::string&& value);
  void set_appsignalid(const char* value);
  void set_appsignalid(const char* value, size_t size);
  std::string* mutable_appsignalid();
  std::string* release_appsignalid();
  void set_allocated_appsignalid(std::string* appsignalid);
  private:
  const std::string& _internal_appsignalid() const;
  void _internal_set_appsignalid(const std::string& value);
  std::string* _internal_mutable_appsignalid();
  public:

  // required uint64 hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool isAnalog = 2;
  bool has_isanalog() const;
  private:
  bool _internal_has_isanalog() const;
  public:
  void clear_isanalog();
  bool isanalog() const;
  void set_isanalog(bool value);
  private:
  bool _internal_isanalog() const;
  void _internal_set_isanalog(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.ArchSignal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsignalid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_;
  bool isanalog_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ArchSignals PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ArchSignals) */ {
 public:
  inline ArchSignals() : ArchSignals(nullptr) {}
  virtual ~ArchSignals();

  ArchSignals(const ArchSignals& from);
  ArchSignals(ArchSignals&& from) noexcept
    : ArchSignals() {
    *this = ::std::move(from);
  }

  inline ArchSignals& operator=(const ArchSignals& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchSignals& operator=(ArchSignals&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArchSignals& default_instance();

  static inline const ArchSignals* internal_default_instance() {
    return reinterpret_cast<const ArchSignals*>(
               &_ArchSignals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ArchSignals& a, ArchSignals& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchSignals* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArchSignals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArchSignals* New() const final {
    return CreateMaybeMessage<ArchSignals>(nullptr);
  }

  ArchSignals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArchSignals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArchSignals& from);
  void MergeFrom(const ArchSignals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchSignals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ArchSignals";
  }
  protected:
  explicit ArchSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchSignalsFieldNumber = 1,
  };
  // repeated .Proto.ArchSignal archSignals = 1;
  int archsignals_size() const;
  private:
  int _internal_archsignals_size() const;
  public:
  void clear_archsignals();
  ::Proto::ArchSignal* mutable_archsignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ArchSignal >*
      mutable_archsignals();
  private:
  const ::Proto::ArchSignal& _internal_archsignals(int index) const;
  ::Proto::ArchSignal* _internal_add_archsignals();
  public:
  const ::Proto::ArchSignal& archsignals(int index) const;
  ::Proto::ArchSignal* add_archsignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ArchSignal >&
      archsignals() const;

  // @@protoc_insertion_point(class_scope:Proto.ArchSignals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ArchSignal > archsignals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class BusSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BusSignal) */ {
 public:
  inline BusSignal() : BusSignal(nullptr) {}
  virtual ~BusSignal();

  BusSignal(const BusSignal& from);
  BusSignal(BusSignal&& from) noexcept
    : BusSignal() {
    *this = ::std::move(from);
  }

  inline BusSignal& operator=(const BusSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusSignal& operator=(BusSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusSignal& default_instance();

  static inline const BusSignal* internal_default_instance() {
    return reinterpret_cast<const BusSignal*>(
               &_BusSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(BusSignal& a, BusSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(BusSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusSignal* New() const final {
    return CreateMaybeMessage<BusSignal>(nullptr);
  }

  BusSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusSignal& from);
  void MergeFrom(const BusSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BusSignal";
  }
  protected:
  explicit BusSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalIdFieldNumber = 1,
    kCaptionFieldNumber = 2,
    kUnitsFieldNumber = 4,
    kBusTypeIdFieldNumber = 15,
    kTypeFieldNumber = 3,
    kAnalogFormatFieldNumber = 10,
    kAdaptiveApertureFieldNumber = 14,
    kInbusOffsetFieldNumber = 32,
    kInbusDiscreteBitNoFieldNumber = 40,
    kInbusAnalogSizeFieldNumber = 50,
    kInbusAnalogFormatFieldNumber = 51,
    kInbusAnalogByteOrderFieldNumber = 52,
    kBusAnalogLowLimitFieldNumber = 53,
    kBusAnalogHighLimitFieldNumber = 54,
    kInbusAnalogLowLimitFieldNumber = 55,
    kInbusAnalogHighLimitFieldNumber = 56,
    kPrecisionFieldNumber = 11,
    kCoarseApertureFieldNumber = 12,
    kFineApertureFieldNumber = 13,
  };
  // optional string signalId = 1;
  bool has_signalid() const;
  private:
  bool _internal_has_signalid() const;
  public:
  void clear_signalid();
  const std::string& signalid() const;
  void set_signalid(const std::string& value);
  void set_signalid(std::string&& value);
  void set_signalid(const char* value);
  void set_signalid(const char* value, size_t size);
  std::string* mutable_signalid();
  std::string* release_signalid();
  void set_allocated_signalid(std::string* signalid);
  private:
  const std::string& _internal_signalid() const;
  void _internal_set_signalid(const std::string& value);
  std::string* _internal_mutable_signalid();
  public:

  // optional string caption = 2;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional string units = 4;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // optional string busTypeId = 15;
  bool has_bustypeid() const;
  private:
  bool _internal_has_bustypeid() const;
  public:
  void clear_bustypeid();
  const std::string& bustypeid() const;
  void set_bustypeid(const std::string& value);
  void set_bustypeid(std::string&& value);
  void set_bustypeid(const char* value);
  void set_bustypeid(const char* value, size_t size);
  std::string* mutable_bustypeid();
  std::string* release_bustypeid();
  void set_allocated_bustypeid(std::string* bustypeid);
  private:
  const std::string& _internal_bustypeid() const;
  void _internal_set_bustypeid(const std::string& value);
  std::string* _internal_mutable_bustypeid();
  public:

  // optional int32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 analogFormat = 10;
  bool has_analogformat() const;
  private:
  bool _internal_has_analogformat() const;
  public:
  void clear_analogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat() const;
  void set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogformat() const;
  void _internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool adaptiveAperture = 14 [default = false];
  bool has_adaptiveaperture() const;
  private:
  bool _internal_has_adaptiveaperture() const;
  public:
  void clear_adaptiveaperture();
  bool adaptiveaperture() const;
  void set_adaptiveaperture(bool value);
  private:
  bool _internal_adaptiveaperture() const;
  void _internal_set_adaptiveaperture(bool value);
  public:

  // optional int32 inbusOffset = 32;
  bool has_inbusoffset() const;
  private:
  bool _internal_has_inbusoffset() const;
  public:
  void clear_inbusoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 inbusoffset() const;
  void set_inbusoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inbusoffset() const;
  void _internal_set_inbusoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 inbusDiscreteBitNo = 40;
  bool has_inbusdiscretebitno() const;
  private:
  bool _internal_has_inbusdiscretebitno() const;
  public:
  void clear_inbusdiscretebitno();
  ::PROTOBUF_NAMESPACE_ID::int32 inbusdiscretebitno() const;
  void set_inbusdiscretebitno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inbusdiscretebitno() const;
  void _internal_set_inbusdiscretebitno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 inbusAnalogSize = 50;
  bool has_inbusanalogsize() const;
  private:
  bool _internal_has_inbusanalogsize() const;
  public:
  void clear_inbusanalogsize();
  ::PROTOBUF_NAMESPACE_ID::int32 inbusanalogsize() const;
  void set_inbusanalogsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inbusanalogsize() const;
  void _internal_set_inbusanalogsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 inbusAnalogFormat = 51;
  bool has_inbusanalogformat() const;
  private:
  bool _internal_has_inbusanalogformat() const;
  public:
  void clear_inbusanalogformat();
  ::PROTOBUF_NAMESPACE_ID::int32 inbusanalogformat() const;
  void set_inbusanalogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inbusanalogformat() const;
  void _internal_set_inbusanalogformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 inbusAnalogByteOrder = 52;
  bool has_inbusanalogbyteorder() const;
  private:
  bool _internal_has_inbusanalogbyteorder() const;
  public:
  void clear_inbusanalogbyteorder();
  ::PROTOBUF_NAMESPACE_ID::int32 inbusanalogbyteorder() const;
  void set_inbusanalogbyteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inbusanalogbyteorder() const;
  void _internal_set_inbusanalogbyteorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double busAnalogLowLimit = 53;
  bool has_busanaloglowlimit() const;
  private:
  bool _internal_has_busanaloglowlimit() const;
  public:
  void clear_busanaloglowlimit();
  double busanaloglowlimit() const;
  void set_busanaloglowlimit(double value);
  private:
  double _internal_busanaloglowlimit() const;
  void _internal_set_busanaloglowlimit(double value);
  public:

  // optional double busAnalogHighLimit = 54;
  bool has_busanaloghighlimit() const;
  private:
  bool _internal_has_busanaloghighlimit() const;
  public:
  void clear_busanaloghighlimit();
  double busanaloghighlimit() const;
  void set_busanaloghighlimit(double value);
  private:
  double _internal_busanaloghighlimit() const;
  void _internal_set_busanaloghighlimit(double value);
  public:

  // optional double inbusAnalogLowLimit = 55;
  bool has_inbusanaloglowlimit() const;
  private:
  bool _internal_has_inbusanaloglowlimit() const;
  public:
  void clear_inbusanaloglowlimit();
  double inbusanaloglowlimit() const;
  void set_inbusanaloglowlimit(double value);
  private:
  double _internal_inbusanaloglowlimit() const;
  void _internal_set_inbusanaloglowlimit(double value);
  public:

  // optional double inbusAnalogHighLimit = 56;
  bool has_inbusanaloghighlimit() const;
  private:
  bool _internal_has_inbusanaloghighlimit() const;
  public:
  void clear_inbusanaloghighlimit();
  double inbusanaloghighlimit() const;
  void set_inbusanaloghighlimit(double value);
  private:
  double _internal_inbusanaloghighlimit() const;
  void _internal_set_inbusanaloghighlimit(double value);
  public:

  // optional int32 precision = 11 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double coarseAperture = 12 [default = 1];
  bool has_coarseaperture() const;
  private:
  bool _internal_has_coarseaperture() const;
  public:
  void clear_coarseaperture();
  double coarseaperture() const;
  void set_coarseaperture(double value);
  private:
  double _internal_coarseaperture() const;
  void _internal_set_coarseaperture(double value);
  public:

  // optional double fineAperture = 13 [default = 0.5];
  bool has_fineaperture() const;
  private:
  bool _internal_has_fineaperture() const;
  public:
  void clear_fineaperture();
  double fineaperture() const;
  void set_fineaperture(double value);
  private:
  double _internal_fineaperture() const;
  void _internal_set_fineaperture(double value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.BusSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bustypeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogformat_;
  bool adaptiveaperture_;
  ::PROTOBUF_NAMESPACE_ID::int32 inbusoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 inbusdiscretebitno_;
  ::PROTOBUF_NAMESPACE_ID::int32 inbusanalogsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 inbusanalogformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 inbusanalogbyteorder_;
  double busanaloglowlimit_;
  double busanaloghighlimit_;
  double inbusanaloglowlimit_;
  double inbusanaloghighlimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  double coarseaperture_;
  double fineaperture_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Bus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  virtual ~Bus();

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bus& default_instance();

  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bus* New() const final {
    return CreateMaybeMessage<Bus>(nullptr);
  }

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bus& from);
  void MergeFrom(const Bus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusSignalsFieldNumber = 3,
    kBusTypeIdFieldNumber = 2,
    kUuidFieldNumber = 1,
    kManualBusSizeFieldNumber = 11,
    kEnableManualBusSizeFieldNumber = 12,
    kAutoSignalPlacementFieldNumber = 10,
    kEnableManualBusSizeIsNotInitializedFieldNumber = 13,
  };
  // repeated .Proto.BusSignal busSignals = 3;
  int bussignals_size() const;
  private:
  int _internal_bussignals_size() const;
  public:
  void clear_bussignals();
  ::Proto::BusSignal* mutable_bussignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BusSignal >*
      mutable_bussignals();
  private:
  const ::Proto::BusSignal& _internal_bussignals(int index) const;
  ::Proto::BusSignal* _internal_add_bussignals();
  public:
  const ::Proto::BusSignal& bussignals(int index) const;
  ::Proto::BusSignal* add_bussignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BusSignal >&
      bussignals() const;

  // optional string busTypeId = 2;
  bool has_bustypeid() const;
  private:
  bool _internal_has_bustypeid() const;
  public:
  void clear_bustypeid();
  const std::string& bustypeid() const;
  void set_bustypeid(const std::string& value);
  void set_bustypeid(std::string&& value);
  void set_bustypeid(const char* value);
  void set_bustypeid(const char* value, size_t size);
  std::string* mutable_bustypeid();
  std::string* release_bustypeid();
  void set_allocated_bustypeid(std::string* bustypeid);
  private:
  const std::string& _internal_bustypeid() const;
  void _internal_set_bustypeid(const std::string& value);
  std::string* _internal_mutable_bustypeid();
  public:

  // optional .Proto.Uuid uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::Proto::Uuid& uuid() const;
  ::Proto::Uuid* release_uuid();
  ::Proto::Uuid* mutable_uuid();
  void set_allocated_uuid(::Proto::Uuid* uuid);
  private:
  const ::Proto::Uuid& _internal_uuid() const;
  ::Proto::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::Proto::Uuid* uuid);
  ::Proto::Uuid* unsafe_arena_release_uuid();

  // optional int32 manualBusSize = 11 [default = 0];
  bool has_manualbussize() const;
  private:
  bool _internal_has_manualbussize() const;
  public:
  void clear_manualbussize();
  ::PROTOBUF_NAMESPACE_ID::int32 manualbussize() const;
  void set_manualbussize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manualbussize() const;
  void _internal_set_manualbussize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool enableManualBusSize = 12 [default = false];
  bool has_enablemanualbussize() const;
  private:
  bool _internal_has_enablemanualbussize() const;
  public:
  void clear_enablemanualbussize();
  bool enablemanualbussize() const;
  void set_enablemanualbussize(bool value);
  private:
  bool _internal_enablemanualbussize() const;
  void _internal_set_enablemanualbussize(bool value);
  public:

  // optional bool autoSignalPlacement = 10 [default = true];
  bool has_autosignalplacement() const;
  private:
  bool _internal_has_autosignalplacement() const;
  public:
  void clear_autosignalplacement();
  bool autosignalplacement() const;
  void set_autosignalplacement(bool value);
  private:
  bool _internal_autosignalplacement() const;
  void _internal_set_autosignalplacement(bool value);
  public:

  // optional bool enableManualBusSizeIsNotInitialized = 13 [default = true];
  bool has_enablemanualbussizeisnotinitialized() const;
  private:
  bool _internal_has_enablemanualbussizeisnotinitialized() const;
  public:
  void clear_enablemanualbussizeisnotinitialized();
  bool enablemanualbussizeisnotinitialized() const;
  void set_enablemanualbussizeisnotinitialized(bool value);
  private:
  bool _internal_enablemanualbussizeisnotinitialized() const;
  void _internal_set_enablemanualbussizeisnotinitialized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BusSignal > bussignals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bustypeid_;
  ::Proto::Uuid* uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 manualbussize_;
  bool enablemanualbussize_;
  bool autosignalplacement_;
  bool enablemanualbussizeisnotinitialized_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ComparatorSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ComparatorSignal) */ {
 public:
  inline ComparatorSignal() : ComparatorSignal(nullptr) {}
  virtual ~ComparatorSignal();

  ComparatorSignal(const ComparatorSignal& from);
  ComparatorSignal(ComparatorSignal&& from) noexcept
    : ComparatorSignal() {
    *this = ::std::move(from);
  }

  inline ComparatorSignal& operator=(const ComparatorSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComparatorSignal& operator=(ComparatorSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComparatorSignal& default_instance();

  static inline const ComparatorSignal* internal_default_instance() {
    return reinterpret_cast<const ComparatorSignal*>(
               &_ComparatorSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ComparatorSignal& a, ComparatorSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(ComparatorSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComparatorSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComparatorSignal* New() const final {
    return CreateMaybeMessage<ComparatorSignal>(nullptr);
  }

  ComparatorSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComparatorSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComparatorSignal& from);
  void MergeFrom(const ComparatorSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComparatorSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ComparatorSignal";
  }
  protected:
  explicit ComparatorSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalIdFieldNumber = 3,
    kConstValueFieldNumber = 2,
    kIsAcquiredFieldNumber = 4,
    kIsConstFieldNumber = 1,
  };
  // optional string appSignalId = 3;
  bool has_appsignalid() const;
  private:
  bool _internal_has_appsignalid() const;
  public:
  void clear_appsignalid();
  const std::string& appsignalid() const;
  void set_appsignalid(const std::string& value);
  void set_appsignalid(std::string&& value);
  void set_appsignalid(const char* value);
  void set_appsignalid(const char* value, size_t size);
  std::string* mutable_appsignalid();
  std::string* release_appsignalid();
  void set_allocated_appsignalid(std::string* appsignalid);
  private:
  const std::string& _internal_appsignalid() const;
  void _internal_set_appsignalid(const std::string& value);
  std::string* _internal_mutable_appsignalid();
  public:

  // optional double constValue = 2 [default = 0];
  bool has_constvalue() const;
  private:
  bool _internal_has_constvalue() const;
  public:
  void clear_constvalue();
  double constvalue() const;
  void set_constvalue(double value);
  private:
  double _internal_constvalue() const;
  void _internal_set_constvalue(double value);
  public:

  // optional bool isAcquired = 4 [default = false];
  bool has_isacquired() const;
  private:
  bool _internal_has_isacquired() const;
  public:
  void clear_isacquired();
  bool isacquired() const;
  void set_isacquired(bool value);
  private:
  bool _internal_isacquired() const;
  void _internal_set_isacquired(bool value);
  public:

  // optional bool isConst = 1 [default = true];
  bool has_isconst() const;
  private:
  bool _internal_has_isconst() const;
  public:
  void clear_isconst();
  bool isconst() const;
  void set_isconst(bool value);
  private:
  bool _internal_isconst() const;
  void _internal_set_isconst(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.ComparatorSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsignalid_;
  double constvalue_;
  bool isacquired_;
  bool isconst_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class Comparator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Comparator) */ {
 public:
  inline Comparator() : Comparator(nullptr) {}
  virtual ~Comparator();

  Comparator(const Comparator& from);
  Comparator(Comparator&& from) noexcept
    : Comparator() {
    *this = ::std::move(from);
  }

  inline Comparator& operator=(const Comparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Comparator& operator=(Comparator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Comparator& default_instance();

  static inline const Comparator* internal_default_instance() {
    return reinterpret_cast<const Comparator*>(
               &_Comparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Comparator& a, Comparator& b) {
    a.Swap(&b);
  }
  inline void Swap(Comparator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Comparator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Comparator* New() const final {
    return CreateMaybeMessage<Comparator>(nullptr);
  }

  Comparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Comparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Comparator& from);
  void MergeFrom(const Comparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Comparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Comparator";
  }
  protected:
  explicit Comparator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 9,
    kSchemaIdFieldNumber = 10,
    kInputFieldNumber = 3,
    kCompareFieldNumber = 4,
    kHysteresisFieldNumber = 5,
    kOutputFieldNumber = 6,
    kSchemaItemUuidFieldNumber = 11,
    kAllSignalsIsAcquiredFieldNumber = 7,
    kPrecisionFieldNumber = 8,
    kCmpTypeFieldNumber = 1,
    kInAnalogSignalFormatFieldNumber = 2,
  };
  // optional string label = 9;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string schemaId = 10;
  bool has_schemaid() const;
  private:
  bool _internal_has_schemaid() const;
  public:
  void clear_schemaid();
  const std::string& schemaid() const;
  void set_schemaid(const std::string& value);
  void set_schemaid(std::string&& value);
  void set_schemaid(const char* value);
  void set_schemaid(const char* value, size_t size);
  std::string* mutable_schemaid();
  std::string* release_schemaid();
  void set_allocated_schemaid(std::string* schemaid);
  private:
  const std::string& _internal_schemaid() const;
  void _internal_set_schemaid(const std::string& value);
  std::string* _internal_mutable_schemaid();
  public:

  // optional .Proto.ComparatorSignal input = 3;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::Proto::ComparatorSignal& input() const;
  ::Proto::ComparatorSignal* release_input();
  ::Proto::ComparatorSignal* mutable_input();
  void set_allocated_input(::Proto::ComparatorSignal* input);
  private:
  const ::Proto::ComparatorSignal& _internal_input() const;
  ::Proto::ComparatorSignal* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::Proto::ComparatorSignal* input);
  ::Proto::ComparatorSignal* unsafe_arena_release_input();

  // optional .Proto.ComparatorSignal compare = 4;
  bool has_compare() const;
  private:
  bool _internal_has_compare() const;
  public:
  void clear_compare();
  const ::Proto::ComparatorSignal& compare() const;
  ::Proto::ComparatorSignal* release_compare();
  ::Proto::ComparatorSignal* mutable_compare();
  void set_allocated_compare(::Proto::ComparatorSignal* compare);
  private:
  const ::Proto::ComparatorSignal& _internal_compare() const;
  ::Proto::ComparatorSignal* _internal_mutable_compare();
  public:
  void unsafe_arena_set_allocated_compare(
      ::Proto::ComparatorSignal* compare);
  ::Proto::ComparatorSignal* unsafe_arena_release_compare();

  // optional .Proto.ComparatorSignal hysteresis = 5;
  bool has_hysteresis() const;
  private:
  bool _internal_has_hysteresis() const;
  public:
  void clear_hysteresis();
  const ::Proto::ComparatorSignal& hysteresis() const;
  ::Proto::ComparatorSignal* release_hysteresis();
  ::Proto::ComparatorSignal* mutable_hysteresis();
  void set_allocated_hysteresis(::Proto::ComparatorSignal* hysteresis);
  private:
  const ::Proto::ComparatorSignal& _internal_hysteresis() const;
  ::Proto::ComparatorSignal* _internal_mutable_hysteresis();
  public:
  void unsafe_arena_set_allocated_hysteresis(
      ::Proto::ComparatorSignal* hysteresis);
  ::Proto::ComparatorSignal* unsafe_arena_release_hysteresis();

  // optional .Proto.ComparatorSignal output = 6;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::Proto::ComparatorSignal& output() const;
  ::Proto::ComparatorSignal* release_output();
  ::Proto::ComparatorSignal* mutable_output();
  void set_allocated_output(::Proto::ComparatorSignal* output);
  private:
  const ::Proto::ComparatorSignal& _internal_output() const;
  ::Proto::ComparatorSignal* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::Proto::ComparatorSignal* output);
  ::Proto::ComparatorSignal* unsafe_arena_release_output();

  // optional .Proto.Uuid schemaItemUuid = 11;
  bool has_schemaitemuuid() const;
  private:
  bool _internal_has_schemaitemuuid() const;
  public:
  void clear_schemaitemuuid();
  const ::Proto::Uuid& schemaitemuuid() const;
  ::Proto::Uuid* release_schemaitemuuid();
  ::Proto::Uuid* mutable_schemaitemuuid();
  void set_allocated_schemaitemuuid(::Proto::Uuid* schemaitemuuid);
  private:
  const ::Proto::Uuid& _internal_schemaitemuuid() const;
  ::Proto::Uuid* _internal_mutable_schemaitemuuid();
  public:
  void unsafe_arena_set_allocated_schemaitemuuid(
      ::Proto::Uuid* schemaitemuuid);
  ::Proto::Uuid* unsafe_arena_release_schemaitemuuid();

  // optional bool allSignalsIsAcquired = 7 [default = false];
  bool has_allsignalsisacquired() const;
  private:
  bool _internal_has_allsignalsisacquired() const;
  public:
  void clear_allsignalsisacquired();
  bool allsignalsisacquired() const;
  void set_allsignalsisacquired(bool value);
  private:
  bool _internal_allsignalsisacquired() const;
  void _internal_set_allsignalsisacquired(bool value);
  public:

  // optional int32 precision = 8 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cmpType = 1 [default = 1];
  bool has_cmptype() const;
  private:
  bool _internal_has_cmptype() const;
  public:
  void clear_cmptype();
  ::PROTOBUF_NAMESPACE_ID::int32 cmptype() const;
  void set_cmptype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmptype() const;
  void _internal_set_cmptype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 inAnalogSignalFormat = 2 [default = 1];
  bool has_inanalogsignalformat() const;
  private:
  bool _internal_has_inanalogsignalformat() const;
  public:
  void clear_inanalogsignalformat();
  ::PROTOBUF_NAMESPACE_ID::int32 inanalogsignalformat() const;
  void set_inanalogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inanalogsignalformat() const;
  void _internal_set_inanalogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Comparator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schemaid_;
  ::Proto::ComparatorSignal* input_;
  ::Proto::ComparatorSignal* compare_;
  ::Proto::ComparatorSignal* hysteresis_;
  ::Proto::ComparatorSignal* output_;
  ::Proto::Uuid* schemaitemuuid_;
  bool allsignalsisacquired_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 inanalogsignalformat_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class LmComparatorSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LmComparatorSet) */ {
 public:
  inline LmComparatorSet() : LmComparatorSet(nullptr) {}
  virtual ~LmComparatorSet();

  LmComparatorSet(const LmComparatorSet& from);
  LmComparatorSet(LmComparatorSet&& from) noexcept
    : LmComparatorSet() {
    *this = ::std::move(from);
  }

  inline LmComparatorSet& operator=(const LmComparatorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LmComparatorSet& operator=(LmComparatorSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LmComparatorSet& default_instance();

  static inline const LmComparatorSet* internal_default_instance() {
    return reinterpret_cast<const LmComparatorSet*>(
               &_LmComparatorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(LmComparatorSet& a, LmComparatorSet& b) {
    a.Swap(&b);
  }
  inline void Swap(LmComparatorSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LmComparatorSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LmComparatorSet* New() const final {
    return CreateMaybeMessage<LmComparatorSet>(nullptr);
  }

  LmComparatorSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LmComparatorSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LmComparatorSet& from);
  void MergeFrom(const LmComparatorSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LmComparatorSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LmComparatorSet";
  }
  protected:
  explicit LmComparatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComparatorFieldNumber = 2,
    kLmEquipmentIDFieldNumber = 1,
  };
  // repeated .Proto.Comparator comparator = 2;
  int comparator_size() const;
  private:
  int _internal_comparator_size() const;
  public:
  void clear_comparator();
  ::Proto::Comparator* mutable_comparator(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Comparator >*
      mutable_comparator();
  private:
  const ::Proto::Comparator& _internal_comparator(int index) const;
  ::Proto::Comparator* _internal_add_comparator();
  public:
  const ::Proto::Comparator& comparator(int index) const;
  ::Proto::Comparator* add_comparator();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Comparator >&
      comparator() const;

  // optional string lmEquipmentID = 1;
  bool has_lmequipmentid() const;
  private:
  bool _internal_has_lmequipmentid() const;
  public:
  void clear_lmequipmentid();
  const std::string& lmequipmentid() const;
  void set_lmequipmentid(const std::string& value);
  void set_lmequipmentid(std::string&& value);
  void set_lmequipmentid(const char* value);
  void set_lmequipmentid(const char* value, size_t size);
  std::string* mutable_lmequipmentid();
  std::string* release_lmequipmentid();
  void set_allocated_lmequipmentid(std::string* lmequipmentid);
  private:
  const std::string& _internal_lmequipmentid() const;
  void _internal_set_lmequipmentid(const std::string& value);
  std::string* _internal_mutable_lmequipmentid();
  public:

  // @@protoc_insertion_point(class_scope:Proto.LmComparatorSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Comparator > comparator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmequipmentid_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class ComparatorSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ComparatorSet) */ {
 public:
  inline ComparatorSet() : ComparatorSet(nullptr) {}
  virtual ~ComparatorSet();

  ComparatorSet(const ComparatorSet& from);
  ComparatorSet(ComparatorSet&& from) noexcept
    : ComparatorSet() {
    *this = ::std::move(from);
  }

  inline ComparatorSet& operator=(const ComparatorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComparatorSet& operator=(ComparatorSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComparatorSet& default_instance();

  static inline const ComparatorSet* internal_default_instance() {
    return reinterpret_cast<const ComparatorSet*>(
               &_ComparatorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ComparatorSet& a, ComparatorSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ComparatorSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComparatorSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComparatorSet* New() const final {
    return CreateMaybeMessage<ComparatorSet>(nullptr);
  }

  ComparatorSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComparatorSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComparatorSet& from);
  void MergeFrom(const ComparatorSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComparatorSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ComparatorSet";
  }
  protected:
  explicit ComparatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLmComparatorSetFieldNumber = 1,
  };
  // repeated .Proto.LmComparatorSet lmComparatorSet = 1;
  int lmcomparatorset_size() const;
  private:
  int _internal_lmcomparatorset_size() const;
  public:
  void clear_lmcomparatorset();
  ::Proto::LmComparatorSet* mutable_lmcomparatorset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::LmComparatorSet >*
      mutable_lmcomparatorset();
  private:
  const ::Proto::LmComparatorSet& _internal_lmcomparatorset(int index) const;
  ::Proto::LmComparatorSet* _internal_add_lmcomparatorset();
  public:
  const ::Proto::LmComparatorSet& lmcomparatorset(int index) const;
  ::Proto::LmComparatorSet* add_lmcomparatorset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::LmComparatorSet >&
      lmcomparatorset() const;

  // @@protoc_insertion_point(class_scope:Proto.ComparatorSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::LmComparatorSet > lmcomparatorset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class MetrologySignalLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MetrologySignalLocation) */ {
 public:
  inline MetrologySignalLocation() : MetrologySignalLocation(nullptr) {}
  virtual ~MetrologySignalLocation();

  MetrologySignalLocation(const MetrologySignalLocation& from);
  MetrologySignalLocation(MetrologySignalLocation&& from) noexcept
    : MetrologySignalLocation() {
    *this = ::std::move(from);
  }

  inline MetrologySignalLocation& operator=(const MetrologySignalLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetrologySignalLocation& operator=(MetrologySignalLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetrologySignalLocation& default_instance();

  static inline const MetrologySignalLocation* internal_default_instance() {
    return reinterpret_cast<const MetrologySignalLocation*>(
               &_MetrologySignalLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(MetrologySignalLocation& a, MetrologySignalLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(MetrologySignalLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetrologySignalLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetrologySignalLocation* New() const final {
    return CreateMaybeMessage<MetrologySignalLocation>(nullptr);
  }

  MetrologySignalLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetrologySignalLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetrologySignalLocation& from);
  void MergeFrom(const MetrologySignalLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetrologySignalLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MetrologySignalLocation";
  }
  protected:
  explicit MetrologySignalLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRackIDFieldNumber = 1,
    kChassisIDFieldNumber = 2,
    kModuleIDFieldNumber = 4,
    kContactFieldNumber = 7,
    kShownOnSchemasFieldNumber = 8,
    kPlaceFieldNumber = 6,
    kChassisFieldNumber = 3,
    kModuleFieldNumber = 5,
  };
  // optional string rackID = 1;
  bool has_rackid() const;
  private:
  bool _internal_has_rackid() const;
  public:
  void clear_rackid();
  const std::string& rackid() const;
  void set_rackid(const std::string& value);
  void set_rackid(std::string&& value);
  void set_rackid(const char* value);
  void set_rackid(const char* value, size_t size);
  std::string* mutable_rackid();
  std::string* release_rackid();
  void set_allocated_rackid(std::string* rackid);
  private:
  const std::string& _internal_rackid() const;
  void _internal_set_rackid(const std::string& value);
  std::string* _internal_mutable_rackid();
  public:

  // optional string chassisID = 2;
  bool has_chassisid() const;
  private:
  bool _internal_has_chassisid() const;
  public:
  void clear_chassisid();
  const std::string& chassisid() const;
  void set_chassisid(const std::string& value);
  void set_chassisid(std::string&& value);
  void set_chassisid(const char* value);
  void set_chassisid(const char* value, size_t size);
  std::string* mutable_chassisid();
  std::string* release_chassisid();
  void set_allocated_chassisid(std::string* chassisid);
  private:
  const std::string& _internal_chassisid() const;
  void _internal_set_chassisid(const std::string& value);
  std::string* _internal_mutable_chassisid();
  public:

  // optional string moduleID = 4;
  bool has_moduleid() const;
  private:
  bool _internal_has_moduleid() const;
  public:
  void clear_moduleid();
  const std::string& moduleid() const;
  void set_moduleid(const std::string& value);
  void set_moduleid(std::string&& value);
  void set_moduleid(const char* value);
  void set_moduleid(const char* value, size_t size);
  std::string* mutable_moduleid();
  std::string* release_moduleid();
  void set_allocated_moduleid(std::string* moduleid);
  private:
  const std::string& _internal_moduleid() const;
  void _internal_set_moduleid(const std::string& value);
  std::string* _internal_mutable_moduleid();
  public:

  // optional string contact = 7;
  bool has_contact() const;
  private:
  bool _internal_has_contact() const;
  public:
  void clear_contact();
  const std::string& contact() const;
  void set_contact(const std::string& value);
  void set_contact(std::string&& value);
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  std::string* mutable_contact();
  std::string* release_contact();
  void set_allocated_contact(std::string* contact);
  private:
  const std::string& _internal_contact() const;
  void _internal_set_contact(const std::string& value);
  std::string* _internal_mutable_contact();
  public:

  // optional bool shownOnSchemas = 8 [default = false];
  bool has_shownonschemas() const;
  private:
  bool _internal_has_shownonschemas() const;
  public:
  void clear_shownonschemas();
  bool shownonschemas() const;
  void set_shownonschemas(bool value);
  private:
  bool _internal_shownonschemas() const;
  void _internal_set_shownonschemas(bool value);
  public:

  // optional int32 place = 6 [default = -1];
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  ::PROTOBUF_NAMESPACE_ID::int32 place() const;
  void set_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_place() const;
  void _internal_set_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 chassis = 3 [default = -1];
  bool has_chassis() const;
  private:
  bool _internal_has_chassis() const;
  public:
  void clear_chassis();
  ::PROTOBUF_NAMESPACE_ID::int32 chassis() const;
  void set_chassis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chassis() const;
  void _internal_set_chassis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 module = 5 [default = -1];
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::int32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.MetrologySignalLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rackid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chassisid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moduleid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_;
  bool shownonschemas_;
  ::PROTOBUF_NAMESPACE_ID::int32 place_;
  ::PROTOBUF_NAMESPACE_ID::int32 chassis_;
  ::PROTOBUF_NAMESPACE_ID::int32 module_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class MetrologySignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MetrologySignal) */ {
 public:
  inline MetrologySignal() : MetrologySignal(nullptr) {}
  virtual ~MetrologySignal();

  MetrologySignal(const MetrologySignal& from);
  MetrologySignal(MetrologySignal&& from) noexcept
    : MetrologySignal() {
    *this = ::std::move(from);
  }

  inline MetrologySignal& operator=(const MetrologySignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetrologySignal& operator=(MetrologySignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetrologySignal& default_instance();

  static inline const MetrologySignal* internal_default_instance() {
    return reinterpret_cast<const MetrologySignal*>(
               &_MetrologySignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(MetrologySignal& a, MetrologySignal& b) {
    a.Swap(&b);
  }
  inline void Swap(MetrologySignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetrologySignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetrologySignal* New() const final {
    return CreateMaybeMessage<MetrologySignal>(nullptr);
  }

  MetrologySignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetrologySignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetrologySignal& from);
  void MergeFrom(const MetrologySignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetrologySignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MetrologySignal";
  }
  protected:
  explicit MetrologySignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalFieldNumber = 1,
    kLocationFieldNumber = 2,
    kElectricLowLimitFieldNumber = 3,
    kElectricHighLimitFieldNumber = 4,
    kElectricR0FieldNumber = 7,
    kPhysicalLowLimitFieldNumber = 9,
    kPhysicalHighLimitFieldNumber = 10,
    kElectricRloadFieldNumber = 11,
    kElectricPrecisionFieldNumber = 8,
    kElectricUnitIDFieldNumber = 5,
    kElectricSensorTypeFieldNumber = 6,
  };
  // optional .Proto.AppSignal appSignal = 1;
  bool has_appsignal() const;
  private:
  bool _internal_has_appsignal() const;
  public:
  void clear_appsignal();
  const ::Proto::AppSignal& appsignal() const;
  ::Proto::AppSignal* release_appsignal();
  ::Proto::AppSignal* mutable_appsignal();
  void set_allocated_appsignal(::Proto::AppSignal* appsignal);
  private:
  const ::Proto::AppSignal& _internal_appsignal() const;
  ::Proto::AppSignal* _internal_mutable_appsignal();
  public:
  void unsafe_arena_set_allocated_appsignal(
      ::Proto::AppSignal* appsignal);
  ::Proto::AppSignal* unsafe_arena_release_appsignal();

  // optional .Proto.MetrologySignalLocation location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Proto::MetrologySignalLocation& location() const;
  ::Proto::MetrologySignalLocation* release_location();
  ::Proto::MetrologySignalLocation* mutable_location();
  void set_allocated_location(::Proto::MetrologySignalLocation* location);
  private:
  const ::Proto::MetrologySignalLocation& _internal_location() const;
  ::Proto::MetrologySignalLocation* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Proto::MetrologySignalLocation* location);
  ::Proto::MetrologySignalLocation* unsafe_arena_release_location();

  // optional double electricLowLimit = 3 [default = 0];
  bool has_electriclowlimit() const;
  private:
  bool _internal_has_electriclowlimit() const;
  public:
  void clear_electriclowlimit();
  double electriclowlimit() const;
  void set_electriclowlimit(double value);
  private:
  double _internal_electriclowlimit() const;
  void _internal_set_electriclowlimit(double value);
  public:

  // optional double electricHighLimit = 4 [default = 0];
  bool has_electrichighlimit() const;
  private:
  bool _internal_has_electrichighlimit() const;
  public:
  void clear_electrichighlimit();
  double electrichighlimit() const;
  void set_electrichighlimit(double value);
  private:
  double _internal_electrichighlimit() const;
  void _internal_set_electrichighlimit(double value);
  public:

  // optional double electricR0 = 7 [default = 0];
  bool has_electricr0() const;
  private:
  bool _internal_has_electricr0() const;
  public:
  void clear_electricr0();
  double electricr0() const;
  void set_electricr0(double value);
  private:
  double _internal_electricr0() const;
  void _internal_set_electricr0(double value);
  public:

  // optional double physicalLowLimit = 9 [default = 0];
  bool has_physicallowlimit() const;
  private:
  bool _internal_has_physicallowlimit() const;
  public:
  void clear_physicallowlimit();
  double physicallowlimit() const;
  void set_physicallowlimit(double value);
  private:
  double _internal_physicallowlimit() const;
  void _internal_set_physicallowlimit(double value);
  public:

  // optional double physicalHighLimit = 10 [default = 0];
  bool has_physicalhighlimit() const;
  private:
  bool _internal_has_physicalhighlimit() const;
  public:
  void clear_physicalhighlimit();
  double physicalhighlimit() const;
  void set_physicalhighlimit(double value);
  private:
  double _internal_physicalhighlimit() const;
  void _internal_set_physicalhighlimit(double value);
  public:

  // optional double electricRload = 11 [default = 0];
  bool has_electricrload() const;
  private:
  bool _internal_has_electricrload() const;
  public:
  void clear_electricrload();
  double electricrload() const;
  void set_electricrload(double value);
  private:
  double _internal_electricrload() const;
  void _internal_set_electricrload(double value);
  public:

  // optional int32 electricPrecision = 8 [default = 4];
  bool has_electricprecision() const;
  private:
  bool _internal_has_electricprecision() const;
  public:
  void clear_electricprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 electricprecision() const;
  void set_electricprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricprecision() const;
  void _internal_set_electricprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 electricUnitID = 5 [default = 1];
  bool has_electricunitid() const;
  private:
  bool _internal_has_electricunitid() const;
  public:
  void clear_electricunitid();
  ::PROTOBUF_NAMESPACE_ID::int32 electricunitid() const;
  void set_electricunitid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricunitid() const;
  void _internal_set_electricunitid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 electricSensorType = 6 [default = 1];
  bool has_electricsensortype() const;
  private:
  bool _internal_has_electricsensortype() const;
  public:
  void clear_electricsensortype();
  ::PROTOBUF_NAMESPACE_ID::int32 electricsensortype() const;
  void set_electricsensortype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricsensortype() const;
  void _internal_set_electricsensortype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.MetrologySignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::AppSignal* appsignal_;
  ::Proto::MetrologySignalLocation* location_;
  double electriclowlimit_;
  double electrichighlimit_;
  double electricr0_;
  double physicallowlimit_;
  double physicalhighlimit_;
  double electricrload_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricprecision_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricunitid_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricsensortype_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class MetrologySignalSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MetrologySignalSet) */ {
 public:
  inline MetrologySignalSet() : MetrologySignalSet(nullptr) {}
  virtual ~MetrologySignalSet();

  MetrologySignalSet(const MetrologySignalSet& from);
  MetrologySignalSet(MetrologySignalSet&& from) noexcept
    : MetrologySignalSet() {
    *this = ::std::move(from);
  }

  inline MetrologySignalSet& operator=(const MetrologySignalSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetrologySignalSet& operator=(MetrologySignalSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetrologySignalSet& default_instance();

  static inline const MetrologySignalSet* internal_default_instance() {
    return reinterpret_cast<const MetrologySignalSet*>(
               &_MetrologySignalSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(MetrologySignalSet& a, MetrologySignalSet& b) {
    a.Swap(&b);
  }
  inline void Swap(MetrologySignalSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetrologySignalSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetrologySignalSet* New() const final {
    return CreateMaybeMessage<MetrologySignalSet>(nullptr);
  }

  MetrologySignalSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetrologySignalSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetrologySignalSet& from);
  void MergeFrom(const MetrologySignalSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetrologySignalSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MetrologySignalSet";
  }
  protected:
  explicit MetrologySignalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetrologySignalFieldNumber = 1,
  };
  // repeated .Proto.MetrologySignal metrologySignal = 1;
  int metrologysignal_size() const;
  private:
  int _internal_metrologysignal_size() const;
  public:
  void clear_metrologysignal();
  ::Proto::MetrologySignal* mutable_metrologysignal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::MetrologySignal >*
      mutable_metrologysignal();
  private:
  const ::Proto::MetrologySignal& _internal_metrologysignal(int index) const;
  ::Proto::MetrologySignal* _internal_add_metrologysignal();
  public:
  const ::Proto::MetrologySignal& metrologysignal(int index) const;
  ::Proto::MetrologySignal* add_metrologysignal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::MetrologySignal >&
      metrologysignal() const;

  // @@protoc_insertion_point(class_scope:Proto.MetrologySignalSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::MetrologySignal > metrologysignal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SimOverrideSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SimOverrideSignal) */ {
 public:
  inline SimOverrideSignal() : SimOverrideSignal(nullptr) {}
  virtual ~SimOverrideSignal();

  SimOverrideSignal(const SimOverrideSignal& from);
  SimOverrideSignal(SimOverrideSignal&& from) noexcept
    : SimOverrideSignal() {
    *this = ::std::move(from);
  }

  inline SimOverrideSignal& operator=(const SimOverrideSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimOverrideSignal& operator=(SimOverrideSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimOverrideSignal& default_instance();

  static inline const SimOverrideSignal* internal_default_instance() {
    return reinterpret_cast<const SimOverrideSignal*>(
               &_SimOverrideSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SimOverrideSignal& a, SimOverrideSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(SimOverrideSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimOverrideSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimOverrideSignal* New() const final {
    return CreateMaybeMessage<SimOverrideSignal>(nullptr);
  }

  SimOverrideSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimOverrideSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimOverrideSignal& from);
  void MergeFrom(const SimOverrideSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimOverrideSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SimOverrideSignal";
  }
  protected:
  explicit SimOverrideSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalIdFieldNumber = 10,
    kOverrideScriptFieldNumber = 50,
    kOverrideValueFieldNumber = 40,
    kEnabledFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOverrideMethodFieldNumber = 30,
  };
  // optional string appSignalId = 10;
  bool has_appsignalid() const;
  private:
  bool _internal_has_appsignalid() const;
  public:
  void clear_appsignalid();
  const std::string& appsignalid() const;
  void set_appsignalid(const std::string& value);
  void set_appsignalid(std::string&& value);
  void set_appsignalid(const char* value);
  void set_appsignalid(const char* value, size_t size);
  std::string* mutable_appsignalid();
  std::string* release_appsignalid();
  void set_allocated_appsignalid(std::string* appsignalid);
  private:
  const std::string& _internal_appsignalid() const;
  void _internal_set_appsignalid(const std::string& value);
  std::string* _internal_mutable_appsignalid();
  public:

  // optional string overrideScript = 50;
  bool has_overridescript() const;
  private:
  bool _internal_has_overridescript() const;
  public:
  void clear_overridescript();
  const std::string& overridescript() const;
  void set_overridescript(const std::string& value);
  void set_overridescript(std::string&& value);
  void set_overridescript(const char* value);
  void set_overridescript(const char* value, size_t size);
  std::string* mutable_overridescript();
  std::string* release_overridescript();
  void set_allocated_overridescript(std::string* overridescript);
  private:
  const std::string& _internal_overridescript() const;
  void _internal_set_overridescript(const std::string& value);
  std::string* _internal_mutable_overridescript();
  public:

  // optional .Proto.qvariant overrideValue = 40;
  bool has_overridevalue() const;
  private:
  bool _internal_has_overridevalue() const;
  public:
  void clear_overridevalue();
  const ::Proto::qvariant& overridevalue() const;
  ::Proto::qvariant* release_overridevalue();
  ::Proto::qvariant* mutable_overridevalue();
  void set_allocated_overridevalue(::Proto::qvariant* overridevalue);
  private:
  const ::Proto::qvariant& _internal_overridevalue() const;
  ::Proto::qvariant* _internal_mutable_overridevalue();
  public:
  void unsafe_arena_set_allocated_overridevalue(
      ::Proto::qvariant* overridevalue);
  ::Proto::qvariant* unsafe_arena_release_overridevalue();

  // optional bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional int32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 overrideMethod = 30;
  bool has_overridemethod() const;
  private:
  bool _internal_has_overridemethod() const;
  public:
  void clear_overridemethod();
  ::PROTOBUF_NAMESPACE_ID::int32 overridemethod() const;
  void set_overridemethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overridemethod() const;
  void _internal_set_overridemethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SimOverrideSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsignalid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overridescript_;
  ::Proto::qvariant* overridevalue_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 overridemethod_;
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SimOverrideSignalWorkspace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SimOverrideSignalWorkspace) */ {
 public:
  inline SimOverrideSignalWorkspace() : SimOverrideSignalWorkspace(nullptr) {}
  virtual ~SimOverrideSignalWorkspace();

  SimOverrideSignalWorkspace(const SimOverrideSignalWorkspace& from);
  SimOverrideSignalWorkspace(SimOverrideSignalWorkspace&& from) noexcept
    : SimOverrideSignalWorkspace() {
    *this = ::std::move(from);
  }

  inline SimOverrideSignalWorkspace& operator=(const SimOverrideSignalWorkspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimOverrideSignalWorkspace& operator=(SimOverrideSignalWorkspace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimOverrideSignalWorkspace& default_instance();

  static inline const SimOverrideSignalWorkspace* internal_default_instance() {
    return reinterpret_cast<const SimOverrideSignalWorkspace*>(
               &_SimOverrideSignalWorkspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SimOverrideSignalWorkspace& a, SimOverrideSignalWorkspace& b) {
    a.Swap(&b);
  }
  inline void Swap(SimOverrideSignalWorkspace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimOverrideSignalWorkspace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimOverrideSignalWorkspace* New() const final {
    return CreateMaybeMessage<SimOverrideSignalWorkspace>(nullptr);
  }

  SimOverrideSignalWorkspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimOverrideSignalWorkspace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimOverrideSignalWorkspace& from);
  void MergeFrom(const SimOverrideSignalWorkspace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimOverrideSignalWorkspace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SimOverrideSignalWorkspace";
  }
  protected:
  explicit SimOverrideSignalWorkspace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_2eproto);
    return ::descriptor_table_serialization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverrideSignalsFieldNumber = 2,
  };
  // repeated .Proto.SimOverrideSignal overrideSignals = 2;
  int overridesignals_size() const;
  private:
  int _internal_overridesignals_size() const;
  public:
  void clear_overridesignals();
  ::Proto::SimOverrideSignal* mutable_overridesignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SimOverrideSignal >*
      mutable_overridesignals();
  private:
  const ::Proto::SimOverrideSignal& _internal_overridesignals(int index) const;
  ::Proto::SimOverrideSignal* _internal_add_overridesignals();
  public:
  const ::Proto::SimOverrideSignal& overridesignals(int index) const;
  ::Proto::SimOverrideSignal* add_overridesignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SimOverrideSignal >&
      overridesignals() const;

  // @@protoc_insertion_point(class_scope:Proto.SimOverrideSignalWorkspace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SimOverrideSignal > overridesignals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uuid

// required bytes uuid = 1;
inline bool Uuid::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Uuid::has_uuid() const {
  return _internal_has_uuid();
}
inline void Uuid::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Uuid::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.Uuid.uuid)
  return _internal_uuid();
}
inline void Uuid::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Proto.Uuid.uuid)
}
inline std::string* Uuid::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.Uuid.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Uuid::_internal_uuid() const {
  return uuid_.Get();
}
inline void Uuid::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Uuid::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Uuid.uuid)
}
inline void Uuid::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Uuid.uuid)
}
inline void Uuid::set_uuid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Uuid.uuid)
}
inline std::string* Uuid::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Uuid::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.Uuid.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Uuid::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Uuid.uuid)
}

// -------------------------------------------------------------------

// qvariant

// required int32 type = 1;
inline bool qvariant::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool qvariant::has_type() const {
  return _internal_has_type();
}
inline void qvariant::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 qvariant::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 qvariant::type() const {
  // @@protoc_insertion_point(field_get:Proto.qvariant.type)
  return _internal_type();
}
inline void qvariant::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void qvariant::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.qvariant.type)
}

// optional int32 intValue = 2 [default = 0];
inline bool qvariant::_internal_has_intvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool qvariant::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void qvariant::clear_intvalue() {
  intvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 qvariant::_internal_intvalue() const {
  return intvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 qvariant::intvalue() const {
  // @@protoc_insertion_point(field_get:Proto.qvariant.intValue)
  return _internal_intvalue();
}
inline void qvariant::_internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  intvalue_ = value;
}
inline void qvariant::set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:Proto.qvariant.intValue)
}

// optional uint32 uintValue = 3 [default = 0];
inline bool qvariant::_internal_has_uintvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool qvariant::has_uintvalue() const {
  return _internal_has_uintvalue();
}
inline void qvariant::clear_uintvalue() {
  uintvalue_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 qvariant::_internal_uintvalue() const {
  return uintvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 qvariant::uintvalue() const {
  // @@protoc_insertion_point(field_get:Proto.qvariant.uintValue)
  return _internal_uintvalue();
}
inline void qvariant::_internal_set_uintvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uintvalue_ = value;
}
inline void qvariant::set_uintvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uintvalue(value);
  // @@protoc_insertion_point(field_set:Proto.qvariant.uintValue)
}

// optional double doubleValue = 4 [default = 0];
inline bool qvariant::_internal_has_doublevalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool qvariant::has_doublevalue() const {
  return _internal_has_doublevalue();
}
inline void qvariant::clear_doublevalue() {
  doublevalue_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double qvariant::_internal_doublevalue() const {
  return doublevalue_;
}
inline double qvariant::doublevalue() const {
  // @@protoc_insertion_point(field_get:Proto.qvariant.doubleValue)
  return _internal_doublevalue();
}
inline void qvariant::_internal_set_doublevalue(double value) {
  _has_bits_[0] |= 0x00000004u;
  doublevalue_ = value;
}
inline void qvariant::set_doublevalue(double value) {
  _internal_set_doublevalue(value);
  // @@protoc_insertion_point(field_set:Proto.qvariant.doubleValue)
}

// optional bool boolValue = 5 [default = false];
inline bool qvariant::_internal_has_boolvalue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool qvariant::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void qvariant::clear_boolvalue() {
  boolvalue_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool qvariant::_internal_boolvalue() const {
  return boolvalue_;
}
inline bool qvariant::boolvalue() const {
  // @@protoc_insertion_point(field_get:Proto.qvariant.boolValue)
  return _internal_boolvalue();
}
inline void qvariant::_internal_set_boolvalue(bool value) {
  _has_bits_[0] |= 0x00000010u;
  boolvalue_ = value;
}
inline void qvariant::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:Proto.qvariant.boolValue)
}

// optional float floatValue = 6 [default = 0];
inline bool qvariant::_internal_has_floatvalue() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool qvariant::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void qvariant::clear_floatvalue() {
  floatvalue_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float qvariant::_internal_floatvalue() const {
  return floatvalue_;
}
inline float qvariant::floatvalue() const {
  // @@protoc_insertion_point(field_get:Proto.qvariant.floatValue)
  return _internal_floatvalue();
}
inline void qvariant::_internal_set_floatvalue(float value) {
  _has_bits_[0] |= 0x00000020u;
  floatvalue_ = value;
}
inline void qvariant::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:Proto.qvariant.floatValue)
}

// -------------------------------------------------------------------

// wstring

// required bytes text = 1;
inline bool wstring::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool wstring::has_text() const {
  return _internal_has_text();
}
inline void wstring::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& wstring::text() const {
  // @@protoc_insertion_point(field_get:Proto.wstring.text)
  return _internal_text();
}
inline void wstring::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Proto.wstring.text)
}
inline std::string* wstring::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Proto.wstring.text)
  return _internal_mutable_text();
}
inline const std::string& wstring::_internal_text() const {
  return text_.Get();
}
inline void wstring::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void wstring::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.wstring.text)
}
inline void wstring::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.wstring.text)
}
inline void wstring::set_text(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.wstring.text)
}
inline std::string* wstring::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* wstring::release_text() {
  // @@protoc_insertion_point(field_release:Proto.wstring.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void wstring::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.wstring.text)
}

// -------------------------------------------------------------------

// FontParam

// required .Proto.wstring name_obsolete = 1;
inline bool FontParam::_internal_has_name_obsolete() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || name_obsolete_ != nullptr);
  return value;
}
inline bool FontParam::has_name_obsolete() const {
  return _internal_has_name_obsolete();
}
inline void FontParam::clear_name_obsolete() {
  if (name_obsolete_ != nullptr) name_obsolete_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& FontParam::_internal_name_obsolete() const {
  const ::Proto::wstring* p = name_obsolete_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& FontParam::name_obsolete() const {
  // @@protoc_insertion_point(field_get:Proto.FontParam.name_obsolete)
  return _internal_name_obsolete();
}
inline void FontParam::unsafe_arena_set_allocated_name_obsolete(
    ::Proto::wstring* name_obsolete) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_obsolete_);
  }
  name_obsolete_ = name_obsolete;
  if (name_obsolete) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FontParam.name_obsolete)
}
inline ::Proto::wstring* FontParam::release_name_obsolete() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = name_obsolete_;
  name_obsolete_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* FontParam::unsafe_arena_release_name_obsolete() {
  // @@protoc_insertion_point(field_release:Proto.FontParam.name_obsolete)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = name_obsolete_;
  name_obsolete_ = nullptr;
  return temp;
}
inline ::Proto::wstring* FontParam::_internal_mutable_name_obsolete() {
  _has_bits_[0] |= 0x00000002u;
  if (name_obsolete_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    name_obsolete_ = p;
  }
  return name_obsolete_;
}
inline ::Proto::wstring* FontParam::mutable_name_obsolete() {
  // @@protoc_insertion_point(field_mutable:Proto.FontParam.name_obsolete)
  return _internal_mutable_name_obsolete();
}
inline void FontParam::set_allocated_name_obsolete(::Proto::wstring* name_obsolete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_obsolete_;
  }
  if (name_obsolete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name_obsolete);
    if (message_arena != submessage_arena) {
      name_obsolete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_obsolete, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_obsolete_ = name_obsolete;
  // @@protoc_insertion_point(field_set_allocated:Proto.FontParam.name_obsolete)
}

// required double size = 2;
inline bool FontParam::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FontParam::has_size() const {
  return _internal_has_size();
}
inline void FontParam::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FontParam::_internal_size() const {
  return size_;
}
inline double FontParam::size() const {
  // @@protoc_insertion_point(field_get:Proto.FontParam.size)
  return _internal_size();
}
inline void FontParam::_internal_set_size(double value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void FontParam::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Proto.FontParam.size)
}

// required bool bold = 3;
inline bool FontParam::_internal_has_bold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FontParam::has_bold() const {
  return _internal_has_bold();
}
inline void FontParam::clear_bold() {
  bold_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FontParam::_internal_bold() const {
  return bold_;
}
inline bool FontParam::bold() const {
  // @@protoc_insertion_point(field_get:Proto.FontParam.bold)
  return _internal_bold();
}
inline void FontParam::_internal_set_bold(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bold_ = value;
}
inline void FontParam::set_bold(bool value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:Proto.FontParam.bold)
}

// required bool italic = 4;
inline bool FontParam::_internal_has_italic() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FontParam::has_italic() const {
  return _internal_has_italic();
}
inline void FontParam::clear_italic() {
  italic_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FontParam::_internal_italic() const {
  return italic_;
}
inline bool FontParam::italic() const {
  // @@protoc_insertion_point(field_get:Proto.FontParam.italic)
  return _internal_italic();
}
inline void FontParam::_internal_set_italic(bool value) {
  _has_bits_[0] |= 0x00000010u;
  italic_ = value;
}
inline void FontParam::set_italic(bool value) {
  _internal_set_italic(value);
  // @@protoc_insertion_point(field_set:Proto.FontParam.italic)
}

// optional string name = 5;
inline bool FontParam::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontParam::has_name() const {
  return _internal_has_name();
}
inline void FontParam::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontParam::name() const {
  // @@protoc_insertion_point(field_get:Proto.FontParam.name)
  return _internal_name();
}
inline void FontParam::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Proto.FontParam.name)
}
inline std::string* FontParam::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto.FontParam.name)
  return _internal_mutable_name();
}
inline const std::string& FontParam::_internal_name() const {
  return name_.Get();
}
inline void FontParam::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FontParam::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.FontParam.name)
}
inline void FontParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.FontParam.name)
}
inline void FontParam::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.FontParam.name)
}
inline std::string* FontParam::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FontParam::release_name() {
  // @@protoc_insertion_point(field_release:Proto.FontParam.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FontParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.FontParam.name)
}

// -------------------------------------------------------------------

// SchemaPoint

// required double x = 1;
inline bool SchemaPoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaPoint::has_x() const {
  return _internal_has_x();
}
inline void SchemaPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SchemaPoint::_internal_x() const {
  return x_;
}
inline double SchemaPoint::x() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaPoint.x)
  return _internal_x();
}
inline void SchemaPoint::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void SchemaPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaPoint.x)
}

// required double y = 2;
inline bool SchemaPoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaPoint::has_y() const {
  return _internal_has_y();
}
inline void SchemaPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SchemaPoint::_internal_y() const {
  return y_;
}
inline double SchemaPoint::y() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaPoint.y)
  return _internal_y();
}
inline void SchemaPoint::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void SchemaPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaPoint.y)
}

// -------------------------------------------------------------------

// ImageItem

// optional bool allowScale = 1 [default = true];
inline bool ImageItem::_internal_has_allowscale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageItem::has_allowscale() const {
  return _internal_has_allowscale();
}
inline void ImageItem::clear_allowscale() {
  allowscale_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ImageItem::_internal_allowscale() const {
  return allowscale_;
}
inline bool ImageItem::allowscale() const {
  // @@protoc_insertion_point(field_get:Proto.ImageItem.allowScale)
  return _internal_allowscale();
}
inline void ImageItem::_internal_set_allowscale(bool value) {
  _has_bits_[0] |= 0x00000008u;
  allowscale_ = value;
}
inline void ImageItem::set_allowscale(bool value) {
  _internal_set_allowscale(value);
  // @@protoc_insertion_point(field_set:Proto.ImageItem.allowScale)
}

// optional bool keepAspectRatio = 2 [default = true];
inline bool ImageItem::_internal_has_keepaspectratio() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageItem::has_keepaspectratio() const {
  return _internal_has_keepaspectratio();
}
inline void ImageItem::clear_keepaspectratio() {
  keepaspectratio_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ImageItem::_internal_keepaspectratio() const {
  return keepaspectratio_;
}
inline bool ImageItem::keepaspectratio() const {
  // @@protoc_insertion_point(field_get:Proto.ImageItem.keepAspectRatio)
  return _internal_keepaspectratio();
}
inline void ImageItem::_internal_set_keepaspectratio(bool value) {
  _has_bits_[0] |= 0x00000010u;
  keepaspectratio_ = value;
}
inline void ImageItem::set_keepaspectratio(bool value) {
  _internal_set_keepaspectratio(value);
  // @@protoc_insertion_point(field_set:Proto.ImageItem.keepAspectRatio)
}

// optional string imageId = 3;
inline bool ImageItem::_internal_has_imageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageItem::has_imageid() const {
  return _internal_has_imageid();
}
inline void ImageItem::clear_imageid() {
  imageid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageItem::imageid() const {
  // @@protoc_insertion_point(field_get:Proto.ImageItem.imageId)
  return _internal_imageid();
}
inline void ImageItem::set_imageid(const std::string& value) {
  _internal_set_imageid(value);
  // @@protoc_insertion_point(field_set:Proto.ImageItem.imageId)
}
inline std::string* ImageItem::mutable_imageid() {
  // @@protoc_insertion_point(field_mutable:Proto.ImageItem.imageId)
  return _internal_mutable_imageid();
}
inline const std::string& ImageItem::_internal_imageid() const {
  return imageid_.Get();
}
inline void ImageItem::_internal_set_imageid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageItem::set_imageid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  imageid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ImageItem.imageId)
}
inline void ImageItem::set_imageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  imageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ImageItem.imageId)
}
inline void ImageItem::set_imageid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  imageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ImageItem.imageId)
}
inline std::string* ImageItem::_internal_mutable_imageid() {
  _has_bits_[0] |= 0x00000001u;
  return imageid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageItem::release_imageid() {
  // @@protoc_insertion_point(field_release:Proto.ImageItem.imageId)
  if (!_internal_has_imageid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return imageid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageItem::set_allocated_imageid(std::string* imageid) {
  if (imageid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imageid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ImageItem.imageId)
}

// optional bytes imageData = 8;
inline bool ImageItem::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageItem::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void ImageItem::clear_imagedata() {
  imagedata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageItem::imagedata() const {
  // @@protoc_insertion_point(field_get:Proto.ImageItem.imageData)
  return _internal_imagedata();
}
inline void ImageItem::set_imagedata(const std::string& value) {
  _internal_set_imagedata(value);
  // @@protoc_insertion_point(field_set:Proto.ImageItem.imageData)
}
inline std::string* ImageItem::mutable_imagedata() {
  // @@protoc_insertion_point(field_mutable:Proto.ImageItem.imageData)
  return _internal_mutable_imagedata();
}
inline const std::string& ImageItem::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void ImageItem::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageItem::set_imagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ImageItem.imageData)
}
inline void ImageItem::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ImageItem.imageData)
}
inline void ImageItem::set_imagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ImageItem.imageData)
}
inline std::string* ImageItem::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000002u;
  return imagedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageItem::release_imagedata() {
  // @@protoc_insertion_point(field_release:Proto.ImageItem.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageItem::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ImageItem.imageData)
}

// optional string svgData = 9;
inline bool ImageItem::_internal_has_svgdata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageItem::has_svgdata() const {
  return _internal_has_svgdata();
}
inline void ImageItem::clear_svgdata() {
  svgdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ImageItem::svgdata() const {
  // @@protoc_insertion_point(field_get:Proto.ImageItem.svgData)
  return _internal_svgdata();
}
inline void ImageItem::set_svgdata(const std::string& value) {
  _internal_set_svgdata(value);
  // @@protoc_insertion_point(field_set:Proto.ImageItem.svgData)
}
inline std::string* ImageItem::mutable_svgdata() {
  // @@protoc_insertion_point(field_mutable:Proto.ImageItem.svgData)
  return _internal_mutable_svgdata();
}
inline const std::string& ImageItem::_internal_svgdata() const {
  return svgdata_.Get();
}
inline void ImageItem::_internal_set_svgdata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  svgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageItem::set_svgdata(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  svgdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ImageItem.svgData)
}
inline void ImageItem::set_svgdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  svgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ImageItem.svgData)
}
inline void ImageItem::set_svgdata(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  svgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ImageItem.svgData)
}
inline std::string* ImageItem::_internal_mutable_svgdata() {
  _has_bits_[0] |= 0x00000004u;
  return svgdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageItem::release_svgdata() {
  // @@protoc_insertion_point(field_release:Proto.ImageItem.svgData)
  if (!_internal_has_svgdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return svgdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageItem::set_allocated_svgdata(std::string* svgdata) {
  if (svgdata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  svgdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), svgdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ImageItem.svgData)
}

// -------------------------------------------------------------------

// Envelope

// required uint32 classnamehash = 1;
inline bool Envelope::_internal_has_classnamehash() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Envelope::has_classnamehash() const {
  return _internal_has_classnamehash();
}
inline void Envelope::clear_classnamehash() {
  classnamehash_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Envelope::_internal_classnamehash() const {
  return classnamehash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Envelope::classnamehash() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.classnamehash)
  return _internal_classnamehash();
}
inline void Envelope::_internal_set_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  classnamehash_ = value;
}
inline void Envelope::set_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_classnamehash(value);
  // @@protoc_insertion_point(field_set:Proto.Envelope.classnamehash)
}

// optional bytes compressedObject = 2;
inline bool Envelope::_internal_has_compressedobject() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Envelope::has_compressedobject() const {
  return _internal_has_compressedobject();
}
inline void Envelope::clear_compressedobject() {
  compressedobject_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Envelope::compressedobject() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.compressedObject)
  return _internal_compressedobject();
}
inline void Envelope::set_compressedobject(const std::string& value) {
  _internal_set_compressedobject(value);
  // @@protoc_insertion_point(field_set:Proto.Envelope.compressedObject)
}
inline std::string* Envelope::mutable_compressedobject() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.compressedObject)
  return _internal_mutable_compressedobject();
}
inline const std::string& Envelope::_internal_compressedobject() const {
  return compressedobject_.Get();
}
inline void Envelope::_internal_set_compressedobject(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  compressedobject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Envelope::set_compressedobject(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  compressedobject_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Envelope.compressedObject)
}
inline void Envelope::set_compressedobject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  compressedobject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Envelope.compressedObject)
}
inline void Envelope::set_compressedobject(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  compressedobject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Envelope.compressedObject)
}
inline std::string* Envelope::_internal_mutable_compressedobject() {
  _has_bits_[0] |= 0x00000001u;
  return compressedobject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Envelope::release_compressedobject() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.compressedObject)
  if (!_internal_has_compressedobject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return compressedobject_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Envelope::set_allocated_compressedobject(std::string* compressedobject) {
  if (compressedobject != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  compressedobject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compressedobject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.compressedObject)
}

// optional .Proto.SchemaItem schemaitem = 6;
inline bool Envelope::_internal_has_schemaitem() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || schemaitem_ != nullptr);
  return value;
}
inline bool Envelope::has_schemaitem() const {
  return _internal_has_schemaitem();
}
inline void Envelope::clear_schemaitem() {
  if (schemaitem_ != nullptr) schemaitem_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::SchemaItem& Envelope::_internal_schemaitem() const {
  const ::Proto::SchemaItem* p = schemaitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItem&>(
      ::Proto::_SchemaItem_default_instance_);
}
inline const ::Proto::SchemaItem& Envelope::schemaitem() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.schemaitem)
  return _internal_schemaitem();
}
inline void Envelope::unsafe_arena_set_allocated_schemaitem(
    ::Proto::SchemaItem* schemaitem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schemaitem_);
  }
  schemaitem_ = schemaitem;
  if (schemaitem) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.schemaitem)
}
inline ::Proto::SchemaItem* Envelope::release_schemaitem() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::SchemaItem* temp = schemaitem_;
  schemaitem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItem* Envelope::unsafe_arena_release_schemaitem() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.schemaitem)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::SchemaItem* temp = schemaitem_;
  schemaitem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItem* Envelope::_internal_mutable_schemaitem() {
  _has_bits_[0] |= 0x00000002u;
  if (schemaitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItem>(GetArena());
    schemaitem_ = p;
  }
  return schemaitem_;
}
inline ::Proto::SchemaItem* Envelope::mutable_schemaitem() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.schemaitem)
  return _internal_mutable_schemaitem();
}
inline void Envelope::set_allocated_schemaitem(::Proto::SchemaItem* schemaitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schemaitem_;
  }
  if (schemaitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schemaitem);
    if (message_arena != submessage_arena) {
      schemaitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schemaitem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  schemaitem_ = schemaitem;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.schemaitem)
}

// optional .Proto.DeviceObject deviceobject = 7;
inline bool Envelope::_internal_has_deviceobject() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || deviceobject_ != nullptr);
  return value;
}
inline bool Envelope::has_deviceobject() const {
  return _internal_has_deviceobject();
}
inline void Envelope::clear_deviceobject() {
  if (deviceobject_ != nullptr) deviceobject_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::DeviceObject& Envelope::_internal_deviceobject() const {
  const ::Proto::DeviceObject* p = deviceobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceObject&>(
      ::Proto::_DeviceObject_default_instance_);
}
inline const ::Proto::DeviceObject& Envelope::deviceobject() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.deviceobject)
  return _internal_deviceobject();
}
inline void Envelope::unsafe_arena_set_allocated_deviceobject(
    ::Proto::DeviceObject* deviceobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceobject_);
  }
  deviceobject_ = deviceobject;
  if (deviceobject) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.deviceobject)
}
inline ::Proto::DeviceObject* Envelope::release_deviceobject() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::DeviceObject* temp = deviceobject_;
  deviceobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceObject* Envelope::unsafe_arena_release_deviceobject() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.deviceobject)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::DeviceObject* temp = deviceobject_;
  deviceobject_ = nullptr;
  return temp;
}
inline ::Proto::DeviceObject* Envelope::_internal_mutable_deviceobject() {
  _has_bits_[0] |= 0x00000004u;
  if (deviceobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceObject>(GetArena());
    deviceobject_ = p;
  }
  return deviceobject_;
}
inline ::Proto::DeviceObject* Envelope::mutable_deviceobject() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.deviceobject)
  return _internal_mutable_deviceobject();
}
inline void Envelope::set_allocated_deviceobject(::Proto::DeviceObject* deviceobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deviceobject_;
  }
  if (deviceobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deviceobject);
    if (message_arena != submessage_arena) {
      deviceobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceobject, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deviceobject_ = deviceobject;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.deviceobject)
}

// optional .Proto.Schema schema = 100;
inline bool Envelope::_internal_has_schema() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || schema_ != nullptr);
  return value;
}
inline bool Envelope::has_schema() const {
  return _internal_has_schema();
}
inline void Envelope::clear_schema() {
  if (schema_ != nullptr) schema_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::Schema& Envelope::_internal_schema() const {
  const ::Proto::Schema* p = schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Schema&>(
      ::Proto::_Schema_default_instance_);
}
inline const ::Proto::Schema& Envelope::schema() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.schema)
  return _internal_schema();
}
inline void Envelope::unsafe_arena_set_allocated_schema(
    ::Proto::Schema* schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  schema_ = schema;
  if (schema) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.schema)
}
inline ::Proto::Schema* Envelope::release_schema() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::Schema* temp = schema_;
  schema_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Schema* Envelope::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.schema)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::Schema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::Proto::Schema* Envelope::_internal_mutable_schema() {
  _has_bits_[0] |= 0x00000008u;
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Schema>(GetArena());
    schema_ = p;
  }
  return schema_;
}
inline ::Proto::Schema* Envelope::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.schema)
  return _internal_mutable_schema();
}
inline void Envelope::set_allocated_schema(::Proto::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.schema)
}

// optional .Proto.SchemaLayer schemalayer = 101;
inline bool Envelope::_internal_has_schemalayer() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || schemalayer_ != nullptr);
  return value;
}
inline bool Envelope::has_schemalayer() const {
  return _internal_has_schemalayer();
}
inline void Envelope::clear_schemalayer() {
  if (schemalayer_ != nullptr) schemalayer_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::SchemaLayer& Envelope::_internal_schemalayer() const {
  const ::Proto::SchemaLayer* p = schemalayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaLayer&>(
      ::Proto::_SchemaLayer_default_instance_);
}
inline const ::Proto::SchemaLayer& Envelope::schemalayer() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.schemalayer)
  return _internal_schemalayer();
}
inline void Envelope::unsafe_arena_set_allocated_schemalayer(
    ::Proto::SchemaLayer* schemalayer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schemalayer_);
  }
  schemalayer_ = schemalayer;
  if (schemalayer) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.schemalayer)
}
inline ::Proto::SchemaLayer* Envelope::release_schemalayer() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::SchemaLayer* temp = schemalayer_;
  schemalayer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaLayer* Envelope::unsafe_arena_release_schemalayer() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.schemalayer)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::SchemaLayer* temp = schemalayer_;
  schemalayer_ = nullptr;
  return temp;
}
inline ::Proto::SchemaLayer* Envelope::_internal_mutable_schemalayer() {
  _has_bits_[0] |= 0x00000010u;
  if (schemalayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaLayer>(GetArena());
    schemalayer_ = p;
  }
  return schemalayer_;
}
inline ::Proto::SchemaLayer* Envelope::mutable_schemalayer() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.schemalayer)
  return _internal_mutable_schemalayer();
}
inline void Envelope::set_allocated_schemalayer(::Proto::SchemaLayer* schemalayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schemalayer_;
  }
  if (schemalayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schemalayer);
    if (message_arena != submessage_arena) {
      schemalayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schemalayer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  schemalayer_ = schemalayer;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.schemalayer)
}

// optional .Proto.FblElement fblelement = 102;
inline bool Envelope::_internal_has_fblelement() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || fblelement_ != nullptr);
  return value;
}
inline bool Envelope::has_fblelement() const {
  return _internal_has_fblelement();
}
inline void Envelope::clear_fblelement() {
  if (fblelement_ != nullptr) fblelement_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::FblElement& Envelope::_internal_fblelement() const {
  const ::Proto::FblElement* p = fblelement_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FblElement&>(
      ::Proto::_FblElement_default_instance_);
}
inline const ::Proto::FblElement& Envelope::fblelement() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.fblelement)
  return _internal_fblelement();
}
inline void Envelope::unsafe_arena_set_allocated_fblelement(
    ::Proto::FblElement* fblelement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fblelement_);
  }
  fblelement_ = fblelement;
  if (fblelement) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.fblelement)
}
inline ::Proto::FblElement* Envelope::release_fblelement() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::FblElement* temp = fblelement_;
  fblelement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FblElement* Envelope::unsafe_arena_release_fblelement() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.fblelement)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::FblElement* temp = fblelement_;
  fblelement_ = nullptr;
  return temp;
}
inline ::Proto::FblElement* Envelope::_internal_mutable_fblelement() {
  _has_bits_[0] |= 0x00000020u;
  if (fblelement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FblElement>(GetArena());
    fblelement_ = p;
  }
  return fblelement_;
}
inline ::Proto::FblElement* Envelope::mutable_fblelement() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.fblelement)
  return _internal_mutable_fblelement();
}
inline void Envelope::set_allocated_fblelement(::Proto::FblElement* fblelement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fblelement_;
  }
  if (fblelement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fblelement);
    if (message_arena != submessage_arena) {
      fblelement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fblelement, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  fblelement_ = fblelement;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.fblelement)
}

// optional .Proto.Configuration configuration = 103;
inline bool Envelope::_internal_has_configuration() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || configuration_ != nullptr);
  return value;
}
inline bool Envelope::has_configuration() const {
  return _internal_has_configuration();
}
inline void Envelope::clear_configuration() {
  if (configuration_ != nullptr) configuration_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::Configuration& Envelope::_internal_configuration() const {
  const ::Proto::Configuration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Configuration&>(
      ::Proto::_Configuration_default_instance_);
}
inline const ::Proto::Configuration& Envelope::configuration() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.configuration)
  return _internal_configuration();
}
inline void Envelope::unsafe_arena_set_allocated_configuration(
    ::Proto::Configuration* configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.configuration)
}
inline ::Proto::Configuration* Envelope::release_configuration() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::Configuration* temp = configuration_;
  configuration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Configuration* Envelope::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.configuration)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::Configuration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::Proto::Configuration* Envelope::_internal_mutable_configuration() {
  _has_bits_[0] |= 0x00000040u;
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Configuration>(GetArena());
    configuration_ = p;
  }
  return configuration_;
}
inline ::Proto::Configuration* Envelope::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.configuration)
  return _internal_mutable_configuration();
}
inline void Envelope::set_allocated_configuration(::Proto::Configuration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete configuration_;
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(configuration);
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.configuration)
}

// optional .Proto.Connection connection = 104;
inline bool Envelope::_internal_has_connection() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || connection_ != nullptr);
  return value;
}
inline bool Envelope::has_connection() const {
  return _internal_has_connection();
}
inline void Envelope::clear_connection() {
  if (connection_ != nullptr) connection_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Proto::Connection& Envelope::_internal_connection() const {
  const ::Proto::Connection* p = connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Connection&>(
      ::Proto::_Connection_default_instance_);
}
inline const ::Proto::Connection& Envelope::connection() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.connection)
  return _internal_connection();
}
inline void Envelope::unsafe_arena_set_allocated_connection(
    ::Proto::Connection* connection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.connection)
}
inline ::Proto::Connection* Envelope::release_connection() {
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::Connection* temp = connection_;
  connection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Connection* Envelope::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.connection)
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::Connection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::Proto::Connection* Envelope::_internal_mutable_connection() {
  _has_bits_[0] |= 0x00000080u;
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Connection>(GetArena());
    connection_ = p;
  }
  return connection_;
}
inline ::Proto::Connection* Envelope::mutable_connection() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.connection)
  return _internal_mutable_connection();
}
inline void Envelope::set_allocated_connection(::Proto::Connection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.connection)
}

// optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
inline bool Envelope::_internal_has_schemadetailsset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || schemadetailsset_ != nullptr);
  return value;
}
inline bool Envelope::has_schemadetailsset() const {
  return _internal_has_schemadetailsset();
}
inline void Envelope::clear_schemadetailsset() {
  if (schemadetailsset_ != nullptr) schemadetailsset_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::Proto::SchemaDetailsSet& Envelope::_internal_schemadetailsset() const {
  const ::Proto::SchemaDetailsSet* p = schemadetailsset_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaDetailsSet&>(
      ::Proto::_SchemaDetailsSet_default_instance_);
}
inline const ::Proto::SchemaDetailsSet& Envelope::schemadetailsset() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.schemaDetailsSet)
  return _internal_schemadetailsset();
}
inline void Envelope::unsafe_arena_set_allocated_schemadetailsset(
    ::Proto::SchemaDetailsSet* schemadetailsset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schemadetailsset_);
  }
  schemadetailsset_ = schemadetailsset;
  if (schemadetailsset) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.schemaDetailsSet)
}
inline ::Proto::SchemaDetailsSet* Envelope::release_schemadetailsset() {
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::SchemaDetailsSet* temp = schemadetailsset_;
  schemadetailsset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaDetailsSet* Envelope::unsafe_arena_release_schemadetailsset() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.schemaDetailsSet)
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::SchemaDetailsSet* temp = schemadetailsset_;
  schemadetailsset_ = nullptr;
  return temp;
}
inline ::Proto::SchemaDetailsSet* Envelope::_internal_mutable_schemadetailsset() {
  _has_bits_[0] |= 0x00000100u;
  if (schemadetailsset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaDetailsSet>(GetArena());
    schemadetailsset_ = p;
  }
  return schemadetailsset_;
}
inline ::Proto::SchemaDetailsSet* Envelope::mutable_schemadetailsset() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.schemaDetailsSet)
  return _internal_mutable_schemadetailsset();
}
inline void Envelope::set_allocated_schemadetailsset(::Proto::SchemaDetailsSet* schemadetailsset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schemadetailsset_;
  }
  if (schemadetailsset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schemadetailsset);
    if (message_arena != submessage_arena) {
      schemadetailsset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schemadetailsset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  schemadetailsset_ = schemadetailsset;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.schemaDetailsSet)
}

// optional .Proto.Bus bus = 200;
inline bool Envelope::_internal_has_bus() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || bus_ != nullptr);
  return value;
}
inline bool Envelope::has_bus() const {
  return _internal_has_bus();
}
inline void Envelope::clear_bus() {
  if (bus_ != nullptr) bus_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::Proto::Bus& Envelope::_internal_bus() const {
  const ::Proto::Bus* p = bus_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Bus&>(
      ::Proto::_Bus_default_instance_);
}
inline const ::Proto::Bus& Envelope::bus() const {
  // @@protoc_insertion_point(field_get:Proto.Envelope.bus)
  return _internal_bus();
}
inline void Envelope::unsafe_arena_set_allocated_bus(
    ::Proto::Bus* bus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_);
  }
  bus_ = bus;
  if (bus) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Envelope.bus)
}
inline ::Proto::Bus* Envelope::release_bus() {
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::Bus* temp = bus_;
  bus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Bus* Envelope::unsafe_arena_release_bus() {
  // @@protoc_insertion_point(field_release:Proto.Envelope.bus)
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::Bus* temp = bus_;
  bus_ = nullptr;
  return temp;
}
inline ::Proto::Bus* Envelope::_internal_mutable_bus() {
  _has_bits_[0] |= 0x00000200u;
  if (bus_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Bus>(GetArena());
    bus_ = p;
  }
  return bus_;
}
inline ::Proto::Bus* Envelope::mutable_bus() {
  // @@protoc_insertion_point(field_mutable:Proto.Envelope.bus)
  return _internal_mutable_bus();
}
inline void Envelope::set_allocated_bus(::Proto::Bus* bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bus_;
  }
  if (bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus);
    if (message_arena != submessage_arena) {
      bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  bus_ = bus;
  // @@protoc_insertion_point(field_set_allocated:Proto.Envelope.bus)
}

// -------------------------------------------------------------------

// EnvelopeSet

// repeated .Proto.Envelope items = 1;
inline int EnvelopeSet::_internal_items_size() const {
  return items_.size();
}
inline int EnvelopeSet::items_size() const {
  return _internal_items_size();
}
inline void EnvelopeSet::clear_items() {
  items_.Clear();
}
inline ::Proto::Envelope* EnvelopeSet::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.EnvelopeSet.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
EnvelopeSet::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Proto.EnvelopeSet.items)
  return &items_;
}
inline const ::Proto::Envelope& EnvelopeSet::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Proto::Envelope& EnvelopeSet::items(int index) const {
  // @@protoc_insertion_point(field_get:Proto.EnvelopeSet.items)
  return _internal_items(index);
}
inline ::Proto::Envelope* EnvelopeSet::_internal_add_items() {
  return items_.Add();
}
inline ::Proto::Envelope* EnvelopeSet::add_items() {
  // @@protoc_insertion_point(field_add:Proto.EnvelopeSet.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
EnvelopeSet::items() const {
  // @@protoc_insertion_point(field_list:Proto.EnvelopeSet.items)
  return items_;
}

// -------------------------------------------------------------------

// EnvelopeSetShortDescription

// optional uint32 projectdbversion = 1;
inline bool EnvelopeSetShortDescription::_internal_has_projectdbversion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnvelopeSetShortDescription::has_projectdbversion() const {
  return _internal_has_projectdbversion();
}
inline void EnvelopeSetShortDescription::clear_projectdbversion() {
  projectdbversion_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvelopeSetShortDescription::_internal_projectdbversion() const {
  return projectdbversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvelopeSetShortDescription::projectdbversion() const {
  // @@protoc_insertion_point(field_get:Proto.EnvelopeSetShortDescription.projectdbversion)
  return _internal_projectdbversion();
}
inline void EnvelopeSetShortDescription::_internal_set_projectdbversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  projectdbversion_ = value;
}
inline void EnvelopeSetShortDescription::set_projectdbversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_projectdbversion(value);
  // @@protoc_insertion_point(field_set:Proto.EnvelopeSetShortDescription.projectdbversion)
}

// repeated uint32 classnamehash = 2;
inline int EnvelopeSetShortDescription::_internal_classnamehash_size() const {
  return classnamehash_.size();
}
inline int EnvelopeSetShortDescription::classnamehash_size() const {
  return _internal_classnamehash_size();
}
inline void EnvelopeSetShortDescription::clear_classnamehash() {
  classnamehash_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvelopeSetShortDescription::_internal_classnamehash(int index) const {
  return classnamehash_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvelopeSetShortDescription::classnamehash(int index) const {
  // @@protoc_insertion_point(field_get:Proto.EnvelopeSetShortDescription.classnamehash)
  return _internal_classnamehash(index);
}
inline void EnvelopeSetShortDescription::set_classnamehash(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  classnamehash_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.EnvelopeSetShortDescription.classnamehash)
}
inline void EnvelopeSetShortDescription::_internal_add_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  classnamehash_.Add(value);
}
inline void EnvelopeSetShortDescription::add_classnamehash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_classnamehash(value);
  // @@protoc_insertion_point(field_add:Proto.EnvelopeSetShortDescription.classnamehash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EnvelopeSetShortDescription::_internal_classnamehash() const {
  return classnamehash_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EnvelopeSetShortDescription::classnamehash() const {
  // @@protoc_insertion_point(field_list:Proto.EnvelopeSetShortDescription.classnamehash)
  return _internal_classnamehash();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EnvelopeSetShortDescription::_internal_mutable_classnamehash() {
  return &classnamehash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EnvelopeSetShortDescription::mutable_classnamehash() {
  // @@protoc_insertion_point(field_mutable_list:Proto.EnvelopeSetShortDescription.classnamehash)
  return _internal_mutable_classnamehash();
}

// optional bool equipmentEditor = 3;
inline bool EnvelopeSetShortDescription::_internal_has_equipmenteditor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnvelopeSetShortDescription::has_equipmenteditor() const {
  return _internal_has_equipmenteditor();
}
inline void EnvelopeSetShortDescription::clear_equipmenteditor() {
  equipmenteditor_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EnvelopeSetShortDescription::_internal_equipmenteditor() const {
  return equipmenteditor_;
}
inline bool EnvelopeSetShortDescription::equipmenteditor() const {
  // @@protoc_insertion_point(field_get:Proto.EnvelopeSetShortDescription.equipmentEditor)
  return _internal_equipmenteditor();
}
inline void EnvelopeSetShortDescription::_internal_set_equipmenteditor(bool value) {
  _has_bits_[0] |= 0x00000002u;
  equipmenteditor_ = value;
}
inline void EnvelopeSetShortDescription::set_equipmenteditor(bool value) {
  _internal_set_equipmenteditor(value);
  // @@protoc_insertion_point(field_set:Proto.EnvelopeSetShortDescription.equipmentEditor)
}

// optional bool presetEditor = 4;
inline bool EnvelopeSetShortDescription::_internal_has_preseteditor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EnvelopeSetShortDescription::has_preseteditor() const {
  return _internal_has_preseteditor();
}
inline void EnvelopeSetShortDescription::clear_preseteditor() {
  preseteditor_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool EnvelopeSetShortDescription::_internal_preseteditor() const {
  return preseteditor_;
}
inline bool EnvelopeSetShortDescription::preseteditor() const {
  // @@protoc_insertion_point(field_get:Proto.EnvelopeSetShortDescription.presetEditor)
  return _internal_preseteditor();
}
inline void EnvelopeSetShortDescription::_internal_set_preseteditor(bool value) {
  _has_bits_[0] |= 0x00000004u;
  preseteditor_ = value;
}
inline void EnvelopeSetShortDescription::set_preseteditor(bool value) {
  _internal_set_preseteditor(value);
  // @@protoc_insertion_point(field_set:Proto.EnvelopeSetShortDescription.presetEditor)
}

// optional bool presetRoot = 5;
inline bool EnvelopeSetShortDescription::_internal_has_presetroot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EnvelopeSetShortDescription::has_presetroot() const {
  return _internal_has_presetroot();
}
inline void EnvelopeSetShortDescription::clear_presetroot() {
  presetroot_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool EnvelopeSetShortDescription::_internal_presetroot() const {
  return presetroot_;
}
inline bool EnvelopeSetShortDescription::presetroot() const {
  // @@protoc_insertion_point(field_get:Proto.EnvelopeSetShortDescription.presetRoot)
  return _internal_presetroot();
}
inline void EnvelopeSetShortDescription::_internal_set_presetroot(bool value) {
  _has_bits_[0] |= 0x00000008u;
  presetroot_ = value;
}
inline void EnvelopeSetShortDescription::set_presetroot(bool value) {
  _internal_set_presetroot(value);
  // @@protoc_insertion_point(field_set:Proto.EnvelopeSetShortDescription.presetRoot)
}

// -------------------------------------------------------------------

// Configuration

// required .Proto.Uuid uuid = 1;
inline bool Configuration::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool Configuration::has_uuid() const {
  return _internal_has_uuid();
}
inline void Configuration::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::Uuid& Configuration::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& Configuration::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.uuid)
  return _internal_uuid();
}
inline void Configuration::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Configuration.uuid)
}
inline ::Proto::Uuid* Configuration::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* Configuration::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.Configuration.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* Configuration::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* Configuration::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.uuid)
  return _internal_mutable_uuid();
}
inline void Configuration::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Configuration.uuid)
}

// required .Proto.wstring strID = 2;
inline bool Configuration::_internal_has_strid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || strid_ != nullptr);
  return value;
}
inline bool Configuration::has_strid() const {
  return _internal_has_strid();
}
inline void Configuration::clear_strid() {
  if (strid_ != nullptr) strid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& Configuration::_internal_strid() const {
  const ::Proto::wstring* p = strid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& Configuration::strid() const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.strID)
  return _internal_strid();
}
inline void Configuration::unsafe_arena_set_allocated_strid(
    ::Proto::wstring* strid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strid_);
  }
  strid_ = strid;
  if (strid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Configuration.strID)
}
inline ::Proto::wstring* Configuration::release_strid() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = strid_;
  strid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* Configuration::unsafe_arena_release_strid() {
  // @@protoc_insertion_point(field_release:Proto.Configuration.strID)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = strid_;
  strid_ = nullptr;
  return temp;
}
inline ::Proto::wstring* Configuration::_internal_mutable_strid() {
  _has_bits_[0] |= 0x00000002u;
  if (strid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    strid_ = p;
  }
  return strid_;
}
inline ::Proto::wstring* Configuration::mutable_strid() {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.strID)
  return _internal_mutable_strid();
}
inline void Configuration::set_allocated_strid(::Proto::wstring* strid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete strid_;
  }
  if (strid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(strid);
    if (message_arena != submessage_arena) {
      strid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  strid_ = strid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Configuration.strID)
}

// required .Proto.wstring caption = 3;
inline bool Configuration::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || caption_ != nullptr);
  return value;
}
inline bool Configuration::has_caption() const {
  return _internal_has_caption();
}
inline void Configuration::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::wstring& Configuration::_internal_caption() const {
  const ::Proto::wstring* p = caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& Configuration::caption() const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.caption)
  return _internal_caption();
}
inline void Configuration::unsafe_arena_set_allocated_caption(
    ::Proto::wstring* caption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_);
  }
  caption_ = caption;
  if (caption) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Configuration.caption)
}
inline ::Proto::wstring* Configuration::release_caption() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* Configuration::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:Proto.Configuration.caption)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  return temp;
}
inline ::Proto::wstring* Configuration::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000004u;
  if (caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    caption_ = p;
  }
  return caption_;
}
inline ::Proto::wstring* Configuration::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.caption)
  return _internal_mutable_caption();
}
inline void Configuration::set_allocated_caption(::Proto::wstring* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:Proto.Configuration.caption)
}

// required .Proto.wstring variables = 4;
inline bool Configuration::_internal_has_variables() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || variables_ != nullptr);
  return value;
}
inline bool Configuration::has_variables() const {
  return _internal_has_variables();
}
inline void Configuration::clear_variables() {
  if (variables_ != nullptr) variables_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::wstring& Configuration::_internal_variables() const {
  const ::Proto::wstring* p = variables_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& Configuration::variables() const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.variables)
  return _internal_variables();
}
inline void Configuration::unsafe_arena_set_allocated_variables(
    ::Proto::wstring* variables) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variables_);
  }
  variables_ = variables;
  if (variables) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Configuration.variables)
}
inline ::Proto::wstring* Configuration::release_variables() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::wstring* temp = variables_;
  variables_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* Configuration::unsafe_arena_release_variables() {
  // @@protoc_insertion_point(field_release:Proto.Configuration.variables)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::wstring* temp = variables_;
  variables_ = nullptr;
  return temp;
}
inline ::Proto::wstring* Configuration::_internal_mutable_variables() {
  _has_bits_[0] |= 0x00000008u;
  if (variables_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    variables_ = p;
  }
  return variables_;
}
inline ::Proto::wstring* Configuration::mutable_variables() {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.variables)
  return _internal_mutable_variables();
}
inline void Configuration::set_allocated_variables(::Proto::wstring* variables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete variables_;
  }
  if (variables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(variables);
    if (message_arena != submessage_arena) {
      variables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variables, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  variables_ = variables;
  // @@protoc_insertion_point(field_set_allocated:Proto.Configuration.variables)
}

// required .Proto.wstring globals = 5;
inline bool Configuration::_internal_has_globals() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || globals_ != nullptr);
  return value;
}
inline bool Configuration::has_globals() const {
  return _internal_has_globals();
}
inline void Configuration::clear_globals() {
  if (globals_ != nullptr) globals_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::wstring& Configuration::_internal_globals() const {
  const ::Proto::wstring* p = globals_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& Configuration::globals() const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.globals)
  return _internal_globals();
}
inline void Configuration::unsafe_arena_set_allocated_globals(
    ::Proto::wstring* globals) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globals_);
  }
  globals_ = globals;
  if (globals) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Configuration.globals)
}
inline ::Proto::wstring* Configuration::release_globals() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::wstring* temp = globals_;
  globals_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* Configuration::unsafe_arena_release_globals() {
  // @@protoc_insertion_point(field_release:Proto.Configuration.globals)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::wstring* temp = globals_;
  globals_ = nullptr;
  return temp;
}
inline ::Proto::wstring* Configuration::_internal_mutable_globals() {
  _has_bits_[0] |= 0x00000010u;
  if (globals_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    globals_ = p;
  }
  return globals_;
}
inline ::Proto::wstring* Configuration::mutable_globals() {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.globals)
  return _internal_mutable_globals();
}
inline void Configuration::set_allocated_globals(::Proto::wstring* globals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete globals_;
  }
  if (globals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(globals);
    if (message_arena != submessage_arena) {
      globals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globals, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  globals_ = globals;
  // @@protoc_insertion_point(field_set_allocated:Proto.Configuration.globals)
}

// repeated .Proto.Uuid schemasIDs = 100;
inline int Configuration::_internal_schemasids_size() const {
  return schemasids_.size();
}
inline int Configuration::schemasids_size() const {
  return _internal_schemasids_size();
}
inline void Configuration::clear_schemasids() {
  schemasids_.Clear();
}
inline ::Proto::Uuid* Configuration::mutable_schemasids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.schemasIDs)
  return schemasids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >*
Configuration::mutable_schemasids() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Configuration.schemasIDs)
  return &schemasids_;
}
inline const ::Proto::Uuid& Configuration::_internal_schemasids(int index) const {
  return schemasids_.Get(index);
}
inline const ::Proto::Uuid& Configuration::schemasids(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.schemasIDs)
  return _internal_schemasids(index);
}
inline ::Proto::Uuid* Configuration::_internal_add_schemasids() {
  return schemasids_.Add();
}
inline ::Proto::Uuid* Configuration::add_schemasids() {
  // @@protoc_insertion_point(field_add:Proto.Configuration.schemasIDs)
  return _internal_add_schemasids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >&
Configuration::schemasids() const {
  // @@protoc_insertion_point(field_list:Proto.Configuration.schemasIDs)
  return schemasids_;
}

// repeated .Proto.Envelope schemas = 101;
inline int Configuration::_internal_schemas_size() const {
  return schemas_.size();
}
inline int Configuration::schemas_size() const {
  return _internal_schemas_size();
}
inline void Configuration::clear_schemas() {
  schemas_.Clear();
}
inline ::Proto::Envelope* Configuration::mutable_schemas(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Configuration.schemas)
  return schemas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
Configuration::mutable_schemas() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Configuration.schemas)
  return &schemas_;
}
inline const ::Proto::Envelope& Configuration::_internal_schemas(int index) const {
  return schemas_.Get(index);
}
inline const ::Proto::Envelope& Configuration::schemas(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Configuration.schemas)
  return _internal_schemas(index);
}
inline ::Proto::Envelope* Configuration::_internal_add_schemas() {
  return schemas_.Add();
}
inline ::Proto::Envelope* Configuration::add_schemas() {
  // @@protoc_insertion_point(field_add:Proto.Configuration.schemas)
  return _internal_add_schemas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
Configuration::schemas() const {
  // @@protoc_insertion_point(field_list:Proto.Configuration.schemas)
  return schemas_;
}

// -------------------------------------------------------------------

// AfbElementCollection

// repeated .Proto.AfbElementXml elements = 1;
inline int AfbElementCollection::_internal_elements_size() const {
  return elements_.size();
}
inline int AfbElementCollection::elements_size() const {
  return _internal_elements_size();
}
inline void AfbElementCollection::clear_elements() {
  elements_.Clear();
}
inline ::Proto::AfbElementXml* AfbElementCollection::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AfbElementCollection.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbElementXml >*
AfbElementCollection::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AfbElementCollection.elements)
  return &elements_;
}
inline const ::Proto::AfbElementXml& AfbElementCollection::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::Proto::AfbElementXml& AfbElementCollection::elements(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AfbElementCollection.elements)
  return _internal_elements(index);
}
inline ::Proto::AfbElementXml* AfbElementCollection::_internal_add_elements() {
  return elements_.Add();
}
inline ::Proto::AfbElementXml* AfbElementCollection::add_elements() {
  // @@protoc_insertion_point(field_add:Proto.AfbElementCollection.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbElementXml >&
AfbElementCollection::elements() const {
  // @@protoc_insertion_point(field_list:Proto.AfbElementCollection.elements)
  return elements_;
}

// -------------------------------------------------------------------

// AfbElementXml

// required bytes data = 1;
inline bool AfbElementXml::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AfbElementXml::has_data() const {
  return _internal_has_data();
}
inline void AfbElementXml::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AfbElementXml::data() const {
  // @@protoc_insertion_point(field_get:Proto.AfbElementXml.data)
  return _internal_data();
}
inline void AfbElementXml::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Proto.AfbElementXml.data)
}
inline std::string* AfbElementXml::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbElementXml.data)
  return _internal_mutable_data();
}
inline const std::string& AfbElementXml::_internal_data() const {
  return data_.Get();
}
inline void AfbElementXml::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AfbElementXml::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AfbElementXml.data)
}
inline void AfbElementXml::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AfbElementXml.data)
}
inline void AfbElementXml::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AfbElementXml.data)
}
inline std::string* AfbElementXml::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AfbElementXml::release_data() {
  // @@protoc_insertion_point(field_release:Proto.AfbElementXml.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AfbElementXml::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbElementXml.data)
}

// -------------------------------------------------------------------

// FblElement

// required .Proto.wstring strID = 2;
inline bool FblElement::_internal_has_strid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || strid_ != nullptr);
  return value;
}
inline bool FblElement::has_strid() const {
  return _internal_has_strid();
}
inline void FblElement::clear_strid() {
  if (strid_ != nullptr) strid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::wstring& FblElement::_internal_strid() const {
  const ::Proto::wstring* p = strid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& FblElement::strid() const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.strID)
  return _internal_strid();
}
inline void FblElement::unsafe_arena_set_allocated_strid(
    ::Proto::wstring* strid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strid_);
  }
  strid_ = strid;
  if (strid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FblElement.strID)
}
inline ::Proto::wstring* FblElement::release_strid() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = strid_;
  strid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* FblElement::unsafe_arena_release_strid() {
  // @@protoc_insertion_point(field_release:Proto.FblElement.strID)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = strid_;
  strid_ = nullptr;
  return temp;
}
inline ::Proto::wstring* FblElement::_internal_mutable_strid() {
  _has_bits_[0] |= 0x00000001u;
  if (strid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    strid_ = p;
  }
  return strid_;
}
inline ::Proto::wstring* FblElement::mutable_strid() {
  // @@protoc_insertion_point(field_mutable:Proto.FblElement.strID)
  return _internal_mutable_strid();
}
inline void FblElement::set_allocated_strid(::Proto::wstring* strid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete strid_;
  }
  if (strid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(strid);
    if (message_arena != submessage_arena) {
      strid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strid_ = strid;
  // @@protoc_insertion_point(field_set_allocated:Proto.FblElement.strID)
}

// required .Proto.wstring caption = 3;
inline bool FblElement::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || caption_ != nullptr);
  return value;
}
inline bool FblElement::has_caption() const {
  return _internal_has_caption();
}
inline void FblElement::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& FblElement::_internal_caption() const {
  const ::Proto::wstring* p = caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& FblElement::caption() const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.caption)
  return _internal_caption();
}
inline void FblElement::unsafe_arena_set_allocated_caption(
    ::Proto::wstring* caption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_);
  }
  caption_ = caption;
  if (caption) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FblElement.caption)
}
inline ::Proto::wstring* FblElement::release_caption() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* FblElement::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:Proto.FblElement.caption)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  return temp;
}
inline ::Proto::wstring* FblElement::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000002u;
  if (caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    caption_ = p;
  }
  return caption_;
}
inline ::Proto::wstring* FblElement::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.FblElement.caption)
  return _internal_mutable_caption();
}
inline void FblElement::set_allocated_caption(::Proto::wstring* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:Proto.FblElement.caption)
}

// required uint32 opcode = 4;
inline bool FblElement::_internal_has_opcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FblElement::has_opcode() const {
  return _internal_has_opcode();
}
inline void FblElement::clear_opcode() {
  opcode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblElement::_internal_opcode() const {
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblElement::opcode() const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.opcode)
  return _internal_opcode();
}
inline void FblElement::_internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  opcode_ = value;
}
inline void FblElement::set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:Proto.FblElement.opcode)
}

// optional bool hasRam = 5 [default = false];
inline bool FblElement::_internal_has_hasram() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FblElement::has_hasram() const {
  return _internal_has_hasram();
}
inline void FblElement::clear_hasram() {
  hasram_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FblElement::_internal_hasram() const {
  return hasram_;
}
inline bool FblElement::hasram() const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.hasRam)
  return _internal_hasram();
}
inline void FblElement::_internal_set_hasram(bool value) {
  _has_bits_[0] |= 0x00000010u;
  hasram_ = value;
}
inline void FblElement::set_hasram(bool value) {
  _internal_set_hasram(value);
  // @@protoc_insertion_point(field_set:Proto.FblElement.hasRam)
}

// optional bool requiredStart = 6 [default = true];
inline bool FblElement::_internal_has_requiredstart() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FblElement::has_requiredstart() const {
  return _internal_has_requiredstart();
}
inline void FblElement::clear_requiredstart() {
  requiredstart_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FblElement::_internal_requiredstart() const {
  return requiredstart_;
}
inline bool FblElement::requiredstart() const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.requiredStart)
  return _internal_requiredstart();
}
inline void FblElement::_internal_set_requiredstart(bool value) {
  _has_bits_[0] |= 0x00000020u;
  requiredstart_ = value;
}
inline void FblElement::set_requiredstart(bool value) {
  _internal_set_requiredstart(value);
  // @@protoc_insertion_point(field_set:Proto.FblElement.requiredStart)
}

// repeated .Proto.AfbSignal inputs = 11;
inline int FblElement::_internal_inputs_size() const {
  return inputs_.size();
}
inline int FblElement::inputs_size() const {
  return _internal_inputs_size();
}
inline void FblElement::clear_inputs() {
  inputs_.Clear();
}
inline ::Proto::AfbSignal* FblElement::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.FblElement.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >*
FblElement::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.FblElement.inputs)
  return &inputs_;
}
inline const ::Proto::AfbSignal& FblElement::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::Proto::AfbSignal& FblElement::inputs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.inputs)
  return _internal_inputs(index);
}
inline ::Proto::AfbSignal* FblElement::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::Proto::AfbSignal* FblElement::add_inputs() {
  // @@protoc_insertion_point(field_add:Proto.FblElement.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >&
FblElement::inputs() const {
  // @@protoc_insertion_point(field_list:Proto.FblElement.inputs)
  return inputs_;
}

// repeated .Proto.AfbSignal outputs = 12;
inline int FblElement::_internal_outputs_size() const {
  return outputs_.size();
}
inline int FblElement::outputs_size() const {
  return _internal_outputs_size();
}
inline void FblElement::clear_outputs() {
  outputs_.Clear();
}
inline ::Proto::AfbSignal* FblElement::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.FblElement.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >*
FblElement::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.FblElement.outputs)
  return &outputs_;
}
inline const ::Proto::AfbSignal& FblElement::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::Proto::AfbSignal& FblElement::outputs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.outputs)
  return _internal_outputs(index);
}
inline ::Proto::AfbSignal* FblElement::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::Proto::AfbSignal* FblElement::add_outputs() {
  // @@protoc_insertion_point(field_add:Proto.FblElement.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbSignal >&
FblElement::outputs() const {
  // @@protoc_insertion_point(field_list:Proto.FblElement.outputs)
  return outputs_;
}

// repeated .Proto.AfbParam params = 13;
inline int FblElement::_internal_params_size() const {
  return params_.size();
}
inline int FblElement::params_size() const {
  return _internal_params_size();
}
inline void FblElement::clear_params() {
  params_.Clear();
}
inline ::Proto::AfbParam* FblElement::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.FblElement.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >*
FblElement::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.FblElement.params)
  return &params_;
}
inline const ::Proto::AfbParam& FblElement::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::Proto::AfbParam& FblElement::params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.params)
  return _internal_params(index);
}
inline ::Proto::AfbParam* FblElement::_internal_add_params() {
  return params_.Add();
}
inline ::Proto::AfbParam* FblElement::add_params() {
  // @@protoc_insertion_point(field_add:Proto.FblElement.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >&
FblElement::params() const {
  // @@protoc_insertion_point(field_list:Proto.FblElement.params)
  return params_;
}

// optional .Proto.wstring description = 14;
inline bool FblElement::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || description_ != nullptr);
  return value;
}
inline bool FblElement::has_description() const {
  return _internal_has_description();
}
inline void FblElement::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::wstring& FblElement::_internal_description() const {
  const ::Proto::wstring* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& FblElement::description() const {
  // @@protoc_insertion_point(field_get:Proto.FblElement.description)
  return _internal_description();
}
inline void FblElement::unsafe_arena_set_allocated_description(
    ::Proto::wstring* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FblElement.description)
}
inline ::Proto::wstring* FblElement::release_description() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::wstring* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* FblElement::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:Proto.FblElement.description)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::wstring* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::Proto::wstring* FblElement::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    description_ = p;
  }
  return description_;
}
inline ::Proto::wstring* FblElement::mutable_description() {
  // @@protoc_insertion_point(field_mutable:Proto.FblElement.description)
  return _internal_mutable_description();
}
inline void FblElement::set_allocated_description(::Proto::wstring* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:Proto.FblElement.description)
}

// -------------------------------------------------------------------

// AfbSignal

// required .Proto.wstring caption = 1;
inline bool AfbSignal::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || caption_ != nullptr);
  return value;
}
inline bool AfbSignal::has_caption() const {
  return _internal_has_caption();
}
inline void AfbSignal::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::wstring& AfbSignal::_internal_caption() const {
  const ::Proto::wstring* p = caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& AfbSignal::caption() const {
  // @@protoc_insertion_point(field_get:Proto.AfbSignal.caption)
  return _internal_caption();
}
inline void AfbSignal::unsafe_arena_set_allocated_caption(
    ::Proto::wstring* caption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_);
  }
  caption_ = caption;
  if (caption) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbSignal.caption)
}
inline ::Proto::wstring* AfbSignal::release_caption() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* AfbSignal::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:Proto.AfbSignal.caption)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  return temp;
}
inline ::Proto::wstring* AfbSignal::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  if (caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    caption_ = p;
  }
  return caption_;
}
inline ::Proto::wstring* AfbSignal::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbSignal.caption)
  return _internal_mutable_caption();
}
inline void AfbSignal::set_allocated_caption(::Proto::wstring* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbSignal.caption)
}

// required .Proto.FblSignalType type = 2;
inline bool AfbSignal::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AfbSignal::has_type() const {
  return _internal_has_type();
}
inline void AfbSignal::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Proto::FblSignalType AfbSignal::_internal_type() const {
  return static_cast< ::Proto::FblSignalType >(type_);
}
inline ::Proto::FblSignalType AfbSignal::type() const {
  // @@protoc_insertion_point(field_get:Proto.AfbSignal.type)
  return _internal_type();
}
inline void AfbSignal::_internal_set_type(::Proto::FblSignalType value) {
  assert(::Proto::FblSignalType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void AfbSignal::set_type(::Proto::FblSignalType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.AfbSignal.type)
}

// optional int32 operandIndex = 3 [default = 0];
inline bool AfbSignal::_internal_has_operandindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AfbSignal::has_operandindex() const {
  return _internal_has_operandindex();
}
inline void AfbSignal::clear_operandindex() {
  operandindex_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbSignal::_internal_operandindex() const {
  return operandindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbSignal::operandindex() const {
  // @@protoc_insertion_point(field_get:Proto.AfbSignal.operandIndex)
  return _internal_operandindex();
}
inline void AfbSignal::_internal_set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  operandindex_ = value;
}
inline void AfbSignal::set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operandindex(value);
  // @@protoc_insertion_point(field_set:Proto.AfbSignal.operandIndex)
}

// optional int32 size = 4 [default = 0];
inline bool AfbSignal::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AfbSignal::has_size() const {
  return _internal_has_size();
}
inline void AfbSignal::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbSignal::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbSignal::size() const {
  // @@protoc_insertion_point(field_get:Proto.AfbSignal.size)
  return _internal_size();
}
inline void AfbSignal::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  size_ = value;
}
inline void AfbSignal::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Proto.AfbSignal.size)
}

// optional .Proto.wstring opName = 5;
inline bool AfbSignal::_internal_has_opname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || opname_ != nullptr);
  return value;
}
inline bool AfbSignal::has_opname() const {
  return _internal_has_opname();
}
inline void AfbSignal::clear_opname() {
  if (opname_ != nullptr) opname_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& AfbSignal::_internal_opname() const {
  const ::Proto::wstring* p = opname_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& AfbSignal::opname() const {
  // @@protoc_insertion_point(field_get:Proto.AfbSignal.opName)
  return _internal_opname();
}
inline void AfbSignal::unsafe_arena_set_allocated_opname(
    ::Proto::wstring* opname) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opname_);
  }
  opname_ = opname;
  if (opname) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbSignal.opName)
}
inline ::Proto::wstring* AfbSignal::release_opname() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = opname_;
  opname_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* AfbSignal::unsafe_arena_release_opname() {
  // @@protoc_insertion_point(field_release:Proto.AfbSignal.opName)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = opname_;
  opname_ = nullptr;
  return temp;
}
inline ::Proto::wstring* AfbSignal::_internal_mutable_opname() {
  _has_bits_[0] |= 0x00000002u;
  if (opname_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    opname_ = p;
  }
  return opname_;
}
inline ::Proto::wstring* AfbSignal::mutable_opname() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbSignal.opName)
  return _internal_mutable_opname();
}
inline void AfbSignal::set_allocated_opname(::Proto::wstring* opname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete opname_;
  }
  if (opname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(opname);
    if (message_arena != submessage_arena) {
      opname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opname, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  opname_ = opname;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbSignal.opName)
}

// optional .Proto.FblDataFormat dataFormat = 6;
inline bool AfbSignal::_internal_has_dataformat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AfbSignal::has_dataformat() const {
  return _internal_has_dataformat();
}
inline void AfbSignal::clear_dataformat() {
  dataformat_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Proto::FblDataFormat AfbSignal::_internal_dataformat() const {
  return static_cast< ::Proto::FblDataFormat >(dataformat_);
}
inline ::Proto::FblDataFormat AfbSignal::dataformat() const {
  // @@protoc_insertion_point(field_get:Proto.AfbSignal.dataFormat)
  return _internal_dataformat();
}
inline void AfbSignal::_internal_set_dataformat(::Proto::FblDataFormat value) {
  assert(::Proto::FblDataFormat_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  dataformat_ = value;
}
inline void AfbSignal::set_dataformat(::Proto::FblDataFormat value) {
  _internal_set_dataformat(value);
  // @@protoc_insertion_point(field_set:Proto.AfbSignal.dataFormat)
}

// -------------------------------------------------------------------

// AfbParam

// required .Proto.wstring caption = 1;
inline bool AfbParam::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || caption_ != nullptr);
  return value;
}
inline bool AfbParam::has_caption() const {
  return _internal_has_caption();
}
inline void AfbParam::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::wstring& AfbParam::_internal_caption() const {
  const ::Proto::wstring* p = caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& AfbParam::caption() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.caption)
  return _internal_caption();
}
inline void AfbParam::unsafe_arena_set_allocated_caption(
    ::Proto::wstring* caption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_);
  }
  caption_ = caption;
  if (caption) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.caption)
}
inline ::Proto::wstring* AfbParam::release_caption() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* AfbParam::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.caption)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  return temp;
}
inline ::Proto::wstring* AfbParam::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  if (caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    caption_ = p;
  }
  return caption_;
}
inline ::Proto::wstring* AfbParam::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.caption)
  return _internal_mutable_caption();
}
inline void AfbParam::set_allocated_caption(::Proto::wstring* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.caption)
}

// required bool visible = 7;
inline bool AfbParam::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AfbParam::has_visible() const {
  return _internal_has_visible();
}
inline void AfbParam::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool AfbParam::_internal_visible() const {
  return visible_;
}
inline bool AfbParam::visible() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.visible)
  return _internal_visible();
}
inline void AfbParam::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000200u;
  visible_ = value;
}
inline void AfbParam::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.visible)
}

// optional int32 operandIndex = 8 [default = 0];
inline bool AfbParam::_internal_has_operandindex() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AfbParam::has_operandindex() const {
  return _internal_has_operandindex();
}
inline void AfbParam::clear_operandindex() {
  operandindex_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbParam::_internal_operandindex() const {
  return operandindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbParam::operandindex() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.operandIndex)
  return _internal_operandindex();
}
inline void AfbParam::_internal_set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  operandindex_ = value;
}
inline void AfbParam::set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operandindex(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.operandIndex)
}

// optional int32 size = 9 [default = 0];
inline bool AfbParam::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AfbParam::has_size() const {
  return _internal_has_size();
}
inline void AfbParam::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbParam::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AfbParam::size() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.size)
  return _internal_size();
}
inline void AfbParam::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  size_ = value;
}
inline void AfbParam::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.size)
}

// optional bool instantiator = 10 [default = false];
inline bool AfbParam::_internal_has_instantiator() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AfbParam::has_instantiator() const {
  return _internal_has_instantiator();
}
inline void AfbParam::clear_instantiator() {
  instantiator_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool AfbParam::_internal_instantiator() const {
  return instantiator_;
}
inline bool AfbParam::instantiator() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.instantiator)
  return _internal_instantiator();
}
inline void AfbParam::_internal_set_instantiator(bool value) {
  _has_bits_[0] |= 0x00000400u;
  instantiator_ = value;
}
inline void AfbParam::set_instantiator(bool value) {
  _internal_set_instantiator(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.instantiator)
}

// optional bool user = 11 [default = false];
inline bool AfbParam::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AfbParam::has_user() const {
  return _internal_has_user();
}
inline void AfbParam::clear_user() {
  user_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool AfbParam::_internal_user() const {
  return user_;
}
inline bool AfbParam::user() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.user)
  return _internal_user();
}
inline void AfbParam::_internal_set_user(bool value) {
  _has_bits_[0] |= 0x00000800u;
  user_ = value;
}
inline void AfbParam::set_user(bool value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.user)
}

// optional .Proto.wstring changedScript = 12;
inline bool AfbParam::_internal_has_changedscript() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || changedscript_ != nullptr);
  return value;
}
inline bool AfbParam::has_changedscript() const {
  return _internal_has_changedscript();
}
inline void AfbParam::clear_changedscript() {
  if (changedscript_ != nullptr) changedscript_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& AfbParam::_internal_changedscript() const {
  const ::Proto::wstring* p = changedscript_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& AfbParam::changedscript() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.changedScript)
  return _internal_changedscript();
}
inline void AfbParam::unsafe_arena_set_allocated_changedscript(
    ::Proto::wstring* changedscript) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changedscript_);
  }
  changedscript_ = changedscript;
  if (changedscript) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.changedScript)
}
inline ::Proto::wstring* AfbParam::release_changedscript() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = changedscript_;
  changedscript_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* AfbParam::unsafe_arena_release_changedscript() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.changedScript)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = changedscript_;
  changedscript_ = nullptr;
  return temp;
}
inline ::Proto::wstring* AfbParam::_internal_mutable_changedscript() {
  _has_bits_[0] |= 0x00000002u;
  if (changedscript_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    changedscript_ = p;
  }
  return changedscript_;
}
inline ::Proto::wstring* AfbParam::mutable_changedscript() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.changedScript)
  return _internal_mutable_changedscript();
}
inline void AfbParam::set_allocated_changedscript(::Proto::wstring* changedscript) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete changedscript_;
  }
  if (changedscript) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(changedscript);
    if (message_arena != submessage_arena) {
      changedscript = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changedscript, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  changedscript_ = changedscript;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.changedScript)
}

// optional .Proto.qvariant value = 13;
inline bool AfbParam::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool AfbParam::has_value() const {
  return _internal_has_value();
}
inline void AfbParam::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::qvariant& AfbParam::_internal_value() const {
  const ::Proto::qvariant* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::qvariant&>(
      ::Proto::_qvariant_default_instance_);
}
inline const ::Proto::qvariant& AfbParam::value() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.value)
  return _internal_value();
}
inline void AfbParam::unsafe_arena_set_allocated_value(
    ::Proto::qvariant* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.value)
}
inline ::Proto::qvariant* AfbParam::release_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::qvariant* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::qvariant* AfbParam::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.value)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::qvariant* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::Proto::qvariant* AfbParam::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::qvariant>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::Proto::qvariant* AfbParam::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.value)
  return _internal_mutable_value();
}
inline void AfbParam::set_allocated_value(::Proto::qvariant* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.value)
}

// optional .Proto.qvariant defaultvalue = 14;
inline bool AfbParam::_internal_has_defaultvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || defaultvalue_ != nullptr);
  return value;
}
inline bool AfbParam::has_defaultvalue() const {
  return _internal_has_defaultvalue();
}
inline void AfbParam::clear_defaultvalue() {
  if (defaultvalue_ != nullptr) defaultvalue_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::qvariant& AfbParam::_internal_defaultvalue() const {
  const ::Proto::qvariant* p = defaultvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::qvariant&>(
      ::Proto::_qvariant_default_instance_);
}
inline const ::Proto::qvariant& AfbParam::defaultvalue() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.defaultvalue)
  return _internal_defaultvalue();
}
inline void AfbParam::unsafe_arena_set_allocated_defaultvalue(
    ::Proto::qvariant* defaultvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultvalue_);
  }
  defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.defaultvalue)
}
inline ::Proto::qvariant* AfbParam::release_defaultvalue() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::qvariant* temp = defaultvalue_;
  defaultvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::qvariant* AfbParam::unsafe_arena_release_defaultvalue() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.defaultvalue)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::qvariant* temp = defaultvalue_;
  defaultvalue_ = nullptr;
  return temp;
}
inline ::Proto::qvariant* AfbParam::_internal_mutable_defaultvalue() {
  _has_bits_[0] |= 0x00000008u;
  if (defaultvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::qvariant>(GetArena());
    defaultvalue_ = p;
  }
  return defaultvalue_;
}
inline ::Proto::qvariant* AfbParam::mutable_defaultvalue() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.defaultvalue)
  return _internal_mutable_defaultvalue();
}
inline void AfbParam::set_allocated_defaultvalue(::Proto::qvariant* defaultvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete defaultvalue_;
  }
  if (defaultvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defaultvalue);
    if (message_arena != submessage_arena) {
      defaultvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  defaultvalue_ = defaultvalue;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.defaultvalue)
}

// optional .Proto.qvariant lowlimit = 15;
inline bool AfbParam::_internal_has_lowlimit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || lowlimit_ != nullptr);
  return value;
}
inline bool AfbParam::has_lowlimit() const {
  return _internal_has_lowlimit();
}
inline void AfbParam::clear_lowlimit() {
  if (lowlimit_ != nullptr) lowlimit_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::qvariant& AfbParam::_internal_lowlimit() const {
  const ::Proto::qvariant* p = lowlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::qvariant&>(
      ::Proto::_qvariant_default_instance_);
}
inline const ::Proto::qvariant& AfbParam::lowlimit() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.lowlimit)
  return _internal_lowlimit();
}
inline void AfbParam::unsafe_arena_set_allocated_lowlimit(
    ::Proto::qvariant* lowlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowlimit_);
  }
  lowlimit_ = lowlimit;
  if (lowlimit) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.lowlimit)
}
inline ::Proto::qvariant* AfbParam::release_lowlimit() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::qvariant* temp = lowlimit_;
  lowlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::qvariant* AfbParam::unsafe_arena_release_lowlimit() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.lowlimit)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::qvariant* temp = lowlimit_;
  lowlimit_ = nullptr;
  return temp;
}
inline ::Proto::qvariant* AfbParam::_internal_mutable_lowlimit() {
  _has_bits_[0] |= 0x00000010u;
  if (lowlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::qvariant>(GetArena());
    lowlimit_ = p;
  }
  return lowlimit_;
}
inline ::Proto::qvariant* AfbParam::mutable_lowlimit() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.lowlimit)
  return _internal_mutable_lowlimit();
}
inline void AfbParam::set_allocated_lowlimit(::Proto::qvariant* lowlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lowlimit_;
  }
  if (lowlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lowlimit);
    if (message_arena != submessage_arena) {
      lowlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowlimit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lowlimit_ = lowlimit;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.lowlimit)
}

// optional .Proto.qvariant highlimit = 16;
inline bool AfbParam::_internal_has_highlimit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || highlimit_ != nullptr);
  return value;
}
inline bool AfbParam::has_highlimit() const {
  return _internal_has_highlimit();
}
inline void AfbParam::clear_highlimit() {
  if (highlimit_ != nullptr) highlimit_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::qvariant& AfbParam::_internal_highlimit() const {
  const ::Proto::qvariant* p = highlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::qvariant&>(
      ::Proto::_qvariant_default_instance_);
}
inline const ::Proto::qvariant& AfbParam::highlimit() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.highlimit)
  return _internal_highlimit();
}
inline void AfbParam::unsafe_arena_set_allocated_highlimit(
    ::Proto::qvariant* highlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlimit_);
  }
  highlimit_ = highlimit;
  if (highlimit) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.highlimit)
}
inline ::Proto::qvariant* AfbParam::release_highlimit() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::qvariant* temp = highlimit_;
  highlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::qvariant* AfbParam::unsafe_arena_release_highlimit() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.highlimit)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::qvariant* temp = highlimit_;
  highlimit_ = nullptr;
  return temp;
}
inline ::Proto::qvariant* AfbParam::_internal_mutable_highlimit() {
  _has_bits_[0] |= 0x00000020u;
  if (highlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::qvariant>(GetArena());
    highlimit_ = p;
  }
  return highlimit_;
}
inline ::Proto::qvariant* AfbParam::mutable_highlimit() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.highlimit)
  return _internal_mutable_highlimit();
}
inline void AfbParam::set_allocated_highlimit(::Proto::qvariant* highlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete highlimit_;
  }
  if (highlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(highlimit);
    if (message_arena != submessage_arena) {
      highlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlimit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  highlimit_ = highlimit;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.highlimit)
}

// optional .Proto.wstring opName = 17;
inline bool AfbParam::_internal_has_opname() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || opname_ != nullptr);
  return value;
}
inline bool AfbParam::has_opname() const {
  return _internal_has_opname();
}
inline void AfbParam::clear_opname() {
  if (opname_ != nullptr) opname_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::wstring& AfbParam::_internal_opname() const {
  const ::Proto::wstring* p = opname_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& AfbParam::opname() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.opName)
  return _internal_opname();
}
inline void AfbParam::unsafe_arena_set_allocated_opname(
    ::Proto::wstring* opname) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opname_);
  }
  opname_ = opname;
  if (opname) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AfbParam.opName)
}
inline ::Proto::wstring* AfbParam::release_opname() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::wstring* temp = opname_;
  opname_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* AfbParam::unsafe_arena_release_opname() {
  // @@protoc_insertion_point(field_release:Proto.AfbParam.opName)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::wstring* temp = opname_;
  opname_ = nullptr;
  return temp;
}
inline ::Proto::wstring* AfbParam::_internal_mutable_opname() {
  _has_bits_[0] |= 0x00000040u;
  if (opname_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    opname_ = p;
  }
  return opname_;
}
inline ::Proto::wstring* AfbParam::mutable_opname() {
  // @@protoc_insertion_point(field_mutable:Proto.AfbParam.opName)
  return _internal_mutable_opname();
}
inline void AfbParam::set_allocated_opname(::Proto::wstring* opname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete opname_;
  }
  if (opname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(opname);
    if (message_arena != submessage_arena) {
      opname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opname, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  opname_ = opname;
  // @@protoc_insertion_point(field_set_allocated:Proto.AfbParam.opName)
}

// optional .Proto.FblSignalType type = 18;
inline bool AfbParam::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AfbParam::has_type() const {
  return _internal_has_type();
}
inline void AfbParam::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::Proto::FblSignalType AfbParam::_internal_type() const {
  return static_cast< ::Proto::FblSignalType >(type_);
}
inline ::Proto::FblSignalType AfbParam::type() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.type)
  return _internal_type();
}
inline void AfbParam::_internal_set_type(::Proto::FblSignalType value) {
  assert(::Proto::FblSignalType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  type_ = value;
}
inline void AfbParam::set_type(::Proto::FblSignalType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.type)
}

// optional .Proto.FblDataFormat dataFormat = 19;
inline bool AfbParam::_internal_has_dataformat() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AfbParam::has_dataformat() const {
  return _internal_has_dataformat();
}
inline void AfbParam::clear_dataformat() {
  dataformat_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::Proto::FblDataFormat AfbParam::_internal_dataformat() const {
  return static_cast< ::Proto::FblDataFormat >(dataformat_);
}
inline ::Proto::FblDataFormat AfbParam::dataformat() const {
  // @@protoc_insertion_point(field_get:Proto.AfbParam.dataFormat)
  return _internal_dataformat();
}
inline void AfbParam::_internal_set_dataformat(::Proto::FblDataFormat value) {
  assert(::Proto::FblDataFormat_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  dataformat_ = value;
}
inline void AfbParam::set_dataformat(::Proto::FblDataFormat value) {
  _internal_set_dataformat(value);
  // @@protoc_insertion_point(field_set:Proto.AfbParam.dataFormat)
}

// -------------------------------------------------------------------

// Schema

// required .Proto.Uuid uuid = 1;
inline bool Schema::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool Schema::has_uuid() const {
  return _internal_has_uuid();
}
inline void Schema::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::Uuid& Schema::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& Schema::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.uuid)
  return _internal_uuid();
}
inline void Schema::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Schema.uuid)
}
inline ::Proto::Uuid* Schema::release_uuid() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* Schema::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.Schema.uuid)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* Schema::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000020u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* Schema::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.uuid)
  return _internal_mutable_uuid();
}
inline void Schema::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.uuid)
}

// required .Proto.wstring schemaID = 2;
inline bool Schema::_internal_has_schemaid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || schemaid_ != nullptr);
  return value;
}
inline bool Schema::has_schemaid() const {
  return _internal_has_schemaid();
}
inline void Schema::clear_schemaid() {
  if (schemaid_ != nullptr) schemaid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::wstring& Schema::_internal_schemaid() const {
  const ::Proto::wstring* p = schemaid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& Schema::schemaid() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.schemaID)
  return _internal_schemaid();
}
inline void Schema::unsafe_arena_set_allocated_schemaid(
    ::Proto::wstring* schemaid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schemaid_);
  }
  schemaid_ = schemaid;
  if (schemaid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Schema.schemaID)
}
inline ::Proto::wstring* Schema::release_schemaid() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::wstring* temp = schemaid_;
  schemaid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* Schema::unsafe_arena_release_schemaid() {
  // @@protoc_insertion_point(field_release:Proto.Schema.schemaID)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::wstring* temp = schemaid_;
  schemaid_ = nullptr;
  return temp;
}
inline ::Proto::wstring* Schema::_internal_mutable_schemaid() {
  _has_bits_[0] |= 0x00000040u;
  if (schemaid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    schemaid_ = p;
  }
  return schemaid_;
}
inline ::Proto::wstring* Schema::mutable_schemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.schemaID)
  return _internal_mutable_schemaid();
}
inline void Schema::set_allocated_schemaid(::Proto::wstring* schemaid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schemaid_;
  }
  if (schemaid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schemaid);
    if (message_arena != submessage_arena) {
      schemaid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schemaid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  schemaid_ = schemaid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.schemaID)
}

// required .Proto.wstring caption = 3;
inline bool Schema::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || caption_ != nullptr);
  return value;
}
inline bool Schema::has_caption() const {
  return _internal_has_caption();
}
inline void Schema::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Proto::wstring& Schema::_internal_caption() const {
  const ::Proto::wstring* p = caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& Schema::caption() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.caption)
  return _internal_caption();
}
inline void Schema::unsafe_arena_set_allocated_caption(
    ::Proto::wstring* caption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_);
  }
  caption_ = caption;
  if (caption) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Schema.caption)
}
inline ::Proto::wstring* Schema::release_caption() {
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* Schema::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:Proto.Schema.caption)
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  return temp;
}
inline ::Proto::wstring* Schema::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000080u;
  if (caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    caption_ = p;
  }
  return caption_;
}
inline ::Proto::wstring* Schema::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.caption)
  return _internal_mutable_caption();
}
inline void Schema::set_allocated_caption(::Proto::wstring* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.caption)
}

// required double width = 4;
inline bool Schema::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Schema::has_width() const {
  return _internal_has_width();
}
inline void Schema::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Schema::_internal_width() const {
  return width_;
}
inline double Schema::width() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.width)
  return _internal_width();
}
inline void Schema::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000800u;
  width_ = value;
}
inline void Schema::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.width)
}

// required double height = 5;
inline bool Schema::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Schema::has_height() const {
  return _internal_has_height();
}
inline void Schema::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Schema::_internal_height() const {
  return height_;
}
inline double Schema::height() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.height)
  return _internal_height();
}
inline void Schema::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00001000u;
  height_ = value;
}
inline void Schema::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.height)
}

// required .Proto.SchemaUnit unit = 6;
inline bool Schema::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Schema::has_unit() const {
  return _internal_has_unit();
}
inline void Schema::clear_unit() {
  unit_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::Proto::SchemaUnit Schema::_internal_unit() const {
  return static_cast< ::Proto::SchemaUnit >(unit_);
}
inline ::Proto::SchemaUnit Schema::unit() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.unit)
  return _internal_unit();
}
inline void Schema::_internal_set_unit(::Proto::SchemaUnit value) {
  assert(::Proto::SchemaUnit_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  unit_ = value;
}
inline void Schema::set_unit(::Proto::SchemaUnit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.unit)
}

// optional bool excludeFromBuild = 7 [default = false];
inline bool Schema::_internal_has_excludefrombuild() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Schema::has_excludefrombuild() const {
  return _internal_has_excludefrombuild();
}
inline void Schema::clear_excludefrombuild() {
  excludefrombuild_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Schema::_internal_excludefrombuild() const {
  return excludefrombuild_;
}
inline bool Schema::excludefrombuild() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.excludeFromBuild)
  return _internal_excludefrombuild();
}
inline void Schema::_internal_set_excludefrombuild(bool value) {
  _has_bits_[0] |= 0x00008000u;
  excludefrombuild_ = value;
}
inline void Schema::set_excludefrombuild(bool value) {
  _internal_set_excludefrombuild(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.excludeFromBuild)
}

// optional uint32 backgroundColor = 8;
inline bool Schema::_internal_has_backgroundcolor() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Schema::has_backgroundcolor() const {
  return _internal_has_backgroundcolor();
}
inline void Schema::clear_backgroundcolor() {
  backgroundcolor_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Schema::_internal_backgroundcolor() const {
  return backgroundcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Schema::backgroundcolor() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.backgroundColor)
  return _internal_backgroundcolor();
}
inline void Schema::_internal_set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  backgroundcolor_ = value;
}
inline void Schema::set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_backgroundcolor(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.backgroundColor)
}

// optional string tags = 9;
inline bool Schema::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Schema::has_tags() const {
  return _internal_has_tags();
}
inline void Schema::clear_tags() {
  tags_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Schema::tags() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.tags)
  return _internal_tags();
}
inline void Schema::set_tags(const std::string& value) {
  _internal_set_tags(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.tags)
}
inline std::string* Schema::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.tags)
  return _internal_mutable_tags();
}
inline const std::string& Schema::_internal_tags() const {
  return tags_.Get();
}
inline void Schema::_internal_set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Schema::set_tags(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tags_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Schema.tags)
}
inline void Schema::set_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Schema.tags)
}
inline void Schema::set_tags(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Schema.tags)
}
inline std::string* Schema::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000001u;
  return tags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Schema::release_tags() {
  // @@protoc_insertion_point(field_release:Proto.Schema.tags)
  if (!_internal_has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tags_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.tags)
}

// optional bool joinHorzPriority = 31 [default = false];
inline bool Schema::_internal_has_joinhorzpriority() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Schema::has_joinhorzpriority() const {
  return _internal_has_joinhorzpriority();
}
inline void Schema::clear_joinhorzpriority() {
  joinhorzpriority_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Schema::_internal_joinhorzpriority() const {
  return joinhorzpriority_;
}
inline bool Schema::joinhorzpriority() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.joinHorzPriority)
  return _internal_joinhorzpriority();
}
inline void Schema::_internal_set_joinhorzpriority(bool value) {
  _has_bits_[0] |= 0x00010000u;
  joinhorzpriority_ = value;
}
inline void Schema::set_joinhorzpriority(bool value) {
  _internal_set_joinhorzpriority(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.joinHorzPriority)
}

// optional string joinLeftSchemaId = 32;
inline bool Schema::_internal_has_joinleftschemaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Schema::has_joinleftschemaid() const {
  return _internal_has_joinleftschemaid();
}
inline void Schema::clear_joinleftschemaid() {
  joinleftschemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Schema::joinleftschemaid() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.joinLeftSchemaId)
  return _internal_joinleftschemaid();
}
inline void Schema::set_joinleftschemaid(const std::string& value) {
  _internal_set_joinleftschemaid(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.joinLeftSchemaId)
}
inline std::string* Schema::mutable_joinleftschemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.joinLeftSchemaId)
  return _internal_mutable_joinleftschemaid();
}
inline const std::string& Schema::_internal_joinleftschemaid() const {
  return joinleftschemaid_.Get();
}
inline void Schema::_internal_set_joinleftschemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  joinleftschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Schema::set_joinleftschemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  joinleftschemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Schema.joinLeftSchemaId)
}
inline void Schema::set_joinleftschemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  joinleftschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Schema.joinLeftSchemaId)
}
inline void Schema::set_joinleftschemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  joinleftschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Schema.joinLeftSchemaId)
}
inline std::string* Schema::_internal_mutable_joinleftschemaid() {
  _has_bits_[0] |= 0x00000002u;
  return joinleftschemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Schema::release_joinleftschemaid() {
  // @@protoc_insertion_point(field_release:Proto.Schema.joinLeftSchemaId)
  if (!_internal_has_joinleftschemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return joinleftschemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_joinleftschemaid(std::string* joinleftschemaid) {
  if (joinleftschemaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  joinleftschemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), joinleftschemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.joinLeftSchemaId)
}

// optional string joinTopSchemaId = 33;
inline bool Schema::_internal_has_jointopschemaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Schema::has_jointopschemaid() const {
  return _internal_has_jointopschemaid();
}
inline void Schema::clear_jointopschemaid() {
  jointopschemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Schema::jointopschemaid() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.joinTopSchemaId)
  return _internal_jointopschemaid();
}
inline void Schema::set_jointopschemaid(const std::string& value) {
  _internal_set_jointopschemaid(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.joinTopSchemaId)
}
inline std::string* Schema::mutable_jointopschemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.joinTopSchemaId)
  return _internal_mutable_jointopschemaid();
}
inline const std::string& Schema::_internal_jointopschemaid() const {
  return jointopschemaid_.Get();
}
inline void Schema::_internal_set_jointopschemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  jointopschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Schema::set_jointopschemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  jointopschemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Schema.joinTopSchemaId)
}
inline void Schema::set_jointopschemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  jointopschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Schema.joinTopSchemaId)
}
inline void Schema::set_jointopschemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  jointopschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Schema.joinTopSchemaId)
}
inline std::string* Schema::_internal_mutable_jointopschemaid() {
  _has_bits_[0] |= 0x00000004u;
  return jointopschemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Schema::release_jointopschemaid() {
  // @@protoc_insertion_point(field_release:Proto.Schema.joinTopSchemaId)
  if (!_internal_has_jointopschemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return jointopschemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_jointopschemaid(std::string* jointopschemaid) {
  if (jointopschemaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  jointopschemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jointopschemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.joinTopSchemaId)
}

// optional string joinRightSchemaId = 34;
inline bool Schema::_internal_has_joinrightschemaid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Schema::has_joinrightschemaid() const {
  return _internal_has_joinrightschemaid();
}
inline void Schema::clear_joinrightschemaid() {
  joinrightschemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Schema::joinrightschemaid() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.joinRightSchemaId)
  return _internal_joinrightschemaid();
}
inline void Schema::set_joinrightschemaid(const std::string& value) {
  _internal_set_joinrightschemaid(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.joinRightSchemaId)
}
inline std::string* Schema::mutable_joinrightschemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.joinRightSchemaId)
  return _internal_mutable_joinrightschemaid();
}
inline const std::string& Schema::_internal_joinrightschemaid() const {
  return joinrightschemaid_.Get();
}
inline void Schema::_internal_set_joinrightschemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  joinrightschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Schema::set_joinrightschemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  joinrightschemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Schema.joinRightSchemaId)
}
inline void Schema::set_joinrightschemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  joinrightschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Schema.joinRightSchemaId)
}
inline void Schema::set_joinrightschemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  joinrightschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Schema.joinRightSchemaId)
}
inline std::string* Schema::_internal_mutable_joinrightschemaid() {
  _has_bits_[0] |= 0x00000008u;
  return joinrightschemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Schema::release_joinrightschemaid() {
  // @@protoc_insertion_point(field_release:Proto.Schema.joinRightSchemaId)
  if (!_internal_has_joinrightschemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return joinrightschemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_joinrightschemaid(std::string* joinrightschemaid) {
  if (joinrightschemaid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  joinrightschemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), joinrightschemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.joinRightSchemaId)
}

// optional string joinBottomSchemaId = 35;
inline bool Schema::_internal_has_joinbottomschemaid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Schema::has_joinbottomschemaid() const {
  return _internal_has_joinbottomschemaid();
}
inline void Schema::clear_joinbottomschemaid() {
  joinbottomschemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Schema::joinbottomschemaid() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.joinBottomSchemaId)
  return _internal_joinbottomschemaid();
}
inline void Schema::set_joinbottomschemaid(const std::string& value) {
  _internal_set_joinbottomschemaid(value);
  // @@protoc_insertion_point(field_set:Proto.Schema.joinBottomSchemaId)
}
inline std::string* Schema::mutable_joinbottomschemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.joinBottomSchemaId)
  return _internal_mutable_joinbottomschemaid();
}
inline const std::string& Schema::_internal_joinbottomschemaid() const {
  return joinbottomschemaid_.Get();
}
inline void Schema::_internal_set_joinbottomschemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  joinbottomschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Schema::set_joinbottomschemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  joinbottomschemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Schema.joinBottomSchemaId)
}
inline void Schema::set_joinbottomschemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  joinbottomschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Schema.joinBottomSchemaId)
}
inline void Schema::set_joinbottomschemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  joinbottomschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Schema.joinBottomSchemaId)
}
inline std::string* Schema::_internal_mutable_joinbottomschemaid() {
  _has_bits_[0] |= 0x00000010u;
  return joinbottomschemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Schema::release_joinbottomschemaid() {
  // @@protoc_insertion_point(field_release:Proto.Schema.joinBottomSchemaId)
  if (!_internal_has_joinbottomschemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return joinbottomschemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_joinbottomschemaid(std::string* joinbottomschemaid) {
  if (joinbottomschemaid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  joinbottomschemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), joinbottomschemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.joinBottomSchemaId)
}

// repeated .Proto.Envelope layers = 100;
inline int Schema::_internal_layers_size() const {
  return layers_.size();
}
inline int Schema::layers_size() const {
  return _internal_layers_size();
}
inline void Schema::clear_layers() {
  layers_.Clear();
}
inline ::Proto::Envelope* Schema::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
Schema::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Schema.layers)
  return &layers_;
}
inline const ::Proto::Envelope& Schema::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::Proto::Envelope& Schema::layers(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Schema.layers)
  return _internal_layers(index);
}
inline ::Proto::Envelope* Schema::_internal_add_layers() {
  return layers_.Add();
}
inline ::Proto::Envelope* Schema::add_layers() {
  // @@protoc_insertion_point(field_add:Proto.Schema.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
Schema::layers() const {
  // @@protoc_insertion_point(field_list:Proto.Schema.layers)
  return layers_;
}

// required .Proto.AfbElementCollection afbs = 101;
inline bool Schema::_internal_has_afbs() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || afbs_ != nullptr);
  return value;
}
inline bool Schema::has_afbs() const {
  return _internal_has_afbs();
}
inline void Schema::clear_afbs() {
  if (afbs_ != nullptr) afbs_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::Proto::AfbElementCollection& Schema::_internal_afbs() const {
  const ::Proto::AfbElementCollection* p = afbs_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::AfbElementCollection&>(
      ::Proto::_AfbElementCollection_default_instance_);
}
inline const ::Proto::AfbElementCollection& Schema::afbs() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.afbs)
  return _internal_afbs();
}
inline void Schema::unsafe_arena_set_allocated_afbs(
    ::Proto::AfbElementCollection* afbs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(afbs_);
  }
  afbs_ = afbs;
  if (afbs) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Schema.afbs)
}
inline ::Proto::AfbElementCollection* Schema::release_afbs() {
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::AfbElementCollection* temp = afbs_;
  afbs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::AfbElementCollection* Schema::unsafe_arena_release_afbs() {
  // @@protoc_insertion_point(field_release:Proto.Schema.afbs)
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::AfbElementCollection* temp = afbs_;
  afbs_ = nullptr;
  return temp;
}
inline ::Proto::AfbElementCollection* Schema::_internal_mutable_afbs() {
  _has_bits_[0] |= 0x00000100u;
  if (afbs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::AfbElementCollection>(GetArena());
    afbs_ = p;
  }
  return afbs_;
}
inline ::Proto::AfbElementCollection* Schema::mutable_afbs() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.afbs)
  return _internal_mutable_afbs();
}
inline void Schema::set_allocated_afbs(::Proto::AfbElementCollection* afbs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete afbs_;
  }
  if (afbs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(afbs);
    if (message_arena != submessage_arena) {
      afbs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, afbs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  afbs_ = afbs;
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.afbs)
}

// optional .Proto.LogicSchema logic_schema = 200;
inline bool Schema::_internal_has_logic_schema() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || logic_schema_ != nullptr);
  return value;
}
inline bool Schema::has_logic_schema() const {
  return _internal_has_logic_schema();
}
inline void Schema::clear_logic_schema() {
  if (logic_schema_ != nullptr) logic_schema_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::Proto::LogicSchema& Schema::_internal_logic_schema() const {
  const ::Proto::LogicSchema* p = logic_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::LogicSchema&>(
      ::Proto::_LogicSchema_default_instance_);
}
inline const ::Proto::LogicSchema& Schema::logic_schema() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.logic_schema)
  return _internal_logic_schema();
}
inline void Schema::unsafe_arena_set_allocated_logic_schema(
    ::Proto::LogicSchema* logic_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logic_schema_);
  }
  logic_schema_ = logic_schema;
  if (logic_schema) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Schema.logic_schema)
}
inline ::Proto::LogicSchema* Schema::release_logic_schema() {
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::LogicSchema* temp = logic_schema_;
  logic_schema_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::LogicSchema* Schema::unsafe_arena_release_logic_schema() {
  // @@protoc_insertion_point(field_release:Proto.Schema.logic_schema)
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::LogicSchema* temp = logic_schema_;
  logic_schema_ = nullptr;
  return temp;
}
inline ::Proto::LogicSchema* Schema::_internal_mutable_logic_schema() {
  _has_bits_[0] |= 0x00000200u;
  if (logic_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LogicSchema>(GetArena());
    logic_schema_ = p;
  }
  return logic_schema_;
}
inline ::Proto::LogicSchema* Schema::mutable_logic_schema() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.logic_schema)
  return _internal_mutable_logic_schema();
}
inline void Schema::set_allocated_logic_schema(::Proto::LogicSchema* logic_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logic_schema_;
  }
  if (logic_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logic_schema);
    if (message_arena != submessage_arena) {
      logic_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logic_schema, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  logic_schema_ = logic_schema;
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.logic_schema)
}

// optional .Proto.UfbSchema ufb_schema = 201;
inline bool Schema::_internal_has_ufb_schema() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || ufb_schema_ != nullptr);
  return value;
}
inline bool Schema::has_ufb_schema() const {
  return _internal_has_ufb_schema();
}
inline void Schema::clear_ufb_schema() {
  if (ufb_schema_ != nullptr) ufb_schema_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::Proto::UfbSchema& Schema::_internal_ufb_schema() const {
  const ::Proto::UfbSchema* p = ufb_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::UfbSchema&>(
      ::Proto::_UfbSchema_default_instance_);
}
inline const ::Proto::UfbSchema& Schema::ufb_schema() const {
  // @@protoc_insertion_point(field_get:Proto.Schema.ufb_schema)
  return _internal_ufb_schema();
}
inline void Schema::unsafe_arena_set_allocated_ufb_schema(
    ::Proto::UfbSchema* ufb_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ufb_schema_);
  }
  ufb_schema_ = ufb_schema;
  if (ufb_schema) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Schema.ufb_schema)
}
inline ::Proto::UfbSchema* Schema::release_ufb_schema() {
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::UfbSchema* temp = ufb_schema_;
  ufb_schema_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::UfbSchema* Schema::unsafe_arena_release_ufb_schema() {
  // @@protoc_insertion_point(field_release:Proto.Schema.ufb_schema)
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::UfbSchema* temp = ufb_schema_;
  ufb_schema_ = nullptr;
  return temp;
}
inline ::Proto::UfbSchema* Schema::_internal_mutable_ufb_schema() {
  _has_bits_[0] |= 0x00000400u;
  if (ufb_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::UfbSchema>(GetArena());
    ufb_schema_ = p;
  }
  return ufb_schema_;
}
inline ::Proto::UfbSchema* Schema::mutable_ufb_schema() {
  // @@protoc_insertion_point(field_mutable:Proto.Schema.ufb_schema)
  return _internal_mutable_ufb_schema();
}
inline void Schema::set_allocated_ufb_schema(::Proto::UfbSchema* ufb_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ufb_schema_;
  }
  if (ufb_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ufb_schema);
    if (message_arena != submessage_arena) {
      ufb_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ufb_schema, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ufb_schema_ = ufb_schema;
  // @@protoc_insertion_point(field_set_allocated:Proto.Schema.ufb_schema)
}

// -------------------------------------------------------------------

// LogicSchema

// repeated .Proto.wstring equipmentids = 1;
inline int LogicSchema::_internal_equipmentids_size() const {
  return equipmentids_.size();
}
inline int LogicSchema::equipmentids_size() const {
  return _internal_equipmentids_size();
}
inline void LogicSchema::clear_equipmentids() {
  equipmentids_.Clear();
}
inline ::Proto::wstring* LogicSchema::mutable_equipmentids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.LogicSchema.equipmentids)
  return equipmentids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >*
LogicSchema::mutable_equipmentids() {
  // @@protoc_insertion_point(field_mutable_list:Proto.LogicSchema.equipmentids)
  return &equipmentids_;
}
inline const ::Proto::wstring& LogicSchema::_internal_equipmentids(int index) const {
  return equipmentids_.Get(index);
}
inline const ::Proto::wstring& LogicSchema::equipmentids(int index) const {
  // @@protoc_insertion_point(field_get:Proto.LogicSchema.equipmentids)
  return _internal_equipmentids(index);
}
inline ::Proto::wstring* LogicSchema::_internal_add_equipmentids() {
  return equipmentids_.Add();
}
inline ::Proto::wstring* LogicSchema::add_equipmentids() {
  // @@protoc_insertion_point(field_add:Proto.LogicSchema.equipmentids)
  return _internal_add_equipmentids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >&
LogicSchema::equipmentids() const {
  // @@protoc_insertion_point(field_list:Proto.LogicSchema.equipmentids)
  return equipmentids_;
}

// optional int32 counter = 2 [default = 0];
inline bool LogicSchema::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogicSchema::has_counter() const {
  return _internal_has_counter();
}
inline void LogicSchema::clear_counter() {
  counter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogicSchema::_internal_counter() const {
  return counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogicSchema::counter() const {
  // @@protoc_insertion_point(field_get:Proto.LogicSchema.counter)
  return _internal_counter();
}
inline void LogicSchema::_internal_set_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  counter_ = value;
}
inline void LogicSchema::set_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:Proto.LogicSchema.counter)
}

// optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
inline bool LogicSchema::_internal_has_lmdescriptionfile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogicSchema::has_lmdescriptionfile() const {
  return _internal_has_lmdescriptionfile();
}
inline void LogicSchema::clear_lmdescriptionfile() {
  lmdescriptionfile_.ClearToDefault(::Proto::LogicSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogicSchema::lmdescriptionfile() const {
  // @@protoc_insertion_point(field_get:Proto.LogicSchema.lmDescriptionFile)
  if (lmdescriptionfile_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_lmdescriptionfile_.get();
  return _internal_lmdescriptionfile();
}
inline void LogicSchema::set_lmdescriptionfile(const std::string& value) {
  _internal_set_lmdescriptionfile(value);
  // @@protoc_insertion_point(field_set:Proto.LogicSchema.lmDescriptionFile)
}
inline std::string* LogicSchema::mutable_lmdescriptionfile() {
  // @@protoc_insertion_point(field_mutable:Proto.LogicSchema.lmDescriptionFile)
  return _internal_mutable_lmdescriptionfile();
}
inline const std::string& LogicSchema::_internal_lmdescriptionfile() const {
  return lmdescriptionfile_.Get();
}
inline void LogicSchema::_internal_set_lmdescriptionfile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void LogicSchema::set_lmdescriptionfile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lmdescriptionfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.LogicSchema.lmDescriptionFile)
}
inline void LogicSchema::set_lmdescriptionfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.LogicSchema.lmDescriptionFile)
}
inline void LogicSchema::set_lmdescriptionfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.LogicSchema.lmDescriptionFile)
}
inline std::string* LogicSchema::_internal_mutable_lmdescriptionfile() {
  _has_bits_[0] |= 0x00000001u;
  return lmdescriptionfile_.Mutable(::Proto::LogicSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_, GetArena());
}
inline std::string* LogicSchema::release_lmdescriptionfile() {
  // @@protoc_insertion_point(field_release:Proto.LogicSchema.lmDescriptionFile)
  if (!_internal_has_lmdescriptionfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lmdescriptionfile_.ReleaseNonDefault(nullptr, GetArena());
}
inline void LogicSchema::set_allocated_lmdescriptionfile(std::string* lmdescriptionfile) {
  if (lmdescriptionfile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lmdescriptionfile_.SetAllocated(nullptr, lmdescriptionfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.LogicSchema.lmDescriptionFile)
}

// -------------------------------------------------------------------

// UfbSchema

// optional string description = 1;
inline bool UfbSchema::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UfbSchema::has_description() const {
  return _internal_has_description();
}
inline void UfbSchema::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UfbSchema::description() const {
  // @@protoc_insertion_point(field_get:Proto.UfbSchema.description)
  return _internal_description();
}
inline void UfbSchema::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:Proto.UfbSchema.description)
}
inline std::string* UfbSchema::mutable_description() {
  // @@protoc_insertion_point(field_mutable:Proto.UfbSchema.description)
  return _internal_mutable_description();
}
inline const std::string& UfbSchema::_internal_description() const {
  return description_.Get();
}
inline void UfbSchema::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UfbSchema::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.UfbSchema.description)
}
inline void UfbSchema::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.UfbSchema.description)
}
inline void UfbSchema::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.UfbSchema.description)
}
inline std::string* UfbSchema::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UfbSchema::release_description() {
  // @@protoc_insertion_point(field_release:Proto.UfbSchema.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UfbSchema::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.UfbSchema.description)
}

// optional int32 version = 2 [default = 1];
inline bool UfbSchema::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UfbSchema::has_version() const {
  return _internal_has_version();
}
inline void UfbSchema::clear_version() {
  version_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UfbSchema::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UfbSchema::version() const {
  // @@protoc_insertion_point(field_get:Proto.UfbSchema.version)
  return _internal_version();
}
inline void UfbSchema::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void UfbSchema::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Proto.UfbSchema.version)
}

// optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
inline bool UfbSchema::_internal_has_lmdescriptionfile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UfbSchema::has_lmdescriptionfile() const {
  return _internal_has_lmdescriptionfile();
}
inline void UfbSchema::clear_lmdescriptionfile() {
  lmdescriptionfile_.ClearToDefault(::Proto::UfbSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_, GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UfbSchema::lmdescriptionfile() const {
  // @@protoc_insertion_point(field_get:Proto.UfbSchema.lmDescriptionFile)
  if (lmdescriptionfile_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_lmdescriptionfile_.get();
  return _internal_lmdescriptionfile();
}
inline void UfbSchema::set_lmdescriptionfile(const std::string& value) {
  _internal_set_lmdescriptionfile(value);
  // @@protoc_insertion_point(field_set:Proto.UfbSchema.lmDescriptionFile)
}
inline std::string* UfbSchema::mutable_lmdescriptionfile() {
  // @@protoc_insertion_point(field_mutable:Proto.UfbSchema.lmDescriptionFile)
  return _internal_mutable_lmdescriptionfile();
}
inline const std::string& UfbSchema::_internal_lmdescriptionfile() const {
  return lmdescriptionfile_.Get();
}
inline void UfbSchema::_internal_set_lmdescriptionfile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void UfbSchema::set_lmdescriptionfile(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lmdescriptionfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.UfbSchema.lmDescriptionFile)
}
inline void UfbSchema::set_lmdescriptionfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.UfbSchema.lmDescriptionFile)
}
inline void UfbSchema::set_lmdescriptionfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.UfbSchema.lmDescriptionFile)
}
inline std::string* UfbSchema::_internal_mutable_lmdescriptionfile() {
  _has_bits_[0] |= 0x00000002u;
  return lmdescriptionfile_.Mutable(::Proto::UfbSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_, GetArena());
}
inline std::string* UfbSchema::release_lmdescriptionfile() {
  // @@protoc_insertion_point(field_release:Proto.UfbSchema.lmDescriptionFile)
  if (!_internal_has_lmdescriptionfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lmdescriptionfile_.ReleaseNonDefault(nullptr, GetArena());
}
inline void UfbSchema::set_allocated_lmdescriptionfile(std::string* lmdescriptionfile) {
  if (lmdescriptionfile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lmdescriptionfile_.SetAllocated(nullptr, lmdescriptionfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.UfbSchema.lmDescriptionFile)
}

// -------------------------------------------------------------------

// SchemaLayer

// required .Proto.Uuid uuid = 1;
inline bool SchemaLayer::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool SchemaLayer::has_uuid() const {
  return _internal_has_uuid();
}
inline void SchemaLayer::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::Uuid& SchemaLayer::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& SchemaLayer::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaLayer.uuid)
  return _internal_uuid();
}
inline void SchemaLayer::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaLayer.uuid)
}
inline ::Proto::Uuid* SchemaLayer::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* SchemaLayer::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaLayer.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* SchemaLayer::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* SchemaLayer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaLayer.uuid)
  return _internal_mutable_uuid();
}
inline void SchemaLayer::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaLayer.uuid)
}

// required .Proto.wstring name = 2;
inline bool SchemaLayer::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool SchemaLayer::has_name() const {
  return _internal_has_name();
}
inline void SchemaLayer::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& SchemaLayer::_internal_name() const {
  const ::Proto::wstring* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& SchemaLayer::name() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaLayer.name)
  return _internal_name();
}
inline void SchemaLayer::unsafe_arena_set_allocated_name(
    ::Proto::wstring* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaLayer.name)
}
inline ::Proto::wstring* SchemaLayer::release_name() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* SchemaLayer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:Proto.SchemaLayer.name)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::Proto::wstring* SchemaLayer::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::Proto::wstring* SchemaLayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaLayer.name)
  return _internal_mutable_name();
}
inline void SchemaLayer::set_allocated_name(::Proto::wstring* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaLayer.name)
}

// required bool compile = 3;
inline bool SchemaLayer::_internal_has_compile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaLayer::has_compile() const {
  return _internal_has_compile();
}
inline void SchemaLayer::clear_compile() {
  compile_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SchemaLayer::_internal_compile() const {
  return compile_;
}
inline bool SchemaLayer::compile() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaLayer.compile)
  return _internal_compile();
}
inline void SchemaLayer::_internal_set_compile(bool value) {
  _has_bits_[0] |= 0x00000004u;
  compile_ = value;
}
inline void SchemaLayer::set_compile(bool value) {
  _internal_set_compile(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaLayer.compile)
}

// required bool show = 4;
inline bool SchemaLayer::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaLayer::has_show() const {
  return _internal_has_show();
}
inline void SchemaLayer::clear_show() {
  show_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SchemaLayer::_internal_show() const {
  return show_;
}
inline bool SchemaLayer::show() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaLayer.show)
  return _internal_show();
}
inline void SchemaLayer::_internal_set_show(bool value) {
  _has_bits_[0] |= 0x00000008u;
  show_ = value;
}
inline void SchemaLayer::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaLayer.show)
}

// required bool print = 5;
inline bool SchemaLayer::_internal_has_print() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaLayer::has_print() const {
  return _internal_has_print();
}
inline void SchemaLayer::clear_print() {
  print_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SchemaLayer::_internal_print() const {
  return print_;
}
inline bool SchemaLayer::print() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaLayer.print)
  return _internal_print();
}
inline void SchemaLayer::_internal_set_print(bool value) {
  _has_bits_[0] |= 0x00000010u;
  print_ = value;
}
inline void SchemaLayer::set_print(bool value) {
  _internal_set_print(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaLayer.print)
}

// repeated .Proto.Envelope items = 15;
inline int SchemaLayer::_internal_items_size() const {
  return items_.size();
}
inline int SchemaLayer::items_size() const {
  return _internal_items_size();
}
inline void SchemaLayer::clear_items() {
  items_.Clear();
}
inline ::Proto::Envelope* SchemaLayer::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaLayer.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
SchemaLayer::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaLayer.items)
  return &items_;
}
inline const ::Proto::Envelope& SchemaLayer::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Proto::Envelope& SchemaLayer::items(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaLayer.items)
  return _internal_items(index);
}
inline ::Proto::Envelope* SchemaLayer::_internal_add_items() {
  return items_.Add();
}
inline ::Proto::Envelope* SchemaLayer::add_items() {
  // @@protoc_insertion_point(field_add:Proto.SchemaLayer.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
SchemaLayer::items() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaLayer.items)
  return items_;
}

// -------------------------------------------------------------------

// SchemaItem

// required .Proto.Uuid uuid = 1;
inline bool SchemaItem::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool SchemaItem::has_uuid() const {
  return _internal_has_uuid();
}
inline void SchemaItem::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::Uuid& SchemaItem::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& SchemaItem::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.uuid)
  return _internal_uuid();
}
inline void SchemaItem::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.uuid)
}
inline ::Proto::Uuid* SchemaItem::release_uuid() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* SchemaItem::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.uuid)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* SchemaItem::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000010u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* SchemaItem::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.uuid)
  return _internal_mutable_uuid();
}
inline void SchemaItem::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.uuid)
}

// required bool isStatic = 2;
inline bool SchemaItem::_internal_has_isstatic() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SchemaItem::has_isstatic() const {
  return _internal_has_isstatic();
}
inline void SchemaItem::clear_isstatic() {
  isstatic_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool SchemaItem::_internal_isstatic() const {
  return isstatic_;
}
inline bool SchemaItem::isstatic() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.isStatic)
  return _internal_isstatic();
}
inline void SchemaItem::_internal_set_isstatic(bool value) {
  _has_bits_[1] |= 0x00000200u;
  isstatic_ = value;
}
inline void SchemaItem::set_isstatic(bool value) {
  _internal_set_isstatic(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.isStatic)
}

// required bool isLocked = 3;
inline bool SchemaItem::_internal_has_islocked() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SchemaItem::has_islocked() const {
  return _internal_has_islocked();
}
inline void SchemaItem::clear_islocked() {
  islocked_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool SchemaItem::_internal_islocked() const {
  return islocked_;
}
inline bool SchemaItem::islocked() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.isLocked)
  return _internal_islocked();
}
inline void SchemaItem::_internal_set_islocked(bool value) {
  _has_bits_[1] |= 0x00000400u;
  islocked_ = value;
}
inline void SchemaItem::set_islocked(bool value) {
  _internal_set_islocked(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.isLocked)
}

// required .Proto.SchemaUnit itemUnit = 4;
inline bool SchemaItem::_internal_has_itemunit() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SchemaItem::has_itemunit() const {
  return _internal_has_itemunit();
}
inline void SchemaItem::clear_itemunit() {
  itemunit_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::Proto::SchemaUnit SchemaItem::_internal_itemunit() const {
  return static_cast< ::Proto::SchemaUnit >(itemunit_);
}
inline ::Proto::SchemaUnit SchemaItem::itemunit() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.itemUnit)
  return _internal_itemunit();
}
inline void SchemaItem::_internal_set_itemunit(::Proto::SchemaUnit value) {
  assert(::Proto::SchemaUnit_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  itemunit_ = value;
}
inline void SchemaItem::set_itemunit(::Proto::SchemaUnit value) {
  _internal_set_itemunit(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.itemUnit)
}

// optional bool acceptClick = 5 [default = false];
inline bool SchemaItem::_internal_has_acceptclick() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SchemaItem::has_acceptclick() const {
  return _internal_has_acceptclick();
}
inline void SchemaItem::clear_acceptclick() {
  acceptclick_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool SchemaItem::_internal_acceptclick() const {
  return acceptclick_;
}
inline bool SchemaItem::acceptclick() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.acceptClick)
  return _internal_acceptclick();
}
inline void SchemaItem::_internal_set_acceptclick(bool value) {
  _has_bits_[1] |= 0x00000800u;
  acceptclick_ = value;
}
inline void SchemaItem::set_acceptclick(bool value) {
  _internal_set_acceptclick(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.acceptClick)
}

// optional string clickScript = 7;
inline bool SchemaItem::_internal_has_clickscript() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItem::has_clickscript() const {
  return _internal_has_clickscript();
}
inline void SchemaItem::clear_clickscript() {
  clickscript_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItem::clickscript() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.clickScript)
  return _internal_clickscript();
}
inline void SchemaItem::set_clickscript(const std::string& value) {
  _internal_set_clickscript(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.clickScript)
}
inline std::string* SchemaItem::mutable_clickscript() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.clickScript)
  return _internal_mutable_clickscript();
}
inline const std::string& SchemaItem::_internal_clickscript() const {
  return clickscript_.Get();
}
inline void SchemaItem::_internal_set_clickscript(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clickscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItem::set_clickscript(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clickscript_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItem.clickScript)
}
inline void SchemaItem::set_clickscript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clickscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItem.clickScript)
}
inline void SchemaItem::set_clickscript(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clickscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItem.clickScript)
}
inline std::string* SchemaItem::_internal_mutable_clickscript() {
  _has_bits_[0] |= 0x00000001u;
  return clickscript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItem::release_clickscript() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.clickScript)
  if (!_internal_has_clickscript()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clickscript_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItem::set_allocated_clickscript(std::string* clickscript) {
  if (clickscript != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clickscript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clickscript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.clickScript)
}

// optional bool isCommented = 8 [default = false];
inline bool SchemaItem::_internal_has_iscommented() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SchemaItem::has_iscommented() const {
  return _internal_has_iscommented();
}
inline void SchemaItem::clear_iscommented() {
  iscommented_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool SchemaItem::_internal_iscommented() const {
  return iscommented_;
}
inline bool SchemaItem::iscommented() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.isCommented)
  return _internal_iscommented();
}
inline void SchemaItem::_internal_set_iscommented(bool value) {
  _has_bits_[1] |= 0x00001000u;
  iscommented_ = value;
}
inline void SchemaItem::set_iscommented(bool value) {
  _internal_set_iscommented(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.isCommented)
}

// optional string objectName = 9;
inline bool SchemaItem::_internal_has_objectname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItem::has_objectname() const {
  return _internal_has_objectname();
}
inline void SchemaItem::clear_objectname() {
  objectname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItem::objectname() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.objectName)
  return _internal_objectname();
}
inline void SchemaItem::set_objectname(const std::string& value) {
  _internal_set_objectname(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.objectName)
}
inline std::string* SchemaItem::mutable_objectname() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.objectName)
  return _internal_mutable_objectname();
}
inline const std::string& SchemaItem::_internal_objectname() const {
  return objectname_.Get();
}
inline void SchemaItem::_internal_set_objectname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  objectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItem::set_objectname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  objectname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItem.objectName)
}
inline void SchemaItem::set_objectname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  objectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItem.objectName)
}
inline void SchemaItem::set_objectname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  objectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItem.objectName)
}
inline std::string* SchemaItem::_internal_mutable_objectname() {
  _has_bits_[0] |= 0x00000002u;
  return objectname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItem::release_objectname() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.objectName)
  if (!_internal_has_objectname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return objectname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItem::set_allocated_objectname(std::string* objectname) {
  if (objectname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objectname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.objectName)
}

// optional string label = 14;
inline bool SchemaItem::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItem::has_label() const {
  return _internal_has_label();
}
inline void SchemaItem::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SchemaItem::label() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.label)
  return _internal_label();
}
inline void SchemaItem::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.label)
}
inline std::string* SchemaItem::mutable_label() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.label)
  return _internal_mutable_label();
}
inline const std::string& SchemaItem::_internal_label() const {
  return label_.Get();
}
inline void SchemaItem::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItem::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItem.label)
}
inline void SchemaItem::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItem.label)
}
inline void SchemaItem::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItem.label)
}
inline std::string* SchemaItem::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000004u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItem::release_label() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItem::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.label)
}

// optional int32 labelPos = 15 [default = 2];
inline bool SchemaItem::_internal_has_labelpos() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool SchemaItem::has_labelpos() const {
  return _internal_has_labelpos();
}
inline void SchemaItem::clear_labelpos() {
  labelpos_ = 2;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItem::_internal_labelpos() const {
  return labelpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItem::labelpos() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.labelPos)
  return _internal_labelpos();
}
inline void SchemaItem::_internal_set_labelpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  labelpos_ = value;
}
inline void SchemaItem::set_labelpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_labelpos(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.labelPos)
}

// optional string preDrawScript = 30;
inline bool SchemaItem::_internal_has_predrawscript() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItem::has_predrawscript() const {
  return _internal_has_predrawscript();
}
inline void SchemaItem::clear_predrawscript() {
  predrawscript_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SchemaItem::predrawscript() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.preDrawScript)
  return _internal_predrawscript();
}
inline void SchemaItem::set_predrawscript(const std::string& value) {
  _internal_set_predrawscript(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItem.preDrawScript)
}
inline std::string* SchemaItem::mutable_predrawscript() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.preDrawScript)
  return _internal_mutable_predrawscript();
}
inline const std::string& SchemaItem::_internal_predrawscript() const {
  return predrawscript_.Get();
}
inline void SchemaItem::_internal_set_predrawscript(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  predrawscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItem::set_predrawscript(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  predrawscript_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItem.preDrawScript)
}
inline void SchemaItem::set_predrawscript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  predrawscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItem.preDrawScript)
}
inline void SchemaItem::set_predrawscript(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  predrawscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItem.preDrawScript)
}
inline std::string* SchemaItem::_internal_mutable_predrawscript() {
  _has_bits_[0] |= 0x00000008u;
  return predrawscript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItem::release_predrawscript() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.preDrawScript)
  if (!_internal_has_predrawscript()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return predrawscript_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItem::set_allocated_predrawscript(std::string* predrawscript) {
  if (predrawscript != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  predrawscript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predrawscript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.preDrawScript)
}

// optional .Proto.PosRectImpl PosRectImpl = 10;
inline bool SchemaItem::_internal_has_posrectimpl() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || posrectimpl_ != nullptr);
  return value;
}
inline bool SchemaItem::has_posrectimpl() const {
  return _internal_has_posrectimpl();
}
inline void SchemaItem::clear_posrectimpl() {
  if (posrectimpl_ != nullptr) posrectimpl_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::PosRectImpl& SchemaItem::_internal_posrectimpl() const {
  const ::Proto::PosRectImpl* p = posrectimpl_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::PosRectImpl&>(
      ::Proto::_PosRectImpl_default_instance_);
}
inline const ::Proto::PosRectImpl& SchemaItem::posrectimpl() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.PosRectImpl)
  return _internal_posrectimpl();
}
inline void SchemaItem::unsafe_arena_set_allocated_posrectimpl(
    ::Proto::PosRectImpl* posrectimpl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posrectimpl_);
  }
  posrectimpl_ = posrectimpl;
  if (posrectimpl) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.PosRectImpl)
}
inline ::Proto::PosRectImpl* SchemaItem::release_posrectimpl() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::PosRectImpl* temp = posrectimpl_;
  posrectimpl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::PosRectImpl* SchemaItem::unsafe_arena_release_posrectimpl() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.PosRectImpl)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::PosRectImpl* temp = posrectimpl_;
  posrectimpl_ = nullptr;
  return temp;
}
inline ::Proto::PosRectImpl* SchemaItem::_internal_mutable_posrectimpl() {
  _has_bits_[0] |= 0x00000020u;
  if (posrectimpl_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PosRectImpl>(GetArena());
    posrectimpl_ = p;
  }
  return posrectimpl_;
}
inline ::Proto::PosRectImpl* SchemaItem::mutable_posrectimpl() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.PosRectImpl)
  return _internal_mutable_posrectimpl();
}
inline void SchemaItem::set_allocated_posrectimpl(::Proto::PosRectImpl* posrectimpl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete posrectimpl_;
  }
  if (posrectimpl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(posrectimpl);
    if (message_arena != submessage_arena) {
      posrectimpl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posrectimpl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  posrectimpl_ = posrectimpl;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.PosRectImpl)
}

// optional .Proto.PosLineImpl PosLineImpl = 11;
inline bool SchemaItem::_internal_has_poslineimpl() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || poslineimpl_ != nullptr);
  return value;
}
inline bool SchemaItem::has_poslineimpl() const {
  return _internal_has_poslineimpl();
}
inline void SchemaItem::clear_poslineimpl() {
  if (poslineimpl_ != nullptr) poslineimpl_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::PosLineImpl& SchemaItem::_internal_poslineimpl() const {
  const ::Proto::PosLineImpl* p = poslineimpl_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::PosLineImpl&>(
      ::Proto::_PosLineImpl_default_instance_);
}
inline const ::Proto::PosLineImpl& SchemaItem::poslineimpl() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.PosLineImpl)
  return _internal_poslineimpl();
}
inline void SchemaItem::unsafe_arena_set_allocated_poslineimpl(
    ::Proto::PosLineImpl* poslineimpl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(poslineimpl_);
  }
  poslineimpl_ = poslineimpl;
  if (poslineimpl) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.PosLineImpl)
}
inline ::Proto::PosLineImpl* SchemaItem::release_poslineimpl() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::PosLineImpl* temp = poslineimpl_;
  poslineimpl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::PosLineImpl* SchemaItem::unsafe_arena_release_poslineimpl() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.PosLineImpl)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::PosLineImpl* temp = poslineimpl_;
  poslineimpl_ = nullptr;
  return temp;
}
inline ::Proto::PosLineImpl* SchemaItem::_internal_mutable_poslineimpl() {
  _has_bits_[0] |= 0x00000040u;
  if (poslineimpl_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PosLineImpl>(GetArena());
    poslineimpl_ = p;
  }
  return poslineimpl_;
}
inline ::Proto::PosLineImpl* SchemaItem::mutable_poslineimpl() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.PosLineImpl)
  return _internal_mutable_poslineimpl();
}
inline void SchemaItem::set_allocated_poslineimpl(::Proto::PosLineImpl* poslineimpl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete poslineimpl_;
  }
  if (poslineimpl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(poslineimpl);
    if (message_arena != submessage_arena) {
      poslineimpl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poslineimpl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  poslineimpl_ = poslineimpl;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.PosLineImpl)
}

// optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
inline bool SchemaItem::_internal_has_posconnectionimpl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || posconnectionimpl_ != nullptr);
  return value;
}
inline bool SchemaItem::has_posconnectionimpl() const {
  return _internal_has_posconnectionimpl();
}
inline void SchemaItem::clear_posconnectionimpl() {
  if (posconnectionimpl_ != nullptr) posconnectionimpl_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Proto::PosConnectionImpl& SchemaItem::_internal_posconnectionimpl() const {
  const ::Proto::PosConnectionImpl* p = posconnectionimpl_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::PosConnectionImpl&>(
      ::Proto::_PosConnectionImpl_default_instance_);
}
inline const ::Proto::PosConnectionImpl& SchemaItem::posconnectionimpl() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.PosConnectionImpl)
  return _internal_posconnectionimpl();
}
inline void SchemaItem::unsafe_arena_set_allocated_posconnectionimpl(
    ::Proto::PosConnectionImpl* posconnectionimpl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posconnectionimpl_);
  }
  posconnectionimpl_ = posconnectionimpl;
  if (posconnectionimpl) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.PosConnectionImpl)
}
inline ::Proto::PosConnectionImpl* SchemaItem::release_posconnectionimpl() {
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::PosConnectionImpl* temp = posconnectionimpl_;
  posconnectionimpl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::PosConnectionImpl* SchemaItem::unsafe_arena_release_posconnectionimpl() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.PosConnectionImpl)
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::PosConnectionImpl* temp = posconnectionimpl_;
  posconnectionimpl_ = nullptr;
  return temp;
}
inline ::Proto::PosConnectionImpl* SchemaItem::_internal_mutable_posconnectionimpl() {
  _has_bits_[0] |= 0x00000080u;
  if (posconnectionimpl_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PosConnectionImpl>(GetArena());
    posconnectionimpl_ = p;
  }
  return posconnectionimpl_;
}
inline ::Proto::PosConnectionImpl* SchemaItem::mutable_posconnectionimpl() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.PosConnectionImpl)
  return _internal_mutable_posconnectionimpl();
}
inline void SchemaItem::set_allocated_posconnectionimpl(::Proto::PosConnectionImpl* posconnectionimpl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete posconnectionimpl_;
  }
  if (posconnectionimpl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(posconnectionimpl);
    if (message_arena != submessage_arena) {
      posconnectionimpl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posconnectionimpl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  posconnectionimpl_ = posconnectionimpl;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.PosConnectionImpl)
}

// optional .Proto.FblItem FblItem = 106;
inline bool SchemaItem::_internal_has_fblitem() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || fblitem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_fblitem() const {
  return _internal_has_fblitem();
}
inline void SchemaItem::clear_fblitem() {
  if (fblitem_ != nullptr) fblitem_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::Proto::FblItem& SchemaItem::_internal_fblitem() const {
  const ::Proto::FblItem* p = fblitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FblItem&>(
      ::Proto::_FblItem_default_instance_);
}
inline const ::Proto::FblItem& SchemaItem::fblitem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.FblItem)
  return _internal_fblitem();
}
inline void SchemaItem::unsafe_arena_set_allocated_fblitem(
    ::Proto::FblItem* fblitem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fblitem_);
  }
  fblitem_ = fblitem;
  if (fblitem) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.FblItem)
}
inline ::Proto::FblItem* SchemaItem::release_fblitem() {
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::FblItem* temp = fblitem_;
  fblitem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FblItem* SchemaItem::unsafe_arena_release_fblitem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.FblItem)
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::FblItem* temp = fblitem_;
  fblitem_ = nullptr;
  return temp;
}
inline ::Proto::FblItem* SchemaItem::_internal_mutable_fblitem() {
  _has_bits_[0] |= 0x00000100u;
  if (fblitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FblItem>(GetArena());
    fblitem_ = p;
  }
  return fblitem_;
}
inline ::Proto::FblItem* SchemaItem::mutable_fblitem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.FblItem)
  return _internal_mutable_fblitem();
}
inline void SchemaItem::set_allocated_fblitem(::Proto::FblItem* fblitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fblitem_;
  }
  if (fblitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fblitem);
    if (message_arena != submessage_arena) {
      fblitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fblitem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  fblitem_ = fblitem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.FblItem)
}

// optional .Proto.FblItemRect FblItemRect = 107;
inline bool SchemaItem::_internal_has_fblitemrect() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || fblitemrect_ != nullptr);
  return value;
}
inline bool SchemaItem::has_fblitemrect() const {
  return _internal_has_fblitemrect();
}
inline void SchemaItem::clear_fblitemrect() {
  if (fblitemrect_ != nullptr) fblitemrect_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::Proto::FblItemRect& SchemaItem::_internal_fblitemrect() const {
  const ::Proto::FblItemRect* p = fblitemrect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FblItemRect&>(
      ::Proto::_FblItemRect_default_instance_);
}
inline const ::Proto::FblItemRect& SchemaItem::fblitemrect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.FblItemRect)
  return _internal_fblitemrect();
}
inline void SchemaItem::unsafe_arena_set_allocated_fblitemrect(
    ::Proto::FblItemRect* fblitemrect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fblitemrect_);
  }
  fblitemrect_ = fblitemrect;
  if (fblitemrect) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.FblItemRect)
}
inline ::Proto::FblItemRect* SchemaItem::release_fblitemrect() {
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::FblItemRect* temp = fblitemrect_;
  fblitemrect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FblItemRect* SchemaItem::unsafe_arena_release_fblitemrect() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.FblItemRect)
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::FblItemRect* temp = fblitemrect_;
  fblitemrect_ = nullptr;
  return temp;
}
inline ::Proto::FblItemRect* SchemaItem::_internal_mutable_fblitemrect() {
  _has_bits_[0] |= 0x00000200u;
  if (fblitemrect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FblItemRect>(GetArena());
    fblitemrect_ = p;
  }
  return fblitemrect_;
}
inline ::Proto::FblItemRect* SchemaItem::mutable_fblitemrect() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.FblItemRect)
  return _internal_mutable_fblitemrect();
}
inline void SchemaItem::set_allocated_fblitemrect(::Proto::FblItemRect* fblitemrect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fblitemrect_;
  }
  if (fblitemrect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fblitemrect);
    if (message_arena != submessage_arena) {
      fblitemrect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fblitemrect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  fblitemrect_ = fblitemrect;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.FblItemRect)
}

// optional .Proto.FblItemLine FblItemLine = 108;
inline bool SchemaItem::_internal_has_fblitemline() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || fblitemline_ != nullptr);
  return value;
}
inline bool SchemaItem::has_fblitemline() const {
  return _internal_has_fblitemline();
}
inline void SchemaItem::clear_fblitemline() {
  if (fblitemline_ != nullptr) fblitemline_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::Proto::FblItemLine& SchemaItem::_internal_fblitemline() const {
  const ::Proto::FblItemLine* p = fblitemline_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FblItemLine&>(
      ::Proto::_FblItemLine_default_instance_);
}
inline const ::Proto::FblItemLine& SchemaItem::fblitemline() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.FblItemLine)
  return _internal_fblitemline();
}
inline void SchemaItem::unsafe_arena_set_allocated_fblitemline(
    ::Proto::FblItemLine* fblitemline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fblitemline_);
  }
  fblitemline_ = fblitemline;
  if (fblitemline) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.FblItemLine)
}
inline ::Proto::FblItemLine* SchemaItem::release_fblitemline() {
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::FblItemLine* temp = fblitemline_;
  fblitemline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FblItemLine* SchemaItem::unsafe_arena_release_fblitemline() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.FblItemLine)
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::FblItemLine* temp = fblitemline_;
  fblitemline_ = nullptr;
  return temp;
}
inline ::Proto::FblItemLine* SchemaItem::_internal_mutable_fblitemline() {
  _has_bits_[0] |= 0x00000400u;
  if (fblitemline_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FblItemLine>(GetArena());
    fblitemline_ = p;
  }
  return fblitemline_;
}
inline ::Proto::FblItemLine* SchemaItem::mutable_fblitemline() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.FblItemLine)
  return _internal_mutable_fblitemline();
}
inline void SchemaItem::set_allocated_fblitemline(::Proto::FblItemLine* fblitemline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fblitemline_;
  }
  if (fblitemline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fblitemline);
    if (message_arena != submessage_arena) {
      fblitemline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fblitemline, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  fblitemline_ = fblitemline;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.FblItemLine)
}

// optional .Proto.SchemaItemRect Rect = 116;
inline bool SchemaItem::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool SchemaItem::has_rect() const {
  return _internal_has_rect();
}
inline void SchemaItem::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::Proto::SchemaItemRect& SchemaItem::_internal_rect() const {
  const ::Proto::SchemaItemRect* p = rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemRect&>(
      ::Proto::_SchemaItemRect_default_instance_);
}
inline const ::Proto::SchemaItemRect& SchemaItem::rect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Rect)
  return _internal_rect();
}
inline void SchemaItem::unsafe_arena_set_allocated_rect(
    ::Proto::SchemaItemRect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Rect)
}
inline ::Proto::SchemaItemRect* SchemaItem::release_rect() {
  _has_bits_[0] &= ~0x00000800u;
  ::Proto::SchemaItemRect* temp = rect_;
  rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemRect* SchemaItem::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Rect)
  _has_bits_[0] &= ~0x00000800u;
  ::Proto::SchemaItemRect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemRect* SchemaItem::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000800u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemRect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::Proto::SchemaItemRect* SchemaItem::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Rect)
  return _internal_mutable_rect();
}
inline void SchemaItem::set_allocated_rect(::Proto::SchemaItemRect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Rect)
}

// optional .Proto.SchemaItemLine Line = 117;
inline bool SchemaItem::_internal_has_line() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || line_ != nullptr);
  return value;
}
inline bool SchemaItem::has_line() const {
  return _internal_has_line();
}
inline void SchemaItem::clear_line() {
  if (line_ != nullptr) line_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::Proto::SchemaItemLine& SchemaItem::_internal_line() const {
  const ::Proto::SchemaItemLine* p = line_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemLine&>(
      ::Proto::_SchemaItemLine_default_instance_);
}
inline const ::Proto::SchemaItemLine& SchemaItem::line() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Line)
  return _internal_line();
}
inline void SchemaItem::unsafe_arena_set_allocated_line(
    ::Proto::SchemaItemLine* line) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_);
  }
  line_ = line;
  if (line) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Line)
}
inline ::Proto::SchemaItemLine* SchemaItem::release_line() {
  _has_bits_[0] &= ~0x00001000u;
  ::Proto::SchemaItemLine* temp = line_;
  line_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemLine* SchemaItem::unsafe_arena_release_line() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Line)
  _has_bits_[0] &= ~0x00001000u;
  ::Proto::SchemaItemLine* temp = line_;
  line_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemLine* SchemaItem::_internal_mutable_line() {
  _has_bits_[0] |= 0x00001000u;
  if (line_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemLine>(GetArena());
    line_ = p;
  }
  return line_;
}
inline ::Proto::SchemaItemLine* SchemaItem::mutable_line() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Line)
  return _internal_mutable_line();
}
inline void SchemaItem::set_allocated_line(::Proto::SchemaItemLine* line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete line_;
  }
  if (line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(line);
    if (message_arena != submessage_arena) {
      line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  line_ = line;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Line)
}

// optional .Proto.SchemaItemPath Path = 118;
inline bool SchemaItem::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || path_ != nullptr);
  return value;
}
inline bool SchemaItem::has_path() const {
  return _internal_has_path();
}
inline void SchemaItem::clear_path() {
  if (path_ != nullptr) path_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::Proto::SchemaItemPath& SchemaItem::_internal_path() const {
  const ::Proto::SchemaItemPath* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemPath&>(
      ::Proto::_SchemaItemPath_default_instance_);
}
inline const ::Proto::SchemaItemPath& SchemaItem::path() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Path)
  return _internal_path();
}
inline void SchemaItem::unsafe_arena_set_allocated_path(
    ::Proto::SchemaItemPath* path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Path)
}
inline ::Proto::SchemaItemPath* SchemaItem::release_path() {
  _has_bits_[0] &= ~0x00002000u;
  ::Proto::SchemaItemPath* temp = path_;
  path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemPath* SchemaItem::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Path)
  _has_bits_[0] &= ~0x00002000u;
  ::Proto::SchemaItemPath* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemPath* SchemaItem::_internal_mutable_path() {
  _has_bits_[0] |= 0x00002000u;
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemPath>(GetArena());
    path_ = p;
  }
  return path_;
}
inline ::Proto::SchemaItemPath* SchemaItem::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Path)
  return _internal_mutable_path();
}
inline void SchemaItem::set_allocated_path(::Proto::SchemaItemPath* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Path)
}

// optional .Proto.SchemaItemImage Image = 119;
inline bool SchemaItem::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool SchemaItem::has_image() const {
  return _internal_has_image();
}
inline void SchemaItem::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::Proto::SchemaItemImage& SchemaItem::_internal_image() const {
  const ::Proto::SchemaItemImage* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemImage&>(
      ::Proto::_SchemaItemImage_default_instance_);
}
inline const ::Proto::SchemaItemImage& SchemaItem::image() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Image)
  return _internal_image();
}
inline void SchemaItem::unsafe_arena_set_allocated_image(
    ::Proto::SchemaItemImage* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Image)
}
inline ::Proto::SchemaItemImage* SchemaItem::release_image() {
  _has_bits_[0] &= ~0x00004000u;
  ::Proto::SchemaItemImage* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemImage* SchemaItem::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Image)
  _has_bits_[0] &= ~0x00004000u;
  ::Proto::SchemaItemImage* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemImage* SchemaItem::_internal_mutable_image() {
  _has_bits_[0] |= 0x00004000u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemImage>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::Proto::SchemaItemImage* SchemaItem::mutable_image() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Image)
  return _internal_mutable_image();
}
inline void SchemaItem::set_allocated_image(::Proto::SchemaItemImage* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Image)
}

// optional .Proto.SchemaItemFrame Frame = 120;
inline bool SchemaItem::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool SchemaItem::has_frame() const {
  return _internal_has_frame();
}
inline void SchemaItem::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::Proto::SchemaItemFrame& SchemaItem::_internal_frame() const {
  const ::Proto::SchemaItemFrame* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemFrame&>(
      ::Proto::_SchemaItemFrame_default_instance_);
}
inline const ::Proto::SchemaItemFrame& SchemaItem::frame() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Frame)
  return _internal_frame();
}
inline void SchemaItem::unsafe_arena_set_allocated_frame(
    ::Proto::SchemaItemFrame* frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Frame)
}
inline ::Proto::SchemaItemFrame* SchemaItem::release_frame() {
  _has_bits_[0] &= ~0x00008000u;
  ::Proto::SchemaItemFrame* temp = frame_;
  frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemFrame* SchemaItem::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Frame)
  _has_bits_[0] &= ~0x00008000u;
  ::Proto::SchemaItemFrame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemFrame* SchemaItem::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00008000u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemFrame>(GetArena());
    frame_ = p;
  }
  return frame_;
}
inline ::Proto::SchemaItemFrame* SchemaItem::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Frame)
  return _internal_mutable_frame();
}
inline void SchemaItem::set_allocated_frame(::Proto::SchemaItemFrame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame);
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Frame)
}

// optional .Proto.SchemaItemIndicator Indicator = 121;
inline bool SchemaItem::_internal_has_indicator() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || indicator_ != nullptr);
  return value;
}
inline bool SchemaItem::has_indicator() const {
  return _internal_has_indicator();
}
inline void SchemaItem::clear_indicator() {
  if (indicator_ != nullptr) indicator_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::Proto::SchemaItemIndicator& SchemaItem::_internal_indicator() const {
  const ::Proto::SchemaItemIndicator* p = indicator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemIndicator&>(
      ::Proto::_SchemaItemIndicator_default_instance_);
}
inline const ::Proto::SchemaItemIndicator& SchemaItem::indicator() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Indicator)
  return _internal_indicator();
}
inline void SchemaItem::unsafe_arena_set_allocated_indicator(
    ::Proto::SchemaItemIndicator* indicator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indicator_);
  }
  indicator_ = indicator;
  if (indicator) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Indicator)
}
inline ::Proto::SchemaItemIndicator* SchemaItem::release_indicator() {
  _has_bits_[0] &= ~0x00010000u;
  ::Proto::SchemaItemIndicator* temp = indicator_;
  indicator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemIndicator* SchemaItem::unsafe_arena_release_indicator() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Indicator)
  _has_bits_[0] &= ~0x00010000u;
  ::Proto::SchemaItemIndicator* temp = indicator_;
  indicator_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemIndicator* SchemaItem::_internal_mutable_indicator() {
  _has_bits_[0] |= 0x00010000u;
  if (indicator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemIndicator>(GetArena());
    indicator_ = p;
  }
  return indicator_;
}
inline ::Proto::SchemaItemIndicator* SchemaItem::mutable_indicator() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Indicator)
  return _internal_mutable_indicator();
}
inline void SchemaItem::set_allocated_indicator(::Proto::SchemaItemIndicator* indicator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indicator_;
  }
  if (indicator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indicator);
    if (message_arena != submessage_arena) {
      indicator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicator, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  indicator_ = indicator;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Indicator)
}

// optional .Proto.SchemaItemSignal Signal = 124;
inline bool SchemaItem::_internal_has_signal() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || signal_ != nullptr);
  return value;
}
inline bool SchemaItem::has_signal() const {
  return _internal_has_signal();
}
inline void SchemaItem::clear_signal() {
  if (signal_ != nullptr) signal_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::Proto::SchemaItemSignal& SchemaItem::_internal_signal() const {
  const ::Proto::SchemaItemSignal* p = signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemSignal&>(
      ::Proto::_SchemaItemSignal_default_instance_);
}
inline const ::Proto::SchemaItemSignal& SchemaItem::signal() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Signal)
  return _internal_signal();
}
inline void SchemaItem::unsafe_arena_set_allocated_signal(
    ::Proto::SchemaItemSignal* signal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_);
  }
  signal_ = signal;
  if (signal) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Signal)
}
inline ::Proto::SchemaItemSignal* SchemaItem::release_signal() {
  _has_bits_[0] &= ~0x00020000u;
  ::Proto::SchemaItemSignal* temp = signal_;
  signal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemSignal* SchemaItem::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Signal)
  _has_bits_[0] &= ~0x00020000u;
  ::Proto::SchemaItemSignal* temp = signal_;
  signal_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemSignal* SchemaItem::_internal_mutable_signal() {
  _has_bits_[0] |= 0x00020000u;
  if (signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemSignal>(GetArena());
    signal_ = p;
  }
  return signal_;
}
inline ::Proto::SchemaItemSignal* SchemaItem::mutable_signal() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Signal)
  return _internal_mutable_signal();
}
inline void SchemaItem::set_allocated_signal(::Proto::SchemaItemSignal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signal_;
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signal);
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Signal)
}

// optional .Proto.SchemaItemInput InputSignal = 125;
inline bool SchemaItem::_internal_has_inputsignal() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || inputsignal_ != nullptr);
  return value;
}
inline bool SchemaItem::has_inputsignal() const {
  return _internal_has_inputsignal();
}
inline void SchemaItem::clear_inputsignal() {
  if (inputsignal_ != nullptr) inputsignal_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::Proto::SchemaItemInput& SchemaItem::_internal_inputsignal() const {
  const ::Proto::SchemaItemInput* p = inputsignal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemInput&>(
      ::Proto::_SchemaItemInput_default_instance_);
}
inline const ::Proto::SchemaItemInput& SchemaItem::inputsignal() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.InputSignal)
  return _internal_inputsignal();
}
inline void SchemaItem::unsafe_arena_set_allocated_inputsignal(
    ::Proto::SchemaItemInput* inputsignal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputsignal_);
  }
  inputsignal_ = inputsignal;
  if (inputsignal) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.InputSignal)
}
inline ::Proto::SchemaItemInput* SchemaItem::release_inputsignal() {
  _has_bits_[0] &= ~0x00040000u;
  ::Proto::SchemaItemInput* temp = inputsignal_;
  inputsignal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemInput* SchemaItem::unsafe_arena_release_inputsignal() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.InputSignal)
  _has_bits_[0] &= ~0x00040000u;
  ::Proto::SchemaItemInput* temp = inputsignal_;
  inputsignal_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemInput* SchemaItem::_internal_mutable_inputsignal() {
  _has_bits_[0] |= 0x00040000u;
  if (inputsignal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemInput>(GetArena());
    inputsignal_ = p;
  }
  return inputsignal_;
}
inline ::Proto::SchemaItemInput* SchemaItem::mutable_inputsignal() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.InputSignal)
  return _internal_mutable_inputsignal();
}
inline void SchemaItem::set_allocated_inputsignal(::Proto::SchemaItemInput* inputsignal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inputsignal_;
  }
  if (inputsignal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inputsignal);
    if (message_arena != submessage_arena) {
      inputsignal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputsignal, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  inputsignal_ = inputsignal;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.InputSignal)
}

// optional .Proto.SchemaItemOutput OutputSignal = 126;
inline bool SchemaItem::_internal_has_outputsignal() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || outputsignal_ != nullptr);
  return value;
}
inline bool SchemaItem::has_outputsignal() const {
  return _internal_has_outputsignal();
}
inline void SchemaItem::clear_outputsignal() {
  if (outputsignal_ != nullptr) outputsignal_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::Proto::SchemaItemOutput& SchemaItem::_internal_outputsignal() const {
  const ::Proto::SchemaItemOutput* p = outputsignal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemOutput&>(
      ::Proto::_SchemaItemOutput_default_instance_);
}
inline const ::Proto::SchemaItemOutput& SchemaItem::outputsignal() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.OutputSignal)
  return _internal_outputsignal();
}
inline void SchemaItem::unsafe_arena_set_allocated_outputsignal(
    ::Proto::SchemaItemOutput* outputsignal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outputsignal_);
  }
  outputsignal_ = outputsignal;
  if (outputsignal) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.OutputSignal)
}
inline ::Proto::SchemaItemOutput* SchemaItem::release_outputsignal() {
  _has_bits_[0] &= ~0x00080000u;
  ::Proto::SchemaItemOutput* temp = outputsignal_;
  outputsignal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemOutput* SchemaItem::unsafe_arena_release_outputsignal() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.OutputSignal)
  _has_bits_[0] &= ~0x00080000u;
  ::Proto::SchemaItemOutput* temp = outputsignal_;
  outputsignal_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemOutput* SchemaItem::_internal_mutable_outputsignal() {
  _has_bits_[0] |= 0x00080000u;
  if (outputsignal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemOutput>(GetArena());
    outputsignal_ = p;
  }
  return outputsignal_;
}
inline ::Proto::SchemaItemOutput* SchemaItem::mutable_outputsignal() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.OutputSignal)
  return _internal_mutable_outputsignal();
}
inline void SchemaItem::set_allocated_outputsignal(::Proto::SchemaItemOutput* outputsignal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outputsignal_;
  }
  if (outputsignal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outputsignal);
    if (message_arena != submessage_arena) {
      outputsignal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputsignal, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  outputsignal_ = outputsignal;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.OutputSignal)
}

// optional .Proto.SchemaItemLink Link = 127;
inline bool SchemaItem::_internal_has_link() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || link_ != nullptr);
  return value;
}
inline bool SchemaItem::has_link() const {
  return _internal_has_link();
}
inline void SchemaItem::clear_link() {
  if (link_ != nullptr) link_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::Proto::SchemaItemLink& SchemaItem::_internal_link() const {
  const ::Proto::SchemaItemLink* p = link_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemLink&>(
      ::Proto::_SchemaItemLink_default_instance_);
}
inline const ::Proto::SchemaItemLink& SchemaItem::link() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Link)
  return _internal_link();
}
inline void SchemaItem::unsafe_arena_set_allocated_link(
    ::Proto::SchemaItemLink* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Link)
}
inline ::Proto::SchemaItemLink* SchemaItem::release_link() {
  _has_bits_[0] &= ~0x00100000u;
  ::Proto::SchemaItemLink* temp = link_;
  link_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemLink* SchemaItem::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Link)
  _has_bits_[0] &= ~0x00100000u;
  ::Proto::SchemaItemLink* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemLink* SchemaItem::_internal_mutable_link() {
  _has_bits_[0] |= 0x00100000u;
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemLink>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::Proto::SchemaItemLink* SchemaItem::mutable_link() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Link)
  return _internal_mutable_link();
}
inline void SchemaItem::set_allocated_link(::Proto::SchemaItemLink* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Link)
}

// optional .Proto.SchemaItemAfb Afb = 128;
inline bool SchemaItem::_internal_has_afb() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || afb_ != nullptr);
  return value;
}
inline bool SchemaItem::has_afb() const {
  return _internal_has_afb();
}
inline void SchemaItem::clear_afb() {
  if (afb_ != nullptr) afb_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::Proto::SchemaItemAfb& SchemaItem::_internal_afb() const {
  const ::Proto::SchemaItemAfb* p = afb_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemAfb&>(
      ::Proto::_SchemaItemAfb_default_instance_);
}
inline const ::Proto::SchemaItemAfb& SchemaItem::afb() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Afb)
  return _internal_afb();
}
inline void SchemaItem::unsafe_arena_set_allocated_afb(
    ::Proto::SchemaItemAfb* afb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(afb_);
  }
  afb_ = afb;
  if (afb) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Afb)
}
inline ::Proto::SchemaItemAfb* SchemaItem::release_afb() {
  _has_bits_[0] &= ~0x00200000u;
  ::Proto::SchemaItemAfb* temp = afb_;
  afb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemAfb* SchemaItem::unsafe_arena_release_afb() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Afb)
  _has_bits_[0] &= ~0x00200000u;
  ::Proto::SchemaItemAfb* temp = afb_;
  afb_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemAfb* SchemaItem::_internal_mutable_afb() {
  _has_bits_[0] |= 0x00200000u;
  if (afb_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemAfb>(GetArena());
    afb_ = p;
  }
  return afb_;
}
inline ::Proto::SchemaItemAfb* SchemaItem::mutable_afb() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Afb)
  return _internal_mutable_afb();
}
inline void SchemaItem::set_allocated_afb(::Proto::SchemaItemAfb* afb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete afb_;
  }
  if (afb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(afb);
    if (message_arena != submessage_arena) {
      afb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, afb, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  afb_ = afb;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Afb)
}

// optional .Proto.SchemaItemConst ConstItem = 129;
inline bool SchemaItem::_internal_has_constitem() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || constitem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_constitem() const {
  return _internal_has_constitem();
}
inline void SchemaItem::clear_constitem() {
  if (constitem_ != nullptr) constitem_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::Proto::SchemaItemConst& SchemaItem::_internal_constitem() const {
  const ::Proto::SchemaItemConst* p = constitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemConst&>(
      ::Proto::_SchemaItemConst_default_instance_);
}
inline const ::Proto::SchemaItemConst& SchemaItem::constitem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.ConstItem)
  return _internal_constitem();
}
inline void SchemaItem::unsafe_arena_set_allocated_constitem(
    ::Proto::SchemaItemConst* constitem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constitem_);
  }
  constitem_ = constitem;
  if (constitem) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.ConstItem)
}
inline ::Proto::SchemaItemConst* SchemaItem::release_constitem() {
  _has_bits_[0] &= ~0x00400000u;
  ::Proto::SchemaItemConst* temp = constitem_;
  constitem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemConst* SchemaItem::unsafe_arena_release_constitem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.ConstItem)
  _has_bits_[0] &= ~0x00400000u;
  ::Proto::SchemaItemConst* temp = constitem_;
  constitem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemConst* SchemaItem::_internal_mutable_constitem() {
  _has_bits_[0] |= 0x00400000u;
  if (constitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemConst>(GetArena());
    constitem_ = p;
  }
  return constitem_;
}
inline ::Proto::SchemaItemConst* SchemaItem::mutable_constitem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.ConstItem)
  return _internal_mutable_constitem();
}
inline void SchemaItem::set_allocated_constitem(::Proto::SchemaItemConst* constitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete constitem_;
  }
  if (constitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(constitem);
    if (message_arena != submessage_arena) {
      constitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constitem, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  constitem_ = constitem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.ConstItem)
}

// optional .Proto.SchemaItemConnection ConnectionItem = 130;
inline bool SchemaItem::_internal_has_connectionitem() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || connectionitem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_connectionitem() const {
  return _internal_has_connectionitem();
}
inline void SchemaItem::clear_connectionitem() {
  if (connectionitem_ != nullptr) connectionitem_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::Proto::SchemaItemConnection& SchemaItem::_internal_connectionitem() const {
  const ::Proto::SchemaItemConnection* p = connectionitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemConnection&>(
      ::Proto::_SchemaItemConnection_default_instance_);
}
inline const ::Proto::SchemaItemConnection& SchemaItem::connectionitem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.ConnectionItem)
  return _internal_connectionitem();
}
inline void SchemaItem::unsafe_arena_set_allocated_connectionitem(
    ::Proto::SchemaItemConnection* connectionitem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connectionitem_);
  }
  connectionitem_ = connectionitem;
  if (connectionitem) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.ConnectionItem)
}
inline ::Proto::SchemaItemConnection* SchemaItem::release_connectionitem() {
  _has_bits_[0] &= ~0x00800000u;
  ::Proto::SchemaItemConnection* temp = connectionitem_;
  connectionitem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemConnection* SchemaItem::unsafe_arena_release_connectionitem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.ConnectionItem)
  _has_bits_[0] &= ~0x00800000u;
  ::Proto::SchemaItemConnection* temp = connectionitem_;
  connectionitem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemConnection* SchemaItem::_internal_mutable_connectionitem() {
  _has_bits_[0] |= 0x00800000u;
  if (connectionitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemConnection>(GetArena());
    connectionitem_ = p;
  }
  return connectionitem_;
}
inline ::Proto::SchemaItemConnection* SchemaItem::mutable_connectionitem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.ConnectionItem)
  return _internal_mutable_connectionitem();
}
inline void SchemaItem::set_allocated_connectionitem(::Proto::SchemaItemConnection* connectionitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connectionitem_;
  }
  if (connectionitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connectionitem);
    if (message_arena != submessage_arena) {
      connectionitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectionitem, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  connectionitem_ = connectionitem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.ConnectionItem)
}

// optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
inline bool SchemaItem::_internal_has_transmitteritem() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || transmitteritem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_transmitteritem() const {
  return _internal_has_transmitteritem();
}
inline void SchemaItem::clear_transmitteritem() {
  if (transmitteritem_ != nullptr) transmitteritem_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::Proto::SchemaItemTransmitter& SchemaItem::_internal_transmitteritem() const {
  const ::Proto::SchemaItemTransmitter* p = transmitteritem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemTransmitter&>(
      ::Proto::_SchemaItemTransmitter_default_instance_);
}
inline const ::Proto::SchemaItemTransmitter& SchemaItem::transmitteritem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.TransmitterItem)
  return _internal_transmitteritem();
}
inline void SchemaItem::unsafe_arena_set_allocated_transmitteritem(
    ::Proto::SchemaItemTransmitter* transmitteritem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmitteritem_);
  }
  transmitteritem_ = transmitteritem;
  if (transmitteritem) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.TransmitterItem)
}
inline ::Proto::SchemaItemTransmitter* SchemaItem::release_transmitteritem() {
  _has_bits_[0] &= ~0x01000000u;
  ::Proto::SchemaItemTransmitter* temp = transmitteritem_;
  transmitteritem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemTransmitter* SchemaItem::unsafe_arena_release_transmitteritem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.TransmitterItem)
  _has_bits_[0] &= ~0x01000000u;
  ::Proto::SchemaItemTransmitter* temp = transmitteritem_;
  transmitteritem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemTransmitter* SchemaItem::_internal_mutable_transmitteritem() {
  _has_bits_[0] |= 0x01000000u;
  if (transmitteritem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemTransmitter>(GetArena());
    transmitteritem_ = p;
  }
  return transmitteritem_;
}
inline ::Proto::SchemaItemTransmitter* SchemaItem::mutable_transmitteritem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.TransmitterItem)
  return _internal_mutable_transmitteritem();
}
inline void SchemaItem::set_allocated_transmitteritem(::Proto::SchemaItemTransmitter* transmitteritem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transmitteritem_;
  }
  if (transmitteritem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transmitteritem);
    if (message_arena != submessage_arena) {
      transmitteritem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmitteritem, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  transmitteritem_ = transmitteritem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.TransmitterItem)
}

// optional .Proto.SchemaItemReceiver ReceiverItem = 132;
inline bool SchemaItem::_internal_has_receiveritem() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || receiveritem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_receiveritem() const {
  return _internal_has_receiveritem();
}
inline void SchemaItem::clear_receiveritem() {
  if (receiveritem_ != nullptr) receiveritem_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::Proto::SchemaItemReceiver& SchemaItem::_internal_receiveritem() const {
  const ::Proto::SchemaItemReceiver* p = receiveritem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemReceiver&>(
      ::Proto::_SchemaItemReceiver_default_instance_);
}
inline const ::Proto::SchemaItemReceiver& SchemaItem::receiveritem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.ReceiverItem)
  return _internal_receiveritem();
}
inline void SchemaItem::unsafe_arena_set_allocated_receiveritem(
    ::Proto::SchemaItemReceiver* receiveritem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiveritem_);
  }
  receiveritem_ = receiveritem;
  if (receiveritem) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.ReceiverItem)
}
inline ::Proto::SchemaItemReceiver* SchemaItem::release_receiveritem() {
  _has_bits_[0] &= ~0x02000000u;
  ::Proto::SchemaItemReceiver* temp = receiveritem_;
  receiveritem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemReceiver* SchemaItem::unsafe_arena_release_receiveritem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.ReceiverItem)
  _has_bits_[0] &= ~0x02000000u;
  ::Proto::SchemaItemReceiver* temp = receiveritem_;
  receiveritem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemReceiver* SchemaItem::_internal_mutable_receiveritem() {
  _has_bits_[0] |= 0x02000000u;
  if (receiveritem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemReceiver>(GetArena());
    receiveritem_ = p;
  }
  return receiveritem_;
}
inline ::Proto::SchemaItemReceiver* SchemaItem::mutable_receiveritem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.ReceiverItem)
  return _internal_mutable_receiveritem();
}
inline void SchemaItem::set_allocated_receiveritem(::Proto::SchemaItemReceiver* receiveritem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete receiveritem_;
  }
  if (receiveritem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(receiveritem);
    if (message_arena != submessage_arena) {
      receiveritem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiveritem, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  receiveritem_ = receiveritem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.ReceiverItem)
}

// optional .Proto.SchemaItemInOut InOutSignal = 133;
inline bool SchemaItem::_internal_has_inoutsignal() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || inoutsignal_ != nullptr);
  return value;
}
inline bool SchemaItem::has_inoutsignal() const {
  return _internal_has_inoutsignal();
}
inline void SchemaItem::clear_inoutsignal() {
  if (inoutsignal_ != nullptr) inoutsignal_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::Proto::SchemaItemInOut& SchemaItem::_internal_inoutsignal() const {
  const ::Proto::SchemaItemInOut* p = inoutsignal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemInOut&>(
      ::Proto::_SchemaItemInOut_default_instance_);
}
inline const ::Proto::SchemaItemInOut& SchemaItem::inoutsignal() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.InOutSignal)
  return _internal_inoutsignal();
}
inline void SchemaItem::unsafe_arena_set_allocated_inoutsignal(
    ::Proto::SchemaItemInOut* inoutsignal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inoutsignal_);
  }
  inoutsignal_ = inoutsignal;
  if (inoutsignal) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.InOutSignal)
}
inline ::Proto::SchemaItemInOut* SchemaItem::release_inoutsignal() {
  _has_bits_[0] &= ~0x04000000u;
  ::Proto::SchemaItemInOut* temp = inoutsignal_;
  inoutsignal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemInOut* SchemaItem::unsafe_arena_release_inoutsignal() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.InOutSignal)
  _has_bits_[0] &= ~0x04000000u;
  ::Proto::SchemaItemInOut* temp = inoutsignal_;
  inoutsignal_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemInOut* SchemaItem::_internal_mutable_inoutsignal() {
  _has_bits_[0] |= 0x04000000u;
  if (inoutsignal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemInOut>(GetArena());
    inoutsignal_ = p;
  }
  return inoutsignal_;
}
inline ::Proto::SchemaItemInOut* SchemaItem::mutable_inoutsignal() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.InOutSignal)
  return _internal_mutable_inoutsignal();
}
inline void SchemaItem::set_allocated_inoutsignal(::Proto::SchemaItemInOut* inoutsignal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inoutsignal_;
  }
  if (inoutsignal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inoutsignal);
    if (message_arena != submessage_arena) {
      inoutsignal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inoutsignal, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  inoutsignal_ = inoutsignal;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.InOutSignal)
}

// optional .Proto.SchemaItemUfb ufb = 134;
inline bool SchemaItem::_internal_has_ufb() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || ufb_ != nullptr);
  return value;
}
inline bool SchemaItem::has_ufb() const {
  return _internal_has_ufb();
}
inline void SchemaItem::clear_ufb() {
  if (ufb_ != nullptr) ufb_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::Proto::SchemaItemUfb& SchemaItem::_internal_ufb() const {
  const ::Proto::SchemaItemUfb* p = ufb_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemUfb&>(
      ::Proto::_SchemaItemUfb_default_instance_);
}
inline const ::Proto::SchemaItemUfb& SchemaItem::ufb() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.ufb)
  return _internal_ufb();
}
inline void SchemaItem::unsafe_arena_set_allocated_ufb(
    ::Proto::SchemaItemUfb* ufb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ufb_);
  }
  ufb_ = ufb;
  if (ufb) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.ufb)
}
inline ::Proto::SchemaItemUfb* SchemaItem::release_ufb() {
  _has_bits_[0] &= ~0x08000000u;
  ::Proto::SchemaItemUfb* temp = ufb_;
  ufb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemUfb* SchemaItem::unsafe_arena_release_ufb() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.ufb)
  _has_bits_[0] &= ~0x08000000u;
  ::Proto::SchemaItemUfb* temp = ufb_;
  ufb_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemUfb* SchemaItem::_internal_mutable_ufb() {
  _has_bits_[0] |= 0x08000000u;
  if (ufb_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemUfb>(GetArena());
    ufb_ = p;
  }
  return ufb_;
}
inline ::Proto::SchemaItemUfb* SchemaItem::mutable_ufb() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.ufb)
  return _internal_mutable_ufb();
}
inline void SchemaItem::set_allocated_ufb(::Proto::SchemaItemUfb* ufb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ufb_;
  }
  if (ufb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ufb);
    if (message_arena != submessage_arena) {
      ufb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ufb, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  ufb_ = ufb;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.ufb)
}

// optional .Proto.SchemaItemTerminator terminator = 135;
inline bool SchemaItem::_internal_has_terminator() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || terminator_ != nullptr);
  return value;
}
inline bool SchemaItem::has_terminator() const {
  return _internal_has_terminator();
}
inline void SchemaItem::clear_terminator() {
  if (terminator_ != nullptr) terminator_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::Proto::SchemaItemTerminator& SchemaItem::_internal_terminator() const {
  const ::Proto::SchemaItemTerminator* p = terminator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemTerminator&>(
      ::Proto::_SchemaItemTerminator_default_instance_);
}
inline const ::Proto::SchemaItemTerminator& SchemaItem::terminator() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.terminator)
  return _internal_terminator();
}
inline void SchemaItem::unsafe_arena_set_allocated_terminator(
    ::Proto::SchemaItemTerminator* terminator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terminator_);
  }
  terminator_ = terminator;
  if (terminator) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.terminator)
}
inline ::Proto::SchemaItemTerminator* SchemaItem::release_terminator() {
  _has_bits_[0] &= ~0x10000000u;
  ::Proto::SchemaItemTerminator* temp = terminator_;
  terminator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemTerminator* SchemaItem::unsafe_arena_release_terminator() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.terminator)
  _has_bits_[0] &= ~0x10000000u;
  ::Proto::SchemaItemTerminator* temp = terminator_;
  terminator_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemTerminator* SchemaItem::_internal_mutable_terminator() {
  _has_bits_[0] |= 0x10000000u;
  if (terminator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemTerminator>(GetArena());
    terminator_ = p;
  }
  return terminator_;
}
inline ::Proto::SchemaItemTerminator* SchemaItem::mutable_terminator() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.terminator)
  return _internal_mutable_terminator();
}
inline void SchemaItem::set_allocated_terminator(::Proto::SchemaItemTerminator* terminator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete terminator_;
  }
  if (terminator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(terminator);
    if (message_arena != submessage_arena) {
      terminator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terminator, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  terminator_ = terminator;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.terminator)
}

// optional .Proto.SchemaItemValue Value = 136;
inline bool SchemaItem::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool SchemaItem::has_value() const {
  return _internal_has_value();
}
inline void SchemaItem::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::Proto::SchemaItemValue& SchemaItem::_internal_value() const {
  const ::Proto::SchemaItemValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemValue&>(
      ::Proto::_SchemaItemValue_default_instance_);
}
inline const ::Proto::SchemaItemValue& SchemaItem::value() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.Value)
  return _internal_value();
}
inline void SchemaItem::unsafe_arena_set_allocated_value(
    ::Proto::SchemaItemValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.Value)
}
inline ::Proto::SchemaItemValue* SchemaItem::release_value() {
  _has_bits_[0] &= ~0x20000000u;
  ::Proto::SchemaItemValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemValue* SchemaItem::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.Value)
  _has_bits_[0] &= ~0x20000000u;
  ::Proto::SchemaItemValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemValue* SchemaItem::_internal_mutable_value() {
  _has_bits_[0] |= 0x20000000u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::Proto::SchemaItemValue* SchemaItem::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.Value)
  return _internal_mutable_value();
}
inline void SchemaItem::set_allocated_value(::Proto::SchemaItemValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.Value)
}

// optional .Proto.SchemaItemImageValue ImageValue = 137;
inline bool SchemaItem::_internal_has_imagevalue() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || imagevalue_ != nullptr);
  return value;
}
inline bool SchemaItem::has_imagevalue() const {
  return _internal_has_imagevalue();
}
inline void SchemaItem::clear_imagevalue() {
  if (imagevalue_ != nullptr) imagevalue_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::Proto::SchemaItemImageValue& SchemaItem::_internal_imagevalue() const {
  const ::Proto::SchemaItemImageValue* p = imagevalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemImageValue&>(
      ::Proto::_SchemaItemImageValue_default_instance_);
}
inline const ::Proto::SchemaItemImageValue& SchemaItem::imagevalue() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.ImageValue)
  return _internal_imagevalue();
}
inline void SchemaItem::unsafe_arena_set_allocated_imagevalue(
    ::Proto::SchemaItemImageValue* imagevalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imagevalue_);
  }
  imagevalue_ = imagevalue;
  if (imagevalue) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.ImageValue)
}
inline ::Proto::SchemaItemImageValue* SchemaItem::release_imagevalue() {
  _has_bits_[0] &= ~0x40000000u;
  ::Proto::SchemaItemImageValue* temp = imagevalue_;
  imagevalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemImageValue* SchemaItem::unsafe_arena_release_imagevalue() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.ImageValue)
  _has_bits_[0] &= ~0x40000000u;
  ::Proto::SchemaItemImageValue* temp = imagevalue_;
  imagevalue_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemImageValue* SchemaItem::_internal_mutable_imagevalue() {
  _has_bits_[0] |= 0x40000000u;
  if (imagevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemImageValue>(GetArena());
    imagevalue_ = p;
  }
  return imagevalue_;
}
inline ::Proto::SchemaItemImageValue* SchemaItem::mutable_imagevalue() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.ImageValue)
  return _internal_mutable_imagevalue();
}
inline void SchemaItem::set_allocated_imagevalue(::Proto::SchemaItemImageValue* imagevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imagevalue_;
  }
  if (imagevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imagevalue);
    if (message_arena != submessage_arena) {
      imagevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagevalue, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  imagevalue_ = imagevalue;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.ImageValue)
}

// optional .Proto.SchemaItemBus BusItem = 150;
inline bool SchemaItem::_internal_has_busitem() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || busitem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_busitem() const {
  return _internal_has_busitem();
}
inline void SchemaItem::clear_busitem() {
  if (busitem_ != nullptr) busitem_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::Proto::SchemaItemBus& SchemaItem::_internal_busitem() const {
  const ::Proto::SchemaItemBus* p = busitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemBus&>(
      ::Proto::_SchemaItemBus_default_instance_);
}
inline const ::Proto::SchemaItemBus& SchemaItem::busitem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.BusItem)
  return _internal_busitem();
}
inline void SchemaItem::unsafe_arena_set_allocated_busitem(
    ::Proto::SchemaItemBus* busitem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(busitem_);
  }
  busitem_ = busitem;
  if (busitem) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.BusItem)
}
inline ::Proto::SchemaItemBus* SchemaItem::release_busitem() {
  _has_bits_[0] &= ~0x80000000u;
  ::Proto::SchemaItemBus* temp = busitem_;
  busitem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemBus* SchemaItem::unsafe_arena_release_busitem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.BusItem)
  _has_bits_[0] &= ~0x80000000u;
  ::Proto::SchemaItemBus* temp = busitem_;
  busitem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemBus* SchemaItem::_internal_mutable_busitem() {
  _has_bits_[0] |= 0x80000000u;
  if (busitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemBus>(GetArena());
    busitem_ = p;
  }
  return busitem_;
}
inline ::Proto::SchemaItemBus* SchemaItem::mutable_busitem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.BusItem)
  return _internal_mutable_busitem();
}
inline void SchemaItem::set_allocated_busitem(::Proto::SchemaItemBus* busitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete busitem_;
  }
  if (busitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(busitem);
    if (message_arena != submessage_arena) {
      busitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, busitem, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  busitem_ = busitem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.BusItem)
}

// optional .Proto.SchemaItemBusComposer BusComposer = 151;
inline bool SchemaItem::_internal_has_buscomposer() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || buscomposer_ != nullptr);
  return value;
}
inline bool SchemaItem::has_buscomposer() const {
  return _internal_has_buscomposer();
}
inline void SchemaItem::clear_buscomposer() {
  if (buscomposer_ != nullptr) buscomposer_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::Proto::SchemaItemBusComposer& SchemaItem::_internal_buscomposer() const {
  const ::Proto::SchemaItemBusComposer* p = buscomposer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemBusComposer&>(
      ::Proto::_SchemaItemBusComposer_default_instance_);
}
inline const ::Proto::SchemaItemBusComposer& SchemaItem::buscomposer() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.BusComposer)
  return _internal_buscomposer();
}
inline void SchemaItem::unsafe_arena_set_allocated_buscomposer(
    ::Proto::SchemaItemBusComposer* buscomposer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buscomposer_);
  }
  buscomposer_ = buscomposer;
  if (buscomposer) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.BusComposer)
}
inline ::Proto::SchemaItemBusComposer* SchemaItem::release_buscomposer() {
  _has_bits_[1] &= ~0x00000001u;
  ::Proto::SchemaItemBusComposer* temp = buscomposer_;
  buscomposer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemBusComposer* SchemaItem::unsafe_arena_release_buscomposer() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.BusComposer)
  _has_bits_[1] &= ~0x00000001u;
  ::Proto::SchemaItemBusComposer* temp = buscomposer_;
  buscomposer_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemBusComposer* SchemaItem::_internal_mutable_buscomposer() {
  _has_bits_[1] |= 0x00000001u;
  if (buscomposer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemBusComposer>(GetArena());
    buscomposer_ = p;
  }
  return buscomposer_;
}
inline ::Proto::SchemaItemBusComposer* SchemaItem::mutable_buscomposer() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.BusComposer)
  return _internal_mutable_buscomposer();
}
inline void SchemaItem::set_allocated_buscomposer(::Proto::SchemaItemBusComposer* buscomposer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete buscomposer_;
  }
  if (buscomposer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buscomposer);
    if (message_arena != submessage_arena) {
      buscomposer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buscomposer, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  buscomposer_ = buscomposer;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.BusComposer)
}

// optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
inline bool SchemaItem::_internal_has_busextractor() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || busextractor_ != nullptr);
  return value;
}
inline bool SchemaItem::has_busextractor() const {
  return _internal_has_busextractor();
}
inline void SchemaItem::clear_busextractor() {
  if (busextractor_ != nullptr) busextractor_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::Proto::SchemaItemBusExtractor& SchemaItem::_internal_busextractor() const {
  const ::Proto::SchemaItemBusExtractor* p = busextractor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemBusExtractor&>(
      ::Proto::_SchemaItemBusExtractor_default_instance_);
}
inline const ::Proto::SchemaItemBusExtractor& SchemaItem::busextractor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.BusExtractor)
  return _internal_busextractor();
}
inline void SchemaItem::unsafe_arena_set_allocated_busextractor(
    ::Proto::SchemaItemBusExtractor* busextractor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(busextractor_);
  }
  busextractor_ = busextractor;
  if (busextractor) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.BusExtractor)
}
inline ::Proto::SchemaItemBusExtractor* SchemaItem::release_busextractor() {
  _has_bits_[1] &= ~0x00000002u;
  ::Proto::SchemaItemBusExtractor* temp = busextractor_;
  busextractor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemBusExtractor* SchemaItem::unsafe_arena_release_busextractor() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.BusExtractor)
  _has_bits_[1] &= ~0x00000002u;
  ::Proto::SchemaItemBusExtractor* temp = busextractor_;
  busextractor_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemBusExtractor* SchemaItem::_internal_mutable_busextractor() {
  _has_bits_[1] |= 0x00000002u;
  if (busextractor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemBusExtractor>(GetArena());
    busextractor_ = p;
  }
  return busextractor_;
}
inline ::Proto::SchemaItemBusExtractor* SchemaItem::mutable_busextractor() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.BusExtractor)
  return _internal_mutable_busextractor();
}
inline void SchemaItem::set_allocated_busextractor(::Proto::SchemaItemBusExtractor* busextractor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete busextractor_;
  }
  if (busextractor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(busextractor);
    if (message_arena != submessage_arena) {
      busextractor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, busextractor, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  busextractor_ = busextractor;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.BusExtractor)
}

// optional .Proto.SchemaItemLoopback LoopbackItem = 155;
inline bool SchemaItem::_internal_has_loopbackitem() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || loopbackitem_ != nullptr);
  return value;
}
inline bool SchemaItem::has_loopbackitem() const {
  return _internal_has_loopbackitem();
}
inline void SchemaItem::clear_loopbackitem() {
  if (loopbackitem_ != nullptr) loopbackitem_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::Proto::SchemaItemLoopback& SchemaItem::_internal_loopbackitem() const {
  const ::Proto::SchemaItemLoopback* p = loopbackitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemLoopback&>(
      ::Proto::_SchemaItemLoopback_default_instance_);
}
inline const ::Proto::SchemaItemLoopback& SchemaItem::loopbackitem() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.LoopbackItem)
  return _internal_loopbackitem();
}
inline void SchemaItem::unsafe_arena_set_allocated_loopbackitem(
    ::Proto::SchemaItemLoopback* loopbackitem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loopbackitem_);
  }
  loopbackitem_ = loopbackitem;
  if (loopbackitem) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.LoopbackItem)
}
inline ::Proto::SchemaItemLoopback* SchemaItem::release_loopbackitem() {
  _has_bits_[1] &= ~0x00000004u;
  ::Proto::SchemaItemLoopback* temp = loopbackitem_;
  loopbackitem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemLoopback* SchemaItem::unsafe_arena_release_loopbackitem() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.LoopbackItem)
  _has_bits_[1] &= ~0x00000004u;
  ::Proto::SchemaItemLoopback* temp = loopbackitem_;
  loopbackitem_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemLoopback* SchemaItem::_internal_mutable_loopbackitem() {
  _has_bits_[1] |= 0x00000004u;
  if (loopbackitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemLoopback>(GetArena());
    loopbackitem_ = p;
  }
  return loopbackitem_;
}
inline ::Proto::SchemaItemLoopback* SchemaItem::mutable_loopbackitem() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.LoopbackItem)
  return _internal_mutable_loopbackitem();
}
inline void SchemaItem::set_allocated_loopbackitem(::Proto::SchemaItemLoopback* loopbackitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loopbackitem_;
  }
  if (loopbackitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loopbackitem);
    if (message_arena != submessage_arena) {
      loopbackitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loopbackitem, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  loopbackitem_ = loopbackitem;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.LoopbackItem)
}

// optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
inline bool SchemaItem::_internal_has_loopbacksource() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || loopbacksource_ != nullptr);
  return value;
}
inline bool SchemaItem::has_loopbacksource() const {
  return _internal_has_loopbacksource();
}
inline void SchemaItem::clear_loopbacksource() {
  if (loopbacksource_ != nullptr) loopbacksource_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::Proto::SchemaItemLoopbackSource& SchemaItem::_internal_loopbacksource() const {
  const ::Proto::SchemaItemLoopbackSource* p = loopbacksource_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemLoopbackSource&>(
      ::Proto::_SchemaItemLoopbackSource_default_instance_);
}
inline const ::Proto::SchemaItemLoopbackSource& SchemaItem::loopbacksource() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.loopbackSource)
  return _internal_loopbacksource();
}
inline void SchemaItem::unsafe_arena_set_allocated_loopbacksource(
    ::Proto::SchemaItemLoopbackSource* loopbacksource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loopbacksource_);
  }
  loopbacksource_ = loopbacksource;
  if (loopbacksource) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.loopbackSource)
}
inline ::Proto::SchemaItemLoopbackSource* SchemaItem::release_loopbacksource() {
  _has_bits_[1] &= ~0x00000008u;
  ::Proto::SchemaItemLoopbackSource* temp = loopbacksource_;
  loopbacksource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemLoopbackSource* SchemaItem::unsafe_arena_release_loopbacksource() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.loopbackSource)
  _has_bits_[1] &= ~0x00000008u;
  ::Proto::SchemaItemLoopbackSource* temp = loopbacksource_;
  loopbacksource_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemLoopbackSource* SchemaItem::_internal_mutable_loopbacksource() {
  _has_bits_[1] |= 0x00000008u;
  if (loopbacksource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemLoopbackSource>(GetArena());
    loopbacksource_ = p;
  }
  return loopbacksource_;
}
inline ::Proto::SchemaItemLoopbackSource* SchemaItem::mutable_loopbacksource() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.loopbackSource)
  return _internal_mutable_loopbacksource();
}
inline void SchemaItem::set_allocated_loopbacksource(::Proto::SchemaItemLoopbackSource* loopbacksource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loopbacksource_;
  }
  if (loopbacksource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loopbacksource);
    if (message_arena != submessage_arena) {
      loopbacksource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loopbacksource, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  loopbacksource_ = loopbacksource;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.loopbackSource)
}

// optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
inline bool SchemaItem::_internal_has_loopbacktarget() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || loopbacktarget_ != nullptr);
  return value;
}
inline bool SchemaItem::has_loopbacktarget() const {
  return _internal_has_loopbacktarget();
}
inline void SchemaItem::clear_loopbacktarget() {
  if (loopbacktarget_ != nullptr) loopbacktarget_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::Proto::SchemaItemLoopbackTarget& SchemaItem::_internal_loopbacktarget() const {
  const ::Proto::SchemaItemLoopbackTarget* p = loopbacktarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemLoopbackTarget&>(
      ::Proto::_SchemaItemLoopbackTarget_default_instance_);
}
inline const ::Proto::SchemaItemLoopbackTarget& SchemaItem::loopbacktarget() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.loopbackTarget)
  return _internal_loopbacktarget();
}
inline void SchemaItem::unsafe_arena_set_allocated_loopbacktarget(
    ::Proto::SchemaItemLoopbackTarget* loopbacktarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loopbacktarget_);
  }
  loopbacktarget_ = loopbacktarget;
  if (loopbacktarget) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.loopbackTarget)
}
inline ::Proto::SchemaItemLoopbackTarget* SchemaItem::release_loopbacktarget() {
  _has_bits_[1] &= ~0x00000010u;
  ::Proto::SchemaItemLoopbackTarget* temp = loopbacktarget_;
  loopbacktarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemLoopbackTarget* SchemaItem::unsafe_arena_release_loopbacktarget() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.loopbackTarget)
  _has_bits_[1] &= ~0x00000010u;
  ::Proto::SchemaItemLoopbackTarget* temp = loopbacktarget_;
  loopbacktarget_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemLoopbackTarget* SchemaItem::_internal_mutable_loopbacktarget() {
  _has_bits_[1] |= 0x00000010u;
  if (loopbacktarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemLoopbackTarget>(GetArena());
    loopbacktarget_ = p;
  }
  return loopbacktarget_;
}
inline ::Proto::SchemaItemLoopbackTarget* SchemaItem::mutable_loopbacktarget() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.loopbackTarget)
  return _internal_mutable_loopbacktarget();
}
inline void SchemaItem::set_allocated_loopbacktarget(::Proto::SchemaItemLoopbackTarget* loopbacktarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loopbacktarget_;
  }
  if (loopbacktarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loopbacktarget);
    if (message_arena != submessage_arena) {
      loopbacktarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loopbacktarget, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  loopbacktarget_ = loopbacktarget;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.loopbackTarget)
}

// optional .Proto.SchemaItemControl control = 200;
inline bool SchemaItem::_internal_has_control() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || control_ != nullptr);
  return value;
}
inline bool SchemaItem::has_control() const {
  return _internal_has_control();
}
inline void SchemaItem::clear_control() {
  if (control_ != nullptr) control_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::Proto::SchemaItemControl& SchemaItem::_internal_control() const {
  const ::Proto::SchemaItemControl* p = control_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemControl&>(
      ::Proto::_SchemaItemControl_default_instance_);
}
inline const ::Proto::SchemaItemControl& SchemaItem::control() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.control)
  return _internal_control();
}
inline void SchemaItem::unsafe_arena_set_allocated_control(
    ::Proto::SchemaItemControl* control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  control_ = control;
  if (control) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.control)
}
inline ::Proto::SchemaItemControl* SchemaItem::release_control() {
  _has_bits_[1] &= ~0x00000020u;
  ::Proto::SchemaItemControl* temp = control_;
  control_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemControl* SchemaItem::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.control)
  _has_bits_[1] &= ~0x00000020u;
  ::Proto::SchemaItemControl* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemControl* SchemaItem::_internal_mutable_control() {
  _has_bits_[1] |= 0x00000020u;
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemControl>(GetArena());
    control_ = p;
  }
  return control_;
}
inline ::Proto::SchemaItemControl* SchemaItem::mutable_control() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.control)
  return _internal_mutable_control();
}
inline void SchemaItem::set_allocated_control(::Proto::SchemaItemControl* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.control)
}

// optional .Proto.SchemaItemPushButton pushButton = 210;
inline bool SchemaItem::_internal_has_pushbutton() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || pushbutton_ != nullptr);
  return value;
}
inline bool SchemaItem::has_pushbutton() const {
  return _internal_has_pushbutton();
}
inline void SchemaItem::clear_pushbutton() {
  if (pushbutton_ != nullptr) pushbutton_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::Proto::SchemaItemPushButton& SchemaItem::_internal_pushbutton() const {
  const ::Proto::SchemaItemPushButton* p = pushbutton_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemPushButton&>(
      ::Proto::_SchemaItemPushButton_default_instance_);
}
inline const ::Proto::SchemaItemPushButton& SchemaItem::pushbutton() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.pushButton)
  return _internal_pushbutton();
}
inline void SchemaItem::unsafe_arena_set_allocated_pushbutton(
    ::Proto::SchemaItemPushButton* pushbutton) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushbutton_);
  }
  pushbutton_ = pushbutton;
  if (pushbutton) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.pushButton)
}
inline ::Proto::SchemaItemPushButton* SchemaItem::release_pushbutton() {
  _has_bits_[1] &= ~0x00000040u;
  ::Proto::SchemaItemPushButton* temp = pushbutton_;
  pushbutton_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemPushButton* SchemaItem::unsafe_arena_release_pushbutton() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.pushButton)
  _has_bits_[1] &= ~0x00000040u;
  ::Proto::SchemaItemPushButton* temp = pushbutton_;
  pushbutton_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemPushButton* SchemaItem::_internal_mutable_pushbutton() {
  _has_bits_[1] |= 0x00000040u;
  if (pushbutton_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemPushButton>(GetArena());
    pushbutton_ = p;
  }
  return pushbutton_;
}
inline ::Proto::SchemaItemPushButton* SchemaItem::mutable_pushbutton() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.pushButton)
  return _internal_mutable_pushbutton();
}
inline void SchemaItem::set_allocated_pushbutton(::Proto::SchemaItemPushButton* pushbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pushbutton_;
  }
  if (pushbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pushbutton);
    if (message_arena != submessage_arena) {
      pushbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushbutton, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  pushbutton_ = pushbutton;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.pushButton)
}

// optional .Proto.SchemaItemLineEdit lineEdit = 211;
inline bool SchemaItem::_internal_has_lineedit() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || lineedit_ != nullptr);
  return value;
}
inline bool SchemaItem::has_lineedit() const {
  return _internal_has_lineedit();
}
inline void SchemaItem::clear_lineedit() {
  if (lineedit_ != nullptr) lineedit_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::Proto::SchemaItemLineEdit& SchemaItem::_internal_lineedit() const {
  const ::Proto::SchemaItemLineEdit* p = lineedit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaItemLineEdit&>(
      ::Proto::_SchemaItemLineEdit_default_instance_);
}
inline const ::Proto::SchemaItemLineEdit& SchemaItem::lineedit() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItem.lineEdit)
  return _internal_lineedit();
}
inline void SchemaItem::unsafe_arena_set_allocated_lineedit(
    ::Proto::SchemaItemLineEdit* lineedit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lineedit_);
  }
  lineedit_ = lineedit;
  if (lineedit) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItem.lineEdit)
}
inline ::Proto::SchemaItemLineEdit* SchemaItem::release_lineedit() {
  _has_bits_[1] &= ~0x00000080u;
  ::Proto::SchemaItemLineEdit* temp = lineedit_;
  lineedit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaItemLineEdit* SchemaItem::unsafe_arena_release_lineedit() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItem.lineEdit)
  _has_bits_[1] &= ~0x00000080u;
  ::Proto::SchemaItemLineEdit* temp = lineedit_;
  lineedit_ = nullptr;
  return temp;
}
inline ::Proto::SchemaItemLineEdit* SchemaItem::_internal_mutable_lineedit() {
  _has_bits_[1] |= 0x00000080u;
  if (lineedit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaItemLineEdit>(GetArena());
    lineedit_ = p;
  }
  return lineedit_;
}
inline ::Proto::SchemaItemLineEdit* SchemaItem::mutable_lineedit() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItem.lineEdit)
  return _internal_mutable_lineedit();
}
inline void SchemaItem::set_allocated_lineedit(::Proto::SchemaItemLineEdit* lineedit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lineedit_;
  }
  if (lineedit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lineedit);
    if (message_arena != submessage_arena) {
      lineedit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lineedit, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  lineedit_ = lineedit;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItem.lineEdit)
}

// -------------------------------------------------------------------

// PosRectImpl

// required double leftDocPt = 1;
inline bool PosRectImpl::_internal_has_leftdocpt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PosRectImpl::has_leftdocpt() const {
  return _internal_has_leftdocpt();
}
inline void PosRectImpl::clear_leftdocpt() {
  leftdocpt_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PosRectImpl::_internal_leftdocpt() const {
  return leftdocpt_;
}
inline double PosRectImpl::leftdocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosRectImpl.leftDocPt)
  return _internal_leftdocpt();
}
inline void PosRectImpl::_internal_set_leftdocpt(double value) {
  _has_bits_[0] |= 0x00000001u;
  leftdocpt_ = value;
}
inline void PosRectImpl::set_leftdocpt(double value) {
  _internal_set_leftdocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosRectImpl.leftDocPt)
}

// required double topDocPt = 2;
inline bool PosRectImpl::_internal_has_topdocpt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PosRectImpl::has_topdocpt() const {
  return _internal_has_topdocpt();
}
inline void PosRectImpl::clear_topdocpt() {
  topdocpt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PosRectImpl::_internal_topdocpt() const {
  return topdocpt_;
}
inline double PosRectImpl::topdocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosRectImpl.topDocPt)
  return _internal_topdocpt();
}
inline void PosRectImpl::_internal_set_topdocpt(double value) {
  _has_bits_[0] |= 0x00000002u;
  topdocpt_ = value;
}
inline void PosRectImpl::set_topdocpt(double value) {
  _internal_set_topdocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosRectImpl.topDocPt)
}

// required double widthDocPt = 3;
inline bool PosRectImpl::_internal_has_widthdocpt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PosRectImpl::has_widthdocpt() const {
  return _internal_has_widthdocpt();
}
inline void PosRectImpl::clear_widthdocpt() {
  widthdocpt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PosRectImpl::_internal_widthdocpt() const {
  return widthdocpt_;
}
inline double PosRectImpl::widthdocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosRectImpl.widthDocPt)
  return _internal_widthdocpt();
}
inline void PosRectImpl::_internal_set_widthdocpt(double value) {
  _has_bits_[0] |= 0x00000004u;
  widthdocpt_ = value;
}
inline void PosRectImpl::set_widthdocpt(double value) {
  _internal_set_widthdocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosRectImpl.widthDocPt)
}

// required double heightDocPt = 4;
inline bool PosRectImpl::_internal_has_heightdocpt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PosRectImpl::has_heightdocpt() const {
  return _internal_has_heightdocpt();
}
inline void PosRectImpl::clear_heightdocpt() {
  heightdocpt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PosRectImpl::_internal_heightdocpt() const {
  return heightdocpt_;
}
inline double PosRectImpl::heightdocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosRectImpl.heightDocPt)
  return _internal_heightdocpt();
}
inline void PosRectImpl::_internal_set_heightdocpt(double value) {
  _has_bits_[0] |= 0x00000008u;
  heightdocpt_ = value;
}
inline void PosRectImpl::set_heightdocpt(double value) {
  _internal_set_heightdocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosRectImpl.heightDocPt)
}

// -------------------------------------------------------------------

// PosLineImpl

// required double startXDocPt = 1;
inline bool PosLineImpl::_internal_has_startxdocpt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PosLineImpl::has_startxdocpt() const {
  return _internal_has_startxdocpt();
}
inline void PosLineImpl::clear_startxdocpt() {
  startxdocpt_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PosLineImpl::_internal_startxdocpt() const {
  return startxdocpt_;
}
inline double PosLineImpl::startxdocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosLineImpl.startXDocPt)
  return _internal_startxdocpt();
}
inline void PosLineImpl::_internal_set_startxdocpt(double value) {
  _has_bits_[0] |= 0x00000001u;
  startxdocpt_ = value;
}
inline void PosLineImpl::set_startxdocpt(double value) {
  _internal_set_startxdocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosLineImpl.startXDocPt)
}

// required double startYDocPt = 2;
inline bool PosLineImpl::_internal_has_startydocpt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PosLineImpl::has_startydocpt() const {
  return _internal_has_startydocpt();
}
inline void PosLineImpl::clear_startydocpt() {
  startydocpt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PosLineImpl::_internal_startydocpt() const {
  return startydocpt_;
}
inline double PosLineImpl::startydocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosLineImpl.startYDocPt)
  return _internal_startydocpt();
}
inline void PosLineImpl::_internal_set_startydocpt(double value) {
  _has_bits_[0] |= 0x00000002u;
  startydocpt_ = value;
}
inline void PosLineImpl::set_startydocpt(double value) {
  _internal_set_startydocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosLineImpl.startYDocPt)
}

// required double endXDocPt = 3;
inline bool PosLineImpl::_internal_has_endxdocpt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PosLineImpl::has_endxdocpt() const {
  return _internal_has_endxdocpt();
}
inline void PosLineImpl::clear_endxdocpt() {
  endxdocpt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PosLineImpl::_internal_endxdocpt() const {
  return endxdocpt_;
}
inline double PosLineImpl::endxdocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosLineImpl.endXDocPt)
  return _internal_endxdocpt();
}
inline void PosLineImpl::_internal_set_endxdocpt(double value) {
  _has_bits_[0] |= 0x00000004u;
  endxdocpt_ = value;
}
inline void PosLineImpl::set_endxdocpt(double value) {
  _internal_set_endxdocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosLineImpl.endXDocPt)
}

// required double endYDocPt = 4;
inline bool PosLineImpl::_internal_has_endydocpt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PosLineImpl::has_endydocpt() const {
  return _internal_has_endydocpt();
}
inline void PosLineImpl::clear_endydocpt() {
  endydocpt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PosLineImpl::_internal_endydocpt() const {
  return endydocpt_;
}
inline double PosLineImpl::endydocpt() const {
  // @@protoc_insertion_point(field_get:Proto.PosLineImpl.endYDocPt)
  return _internal_endydocpt();
}
inline void PosLineImpl::_internal_set_endydocpt(double value) {
  _has_bits_[0] |= 0x00000008u;
  endydocpt_ = value;
}
inline void PosLineImpl::set_endydocpt(double value) {
  _internal_set_endydocpt(value);
  // @@protoc_insertion_point(field_set:Proto.PosLineImpl.endYDocPt)
}

// -------------------------------------------------------------------

// PosConnectionImpl

// repeated .Proto.SchemaPoint points = 1;
inline int PosConnectionImpl::_internal_points_size() const {
  return points_.size();
}
inline int PosConnectionImpl::points_size() const {
  return _internal_points_size();
}
inline void PosConnectionImpl::clear_points() {
  points_.Clear();
}
inline ::Proto::SchemaPoint* PosConnectionImpl::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PosConnectionImpl.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaPoint >*
PosConnectionImpl::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PosConnectionImpl.points)
  return &points_;
}
inline const ::Proto::SchemaPoint& PosConnectionImpl::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::Proto::SchemaPoint& PosConnectionImpl::points(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PosConnectionImpl.points)
  return _internal_points(index);
}
inline ::Proto::SchemaPoint* PosConnectionImpl::_internal_add_points() {
  return points_.Add();
}
inline ::Proto::SchemaPoint* PosConnectionImpl::add_points() {
  // @@protoc_insertion_point(field_add:Proto.PosConnectionImpl.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaPoint >&
PosConnectionImpl::points() const {
  // @@protoc_insertion_point(field_list:Proto.PosConnectionImpl.points)
  return points_;
}

// -------------------------------------------------------------------

// SchemaItemRect

// required double weight = 1;
inline bool SchemaItemRect::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemRect::has_weight() const {
  return _internal_has_weight();
}
inline void SchemaItemRect::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SchemaItemRect::_internal_weight() const {
  return weight_;
}
inline double SchemaItemRect::weight() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.weight)
  return _internal_weight();
}
inline void SchemaItemRect::_internal_set_weight(double value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void SchemaItemRect::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.weight)
}

// required uint32 lineColor = 2;
inline bool SchemaItemRect::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemRect::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void SchemaItemRect::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemRect::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemRect::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.lineColor)
  return _internal_linecolor();
}
inline void SchemaItemRect::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  linecolor_ = value;
}
inline void SchemaItemRect::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.lineColor)
}

// required uint32 fillColor = 3;
inline bool SchemaItemRect::_internal_has_fillcolor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemRect::has_fillcolor() const {
  return _internal_has_fillcolor();
}
inline void SchemaItemRect::clear_fillcolor() {
  fillcolor_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemRect::_internal_fillcolor() const {
  return fillcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemRect::fillcolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.fillColor)
  return _internal_fillcolor();
}
inline void SchemaItemRect::_internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fillcolor_ = value;
}
inline void SchemaItemRect::set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fillcolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.fillColor)
}

// required .Proto.wstring text = 4;
inline bool SchemaItemRect::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || text_ != nullptr);
  return value;
}
inline bool SchemaItemRect::has_text() const {
  return _internal_has_text();
}
inline void SchemaItemRect::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::wstring& SchemaItemRect::_internal_text() const {
  const ::Proto::wstring* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& SchemaItemRect::text() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.text)
  return _internal_text();
}
inline void SchemaItemRect::unsafe_arena_set_allocated_text(
    ::Proto::wstring* text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemRect.text)
}
inline ::Proto::wstring* SchemaItemRect::release_text() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = text_;
  text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* SchemaItemRect::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemRect.text)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::wstring* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::Proto::wstring* SchemaItemRect::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    text_ = p;
  }
  return text_;
}
inline ::Proto::wstring* SchemaItemRect::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemRect.text)
  return _internal_mutable_text();
}
inline void SchemaItemRect::set_allocated_text(::Proto::wstring* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemRect.text)
}

// required uint32 textColor = 5;
inline bool SchemaItemRect::_internal_has_textcolor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemRect::has_textcolor() const {
  return _internal_has_textcolor();
}
inline void SchemaItemRect::clear_textcolor() {
  textcolor_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemRect::_internal_textcolor() const {
  return textcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemRect::textcolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.textColor)
  return _internal_textcolor();
}
inline void SchemaItemRect::_internal_set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  textcolor_ = value;
}
inline void SchemaItemRect::set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_textcolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.textColor)
}

// required .Proto.FontParam font = 6;
inline bool SchemaItemRect::_internal_has_font() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || font_ != nullptr);
  return value;
}
inline bool SchemaItemRect::has_font() const {
  return _internal_has_font();
}
inline void SchemaItemRect::clear_font() {
  if (font_ != nullptr) font_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::FontParam& SchemaItemRect::_internal_font() const {
  const ::Proto::FontParam* p = font_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FontParam&>(
      ::Proto::_FontParam_default_instance_);
}
inline const ::Proto::FontParam& SchemaItemRect::font() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.font)
  return _internal_font();
}
inline void SchemaItemRect::unsafe_arena_set_allocated_font(
    ::Proto::FontParam* font) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_);
  }
  font_ = font;
  if (font) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemRect.font)
}
inline ::Proto::FontParam* SchemaItemRect::release_font() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FontParam* SchemaItemRect::unsafe_arena_release_font() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemRect.font)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  return temp;
}
inline ::Proto::FontParam* SchemaItemRect::_internal_mutable_font() {
  _has_bits_[0] |= 0x00000002u;
  if (font_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FontParam>(GetArena());
    font_ = p;
  }
  return font_;
}
inline ::Proto::FontParam* SchemaItemRect::mutable_font() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemRect.font)
  return _internal_mutable_font();
}
inline void SchemaItemRect::set_allocated_font(::Proto::FontParam* font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete font_;
  }
  if (font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(font);
    if (message_arena != submessage_arena) {
      font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  font_ = font;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemRect.font)
}

// required bool fill = 7;
inline bool SchemaItemRect::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemRect::has_fill() const {
  return _internal_has_fill();
}
inline void SchemaItemRect::clear_fill() {
  fill_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SchemaItemRect::_internal_fill() const {
  return fill_;
}
inline bool SchemaItemRect::fill() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.fill)
  return _internal_fill();
}
inline void SchemaItemRect::_internal_set_fill(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fill_ = value;
}
inline void SchemaItemRect::set_fill(bool value) {
  _internal_set_fill(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.fill)
}

// optional bool drawrect = 8 [default = true];
inline bool SchemaItemRect::_internal_has_drawrect() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SchemaItemRect::has_drawrect() const {
  return _internal_has_drawrect();
}
inline void SchemaItemRect::clear_drawrect() {
  drawrect_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SchemaItemRect::_internal_drawrect() const {
  return drawrect_;
}
inline bool SchemaItemRect::drawrect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.drawrect)
  return _internal_drawrect();
}
inline void SchemaItemRect::_internal_set_drawrect(bool value) {
  _has_bits_[0] |= 0x00000200u;
  drawrect_ = value;
}
inline void SchemaItemRect::set_drawrect(bool value) {
  _internal_set_drawrect(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.drawrect)
}

// optional int32 horzAlign = 9 [default = 4];
inline bool SchemaItemRect::_internal_has_horzalign() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SchemaItemRect::has_horzalign() const {
  return _internal_has_horzalign();
}
inline void SchemaItemRect::clear_horzalign() {
  horzalign_ = 4;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemRect::_internal_horzalign() const {
  return horzalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemRect::horzalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.horzAlign)
  return _internal_horzalign();
}
inline void SchemaItemRect::_internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  horzalign_ = value;
}
inline void SchemaItemRect::set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_horzalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.horzAlign)
}

// optional int32 vertAlign = 10 [default = 128];
inline bool SchemaItemRect::_internal_has_vertalign() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SchemaItemRect::has_vertalign() const {
  return _internal_has_vertalign();
}
inline void SchemaItemRect::clear_vertalign() {
  vertalign_ = 128;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemRect::_internal_vertalign() const {
  return vertalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemRect::vertalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.vertAlign)
  return _internal_vertalign();
}
inline void SchemaItemRect::_internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  vertalign_ = value;
}
inline void SchemaItemRect::set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.vertAlign)
}

// optional bool wordWrap = 11 [default = false];
inline bool SchemaItemRect::_internal_has_wordwrap() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemRect::has_wordwrap() const {
  return _internal_has_wordwrap();
}
inline void SchemaItemRect::clear_wordwrap() {
  wordwrap_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SchemaItemRect::_internal_wordwrap() const {
  return wordwrap_;
}
inline bool SchemaItemRect::wordwrap() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemRect.wordWrap)
  return _internal_wordwrap();
}
inline void SchemaItemRect::_internal_set_wordwrap(bool value) {
  _has_bits_[0] |= 0x00000080u;
  wordwrap_ = value;
}
inline void SchemaItemRect::set_wordwrap(bool value) {
  _internal_set_wordwrap(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemRect.wordWrap)
}

// -------------------------------------------------------------------

// SchemaItemLine

// required double weight = 1;
inline bool SchemaItemLine::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemLine::has_weight() const {
  return _internal_has_weight();
}
inline void SchemaItemLine::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SchemaItemLine::_internal_weight() const {
  return weight_;
}
inline double SchemaItemLine::weight() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLine.weight)
  return _internal_weight();
}
inline void SchemaItemLine::_internal_set_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  weight_ = value;
}
inline void SchemaItemLine::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLine.weight)
}

// required uint32 lineColor = 2;
inline bool SchemaItemLine::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemLine::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void SchemaItemLine::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemLine::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemLine::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLine.lineColor)
  return _internal_linecolor();
}
inline void SchemaItemLine::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  linecolor_ = value;
}
inline void SchemaItemLine::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLine.lineColor)
}

// -------------------------------------------------------------------

// SchemaItemPath

// required double weight = 1;
inline bool SchemaItemPath::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemPath::has_weight() const {
  return _internal_has_weight();
}
inline void SchemaItemPath::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SchemaItemPath::_internal_weight() const {
  return weight_;
}
inline double SchemaItemPath::weight() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPath.weight)
  return _internal_weight();
}
inline void SchemaItemPath::_internal_set_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  weight_ = value;
}
inline void SchemaItemPath::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPath.weight)
}

// required uint32 lineColor = 2;
inline bool SchemaItemPath::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemPath::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void SchemaItemPath::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemPath::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemPath::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPath.lineColor)
  return _internal_linecolor();
}
inline void SchemaItemPath::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  linecolor_ = value;
}
inline void SchemaItemPath::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPath.lineColor)
}

// -------------------------------------------------------------------

// SchemaItemImage

// optional .Proto.ImageItem image = 1;
inline bool SchemaItemImage::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool SchemaItemImage::has_image() const {
  return _internal_has_image();
}
inline void SchemaItemImage::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::ImageItem& SchemaItemImage::_internal_image() const {
  const ::Proto::ImageItem* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::ImageItem&>(
      ::Proto::_ImageItem_default_instance_);
}
inline const ::Proto::ImageItem& SchemaItemImage::image() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImage.image)
  return _internal_image();
}
inline void SchemaItemImage::unsafe_arena_set_allocated_image(
    ::Proto::ImageItem* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemImage.image)
}
inline ::Proto::ImageItem* SchemaItemImage::release_image() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::ImageItem* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::ImageItem* SchemaItemImage::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemImage.image)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::ImageItem* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Proto::ImageItem* SchemaItemImage::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000001u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ImageItem>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::Proto::ImageItem* SchemaItemImage::mutable_image() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemImage.image)
  return _internal_mutable_image();
}
inline void SchemaItemImage::set_allocated_image(::Proto::ImageItem* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemImage.image)
}

// -------------------------------------------------------------------

// SchemaItemFrame

// optional string schemaId = 1 [default = "SCHEMAID"];
inline bool SchemaItemFrame::_internal_has_schemaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemFrame::has_schemaid() const {
  return _internal_has_schemaid();
}
inline void SchemaItemFrame::clear_schemaid() {
  schemaid_.ClearToDefault(::Proto::SchemaItemFrame::_i_give_permission_to_break_this_code_default_schemaid_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemFrame::schemaid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemFrame.schemaId)
  if (schemaid_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_schemaid_.get();
  return _internal_schemaid();
}
inline void SchemaItemFrame::set_schemaid(const std::string& value) {
  _internal_set_schemaid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemFrame.schemaId)
}
inline std::string* SchemaItemFrame::mutable_schemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemFrame.schemaId)
  return _internal_mutable_schemaid();
}
inline const std::string& SchemaItemFrame::_internal_schemaid() const {
  return schemaid_.Get();
}
inline void SchemaItemFrame::_internal_set_schemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void SchemaItemFrame::set_schemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemFrame.schemaId)
}
inline void SchemaItemFrame::set_schemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemFrame.schemaId)
}
inline void SchemaItemFrame::set_schemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemFrame.schemaId)
}
inline std::string* SchemaItemFrame::_internal_mutable_schemaid() {
  _has_bits_[0] |= 0x00000001u;
  return schemaid_.Mutable(::Proto::SchemaItemFrame::_i_give_permission_to_break_this_code_default_schemaid_, GetArena());
}
inline std::string* SchemaItemFrame::release_schemaid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemFrame.schemaId)
  if (!_internal_has_schemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return schemaid_.ReleaseNonDefault(nullptr, GetArena());
}
inline void SchemaItemFrame::set_allocated_schemaid(std::string* schemaid) {
  if (schemaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  schemaid_.SetAllocated(nullptr, schemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemFrame.schemaId)
}

// optional bool allowScale = 2 [default = true];
inline bool SchemaItemFrame::_internal_has_allowscale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemFrame::has_allowscale() const {
  return _internal_has_allowscale();
}
inline void SchemaItemFrame::clear_allowscale() {
  allowscale_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SchemaItemFrame::_internal_allowscale() const {
  return allowscale_;
}
inline bool SchemaItemFrame::allowscale() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemFrame.allowScale)
  return _internal_allowscale();
}
inline void SchemaItemFrame::_internal_set_allowscale(bool value) {
  _has_bits_[0] |= 0x00000002u;
  allowscale_ = value;
}
inline void SchemaItemFrame::set_allowscale(bool value) {
  _internal_set_allowscale(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemFrame.allowScale)
}

// optional bool keepAspectRatio = 3 [default = true];
inline bool SchemaItemFrame::_internal_has_keepaspectratio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemFrame::has_keepaspectratio() const {
  return _internal_has_keepaspectratio();
}
inline void SchemaItemFrame::clear_keepaspectratio() {
  keepaspectratio_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SchemaItemFrame::_internal_keepaspectratio() const {
  return keepaspectratio_;
}
inline bool SchemaItemFrame::keepaspectratio() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemFrame.keepAspectRatio)
  return _internal_keepaspectratio();
}
inline void SchemaItemFrame::_internal_set_keepaspectratio(bool value) {
  _has_bits_[0] |= 0x00000004u;
  keepaspectratio_ = value;
}
inline void SchemaItemFrame::set_keepaspectratio(bool value) {
  _internal_set_keepaspectratio(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemFrame.keepAspectRatio)
}

// -------------------------------------------------------------------

// VFrameSetPoint

// optional uint32 color = 3;
inline bool VFrameSetPoint::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VFrameSetPoint::has_color() const {
  return _internal_has_color();
}
inline void VFrameSetPoint::clear_color() {
  color_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VFrameSetPoint::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VFrameSetPoint::color() const {
  // @@protoc_insertion_point(field_get:Proto.VFrameSetPoint.color)
  return _internal_color();
}
inline void VFrameSetPoint::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void VFrameSetPoint::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:Proto.VFrameSetPoint.color)
}

// optional int32 colorSource = 4 [default = 0];
inline bool VFrameSetPoint::_internal_has_colorsource() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VFrameSetPoint::has_colorsource() const {
  return _internal_has_colorsource();
}
inline void VFrameSetPoint::clear_colorsource() {
  colorsource_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VFrameSetPoint::_internal_colorsource() const {
  return colorsource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VFrameSetPoint::colorsource() const {
  // @@protoc_insertion_point(field_get:Proto.VFrameSetPoint.colorSource)
  return _internal_colorsource();
}
inline void VFrameSetPoint::_internal_set_colorsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  colorsource_ = value;
}
inline void VFrameSetPoint::set_colorsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colorsource(value);
  // @@protoc_insertion_point(field_set:Proto.VFrameSetPoint.colorSource)
}

// optional string outputAppSignalId = 20;
inline bool VFrameSetPoint::_internal_has_outputappsignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VFrameSetPoint::has_outputappsignalid() const {
  return _internal_has_outputappsignalid();
}
inline void VFrameSetPoint::clear_outputappsignalid() {
  outputappsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VFrameSetPoint::outputappsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.VFrameSetPoint.outputAppSignalId)
  return _internal_outputappsignalid();
}
inline void VFrameSetPoint::set_outputappsignalid(const std::string& value) {
  _internal_set_outputappsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.VFrameSetPoint.outputAppSignalId)
}
inline std::string* VFrameSetPoint::mutable_outputappsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.VFrameSetPoint.outputAppSignalId)
  return _internal_mutable_outputappsignalid();
}
inline const std::string& VFrameSetPoint::_internal_outputappsignalid() const {
  return outputappsignalid_.Get();
}
inline void VFrameSetPoint::_internal_set_outputappsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  outputappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VFrameSetPoint::set_outputappsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  outputappsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.VFrameSetPoint.outputAppSignalId)
}
inline void VFrameSetPoint::set_outputappsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  outputappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.VFrameSetPoint.outputAppSignalId)
}
inline void VFrameSetPoint::set_outputappsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  outputappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.VFrameSetPoint.outputAppSignalId)
}
inline std::string* VFrameSetPoint::_internal_mutable_outputappsignalid() {
  _has_bits_[0] |= 0x00000001u;
  return outputappsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VFrameSetPoint::release_outputappsignalid() {
  // @@protoc_insertion_point(field_release:Proto.VFrameSetPoint.outputAppSignalId)
  if (!_internal_has_outputappsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return outputappsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VFrameSetPoint::set_allocated_outputappsignalid(std::string* outputappsignalid) {
  if (outputappsignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  outputappsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputappsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.VFrameSetPoint.outputAppSignalId)
}

// -------------------------------------------------------------------

// IndicatorHistogramVert

// optional double startValue = 1;
inline bool IndicatorHistogramVert::_internal_has_startvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_startvalue() const {
  return _internal_has_startvalue();
}
inline void IndicatorHistogramVert::clear_startvalue() {
  startvalue_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double IndicatorHistogramVert::_internal_startvalue() const {
  return startvalue_;
}
inline double IndicatorHistogramVert::startvalue() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.startValue)
  return _internal_startvalue();
}
inline void IndicatorHistogramVert::_internal_set_startvalue(double value) {
  _has_bits_[0] |= 0x00000001u;
  startvalue_ = value;
}
inline void IndicatorHistogramVert::set_startvalue(double value) {
  _internal_set_startvalue(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.startValue)
}

// optional double endValue = 2;
inline bool IndicatorHistogramVert::_internal_has_endvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_endvalue() const {
  return _internal_has_endvalue();
}
inline void IndicatorHistogramVert::clear_endvalue() {
  endvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double IndicatorHistogramVert::_internal_endvalue() const {
  return endvalue_;
}
inline double IndicatorHistogramVert::endvalue() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.endValue)
  return _internal_endvalue();
}
inline void IndicatorHistogramVert::_internal_set_endvalue(double value) {
  _has_bits_[0] |= 0x00000002u;
  endvalue_ = value;
}
inline void IndicatorHistogramVert::set_endvalue(double value) {
  _internal_set_endvalue(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.endValue)
}

// optional double barWidth = 16;
inline bool IndicatorHistogramVert::_internal_has_barwidth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_barwidth() const {
  return _internal_has_barwidth();
}
inline void IndicatorHistogramVert::clear_barwidth() {
  barwidth_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double IndicatorHistogramVert::_internal_barwidth() const {
  return barwidth_;
}
inline double IndicatorHistogramVert::barwidth() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.barWidth)
  return _internal_barwidth();
}
inline void IndicatorHistogramVert::_internal_set_barwidth(double value) {
  _has_bits_[0] |= 0x00000004u;
  barwidth_ = value;
}
inline void IndicatorHistogramVert::set_barwidth(double value) {
  _internal_set_barwidth(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.barWidth)
}

// optional double leftMargin = 20;
inline bool IndicatorHistogramVert::_internal_has_leftmargin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline void IndicatorHistogramVert::clear_leftmargin() {
  leftmargin_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double IndicatorHistogramVert::_internal_leftmargin() const {
  return leftmargin_;
}
inline double IndicatorHistogramVert::leftmargin() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.leftMargin)
  return _internal_leftmargin();
}
inline void IndicatorHistogramVert::_internal_set_leftmargin(double value) {
  _has_bits_[0] |= 0x00000008u;
  leftmargin_ = value;
}
inline void IndicatorHistogramVert::set_leftmargin(double value) {
  _internal_set_leftmargin(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.leftMargin)
}

// optional double topMargin = 21;
inline bool IndicatorHistogramVert::_internal_has_topmargin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_topmargin() const {
  return _internal_has_topmargin();
}
inline void IndicatorHistogramVert::clear_topmargin() {
  topmargin_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double IndicatorHistogramVert::_internal_topmargin() const {
  return topmargin_;
}
inline double IndicatorHistogramVert::topmargin() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.topMargin)
  return _internal_topmargin();
}
inline void IndicatorHistogramVert::_internal_set_topmargin(double value) {
  _has_bits_[0] |= 0x00000010u;
  topmargin_ = value;
}
inline void IndicatorHistogramVert::set_topmargin(double value) {
  _internal_set_topmargin(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.topMargin)
}

// optional double rightMargin = 22;
inline bool IndicatorHistogramVert::_internal_has_rightmargin() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline void IndicatorHistogramVert::clear_rightmargin() {
  rightmargin_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double IndicatorHistogramVert::_internal_rightmargin() const {
  return rightmargin_;
}
inline double IndicatorHistogramVert::rightmargin() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.rightMargin)
  return _internal_rightmargin();
}
inline void IndicatorHistogramVert::_internal_set_rightmargin(double value) {
  _has_bits_[0] |= 0x00000040u;
  rightmargin_ = value;
}
inline void IndicatorHistogramVert::set_rightmargin(double value) {
  _internal_set_rightmargin(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.rightMargin)
}

// optional double bottomMargin = 23;
inline bool IndicatorHistogramVert::_internal_has_bottommargin() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline void IndicatorHistogramVert::clear_bottommargin() {
  bottommargin_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double IndicatorHistogramVert::_internal_bottommargin() const {
  return bottommargin_;
}
inline double IndicatorHistogramVert::bottommargin() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.bottomMargin)
  return _internal_bottommargin();
}
inline void IndicatorHistogramVert::_internal_set_bottommargin(double value) {
  _has_bits_[0] |= 0x00000080u;
  bottommargin_ = value;
}
inline void IndicatorHistogramVert::set_bottommargin(double value) {
  _internal_set_bottommargin(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.bottomMargin)
}

// optional bool drawBarRect = 32 [default = true];
inline bool IndicatorHistogramVert::_internal_has_drawbarrect() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawbarrect() const {
  return _internal_has_drawbarrect();
}
inline void IndicatorHistogramVert::clear_drawbarrect() {
  drawbarrect_ = true;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool IndicatorHistogramVert::_internal_drawbarrect() const {
  return drawbarrect_;
}
inline bool IndicatorHistogramVert::drawbarrect() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawBarRect)
  return _internal_drawbarrect();
}
inline void IndicatorHistogramVert::_internal_set_drawbarrect(bool value) {
  _has_bits_[0] |= 0x00000800u;
  drawbarrect_ = value;
}
inline void IndicatorHistogramVert::set_drawbarrect(bool value) {
  _internal_set_drawbarrect(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawBarRect)
}

// optional bool drawGrid = 40 [default = true];
inline bool IndicatorHistogramVert::_internal_has_drawgrid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawgrid() const {
  return _internal_has_drawgrid();
}
inline void IndicatorHistogramVert::clear_drawgrid() {
  drawgrid_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool IndicatorHistogramVert::_internal_drawgrid() const {
  return drawgrid_;
}
inline bool IndicatorHistogramVert::drawgrid() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawGrid)
  return _internal_drawgrid();
}
inline void IndicatorHistogramVert::_internal_set_drawgrid(bool value) {
  _has_bits_[0] |= 0x00001000u;
  drawgrid_ = value;
}
inline void IndicatorHistogramVert::set_drawgrid(bool value) {
  _internal_set_drawgrid(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawGrid)
}

// optional bool drawGridForAllBars = 41 [default = false];
inline bool IndicatorHistogramVert::_internal_has_drawgridforallbars() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawgridforallbars() const {
  return _internal_has_drawgridforallbars();
}
inline void IndicatorHistogramVert::clear_drawgridforallbars() {
  drawgridforallbars_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool IndicatorHistogramVert::_internal_drawgridforallbars() const {
  return drawgridforallbars_;
}
inline bool IndicatorHistogramVert::drawgridforallbars() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawGridForAllBars)
  return _internal_drawgridforallbars();
}
inline void IndicatorHistogramVert::_internal_set_drawgridforallbars(bool value) {
  _has_bits_[0] |= 0x00000100u;
  drawgridforallbars_ = value;
}
inline void IndicatorHistogramVert::set_drawgridforallbars(bool value) {
  _internal_set_drawgridforallbars(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawGridForAllBars)
}

// optional bool drawGridValues = 42 [default = true];
inline bool IndicatorHistogramVert::_internal_has_drawgridvalues() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawgridvalues() const {
  return _internal_has_drawgridvalues();
}
inline void IndicatorHistogramVert::clear_drawgridvalues() {
  drawgridvalues_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool IndicatorHistogramVert::_internal_drawgridvalues() const {
  return drawgridvalues_;
}
inline bool IndicatorHistogramVert::drawgridvalues() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawGridValues)
  return _internal_drawgridvalues();
}
inline void IndicatorHistogramVert::_internal_set_drawgridvalues(bool value) {
  _has_bits_[0] |= 0x00002000u;
  drawgridvalues_ = value;
}
inline void IndicatorHistogramVert::set_drawgridvalues(bool value) {
  _internal_set_drawgridvalues(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawGridValues)
}

// optional bool drawGridValueForAllBars = 43 [default = false];
inline bool IndicatorHistogramVert::_internal_has_drawgridvalueforallbars() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawgridvalueforallbars() const {
  return _internal_has_drawgridvalueforallbars();
}
inline void IndicatorHistogramVert::clear_drawgridvalueforallbars() {
  drawgridvalueforallbars_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool IndicatorHistogramVert::_internal_drawgridvalueforallbars() const {
  return drawgridvalueforallbars_;
}
inline bool IndicatorHistogramVert::drawgridvalueforallbars() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawGridValueForAllBars)
  return _internal_drawgridvalueforallbars();
}
inline void IndicatorHistogramVert::_internal_set_drawgridvalueforallbars(bool value) {
  _has_bits_[0] |= 0x00000200u;
  drawgridvalueforallbars_ = value;
}
inline void IndicatorHistogramVert::set_drawgridvalueforallbars(bool value) {
  _internal_set_drawgridvalueforallbars(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawGridValueForAllBars)
}

// optional bool drawGridValueUnits = 44 [default = true];
inline bool IndicatorHistogramVert::_internal_has_drawgridvalueunits() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawgridvalueunits() const {
  return _internal_has_drawgridvalueunits();
}
inline void IndicatorHistogramVert::clear_drawgridvalueunits() {
  drawgridvalueunits_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool IndicatorHistogramVert::_internal_drawgridvalueunits() const {
  return drawgridvalueunits_;
}
inline bool IndicatorHistogramVert::drawgridvalueunits() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawGridValueUnits)
  return _internal_drawgridvalueunits();
}
inline void IndicatorHistogramVert::_internal_set_drawgridvalueunits(bool value) {
  _has_bits_[0] |= 0x00004000u;
  drawgridvalueunits_ = value;
}
inline void IndicatorHistogramVert::set_drawgridvalueunits(bool value) {
  _internal_set_drawgridvalueunits(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawGridValueUnits)
}

// optional double linearGridMainStep = 50 [default = 50];
inline bool IndicatorHistogramVert::_internal_has_lineargridmainstep() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_lineargridmainstep() const {
  return _internal_has_lineargridmainstep();
}
inline void IndicatorHistogramVert::clear_lineargridmainstep() {
  lineargridmainstep_ = 50;
  _has_bits_[0] &= ~0x00008000u;
}
inline double IndicatorHistogramVert::_internal_lineargridmainstep() const {
  return lineargridmainstep_;
}
inline double IndicatorHistogramVert::lineargridmainstep() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.linearGridMainStep)
  return _internal_lineargridmainstep();
}
inline void IndicatorHistogramVert::_internal_set_lineargridmainstep(double value) {
  _has_bits_[0] |= 0x00008000u;
  lineargridmainstep_ = value;
}
inline void IndicatorHistogramVert::set_lineargridmainstep(double value) {
  _internal_set_lineargridmainstep(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.linearGridMainStep)
}

// optional double linearGridSmallStep = 51 [default = 10];
inline bool IndicatorHistogramVert::_internal_has_lineargridsmallstep() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_lineargridsmallstep() const {
  return _internal_has_lineargridsmallstep();
}
inline void IndicatorHistogramVert::clear_lineargridsmallstep() {
  lineargridsmallstep_ = 10;
  _has_bits_[0] &= ~0x00010000u;
}
inline double IndicatorHistogramVert::_internal_lineargridsmallstep() const {
  return lineargridsmallstep_;
}
inline double IndicatorHistogramVert::lineargridsmallstep() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.linearGridSmallStep)
  return _internal_lineargridsmallstep();
}
inline void IndicatorHistogramVert::_internal_set_lineargridsmallstep(double value) {
  _has_bits_[0] |= 0x00010000u;
  lineargridsmallstep_ = value;
}
inline void IndicatorHistogramVert::set_lineargridsmallstep(double value) {
  _internal_set_lineargridsmallstep(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.linearGridSmallStep)
}

// optional double logarithmicGridMainStep = 52 [default = 1];
inline bool IndicatorHistogramVert::_internal_has_logarithmicgridmainstep() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_logarithmicgridmainstep() const {
  return _internal_has_logarithmicgridmainstep();
}
inline void IndicatorHistogramVert::clear_logarithmicgridmainstep() {
  logarithmicgridmainstep_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline double IndicatorHistogramVert::_internal_logarithmicgridmainstep() const {
  return logarithmicgridmainstep_;
}
inline double IndicatorHistogramVert::logarithmicgridmainstep() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.logarithmicGridMainStep)
  return _internal_logarithmicgridmainstep();
}
inline void IndicatorHistogramVert::_internal_set_logarithmicgridmainstep(double value) {
  _has_bits_[0] |= 0x00020000u;
  logarithmicgridmainstep_ = value;
}
inline void IndicatorHistogramVert::set_logarithmicgridmainstep(double value) {
  _internal_set_logarithmicgridmainstep(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.logarithmicGridMainStep)
}

// optional double logarithmicGridSmallStep = 53 [default = 0.5];
inline bool IndicatorHistogramVert::_internal_has_logarithmicgridsmallstep() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_logarithmicgridsmallstep() const {
  return _internal_has_logarithmicgridsmallstep();
}
inline void IndicatorHistogramVert::clear_logarithmicgridsmallstep() {
  logarithmicgridsmallstep_ = 0.5;
  _has_bits_[0] &= ~0x00040000u;
}
inline double IndicatorHistogramVert::_internal_logarithmicgridsmallstep() const {
  return logarithmicgridsmallstep_;
}
inline double IndicatorHistogramVert::logarithmicgridsmallstep() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.logarithmicGridSmallStep)
  return _internal_logarithmicgridsmallstep();
}
inline void IndicatorHistogramVert::_internal_set_logarithmicgridsmallstep(double value) {
  _has_bits_[0] |= 0x00040000u;
  logarithmicgridsmallstep_ = value;
}
inline void IndicatorHistogramVert::set_logarithmicgridsmallstep(double value) {
  _internal_set_logarithmicgridsmallstep(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.logarithmicGridSmallStep)
}

// optional int32 drawSetpoints = 70 [default = 0];
inline bool IndicatorHistogramVert::_internal_has_drawsetpoints() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_drawsetpoints() const {
  return _internal_has_drawsetpoints();
}
inline void IndicatorHistogramVert::clear_drawsetpoints() {
  drawsetpoints_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndicatorHistogramVert::_internal_drawsetpoints() const {
  return drawsetpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndicatorHistogramVert::drawsetpoints() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.drawSetpoints)
  return _internal_drawsetpoints();
}
inline void IndicatorHistogramVert::_internal_set_drawsetpoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  drawsetpoints_ = value;
}
inline void IndicatorHistogramVert::set_drawsetpoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drawsetpoints(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.drawSetpoints)
}

// repeated .Proto.VFrameSetPoint customSetPoints = 72;
inline int IndicatorHistogramVert::_internal_customsetpoints_size() const {
  return customsetpoints_.size();
}
inline int IndicatorHistogramVert::customsetpoints_size() const {
  return _internal_customsetpoints_size();
}
inline void IndicatorHistogramVert::clear_customsetpoints() {
  customsetpoints_.Clear();
}
inline ::Proto::VFrameSetPoint* IndicatorHistogramVert::mutable_customsetpoints(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.IndicatorHistogramVert.customSetPoints)
  return customsetpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::VFrameSetPoint >*
IndicatorHistogramVert::mutable_customsetpoints() {
  // @@protoc_insertion_point(field_mutable_list:Proto.IndicatorHistogramVert.customSetPoints)
  return &customsetpoints_;
}
inline const ::Proto::VFrameSetPoint& IndicatorHistogramVert::_internal_customsetpoints(int index) const {
  return customsetpoints_.Get(index);
}
inline const ::Proto::VFrameSetPoint& IndicatorHistogramVert::customsetpoints(int index) const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.customSetPoints)
  return _internal_customsetpoints(index);
}
inline ::Proto::VFrameSetPoint* IndicatorHistogramVert::_internal_add_customsetpoints() {
  return customsetpoints_.Add();
}
inline ::Proto::VFrameSetPoint* IndicatorHistogramVert::add_customsetpoints() {
  // @@protoc_insertion_point(field_add:Proto.IndicatorHistogramVert.customSetPoints)
  return _internal_add_customsetpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::VFrameSetPoint >&
IndicatorHistogramVert::customsetpoints() const {
  // @@protoc_insertion_point(field_list:Proto.IndicatorHistogramVert.customSetPoints)
  return customsetpoints_;
}

// optional int32 scaleType = 75 [default = 0];
inline bool IndicatorHistogramVert::_internal_has_scaletype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IndicatorHistogramVert::has_scaletype() const {
  return _internal_has_scaletype();
}
inline void IndicatorHistogramVert::clear_scaletype() {
  scaletype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndicatorHistogramVert::_internal_scaletype() const {
  return scaletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndicatorHistogramVert::scaletype() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorHistogramVert.scaleType)
  return _internal_scaletype();
}
inline void IndicatorHistogramVert::_internal_set_scaletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  scaletype_ = value;
}
inline void IndicatorHistogramVert::set_scaletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scaletype(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorHistogramVert.scaleType)
}

// -------------------------------------------------------------------

// IndicatorArrowIndicator

// optional double startValue = 1;
inline bool IndicatorArrowIndicator::_internal_has_startvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IndicatorArrowIndicator::has_startvalue() const {
  return _internal_has_startvalue();
}
inline void IndicatorArrowIndicator::clear_startvalue() {
  startvalue_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double IndicatorArrowIndicator::_internal_startvalue() const {
  return startvalue_;
}
inline double IndicatorArrowIndicator::startvalue() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorArrowIndicator.startValue)
  return _internal_startvalue();
}
inline void IndicatorArrowIndicator::_internal_set_startvalue(double value) {
  _has_bits_[0] |= 0x00000001u;
  startvalue_ = value;
}
inline void IndicatorArrowIndicator::set_startvalue(double value) {
  _internal_set_startvalue(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorArrowIndicator.startValue)
}

// optional double endValue = 2;
inline bool IndicatorArrowIndicator::_internal_has_endvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IndicatorArrowIndicator::has_endvalue() const {
  return _internal_has_endvalue();
}
inline void IndicatorArrowIndicator::clear_endvalue() {
  endvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double IndicatorArrowIndicator::_internal_endvalue() const {
  return endvalue_;
}
inline double IndicatorArrowIndicator::endvalue() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorArrowIndicator.endValue)
  return _internal_endvalue();
}
inline void IndicatorArrowIndicator::_internal_set_endvalue(double value) {
  _has_bits_[0] |= 0x00000002u;
  endvalue_ = value;
}
inline void IndicatorArrowIndicator::set_endvalue(double value) {
  _internal_set_endvalue(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorArrowIndicator.endValue)
}

// optional double startAngle = 16;
inline bool IndicatorArrowIndicator::_internal_has_startangle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IndicatorArrowIndicator::has_startangle() const {
  return _internal_has_startangle();
}
inline void IndicatorArrowIndicator::clear_startangle() {
  startangle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double IndicatorArrowIndicator::_internal_startangle() const {
  return startangle_;
}
inline double IndicatorArrowIndicator::startangle() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorArrowIndicator.startAngle)
  return _internal_startangle();
}
inline void IndicatorArrowIndicator::_internal_set_startangle(double value) {
  _has_bits_[0] |= 0x00000004u;
  startangle_ = value;
}
inline void IndicatorArrowIndicator::set_startangle(double value) {
  _internal_set_startangle(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorArrowIndicator.startAngle)
}

// optional double spanAngle = 17;
inline bool IndicatorArrowIndicator::_internal_has_spanangle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IndicatorArrowIndicator::has_spanangle() const {
  return _internal_has_spanangle();
}
inline void IndicatorArrowIndicator::clear_spanangle() {
  spanangle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double IndicatorArrowIndicator::_internal_spanangle() const {
  return spanangle_;
}
inline double IndicatorArrowIndicator::spanangle() const {
  // @@protoc_insertion_point(field_get:Proto.IndicatorArrowIndicator.spanAngle)
  return _internal_spanangle();
}
inline void IndicatorArrowIndicator::_internal_set_spanangle(double value) {
  _has_bits_[0] |= 0x00000008u;
  spanangle_ = value;
}
inline void IndicatorArrowIndicator::set_spanangle(double value) {
  _internal_set_spanangle(value);
  // @@protoc_insertion_point(field_set:Proto.IndicatorArrowIndicator.spanAngle)
}

// -------------------------------------------------------------------

// SchemaItemIndicator

// optional string signalIds = 1;
inline bool SchemaItemIndicator::_internal_has_signalids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_signalids() const {
  return _internal_has_signalids();
}
inline void SchemaItemIndicator::clear_signalids() {
  signalids_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemIndicator::signalids() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.signalIds)
  return _internal_signalids();
}
inline void SchemaItemIndicator::set_signalids(const std::string& value) {
  _internal_set_signalids(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.signalIds)
}
inline std::string* SchemaItemIndicator::mutable_signalids() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemIndicator.signalIds)
  return _internal_mutable_signalids();
}
inline const std::string& SchemaItemIndicator::_internal_signalids() const {
  return signalids_.Get();
}
inline void SchemaItemIndicator::_internal_set_signalids(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemIndicator::set_signalids(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemIndicator.signalIds)
}
inline void SchemaItemIndicator::set_signalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemIndicator.signalIds)
}
inline void SchemaItemIndicator::set_signalids(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemIndicator.signalIds)
}
inline std::string* SchemaItemIndicator::_internal_mutable_signalids() {
  _has_bits_[0] |= 0x00000001u;
  return signalids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemIndicator::release_signalids() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemIndicator.signalIds)
  if (!_internal_has_signalids()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signalids_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemIndicator::set_allocated_signalids(std::string* signalids) {
  if (signalids != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signalids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemIndicator.signalIds)
}

// optional int32 signalSource = 2 [default = 0];
inline bool SchemaItemIndicator::_internal_has_signalsource() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_signalsource() const {
  return _internal_has_signalsource();
}
inline void SchemaItemIndicator::clear_signalsource() {
  signalsource_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemIndicator::_internal_signalsource() const {
  return signalsource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemIndicator::signalsource() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.signalSource)
  return _internal_signalsource();
}
inline void SchemaItemIndicator::_internal_set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  signalsource_ = value;
}
inline void SchemaItemIndicator::set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalsource(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.signalSource)
}

// optional int32 precision = 3 [default = 2];
inline bool SchemaItemIndicator::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_precision() const {
  return _internal_has_precision();
}
inline void SchemaItemIndicator::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemIndicator::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemIndicator::precision() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.precision)
  return _internal_precision();
}
inline void SchemaItemIndicator::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  precision_ = value;
}
inline void SchemaItemIndicator::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.precision)
}

// optional int32 analogFormat = 4 [default = 102];
inline bool SchemaItemIndicator::_internal_has_analogformat() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_analogformat() const {
  return _internal_has_analogformat();
}
inline void SchemaItemIndicator::clear_analogformat() {
  analogformat_ = 102;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemIndicator::_internal_analogformat() const {
  return analogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemIndicator::analogformat() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.analogFormat)
  return _internal_analogformat();
}
inline void SchemaItemIndicator::_internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  analogformat_ = value;
}
inline void SchemaItemIndicator::set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogformat(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.analogFormat)
}

// optional .Proto.FontParam font = 9;
inline bool SchemaItemIndicator::_internal_has_font() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || font_ != nullptr);
  return value;
}
inline bool SchemaItemIndicator::has_font() const {
  return _internal_has_font();
}
inline void SchemaItemIndicator::clear_font() {
  if (font_ != nullptr) font_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::FontParam& SchemaItemIndicator::_internal_font() const {
  const ::Proto::FontParam* p = font_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FontParam&>(
      ::Proto::_FontParam_default_instance_);
}
inline const ::Proto::FontParam& SchemaItemIndicator::font() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.font)
  return _internal_font();
}
inline void SchemaItemIndicator::unsafe_arena_set_allocated_font(
    ::Proto::FontParam* font) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_);
  }
  font_ = font;
  if (font) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemIndicator.font)
}
inline ::Proto::FontParam* SchemaItemIndicator::release_font() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FontParam* SchemaItemIndicator::unsafe_arena_release_font() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemIndicator.font)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  return temp;
}
inline ::Proto::FontParam* SchemaItemIndicator::_internal_mutable_font() {
  _has_bits_[0] |= 0x00000002u;
  if (font_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FontParam>(GetArena());
    font_ = p;
  }
  return font_;
}
inline ::Proto::FontParam* SchemaItemIndicator::mutable_font() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemIndicator.font)
  return _internal_mutable_font();
}
inline void SchemaItemIndicator::set_allocated_font(::Proto::FontParam* font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete font_;
  }
  if (font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(font);
    if (message_arena != submessage_arena) {
      font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  font_ = font;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemIndicator.font)
}

// optional bool drawRect = 10 [default = false];
inline bool SchemaItemIndicator::_internal_has_drawrect() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_drawrect() const {
  return _internal_has_drawrect();
}
inline void SchemaItemIndicator::clear_drawrect() {
  drawrect_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SchemaItemIndicator::_internal_drawrect() const {
  return drawrect_;
}
inline bool SchemaItemIndicator::drawrect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.drawRect)
  return _internal_drawrect();
}
inline void SchemaItemIndicator::_internal_set_drawrect(bool value) {
  _has_bits_[0] |= 0x00000020u;
  drawrect_ = value;
}
inline void SchemaItemIndicator::set_drawrect(bool value) {
  _internal_set_drawrect(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.drawRect)
}

// optional double lineWeight = 11 [default = 0];
inline bool SchemaItemIndicator::_internal_has_lineweight() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_lineweight() const {
  return _internal_has_lineweight();
}
inline void SchemaItemIndicator::clear_lineweight() {
  lineweight_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SchemaItemIndicator::_internal_lineweight() const {
  return lineweight_;
}
inline double SchemaItemIndicator::lineweight() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.lineWeight)
  return _internal_lineweight();
}
inline void SchemaItemIndicator::_internal_set_lineweight(double value) {
  _has_bits_[0] |= 0x00000040u;
  lineweight_ = value;
}
inline void SchemaItemIndicator::set_lineweight(double value) {
  _internal_set_lineweight(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.lineWeight)
}

// optional uint32 backgroundColor = 16;
inline bool SchemaItemIndicator::_internal_has_backgroundcolor() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_backgroundcolor() const {
  return _internal_has_backgroundcolor();
}
inline void SchemaItemIndicator::clear_backgroundcolor() {
  backgroundcolor_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::_internal_backgroundcolor() const {
  return backgroundcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::backgroundcolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.backgroundColor)
  return _internal_backgroundcolor();
}
inline void SchemaItemIndicator::_internal_set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  backgroundcolor_ = value;
}
inline void SchemaItemIndicator::set_backgroundcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_backgroundcolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.backgroundColor)
}

// optional uint32 lineColor = 17;
inline bool SchemaItemIndicator::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void SchemaItemIndicator::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.lineColor)
  return _internal_linecolor();
}
inline void SchemaItemIndicator::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  linecolor_ = value;
}
inline void SchemaItemIndicator::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.lineColor)
}

// repeated uint32 signalColors = 18;
inline int SchemaItemIndicator::_internal_signalcolors_size() const {
  return signalcolors_.size();
}
inline int SchemaItemIndicator::signalcolors_size() const {
  return _internal_signalcolors_size();
}
inline void SchemaItemIndicator::clear_signalcolors() {
  signalcolors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::_internal_signalcolors(int index) const {
  return signalcolors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::signalcolors(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.signalColors)
  return _internal_signalcolors(index);
}
inline void SchemaItemIndicator::set_signalcolors(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  signalcolors_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.signalColors)
}
inline void SchemaItemIndicator::_internal_add_signalcolors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  signalcolors_.Add(value);
}
inline void SchemaItemIndicator::add_signalcolors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_signalcolors(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaItemIndicator.signalColors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SchemaItemIndicator::_internal_signalcolors() const {
  return signalcolors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SchemaItemIndicator::signalcolors() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemIndicator.signalColors)
  return _internal_signalcolors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SchemaItemIndicator::_internal_mutable_signalcolors() {
  return &signalcolors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SchemaItemIndicator::mutable_signalcolors() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemIndicator.signalColors)
  return _internal_mutable_signalcolors();
}

// optional uint32 type = 32 [default = 0];
inline bool SchemaItemIndicator::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemIndicator::has_type() const {
  return _internal_has_type();
}
inline void SchemaItemIndicator::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemIndicator::type() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.type)
  return _internal_type();
}
inline void SchemaItemIndicator::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void SchemaItemIndicator::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemIndicator.type)
}

// optional .Proto.IndicatorHistogramVert indicatorHistogramVert = 48;
inline bool SchemaItemIndicator::_internal_has_indicatorhistogramvert() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || indicatorhistogramvert_ != nullptr);
  return value;
}
inline bool SchemaItemIndicator::has_indicatorhistogramvert() const {
  return _internal_has_indicatorhistogramvert();
}
inline void SchemaItemIndicator::clear_indicatorhistogramvert() {
  if (indicatorhistogramvert_ != nullptr) indicatorhistogramvert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::IndicatorHistogramVert& SchemaItemIndicator::_internal_indicatorhistogramvert() const {
  const ::Proto::IndicatorHistogramVert* p = indicatorhistogramvert_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::IndicatorHistogramVert&>(
      ::Proto::_IndicatorHistogramVert_default_instance_);
}
inline const ::Proto::IndicatorHistogramVert& SchemaItemIndicator::indicatorhistogramvert() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.indicatorHistogramVert)
  return _internal_indicatorhistogramvert();
}
inline void SchemaItemIndicator::unsafe_arena_set_allocated_indicatorhistogramvert(
    ::Proto::IndicatorHistogramVert* indicatorhistogramvert) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indicatorhistogramvert_);
  }
  indicatorhistogramvert_ = indicatorhistogramvert;
  if (indicatorhistogramvert) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemIndicator.indicatorHistogramVert)
}
inline ::Proto::IndicatorHistogramVert* SchemaItemIndicator::release_indicatorhistogramvert() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::IndicatorHistogramVert* temp = indicatorhistogramvert_;
  indicatorhistogramvert_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::IndicatorHistogramVert* SchemaItemIndicator::unsafe_arena_release_indicatorhistogramvert() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemIndicator.indicatorHistogramVert)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::IndicatorHistogramVert* temp = indicatorhistogramvert_;
  indicatorhistogramvert_ = nullptr;
  return temp;
}
inline ::Proto::IndicatorHistogramVert* SchemaItemIndicator::_internal_mutable_indicatorhistogramvert() {
  _has_bits_[0] |= 0x00000004u;
  if (indicatorhistogramvert_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::IndicatorHistogramVert>(GetArena());
    indicatorhistogramvert_ = p;
  }
  return indicatorhistogramvert_;
}
inline ::Proto::IndicatorHistogramVert* SchemaItemIndicator::mutable_indicatorhistogramvert() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemIndicator.indicatorHistogramVert)
  return _internal_mutable_indicatorhistogramvert();
}
inline void SchemaItemIndicator::set_allocated_indicatorhistogramvert(::Proto::IndicatorHistogramVert* indicatorhistogramvert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indicatorhistogramvert_;
  }
  if (indicatorhistogramvert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indicatorhistogramvert);
    if (message_arena != submessage_arena) {
      indicatorhistogramvert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicatorhistogramvert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  indicatorhistogramvert_ = indicatorhistogramvert;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemIndicator.indicatorHistogramVert)
}

// optional .Proto.IndicatorArrowIndicator indicatorArrowIndicator = 49;
inline bool SchemaItemIndicator::_internal_has_indicatorarrowindicator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || indicatorarrowindicator_ != nullptr);
  return value;
}
inline bool SchemaItemIndicator::has_indicatorarrowindicator() const {
  return _internal_has_indicatorarrowindicator();
}
inline void SchemaItemIndicator::clear_indicatorarrowindicator() {
  if (indicatorarrowindicator_ != nullptr) indicatorarrowindicator_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::IndicatorArrowIndicator& SchemaItemIndicator::_internal_indicatorarrowindicator() const {
  const ::Proto::IndicatorArrowIndicator* p = indicatorarrowindicator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::IndicatorArrowIndicator&>(
      ::Proto::_IndicatorArrowIndicator_default_instance_);
}
inline const ::Proto::IndicatorArrowIndicator& SchemaItemIndicator::indicatorarrowindicator() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemIndicator.indicatorArrowIndicator)
  return _internal_indicatorarrowindicator();
}
inline void SchemaItemIndicator::unsafe_arena_set_allocated_indicatorarrowindicator(
    ::Proto::IndicatorArrowIndicator* indicatorarrowindicator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indicatorarrowindicator_);
  }
  indicatorarrowindicator_ = indicatorarrowindicator;
  if (indicatorarrowindicator) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemIndicator.indicatorArrowIndicator)
}
inline ::Proto::IndicatorArrowIndicator* SchemaItemIndicator::release_indicatorarrowindicator() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::IndicatorArrowIndicator* temp = indicatorarrowindicator_;
  indicatorarrowindicator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::IndicatorArrowIndicator* SchemaItemIndicator::unsafe_arena_release_indicatorarrowindicator() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemIndicator.indicatorArrowIndicator)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::IndicatorArrowIndicator* temp = indicatorarrowindicator_;
  indicatorarrowindicator_ = nullptr;
  return temp;
}
inline ::Proto::IndicatorArrowIndicator* SchemaItemIndicator::_internal_mutable_indicatorarrowindicator() {
  _has_bits_[0] |= 0x00000008u;
  if (indicatorarrowindicator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::IndicatorArrowIndicator>(GetArena());
    indicatorarrowindicator_ = p;
  }
  return indicatorarrowindicator_;
}
inline ::Proto::IndicatorArrowIndicator* SchemaItemIndicator::mutable_indicatorarrowindicator() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemIndicator.indicatorArrowIndicator)
  return _internal_mutable_indicatorarrowindicator();
}
inline void SchemaItemIndicator::set_allocated_indicatorarrowindicator(::Proto::IndicatorArrowIndicator* indicatorarrowindicator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indicatorarrowindicator_;
  }
  if (indicatorarrowindicator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indicatorarrowindicator);
    if (message_arena != submessage_arena) {
      indicatorarrowindicator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicatorarrowindicator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  indicatorarrowindicator_ = indicatorarrowindicator;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemIndicator.indicatorArrowIndicator)
}

// -------------------------------------------------------------------

// FblConnectionPoint

// optional .Proto.SchemaPoint point = 1;
inline bool FblConnectionPoint::_internal_has_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || point_ != nullptr);
  return value;
}
inline bool FblConnectionPoint::has_point() const {
  return _internal_has_point();
}
inline void FblConnectionPoint::clear_point() {
  if (point_ != nullptr) point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::SchemaPoint& FblConnectionPoint::_internal_point() const {
  const ::Proto::SchemaPoint* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::SchemaPoint&>(
      ::Proto::_SchemaPoint_default_instance_);
}
inline const ::Proto::SchemaPoint& FblConnectionPoint::point() const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.point)
  return _internal_point();
}
inline void FblConnectionPoint::unsafe_arena_set_allocated_point(
    ::Proto::SchemaPoint* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FblConnectionPoint.point)
}
inline ::Proto::SchemaPoint* FblConnectionPoint::release_point() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::SchemaPoint* temp = point_;
  point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::SchemaPoint* FblConnectionPoint::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:Proto.FblConnectionPoint.point)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::SchemaPoint* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::Proto::SchemaPoint* FblConnectionPoint::_internal_mutable_point() {
  _has_bits_[0] |= 0x00000002u;
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::SchemaPoint>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::Proto::SchemaPoint* FblConnectionPoint::mutable_point() {
  // @@protoc_insertion_point(field_mutable:Proto.FblConnectionPoint.point)
  return _internal_mutable_point();
}
inline void FblConnectionPoint::set_allocated_point(::Proto::SchemaPoint* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:Proto.FblConnectionPoint.point)
}

// optional .Proto.ConnectionDirrection dirrection = 2;
inline bool FblConnectionPoint::_internal_has_dirrection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FblConnectionPoint::has_dirrection() const {
  return _internal_has_dirrection();
}
inline void FblConnectionPoint::clear_dirrection() {
  dirrection_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Proto::ConnectionDirrection FblConnectionPoint::_internal_dirrection() const {
  return static_cast< ::Proto::ConnectionDirrection >(dirrection_);
}
inline ::Proto::ConnectionDirrection FblConnectionPoint::dirrection() const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.dirrection)
  return _internal_dirrection();
}
inline void FblConnectionPoint::_internal_set_dirrection(::Proto::ConnectionDirrection value) {
  assert(::Proto::ConnectionDirrection_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  dirrection_ = value;
}
inline void FblConnectionPoint::set_dirrection(::Proto::ConnectionDirrection value) {
  _internal_set_dirrection(value);
  // @@protoc_insertion_point(field_set:Proto.FblConnectionPoint.dirrection)
}

// optional .Proto.Uuid uuid = 3;
inline bool FblConnectionPoint::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool FblConnectionPoint::has_uuid() const {
  return _internal_has_uuid();
}
inline void FblConnectionPoint::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::Uuid& FblConnectionPoint::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& FblConnectionPoint::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.uuid)
  return _internal_uuid();
}
inline void FblConnectionPoint::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FblConnectionPoint.uuid)
}
inline ::Proto::Uuid* FblConnectionPoint::release_uuid() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* FblConnectionPoint::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.FblConnectionPoint.uuid)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* FblConnectionPoint::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000004u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* FblConnectionPoint::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.FblConnectionPoint.uuid)
  return _internal_mutable_uuid();
}
inline void FblConnectionPoint::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.FblConnectionPoint.uuid)
}

// optional int32 operandIndex = 4 [default = -1];
inline bool FblConnectionPoint::_internal_has_operandindex() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FblConnectionPoint::has_operandindex() const {
  return _internal_has_operandindex();
}
inline void FblConnectionPoint::clear_operandindex() {
  operandindex_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblConnectionPoint::_internal_operandindex() const {
  return operandindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblConnectionPoint::operandindex() const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.operandIndex)
  return _internal_operandindex();
}
inline void FblConnectionPoint::_internal_set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  operandindex_ = value;
}
inline void FblConnectionPoint::set_operandindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operandindex(value);
  // @@protoc_insertion_point(field_set:Proto.FblConnectionPoint.operandIndex)
}

// optional string caption = 5 [default = ""];
inline bool FblConnectionPoint::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FblConnectionPoint::has_caption() const {
  return _internal_has_caption();
}
inline void FblConnectionPoint::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FblConnectionPoint::caption() const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.caption)
  return _internal_caption();
}
inline void FblConnectionPoint::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.FblConnectionPoint.caption)
}
inline std::string* FblConnectionPoint::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.FblConnectionPoint.caption)
  return _internal_mutable_caption();
}
inline const std::string& FblConnectionPoint::_internal_caption() const {
  return caption_.Get();
}
inline void FblConnectionPoint::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FblConnectionPoint::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.FblConnectionPoint.caption)
}
inline void FblConnectionPoint::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.FblConnectionPoint.caption)
}
inline void FblConnectionPoint::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.FblConnectionPoint.caption)
}
inline std::string* FblConnectionPoint::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FblConnectionPoint::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.FblConnectionPoint.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FblConnectionPoint::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.FblConnectionPoint.caption)
}

// repeated .Proto.Uuid associatedIos = 6;
inline int FblConnectionPoint::_internal_associatedios_size() const {
  return associatedios_.size();
}
inline int FblConnectionPoint::associatedios_size() const {
  return _internal_associatedios_size();
}
inline void FblConnectionPoint::clear_associatedios() {
  associatedios_.Clear();
}
inline ::Proto::Uuid* FblConnectionPoint::mutable_associatedios(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.FblConnectionPoint.associatedIos)
  return associatedios_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >*
FblConnectionPoint::mutable_associatedios() {
  // @@protoc_insertion_point(field_mutable_list:Proto.FblConnectionPoint.associatedIos)
  return &associatedios_;
}
inline const ::Proto::Uuid& FblConnectionPoint::_internal_associatedios(int index) const {
  return associatedios_.Get(index);
}
inline const ::Proto::Uuid& FblConnectionPoint::associatedios(int index) const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.associatedIos)
  return _internal_associatedios(index);
}
inline ::Proto::Uuid* FblConnectionPoint::_internal_add_associatedios() {
  return associatedios_.Add();
}
inline ::Proto::Uuid* FblConnectionPoint::add_associatedios() {
  // @@protoc_insertion_point(field_add:Proto.FblConnectionPoint.associatedIos)
  return _internal_add_associatedios();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >&
FblConnectionPoint::associatedios() const {
  // @@protoc_insertion_point(field_list:Proto.FblConnectionPoint.associatedIos)
  return associatedios_;
}

// optional int32 signalType = 7 [default = 0];
inline bool FblConnectionPoint::_internal_has_signaltype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FblConnectionPoint::has_signaltype() const {
  return _internal_has_signaltype();
}
inline void FblConnectionPoint::clear_signaltype() {
  signaltype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblConnectionPoint::_internal_signaltype() const {
  return signaltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblConnectionPoint::signaltype() const {
  // @@protoc_insertion_point(field_get:Proto.FblConnectionPoint.signalType)
  return _internal_signaltype();
}
inline void FblConnectionPoint::_internal_set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  signaltype_ = value;
}
inline void FblConnectionPoint::set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signaltype(value);
  // @@protoc_insertion_point(field_set:Proto.FblConnectionPoint.signalType)
}

// -------------------------------------------------------------------

// FblItem

// repeated .Proto.FblConnectionPoint points = 1;
inline int FblItem::_internal_points_size() const {
  return points_.size();
}
inline int FblItem::points_size() const {
  return _internal_points_size();
}
inline void FblItem::clear_points() {
  points_.Clear();
}
inline ::Proto::FblConnectionPoint* FblItem::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.FblItem.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::FblConnectionPoint >*
FblItem::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Proto.FblItem.points)
  return &points_;
}
inline const ::Proto::FblConnectionPoint& FblItem::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::Proto::FblConnectionPoint& FblItem::points(int index) const {
  // @@protoc_insertion_point(field_get:Proto.FblItem.points)
  return _internal_points(index);
}
inline ::Proto::FblConnectionPoint* FblItem::_internal_add_points() {
  return points_.Add();
}
inline ::Proto::FblConnectionPoint* FblItem::add_points() {
  // @@protoc_insertion_point(field_add:Proto.FblItem.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::FblConnectionPoint >&
FblItem::points() const {
  // @@protoc_insertion_point(field_list:Proto.FblItem.points)
  return points_;
}

// -------------------------------------------------------------------

// FblItemRect

// required double weight = 1;
inline bool FblItemRect::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FblItemRect::has_weight() const {
  return _internal_has_weight();
}
inline void FblItemRect::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FblItemRect::_internal_weight() const {
  return weight_;
}
inline double FblItemRect::weight() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.weight)
  return _internal_weight();
}
inline void FblItemRect::_internal_set_weight(double value) {
  _has_bits_[0] |= 0x00000008u;
  weight_ = value;
}
inline void FblItemRect::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.weight)
}

// required uint32 lineColor = 2;
inline bool FblItemRect::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FblItemRect::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void FblItemRect::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemRect::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemRect::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.lineColor)
  return _internal_linecolor();
}
inline void FblItemRect::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  linecolor_ = value;
}
inline void FblItemRect::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.lineColor)
}

// required uint32 fillColor = 3;
inline bool FblItemRect::_internal_has_fillcolor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FblItemRect::has_fillcolor() const {
  return _internal_has_fillcolor();
}
inline void FblItemRect::clear_fillcolor() {
  fillcolor_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemRect::_internal_fillcolor() const {
  return fillcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemRect::fillcolor() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.fillColor)
  return _internal_fillcolor();
}
inline void FblItemRect::_internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  fillcolor_ = value;
}
inline void FblItemRect::set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fillcolor(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.fillColor)
}

// required uint32 textColor = 4;
inline bool FblItemRect::_internal_has_textcolor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FblItemRect::has_textcolor() const {
  return _internal_has_textcolor();
}
inline void FblItemRect::clear_textcolor() {
  textcolor_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemRect::_internal_textcolor() const {
  return textcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemRect::textcolor() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.textColor)
  return _internal_textcolor();
}
inline void FblItemRect::_internal_set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  textcolor_ = value;
}
inline void FblItemRect::set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_textcolor(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.textColor)
}

// required .Proto.FontParam font = 5;
inline bool FblItemRect::_internal_has_font() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || font_ != nullptr);
  return value;
}
inline bool FblItemRect::has_font() const {
  return _internal_has_font();
}
inline void FblItemRect::clear_font() {
  if (font_ != nullptr) font_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::FontParam& FblItemRect::_internal_font() const {
  const ::Proto::FontParam* p = font_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FontParam&>(
      ::Proto::_FontParam_default_instance_);
}
inline const ::Proto::FontParam& FblItemRect::font() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.font)
  return _internal_font();
}
inline void FblItemRect::unsafe_arena_set_allocated_font(
    ::Proto::FontParam* font) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_);
  }
  font_ = font;
  if (font) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.FblItemRect.font)
}
inline ::Proto::FontParam* FblItemRect::release_font() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FontParam* FblItemRect::unsafe_arena_release_font() {
  // @@protoc_insertion_point(field_release:Proto.FblItemRect.font)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  return temp;
}
inline ::Proto::FontParam* FblItemRect::_internal_mutable_font() {
  _has_bits_[0] |= 0x00000004u;
  if (font_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FontParam>(GetArena());
    font_ = p;
  }
  return font_;
}
inline ::Proto::FontParam* FblItemRect::mutable_font() {
  // @@protoc_insertion_point(field_mutable:Proto.FblItemRect.font)
  return _internal_mutable_font();
}
inline void FblItemRect::set_allocated_font(::Proto::FontParam* font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete font_;
  }
  if (font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(font);
    if (message_arena != submessage_arena) {
      font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  font_ = font;
  // @@protoc_insertion_point(field_set_allocated:Proto.FblItemRect.font)
}

// optional string obsoleteLabel = 6;
inline bool FblItemRect::_internal_has_obsoletelabel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FblItemRect::has_obsoletelabel() const {
  return _internal_has_obsoletelabel();
}
inline void FblItemRect::clear_obsoletelabel() {
  obsoletelabel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FblItemRect::obsoletelabel() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.obsoleteLabel)
  return _internal_obsoletelabel();
}
inline void FblItemRect::set_obsoletelabel(const std::string& value) {
  _internal_set_obsoletelabel(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.obsoleteLabel)
}
inline std::string* FblItemRect::mutable_obsoletelabel() {
  // @@protoc_insertion_point(field_mutable:Proto.FblItemRect.obsoleteLabel)
  return _internal_mutable_obsoletelabel();
}
inline const std::string& FblItemRect::_internal_obsoletelabel() const {
  return obsoletelabel_.Get();
}
inline void FblItemRect::_internal_set_obsoletelabel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obsoletelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FblItemRect::set_obsoletelabel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obsoletelabel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.FblItemRect.obsoleteLabel)
}
inline void FblItemRect::set_obsoletelabel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obsoletelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.FblItemRect.obsoleteLabel)
}
inline void FblItemRect::set_obsoletelabel(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obsoletelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.FblItemRect.obsoleteLabel)
}
inline std::string* FblItemRect::_internal_mutable_obsoletelabel() {
  _has_bits_[0] |= 0x00000001u;
  return obsoletelabel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FblItemRect::release_obsoletelabel() {
  // @@protoc_insertion_point(field_release:Proto.FblItemRect.obsoleteLabel)
  if (!_internal_has_obsoletelabel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obsoletelabel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FblItemRect::set_allocated_obsoletelabel(std::string* obsoletelabel) {
  if (obsoletelabel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsoletelabel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsoletelabel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.FblItemRect.obsoleteLabel)
}

// optional string userText = 7;
inline bool FblItemRect::_internal_has_usertext() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FblItemRect::has_usertext() const {
  return _internal_has_usertext();
}
inline void FblItemRect::clear_usertext() {
  usertext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FblItemRect::usertext() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.userText)
  return _internal_usertext();
}
inline void FblItemRect::set_usertext(const std::string& value) {
  _internal_set_usertext(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.userText)
}
inline std::string* FblItemRect::mutable_usertext() {
  // @@protoc_insertion_point(field_mutable:Proto.FblItemRect.userText)
  return _internal_mutable_usertext();
}
inline const std::string& FblItemRect::_internal_usertext() const {
  return usertext_.Get();
}
inline void FblItemRect::_internal_set_usertext(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  usertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FblItemRect::set_usertext(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  usertext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.FblItemRect.userText)
}
inline void FblItemRect::set_usertext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  usertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.FblItemRect.userText)
}
inline void FblItemRect::set_usertext(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  usertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.FblItemRect.userText)
}
inline std::string* FblItemRect::_internal_mutable_usertext() {
  _has_bits_[0] |= 0x00000002u;
  return usertext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FblItemRect::release_usertext() {
  // @@protoc_insertion_point(field_release:Proto.FblItemRect.userText)
  if (!_internal_has_usertext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return usertext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FblItemRect::set_allocated_usertext(std::string* usertext) {
  if (usertext != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  usertext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usertext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.FblItemRect.userText)
}

// optional int32 userTextPos = 8 [default = 1];
inline bool FblItemRect::_internal_has_usertextpos() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FblItemRect::has_usertextpos() const {
  return _internal_has_usertextpos();
}
inline void FblItemRect::clear_usertextpos() {
  usertextpos_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblItemRect::_internal_usertextpos() const {
  return usertextpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblItemRect::usertextpos() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.userTextPos)
  return _internal_usertextpos();
}
inline void FblItemRect::_internal_set_usertextpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  usertextpos_ = value;
}
inline void FblItemRect::set_usertextpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usertextpos(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.userTextPos)
}

// optional int32 obsoleteLabelPos = 9 [default = -1];
inline bool FblItemRect::_internal_has_obsoletelabelpos() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FblItemRect::has_obsoletelabelpos() const {
  return _internal_has_obsoletelabelpos();
}
inline void FblItemRect::clear_obsoletelabelpos() {
  obsoletelabelpos_ = -1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblItemRect::_internal_obsoletelabelpos() const {
  return obsoletelabelpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FblItemRect::obsoletelabelpos() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemRect.obsoleteLabelPos)
  return _internal_obsoletelabelpos();
}
inline void FblItemRect::_internal_set_obsoletelabelpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  obsoletelabelpos_ = value;
}
inline void FblItemRect::set_obsoletelabelpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obsoletelabelpos(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemRect.obsoleteLabelPos)
}

// -------------------------------------------------------------------

// FblItemLine

// required double weight = 1;
inline bool FblItemLine::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FblItemLine::has_weight() const {
  return _internal_has_weight();
}
inline void FblItemLine::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FblItemLine::_internal_weight() const {
  return weight_;
}
inline double FblItemLine::weight() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemLine.weight)
  return _internal_weight();
}
inline void FblItemLine::_internal_set_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  weight_ = value;
}
inline void FblItemLine::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemLine.weight)
}

// required uint32 lineColor = 2;
inline bool FblItemLine::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FblItemLine::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void FblItemLine::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemLine::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FblItemLine::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.FblItemLine.lineColor)
  return _internal_linecolor();
}
inline void FblItemLine::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  linecolor_ = value;
}
inline void FblItemLine::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.FblItemLine.lineColor)
}

// -------------------------------------------------------------------

// SchemaItemSignalColumn

// optional double width = 1 [default = 20];
inline bool SchemaItemSignalColumn::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemSignalColumn::has_width() const {
  return _internal_has_width();
}
inline void SchemaItemSignalColumn::clear_width() {
  width_ = 20;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SchemaItemSignalColumn::_internal_width() const {
  return width_;
}
inline double SchemaItemSignalColumn::width() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignalColumn.width)
  return _internal_width();
}
inline void SchemaItemSignalColumn::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void SchemaItemSignalColumn::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignalColumn.width)
}

// optional int32 data = 2 [default = 0];
inline bool SchemaItemSignalColumn::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemSignalColumn::has_data() const {
  return _internal_has_data();
}
inline void SchemaItemSignalColumn::clear_data() {
  data_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignalColumn::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignalColumn::data() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignalColumn.data)
  return _internal_data();
}
inline void SchemaItemSignalColumn::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  data_ = value;
}
inline void SchemaItemSignalColumn::set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignalColumn.data)
}

// optional int32 horzAlign = 3 [default = 1];
inline bool SchemaItemSignalColumn::_internal_has_horzalign() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemSignalColumn::has_horzalign() const {
  return _internal_has_horzalign();
}
inline void SchemaItemSignalColumn::clear_horzalign() {
  horzalign_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignalColumn::_internal_horzalign() const {
  return horzalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignalColumn::horzalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignalColumn.horzAlign)
  return _internal_horzalign();
}
inline void SchemaItemSignalColumn::_internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  horzalign_ = value;
}
inline void SchemaItemSignalColumn::set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_horzalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignalColumn.horzAlign)
}

// -------------------------------------------------------------------

// SchemaItemSignal

// repeated .Proto.wstring appSignalIDs = 1;
inline int SchemaItemSignal::_internal_appsignalids_size() const {
  return appsignalids_.size();
}
inline int SchemaItemSignal::appsignalids_size() const {
  return _internal_appsignalids_size();
}
inline void SchemaItemSignal::clear_appsignalids() {
  appsignalids_.Clear();
}
inline ::Proto::wstring* SchemaItemSignal::mutable_appsignalids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemSignal.appSignalIDs)
  return appsignalids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >*
SchemaItemSignal::mutable_appsignalids() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemSignal.appSignalIDs)
  return &appsignalids_;
}
inline const ::Proto::wstring& SchemaItemSignal::_internal_appsignalids(int index) const {
  return appsignalids_.Get(index);
}
inline const ::Proto::wstring& SchemaItemSignal::appsignalids(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.appSignalIDs)
  return _internal_appsignalids(index);
}
inline ::Proto::wstring* SchemaItemSignal::_internal_add_appsignalids() {
  return appsignalids_.Add();
}
inline ::Proto::wstring* SchemaItemSignal::add_appsignalids() {
  // @@protoc_insertion_point(field_add:Proto.SchemaItemSignal.appSignalIDs)
  return _internal_add_appsignalids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::wstring >&
SchemaItemSignal::appsignalids() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemSignal.appSignalIDs)
  return appsignalids_;
}

// optional int32 precision = 2 [default = 2];
inline bool SchemaItemSignal::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemSignal::has_precision() const {
  return _internal_has_precision();
}
inline void SchemaItemSignal::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignal::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignal::precision() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.precision)
  return _internal_precision();
}
inline void SchemaItemSignal::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  precision_ = value;
}
inline void SchemaItemSignal::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignal.precision)
}

// optional int32 analogFormat = 3 [default = 102];
inline bool SchemaItemSignal::_internal_has_analogformat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemSignal::has_analogformat() const {
  return _internal_has_analogformat();
}
inline void SchemaItemSignal::clear_analogformat() {
  analogformat_ = 102;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignal::_internal_analogformat() const {
  return analogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemSignal::analogformat() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.analogFormat)
  return _internal_analogformat();
}
inline void SchemaItemSignal::_internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  analogformat_ = value;
}
inline void SchemaItemSignal::set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogformat(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignal.analogFormat)
}

// repeated .Proto.SchemaItemSignalColumn columns = 4;
inline int SchemaItemSignal::_internal_columns_size() const {
  return columns_.size();
}
inline int SchemaItemSignal::columns_size() const {
  return _internal_columns_size();
}
inline void SchemaItemSignal::clear_columns() {
  columns_.Clear();
}
inline ::Proto::SchemaItemSignalColumn* SchemaItemSignal::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemSignal.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaItemSignalColumn >*
SchemaItemSignal::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemSignal.columns)
  return &columns_;
}
inline const ::Proto::SchemaItemSignalColumn& SchemaItemSignal::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::Proto::SchemaItemSignalColumn& SchemaItemSignal::columns(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.columns)
  return _internal_columns(index);
}
inline ::Proto::SchemaItemSignalColumn* SchemaItemSignal::_internal_add_columns() {
  return columns_.Add();
}
inline ::Proto::SchemaItemSignalColumn* SchemaItemSignal::add_columns() {
  // @@protoc_insertion_point(field_add:Proto.SchemaItemSignal.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaItemSignalColumn >&
SchemaItemSignal::columns() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemSignal.columns)
  return columns_;
}

// optional bool multiLine = 5 [default = true];
inline bool SchemaItemSignal::_internal_has_multiline() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemSignal::has_multiline() const {
  return _internal_has_multiline();
}
inline void SchemaItemSignal::clear_multiline() {
  multiline_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SchemaItemSignal::_internal_multiline() const {
  return multiline_;
}
inline bool SchemaItemSignal::multiline() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.multiLine)
  return _internal_multiline();
}
inline void SchemaItemSignal::_internal_set_multiline(bool value) {
  _has_bits_[0] |= 0x00000002u;
  multiline_ = value;
}
inline void SchemaItemSignal::set_multiline(bool value) {
  _internal_set_multiline(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignal.multiLine)
}

// repeated string impactAppSignalIDs = 6;
inline int SchemaItemSignal::_internal_impactappsignalids_size() const {
  return impactappsignalids_.size();
}
inline int SchemaItemSignal::impactappsignalids_size() const {
  return _internal_impactappsignalids_size();
}
inline void SchemaItemSignal::clear_impactappsignalids() {
  impactappsignalids_.Clear();
}
inline std::string* SchemaItemSignal::add_impactappsignalids() {
  // @@protoc_insertion_point(field_add_mutable:Proto.SchemaItemSignal.impactAppSignalIDs)
  return _internal_add_impactappsignalids();
}
inline const std::string& SchemaItemSignal::_internal_impactappsignalids(int index) const {
  return impactappsignalids_.Get(index);
}
inline const std::string& SchemaItemSignal::impactappsignalids(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.impactAppSignalIDs)
  return _internal_impactappsignalids(index);
}
inline std::string* SchemaItemSignal::mutable_impactappsignalids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemSignal.impactAppSignalIDs)
  return impactappsignalids_.Mutable(index);
}
inline void SchemaItemSignal::set_impactappsignalids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignal.impactAppSignalIDs)
  impactappsignalids_.Mutable(index)->assign(value);
}
inline void SchemaItemSignal::set_impactappsignalids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignal.impactAppSignalIDs)
  impactappsignalids_.Mutable(index)->assign(std::move(value));
}
inline void SchemaItemSignal::set_impactappsignalids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  impactappsignalids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemSignal.impactAppSignalIDs)
}
inline void SchemaItemSignal::set_impactappsignalids(int index, const char* value, size_t size) {
  impactappsignalids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemSignal.impactAppSignalIDs)
}
inline std::string* SchemaItemSignal::_internal_add_impactappsignalids() {
  return impactappsignalids_.Add();
}
inline void SchemaItemSignal::add_impactappsignalids(const std::string& value) {
  impactappsignalids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaItemSignal.impactAppSignalIDs)
}
inline void SchemaItemSignal::add_impactappsignalids(std::string&& value) {
  impactappsignalids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.SchemaItemSignal.impactAppSignalIDs)
}
inline void SchemaItemSignal::add_impactappsignalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  impactappsignalids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.SchemaItemSignal.impactAppSignalIDs)
}
inline void SchemaItemSignal::add_impactappsignalids(const char* value, size_t size) {
  impactappsignalids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.SchemaItemSignal.impactAppSignalIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SchemaItemSignal::impactappsignalids() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemSignal.impactAppSignalIDs)
  return impactappsignalids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SchemaItemSignal::mutable_impactappsignalids() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemSignal.impactAppSignalIDs)
  return &impactappsignalids_;
}

// optional string customText = 16;
inline bool SchemaItemSignal::_internal_has_customtext() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemSignal::has_customtext() const {
  return _internal_has_customtext();
}
inline void SchemaItemSignal::clear_customtext() {
  customtext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemSignal::customtext() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemSignal.customText)
  return _internal_customtext();
}
inline void SchemaItemSignal::set_customtext(const std::string& value) {
  _internal_set_customtext(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemSignal.customText)
}
inline std::string* SchemaItemSignal::mutable_customtext() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemSignal.customText)
  return _internal_mutable_customtext();
}
inline const std::string& SchemaItemSignal::_internal_customtext() const {
  return customtext_.Get();
}
inline void SchemaItemSignal::_internal_set_customtext(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemSignal::set_customtext(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  customtext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemSignal.customText)
}
inline void SchemaItemSignal::set_customtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemSignal.customText)
}
inline void SchemaItemSignal::set_customtext(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemSignal.customText)
}
inline std::string* SchemaItemSignal::_internal_mutable_customtext() {
  _has_bits_[0] |= 0x00000001u;
  return customtext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemSignal::release_customtext() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemSignal.customText)
  if (!_internal_has_customtext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return customtext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemSignal::set_allocated_customtext(std::string* customtext) {
  if (customtext != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  customtext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customtext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemSignal.customText)
}

// -------------------------------------------------------------------

// SchemaItemInput

// -------------------------------------------------------------------

// SchemaItemOutput

// -------------------------------------------------------------------

// SchemaItemInOut

// -------------------------------------------------------------------

// SchemaItemLink

// -------------------------------------------------------------------

// SchemaItemAfb

// repeated .Proto.AfbParam params = 2;
inline int SchemaItemAfb::_internal_params_size() const {
  return params_.size();
}
inline int SchemaItemAfb::params_size() const {
  return _internal_params_size();
}
inline void SchemaItemAfb::clear_params() {
  params_.Clear();
}
inline ::Proto::AfbParam* SchemaItemAfb::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemAfb.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >*
SchemaItemAfb::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemAfb.params)
  return &params_;
}
inline const ::Proto::AfbParam& SchemaItemAfb::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::Proto::AfbParam& SchemaItemAfb::params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemAfb.params)
  return _internal_params(index);
}
inline ::Proto::AfbParam* SchemaItemAfb::_internal_add_params() {
  return params_.Add();
}
inline ::Proto::AfbParam* SchemaItemAfb::add_params() {
  // @@protoc_insertion_point(field_add:Proto.SchemaItemAfb.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AfbParam >&
SchemaItemAfb::params() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemAfb.params)
  return params_;
}

// optional .Proto.wstring afbStrid = 3;
inline bool SchemaItemAfb::_internal_has_afbstrid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || afbstrid_ != nullptr);
  return value;
}
inline bool SchemaItemAfb::has_afbstrid() const {
  return _internal_has_afbstrid();
}
inline void SchemaItemAfb::clear_afbstrid() {
  if (afbstrid_ != nullptr) afbstrid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::wstring& SchemaItemAfb::_internal_afbstrid() const {
  const ::Proto::wstring* p = afbstrid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& SchemaItemAfb::afbstrid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemAfb.afbStrid)
  return _internal_afbstrid();
}
inline void SchemaItemAfb::unsafe_arena_set_allocated_afbstrid(
    ::Proto::wstring* afbstrid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(afbstrid_);
  }
  afbstrid_ = afbstrid;
  if (afbstrid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemAfb.afbStrid)
}
inline ::Proto::wstring* SchemaItemAfb::release_afbstrid() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = afbstrid_;
  afbstrid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* SchemaItemAfb::unsafe_arena_release_afbstrid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemAfb.afbStrid)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::wstring* temp = afbstrid_;
  afbstrid_ = nullptr;
  return temp;
}
inline ::Proto::wstring* SchemaItemAfb::_internal_mutable_afbstrid() {
  _has_bits_[0] |= 0x00000002u;
  if (afbstrid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    afbstrid_ = p;
  }
  return afbstrid_;
}
inline ::Proto::wstring* SchemaItemAfb::mutable_afbstrid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemAfb.afbStrid)
  return _internal_mutable_afbstrid();
}
inline void SchemaItemAfb::set_allocated_afbstrid(::Proto::wstring* afbstrid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete afbstrid_;
  }
  if (afbstrid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(afbstrid);
    if (message_arena != submessage_arena) {
      afbstrid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, afbstrid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  afbstrid_ = afbstrid;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemAfb.afbStrid)
}

// optional int32 precision = 4 [default = 2];
inline bool SchemaItemAfb::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemAfb::has_precision() const {
  return _internal_has_precision();
}
inline void SchemaItemAfb::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemAfb::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemAfb::precision() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemAfb.precision)
  return _internal_precision();
}
inline void SchemaItemAfb::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  precision_ = value;
}
inline void SchemaItemAfb::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemAfb.precision)
}

// optional .Proto.AfbElementXml deprecated_afbelement = 5;
inline bool SchemaItemAfb::_internal_has_deprecated_afbelement() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_afbelement_ != nullptr);
  return value;
}
inline bool SchemaItemAfb::has_deprecated_afbelement() const {
  return _internal_has_deprecated_afbelement();
}
inline void SchemaItemAfb::clear_deprecated_afbelement() {
  if (deprecated_afbelement_ != nullptr) deprecated_afbelement_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::AfbElementXml& SchemaItemAfb::_internal_deprecated_afbelement() const {
  const ::Proto::AfbElementXml* p = deprecated_afbelement_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::AfbElementXml&>(
      ::Proto::_AfbElementXml_default_instance_);
}
inline const ::Proto::AfbElementXml& SchemaItemAfb::deprecated_afbelement() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemAfb.deprecated_afbelement)
  return _internal_deprecated_afbelement();
}
inline void SchemaItemAfb::unsafe_arena_set_allocated_deprecated_afbelement(
    ::Proto::AfbElementXml* deprecated_afbelement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_afbelement_);
  }
  deprecated_afbelement_ = deprecated_afbelement;
  if (deprecated_afbelement) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemAfb.deprecated_afbelement)
}
inline ::Proto::AfbElementXml* SchemaItemAfb::release_deprecated_afbelement() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::AfbElementXml* temp = deprecated_afbelement_;
  deprecated_afbelement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::AfbElementXml* SchemaItemAfb::unsafe_arena_release_deprecated_afbelement() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemAfb.deprecated_afbelement)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::AfbElementXml* temp = deprecated_afbelement_;
  deprecated_afbelement_ = nullptr;
  return temp;
}
inline ::Proto::AfbElementXml* SchemaItemAfb::_internal_mutable_deprecated_afbelement() {
  _has_bits_[0] |= 0x00000004u;
  if (deprecated_afbelement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::AfbElementXml>(GetArena());
    deprecated_afbelement_ = p;
  }
  return deprecated_afbelement_;
}
inline ::Proto::AfbElementXml* SchemaItemAfb::mutable_deprecated_afbelement() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemAfb.deprecated_afbelement)
  return _internal_mutable_deprecated_afbelement();
}
inline void SchemaItemAfb::set_allocated_deprecated_afbelement(::Proto::AfbElementXml* deprecated_afbelement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_afbelement_;
  }
  if (deprecated_afbelement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_afbelement);
    if (message_arena != submessage_arena) {
      deprecated_afbelement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_afbelement, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deprecated_afbelement_ = deprecated_afbelement;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemAfb.deprecated_afbelement)
}

// optional string deprecated_label = 6;
inline bool SchemaItemAfb::_internal_has_deprecated_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemAfb::has_deprecated_label() const {
  return _internal_has_deprecated_label();
}
inline void SchemaItemAfb::clear_deprecated_label() {
  deprecated_label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemAfb::deprecated_label() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemAfb.deprecated_label)
  return _internal_deprecated_label();
}
inline void SchemaItemAfb::set_deprecated_label(const std::string& value) {
  _internal_set_deprecated_label(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemAfb.deprecated_label)
}
inline std::string* SchemaItemAfb::mutable_deprecated_label() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemAfb.deprecated_label)
  return _internal_mutable_deprecated_label();
}
inline const std::string& SchemaItemAfb::_internal_deprecated_label() const {
  return deprecated_label_.Get();
}
inline void SchemaItemAfb::_internal_set_deprecated_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemAfb::set_deprecated_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemAfb.deprecated_label)
}
inline void SchemaItemAfb::set_deprecated_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  deprecated_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemAfb.deprecated_label)
}
inline void SchemaItemAfb::set_deprecated_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemAfb.deprecated_label)
}
inline std::string* SchemaItemAfb::_internal_mutable_deprecated_label() {
  _has_bits_[0] |= 0x00000001u;
  return deprecated_label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemAfb::release_deprecated_label() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemAfb.deprecated_label)
  if (!_internal_has_deprecated_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return deprecated_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemAfb::set_allocated_deprecated_label(std::string* deprecated_label) {
  if (deprecated_label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemAfb.deprecated_label)
}

// optional .Proto.AfbElementXml afbelement = 7;
inline bool SchemaItemAfb::_internal_has_afbelement() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || afbelement_ != nullptr);
  return value;
}
inline bool SchemaItemAfb::has_afbelement() const {
  return _internal_has_afbelement();
}
inline void SchemaItemAfb::clear_afbelement() {
  if (afbelement_ != nullptr) afbelement_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::AfbElementXml& SchemaItemAfb::_internal_afbelement() const {
  const ::Proto::AfbElementXml* p = afbelement_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::AfbElementXml&>(
      ::Proto::_AfbElementXml_default_instance_);
}
inline const ::Proto::AfbElementXml& SchemaItemAfb::afbelement() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemAfb.afbelement)
  return _internal_afbelement();
}
inline void SchemaItemAfb::unsafe_arena_set_allocated_afbelement(
    ::Proto::AfbElementXml* afbelement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(afbelement_);
  }
  afbelement_ = afbelement;
  if (afbelement) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemAfb.afbelement)
}
inline ::Proto::AfbElementXml* SchemaItemAfb::release_afbelement() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::AfbElementXml* temp = afbelement_;
  afbelement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::AfbElementXml* SchemaItemAfb::unsafe_arena_release_afbelement() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemAfb.afbelement)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::AfbElementXml* temp = afbelement_;
  afbelement_ = nullptr;
  return temp;
}
inline ::Proto::AfbElementXml* SchemaItemAfb::_internal_mutable_afbelement() {
  _has_bits_[0] |= 0x00000008u;
  if (afbelement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::AfbElementXml>(GetArena());
    afbelement_ = p;
  }
  return afbelement_;
}
inline ::Proto::AfbElementXml* SchemaItemAfb::mutable_afbelement() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemAfb.afbelement)
  return _internal_mutable_afbelement();
}
inline void SchemaItemAfb::set_allocated_afbelement(::Proto::AfbElementXml* afbelement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete afbelement_;
  }
  if (afbelement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(afbelement);
    if (message_arena != submessage_arena) {
      afbelement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, afbelement, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  afbelement_ = afbelement;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemAfb.afbelement)
}

// -------------------------------------------------------------------

// SchemaItemConst

// optional int32 type = 1 [default = 0];
inline bool SchemaItemConst::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemConst::has_type() const {
  return _internal_has_type();
}
inline void SchemaItemConst::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::type() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.type)
  return _internal_type();
}
inline void SchemaItemConst::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void SchemaItemConst::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.type)
}

// optional int32 intValue = 2 [default = 0];
inline bool SchemaItemConst::_internal_has_intvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemConst::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void SchemaItemConst::clear_intvalue() {
  intvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_intvalue() const {
  return intvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::intvalue() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.intValue)
  return _internal_intvalue();
}
inline void SchemaItemConst::_internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  intvalue_ = value;
}
inline void SchemaItemConst::set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.intValue)
}

// optional double floatValue = 3 [default = 0];
inline bool SchemaItemConst::_internal_has_floatvalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemConst::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void SchemaItemConst::clear_floatvalue() {
  floatvalue_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SchemaItemConst::_internal_floatvalue() const {
  return floatvalue_;
}
inline double SchemaItemConst::floatvalue() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.floatValue)
  return _internal_floatvalue();
}
inline void SchemaItemConst::_internal_set_floatvalue(double value) {
  _has_bits_[0] |= 0x00000004u;
  floatvalue_ = value;
}
inline void SchemaItemConst::set_floatvalue(double value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.floatValue)
}

// optional int32 discreteValue = 7 [default = 0];
inline bool SchemaItemConst::_internal_has_discretevalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemConst::has_discretevalue() const {
  return _internal_has_discretevalue();
}
inline void SchemaItemConst::clear_discretevalue() {
  discretevalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_discretevalue() const {
  return discretevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::discretevalue() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.discreteValue)
  return _internal_discretevalue();
}
inline void SchemaItemConst::_internal_set_discretevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  discretevalue_ = value;
}
inline void SchemaItemConst::set_discretevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_discretevalue(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.discreteValue)
}

// optional int32 precision = 4 [default = 2];
inline bool SchemaItemConst::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemConst::has_precision() const {
  return _internal_has_precision();
}
inline void SchemaItemConst::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::precision() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.precision)
  return _internal_precision();
}
inline void SchemaItemConst::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  precision_ = value;
}
inline void SchemaItemConst::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.precision)
}

// optional int32 horzAlign = 5 [default = 4];
inline bool SchemaItemConst::_internal_has_horzalign() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemConst::has_horzalign() const {
  return _internal_has_horzalign();
}
inline void SchemaItemConst::clear_horzalign() {
  horzalign_ = 4;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_horzalign() const {
  return horzalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::horzalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.horzAlign)
  return _internal_horzalign();
}
inline void SchemaItemConst::_internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  horzalign_ = value;
}
inline void SchemaItemConst::set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_horzalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.horzAlign)
}

// optional int32 vertAlign = 6 [default = 128];
inline bool SchemaItemConst::_internal_has_vertalign() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemConst::has_vertalign() const {
  return _internal_has_vertalign();
}
inline void SchemaItemConst::clear_vertalign() {
  vertalign_ = 128;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_vertalign() const {
  return vertalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::vertalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.vertAlign)
  return _internal_vertalign();
}
inline void SchemaItemConst::_internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  vertalign_ = value;
}
inline void SchemaItemConst::set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.vertAlign)
}

// optional int32 analogFormat = 8 [default = 102];
inline bool SchemaItemConst::_internal_has_analogformat() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemConst::has_analogformat() const {
  return _internal_has_analogformat();
}
inline void SchemaItemConst::clear_analogformat() {
  analogformat_ = 102;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::_internal_analogformat() const {
  return analogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemConst::analogformat() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConst.analogFormat)
  return _internal_analogformat();
}
inline void SchemaItemConst::_internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  analogformat_ = value;
}
inline void SchemaItemConst::set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogformat(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConst.analogFormat)
}

// -------------------------------------------------------------------

// SchemaItemConnection

// optional string connectionid = 1;
inline bool SchemaItemConnection::_internal_has_connectionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemConnection::has_connectionid() const {
  return _internal_has_connectionid();
}
inline void SchemaItemConnection::clear_connectionid() {
  connectionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemConnection::connectionid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemConnection.connectionid)
  return _internal_connectionid();
}
inline void SchemaItemConnection::set_connectionid(const std::string& value) {
  _internal_set_connectionid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemConnection.connectionid)
}
inline std::string* SchemaItemConnection::mutable_connectionid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemConnection.connectionid)
  return _internal_mutable_connectionid();
}
inline const std::string& SchemaItemConnection::_internal_connectionid() const {
  return connectionid_.Get();
}
inline void SchemaItemConnection::_internal_set_connectionid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemConnection::set_connectionid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemConnection.connectionid)
}
inline void SchemaItemConnection::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemConnection.connectionid)
}
inline void SchemaItemConnection::set_connectionid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemConnection.connectionid)
}
inline std::string* SchemaItemConnection::_internal_mutable_connectionid() {
  _has_bits_[0] |= 0x00000001u;
  return connectionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemConnection::release_connectionid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemConnection.connectionid)
  if (!_internal_has_connectionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connectionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemConnection::set_allocated_connectionid(std::string* connectionid) {
  if (connectionid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemConnection.connectionid)
}

// -------------------------------------------------------------------

// SchemaItemTransmitter

// optional int32 pinCount = 1 [default = 1];
inline bool SchemaItemTransmitter::_internal_has_pincount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemTransmitter::has_pincount() const {
  return _internal_has_pincount();
}
inline void SchemaItemTransmitter::clear_pincount() {
  pincount_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemTransmitter::_internal_pincount() const {
  return pincount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemTransmitter::pincount() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemTransmitter.pinCount)
  return _internal_pincount();
}
inline void SchemaItemTransmitter::_internal_set_pincount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pincount_ = value;
}
inline void SchemaItemTransmitter::set_pincount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pincount(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemTransmitter.pinCount)
}

// -------------------------------------------------------------------

// SchemaItemReceiver

// optional bool showValidity = 1 [default = true];
inline bool SchemaItemReceiver::_internal_has_showvalidity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemReceiver::has_showvalidity() const {
  return _internal_has_showvalidity();
}
inline void SchemaItemReceiver::clear_showvalidity() {
  showvalidity_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SchemaItemReceiver::_internal_showvalidity() const {
  return showvalidity_;
}
inline bool SchemaItemReceiver::showvalidity() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemReceiver.showValidity)
  return _internal_showvalidity();
}
inline void SchemaItemReceiver::_internal_set_showvalidity(bool value) {
  _has_bits_[0] |= 0x00000010u;
  showvalidity_ = value;
}
inline void SchemaItemReceiver::set_showvalidity(bool value) {
  _internal_set_showvalidity(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemReceiver.showValidity)
}

// optional string appSignalIds = 2;
inline bool SchemaItemReceiver::_internal_has_appsignalids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemReceiver::has_appsignalids() const {
  return _internal_has_appsignalids();
}
inline void SchemaItemReceiver::clear_appsignalids() {
  appsignalids_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemReceiver::appsignalids() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemReceiver.appSignalIds)
  return _internal_appsignalids();
}
inline void SchemaItemReceiver::set_appsignalids(const std::string& value) {
  _internal_set_appsignalids(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemReceiver.appSignalIds)
}
inline std::string* SchemaItemReceiver::mutable_appsignalids() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemReceiver.appSignalIds)
  return _internal_mutable_appsignalids();
}
inline const std::string& SchemaItemReceiver::_internal_appsignalids() const {
  return appsignalids_.Get();
}
inline void SchemaItemReceiver::_internal_set_appsignalids(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemReceiver::set_appsignalids(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemReceiver.appSignalIds)
}
inline void SchemaItemReceiver::set_appsignalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appsignalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemReceiver.appSignalIds)
}
inline void SchemaItemReceiver::set_appsignalids(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appsignalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemReceiver.appSignalIds)
}
inline std::string* SchemaItemReceiver::_internal_mutable_appsignalids() {
  _has_bits_[0] |= 0x00000001u;
  return appsignalids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemReceiver::release_appsignalids() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemReceiver.appSignalIds)
  if (!_internal_has_appsignalids()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appsignalids_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemReceiver::set_allocated_appsignalids(std::string* appsignalids) {
  if (appsignalids != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appsignalids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsignalids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemReceiver.appSignalIds)
}

// optional int32 dataType = 3 [default = 0];
inline bool SchemaItemReceiver::_internal_has_datatype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemReceiver::has_datatype() const {
  return _internal_has_datatype();
}
inline void SchemaItemReceiver::clear_datatype() {
  datatype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemReceiver::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemReceiver::datatype() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemReceiver.dataType)
  return _internal_datatype();
}
inline void SchemaItemReceiver::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  datatype_ = value;
}
inline void SchemaItemReceiver::set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemReceiver.dataType)
}

// optional int32 precision = 4 [default = 2];
inline bool SchemaItemReceiver::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemReceiver::has_precision() const {
  return _internal_has_precision();
}
inline void SchemaItemReceiver::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemReceiver::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemReceiver::precision() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemReceiver.precision)
  return _internal_precision();
}
inline void SchemaItemReceiver::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  precision_ = value;
}
inline void SchemaItemReceiver::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemReceiver.precision)
}

// optional int32 analogFormat = 5 [default = 102];
inline bool SchemaItemReceiver::_internal_has_analogformat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemReceiver::has_analogformat() const {
  return _internal_has_analogformat();
}
inline void SchemaItemReceiver::clear_analogformat() {
  analogformat_ = 102;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemReceiver::_internal_analogformat() const {
  return analogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemReceiver::analogformat() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemReceiver.analogFormat)
  return _internal_analogformat();
}
inline void SchemaItemReceiver::_internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  analogformat_ = value;
}
inline void SchemaItemReceiver::set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogformat(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemReceiver.analogFormat)
}

// optional string customText = 16;
inline bool SchemaItemReceiver::_internal_has_customtext() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemReceiver::has_customtext() const {
  return _internal_has_customtext();
}
inline void SchemaItemReceiver::clear_customtext() {
  customtext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemReceiver::customtext() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemReceiver.customText)
  return _internal_customtext();
}
inline void SchemaItemReceiver::set_customtext(const std::string& value) {
  _internal_set_customtext(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemReceiver.customText)
}
inline std::string* SchemaItemReceiver::mutable_customtext() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemReceiver.customText)
  return _internal_mutable_customtext();
}
inline const std::string& SchemaItemReceiver::_internal_customtext() const {
  return customtext_.Get();
}
inline void SchemaItemReceiver::_internal_set_customtext(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemReceiver::set_customtext(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  customtext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemReceiver.customText)
}
inline void SchemaItemReceiver::set_customtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemReceiver.customText)
}
inline void SchemaItemReceiver::set_customtext(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemReceiver.customText)
}
inline std::string* SchemaItemReceiver::_internal_mutable_customtext() {
  _has_bits_[0] |= 0x00000002u;
  return customtext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemReceiver::release_customtext() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemReceiver.customText)
  if (!_internal_has_customtext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return customtext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemReceiver::set_allocated_customtext(std::string* customtext) {
  if (customtext != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  customtext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customtext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemReceiver.customText)
}

// -------------------------------------------------------------------

// SchemaItemUfb

// optional string ufbSchemaId = 1;
inline bool SchemaItemUfb::_internal_has_ufbschemaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemUfb::has_ufbschemaid() const {
  return _internal_has_ufbschemaid();
}
inline void SchemaItemUfb::clear_ufbschemaid() {
  ufbschemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemUfb::ufbschemaid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemUfb.ufbSchemaId)
  return _internal_ufbschemaid();
}
inline void SchemaItemUfb::set_ufbschemaid(const std::string& value) {
  _internal_set_ufbschemaid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemUfb.ufbSchemaId)
}
inline std::string* SchemaItemUfb::mutable_ufbschemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemUfb.ufbSchemaId)
  return _internal_mutable_ufbschemaid();
}
inline const std::string& SchemaItemUfb::_internal_ufbschemaid() const {
  return ufbschemaid_.Get();
}
inline void SchemaItemUfb::_internal_set_ufbschemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ufbschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemUfb::set_ufbschemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ufbschemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemUfb.ufbSchemaId)
}
inline void SchemaItemUfb::set_ufbschemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ufbschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemUfb.ufbSchemaId)
}
inline void SchemaItemUfb::set_ufbschemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ufbschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemUfb.ufbSchemaId)
}
inline std::string* SchemaItemUfb::_internal_mutable_ufbschemaid() {
  _has_bits_[0] |= 0x00000001u;
  return ufbschemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemUfb::release_ufbschemaid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemUfb.ufbSchemaId)
  if (!_internal_has_ufbschemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ufbschemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemUfb::set_allocated_ufbschemaid(std::string* ufbschemaid) {
  if (ufbschemaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ufbschemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ufbschemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemUfb.ufbSchemaId)
}

// optional string ufbCaption = 2;
inline bool SchemaItemUfb::_internal_has_ufbcaption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemUfb::has_ufbcaption() const {
  return _internal_has_ufbcaption();
}
inline void SchemaItemUfb::clear_ufbcaption() {
  ufbcaption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemUfb::ufbcaption() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemUfb.ufbCaption)
  return _internal_ufbcaption();
}
inline void SchemaItemUfb::set_ufbcaption(const std::string& value) {
  _internal_set_ufbcaption(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemUfb.ufbCaption)
}
inline std::string* SchemaItemUfb::mutable_ufbcaption() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemUfb.ufbCaption)
  return _internal_mutable_ufbcaption();
}
inline const std::string& SchemaItemUfb::_internal_ufbcaption() const {
  return ufbcaption_.Get();
}
inline void SchemaItemUfb::_internal_set_ufbcaption(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ufbcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemUfb::set_ufbcaption(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ufbcaption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemUfb.ufbCaption)
}
inline void SchemaItemUfb::set_ufbcaption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ufbcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemUfb.ufbCaption)
}
inline void SchemaItemUfb::set_ufbcaption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ufbcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemUfb.ufbCaption)
}
inline std::string* SchemaItemUfb::_internal_mutable_ufbcaption() {
  _has_bits_[0] |= 0x00000002u;
  return ufbcaption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemUfb::release_ufbcaption() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemUfb.ufbCaption)
  if (!_internal_has_ufbcaption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ufbcaption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemUfb::set_allocated_ufbcaption(std::string* ufbcaption) {
  if (ufbcaption != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ufbcaption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ufbcaption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemUfb.ufbCaption)
}

// optional int32 ufbVersion = 3 [default = -1];
inline bool SchemaItemUfb::_internal_has_ufbversion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemUfb::has_ufbversion() const {
  return _internal_has_ufbversion();
}
inline void SchemaItemUfb::clear_ufbversion() {
  ufbversion_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemUfb::_internal_ufbversion() const {
  return ufbversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemUfb::ufbversion() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemUfb.ufbVersion)
  return _internal_ufbversion();
}
inline void SchemaItemUfb::_internal_set_ufbversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ufbversion_ = value;
}
inline void SchemaItemUfb::set_ufbversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ufbversion(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemUfb.ufbVersion)
}

// -------------------------------------------------------------------

// SchemaItemTerminator

// -------------------------------------------------------------------

// SchemaItemValue

// optional string signalIds = 1;
inline bool SchemaItemValue::_internal_has_signalids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemValue::has_signalids() const {
  return _internal_has_signalids();
}
inline void SchemaItemValue::clear_signalids() {
  signalids_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemValue::signalids() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.signalIds)
  return _internal_signalids();
}
inline void SchemaItemValue::set_signalids(const std::string& value) {
  _internal_set_signalids(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.signalIds)
}
inline std::string* SchemaItemValue::mutable_signalids() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemValue.signalIds)
  return _internal_mutable_signalids();
}
inline const std::string& SchemaItemValue::_internal_signalids() const {
  return signalids_.Get();
}
inline void SchemaItemValue::_internal_set_signalids(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemValue::set_signalids(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemValue.signalIds)
}
inline void SchemaItemValue::set_signalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemValue.signalIds)
}
inline void SchemaItemValue::set_signalids(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemValue.signalIds)
}
inline std::string* SchemaItemValue::_internal_mutable_signalids() {
  _has_bits_[0] |= 0x00000001u;
  return signalids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemValue::release_signalids() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemValue.signalIds)
  if (!_internal_has_signalids()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signalids_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemValue::set_allocated_signalids(std::string* signalids) {
  if (signalids != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signalids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemValue.signalIds)
}

// optional int32 signalSource = 2 [default = 0];
inline bool SchemaItemValue::_internal_has_signalsource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemValue::has_signalsource() const {
  return _internal_has_signalsource();
}
inline void SchemaItemValue::clear_signalsource() {
  signalsource_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::_internal_signalsource() const {
  return signalsource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::signalsource() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.signalSource)
  return _internal_signalsource();
}
inline void SchemaItemValue::_internal_set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  signalsource_ = value;
}
inline void SchemaItemValue::set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalsource(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.signalSource)
}

// optional double lineWeight = 4;
inline bool SchemaItemValue::_internal_has_lineweight() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemValue::has_lineweight() const {
  return _internal_has_lineweight();
}
inline void SchemaItemValue::clear_lineweight() {
  lineweight_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SchemaItemValue::_internal_lineweight() const {
  return lineweight_;
}
inline double SchemaItemValue::lineweight() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.lineWeight)
  return _internal_lineweight();
}
inline void SchemaItemValue::_internal_set_lineweight(double value) {
  _has_bits_[0] |= 0x00000020u;
  lineweight_ = value;
}
inline void SchemaItemValue::set_lineweight(double value) {
  _internal_set_lineweight(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.lineWeight)
}

// optional uint32 lineColor = 5;
inline bool SchemaItemValue::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemValue::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void SchemaItemValue::clear_linecolor() {
  linecolor_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemValue::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemValue::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.lineColor)
  return _internal_linecolor();
}
inline void SchemaItemValue::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  linecolor_ = value;
}
inline void SchemaItemValue::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.lineColor)
}

// optional uint32 fillColor = 6;
inline bool SchemaItemValue::_internal_has_fillcolor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemValue::has_fillcolor() const {
  return _internal_has_fillcolor();
}
inline void SchemaItemValue::clear_fillcolor() {
  fillcolor_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemValue::_internal_fillcolor() const {
  return fillcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemValue::fillcolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.fillColor)
  return _internal_fillcolor();
}
inline void SchemaItemValue::_internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  fillcolor_ = value;
}
inline void SchemaItemValue::set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fillcolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.fillColor)
}

// optional uint32 textColor = 7;
inline bool SchemaItemValue::_internal_has_textcolor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemValue::has_textcolor() const {
  return _internal_has_textcolor();
}
inline void SchemaItemValue::clear_textcolor() {
  textcolor_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemValue::_internal_textcolor() const {
  return textcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemValue::textcolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.textColor)
  return _internal_textcolor();
}
inline void SchemaItemValue::_internal_set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  textcolor_ = value;
}
inline void SchemaItemValue::set_textcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_textcolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.textColor)
}

// optional string text = 8;
inline bool SchemaItemValue::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemValue::has_text() const {
  return _internal_has_text();
}
inline void SchemaItemValue::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemValue::text() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.text)
  return _internal_text();
}
inline void SchemaItemValue::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.text)
}
inline std::string* SchemaItemValue::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemValue.text)
  return _internal_mutable_text();
}
inline const std::string& SchemaItemValue::_internal_text() const {
  return text_.Get();
}
inline void SchemaItemValue::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemValue::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemValue.text)
}
inline void SchemaItemValue::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemValue.text)
}
inline void SchemaItemValue::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemValue.text)
}
inline std::string* SchemaItemValue::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemValue::release_text() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemValue.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemValue::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemValue.text)
}

// optional .Proto.FontParam font = 9;
inline bool SchemaItemValue::_internal_has_font() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || font_ != nullptr);
  return value;
}
inline bool SchemaItemValue::has_font() const {
  return _internal_has_font();
}
inline void SchemaItemValue::clear_font() {
  if (font_ != nullptr) font_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::FontParam& SchemaItemValue::_internal_font() const {
  const ::Proto::FontParam* p = font_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::FontParam&>(
      ::Proto::_FontParam_default_instance_);
}
inline const ::Proto::FontParam& SchemaItemValue::font() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.font)
  return _internal_font();
}
inline void SchemaItemValue::unsafe_arena_set_allocated_font(
    ::Proto::FontParam* font) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_);
  }
  font_ = font;
  if (font) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemValue.font)
}
inline ::Proto::FontParam* SchemaItemValue::release_font() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::FontParam* SchemaItemValue::unsafe_arena_release_font() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemValue.font)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::FontParam* temp = font_;
  font_ = nullptr;
  return temp;
}
inline ::Proto::FontParam* SchemaItemValue::_internal_mutable_font() {
  _has_bits_[0] |= 0x00000004u;
  if (font_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::FontParam>(GetArena());
    font_ = p;
  }
  return font_;
}
inline ::Proto::FontParam* SchemaItemValue::mutable_font() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemValue.font)
  return _internal_mutable_font();
}
inline void SchemaItemValue::set_allocated_font(::Proto::FontParam* font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete font_;
  }
  if (font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(font);
    if (message_arena != submessage_arena) {
      font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  font_ = font;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemValue.font)
}

// optional bool drawRect = 10 [default = true];
inline bool SchemaItemValue::_internal_has_drawrect() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SchemaItemValue::has_drawrect() const {
  return _internal_has_drawrect();
}
inline void SchemaItemValue::clear_drawrect() {
  drawrect_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SchemaItemValue::_internal_drawrect() const {
  return drawrect_;
}
inline bool SchemaItemValue::drawrect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.drawRect)
  return _internal_drawrect();
}
inline void SchemaItemValue::_internal_set_drawrect(bool value) {
  _has_bits_[0] |= 0x00000200u;
  drawrect_ = value;
}
inline void SchemaItemValue::set_drawrect(bool value) {
  _internal_set_drawrect(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.drawRect)
}

// optional int32 horzAlign = 11 [default = 4];
inline bool SchemaItemValue::_internal_has_horzalign() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SchemaItemValue::has_horzalign() const {
  return _internal_has_horzalign();
}
inline void SchemaItemValue::clear_horzalign() {
  horzalign_ = 4;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::_internal_horzalign() const {
  return horzalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::horzalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.horzAlign)
  return _internal_horzalign();
}
inline void SchemaItemValue::_internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  horzalign_ = value;
}
inline void SchemaItemValue::set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_horzalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.horzAlign)
}

// optional int32 vertAlign = 12 [default = 128];
inline bool SchemaItemValue::_internal_has_vertalign() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SchemaItemValue::has_vertalign() const {
  return _internal_has_vertalign();
}
inline void SchemaItemValue::clear_vertalign() {
  vertalign_ = 128;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::_internal_vertalign() const {
  return vertalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::vertalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.vertAlign)
  return _internal_vertalign();
}
inline void SchemaItemValue::_internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  vertalign_ = value;
}
inline void SchemaItemValue::set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.vertAlign)
}

// optional int32 precision = 13 [default = -1];
inline bool SchemaItemValue::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SchemaItemValue::has_precision() const {
  return _internal_has_precision();
}
inline void SchemaItemValue::clear_precision() {
  precision_ = -1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::precision() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.precision)
  return _internal_precision();
}
inline void SchemaItemValue::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  precision_ = value;
}
inline void SchemaItemValue::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.precision)
}

// optional int32 analogFormat = 14 [default = 102];
inline bool SchemaItemValue::_internal_has_analogformat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SchemaItemValue::has_analogformat() const {
  return _internal_has_analogformat();
}
inline void SchemaItemValue::clear_analogformat() {
  analogformat_ = 102;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::_internal_analogformat() const {
  return analogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemValue::analogformat() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemValue.analogFormat)
  return _internal_analogformat();
}
inline void SchemaItemValue::_internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  analogformat_ = value;
}
inline void SchemaItemValue::set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogformat(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemValue.analogFormat)
}

// -------------------------------------------------------------------

// SchemaItemImageValue

// optional string signalIds = 1;
inline bool SchemaItemImageValue::_internal_has_signalids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_signalids() const {
  return _internal_has_signalids();
}
inline void SchemaItemImageValue::clear_signalids() {
  signalids_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemImageValue::signalids() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.signalIds)
  return _internal_signalids();
}
inline void SchemaItemImageValue::set_signalids(const std::string& value) {
  _internal_set_signalids(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.signalIds)
}
inline std::string* SchemaItemImageValue::mutable_signalids() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemImageValue.signalIds)
  return _internal_mutable_signalids();
}
inline const std::string& SchemaItemImageValue::_internal_signalids() const {
  return signalids_.Get();
}
inline void SchemaItemImageValue::_internal_set_signalids(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemImageValue::set_signalids(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemImageValue.signalIds)
}
inline void SchemaItemImageValue::set_signalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemImageValue.signalIds)
}
inline void SchemaItemImageValue::set_signalids(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemImageValue.signalIds)
}
inline std::string* SchemaItemImageValue::_internal_mutable_signalids() {
  _has_bits_[0] |= 0x00000001u;
  return signalids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemImageValue::release_signalids() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemImageValue.signalIds)
  if (!_internal_has_signalids()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signalids_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemImageValue::set_allocated_signalids(std::string* signalids) {
  if (signalids != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signalids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemImageValue.signalIds)
}

// optional int32 signalSource = 2 [default = 0];
inline bool SchemaItemImageValue::_internal_has_signalsource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_signalsource() const {
  return _internal_has_signalsource();
}
inline void SchemaItemImageValue::clear_signalsource() {
  signalsource_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemImageValue::_internal_signalsource() const {
  return signalsource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemImageValue::signalsource() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.signalSource)
  return _internal_signalsource();
}
inline void SchemaItemImageValue::_internal_set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  signalsource_ = value;
}
inline void SchemaItemImageValue::set_signalsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalsource(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.signalSource)
}

// optional string currentImageId = 3;
inline bool SchemaItemImageValue::_internal_has_currentimageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_currentimageid() const {
  return _internal_has_currentimageid();
}
inline void SchemaItemImageValue::clear_currentimageid() {
  currentimageid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemImageValue::currentimageid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.currentImageId)
  return _internal_currentimageid();
}
inline void SchemaItemImageValue::set_currentimageid(const std::string& value) {
  _internal_set_currentimageid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.currentImageId)
}
inline std::string* SchemaItemImageValue::mutable_currentimageid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemImageValue.currentImageId)
  return _internal_mutable_currentimageid();
}
inline const std::string& SchemaItemImageValue::_internal_currentimageid() const {
  return currentimageid_.Get();
}
inline void SchemaItemImageValue::_internal_set_currentimageid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  currentimageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemImageValue::set_currentimageid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  currentimageid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemImageValue.currentImageId)
}
inline void SchemaItemImageValue::set_currentimageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  currentimageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemImageValue.currentImageId)
}
inline void SchemaItemImageValue::set_currentimageid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  currentimageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemImageValue.currentImageId)
}
inline std::string* SchemaItemImageValue::_internal_mutable_currentimageid() {
  _has_bits_[0] |= 0x00000002u;
  return currentimageid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemImageValue::release_currentimageid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemImageValue.currentImageId)
  if (!_internal_has_currentimageid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return currentimageid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemImageValue::set_allocated_currentimageid(std::string* currentimageid) {
  if (currentimageid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  currentimageid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentimageid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemImageValue.currentImageId)
}

// optional double lineWeight = 6 [default = 0];
inline bool SchemaItemImageValue::_internal_has_lineweight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_lineweight() const {
  return _internal_has_lineweight();
}
inline void SchemaItemImageValue::clear_lineweight() {
  lineweight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SchemaItemImageValue::_internal_lineweight() const {
  return lineweight_;
}
inline double SchemaItemImageValue::lineweight() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.lineWeight)
  return _internal_lineweight();
}
inline void SchemaItemImageValue::_internal_set_lineweight(double value) {
  _has_bits_[0] |= 0x00000004u;
  lineweight_ = value;
}
inline void SchemaItemImageValue::set_lineweight(double value) {
  _internal_set_lineweight(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.lineWeight)
}

// optional uint32 lineColor = 7 [default = 4278190080];
inline bool SchemaItemImageValue::_internal_has_linecolor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_linecolor() const {
  return _internal_has_linecolor();
}
inline void SchemaItemImageValue::clear_linecolor() {
  linecolor_ = 4278190080u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemImageValue::_internal_linecolor() const {
  return linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemImageValue::linecolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.lineColor)
  return _internal_linecolor();
}
inline void SchemaItemImageValue::_internal_set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  linecolor_ = value;
}
inline void SchemaItemImageValue::set_linecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.lineColor)
}

// optional uint32 fillColor = 8 [default = 4278190272];
inline bool SchemaItemImageValue::_internal_has_fillcolor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_fillcolor() const {
  return _internal_has_fillcolor();
}
inline void SchemaItemImageValue::clear_fillcolor() {
  fillcolor_ = 4278190272u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemImageValue::_internal_fillcolor() const {
  return fillcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchemaItemImageValue::fillcolor() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.fillColor)
  return _internal_fillcolor();
}
inline void SchemaItemImageValue::_internal_set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  fillcolor_ = value;
}
inline void SchemaItemImageValue::set_fillcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fillcolor(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.fillColor)
}

// optional bool drawRect = 9 [default = false];
inline bool SchemaItemImageValue::_internal_has_drawrect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_drawrect() const {
  return _internal_has_drawrect();
}
inline void SchemaItemImageValue::clear_drawrect() {
  drawrect_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SchemaItemImageValue::_internal_drawrect() const {
  return drawrect_;
}
inline bool SchemaItemImageValue::drawrect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.drawRect)
  return _internal_drawrect();
}
inline void SchemaItemImageValue::_internal_set_drawrect(bool value) {
  _has_bits_[0] |= 0x00000010u;
  drawrect_ = value;
}
inline void SchemaItemImageValue::set_drawrect(bool value) {
  _internal_set_drawrect(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.drawRect)
}

// optional bool fillRect = 10 [default = false];
inline bool SchemaItemImageValue::_internal_has_fillrect() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemImageValue::has_fillrect() const {
  return _internal_has_fillrect();
}
inline void SchemaItemImageValue::clear_fillrect() {
  fillrect_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SchemaItemImageValue::_internal_fillrect() const {
  return fillrect_;
}
inline bool SchemaItemImageValue::fillrect() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.fillRect)
  return _internal_fillrect();
}
inline void SchemaItemImageValue::_internal_set_fillrect(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fillrect_ = value;
}
inline void SchemaItemImageValue::set_fillrect(bool value) {
  _internal_set_fillrect(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemImageValue.fillRect)
}

// repeated .Proto.ImageItem images = 14;
inline int SchemaItemImageValue::_internal_images_size() const {
  return images_.size();
}
inline int SchemaItemImageValue::images_size() const {
  return _internal_images_size();
}
inline void SchemaItemImageValue::clear_images() {
  images_.Clear();
}
inline ::Proto::ImageItem* SchemaItemImageValue::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemImageValue.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ImageItem >*
SchemaItemImageValue::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemImageValue.images)
  return &images_;
}
inline const ::Proto::ImageItem& SchemaItemImageValue::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::Proto::ImageItem& SchemaItemImageValue::images(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemImageValue.images)
  return _internal_images(index);
}
inline ::Proto::ImageItem* SchemaItemImageValue::_internal_add_images() {
  return images_.Add();
}
inline ::Proto::ImageItem* SchemaItemImageValue::add_images() {
  // @@protoc_insertion_point(field_add:Proto.SchemaItemImageValue.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ImageItem >&
SchemaItemImageValue::images() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemImageValue.images)
  return images_;
}

// -------------------------------------------------------------------

// SchemaItemBus

// optional string busTypeId = 2;
inline bool SchemaItemBus::_internal_has_bustypeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemBus::has_bustypeid() const {
  return _internal_has_bustypeid();
}
inline void SchemaItemBus::clear_bustypeid() {
  bustypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemBus::bustypeid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemBus.busTypeId)
  return _internal_bustypeid();
}
inline void SchemaItemBus::set_bustypeid(const std::string& value) {
  _internal_set_bustypeid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemBus.busTypeId)
}
inline std::string* SchemaItemBus::mutable_bustypeid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemBus.busTypeId)
  return _internal_mutable_bustypeid();
}
inline const std::string& SchemaItemBus::_internal_bustypeid() const {
  return bustypeid_.Get();
}
inline void SchemaItemBus::_internal_set_bustypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemBus::set_bustypeid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemBus.busTypeId)
}
inline void SchemaItemBus::set_bustypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemBus.busTypeId)
}
inline void SchemaItemBus::set_bustypeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemBus.busTypeId)
}
inline std::string* SchemaItemBus::_internal_mutable_bustypeid() {
  _has_bits_[0] |= 0x00000001u;
  return bustypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemBus::release_bustypeid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemBus.busTypeId)
  if (!_internal_has_bustypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bustypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemBus::set_allocated_bustypeid(std::string* bustypeid) {
  if (bustypeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bustypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bustypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemBus.busTypeId)
}

// optional fixed64 busTypeHash = 3;
inline bool SchemaItemBus::_internal_has_bustypehash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemBus::has_bustypehash() const {
  return _internal_has_bustypehash();
}
inline void SchemaItemBus::clear_bustypehash() {
  bustypehash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SchemaItemBus::_internal_bustypehash() const {
  return bustypehash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SchemaItemBus::bustypehash() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemBus.busTypeHash)
  return _internal_bustypehash();
}
inline void SchemaItemBus::_internal_set_bustypehash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bustypehash_ = value;
}
inline void SchemaItemBus::set_bustypehash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bustypehash(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemBus.busTypeHash)
}

// optional .Proto.Bus bus = 5;
inline bool SchemaItemBus::_internal_has_bus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bus_ != nullptr);
  return value;
}
inline bool SchemaItemBus::has_bus() const {
  return _internal_has_bus();
}
inline void SchemaItemBus::clear_bus() {
  if (bus_ != nullptr) bus_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::Bus& SchemaItemBus::_internal_bus() const {
  const ::Proto::Bus* p = bus_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Bus&>(
      ::Proto::_Bus_default_instance_);
}
inline const ::Proto::Bus& SchemaItemBus::bus() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemBus.bus)
  return _internal_bus();
}
inline void SchemaItemBus::unsafe_arena_set_allocated_bus(
    ::Proto::Bus* bus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_);
  }
  bus_ = bus;
  if (bus) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SchemaItemBus.bus)
}
inline ::Proto::Bus* SchemaItemBus::release_bus() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Bus* temp = bus_;
  bus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Bus* SchemaItemBus::unsafe_arena_release_bus() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemBus.bus)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Bus* temp = bus_;
  bus_ = nullptr;
  return temp;
}
inline ::Proto::Bus* SchemaItemBus::_internal_mutable_bus() {
  _has_bits_[0] |= 0x00000002u;
  if (bus_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Bus>(GetArena());
    bus_ = p;
  }
  return bus_;
}
inline ::Proto::Bus* SchemaItemBus::mutable_bus() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemBus.bus)
  return _internal_mutable_bus();
}
inline void SchemaItemBus::set_allocated_bus(::Proto::Bus* bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bus_;
  }
  if (bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus);
    if (message_arena != submessage_arena) {
      bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bus_ = bus;
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemBus.bus)
}

// -------------------------------------------------------------------

// SchemaItemBusComposer

// -------------------------------------------------------------------

// SchemaItemBusExtractor

// repeated .Proto.Property properties = 2;
inline int SchemaItemBusExtractor::_internal_properties_size() const {
  return properties_.size();
}
inline int SchemaItemBusExtractor::properties_size() const {
  return _internal_properties_size();
}
inline void SchemaItemBusExtractor::clear_properties() {
  properties_.Clear();
}
inline ::Proto::Property* SchemaItemBusExtractor::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemBusExtractor.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >*
SchemaItemBusExtractor::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaItemBusExtractor.properties)
  return &properties_;
}
inline const ::Proto::Property& SchemaItemBusExtractor::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::Proto::Property& SchemaItemBusExtractor::properties(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemBusExtractor.properties)
  return _internal_properties(index);
}
inline ::Proto::Property* SchemaItemBusExtractor::_internal_add_properties() {
  return properties_.Add();
}
inline ::Proto::Property* SchemaItemBusExtractor::add_properties() {
  // @@protoc_insertion_point(field_add:Proto.SchemaItemBusExtractor.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >&
SchemaItemBusExtractor::properties() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaItemBusExtractor.properties)
  return properties_;
}

// -------------------------------------------------------------------

// SchemaItemLoopback

// optional string loopbackId = 2;
inline bool SchemaItemLoopback::_internal_has_loopbackid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemLoopback::has_loopbackid() const {
  return _internal_has_loopbackid();
}
inline void SchemaItemLoopback::clear_loopbackid() {
  loopbackid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemLoopback::loopbackid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLoopback.loopbackId)
  return _internal_loopbackid();
}
inline void SchemaItemLoopback::set_loopbackid(const std::string& value) {
  _internal_set_loopbackid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLoopback.loopbackId)
}
inline std::string* SchemaItemLoopback::mutable_loopbackid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLoopback.loopbackId)
  return _internal_mutable_loopbackid();
}
inline const std::string& SchemaItemLoopback::_internal_loopbackid() const {
  return loopbackid_.Get();
}
inline void SchemaItemLoopback::_internal_set_loopbackid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  loopbackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLoopback::set_loopbackid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  loopbackid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLoopback.loopbackId)
}
inline void SchemaItemLoopback::set_loopbackid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  loopbackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLoopback.loopbackId)
}
inline void SchemaItemLoopback::set_loopbackid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  loopbackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLoopback.loopbackId)
}
inline std::string* SchemaItemLoopback::_internal_mutable_loopbackid() {
  _has_bits_[0] |= 0x00000001u;
  return loopbackid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLoopback::release_loopbackid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLoopback.loopbackId)
  if (!_internal_has_loopbackid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return loopbackid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLoopback::set_allocated_loopbackid(std::string* loopbackid) {
  if (loopbackid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loopbackid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loopbackid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLoopback.loopbackId)
}

// -------------------------------------------------------------------

// SchemaItemLoopbackSource

// -------------------------------------------------------------------

// SchemaItemLoopbackTarget

// -------------------------------------------------------------------

// SchemaItemControl

// optional string styleSheet = 1;
inline bool SchemaItemControl::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemControl::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline void SchemaItemControl::clear_stylesheet() {
  stylesheet_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemControl::stylesheet() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemControl.styleSheet)
  return _internal_stylesheet();
}
inline void SchemaItemControl::set_stylesheet(const std::string& value) {
  _internal_set_stylesheet(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemControl.styleSheet)
}
inline std::string* SchemaItemControl::mutable_stylesheet() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemControl.styleSheet)
  return _internal_mutable_stylesheet();
}
inline const std::string& SchemaItemControl::_internal_stylesheet() const {
  return stylesheet_.Get();
}
inline void SchemaItemControl::_internal_set_stylesheet(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stylesheet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemControl::set_stylesheet(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stylesheet_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemControl.styleSheet)
}
inline void SchemaItemControl::set_stylesheet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stylesheet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemControl.styleSheet)
}
inline void SchemaItemControl::set_stylesheet(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stylesheet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemControl.styleSheet)
}
inline std::string* SchemaItemControl::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000001u;
  return stylesheet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemControl::release_stylesheet() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemControl.styleSheet)
  if (!_internal_has_stylesheet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stylesheet_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemControl::set_allocated_stylesheet(std::string* stylesheet) {
  if (stylesheet != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stylesheet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stylesheet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemControl.styleSheet)
}

// optional string toolTip = 2;
inline bool SchemaItemControl::_internal_has_tooltip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemControl::has_tooltip() const {
  return _internal_has_tooltip();
}
inline void SchemaItemControl::clear_tooltip() {
  tooltip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemControl::tooltip() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemControl.toolTip)
  return _internal_tooltip();
}
inline void SchemaItemControl::set_tooltip(const std::string& value) {
  _internal_set_tooltip(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemControl.toolTip)
}
inline std::string* SchemaItemControl::mutable_tooltip() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemControl.toolTip)
  return _internal_mutable_tooltip();
}
inline const std::string& SchemaItemControl::_internal_tooltip() const {
  return tooltip_.Get();
}
inline void SchemaItemControl::_internal_set_tooltip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tooltip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemControl::set_tooltip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tooltip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemControl.toolTip)
}
inline void SchemaItemControl::set_tooltip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tooltip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemControl.toolTip)
}
inline void SchemaItemControl::set_tooltip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tooltip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemControl.toolTip)
}
inline std::string* SchemaItemControl::_internal_mutable_tooltip() {
  _has_bits_[0] |= 0x00000002u;
  return tooltip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemControl::release_tooltip() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemControl.toolTip)
  if (!_internal_has_tooltip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tooltip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemControl::set_allocated_tooltip(std::string* tooltip) {
  if (tooltip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tooltip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tooltip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemControl.toolTip)
}

// -------------------------------------------------------------------

// SchemaItemPushButton

// optional string text = 1;
inline bool SchemaItemPushButton::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_text() const {
  return _internal_has_text();
}
inline void SchemaItemPushButton::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemPushButton::text() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.text)
  return _internal_text();
}
inline void SchemaItemPushButton::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.text)
}
inline std::string* SchemaItemPushButton::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemPushButton.text)
  return _internal_mutable_text();
}
inline const std::string& SchemaItemPushButton::_internal_text() const {
  return text_.Get();
}
inline void SchemaItemPushButton::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemPushButton::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemPushButton.text)
}
inline void SchemaItemPushButton::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemPushButton.text)
}
inline void SchemaItemPushButton::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemPushButton.text)
}
inline std::string* SchemaItemPushButton::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemPushButton::release_text() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemPushButton.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemPushButton::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemPushButton.text)
}

// optional bool checkable = 2;
inline bool SchemaItemPushButton::_internal_has_checkable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_checkable() const {
  return _internal_has_checkable();
}
inline void SchemaItemPushButton::clear_checkable() {
  checkable_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SchemaItemPushButton::_internal_checkable() const {
  return checkable_;
}
inline bool SchemaItemPushButton::checkable() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.checkable)
  return _internal_checkable();
}
inline void SchemaItemPushButton::_internal_set_checkable(bool value) {
  _has_bits_[0] |= 0x00000040u;
  checkable_ = value;
}
inline void SchemaItemPushButton::set_checkable(bool value) {
  _internal_set_checkable(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.checkable)
}

// optional bool checkedDefault = 3;
inline bool SchemaItemPushButton::_internal_has_checkeddefault() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_checkeddefault() const {
  return _internal_has_checkeddefault();
}
inline void SchemaItemPushButton::clear_checkeddefault() {
  checkeddefault_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SchemaItemPushButton::_internal_checkeddefault() const {
  return checkeddefault_;
}
inline bool SchemaItemPushButton::checkeddefault() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.checkedDefault)
  return _internal_checkeddefault();
}
inline void SchemaItemPushButton::_internal_set_checkeddefault(bool value) {
  _has_bits_[0] |= 0x00000080u;
  checkeddefault_ = value;
}
inline void SchemaItemPushButton::set_checkeddefault(bool value) {
  _internal_set_checkeddefault(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.checkedDefault)
}

// optional bool autoRepeat = 4;
inline bool SchemaItemPushButton::_internal_has_autorepeat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_autorepeat() const {
  return _internal_has_autorepeat();
}
inline void SchemaItemPushButton::clear_autorepeat() {
  autorepeat_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SchemaItemPushButton::_internal_autorepeat() const {
  return autorepeat_;
}
inline bool SchemaItemPushButton::autorepeat() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.autoRepeat)
  return _internal_autorepeat();
}
inline void SchemaItemPushButton::_internal_set_autorepeat(bool value) {
  _has_bits_[0] |= 0x00000100u;
  autorepeat_ = value;
}
inline void SchemaItemPushButton::set_autorepeat(bool value) {
  _internal_set_autorepeat(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.autoRepeat)
}

// optional int32 autoRepeatDelay = 5;
inline bool SchemaItemPushButton::_internal_has_autorepeatdelay() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_autorepeatdelay() const {
  return _internal_has_autorepeatdelay();
}
inline void SchemaItemPushButton::clear_autorepeatdelay() {
  autorepeatdelay_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemPushButton::_internal_autorepeatdelay() const {
  return autorepeatdelay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemPushButton::autorepeatdelay() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.autoRepeatDelay)
  return _internal_autorepeatdelay();
}
inline void SchemaItemPushButton::_internal_set_autorepeatdelay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  autorepeatdelay_ = value;
}
inline void SchemaItemPushButton::set_autorepeatdelay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_autorepeatdelay(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.autoRepeatDelay)
}

// optional int32 autoRepeatInterval = 6;
inline bool SchemaItemPushButton::_internal_has_autorepeatinterval() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_autorepeatinterval() const {
  return _internal_has_autorepeatinterval();
}
inline void SchemaItemPushButton::clear_autorepeatinterval() {
  autorepeatinterval_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemPushButton::_internal_autorepeatinterval() const {
  return autorepeatinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemPushButton::autorepeatinterval() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.autoRepeatInterval)
  return _internal_autorepeatinterval();
}
inline void SchemaItemPushButton::_internal_set_autorepeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  autorepeatinterval_ = value;
}
inline void SchemaItemPushButton::set_autorepeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_autorepeatinterval(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.autoRepeatInterval)
}

// optional string scriptAfterCreate = 21;
inline bool SchemaItemPushButton::_internal_has_scriptaftercreate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_scriptaftercreate() const {
  return _internal_has_scriptaftercreate();
}
inline void SchemaItemPushButton::clear_scriptaftercreate() {
  scriptaftercreate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemPushButton::scriptaftercreate() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.scriptAfterCreate)
  return _internal_scriptaftercreate();
}
inline void SchemaItemPushButton::set_scriptaftercreate(const std::string& value) {
  _internal_set_scriptaftercreate(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.scriptAfterCreate)
}
inline std::string* SchemaItemPushButton::mutable_scriptaftercreate() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemPushButton.scriptAfterCreate)
  return _internal_mutable_scriptaftercreate();
}
inline const std::string& SchemaItemPushButton::_internal_scriptaftercreate() const {
  return scriptaftercreate_.Get();
}
inline void SchemaItemPushButton::_internal_set_scriptaftercreate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemPushButton::set_scriptaftercreate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  scriptaftercreate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemPushButton.scriptAfterCreate)
}
inline void SchemaItemPushButton::set_scriptaftercreate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemPushButton.scriptAfterCreate)
}
inline void SchemaItemPushButton::set_scriptaftercreate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemPushButton.scriptAfterCreate)
}
inline std::string* SchemaItemPushButton::_internal_mutable_scriptaftercreate() {
  _has_bits_[0] |= 0x00000002u;
  return scriptaftercreate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemPushButton::release_scriptaftercreate() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemPushButton.scriptAfterCreate)
  if (!_internal_has_scriptaftercreate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return scriptaftercreate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemPushButton::set_allocated_scriptaftercreate(std::string* scriptaftercreate) {
  if (scriptaftercreate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scriptaftercreate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptaftercreate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemPushButton.scriptAfterCreate)
}

// optional string scriptClicked = 22;
inline bool SchemaItemPushButton::_internal_has_scriptclicked() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_scriptclicked() const {
  return _internal_has_scriptclicked();
}
inline void SchemaItemPushButton::clear_scriptclicked() {
  scriptclicked_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SchemaItemPushButton::scriptclicked() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.scriptClicked)
  return _internal_scriptclicked();
}
inline void SchemaItemPushButton::set_scriptclicked(const std::string& value) {
  _internal_set_scriptclicked(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.scriptClicked)
}
inline std::string* SchemaItemPushButton::mutable_scriptclicked() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemPushButton.scriptClicked)
  return _internal_mutable_scriptclicked();
}
inline const std::string& SchemaItemPushButton::_internal_scriptclicked() const {
  return scriptclicked_.Get();
}
inline void SchemaItemPushButton::_internal_set_scriptclicked(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  scriptclicked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemPushButton::set_scriptclicked(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  scriptclicked_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemPushButton.scriptClicked)
}
inline void SchemaItemPushButton::set_scriptclicked(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  scriptclicked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemPushButton.scriptClicked)
}
inline void SchemaItemPushButton::set_scriptclicked(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  scriptclicked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemPushButton.scriptClicked)
}
inline std::string* SchemaItemPushButton::_internal_mutable_scriptclicked() {
  _has_bits_[0] |= 0x00000004u;
  return scriptclicked_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemPushButton::release_scriptclicked() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemPushButton.scriptClicked)
  if (!_internal_has_scriptclicked()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return scriptclicked_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemPushButton::set_allocated_scriptclicked(std::string* scriptclicked) {
  if (scriptclicked != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scriptclicked_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptclicked,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemPushButton.scriptClicked)
}

// optional string scriptPressed = 23;
inline bool SchemaItemPushButton::_internal_has_scriptpressed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_scriptpressed() const {
  return _internal_has_scriptpressed();
}
inline void SchemaItemPushButton::clear_scriptpressed() {
  scriptpressed_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SchemaItemPushButton::scriptpressed() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.scriptPressed)
  return _internal_scriptpressed();
}
inline void SchemaItemPushButton::set_scriptpressed(const std::string& value) {
  _internal_set_scriptpressed(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.scriptPressed)
}
inline std::string* SchemaItemPushButton::mutable_scriptpressed() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemPushButton.scriptPressed)
  return _internal_mutable_scriptpressed();
}
inline const std::string& SchemaItemPushButton::_internal_scriptpressed() const {
  return scriptpressed_.Get();
}
inline void SchemaItemPushButton::_internal_set_scriptpressed(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  scriptpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemPushButton::set_scriptpressed(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  scriptpressed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemPushButton.scriptPressed)
}
inline void SchemaItemPushButton::set_scriptpressed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  scriptpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemPushButton.scriptPressed)
}
inline void SchemaItemPushButton::set_scriptpressed(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  scriptpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemPushButton.scriptPressed)
}
inline std::string* SchemaItemPushButton::_internal_mutable_scriptpressed() {
  _has_bits_[0] |= 0x00000008u;
  return scriptpressed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemPushButton::release_scriptpressed() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemPushButton.scriptPressed)
  if (!_internal_has_scriptpressed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return scriptpressed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemPushButton::set_allocated_scriptpressed(std::string* scriptpressed) {
  if (scriptpressed != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  scriptpressed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpressed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemPushButton.scriptPressed)
}

// optional string scriptReleased = 24;
inline bool SchemaItemPushButton::_internal_has_scriptreleased() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_scriptreleased() const {
  return _internal_has_scriptreleased();
}
inline void SchemaItemPushButton::clear_scriptreleased() {
  scriptreleased_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SchemaItemPushButton::scriptreleased() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.scriptReleased)
  return _internal_scriptreleased();
}
inline void SchemaItemPushButton::set_scriptreleased(const std::string& value) {
  _internal_set_scriptreleased(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.scriptReleased)
}
inline std::string* SchemaItemPushButton::mutable_scriptreleased() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemPushButton.scriptReleased)
  return _internal_mutable_scriptreleased();
}
inline const std::string& SchemaItemPushButton::_internal_scriptreleased() const {
  return scriptreleased_.Get();
}
inline void SchemaItemPushButton::_internal_set_scriptreleased(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  scriptreleased_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemPushButton::set_scriptreleased(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  scriptreleased_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemPushButton.scriptReleased)
}
inline void SchemaItemPushButton::set_scriptreleased(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  scriptreleased_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemPushButton.scriptReleased)
}
inline void SchemaItemPushButton::set_scriptreleased(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  scriptreleased_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemPushButton.scriptReleased)
}
inline std::string* SchemaItemPushButton::_internal_mutable_scriptreleased() {
  _has_bits_[0] |= 0x00000010u;
  return scriptreleased_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemPushButton::release_scriptreleased() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemPushButton.scriptReleased)
  if (!_internal_has_scriptreleased()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return scriptreleased_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemPushButton::set_allocated_scriptreleased(std::string* scriptreleased) {
  if (scriptreleased != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  scriptreleased_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptreleased,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemPushButton.scriptReleased)
}

// optional string scriptToggled = 25;
inline bool SchemaItemPushButton::_internal_has_scripttoggled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemPushButton::has_scripttoggled() const {
  return _internal_has_scripttoggled();
}
inline void SchemaItemPushButton::clear_scripttoggled() {
  scripttoggled_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SchemaItemPushButton::scripttoggled() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemPushButton.scriptToggled)
  return _internal_scripttoggled();
}
inline void SchemaItemPushButton::set_scripttoggled(const std::string& value) {
  _internal_set_scripttoggled(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemPushButton.scriptToggled)
}
inline std::string* SchemaItemPushButton::mutable_scripttoggled() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemPushButton.scriptToggled)
  return _internal_mutable_scripttoggled();
}
inline const std::string& SchemaItemPushButton::_internal_scripttoggled() const {
  return scripttoggled_.Get();
}
inline void SchemaItemPushButton::_internal_set_scripttoggled(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  scripttoggled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemPushButton::set_scripttoggled(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  scripttoggled_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemPushButton.scriptToggled)
}
inline void SchemaItemPushButton::set_scripttoggled(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  scripttoggled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemPushButton.scriptToggled)
}
inline void SchemaItemPushButton::set_scripttoggled(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  scripttoggled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemPushButton.scriptToggled)
}
inline std::string* SchemaItemPushButton::_internal_mutable_scripttoggled() {
  _has_bits_[0] |= 0x00000020u;
  return scripttoggled_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemPushButton::release_scripttoggled() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemPushButton.scriptToggled)
  if (!_internal_has_scripttoggled()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return scripttoggled_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemPushButton::set_allocated_scripttoggled(std::string* scripttoggled) {
  if (scripttoggled != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  scripttoggled_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scripttoggled,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemPushButton.scriptToggled)
}

// -------------------------------------------------------------------

// SchemaItemLineEdit

// optional string text = 1;
inline bool SchemaItemLineEdit::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_text() const {
  return _internal_has_text();
}
inline void SchemaItemLineEdit::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaItemLineEdit::text() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.text)
  return _internal_text();
}
inline void SchemaItemLineEdit::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.text)
}
inline std::string* SchemaItemLineEdit::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLineEdit.text)
  return _internal_mutable_text();
}
inline const std::string& SchemaItemLineEdit::_internal_text() const {
  return text_.Get();
}
inline void SchemaItemLineEdit::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLineEdit::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLineEdit.text)
}
inline void SchemaItemLineEdit::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLineEdit.text)
}
inline void SchemaItemLineEdit::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLineEdit.text)
}
inline std::string* SchemaItemLineEdit::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLineEdit::release_text() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLineEdit.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLineEdit::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLineEdit.text)
}

// optional int32 horzAlign = 2;
inline bool SchemaItemLineEdit::_internal_has_horzalign() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_horzalign() const {
  return _internal_has_horzalign();
}
inline void SchemaItemLineEdit::clear_horzalign() {
  horzalign_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemLineEdit::_internal_horzalign() const {
  return horzalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemLineEdit::horzalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.horzAlign)
  return _internal_horzalign();
}
inline void SchemaItemLineEdit::_internal_set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  horzalign_ = value;
}
inline void SchemaItemLineEdit::set_horzalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_horzalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.horzAlign)
}

// optional int32 vertAlign = 3;
inline bool SchemaItemLineEdit::_internal_has_vertalign() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_vertalign() const {
  return _internal_has_vertalign();
}
inline void SchemaItemLineEdit::clear_vertalign() {
  vertalign_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemLineEdit::_internal_vertalign() const {
  return vertalign_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemLineEdit::vertalign() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.vertAlign)
  return _internal_vertalign();
}
inline void SchemaItemLineEdit::_internal_set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  vertalign_ = value;
}
inline void SchemaItemLineEdit::set_vertalign(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertalign(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.vertAlign)
}

// optional int32 maxLength = 4;
inline bool SchemaItemLineEdit::_internal_has_maxlength() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_maxlength() const {
  return _internal_has_maxlength();
}
inline void SchemaItemLineEdit::clear_maxlength() {
  maxlength_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemLineEdit::_internal_maxlength() const {
  return maxlength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaItemLineEdit::maxlength() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.maxLength)
  return _internal_maxlength();
}
inline void SchemaItemLineEdit::_internal_set_maxlength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  maxlength_ = value;
}
inline void SchemaItemLineEdit::set_maxlength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxlength(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.maxLength)
}

// optional string placeholderText = 5;
inline bool SchemaItemLineEdit::_internal_has_placeholdertext() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_placeholdertext() const {
  return _internal_has_placeholdertext();
}
inline void SchemaItemLineEdit::clear_placeholdertext() {
  placeholdertext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaItemLineEdit::placeholdertext() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.placeholderText)
  return _internal_placeholdertext();
}
inline void SchemaItemLineEdit::set_placeholdertext(const std::string& value) {
  _internal_set_placeholdertext(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.placeholderText)
}
inline std::string* SchemaItemLineEdit::mutable_placeholdertext() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLineEdit.placeholderText)
  return _internal_mutable_placeholdertext();
}
inline const std::string& SchemaItemLineEdit::_internal_placeholdertext() const {
  return placeholdertext_.Get();
}
inline void SchemaItemLineEdit::_internal_set_placeholdertext(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  placeholdertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLineEdit::set_placeholdertext(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  placeholdertext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLineEdit.placeholderText)
}
inline void SchemaItemLineEdit::set_placeholdertext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  placeholdertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLineEdit.placeholderText)
}
inline void SchemaItemLineEdit::set_placeholdertext(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  placeholdertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLineEdit.placeholderText)
}
inline std::string* SchemaItemLineEdit::_internal_mutable_placeholdertext() {
  _has_bits_[0] |= 0x00000002u;
  return placeholdertext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLineEdit::release_placeholdertext() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLineEdit.placeholderText)
  if (!_internal_has_placeholdertext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return placeholdertext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLineEdit::set_allocated_placeholdertext(std::string* placeholdertext) {
  if (placeholdertext != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  placeholdertext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholdertext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLineEdit.placeholderText)
}

// optional bool readOnly = 6;
inline bool SchemaItemLineEdit::_internal_has_readonly() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_readonly() const {
  return _internal_has_readonly();
}
inline void SchemaItemLineEdit::clear_readonly() {
  readonly_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SchemaItemLineEdit::_internal_readonly() const {
  return readonly_;
}
inline bool SchemaItemLineEdit::readonly() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.readOnly)
  return _internal_readonly();
}
inline void SchemaItemLineEdit::_internal_set_readonly(bool value) {
  _has_bits_[0] |= 0x00000200u;
  readonly_ = value;
}
inline void SchemaItemLineEdit::set_readonly(bool value) {
  _internal_set_readonly(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.readOnly)
}

// optional string scriptAfterCreate = 21;
inline bool SchemaItemLineEdit::_internal_has_scriptaftercreate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_scriptaftercreate() const {
  return _internal_has_scriptaftercreate();
}
inline void SchemaItemLineEdit::clear_scriptaftercreate() {
  scriptaftercreate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SchemaItemLineEdit::scriptaftercreate() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.scriptAfterCreate)
  return _internal_scriptaftercreate();
}
inline void SchemaItemLineEdit::set_scriptaftercreate(const std::string& value) {
  _internal_set_scriptaftercreate(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.scriptAfterCreate)
}
inline std::string* SchemaItemLineEdit::mutable_scriptaftercreate() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLineEdit.scriptAfterCreate)
  return _internal_mutable_scriptaftercreate();
}
inline const std::string& SchemaItemLineEdit::_internal_scriptaftercreate() const {
  return scriptaftercreate_.Get();
}
inline void SchemaItemLineEdit::_internal_set_scriptaftercreate(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLineEdit::set_scriptaftercreate(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  scriptaftercreate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLineEdit.scriptAfterCreate)
}
inline void SchemaItemLineEdit::set_scriptaftercreate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLineEdit.scriptAfterCreate)
}
inline void SchemaItemLineEdit::set_scriptaftercreate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLineEdit.scriptAfterCreate)
}
inline std::string* SchemaItemLineEdit::_internal_mutable_scriptaftercreate() {
  _has_bits_[0] |= 0x00000004u;
  return scriptaftercreate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLineEdit::release_scriptaftercreate() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLineEdit.scriptAfterCreate)
  if (!_internal_has_scriptaftercreate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return scriptaftercreate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLineEdit::set_allocated_scriptaftercreate(std::string* scriptaftercreate) {
  if (scriptaftercreate != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scriptaftercreate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptaftercreate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLineEdit.scriptAfterCreate)
}

// optional string scriptEditingFinished = 22;
inline bool SchemaItemLineEdit::_internal_has_scripteditingfinished() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_scripteditingfinished() const {
  return _internal_has_scripteditingfinished();
}
inline void SchemaItemLineEdit::clear_scripteditingfinished() {
  scripteditingfinished_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SchemaItemLineEdit::scripteditingfinished() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.scriptEditingFinished)
  return _internal_scripteditingfinished();
}
inline void SchemaItemLineEdit::set_scripteditingfinished(const std::string& value) {
  _internal_set_scripteditingfinished(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.scriptEditingFinished)
}
inline std::string* SchemaItemLineEdit::mutable_scripteditingfinished() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLineEdit.scriptEditingFinished)
  return _internal_mutable_scripteditingfinished();
}
inline const std::string& SchemaItemLineEdit::_internal_scripteditingfinished() const {
  return scripteditingfinished_.Get();
}
inline void SchemaItemLineEdit::_internal_set_scripteditingfinished(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  scripteditingfinished_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLineEdit::set_scripteditingfinished(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  scripteditingfinished_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLineEdit.scriptEditingFinished)
}
inline void SchemaItemLineEdit::set_scripteditingfinished(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  scripteditingfinished_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLineEdit.scriptEditingFinished)
}
inline void SchemaItemLineEdit::set_scripteditingfinished(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  scripteditingfinished_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLineEdit.scriptEditingFinished)
}
inline std::string* SchemaItemLineEdit::_internal_mutable_scripteditingfinished() {
  _has_bits_[0] |= 0x00000008u;
  return scripteditingfinished_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLineEdit::release_scripteditingfinished() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLineEdit.scriptEditingFinished)
  if (!_internal_has_scripteditingfinished()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return scripteditingfinished_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLineEdit::set_allocated_scripteditingfinished(std::string* scripteditingfinished) {
  if (scripteditingfinished != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  scripteditingfinished_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scripteditingfinished,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLineEdit.scriptEditingFinished)
}

// optional string scriptReturnPressed = 23;
inline bool SchemaItemLineEdit::_internal_has_scriptreturnpressed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_scriptreturnpressed() const {
  return _internal_has_scriptreturnpressed();
}
inline void SchemaItemLineEdit::clear_scriptreturnpressed() {
  scriptreturnpressed_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SchemaItemLineEdit::scriptreturnpressed() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.scriptReturnPressed)
  return _internal_scriptreturnpressed();
}
inline void SchemaItemLineEdit::set_scriptreturnpressed(const std::string& value) {
  _internal_set_scriptreturnpressed(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.scriptReturnPressed)
}
inline std::string* SchemaItemLineEdit::mutable_scriptreturnpressed() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLineEdit.scriptReturnPressed)
  return _internal_mutable_scriptreturnpressed();
}
inline const std::string& SchemaItemLineEdit::_internal_scriptreturnpressed() const {
  return scriptreturnpressed_.Get();
}
inline void SchemaItemLineEdit::_internal_set_scriptreturnpressed(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  scriptreturnpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLineEdit::set_scriptreturnpressed(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  scriptreturnpressed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLineEdit.scriptReturnPressed)
}
inline void SchemaItemLineEdit::set_scriptreturnpressed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  scriptreturnpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLineEdit.scriptReturnPressed)
}
inline void SchemaItemLineEdit::set_scriptreturnpressed(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  scriptreturnpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLineEdit.scriptReturnPressed)
}
inline std::string* SchemaItemLineEdit::_internal_mutable_scriptreturnpressed() {
  _has_bits_[0] |= 0x00000010u;
  return scriptreturnpressed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLineEdit::release_scriptreturnpressed() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLineEdit.scriptReturnPressed)
  if (!_internal_has_scriptreturnpressed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return scriptreturnpressed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLineEdit::set_allocated_scriptreturnpressed(std::string* scriptreturnpressed) {
  if (scriptreturnpressed != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  scriptreturnpressed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptreturnpressed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLineEdit.scriptReturnPressed)
}

// optional string scriptTextChanged = 24;
inline bool SchemaItemLineEdit::_internal_has_scripttextchanged() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaItemLineEdit::has_scripttextchanged() const {
  return _internal_has_scripttextchanged();
}
inline void SchemaItemLineEdit::clear_scripttextchanged() {
  scripttextchanged_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SchemaItemLineEdit::scripttextchanged() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaItemLineEdit.scriptTextChanged)
  return _internal_scripttextchanged();
}
inline void SchemaItemLineEdit::set_scripttextchanged(const std::string& value) {
  _internal_set_scripttextchanged(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaItemLineEdit.scriptTextChanged)
}
inline std::string* SchemaItemLineEdit::mutable_scripttextchanged() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaItemLineEdit.scriptTextChanged)
  return _internal_mutable_scripttextchanged();
}
inline const std::string& SchemaItemLineEdit::_internal_scripttextchanged() const {
  return scripttextchanged_.Get();
}
inline void SchemaItemLineEdit::_internal_set_scripttextchanged(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  scripttextchanged_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaItemLineEdit::set_scripttextchanged(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  scripttextchanged_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaItemLineEdit.scriptTextChanged)
}
inline void SchemaItemLineEdit::set_scripttextchanged(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  scripttextchanged_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaItemLineEdit.scriptTextChanged)
}
inline void SchemaItemLineEdit::set_scripttextchanged(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  scripttextchanged_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaItemLineEdit.scriptTextChanged)
}
inline std::string* SchemaItemLineEdit::_internal_mutable_scripttextchanged() {
  _has_bits_[0] |= 0x00000020u;
  return scripttextchanged_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaItemLineEdit::release_scripttextchanged() {
  // @@protoc_insertion_point(field_release:Proto.SchemaItemLineEdit.scriptTextChanged)
  if (!_internal_has_scripttextchanged()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return scripttextchanged_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaItemLineEdit::set_allocated_scripttextchanged(std::string* scripttextchanged) {
  if (scripttextchanged != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  scripttextchanged_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scripttextchanged,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaItemLineEdit.scriptTextChanged)
}

// -------------------------------------------------------------------

// DeviceObject

// required .Proto.Uuid uuid = 1;
inline bool DeviceObject::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool DeviceObject::has_uuid() const {
  return _internal_has_uuid();
}
inline void DeviceObject::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::Uuid& DeviceObject::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& DeviceObject::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.uuid)
  return _internal_uuid();
}
inline void DeviceObject::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.uuid)
}
inline ::Proto::Uuid* DeviceObject::release_uuid() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* DeviceObject::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.uuid)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* DeviceObject::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000002u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* DeviceObject::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.uuid)
  return _internal_mutable_uuid();
}
inline void DeviceObject::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.uuid)
}

// required .Proto.wstring equipmentId = 2;
inline bool DeviceObject::_internal_has_equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || equipmentid_ != nullptr);
  return value;
}
inline bool DeviceObject::has_equipmentid() const {
  return _internal_has_equipmentid();
}
inline void DeviceObject::clear_equipmentid() {
  if (equipmentid_ != nullptr) equipmentid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::wstring& DeviceObject::_internal_equipmentid() const {
  const ::Proto::wstring* p = equipmentid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& DeviceObject::equipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.equipmentId)
  return _internal_equipmentid();
}
inline void DeviceObject::unsafe_arena_set_allocated_equipmentid(
    ::Proto::wstring* equipmentid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentid_);
  }
  equipmentid_ = equipmentid;
  if (equipmentid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.equipmentId)
}
inline ::Proto::wstring* DeviceObject::release_equipmentid() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::wstring* temp = equipmentid_;
  equipmentid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* DeviceObject::unsafe_arena_release_equipmentid() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.equipmentId)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::wstring* temp = equipmentid_;
  equipmentid_ = nullptr;
  return temp;
}
inline ::Proto::wstring* DeviceObject::_internal_mutable_equipmentid() {
  _has_bits_[0] |= 0x00000004u;
  if (equipmentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    equipmentid_ = p;
  }
  return equipmentid_;
}
inline ::Proto::wstring* DeviceObject::mutable_equipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.equipmentId)
  return _internal_mutable_equipmentid();
}
inline void DeviceObject::set_allocated_equipmentid(::Proto::wstring* equipmentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete equipmentid_;
  }
  if (equipmentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(equipmentid);
    if (message_arena != submessage_arena) {
      equipmentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipmentid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  equipmentid_ = equipmentid;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.equipmentId)
}

// required .Proto.wstring caption = 3;
inline bool DeviceObject::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || caption_ != nullptr);
  return value;
}
inline bool DeviceObject::has_caption() const {
  return _internal_has_caption();
}
inline void DeviceObject::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::wstring& DeviceObject::_internal_caption() const {
  const ::Proto::wstring* p = caption_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& DeviceObject::caption() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.caption)
  return _internal_caption();
}
inline void DeviceObject::unsafe_arena_set_allocated_caption(
    ::Proto::wstring* caption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_);
  }
  caption_ = caption;
  if (caption) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.caption)
}
inline ::Proto::wstring* DeviceObject::release_caption() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* DeviceObject::unsafe_arena_release_caption() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.caption)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::wstring* temp = caption_;
  caption_ = nullptr;
  return temp;
}
inline ::Proto::wstring* DeviceObject::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000008u;
  if (caption_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    caption_ = p;
  }
  return caption_;
}
inline ::Proto::wstring* DeviceObject::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.caption)
  return _internal_mutable_caption();
}
inline void DeviceObject::set_allocated_caption(::Proto::wstring* caption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caption_;
  }
  if (caption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caption);
    if (message_arena != submessage_arena) {
      caption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  caption_ = caption;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.caption)
}

// optional .Proto.wstring childRestriction = 4;
inline bool DeviceObject::_internal_has_childrestriction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || childrestriction_ != nullptr);
  return value;
}
inline bool DeviceObject::has_childrestriction() const {
  return _internal_has_childrestriction();
}
inline void DeviceObject::clear_childrestriction() {
  if (childrestriction_ != nullptr) childrestriction_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::wstring& DeviceObject::_internal_childrestriction() const {
  const ::Proto::wstring* p = childrestriction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& DeviceObject::childrestriction() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.childRestriction)
  return _internal_childrestriction();
}
inline void DeviceObject::unsafe_arena_set_allocated_childrestriction(
    ::Proto::wstring* childrestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childrestriction_);
  }
  childrestriction_ = childrestriction;
  if (childrestriction) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.childRestriction)
}
inline ::Proto::wstring* DeviceObject::release_childrestriction() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::wstring* temp = childrestriction_;
  childrestriction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* DeviceObject::unsafe_arena_release_childrestriction() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.childRestriction)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::wstring* temp = childrestriction_;
  childrestriction_ = nullptr;
  return temp;
}
inline ::Proto::wstring* DeviceObject::_internal_mutable_childrestriction() {
  _has_bits_[0] |= 0x00000010u;
  if (childrestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    childrestriction_ = p;
  }
  return childrestriction_;
}
inline ::Proto::wstring* DeviceObject::mutable_childrestriction() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.childRestriction)
  return _internal_mutable_childrestriction();
}
inline void DeviceObject::set_allocated_childrestriction(::Proto::wstring* childrestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete childrestriction_;
  }
  if (childrestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(childrestriction);
    if (message_arena != submessage_arena) {
      childrestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childrestriction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  childrestriction_ = childrestriction;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.childRestriction)
}

// optional int32 place = 5 [default = 0];
inline bool DeviceObject::_internal_has_place() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DeviceObject::has_place() const {
  return _internal_has_place();
}
inline void DeviceObject::clear_place() {
  place_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceObject::_internal_place() const {
  return place_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceObject::place() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.place)
  return _internal_place();
}
inline void DeviceObject::_internal_set_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  place_ = value;
}
inline void DeviceObject::set_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_place(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceObject.place)
}

// optional string specific_properties_struct = 6;
inline bool DeviceObject::_internal_has_specific_properties_struct() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceObject::has_specific_properties_struct() const {
  return _internal_has_specific_properties_struct();
}
inline void DeviceObject::clear_specific_properties_struct() {
  specific_properties_struct_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceObject::specific_properties_struct() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.specific_properties_struct)
  return _internal_specific_properties_struct();
}
inline void DeviceObject::set_specific_properties_struct(const std::string& value) {
  _internal_set_specific_properties_struct(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceObject.specific_properties_struct)
}
inline std::string* DeviceObject::mutable_specific_properties_struct() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.specific_properties_struct)
  return _internal_mutable_specific_properties_struct();
}
inline const std::string& DeviceObject::_internal_specific_properties_struct() const {
  return specific_properties_struct_.Get();
}
inline void DeviceObject::_internal_set_specific_properties_struct(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  specific_properties_struct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceObject::set_specific_properties_struct(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  specific_properties_struct_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.DeviceObject.specific_properties_struct)
}
inline void DeviceObject::set_specific_properties_struct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  specific_properties_struct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.DeviceObject.specific_properties_struct)
}
inline void DeviceObject::set_specific_properties_struct(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  specific_properties_struct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.DeviceObject.specific_properties_struct)
}
inline std::string* DeviceObject::_internal_mutable_specific_properties_struct() {
  _has_bits_[0] |= 0x00000001u;
  return specific_properties_struct_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceObject::release_specific_properties_struct() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.specific_properties_struct)
  if (!_internal_has_specific_properties_struct()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return specific_properties_struct_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceObject::set_allocated_specific_properties_struct(std::string* specific_properties_struct) {
  if (specific_properties_struct != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  specific_properties_struct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specific_properties_struct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.specific_properties_struct)
}

// repeated .Proto.Property properties = 7;
inline int DeviceObject::_internal_properties_size() const {
  return properties_.size();
}
inline int DeviceObject::properties_size() const {
  return _internal_properties_size();
}
inline void DeviceObject::clear_properties() {
  properties_.Clear();
}
inline ::Proto::Property* DeviceObject::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >*
DeviceObject::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Proto.DeviceObject.properties)
  return &properties_;
}
inline const ::Proto::Property& DeviceObject::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::Proto::Property& DeviceObject::properties(int index) const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.properties)
  return _internal_properties(index);
}
inline ::Proto::Property* DeviceObject::_internal_add_properties() {
  return properties_.Add();
}
inline ::Proto::Property* DeviceObject::add_properties() {
  // @@protoc_insertion_point(field_add:Proto.DeviceObject.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Property >&
DeviceObject::properties() const {
  // @@protoc_insertion_point(field_list:Proto.DeviceObject.properties)
  return properties_;
}

// optional bool preset = 32 [default = false];
inline bool DeviceObject::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DeviceObject::has_preset() const {
  return _internal_has_preset();
}
inline void DeviceObject::clear_preset() {
  preset_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool DeviceObject::_internal_preset() const {
  return preset_;
}
inline bool DeviceObject::preset() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.preset)
  return _internal_preset();
}
inline void DeviceObject::_internal_set_preset(bool value) {
  _has_bits_[0] |= 0x00040000u;
  preset_ = value;
}
inline void DeviceObject::set_preset(bool value) {
  _internal_set_preset(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceObject.preset)
}

// optional bool presetRoot = 33 [default = false];
inline bool DeviceObject::_internal_has_presetroot() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DeviceObject::has_presetroot() const {
  return _internal_has_presetroot();
}
inline void DeviceObject::clear_presetroot() {
  presetroot_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool DeviceObject::_internal_presetroot() const {
  return presetroot_;
}
inline bool DeviceObject::presetroot() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.presetRoot)
  return _internal_presetroot();
}
inline void DeviceObject::_internal_set_presetroot(bool value) {
  _has_bits_[0] |= 0x00080000u;
  presetroot_ = value;
}
inline void DeviceObject::set_presetroot(bool value) {
  _internal_set_presetroot(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceObject.presetRoot)
}

// optional .Proto.wstring presetName = 34;
inline bool DeviceObject::_internal_has_presetname() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || presetname_ != nullptr);
  return value;
}
inline bool DeviceObject::has_presetname() const {
  return _internal_has_presetname();
}
inline void DeviceObject::clear_presetname() {
  if (presetname_ != nullptr) presetname_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::wstring& DeviceObject::_internal_presetname() const {
  const ::Proto::wstring* p = presetname_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::wstring&>(
      ::Proto::_wstring_default_instance_);
}
inline const ::Proto::wstring& DeviceObject::presetname() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.presetName)
  return _internal_presetname();
}
inline void DeviceObject::unsafe_arena_set_allocated_presetname(
    ::Proto::wstring* presetname) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(presetname_);
  }
  presetname_ = presetname;
  if (presetname) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.presetName)
}
inline ::Proto::wstring* DeviceObject::release_presetname() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::wstring* temp = presetname_;
  presetname_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::wstring* DeviceObject::unsafe_arena_release_presetname() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.presetName)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::wstring* temp = presetname_;
  presetname_ = nullptr;
  return temp;
}
inline ::Proto::wstring* DeviceObject::_internal_mutable_presetname() {
  _has_bits_[0] |= 0x00000020u;
  if (presetname_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::wstring>(GetArena());
    presetname_ = p;
  }
  return presetname_;
}
inline ::Proto::wstring* DeviceObject::mutable_presetname() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.presetName)
  return _internal_mutable_presetname();
}
inline void DeviceObject::set_allocated_presetname(::Proto::wstring* presetname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete presetname_;
  }
  if (presetname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(presetname);
    if (message_arena != submessage_arena) {
      presetname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, presetname, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  presetname_ = presetname;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.presetName)
}

// optional .Proto.Uuid presetObjectUuid = 35;
inline bool DeviceObject::_internal_has_presetobjectuuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || presetobjectuuid_ != nullptr);
  return value;
}
inline bool DeviceObject::has_presetobjectuuid() const {
  return _internal_has_presetobjectuuid();
}
inline void DeviceObject::clear_presetobjectuuid() {
  if (presetobjectuuid_ != nullptr) presetobjectuuid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::Uuid& DeviceObject::_internal_presetobjectuuid() const {
  const ::Proto::Uuid* p = presetobjectuuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& DeviceObject::presetobjectuuid() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.presetObjectUuid)
  return _internal_presetobjectuuid();
}
inline void DeviceObject::unsafe_arena_set_allocated_presetobjectuuid(
    ::Proto::Uuid* presetobjectuuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(presetobjectuuid_);
  }
  presetobjectuuid_ = presetobjectuuid;
  if (presetobjectuuid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.presetObjectUuid)
}
inline ::Proto::Uuid* DeviceObject::release_presetobjectuuid() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::Uuid* temp = presetobjectuuid_;
  presetobjectuuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* DeviceObject::unsafe_arena_release_presetobjectuuid() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.presetObjectUuid)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::Uuid* temp = presetobjectuuid_;
  presetobjectuuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* DeviceObject::_internal_mutable_presetobjectuuid() {
  _has_bits_[0] |= 0x00000040u;
  if (presetobjectuuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    presetobjectuuid_ = p;
  }
  return presetobjectuuid_;
}
inline ::Proto::Uuid* DeviceObject::mutable_presetobjectuuid() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.presetObjectUuid)
  return _internal_mutable_presetobjectuuid();
}
inline void DeviceObject::set_allocated_presetobjectuuid(::Proto::Uuid* presetobjectuuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete presetobjectuuid_;
  }
  if (presetobjectuuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(presetobjectuuid);
    if (message_arena != submessage_arena) {
      presetobjectuuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, presetobjectuuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  presetobjectuuid_ = presetobjectuuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.presetObjectUuid)
}

// optional int32 childCountHint = 36 [default = 0];
inline bool DeviceObject::_internal_has_childcounthint() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DeviceObject::has_childcounthint() const {
  return _internal_has_childcounthint();
}
inline void DeviceObject::clear_childcounthint() {
  childcounthint_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceObject::_internal_childcounthint() const {
  return childcounthint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceObject::childcounthint() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.childCountHint)
  return _internal_childcounthint();
}
inline void DeviceObject::_internal_set_childcounthint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  childcounthint_ = value;
}
inline void DeviceObject::set_childcounthint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_childcounthint(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceObject.childCountHint)
}

// optional .Proto.DeviceRoot Root = 100;
inline bool DeviceObject::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool DeviceObject::has_root() const {
  return _internal_has_root();
}
inline void DeviceObject::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Proto::DeviceRoot& DeviceObject::_internal_root() const {
  const ::Proto::DeviceRoot* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceRoot&>(
      ::Proto::_DeviceRoot_default_instance_);
}
inline const ::Proto::DeviceRoot& DeviceObject::root() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Root)
  return _internal_root();
}
inline void DeviceObject::unsafe_arena_set_allocated_root(
    ::Proto::DeviceRoot* root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Root)
}
inline ::Proto::DeviceRoot* DeviceObject::release_root() {
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::DeviceRoot* temp = root_;
  root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceRoot* DeviceObject::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Root)
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::DeviceRoot* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::Proto::DeviceRoot* DeviceObject::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000080u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceRoot>(GetArena());
    root_ = p;
  }
  return root_;
}
inline ::Proto::DeviceRoot* DeviceObject::mutable_root() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Root)
  return _internal_mutable_root();
}
inline void DeviceObject::set_allocated_root(::Proto::DeviceRoot* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Root)
}

// optional .Proto.DeviceSystem System = 101;
inline bool DeviceObject::_internal_has_system() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || system_ != nullptr);
  return value;
}
inline bool DeviceObject::has_system() const {
  return _internal_has_system();
}
inline void DeviceObject::clear_system() {
  if (system_ != nullptr) system_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::Proto::DeviceSystem& DeviceObject::_internal_system() const {
  const ::Proto::DeviceSystem* p = system_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceSystem&>(
      ::Proto::_DeviceSystem_default_instance_);
}
inline const ::Proto::DeviceSystem& DeviceObject::system() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.System)
  return _internal_system();
}
inline void DeviceObject::unsafe_arena_set_allocated_system(
    ::Proto::DeviceSystem* system) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_);
  }
  system_ = system;
  if (system) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.System)
}
inline ::Proto::DeviceSystem* DeviceObject::release_system() {
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::DeviceSystem* temp = system_;
  system_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceSystem* DeviceObject::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.System)
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::DeviceSystem* temp = system_;
  system_ = nullptr;
  return temp;
}
inline ::Proto::DeviceSystem* DeviceObject::_internal_mutable_system() {
  _has_bits_[0] |= 0x00000100u;
  if (system_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceSystem>(GetArena());
    system_ = p;
  }
  return system_;
}
inline ::Proto::DeviceSystem* DeviceObject::mutable_system() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.System)
  return _internal_mutable_system();
}
inline void DeviceObject::set_allocated_system(::Proto::DeviceSystem* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete system_;
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(system);
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.System)
}

// optional .Proto.DeviceRack Rack = 102;
inline bool DeviceObject::_internal_has_rack() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || rack_ != nullptr);
  return value;
}
inline bool DeviceObject::has_rack() const {
  return _internal_has_rack();
}
inline void DeviceObject::clear_rack() {
  if (rack_ != nullptr) rack_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::Proto::DeviceRack& DeviceObject::_internal_rack() const {
  const ::Proto::DeviceRack* p = rack_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceRack&>(
      ::Proto::_DeviceRack_default_instance_);
}
inline const ::Proto::DeviceRack& DeviceObject::rack() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Rack)
  return _internal_rack();
}
inline void DeviceObject::unsafe_arena_set_allocated_rack(
    ::Proto::DeviceRack* rack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rack_);
  }
  rack_ = rack;
  if (rack) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Rack)
}
inline ::Proto::DeviceRack* DeviceObject::release_rack() {
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::DeviceRack* temp = rack_;
  rack_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceRack* DeviceObject::unsafe_arena_release_rack() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Rack)
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::DeviceRack* temp = rack_;
  rack_ = nullptr;
  return temp;
}
inline ::Proto::DeviceRack* DeviceObject::_internal_mutable_rack() {
  _has_bits_[0] |= 0x00000200u;
  if (rack_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceRack>(GetArena());
    rack_ = p;
  }
  return rack_;
}
inline ::Proto::DeviceRack* DeviceObject::mutable_rack() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Rack)
  return _internal_mutable_rack();
}
inline void DeviceObject::set_allocated_rack(::Proto::DeviceRack* rack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rack_;
  }
  if (rack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rack);
    if (message_arena != submessage_arena) {
      rack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  rack_ = rack;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Rack)
}

// optional .Proto.DeviceChassis Chassis = 103;
inline bool DeviceObject::_internal_has_chassis() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || chassis_ != nullptr);
  return value;
}
inline bool DeviceObject::has_chassis() const {
  return _internal_has_chassis();
}
inline void DeviceObject::clear_chassis() {
  if (chassis_ != nullptr) chassis_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::Proto::DeviceChassis& DeviceObject::_internal_chassis() const {
  const ::Proto::DeviceChassis* p = chassis_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceChassis&>(
      ::Proto::_DeviceChassis_default_instance_);
}
inline const ::Proto::DeviceChassis& DeviceObject::chassis() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Chassis)
  return _internal_chassis();
}
inline void DeviceObject::unsafe_arena_set_allocated_chassis(
    ::Proto::DeviceChassis* chassis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chassis_);
  }
  chassis_ = chassis;
  if (chassis) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Chassis)
}
inline ::Proto::DeviceChassis* DeviceObject::release_chassis() {
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::DeviceChassis* temp = chassis_;
  chassis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceChassis* DeviceObject::unsafe_arena_release_chassis() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Chassis)
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::DeviceChassis* temp = chassis_;
  chassis_ = nullptr;
  return temp;
}
inline ::Proto::DeviceChassis* DeviceObject::_internal_mutable_chassis() {
  _has_bits_[0] |= 0x00000400u;
  if (chassis_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceChassis>(GetArena());
    chassis_ = p;
  }
  return chassis_;
}
inline ::Proto::DeviceChassis* DeviceObject::mutable_chassis() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Chassis)
  return _internal_mutable_chassis();
}
inline void DeviceObject::set_allocated_chassis(::Proto::DeviceChassis* chassis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chassis_;
  }
  if (chassis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chassis);
    if (message_arena != submessage_arena) {
      chassis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chassis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  chassis_ = chassis;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Chassis)
}

// optional .Proto.DeviceModule Module = 104;
inline bool DeviceObject::_internal_has_module() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || module_ != nullptr);
  return value;
}
inline bool DeviceObject::has_module() const {
  return _internal_has_module();
}
inline void DeviceObject::clear_module() {
  if (module_ != nullptr) module_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::Proto::DeviceModule& DeviceObject::_internal_module() const {
  const ::Proto::DeviceModule* p = module_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceModule&>(
      ::Proto::_DeviceModule_default_instance_);
}
inline const ::Proto::DeviceModule& DeviceObject::module() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Module)
  return _internal_module();
}
inline void DeviceObject::unsafe_arena_set_allocated_module(
    ::Proto::DeviceModule* module) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_);
  }
  module_ = module;
  if (module) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Module)
}
inline ::Proto::DeviceModule* DeviceObject::release_module() {
  _has_bits_[0] &= ~0x00000800u;
  ::Proto::DeviceModule* temp = module_;
  module_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceModule* DeviceObject::unsafe_arena_release_module() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Module)
  _has_bits_[0] &= ~0x00000800u;
  ::Proto::DeviceModule* temp = module_;
  module_ = nullptr;
  return temp;
}
inline ::Proto::DeviceModule* DeviceObject::_internal_mutable_module() {
  _has_bits_[0] |= 0x00000800u;
  if (module_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceModule>(GetArena());
    module_ = p;
  }
  return module_;
}
inline ::Proto::DeviceModule* DeviceObject::mutable_module() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Module)
  return _internal_mutable_module();
}
inline void DeviceObject::set_allocated_module(::Proto::DeviceModule* module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete module_;
  }
  if (module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(module);
    if (message_arena != submessage_arena) {
      module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  module_ = module;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Module)
}

// optional .Proto.DeviceController Controller = 105;
inline bool DeviceObject::_internal_has_controller() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || controller_ != nullptr);
  return value;
}
inline bool DeviceObject::has_controller() const {
  return _internal_has_controller();
}
inline void DeviceObject::clear_controller() {
  if (controller_ != nullptr) controller_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::Proto::DeviceController& DeviceObject::_internal_controller() const {
  const ::Proto::DeviceController* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceController&>(
      ::Proto::_DeviceController_default_instance_);
}
inline const ::Proto::DeviceController& DeviceObject::controller() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Controller)
  return _internal_controller();
}
inline void DeviceObject::unsafe_arena_set_allocated_controller(
    ::Proto::DeviceController* controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Controller)
}
inline ::Proto::DeviceController* DeviceObject::release_controller() {
  _has_bits_[0] &= ~0x00001000u;
  ::Proto::DeviceController* temp = controller_;
  controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceController* DeviceObject::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Controller)
  _has_bits_[0] &= ~0x00001000u;
  ::Proto::DeviceController* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::Proto::DeviceController* DeviceObject::_internal_mutable_controller() {
  _has_bits_[0] |= 0x00001000u;
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceController>(GetArena());
    controller_ = p;
  }
  return controller_;
}
inline ::Proto::DeviceController* DeviceObject::mutable_controller() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Controller)
  return _internal_mutable_controller();
}
inline void DeviceObject::set_allocated_controller(::Proto::DeviceController* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Controller)
}

// optional .Proto.DeviceSignal Signal = 106;
inline bool DeviceObject::_internal_has_signal() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || signal_ != nullptr);
  return value;
}
inline bool DeviceObject::has_signal() const {
  return _internal_has_signal();
}
inline void DeviceObject::clear_signal() {
  if (signal_ != nullptr) signal_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::Proto::DeviceSignal& DeviceObject::_internal_signal() const {
  const ::Proto::DeviceSignal* p = signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::DeviceSignal&>(
      ::Proto::_DeviceSignal_default_instance_);
}
inline const ::Proto::DeviceSignal& DeviceObject::signal() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Signal)
  return _internal_signal();
}
inline void DeviceObject::unsafe_arena_set_allocated_signal(
    ::Proto::DeviceSignal* signal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_);
  }
  signal_ = signal;
  if (signal) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Signal)
}
inline ::Proto::DeviceSignal* DeviceObject::release_signal() {
  _has_bits_[0] &= ~0x00002000u;
  ::Proto::DeviceSignal* temp = signal_;
  signal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::DeviceSignal* DeviceObject::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Signal)
  _has_bits_[0] &= ~0x00002000u;
  ::Proto::DeviceSignal* temp = signal_;
  signal_ = nullptr;
  return temp;
}
inline ::Proto::DeviceSignal* DeviceObject::_internal_mutable_signal() {
  _has_bits_[0] |= 0x00002000u;
  if (signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DeviceSignal>(GetArena());
    signal_ = p;
  }
  return signal_;
}
inline ::Proto::DeviceSignal* DeviceObject::mutable_signal() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Signal)
  return _internal_mutable_signal();
}
inline void DeviceObject::set_allocated_signal(::Proto::DeviceSignal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signal_;
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signal);
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Signal)
}

// optional .Proto.Workstation Workstation = 107;
inline bool DeviceObject::_internal_has_workstation() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || workstation_ != nullptr);
  return value;
}
inline bool DeviceObject::has_workstation() const {
  return _internal_has_workstation();
}
inline void DeviceObject::clear_workstation() {
  if (workstation_ != nullptr) workstation_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::Proto::Workstation& DeviceObject::_internal_workstation() const {
  const ::Proto::Workstation* p = workstation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Workstation&>(
      ::Proto::_Workstation_default_instance_);
}
inline const ::Proto::Workstation& DeviceObject::workstation() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Workstation)
  return _internal_workstation();
}
inline void DeviceObject::unsafe_arena_set_allocated_workstation(
    ::Proto::Workstation* workstation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workstation_);
  }
  workstation_ = workstation;
  if (workstation) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Workstation)
}
inline ::Proto::Workstation* DeviceObject::release_workstation() {
  _has_bits_[0] &= ~0x00004000u;
  ::Proto::Workstation* temp = workstation_;
  workstation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Workstation* DeviceObject::unsafe_arena_release_workstation() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Workstation)
  _has_bits_[0] &= ~0x00004000u;
  ::Proto::Workstation* temp = workstation_;
  workstation_ = nullptr;
  return temp;
}
inline ::Proto::Workstation* DeviceObject::_internal_mutable_workstation() {
  _has_bits_[0] |= 0x00004000u;
  if (workstation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Workstation>(GetArena());
    workstation_ = p;
  }
  return workstation_;
}
inline ::Proto::Workstation* DeviceObject::mutable_workstation() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Workstation)
  return _internal_mutable_workstation();
}
inline void DeviceObject::set_allocated_workstation(::Proto::Workstation* workstation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete workstation_;
  }
  if (workstation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(workstation);
    if (message_arena != submessage_arena) {
      workstation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workstation, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  workstation_ = workstation;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Workstation)
}

// optional .Proto.Software Software = 108;
inline bool DeviceObject::_internal_has_software() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || software_ != nullptr);
  return value;
}
inline bool DeviceObject::has_software() const {
  return _internal_has_software();
}
inline void DeviceObject::clear_software() {
  if (software_ != nullptr) software_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::Proto::Software& DeviceObject::_internal_software() const {
  const ::Proto::Software* p = software_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Software&>(
      ::Proto::_Software_default_instance_);
}
inline const ::Proto::Software& DeviceObject::software() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.Software)
  return _internal_software();
}
inline void DeviceObject::unsafe_arena_set_allocated_software(
    ::Proto::Software* software) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_);
  }
  software_ = software;
  if (software) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.DeviceObject.Software)
}
inline ::Proto::Software* DeviceObject::release_software() {
  _has_bits_[0] &= ~0x00008000u;
  ::Proto::Software* temp = software_;
  software_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Software* DeviceObject::unsafe_arena_release_software() {
  // @@protoc_insertion_point(field_release:Proto.DeviceObject.Software)
  _has_bits_[0] &= ~0x00008000u;
  ::Proto::Software* temp = software_;
  software_ = nullptr;
  return temp;
}
inline ::Proto::Software* DeviceObject::_internal_mutable_software() {
  _has_bits_[0] |= 0x00008000u;
  if (software_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Software>(GetArena());
    software_ = p;
  }
  return software_;
}
inline ::Proto::Software* DeviceObject::mutable_software() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.Software)
  return _internal_mutable_software();
}
inline void DeviceObject::set_allocated_software(::Proto::Software* software) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete software_;
  }
  if (software) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(software);
    if (message_arena != submessage_arena) {
      software = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  software_ = software;
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceObject.Software)
}

// repeated .Proto.Envelope children = 200;
inline int DeviceObject::_internal_children_size() const {
  return children_.size();
}
inline int DeviceObject::children_size() const {
  return _internal_children_size();
}
inline void DeviceObject::clear_children() {
  children_.Clear();
}
inline ::Proto::Envelope* DeviceObject::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceObject.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >*
DeviceObject::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:Proto.DeviceObject.children)
  return &children_;
}
inline const ::Proto::Envelope& DeviceObject::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::Proto::Envelope& DeviceObject::children(int index) const {
  // @@protoc_insertion_point(field_get:Proto.DeviceObject.children)
  return _internal_children(index);
}
inline ::Proto::Envelope* DeviceObject::_internal_add_children() {
  return children_.Add();
}
inline ::Proto::Envelope* DeviceObject::add_children() {
  // @@protoc_insertion_point(field_add:Proto.DeviceObject.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Envelope >&
DeviceObject::children() const {
  // @@protoc_insertion_point(field_list:Proto.DeviceObject.children)
  return children_;
}

// -------------------------------------------------------------------

// DeviceRoot

// -------------------------------------------------------------------

// DeviceSystem

// -------------------------------------------------------------------

// DeviceRack

// -------------------------------------------------------------------

// DeviceChassis

// optional int32 type = 1 [default = 0];
inline bool DeviceChassis::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceChassis::has_type() const {
  return _internal_has_type();
}
inline void DeviceChassis::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceChassis::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceChassis::type() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceChassis.type)
  return _internal_type();
}
inline void DeviceChassis::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void DeviceChassis::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceChassis.type)
}

// -------------------------------------------------------------------

// DeviceModule

// optional int32 typeObsolete = 1 [default = 0];
inline bool DeviceModule::_internal_has_typeobsolete() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceModule::has_typeobsolete() const {
  return _internal_has_typeobsolete();
}
inline void DeviceModule::clear_typeobsolete() {
  typeobsolete_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceModule::_internal_typeobsolete() const {
  return typeobsolete_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceModule::typeobsolete() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceModule.typeObsolete)
  return _internal_typeobsolete();
}
inline void DeviceModule::_internal_set_typeobsolete(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  typeobsolete_ = value;
}
inline void DeviceModule::set_typeobsolete(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_typeobsolete(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceModule.typeObsolete)
}

// optional string configurationScript = 2;
inline bool DeviceModule::_internal_has_configurationscript() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceModule::has_configurationscript() const {
  return _internal_has_configurationscript();
}
inline void DeviceModule::clear_configurationscript() {
  configurationscript_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceModule::configurationscript() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceModule.configurationScript)
  return _internal_configurationscript();
}
inline void DeviceModule::set_configurationscript(const std::string& value) {
  _internal_set_configurationscript(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceModule.configurationScript)
}
inline std::string* DeviceModule::mutable_configurationscript() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceModule.configurationScript)
  return _internal_mutable_configurationscript();
}
inline const std::string& DeviceModule::_internal_configurationscript() const {
  return configurationscript_.Get();
}
inline void DeviceModule::_internal_set_configurationscript(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  configurationscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceModule::set_configurationscript(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  configurationscript_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.DeviceModule.configurationScript)
}
inline void DeviceModule::set_configurationscript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  configurationscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.DeviceModule.configurationScript)
}
inline void DeviceModule::set_configurationscript(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  configurationscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.DeviceModule.configurationScript)
}
inline std::string* DeviceModule::_internal_mutable_configurationscript() {
  _has_bits_[0] |= 0x00000001u;
  return configurationscript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceModule::release_configurationscript() {
  // @@protoc_insertion_point(field_release:Proto.DeviceModule.configurationScript)
  if (!_internal_has_configurationscript()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return configurationscript_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceModule::set_allocated_configurationscript(std::string* configurationscript) {
  if (configurationscript != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  configurationscript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurationscript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceModule.configurationScript)
}

// optional int32 moduleType = 3;
inline bool DeviceModule::_internal_has_moduletype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceModule::has_moduletype() const {
  return _internal_has_moduletype();
}
inline void DeviceModule::clear_moduletype() {
  moduletype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceModule::_internal_moduletype() const {
  return moduletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceModule::moduletype() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceModule.moduleType)
  return _internal_moduletype();
}
inline void DeviceModule::_internal_set_moduletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  moduletype_ = value;
}
inline void DeviceModule::set_moduletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moduletype(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceModule.moduleType)
}

// optional string rawDataDescription = 4;
inline bool DeviceModule::_internal_has_rawdatadescription() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceModule::has_rawdatadescription() const {
  return _internal_has_rawdatadescription();
}
inline void DeviceModule::clear_rawdatadescription() {
  rawdatadescription_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceModule::rawdatadescription() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceModule.rawDataDescription)
  return _internal_rawdatadescription();
}
inline void DeviceModule::set_rawdatadescription(const std::string& value) {
  _internal_set_rawdatadescription(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceModule.rawDataDescription)
}
inline std::string* DeviceModule::mutable_rawdatadescription() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceModule.rawDataDescription)
  return _internal_mutable_rawdatadescription();
}
inline const std::string& DeviceModule::_internal_rawdatadescription() const {
  return rawdatadescription_.Get();
}
inline void DeviceModule::_internal_set_rawdatadescription(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceModule::set_rawdatadescription(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rawdatadescription_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.DeviceModule.rawDataDescription)
}
inline void DeviceModule::set_rawdatadescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.DeviceModule.rawDataDescription)
}
inline void DeviceModule::set_rawdatadescription(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.DeviceModule.rawDataDescription)
}
inline std::string* DeviceModule::_internal_mutable_rawdatadescription() {
  _has_bits_[0] |= 0x00000002u;
  return rawdatadescription_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceModule::release_rawdatadescription() {
  // @@protoc_insertion_point(field_release:Proto.DeviceModule.rawDataDescription)
  if (!_internal_has_rawdatadescription()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rawdatadescription_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceModule::set_allocated_rawdatadescription(std::string* rawdatadescription) {
  if (rawdatadescription != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rawdatadescription_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawdatadescription,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceModule.rawDataDescription)
}

// optional int32 customModuleFamily = 5 [default = 0];
inline bool DeviceModule::_internal_has_custommodulefamily() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceModule::has_custommodulefamily() const {
  return _internal_has_custommodulefamily();
}
inline void DeviceModule::clear_custommodulefamily() {
  custommodulefamily_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceModule::_internal_custommodulefamily() const {
  return custommodulefamily_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceModule::custommodulefamily() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceModule.customModuleFamily)
  return _internal_custommodulefamily();
}
inline void DeviceModule::_internal_set_custommodulefamily(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  custommodulefamily_ = value;
}
inline void DeviceModule::set_custommodulefamily(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_custommodulefamily(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceModule.customModuleFamily)
}

// -------------------------------------------------------------------

// DeviceController

// -------------------------------------------------------------------

// DeviceSignal

// optional int32 obsoletetype = 1 [default = 0];
inline bool DeviceSignal::_internal_has_obsoletetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceSignal::has_obsoletetype() const {
  return _internal_has_obsoletetype();
}
inline void DeviceSignal::clear_obsoletetype() {
  obsoletetype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_obsoletetype() const {
  return obsoletetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::obsoletetype() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.obsoletetype)
  return _internal_obsoletetype();
}
inline void DeviceSignal::_internal_set_obsoletetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  obsoletetype_ = value;
}
inline void DeviceSignal::set_obsoletetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obsoletetype(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.obsoletetype)
}

// optional int32 byteOrder = 2 [default = 0];
inline bool DeviceSignal::_internal_has_byteorder() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceSignal::has_byteorder() const {
  return _internal_has_byteorder();
}
inline void DeviceSignal::clear_byteorder() {
  byteorder_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_byteorder() const {
  return byteorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::byteorder() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.byteOrder)
  return _internal_byteorder();
}
inline void DeviceSignal::_internal_set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  byteorder_ = value;
}
inline void DeviceSignal::set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_byteorder(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.byteOrder)
}

// optional int32 format = 3 [default = 0];
inline bool DeviceSignal::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeviceSignal::has_format() const {
  return _internal_has_format();
}
inline void DeviceSignal::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::format() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.format)
  return _internal_format();
}
inline void DeviceSignal::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
}
inline void DeviceSignal::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.format)
}

// optional int32 size = 4 [default = 0];
inline bool DeviceSignal::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DeviceSignal::has_size() const {
  return _internal_has_size();
}
inline void DeviceSignal::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::size() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.size)
  return _internal_size();
}
inline void DeviceSignal::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  size_ = value;
}
inline void DeviceSignal::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.size)
}

// optional int32 valueOffset = 7 [default = 0];
inline bool DeviceSignal::_internal_has_valueoffset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DeviceSignal::has_valueoffset() const {
  return _internal_has_valueoffset();
}
inline void DeviceSignal::clear_valueoffset() {
  valueoffset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_valueoffset() const {
  return valueoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::valueoffset() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.valueOffset)
  return _internal_valueoffset();
}
inline void DeviceSignal::_internal_set_valueoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  valueoffset_ = value;
}
inline void DeviceSignal::set_valueoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_valueoffset(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.valueOffset)
}

// optional int32 valueBit = 8 [default = 0];
inline bool DeviceSignal::_internal_has_valuebit() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DeviceSignal::has_valuebit() const {
  return _internal_has_valuebit();
}
inline void DeviceSignal::clear_valuebit() {
  valuebit_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_valuebit() const {
  return valuebit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::valuebit() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.valueBit)
  return _internal_valuebit();
}
inline void DeviceSignal::_internal_set_valuebit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  valuebit_ = value;
}
inline void DeviceSignal::set_valuebit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_valuebit(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.valueBit)
}

// optional int32 type = 9 [default = 0];
inline bool DeviceSignal::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DeviceSignal::has_type() const {
  return _internal_has_type();
}
inline void DeviceSignal::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::type() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.type)
  return _internal_type();
}
inline void DeviceSignal::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void DeviceSignal::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.type)
}

// optional int32 function = 10 [default = 0];
inline bool DeviceSignal::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DeviceSignal::has_function() const {
  return _internal_has_function();
}
inline void DeviceSignal::clear_function() {
  function_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_function() const {
  return function_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::function() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.function)
  return _internal_function();
}
inline void DeviceSignal::_internal_set_function(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  function_ = value;
}
inline void DeviceSignal::set_function(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.function)
}

// optional int32 memoryArea = 11 [default = 0];
inline bool DeviceSignal::_internal_has_memoryarea() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DeviceSignal::has_memoryarea() const {
  return _internal_has_memoryarea();
}
inline void DeviceSignal::clear_memoryarea() {
  memoryarea_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_memoryarea() const {
  return memoryarea_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::memoryarea() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.memoryArea)
  return _internal_memoryarea();
}
inline void DeviceSignal::_internal_set_memoryarea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  memoryarea_ = value;
}
inline void DeviceSignal::set_memoryarea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memoryarea(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.memoryArea)
}

// optional int32 appSignalLowAdc = 12 [default = 0];
inline bool DeviceSignal::_internal_has_appsignallowadc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DeviceSignal::has_appsignallowadc() const {
  return _internal_has_appsignallowadc();
}
inline void DeviceSignal::clear_appsignallowadc() {
  appsignallowadc_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_appsignallowadc() const {
  return appsignallowadc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::appsignallowadc() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.appSignalLowAdc)
  return _internal_appsignallowadc();
}
inline void DeviceSignal::_internal_set_appsignallowadc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  appsignallowadc_ = value;
}
inline void DeviceSignal::set_appsignallowadc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appsignallowadc(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.appSignalLowAdc)
}

// optional int32 appSignalHighAdc = 13 [default = 65535];
inline bool DeviceSignal::_internal_has_appsignalhighadc() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DeviceSignal::has_appsignalhighadc() const {
  return _internal_has_appsignalhighadc();
}
inline void DeviceSignal::clear_appsignalhighadc() {
  appsignalhighadc_ = 65535;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_appsignalhighadc() const {
  return appsignalhighadc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::appsignalhighadc() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.appSignalHighAdc)
  return _internal_appsignalhighadc();
}
inline void DeviceSignal::_internal_set_appsignalhighadc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  appsignalhighadc_ = value;
}
inline void DeviceSignal::set_appsignalhighadc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appsignalhighadc(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.appSignalHighAdc)
}

// optional double appSignalLowEngUnits = 14 [default = 0];
inline bool DeviceSignal::_internal_has_appsignallowengunits() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DeviceSignal::has_appsignallowengunits() const {
  return _internal_has_appsignallowengunits();
}
inline void DeviceSignal::clear_appsignallowengunits() {
  appsignallowengunits_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double DeviceSignal::_internal_appsignallowengunits() const {
  return appsignallowengunits_;
}
inline double DeviceSignal::appsignallowengunits() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.appSignalLowEngUnits)
  return _internal_appsignallowengunits();
}
inline void DeviceSignal::_internal_set_appsignallowengunits(double value) {
  _has_bits_[0] |= 0x00002000u;
  appsignallowengunits_ = value;
}
inline void DeviceSignal::set_appsignallowengunits(double value) {
  _internal_set_appsignallowengunits(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.appSignalLowEngUnits)
}

// optional double appSignalHighEngUnits = 15 [default = 100];
inline bool DeviceSignal::_internal_has_appsignalhighengunits() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DeviceSignal::has_appsignalhighengunits() const {
  return _internal_has_appsignalhighengunits();
}
inline void DeviceSignal::clear_appsignalhighengunits() {
  appsignalhighengunits_ = 100;
  _has_bits_[0] &= ~0x00020000u;
}
inline double DeviceSignal::_internal_appsignalhighengunits() const {
  return appsignalhighengunits_;
}
inline double DeviceSignal::appsignalhighengunits() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.appSignalHighEngUnits)
  return _internal_appsignalhighengunits();
}
inline void DeviceSignal::_internal_set_appsignalhighengunits(double value) {
  _has_bits_[0] |= 0x00020000u;
  appsignalhighengunits_ = value;
}
inline void DeviceSignal::set_appsignalhighengunits(double value) {
  _internal_set_appsignalhighengunits(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.appSignalHighEngUnits)
}

// optional int32 appSignalDataFormat = 16 [default = 2];
inline bool DeviceSignal::_internal_has_appsignaldataformat() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DeviceSignal::has_appsignaldataformat() const {
  return _internal_has_appsignaldataformat();
}
inline void DeviceSignal::clear_appsignaldataformat() {
  appsignaldataformat_ = 2;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::_internal_appsignaldataformat() const {
  return appsignaldataformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceSignal::appsignaldataformat() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.appSignalDataFormat)
  return _internal_appsignaldataformat();
}
inline void DeviceSignal::_internal_set_appsignaldataformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  appsignaldataformat_ = value;
}
inline void DeviceSignal::set_appsignaldataformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appsignaldataformat(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.appSignalDataFormat)
}

// optional string validitySignalId = 20;
inline bool DeviceSignal::_internal_has_validitysignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceSignal::has_validitysignalid() const {
  return _internal_has_validitysignalid();
}
inline void DeviceSignal::clear_validitysignalid() {
  validitysignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceSignal::validitysignalid() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.validitySignalId)
  return _internal_validitysignalid();
}
inline void DeviceSignal::set_validitysignalid(const std::string& value) {
  _internal_set_validitysignalid(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.validitySignalId)
}
inline std::string* DeviceSignal::mutable_validitysignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceSignal.validitySignalId)
  return _internal_mutable_validitysignalid();
}
inline const std::string& DeviceSignal::_internal_validitysignalid() const {
  return validitysignalid_.Get();
}
inline void DeviceSignal::_internal_set_validitysignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  validitysignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceSignal::set_validitysignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  validitysignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.DeviceSignal.validitySignalId)
}
inline void DeviceSignal::set_validitysignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  validitysignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.DeviceSignal.validitySignalId)
}
inline void DeviceSignal::set_validitysignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  validitysignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.DeviceSignal.validitySignalId)
}
inline std::string* DeviceSignal::_internal_mutable_validitysignalid() {
  _has_bits_[0] |= 0x00000001u;
  return validitysignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceSignal::release_validitysignalid() {
  // @@protoc_insertion_point(field_release:Proto.DeviceSignal.validitySignalId)
  if (!_internal_has_validitysignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return validitysignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSignal::set_allocated_validitysignalid(std::string* validitysignalid) {
  if (validitysignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  validitysignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validitysignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceSignal.validitySignalId)
}

// optional string appSignalBusTypeId = 26;
inline bool DeviceSignal::_internal_has_appsignalbustypeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceSignal::has_appsignalbustypeid() const {
  return _internal_has_appsignalbustypeid();
}
inline void DeviceSignal::clear_appsignalbustypeid() {
  appsignalbustypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceSignal::appsignalbustypeid() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.appSignalBusTypeId)
  return _internal_appsignalbustypeid();
}
inline void DeviceSignal::set_appsignalbustypeid(const std::string& value) {
  _internal_set_appsignalbustypeid(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.appSignalBusTypeId)
}
inline std::string* DeviceSignal::mutable_appsignalbustypeid() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceSignal.appSignalBusTypeId)
  return _internal_mutable_appsignalbustypeid();
}
inline const std::string& DeviceSignal::_internal_appsignalbustypeid() const {
  return appsignalbustypeid_.Get();
}
inline void DeviceSignal::_internal_set_appsignalbustypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  appsignalbustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceSignal::set_appsignalbustypeid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  appsignalbustypeid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.DeviceSignal.appSignalBusTypeId)
}
inline void DeviceSignal::set_appsignalbustypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  appsignalbustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.DeviceSignal.appSignalBusTypeId)
}
inline void DeviceSignal::set_appsignalbustypeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  appsignalbustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.DeviceSignal.appSignalBusTypeId)
}
inline std::string* DeviceSignal::_internal_mutable_appsignalbustypeid() {
  _has_bits_[0] |= 0x00000002u;
  return appsignalbustypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceSignal::release_appsignalbustypeid() {
  // @@protoc_insertion_point(field_release:Proto.DeviceSignal.appSignalBusTypeId)
  if (!_internal_has_appsignalbustypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return appsignalbustypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSignal::set_allocated_appsignalbustypeid(std::string* appsignalbustypeid) {
  if (appsignalbustypeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  appsignalbustypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsignalbustypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceSignal.appSignalBusTypeId)
}

// optional string signalSpecPropsStruct = 40;
inline bool DeviceSignal::_internal_has_signalspecpropsstruct() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceSignal::has_signalspecpropsstruct() const {
  return _internal_has_signalspecpropsstruct();
}
inline void DeviceSignal::clear_signalspecpropsstruct() {
  signalspecpropsstruct_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DeviceSignal::signalspecpropsstruct() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.signalSpecPropsStruct)
  return _internal_signalspecpropsstruct();
}
inline void DeviceSignal::set_signalspecpropsstruct(const std::string& value) {
  _internal_set_signalspecpropsstruct(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.signalSpecPropsStruct)
}
inline std::string* DeviceSignal::mutable_signalspecpropsstruct() {
  // @@protoc_insertion_point(field_mutable:Proto.DeviceSignal.signalSpecPropsStruct)
  return _internal_mutable_signalspecpropsstruct();
}
inline const std::string& DeviceSignal::_internal_signalspecpropsstruct() const {
  return signalspecpropsstruct_.Get();
}
inline void DeviceSignal::_internal_set_signalspecpropsstruct(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signalspecpropsstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceSignal::set_signalspecpropsstruct(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  signalspecpropsstruct_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.DeviceSignal.signalSpecPropsStruct)
}
inline void DeviceSignal::set_signalspecpropsstruct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  signalspecpropsstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.DeviceSignal.signalSpecPropsStruct)
}
inline void DeviceSignal::set_signalspecpropsstruct(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  signalspecpropsstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.DeviceSignal.signalSpecPropsStruct)
}
inline std::string* DeviceSignal::_internal_mutable_signalspecpropsstruct() {
  _has_bits_[0] |= 0x00000004u;
  return signalspecpropsstruct_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceSignal::release_signalspecpropsstruct() {
  // @@protoc_insertion_point(field_release:Proto.DeviceSignal.signalSpecPropsStruct)
  if (!_internal_has_signalspecpropsstruct()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return signalspecpropsstruct_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSignal::set_allocated_signalspecpropsstruct(std::string* signalspecpropsstruct) {
  if (signalspecpropsstruct != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signalspecpropsstruct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalspecpropsstruct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.DeviceSignal.signalSpecPropsStruct)
}

// optional bool signalSpecPropsStructWasFixed = 41 [default = false];
inline bool DeviceSignal::_internal_has_signalspecpropsstructwasfixed() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DeviceSignal::has_signalspecpropsstructwasfixed() const {
  return _internal_has_signalspecpropsstructwasfixed();
}
inline void DeviceSignal::clear_signalspecpropsstructwasfixed() {
  signalspecpropsstructwasfixed_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool DeviceSignal::_internal_signalspecpropsstructwasfixed() const {
  return signalspecpropsstructwasfixed_;
}
inline bool DeviceSignal::signalspecpropsstructwasfixed() const {
  // @@protoc_insertion_point(field_get:Proto.DeviceSignal.signalSpecPropsStructWasFixed)
  return _internal_signalspecpropsstructwasfixed();
}
inline void DeviceSignal::_internal_set_signalspecpropsstructwasfixed(bool value) {
  _has_bits_[0] |= 0x00004000u;
  signalspecpropsstructwasfixed_ = value;
}
inline void DeviceSignal::set_signalspecpropsstructwasfixed(bool value) {
  _internal_set_signalspecpropsstructwasfixed(value);
  // @@protoc_insertion_point(field_set:Proto.DeviceSignal.signalSpecPropsStructWasFixed)
}

// -------------------------------------------------------------------

// Workstation

// optional int32 type = 1 [default = 0];
inline bool Workstation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Workstation::has_type() const {
  return _internal_has_type();
}
inline void Workstation::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Workstation::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Workstation::type() const {
  // @@protoc_insertion_point(field_get:Proto.Workstation.type)
  return _internal_type();
}
inline void Workstation::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Workstation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.Workstation.type)
}

// -------------------------------------------------------------------

// Software

// optional int32 type = 1 [default = 0];
inline bool Software::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Software::has_type() const {
  return _internal_has_type();
}
inline void Software::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Software::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Software::type() const {
  // @@protoc_insertion_point(field_get:Proto.Software.type)
  return _internal_type();
}
inline void Software::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Software::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.Software.type)
}

// -------------------------------------------------------------------

// ModuleConfiguration

// optional string struct_description = 1;
inline bool ModuleConfiguration::_internal_has_struct_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModuleConfiguration::has_struct_description() const {
  return _internal_has_struct_description();
}
inline void ModuleConfiguration::clear_struct_description() {
  struct_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModuleConfiguration::struct_description() const {
  // @@protoc_insertion_point(field_get:Proto.ModuleConfiguration.struct_description)
  return _internal_struct_description();
}
inline void ModuleConfiguration::set_struct_description(const std::string& value) {
  _internal_set_struct_description(value);
  // @@protoc_insertion_point(field_set:Proto.ModuleConfiguration.struct_description)
}
inline std::string* ModuleConfiguration::mutable_struct_description() {
  // @@protoc_insertion_point(field_mutable:Proto.ModuleConfiguration.struct_description)
  return _internal_mutable_struct_description();
}
inline const std::string& ModuleConfiguration::_internal_struct_description() const {
  return struct_description_.Get();
}
inline void ModuleConfiguration::_internal_set_struct_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  struct_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModuleConfiguration::set_struct_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  struct_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ModuleConfiguration.struct_description)
}
inline void ModuleConfiguration::set_struct_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  struct_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ModuleConfiguration.struct_description)
}
inline void ModuleConfiguration::set_struct_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  struct_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ModuleConfiguration.struct_description)
}
inline std::string* ModuleConfiguration::_internal_mutable_struct_description() {
  _has_bits_[0] |= 0x00000001u;
  return struct_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModuleConfiguration::release_struct_description() {
  // @@protoc_insertion_point(field_release:Proto.ModuleConfiguration.struct_description)
  if (!_internal_has_struct_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return struct_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModuleConfiguration::set_allocated_struct_description(std::string* struct_description) {
  if (struct_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  struct_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), struct_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ModuleConfiguration.struct_description)
}

// repeated .Proto.ModuleConfigurationValue values = 2;
inline int ModuleConfiguration::_internal_values_size() const {
  return values_.size();
}
inline int ModuleConfiguration::values_size() const {
  return _internal_values_size();
}
inline void ModuleConfiguration::clear_values() {
  values_.Clear();
}
inline ::Proto::ModuleConfigurationValue* ModuleConfiguration::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ModuleConfiguration.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ModuleConfigurationValue >*
ModuleConfiguration::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ModuleConfiguration.values)
  return &values_;
}
inline const ::Proto::ModuleConfigurationValue& ModuleConfiguration::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Proto::ModuleConfigurationValue& ModuleConfiguration::values(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ModuleConfiguration.values)
  return _internal_values(index);
}
inline ::Proto::ModuleConfigurationValue* ModuleConfiguration::_internal_add_values() {
  return values_.Add();
}
inline ::Proto::ModuleConfigurationValue* ModuleConfiguration::add_values() {
  // @@protoc_insertion_point(field_add:Proto.ModuleConfiguration.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ModuleConfigurationValue >&
ModuleConfiguration::values() const {
  // @@protoc_insertion_point(field_list:Proto.ModuleConfiguration.values)
  return values_;
}

// optional string name = 3 [default = ""];
inline bool ModuleConfiguration::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModuleConfiguration::has_name() const {
  return _internal_has_name();
}
inline void ModuleConfiguration::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModuleConfiguration::name() const {
  // @@protoc_insertion_point(field_get:Proto.ModuleConfiguration.name)
  return _internal_name();
}
inline void ModuleConfiguration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Proto.ModuleConfiguration.name)
}
inline std::string* ModuleConfiguration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto.ModuleConfiguration.name)
  return _internal_mutable_name();
}
inline const std::string& ModuleConfiguration::_internal_name() const {
  return name_.Get();
}
inline void ModuleConfiguration::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModuleConfiguration::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ModuleConfiguration.name)
}
inline void ModuleConfiguration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ModuleConfiguration.name)
}
inline void ModuleConfiguration::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ModuleConfiguration.name)
}
inline std::string* ModuleConfiguration::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModuleConfiguration::release_name() {
  // @@protoc_insertion_point(field_release:Proto.ModuleConfiguration.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModuleConfiguration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ModuleConfiguration.name)
}

// -------------------------------------------------------------------

// ModuleConfigurationValue

// required string name = 1;
inline bool ModuleConfigurationValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModuleConfigurationValue::has_name() const {
  return _internal_has_name();
}
inline void ModuleConfigurationValue::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModuleConfigurationValue::name() const {
  // @@protoc_insertion_point(field_get:Proto.ModuleConfigurationValue.name)
  return _internal_name();
}
inline void ModuleConfigurationValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Proto.ModuleConfigurationValue.name)
}
inline std::string* ModuleConfigurationValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto.ModuleConfigurationValue.name)
  return _internal_mutable_name();
}
inline const std::string& ModuleConfigurationValue::_internal_name() const {
  return name_.Get();
}
inline void ModuleConfigurationValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModuleConfigurationValue::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ModuleConfigurationValue.name)
}
inline void ModuleConfigurationValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ModuleConfigurationValue.name)
}
inline void ModuleConfigurationValue::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ModuleConfigurationValue.name)
}
inline std::string* ModuleConfigurationValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModuleConfigurationValue::release_name() {
  // @@protoc_insertion_point(field_release:Proto.ModuleConfigurationValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModuleConfigurationValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ModuleConfigurationValue.name)
}

// required string value = 2;
inline bool ModuleConfigurationValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModuleConfigurationValue::has_value() const {
  return _internal_has_value();
}
inline void ModuleConfigurationValue::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModuleConfigurationValue::value() const {
  // @@protoc_insertion_point(field_get:Proto.ModuleConfigurationValue.value)
  return _internal_value();
}
inline void ModuleConfigurationValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto.ModuleConfigurationValue.value)
}
inline std::string* ModuleConfigurationValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto.ModuleConfigurationValue.value)
  return _internal_mutable_value();
}
inline const std::string& ModuleConfigurationValue::_internal_value() const {
  return value_.Get();
}
inline void ModuleConfigurationValue::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModuleConfigurationValue::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ModuleConfigurationValue.value)
}
inline void ModuleConfigurationValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ModuleConfigurationValue.value)
}
inline void ModuleConfigurationValue::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ModuleConfigurationValue.value)
}
inline std::string* ModuleConfigurationValue::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModuleConfigurationValue::release_value() {
  // @@protoc_insertion_point(field_release:Proto.ModuleConfigurationValue.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModuleConfigurationValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ModuleConfigurationValue.value)
}

// -------------------------------------------------------------------

// Property

// required string name = 1;
inline bool Property::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Property::has_name() const {
  return _internal_has_name();
}
inline void Property::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:Proto.Property.name)
  return _internal_name();
}
inline void Property::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Proto.Property.name)
}
inline std::string* Property::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto.Property.name)
  return _internal_mutable_name();
}
inline const std::string& Property::_internal_name() const {
  return name_.Get();
}
inline void Property::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Property::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Property.name)
}
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Property.name)
}
inline void Property::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Property.name)
}
inline std::string* Property::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:Proto.Property.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Property::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Property.name)
}

// required string value = 2;
inline bool Property::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Property::has_value() const {
  return _internal_has_value();
}
inline void Property::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:Proto.Property.value)
  return _internal_value();
}
inline void Property::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto.Property.value)
}
inline std::string* Property::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto.Property.value)
  return _internal_mutable_value();
}
inline const std::string& Property::_internal_value() const {
  return value_.Get();
}
inline void Property::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Property::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Property.value)
}
inline void Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Property.value)
}
inline void Property::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Property.value)
}
inline std::string* Property::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:Proto.Property.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Property.value)
}

// -------------------------------------------------------------------

// SignalSpecPropValue

// required string name = 1;
inline bool SignalSpecPropValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_name() const {
  return _internal_has_name();
}
inline void SignalSpecPropValue::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignalSpecPropValue::name() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.name)
  return _internal_name();
}
inline void SignalSpecPropValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.name)
}
inline std::string* SignalSpecPropValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto.SignalSpecPropValue.name)
  return _internal_mutable_name();
}
inline const std::string& SignalSpecPropValue::_internal_name() const {
  return name_.Get();
}
inline void SignalSpecPropValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignalSpecPropValue::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SignalSpecPropValue.name)
}
inline void SignalSpecPropValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SignalSpecPropValue.name)
}
inline void SignalSpecPropValue::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SignalSpecPropValue.name)
}
inline std::string* SignalSpecPropValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignalSpecPropValue::release_name() {
  // @@protoc_insertion_point(field_release:Proto.SignalSpecPropValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignalSpecPropValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SignalSpecPropValue.name)
}

// required int32 type = 2 [default = 0];
inline bool SignalSpecPropValue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_type() const {
  return _internal_has_type();
}
inline void SignalSpecPropValue::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalSpecPropValue::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalSpecPropValue::type() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.type)
  return _internal_type();
}
inline void SignalSpecPropValue::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void SignalSpecPropValue::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.type)
}

// required bool isEnum = 3 [default = false];
inline bool SignalSpecPropValue::_internal_has_isenum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_isenum() const {
  return _internal_has_isenum();
}
inline void SignalSpecPropValue::clear_isenum() {
  isenum_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SignalSpecPropValue::_internal_isenum() const {
  return isenum_;
}
inline bool SignalSpecPropValue::isenum() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.isEnum)
  return _internal_isenum();
}
inline void SignalSpecPropValue::_internal_set_isenum(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isenum_ = value;
}
inline void SignalSpecPropValue::set_isenum(bool value) {
  _internal_set_isenum(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.isEnum)
}

// optional int32 int32Val = 10;
inline bool SignalSpecPropValue::_internal_has_int32val() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_int32val() const {
  return _internal_has_int32val();
}
inline void SignalSpecPropValue::clear_int32val() {
  int32val_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalSpecPropValue::_internal_int32val() const {
  return int32val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalSpecPropValue::int32val() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.int32Val)
  return _internal_int32val();
}
inline void SignalSpecPropValue::_internal_set_int32val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  int32val_ = value;
}
inline void SignalSpecPropValue::set_int32val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32val(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.int32Val)
}

// optional uint32 uint32Val = 11;
inline bool SignalSpecPropValue::_internal_has_uint32val() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_uint32val() const {
  return _internal_has_uint32val();
}
inline void SignalSpecPropValue::clear_uint32val() {
  uint32val_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignalSpecPropValue::_internal_uint32val() const {
  return uint32val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignalSpecPropValue::uint32val() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.uint32Val)
  return _internal_uint32val();
}
inline void SignalSpecPropValue::_internal_set_uint32val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uint32val_ = value;
}
inline void SignalSpecPropValue::set_uint32val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32val(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.uint32Val)
}

// optional int64 int64Val = 12;
inline bool SignalSpecPropValue::_internal_has_int64val() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_int64val() const {
  return _internal_has_int64val();
}
inline void SignalSpecPropValue::clear_int64val() {
  int64val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalSpecPropValue::_internal_int64val() const {
  return int64val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalSpecPropValue::int64val() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.int64Val)
  return _internal_int64val();
}
inline void SignalSpecPropValue::_internal_set_int64val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  int64val_ = value;
}
inline void SignalSpecPropValue::set_int64val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64val(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.int64Val)
}

// optional uint64 uint64Val = 13;
inline bool SignalSpecPropValue::_internal_has_uint64val() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_uint64val() const {
  return _internal_has_uint64val();
}
inline void SignalSpecPropValue::clear_uint64val() {
  uint64val_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalSpecPropValue::_internal_uint64val() const {
  return uint64val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalSpecPropValue::uint64val() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.uint64Val)
  return _internal_uint64val();
}
inline void SignalSpecPropValue::_internal_set_uint64val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  uint64val_ = value;
}
inline void SignalSpecPropValue::set_uint64val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64val(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.uint64Val)
}

// optional double doubleVal = 14;
inline bool SignalSpecPropValue::_internal_has_doubleval() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_doubleval() const {
  return _internal_has_doubleval();
}
inline void SignalSpecPropValue::clear_doubleval() {
  doubleval_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SignalSpecPropValue::_internal_doubleval() const {
  return doubleval_;
}
inline double SignalSpecPropValue::doubleval() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.doubleVal)
  return _internal_doubleval();
}
inline void SignalSpecPropValue::_internal_set_doubleval(double value) {
  _has_bits_[0] |= 0x00000200u;
  doubleval_ = value;
}
inline void SignalSpecPropValue::set_doubleval(double value) {
  _internal_set_doubleval(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.doubleVal)
}

// optional bool boolVal = 15;
inline bool SignalSpecPropValue::_internal_has_boolval() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_boolval() const {
  return _internal_has_boolval();
}
inline void SignalSpecPropValue::clear_boolval() {
  boolval_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SignalSpecPropValue::_internal_boolval() const {
  return boolval_;
}
inline bool SignalSpecPropValue::boolval() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.boolVal)
  return _internal_boolval();
}
inline void SignalSpecPropValue::_internal_set_boolval(bool value) {
  _has_bits_[0] |= 0x00000010u;
  boolval_ = value;
}
inline void SignalSpecPropValue::set_boolval(bool value) {
  _internal_set_boolval(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.boolVal)
}

// optional string stringVal = 16;
inline bool SignalSpecPropValue::_internal_has_stringval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalSpecPropValue::has_stringval() const {
  return _internal_has_stringval();
}
inline void SignalSpecPropValue::clear_stringval() {
  stringval_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SignalSpecPropValue::stringval() const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValue.stringVal)
  return _internal_stringval();
}
inline void SignalSpecPropValue::set_stringval(const std::string& value) {
  _internal_set_stringval(value);
  // @@protoc_insertion_point(field_set:Proto.SignalSpecPropValue.stringVal)
}
inline std::string* SignalSpecPropValue::mutable_stringval() {
  // @@protoc_insertion_point(field_mutable:Proto.SignalSpecPropValue.stringVal)
  return _internal_mutable_stringval();
}
inline const std::string& SignalSpecPropValue::_internal_stringval() const {
  return stringval_.Get();
}
inline void SignalSpecPropValue::_internal_set_stringval(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  stringval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignalSpecPropValue::set_stringval(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  stringval_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SignalSpecPropValue.stringVal)
}
inline void SignalSpecPropValue::set_stringval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  stringval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SignalSpecPropValue.stringVal)
}
inline void SignalSpecPropValue::set_stringval(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  stringval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SignalSpecPropValue.stringVal)
}
inline std::string* SignalSpecPropValue::_internal_mutable_stringval() {
  _has_bits_[0] |= 0x00000002u;
  return stringval_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignalSpecPropValue::release_stringval() {
  // @@protoc_insertion_point(field_release:Proto.SignalSpecPropValue.stringVal)
  if (!_internal_has_stringval()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return stringval_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignalSpecPropValue::set_allocated_stringval(std::string* stringval) {
  if (stringval != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stringval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stringval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SignalSpecPropValue.stringVal)
}

// -------------------------------------------------------------------

// SignalSpecPropValues

// repeated .Proto.SignalSpecPropValue value = 1;
inline int SignalSpecPropValues::_internal_value_size() const {
  return value_.size();
}
inline int SignalSpecPropValues::value_size() const {
  return _internal_value_size();
}
inline void SignalSpecPropValues::clear_value() {
  value_.Clear();
}
inline ::Proto::SignalSpecPropValue* SignalSpecPropValues::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SignalSpecPropValues.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SignalSpecPropValue >*
SignalSpecPropValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SignalSpecPropValues.value)
  return &value_;
}
inline const ::Proto::SignalSpecPropValue& SignalSpecPropValues::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::Proto::SignalSpecPropValue& SignalSpecPropValues::value(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SignalSpecPropValues.value)
  return _internal_value(index);
}
inline ::Proto::SignalSpecPropValue* SignalSpecPropValues::_internal_add_value() {
  return value_.Add();
}
inline ::Proto::SignalSpecPropValue* SignalSpecPropValues::add_value() {
  // @@protoc_insertion_point(field_add:Proto.SignalSpecPropValues.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SignalSpecPropValue >&
SignalSpecPropValues::value() const {
  // @@protoc_insertion_point(field_list:Proto.SignalSpecPropValues.value)
  return value_;
}

// -------------------------------------------------------------------

// Address16

// required int32 offset = 1 [default = -1];
inline bool Address16::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Address16::has_offset() const {
  return _internal_has_offset();
}
inline void Address16::clear_offset() {
  offset_ = -1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address16::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address16::offset() const {
  // @@protoc_insertion_point(field_get:Proto.Address16.offset)
  return _internal_offset();
}
inline void Address16::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  offset_ = value;
}
inline void Address16::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Proto.Address16.offset)
}

// required int32 bit = 2 [default = -1];
inline bool Address16::_internal_has_bit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Address16::has_bit() const {
  return _internal_has_bit();
}
inline void Address16::clear_bit() {
  bit_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address16::_internal_bit() const {
  return bit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address16::bit() const {
  // @@protoc_insertion_point(field_get:Proto.Address16.bit)
  return _internal_bit();
}
inline void Address16::_internal_set_bit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bit_ = value;
}
inline void Address16::set_bit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bit(value);
  // @@protoc_insertion_point(field_set:Proto.Address16.bit)
}

// -------------------------------------------------------------------

// Unit

// required int32 id = 1 [default = 0];
inline bool Unit::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Unit::has_id() const {
  return _internal_has_id();
}
inline void Unit::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Unit::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Unit::id() const {
  // @@protoc_insertion_point(field_get:Proto.Unit.id)
  return _internal_id();
}
inline void Unit::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Unit::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Proto.Unit.id)
}

// required string caption = 2;
inline bool Unit::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Unit::has_caption() const {
  return _internal_has_caption();
}
inline void Unit::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Unit::caption() const {
  // @@protoc_insertion_point(field_get:Proto.Unit.caption)
  return _internal_caption();
}
inline void Unit::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.Unit.caption)
}
inline std::string* Unit::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.Unit.caption)
  return _internal_mutable_caption();
}
inline const std::string& Unit::_internal_caption() const {
  return caption_.Get();
}
inline void Unit::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Unit::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Unit.caption)
}
inline void Unit::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Unit.caption)
}
inline void Unit::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Unit.caption)
}
inline std::string* Unit::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Unit::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.Unit.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Unit::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Unit.caption)
}

// -------------------------------------------------------------------

// UnitSet

// repeated .Proto.Unit unit = 1;
inline int UnitSet::_internal_unit_size() const {
  return unit_.size();
}
inline int UnitSet::unit_size() const {
  return _internal_unit_size();
}
inline void UnitSet::clear_unit() {
  unit_.Clear();
}
inline ::Proto::Unit* UnitSet::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.UnitSet.unit)
  return unit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Unit >*
UnitSet::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:Proto.UnitSet.unit)
  return &unit_;
}
inline const ::Proto::Unit& UnitSet::_internal_unit(int index) const {
  return unit_.Get(index);
}
inline const ::Proto::Unit& UnitSet::unit(int index) const {
  // @@protoc_insertion_point(field_get:Proto.UnitSet.unit)
  return _internal_unit(index);
}
inline ::Proto::Unit* UnitSet::_internal_add_unit() {
  return unit_.Add();
}
inline ::Proto::Unit* UnitSet::add_unit() {
  // @@protoc_insertion_point(field_add:Proto.UnitSet.unit)
  return _internal_add_unit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Unit >&
UnitSet::unit() const {
  // @@protoc_insertion_point(field_list:Proto.UnitSet.unit)
  return unit_;
}

// -------------------------------------------------------------------

// TuningValue

// optional int32 type = 1;
inline bool TuningValue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TuningValue::has_type() const {
  return _internal_has_type();
}
inline void TuningValue::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningValue::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningValue::type() const {
  // @@protoc_insertion_point(field_get:Proto.TuningValue.type)
  return _internal_type();
}
inline void TuningValue::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void TuningValue::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.TuningValue.type)
}

// optional int64 intValue = 2 [default = 0];
inline bool TuningValue::_internal_has_intvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningValue::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void TuningValue::clear_intvalue() {
  intvalue_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningValue::_internal_intvalue() const {
  return intvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningValue::intvalue() const {
  // @@protoc_insertion_point(field_get:Proto.TuningValue.intValue)
  return _internal_intvalue();
}
inline void TuningValue::_internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  intvalue_ = value;
}
inline void TuningValue::set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:Proto.TuningValue.intValue)
}

// optional double doubleValue = 3 [default = 0];
inline bool TuningValue::_internal_has_doublevalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TuningValue::has_doublevalue() const {
  return _internal_has_doublevalue();
}
inline void TuningValue::clear_doublevalue() {
  doublevalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TuningValue::_internal_doublevalue() const {
  return doublevalue_;
}
inline double TuningValue::doublevalue() const {
  // @@protoc_insertion_point(field_get:Proto.TuningValue.doubleValue)
  return _internal_doublevalue();
}
inline void TuningValue::_internal_set_doublevalue(double value) {
  _has_bits_[0] |= 0x00000002u;
  doublevalue_ = value;
}
inline void TuningValue::set_doublevalue(double value) {
  _internal_set_doublevalue(value);
  // @@protoc_insertion_point(field_set:Proto.TuningValue.doubleValue)
}

// -------------------------------------------------------------------

// AppSignalDbField

// optional int32 ID = 1 [default = -1];
inline bool AppSignalDbField::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppSignalDbField::has_id() const {
  return _internal_has_id();
}
inline void AppSignalDbField::clear_id() {
  id_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::id() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.ID)
  return _internal_id();
}
inline void AppSignalDbField::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void AppSignalDbField::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.ID)
}

// optional int32 signalGroupID = 2 [default = -1];
inline bool AppSignalDbField::_internal_has_signalgroupid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppSignalDbField::has_signalgroupid() const {
  return _internal_has_signalgroupid();
}
inline void AppSignalDbField::clear_signalgroupid() {
  signalgroupid_ = -1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::_internal_signalgroupid() const {
  return signalgroupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::signalgroupid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.signalGroupID)
  return _internal_signalgroupid();
}
inline void AppSignalDbField::_internal_set_signalgroupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  signalgroupid_ = value;
}
inline void AppSignalDbField::set_signalgroupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalgroupid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.signalGroupID)
}

// optional int32 signalInstanceID = 3 [default = -1];
inline bool AppSignalDbField::_internal_has_signalinstanceid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppSignalDbField::has_signalinstanceid() const {
  return _internal_has_signalinstanceid();
}
inline void AppSignalDbField::clear_signalinstanceid() {
  signalinstanceid_ = -1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::_internal_signalinstanceid() const {
  return signalinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::signalinstanceid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.signalInstanceID)
  return _internal_signalinstanceid();
}
inline void AppSignalDbField::_internal_set_signalinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  signalinstanceid_ = value;
}
inline void AppSignalDbField::set_signalinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalinstanceid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.signalInstanceID)
}

// optional int32 changesetID = 4 [default = -1];
inline bool AppSignalDbField::_internal_has_changesetid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AppSignalDbField::has_changesetid() const {
  return _internal_has_changesetid();
}
inline void AppSignalDbField::clear_changesetid() {
  changesetid_ = -1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::_internal_changesetid() const {
  return changesetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::changesetid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.changesetID)
  return _internal_changesetid();
}
inline void AppSignalDbField::_internal_set_changesetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  changesetid_ = value;
}
inline void AppSignalDbField::set_changesetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changesetid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.changesetID)
}

// optional bool checkedOut = 5 [default = false];
inline bool AppSignalDbField::_internal_has_checkedout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppSignalDbField::has_checkedout() const {
  return _internal_has_checkedout();
}
inline void AppSignalDbField::clear_checkedout() {
  checkedout_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AppSignalDbField::_internal_checkedout() const {
  return checkedout_;
}
inline bool AppSignalDbField::checkedout() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.checkedOut)
  return _internal_checkedout();
}
inline void AppSignalDbField::_internal_set_checkedout(bool value) {
  _has_bits_[0] |= 0x00000002u;
  checkedout_ = value;
}
inline void AppSignalDbField::set_checkedout(bool value) {
  _internal_set_checkedout(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.checkedOut)
}

// optional int32 userID = 6 [default = -1];
inline bool AppSignalDbField::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppSignalDbField::has_userid() const {
  return _internal_has_userid();
}
inline void AppSignalDbField::clear_userid() {
  userid_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::userid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.userID)
  return _internal_userid();
}
inline void AppSignalDbField::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  userid_ = value;
}
inline void AppSignalDbField::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.userID)
}

// optional int64 created = 7 [default = 0];
inline bool AppSignalDbField::_internal_has_created() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppSignalDbField::has_created() const {
  return _internal_has_created();
}
inline void AppSignalDbField::clear_created() {
  created_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalDbField::_internal_created() const {
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalDbField::created() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.created)
  return _internal_created();
}
inline void AppSignalDbField::_internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  created_ = value;
}
inline void AppSignalDbField::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.created)
}

// optional bool deleted = 8 [default = false];
inline bool AppSignalDbField::_internal_has_deleted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppSignalDbField::has_deleted() const {
  return _internal_has_deleted();
}
inline void AppSignalDbField::clear_deleted() {
  deleted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AppSignalDbField::_internal_deleted() const {
  return deleted_;
}
inline bool AppSignalDbField::deleted() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.deleted)
  return _internal_deleted();
}
inline void AppSignalDbField::_internal_set_deleted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  deleted_ = value;
}
inline void AppSignalDbField::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.deleted)
}

// optional int64 instanceCreated = 9 [default = 0];
inline bool AppSignalDbField::_internal_has_instancecreated() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppSignalDbField::has_instancecreated() const {
  return _internal_has_instancecreated();
}
inline void AppSignalDbField::clear_instancecreated() {
  instancecreated_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalDbField::_internal_instancecreated() const {
  return instancecreated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalDbField::instancecreated() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.instanceCreated)
  return _internal_instancecreated();
}
inline void AppSignalDbField::_internal_set_instancecreated(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  instancecreated_ = value;
}
inline void AppSignalDbField::set_instancecreated(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instancecreated(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.instanceCreated)
}

// optional int32 instanceAction = 10 [default = 0];
inline bool AppSignalDbField::_internal_has_instanceaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppSignalDbField::has_instanceaction() const {
  return _internal_has_instanceaction();
}
inline void AppSignalDbField::clear_instanceaction() {
  instanceaction_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::_internal_instanceaction() const {
  return instanceaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalDbField::instanceaction() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalDbField.instanceAction)
  return _internal_instanceaction();
}
inline void AppSignalDbField::_internal_set_instanceaction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  instanceaction_ = value;
}
inline void AppSignalDbField::set_instanceaction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instanceaction(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalDbField.instanceAction)
}

// -------------------------------------------------------------------

// StateFlagSignal

// optional int32 flagType = 1 [default = 0];
inline bool StateFlagSignal::_internal_has_flagtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StateFlagSignal::has_flagtype() const {
  return _internal_has_flagtype();
}
inline void StateFlagSignal::clear_flagtype() {
  flagtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StateFlagSignal::_internal_flagtype() const {
  return flagtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StateFlagSignal::flagtype() const {
  // @@protoc_insertion_point(field_get:Proto.StateFlagSignal.flagType)
  return _internal_flagtype();
}
inline void StateFlagSignal::_internal_set_flagtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  flagtype_ = value;
}
inline void StateFlagSignal::set_flagtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flagtype(value);
  // @@protoc_insertion_point(field_set:Proto.StateFlagSignal.flagType)
}

// optional string flagSignalID = 2;
inline bool StateFlagSignal::_internal_has_flagsignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StateFlagSignal::has_flagsignalid() const {
  return _internal_has_flagsignalid();
}
inline void StateFlagSignal::clear_flagsignalid() {
  flagsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StateFlagSignal::flagsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.StateFlagSignal.flagSignalID)
  return _internal_flagsignalid();
}
inline void StateFlagSignal::set_flagsignalid(const std::string& value) {
  _internal_set_flagsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.StateFlagSignal.flagSignalID)
}
inline std::string* StateFlagSignal::mutable_flagsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.StateFlagSignal.flagSignalID)
  return _internal_mutable_flagsignalid();
}
inline const std::string& StateFlagSignal::_internal_flagsignalid() const {
  return flagsignalid_.Get();
}
inline void StateFlagSignal::_internal_set_flagsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  flagsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StateFlagSignal::set_flagsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  flagsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.StateFlagSignal.flagSignalID)
}
inline void StateFlagSignal::set_flagsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  flagsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.StateFlagSignal.flagSignalID)
}
inline void StateFlagSignal::set_flagsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  flagsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.StateFlagSignal.flagSignalID)
}
inline std::string* StateFlagSignal::_internal_mutable_flagsignalid() {
  _has_bits_[0] |= 0x00000001u;
  return flagsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StateFlagSignal::release_flagsignalid() {
  // @@protoc_insertion_point(field_release:Proto.StateFlagSignal.flagSignalID)
  if (!_internal_has_flagsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return flagsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateFlagSignal::set_allocated_flagsignalid(std::string* flagsignalid) {
  if (flagsignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flagsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flagsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.StateFlagSignal.flagSignalID)
}

// -------------------------------------------------------------------

// AppSignalCalculatedParam

// optional uint64 hash = 1 [default = 0];
inline bool AppSignalCalculatedParam::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppSignalCalculatedParam::has_hash() const {
  return _internal_has_hash();
}
inline void AppSignalCalculatedParam::clear_hash() {
  hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppSignalCalculatedParam::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppSignalCalculatedParam::hash() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.hash)
  return _internal_hash();
}
inline void AppSignalCalculatedParam::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  hash_ = value;
}
inline void AppSignalCalculatedParam::set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalCalculatedParam.hash)
}

// optional .Proto.Address16 ioBufAddr = 2;
inline bool AppSignalCalculatedParam::_internal_has_iobufaddr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || iobufaddr_ != nullptr);
  return value;
}
inline bool AppSignalCalculatedParam::has_iobufaddr() const {
  return _internal_has_iobufaddr();
}
inline void AppSignalCalculatedParam::clear_iobufaddr() {
  if (iobufaddr_ != nullptr) iobufaddr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::Address16& AppSignalCalculatedParam::_internal_iobufaddr() const {
  const ::Proto::Address16* p = iobufaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Address16&>(
      ::Proto::_Address16_default_instance_);
}
inline const ::Proto::Address16& AppSignalCalculatedParam::iobufaddr() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.ioBufAddr)
  return _internal_iobufaddr();
}
inline void AppSignalCalculatedParam::unsafe_arena_set_allocated_iobufaddr(
    ::Proto::Address16* iobufaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iobufaddr_);
  }
  iobufaddr_ = iobufaddr;
  if (iobufaddr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignalCalculatedParam.ioBufAddr)
}
inline ::Proto::Address16* AppSignalCalculatedParam::release_iobufaddr() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Address16* temp = iobufaddr_;
  iobufaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::unsafe_arena_release_iobufaddr() {
  // @@protoc_insertion_point(field_release:Proto.AppSignalCalculatedParam.ioBufAddr)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Address16* temp = iobufaddr_;
  iobufaddr_ = nullptr;
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::_internal_mutable_iobufaddr() {
  _has_bits_[0] |= 0x00000001u;
  if (iobufaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Address16>(GetArena());
    iobufaddr_ = p;
  }
  return iobufaddr_;
}
inline ::Proto::Address16* AppSignalCalculatedParam::mutable_iobufaddr() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.ioBufAddr)
  return _internal_mutable_iobufaddr();
}
inline void AppSignalCalculatedParam::set_allocated_iobufaddr(::Proto::Address16* iobufaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete iobufaddr_;
  }
  if (iobufaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(iobufaddr);
    if (message_arena != submessage_arena) {
      iobufaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iobufaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iobufaddr_ = iobufaddr;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignalCalculatedParam.ioBufAddr)
}

// optional .Proto.Address16 tuningAddr = 3;
inline bool AppSignalCalculatedParam::_internal_has_tuningaddr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tuningaddr_ != nullptr);
  return value;
}
inline bool AppSignalCalculatedParam::has_tuningaddr() const {
  return _internal_has_tuningaddr();
}
inline void AppSignalCalculatedParam::clear_tuningaddr() {
  if (tuningaddr_ != nullptr) tuningaddr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::Address16& AppSignalCalculatedParam::_internal_tuningaddr() const {
  const ::Proto::Address16* p = tuningaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Address16&>(
      ::Proto::_Address16_default_instance_);
}
inline const ::Proto::Address16& AppSignalCalculatedParam::tuningaddr() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.tuningAddr)
  return _internal_tuningaddr();
}
inline void AppSignalCalculatedParam::unsafe_arena_set_allocated_tuningaddr(
    ::Proto::Address16* tuningaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuningaddr_);
  }
  tuningaddr_ = tuningaddr;
  if (tuningaddr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignalCalculatedParam.tuningAddr)
}
inline ::Proto::Address16* AppSignalCalculatedParam::release_tuningaddr() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Address16* temp = tuningaddr_;
  tuningaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::unsafe_arena_release_tuningaddr() {
  // @@protoc_insertion_point(field_release:Proto.AppSignalCalculatedParam.tuningAddr)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Address16* temp = tuningaddr_;
  tuningaddr_ = nullptr;
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::_internal_mutable_tuningaddr() {
  _has_bits_[0] |= 0x00000002u;
  if (tuningaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Address16>(GetArena());
    tuningaddr_ = p;
  }
  return tuningaddr_;
}
inline ::Proto::Address16* AppSignalCalculatedParam::mutable_tuningaddr() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.tuningAddr)
  return _internal_mutable_tuningaddr();
}
inline void AppSignalCalculatedParam::set_allocated_tuningaddr(::Proto::Address16* tuningaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuningaddr_;
  }
  if (tuningaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuningaddr);
    if (message_arena != submessage_arena) {
      tuningaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuningaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tuningaddr_ = tuningaddr;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignalCalculatedParam.tuningAddr)
}

// optional .Proto.Address16 ualAddr = 4;
inline bool AppSignalCalculatedParam::_internal_has_ualaddr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ualaddr_ != nullptr);
  return value;
}
inline bool AppSignalCalculatedParam::has_ualaddr() const {
  return _internal_has_ualaddr();
}
inline void AppSignalCalculatedParam::clear_ualaddr() {
  if (ualaddr_ != nullptr) ualaddr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::Address16& AppSignalCalculatedParam::_internal_ualaddr() const {
  const ::Proto::Address16* p = ualaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Address16&>(
      ::Proto::_Address16_default_instance_);
}
inline const ::Proto::Address16& AppSignalCalculatedParam::ualaddr() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.ualAddr)
  return _internal_ualaddr();
}
inline void AppSignalCalculatedParam::unsafe_arena_set_allocated_ualaddr(
    ::Proto::Address16* ualaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ualaddr_);
  }
  ualaddr_ = ualaddr;
  if (ualaddr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignalCalculatedParam.ualAddr)
}
inline ::Proto::Address16* AppSignalCalculatedParam::release_ualaddr() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::Address16* temp = ualaddr_;
  ualaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::unsafe_arena_release_ualaddr() {
  // @@protoc_insertion_point(field_release:Proto.AppSignalCalculatedParam.ualAddr)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::Address16* temp = ualaddr_;
  ualaddr_ = nullptr;
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::_internal_mutable_ualaddr() {
  _has_bits_[0] |= 0x00000004u;
  if (ualaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Address16>(GetArena());
    ualaddr_ = p;
  }
  return ualaddr_;
}
inline ::Proto::Address16* AppSignalCalculatedParam::mutable_ualaddr() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.ualAddr)
  return _internal_mutable_ualaddr();
}
inline void AppSignalCalculatedParam::set_allocated_ualaddr(::Proto::Address16* ualaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ualaddr_;
  }
  if (ualaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ualaddr);
    if (message_arena != submessage_arena) {
      ualaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ualaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ualaddr_ = ualaddr;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignalCalculatedParam.ualAddr)
}

// optional .Proto.Address16 regBufAddr = 5;
inline bool AppSignalCalculatedParam::_internal_has_regbufaddr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || regbufaddr_ != nullptr);
  return value;
}
inline bool AppSignalCalculatedParam::has_regbufaddr() const {
  return _internal_has_regbufaddr();
}
inline void AppSignalCalculatedParam::clear_regbufaddr() {
  if (regbufaddr_ != nullptr) regbufaddr_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::Address16& AppSignalCalculatedParam::_internal_regbufaddr() const {
  const ::Proto::Address16* p = regbufaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Address16&>(
      ::Proto::_Address16_default_instance_);
}
inline const ::Proto::Address16& AppSignalCalculatedParam::regbufaddr() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.regBufAddr)
  return _internal_regbufaddr();
}
inline void AppSignalCalculatedParam::unsafe_arena_set_allocated_regbufaddr(
    ::Proto::Address16* regbufaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regbufaddr_);
  }
  regbufaddr_ = regbufaddr;
  if (regbufaddr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignalCalculatedParam.regBufAddr)
}
inline ::Proto::Address16* AppSignalCalculatedParam::release_regbufaddr() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::Address16* temp = regbufaddr_;
  regbufaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::unsafe_arena_release_regbufaddr() {
  // @@protoc_insertion_point(field_release:Proto.AppSignalCalculatedParam.regBufAddr)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::Address16* temp = regbufaddr_;
  regbufaddr_ = nullptr;
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::_internal_mutable_regbufaddr() {
  _has_bits_[0] |= 0x00000008u;
  if (regbufaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Address16>(GetArena());
    regbufaddr_ = p;
  }
  return regbufaddr_;
}
inline ::Proto::Address16* AppSignalCalculatedParam::mutable_regbufaddr() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.regBufAddr)
  return _internal_mutable_regbufaddr();
}
inline void AppSignalCalculatedParam::set_allocated_regbufaddr(::Proto::Address16* regbufaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regbufaddr_;
  }
  if (regbufaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regbufaddr);
    if (message_arena != submessage_arena) {
      regbufaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regbufaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  regbufaddr_ = regbufaddr;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignalCalculatedParam.regBufAddr)
}

// optional .Proto.Address16 regValueAddr = 6;
inline bool AppSignalCalculatedParam::_internal_has_regvalueaddr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || regvalueaddr_ != nullptr);
  return value;
}
inline bool AppSignalCalculatedParam::has_regvalueaddr() const {
  return _internal_has_regvalueaddr();
}
inline void AppSignalCalculatedParam::clear_regvalueaddr() {
  if (regvalueaddr_ != nullptr) regvalueaddr_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::Address16& AppSignalCalculatedParam::_internal_regvalueaddr() const {
  const ::Proto::Address16* p = regvalueaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Address16&>(
      ::Proto::_Address16_default_instance_);
}
inline const ::Proto::Address16& AppSignalCalculatedParam::regvalueaddr() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.regValueAddr)
  return _internal_regvalueaddr();
}
inline void AppSignalCalculatedParam::unsafe_arena_set_allocated_regvalueaddr(
    ::Proto::Address16* regvalueaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regvalueaddr_);
  }
  regvalueaddr_ = regvalueaddr;
  if (regvalueaddr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignalCalculatedParam.regValueAddr)
}
inline ::Proto::Address16* AppSignalCalculatedParam::release_regvalueaddr() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::Address16* temp = regvalueaddr_;
  regvalueaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::unsafe_arena_release_regvalueaddr() {
  // @@protoc_insertion_point(field_release:Proto.AppSignalCalculatedParam.regValueAddr)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::Address16* temp = regvalueaddr_;
  regvalueaddr_ = nullptr;
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::_internal_mutable_regvalueaddr() {
  _has_bits_[0] |= 0x00000010u;
  if (regvalueaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Address16>(GetArena());
    regvalueaddr_ = p;
  }
  return regvalueaddr_;
}
inline ::Proto::Address16* AppSignalCalculatedParam::mutable_regvalueaddr() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.regValueAddr)
  return _internal_mutable_regvalueaddr();
}
inline void AppSignalCalculatedParam::set_allocated_regvalueaddr(::Proto::Address16* regvalueaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regvalueaddr_;
  }
  if (regvalueaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regvalueaddr);
    if (message_arena != submessage_arena) {
      regvalueaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regvalueaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  regvalueaddr_ = regvalueaddr;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignalCalculatedParam.regValueAddr)
}

// optional .Proto.Address16 regValidityAddr = 7;
inline bool AppSignalCalculatedParam::_internal_has_regvalidityaddr() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || regvalidityaddr_ != nullptr);
  return value;
}
inline bool AppSignalCalculatedParam::has_regvalidityaddr() const {
  return _internal_has_regvalidityaddr();
}
inline void AppSignalCalculatedParam::clear_regvalidityaddr() {
  if (regvalidityaddr_ != nullptr) regvalidityaddr_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::Address16& AppSignalCalculatedParam::_internal_regvalidityaddr() const {
  const ::Proto::Address16* p = regvalidityaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Address16&>(
      ::Proto::_Address16_default_instance_);
}
inline const ::Proto::Address16& AppSignalCalculatedParam::regvalidityaddr() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.regValidityAddr)
  return _internal_regvalidityaddr();
}
inline void AppSignalCalculatedParam::unsafe_arena_set_allocated_regvalidityaddr(
    ::Proto::Address16* regvalidityaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regvalidityaddr_);
  }
  regvalidityaddr_ = regvalidityaddr;
  if (regvalidityaddr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignalCalculatedParam.regValidityAddr)
}
inline ::Proto::Address16* AppSignalCalculatedParam::release_regvalidityaddr() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::Address16* temp = regvalidityaddr_;
  regvalidityaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::unsafe_arena_release_regvalidityaddr() {
  // @@protoc_insertion_point(field_release:Proto.AppSignalCalculatedParam.regValidityAddr)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::Address16* temp = regvalidityaddr_;
  regvalidityaddr_ = nullptr;
  return temp;
}
inline ::Proto::Address16* AppSignalCalculatedParam::_internal_mutable_regvalidityaddr() {
  _has_bits_[0] |= 0x00000020u;
  if (regvalidityaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Address16>(GetArena());
    regvalidityaddr_ = p;
  }
  return regvalidityaddr_;
}
inline ::Proto::Address16* AppSignalCalculatedParam::mutable_regvalidityaddr() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.regValidityAddr)
  return _internal_mutable_regvalidityaddr();
}
inline void AppSignalCalculatedParam::set_allocated_regvalidityaddr(::Proto::Address16* regvalidityaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regvalidityaddr_;
  }
  if (regvalidityaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regvalidityaddr);
    if (message_arena != submessage_arena) {
      regvalidityaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regvalidityaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  regvalidityaddr_ = regvalidityaddr;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignalCalculatedParam.regValidityAddr)
}

// optional int32 lmRamAccess = 8 [default = 0];
inline bool AppSignalCalculatedParam::_internal_has_lmramaccess() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppSignalCalculatedParam::has_lmramaccess() const {
  return _internal_has_lmramaccess();
}
inline void AppSignalCalculatedParam::clear_lmramaccess() {
  lmramaccess_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalCalculatedParam::_internal_lmramaccess() const {
  return lmramaccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignalCalculatedParam::lmramaccess() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.lmRamAccess)
  return _internal_lmramaccess();
}
inline void AppSignalCalculatedParam::_internal_set_lmramaccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lmramaccess_ = value;
}
inline void AppSignalCalculatedParam::set_lmramaccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmramaccess(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalCalculatedParam.lmRamAccess)
}

// optional bool isConst = 9 [default = false];
inline bool AppSignalCalculatedParam::_internal_has_isconst() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppSignalCalculatedParam::has_isconst() const {
  return _internal_has_isconst();
}
inline void AppSignalCalculatedParam::clear_isconst() {
  isconst_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool AppSignalCalculatedParam::_internal_isconst() const {
  return isconst_;
}
inline bool AppSignalCalculatedParam::isconst() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.isConst)
  return _internal_isconst();
}
inline void AppSignalCalculatedParam::_internal_set_isconst(bool value) {
  _has_bits_[0] |= 0x00000100u;
  isconst_ = value;
}
inline void AppSignalCalculatedParam::set_isconst(bool value) {
  _internal_set_isconst(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalCalculatedParam.isConst)
}

// optional double constValue = 10 [default = 0];
inline bool AppSignalCalculatedParam::_internal_has_constvalue() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AppSignalCalculatedParam::has_constvalue() const {
  return _internal_has_constvalue();
}
inline void AppSignalCalculatedParam::clear_constvalue() {
  constvalue_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double AppSignalCalculatedParam::_internal_constvalue() const {
  return constvalue_;
}
inline double AppSignalCalculatedParam::constvalue() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.constValue)
  return _internal_constvalue();
}
inline void AppSignalCalculatedParam::_internal_set_constvalue(double value) {
  _has_bits_[0] |= 0x00000200u;
  constvalue_ = value;
}
inline void AppSignalCalculatedParam::set_constvalue(double value) {
  _internal_set_constvalue(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalCalculatedParam.constValue)
}

// repeated .Proto.StateFlagSignal stateFlagsSignals = 11;
inline int AppSignalCalculatedParam::_internal_stateflagssignals_size() const {
  return stateflagssignals_.size();
}
inline int AppSignalCalculatedParam::stateflagssignals_size() const {
  return _internal_stateflagssignals_size();
}
inline void AppSignalCalculatedParam::clear_stateflagssignals() {
  stateflagssignals_.Clear();
}
inline ::Proto::StateFlagSignal* AppSignalCalculatedParam::mutable_stateflagssignals(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalCalculatedParam.stateFlagsSignals)
  return stateflagssignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::StateFlagSignal >*
AppSignalCalculatedParam::mutable_stateflagssignals() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AppSignalCalculatedParam.stateFlagsSignals)
  return &stateflagssignals_;
}
inline const ::Proto::StateFlagSignal& AppSignalCalculatedParam::_internal_stateflagssignals(int index) const {
  return stateflagssignals_.Get(index);
}
inline const ::Proto::StateFlagSignal& AppSignalCalculatedParam::stateflagssignals(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalCalculatedParam.stateFlagsSignals)
  return _internal_stateflagssignals(index);
}
inline ::Proto::StateFlagSignal* AppSignalCalculatedParam::_internal_add_stateflagssignals() {
  return stateflagssignals_.Add();
}
inline ::Proto::StateFlagSignal* AppSignalCalculatedParam::add_stateflagssignals() {
  // @@protoc_insertion_point(field_add:Proto.AppSignalCalculatedParam.stateFlagsSignals)
  return _internal_add_stateflagssignals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::StateFlagSignal >&
AppSignalCalculatedParam::stateflagssignals() const {
  // @@protoc_insertion_point(field_list:Proto.AppSignalCalculatedParam.stateFlagsSignals)
  return stateflagssignals_;
}

// -------------------------------------------------------------------

// AppSignal

// optional string appSignalID = 1;
inline bool AppSignal::_internal_has_appsignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppSignal::has_appsignalid() const {
  return _internal_has_appsignalid();
}
inline void AppSignal::clear_appsignalid() {
  appsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppSignal::appsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.appSignalID)
  return _internal_appsignalid();
}
inline void AppSignal::set_appsignalid(const std::string& value) {
  _internal_set_appsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.appSignalID)
}
inline std::string* AppSignal::mutable_appsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.appSignalID)
  return _internal_mutable_appsignalid();
}
inline const std::string& AppSignal::_internal_appsignalid() const {
  return appsignalid_.Get();
}
inline void AppSignal::_internal_set_appsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_appsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.appSignalID)
}
inline void AppSignal::set_appsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.appSignalID)
}
inline void AppSignal::set_appsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.appSignalID)
}
inline std::string* AppSignal::_internal_mutable_appsignalid() {
  _has_bits_[0] |= 0x00000001u;
  return appsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_appsignalid() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.appSignalID)
  if (!_internal_has_appsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_appsignalid(std::string* appsignalid) {
  if (appsignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.appSignalID)
}

// optional string customAppSignalID = 2;
inline bool AppSignal::_internal_has_customappsignalid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppSignal::has_customappsignalid() const {
  return _internal_has_customappsignalid();
}
inline void AppSignal::clear_customappsignalid() {
  customappsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppSignal::customappsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.customAppSignalID)
  return _internal_customappsignalid();
}
inline void AppSignal::set_customappsignalid(const std::string& value) {
  _internal_set_customappsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.customAppSignalID)
}
inline std::string* AppSignal::mutable_customappsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.customAppSignalID)
  return _internal_mutable_customappsignalid();
}
inline const std::string& AppSignal::_internal_customappsignalid() const {
  return customappsignalid_.Get();
}
inline void AppSignal::_internal_set_customappsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  customappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_customappsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  customappsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.customAppSignalID)
}
inline void AppSignal::set_customappsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  customappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.customAppSignalID)
}
inline void AppSignal::set_customappsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  customappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.customAppSignalID)
}
inline std::string* AppSignal::_internal_mutable_customappsignalid() {
  _has_bits_[0] |= 0x00000002u;
  return customappsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_customappsignalid() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.customAppSignalID)
  if (!_internal_has_customappsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return customappsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_customappsignalid(std::string* customappsignalid) {
  if (customappsignalid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  customappsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customappsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.customAppSignalID)
}

// optional string caption = 3;
inline bool AppSignal::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppSignal::has_caption() const {
  return _internal_has_caption();
}
inline void AppSignal::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppSignal::caption() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.caption)
  return _internal_caption();
}
inline void AppSignal::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.caption)
}
inline std::string* AppSignal::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.caption)
  return _internal_mutable_caption();
}
inline const std::string& AppSignal::_internal_caption() const {
  return caption_.Get();
}
inline void AppSignal::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.caption)
}
inline void AppSignal::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.caption)
}
inline void AppSignal::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.caption)
}
inline std::string* AppSignal::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000004u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.caption)
}

// optional string equipmentID = 4;
inline bool AppSignal::_internal_has_equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppSignal::has_equipmentid() const {
  return _internal_has_equipmentid();
}
inline void AppSignal::clear_equipmentid() {
  equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppSignal::equipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.equipmentID)
  return _internal_equipmentid();
}
inline void AppSignal::set_equipmentid(const std::string& value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.equipmentID)
}
inline std::string* AppSignal::mutable_equipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.equipmentID)
  return _internal_mutable_equipmentid();
}
inline const std::string& AppSignal::_internal_equipmentid() const {
  return equipmentid_.Get();
}
inline void AppSignal::_internal_set_equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.equipmentID)
}
inline void AppSignal::set_equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.equipmentID)
}
inline void AppSignal::set_equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.equipmentID)
}
inline std::string* AppSignal::_internal_mutable_equipmentid() {
  _has_bits_[0] |= 0x00000008u;
  return equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_equipmentid() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.equipmentID)
  if (!_internal_has_equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_equipmentid(std::string* equipmentid) {
  if (equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.equipmentID)
}

// optional string lmEquipmentID = 5;
inline bool AppSignal::_internal_has_lmequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppSignal::has_lmequipmentid() const {
  return _internal_has_lmequipmentid();
}
inline void AppSignal::clear_lmequipmentid() {
  lmequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppSignal::lmequipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.lmEquipmentID)
  return _internal_lmequipmentid();
}
inline void AppSignal::set_lmequipmentid(const std::string& value) {
  _internal_set_lmequipmentid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.lmEquipmentID)
}
inline std::string* AppSignal::mutable_lmequipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.lmEquipmentID)
  return _internal_mutable_lmequipmentid();
}
inline const std::string& AppSignal::_internal_lmequipmentid() const {
  return lmequipmentid_.Get();
}
inline void AppSignal::_internal_set_lmequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_lmequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  lmequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.lmEquipmentID)
}
inline void AppSignal::set_lmequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.lmEquipmentID)
}
inline void AppSignal::set_lmequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.lmEquipmentID)
}
inline std::string* AppSignal::_internal_mutable_lmequipmentid() {
  _has_bits_[0] |= 0x00000010u;
  return lmequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_lmequipmentid() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.lmEquipmentID)
  if (!_internal_has_lmequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return lmequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_lmequipmentid(std::string* lmequipmentid) {
  if (lmequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lmequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.lmEquipmentID)
}

// optional string busTypeID = 6;
inline bool AppSignal::_internal_has_bustypeid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppSignal::has_bustypeid() const {
  return _internal_has_bustypeid();
}
inline void AppSignal::clear_bustypeid() {
  bustypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppSignal::bustypeid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.busTypeID)
  return _internal_bustypeid();
}
inline void AppSignal::set_bustypeid(const std::string& value) {
  _internal_set_bustypeid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.busTypeID)
}
inline std::string* AppSignal::mutable_bustypeid() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.busTypeID)
  return _internal_mutable_bustypeid();
}
inline const std::string& AppSignal::_internal_bustypeid() const {
  return bustypeid_.Get();
}
inline void AppSignal::_internal_set_bustypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_bustypeid(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  bustypeid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.busTypeID)
}
inline void AppSignal::set_bustypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.busTypeID)
}
inline void AppSignal::set_bustypeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.busTypeID)
}
inline std::string* AppSignal::_internal_mutable_bustypeid() {
  _has_bits_[0] |= 0x00000020u;
  return bustypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_bustypeid() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.busTypeID)
  if (!_internal_has_bustypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return bustypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_bustypeid(std::string* bustypeid) {
  if (bustypeid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bustypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bustypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.busTypeID)
}

// optional int32 channel = 7 [default = 0];
inline bool AppSignal::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AppSignal::has_channel() const {
  return _internal_has_channel();
}
inline void AppSignal::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::channel() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.channel)
  return _internal_channel();
}
inline void AppSignal::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  channel_ = value;
}
inline void AppSignal::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.channel)
}

// optional bool excludeFromBuild = 8 [default = false];
inline bool AppSignal::_internal_has_excludefrombuild() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AppSignal::has_excludefrombuild() const {
  return _internal_has_excludefrombuild();
}
inline void AppSignal::clear_excludefrombuild() {
  excludefrombuild_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool AppSignal::_internal_excludefrombuild() const {
  return excludefrombuild_;
}
inline bool AppSignal::excludefrombuild() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.excludeFromBuild)
  return _internal_excludefrombuild();
}
inline void AppSignal::_internal_set_excludefrombuild(bool value) {
  _has_bits_[0] |= 0x00010000u;
  excludefrombuild_ = value;
}
inline void AppSignal::set_excludefrombuild(bool value) {
  _internal_set_excludefrombuild(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.excludeFromBuild)
}

// optional int32 signalType = 16 [default = 1];
inline bool AppSignal::_internal_has_signaltype() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AppSignal::has_signaltype() const {
  return _internal_has_signaltype();
}
inline void AppSignal::clear_signaltype() {
  signaltype_ = 1;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_signaltype() const {
  return signaltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::signaltype() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.signalType)
  return _internal_signaltype();
}
inline void AppSignal::_internal_set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  signaltype_ = value;
}
inline void AppSignal::set_signaltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signaltype(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.signalType)
}

// optional int32 inOutType = 17 [default = 2];
inline bool AppSignal::_internal_has_inouttype() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AppSignal::has_inouttype() const {
  return _internal_has_inouttype();
}
inline void AppSignal::clear_inouttype() {
  inouttype_ = 2;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_inouttype() const {
  return inouttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::inouttype() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.inOutType)
  return _internal_inouttype();
}
inline void AppSignal::_internal_set_inouttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  inouttype_ = value;
}
inline void AppSignal::set_inouttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inouttype(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.inOutType)
}

// optional int32 dataSize = 21 [default = 0];
inline bool AppSignal::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AppSignal::has_datasize() const {
  return _internal_has_datasize();
}
inline void AppSignal::clear_datasize() {
  datasize_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::datasize() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.dataSize)
  return _internal_datasize();
}
inline void AppSignal::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  datasize_ = value;
}
inline void AppSignal::set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.dataSize)
}

// optional int32 byteOrder = 22 [default = 1];
inline bool AppSignal::_internal_has_byteorder() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AppSignal::has_byteorder() const {
  return _internal_has_byteorder();
}
inline void AppSignal::clear_byteorder() {
  byteorder_ = 1;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_byteorder() const {
  return byteorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::byteorder() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.byteOrder)
  return _internal_byteorder();
}
inline void AppSignal::_internal_set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  byteorder_ = value;
}
inline void AppSignal::set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_byteorder(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.byteOrder)
}

// optional int32 analogSignalFormat = 26 [default = 1];
inline bool AppSignal::_internal_has_analogsignalformat() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AppSignal::has_analogsignalformat() const {
  return _internal_has_analogsignalformat();
}
inline void AppSignal::clear_analogsignalformat() {
  analogsignalformat_ = 1;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_analogsignalformat() const {
  return analogsignalformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::analogsignalformat() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.analogSignalFormat)
  return _internal_analogsignalformat();
}
inline void AppSignal::_internal_set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  analogsignalformat_ = value;
}
inline void AppSignal::set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogsignalformat(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.analogSignalFormat)
}

// optional string unit = 27;
inline bool AppSignal::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppSignal::has_unit() const {
  return _internal_has_unit();
}
inline void AppSignal::clear_unit() {
  unit_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AppSignal::unit() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.unit)
  return _internal_unit();
}
inline void AppSignal::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.unit)
}
inline std::string* AppSignal::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.unit)
  return _internal_mutable_unit();
}
inline const std::string& AppSignal::_internal_unit() const {
  return unit_.Get();
}
inline void AppSignal::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_unit(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.unit)
}
inline void AppSignal::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.unit)
}
inline void AppSignal::set_unit(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.unit)
}
inline std::string* AppSignal::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000040u;
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_unit() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.unit)
  if (!_internal_has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return unit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.unit)
}

// optional bool enableTuning = 71 [default = false];
inline bool AppSignal::_internal_has_enabletuning() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AppSignal::has_enabletuning() const {
  return _internal_has_enabletuning();
}
inline void AppSignal::clear_enabletuning() {
  enabletuning_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool AppSignal::_internal_enabletuning() const {
  return enabletuning_;
}
inline bool AppSignal::enabletuning() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.enableTuning)
  return _internal_enabletuning();
}
inline void AppSignal::_internal_set_enabletuning(bool value) {
  _has_bits_[0] |= 0x00020000u;
  enabletuning_ = value;
}
inline void AppSignal::set_enabletuning(bool value) {
  _internal_set_enabletuning(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.enableTuning)
}

// optional .Proto.TuningValue tuningDefaultValue = 72;
inline bool AppSignal::_internal_has_tuningdefaultvalue() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tuningdefaultvalue_ != nullptr);
  return value;
}
inline bool AppSignal::has_tuningdefaultvalue() const {
  return _internal_has_tuningdefaultvalue();
}
inline void AppSignal::clear_tuningdefaultvalue() {
  if (tuningdefaultvalue_ != nullptr) tuningdefaultvalue_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::Proto::TuningValue& AppSignal::_internal_tuningdefaultvalue() const {
  const ::Proto::TuningValue* p = tuningdefaultvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& AppSignal::tuningdefaultvalue() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.tuningDefaultValue)
  return _internal_tuningdefaultvalue();
}
inline void AppSignal::unsafe_arena_set_allocated_tuningdefaultvalue(
    ::Proto::TuningValue* tuningdefaultvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuningdefaultvalue_);
  }
  tuningdefaultvalue_ = tuningdefaultvalue;
  if (tuningdefaultvalue) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignal.tuningDefaultValue)
}
inline ::Proto::TuningValue* AppSignal::release_tuningdefaultvalue() {
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::TuningValue* temp = tuningdefaultvalue_;
  tuningdefaultvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* AppSignal::unsafe_arena_release_tuningdefaultvalue() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.tuningDefaultValue)
  _has_bits_[0] &= ~0x00000200u;
  ::Proto::TuningValue* temp = tuningdefaultvalue_;
  tuningdefaultvalue_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* AppSignal::_internal_mutable_tuningdefaultvalue() {
  _has_bits_[0] |= 0x00000200u;
  if (tuningdefaultvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    tuningdefaultvalue_ = p;
  }
  return tuningdefaultvalue_;
}
inline ::Proto::TuningValue* AppSignal::mutable_tuningdefaultvalue() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.tuningDefaultValue)
  return _internal_mutable_tuningdefaultvalue();
}
inline void AppSignal::set_allocated_tuningdefaultvalue(::Proto::TuningValue* tuningdefaultvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuningdefaultvalue_;
  }
  if (tuningdefaultvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuningdefaultvalue);
    if (message_arena != submessage_arena) {
      tuningdefaultvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuningdefaultvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tuningdefaultvalue_ = tuningdefaultvalue;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.tuningDefaultValue)
}

// optional .Proto.TuningValue tuningLowBound = 73;
inline bool AppSignal::_internal_has_tuninglowbound() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tuninglowbound_ != nullptr);
  return value;
}
inline bool AppSignal::has_tuninglowbound() const {
  return _internal_has_tuninglowbound();
}
inline void AppSignal::clear_tuninglowbound() {
  if (tuninglowbound_ != nullptr) tuninglowbound_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::Proto::TuningValue& AppSignal::_internal_tuninglowbound() const {
  const ::Proto::TuningValue* p = tuninglowbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& AppSignal::tuninglowbound() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.tuningLowBound)
  return _internal_tuninglowbound();
}
inline void AppSignal::unsafe_arena_set_allocated_tuninglowbound(
    ::Proto::TuningValue* tuninglowbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuninglowbound_);
  }
  tuninglowbound_ = tuninglowbound;
  if (tuninglowbound) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignal.tuningLowBound)
}
inline ::Proto::TuningValue* AppSignal::release_tuninglowbound() {
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::TuningValue* temp = tuninglowbound_;
  tuninglowbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* AppSignal::unsafe_arena_release_tuninglowbound() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.tuningLowBound)
  _has_bits_[0] &= ~0x00000400u;
  ::Proto::TuningValue* temp = tuninglowbound_;
  tuninglowbound_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* AppSignal::_internal_mutable_tuninglowbound() {
  _has_bits_[0] |= 0x00000400u;
  if (tuninglowbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    tuninglowbound_ = p;
  }
  return tuninglowbound_;
}
inline ::Proto::TuningValue* AppSignal::mutable_tuninglowbound() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.tuningLowBound)
  return _internal_mutable_tuninglowbound();
}
inline void AppSignal::set_allocated_tuninglowbound(::Proto::TuningValue* tuninglowbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuninglowbound_;
  }
  if (tuninglowbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuninglowbound);
    if (message_arena != submessage_arena) {
      tuninglowbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuninglowbound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tuninglowbound_ = tuninglowbound;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.tuningLowBound)
}

// optional .Proto.TuningValue tuningHighBound = 74;
inline bool AppSignal::_internal_has_tuninghighbound() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tuninghighbound_ != nullptr);
  return value;
}
inline bool AppSignal::has_tuninghighbound() const {
  return _internal_has_tuninghighbound();
}
inline void AppSignal::clear_tuninghighbound() {
  if (tuninghighbound_ != nullptr) tuninghighbound_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::Proto::TuningValue& AppSignal::_internal_tuninghighbound() const {
  const ::Proto::TuningValue* p = tuninghighbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& AppSignal::tuninghighbound() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.tuningHighBound)
  return _internal_tuninghighbound();
}
inline void AppSignal::unsafe_arena_set_allocated_tuninghighbound(
    ::Proto::TuningValue* tuninghighbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuninghighbound_);
  }
  tuninghighbound_ = tuninghighbound;
  if (tuninghighbound) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignal.tuningHighBound)
}
inline ::Proto::TuningValue* AppSignal::release_tuninghighbound() {
  _has_bits_[0] &= ~0x00000800u;
  ::Proto::TuningValue* temp = tuninghighbound_;
  tuninghighbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* AppSignal::unsafe_arena_release_tuninghighbound() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.tuningHighBound)
  _has_bits_[0] &= ~0x00000800u;
  ::Proto::TuningValue* temp = tuninghighbound_;
  tuninghighbound_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* AppSignal::_internal_mutable_tuninghighbound() {
  _has_bits_[0] |= 0x00000800u;
  if (tuninghighbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    tuninghighbound_ = p;
  }
  return tuninghighbound_;
}
inline ::Proto::TuningValue* AppSignal::mutable_tuninghighbound() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.tuningHighBound)
  return _internal_mutable_tuninghighbound();
}
inline void AppSignal::set_allocated_tuninghighbound(::Proto::TuningValue* tuninghighbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuninghighbound_;
  }
  if (tuninghighbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuninghighbound);
    if (message_arena != submessage_arena) {
      tuninghighbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuninghighbound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tuninghighbound_ = tuninghighbound;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.tuningHighBound)
}

// optional bool acquire = 81 [default = false];
inline bool AppSignal::_internal_has_acquire() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AppSignal::has_acquire() const {
  return _internal_has_acquire();
}
inline void AppSignal::clear_acquire() {
  acquire_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool AppSignal::_internal_acquire() const {
  return acquire_;
}
inline bool AppSignal::acquire() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.acquire)
  return _internal_acquire();
}
inline void AppSignal::_internal_set_acquire(bool value) {
  _has_bits_[0] |= 0x00040000u;
  acquire_ = value;
}
inline void AppSignal::set_acquire(bool value) {
  _internal_set_acquire(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.acquire)
}

// optional bool archive = 82 [default = false];
inline bool AppSignal::_internal_has_archive() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AppSignal::has_archive() const {
  return _internal_has_archive();
}
inline void AppSignal::clear_archive() {
  archive_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool AppSignal::_internal_archive() const {
  return archive_;
}
inline bool AppSignal::archive() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.archive)
  return _internal_archive();
}
inline void AppSignal::_internal_set_archive(bool value) {
  _has_bits_[0] |= 0x00080000u;
  archive_ = value;
}
inline void AppSignal::set_archive(bool value) {
  _internal_set_archive(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.archive)
}

// optional int32 decimalPlaces = 83 [default = 2];
inline bool AppSignal::_internal_has_decimalplaces() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AppSignal::has_decimalplaces() const {
  return _internal_has_decimalplaces();
}
inline void AppSignal::clear_decimalplaces() {
  decimalplaces_ = 2;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::_internal_decimalplaces() const {
  return decimalplaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppSignal::decimalplaces() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.decimalPlaces)
  return _internal_decimalplaces();
}
inline void AppSignal::_internal_set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  decimalplaces_ = value;
}
inline void AppSignal::set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_decimalplaces(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.decimalPlaces)
}

// optional double coarseAperture = 84 [default = 1];
inline bool AppSignal::_internal_has_coarseaperture() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool AppSignal::has_coarseaperture() const {
  return _internal_has_coarseaperture();
}
inline void AppSignal::clear_coarseaperture() {
  coarseaperture_ = 1;
  _has_bits_[0] &= ~0x04000000u;
}
inline double AppSignal::_internal_coarseaperture() const {
  return coarseaperture_;
}
inline double AppSignal::coarseaperture() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.coarseAperture)
  return _internal_coarseaperture();
}
inline void AppSignal::_internal_set_coarseaperture(double value) {
  _has_bits_[0] |= 0x04000000u;
  coarseaperture_ = value;
}
inline void AppSignal::set_coarseaperture(double value) {
  _internal_set_coarseaperture(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.coarseAperture)
}

// optional double fineAperture = 85 [default = 0.5];
inline bool AppSignal::_internal_has_fineaperture() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool AppSignal::has_fineaperture() const {
  return _internal_has_fineaperture();
}
inline void AppSignal::clear_fineaperture() {
  fineaperture_ = 0.5;
  _has_bits_[0] &= ~0x08000000u;
}
inline double AppSignal::_internal_fineaperture() const {
  return fineaperture_;
}
inline double AppSignal::fineaperture() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.fineAperture)
  return _internal_fineaperture();
}
inline void AppSignal::_internal_set_fineaperture(double value) {
  _has_bits_[0] |= 0x08000000u;
  fineaperture_ = value;
}
inline void AppSignal::set_fineaperture(double value) {
  _internal_set_fineaperture(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.fineAperture)
}

// optional bool adaptiveAperture = 86 [default = false];
inline bool AppSignal::_internal_has_adaptiveaperture() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AppSignal::has_adaptiveaperture() const {
  return _internal_has_adaptiveaperture();
}
inline void AppSignal::clear_adaptiveaperture() {
  adaptiveaperture_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool AppSignal::_internal_adaptiveaperture() const {
  return adaptiveaperture_;
}
inline bool AppSignal::adaptiveaperture() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.adaptiveAperture)
  return _internal_adaptiveaperture();
}
inline void AppSignal::_internal_set_adaptiveaperture(bool value) {
  _has_bits_[0] |= 0x00100000u;
  adaptiveaperture_ = value;
}
inline void AppSignal::set_adaptiveaperture(bool value) {
  _internal_set_adaptiveaperture(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.adaptiveAperture)
}

// optional string specPropStruct = 90;
inline bool AppSignal::_internal_has_specpropstruct() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppSignal::has_specpropstruct() const {
  return _internal_has_specpropstruct();
}
inline void AppSignal::clear_specpropstruct() {
  specpropstruct_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AppSignal::specpropstruct() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.specPropStruct)
  return _internal_specpropstruct();
}
inline void AppSignal::set_specpropstruct(const std::string& value) {
  _internal_set_specpropstruct(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.specPropStruct)
}
inline std::string* AppSignal::mutable_specpropstruct() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.specPropStruct)
  return _internal_mutable_specpropstruct();
}
inline const std::string& AppSignal::_internal_specpropstruct() const {
  return specpropstruct_.Get();
}
inline void AppSignal::_internal_set_specpropstruct(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  specpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_specpropstruct(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  specpropstruct_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.specPropStruct)
}
inline void AppSignal::set_specpropstruct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  specpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.specPropStruct)
}
inline void AppSignal::set_specpropstruct(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  specpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.specPropStruct)
}
inline std::string* AppSignal::_internal_mutable_specpropstruct() {
  _has_bits_[0] |= 0x00000080u;
  return specpropstruct_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_specpropstruct() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.specPropStruct)
  if (!_internal_has_specpropstruct()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return specpropstruct_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_specpropstruct(std::string* specpropstruct) {
  if (specpropstruct != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  specpropstruct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specpropstruct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.specPropStruct)
}

// optional bytes specPropValues = 91;
inline bool AppSignal::_internal_has_specpropvalues() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppSignal::has_specpropvalues() const {
  return _internal_has_specpropvalues();
}
inline void AppSignal::clear_specpropvalues() {
  specpropvalues_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& AppSignal::specpropvalues() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.specPropValues)
  return _internal_specpropvalues();
}
inline void AppSignal::set_specpropvalues(const std::string& value) {
  _internal_set_specpropvalues(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignal.specPropValues)
}
inline std::string* AppSignal::mutable_specpropvalues() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.specPropValues)
  return _internal_mutable_specpropvalues();
}
inline const std::string& AppSignal::_internal_specpropvalues() const {
  return specpropvalues_.Get();
}
inline void AppSignal::_internal_set_specpropvalues(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  specpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppSignal::set_specpropvalues(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  specpropvalues_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.AppSignal.specPropValues)
}
inline void AppSignal::set_specpropvalues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  specpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.specPropValues)
}
inline void AppSignal::set_specpropvalues(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  specpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.specPropValues)
}
inline std::string* AppSignal::_internal_mutable_specpropvalues() {
  _has_bits_[0] |= 0x00000100u;
  return specpropvalues_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppSignal::release_specpropvalues() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.specPropValues)
  if (!_internal_has_specpropvalues()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return specpropvalues_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppSignal::set_allocated_specpropvalues(std::string* specpropvalues) {
  if (specpropvalues != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  specpropvalues_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specpropvalues,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.specPropValues)
}

// repeated string tags = 92;
inline int AppSignal::_internal_tags_size() const {
  return tags_.size();
}
inline int AppSignal::tags_size() const {
  return _internal_tags_size();
}
inline void AppSignal::clear_tags() {
  tags_.Clear();
}
inline std::string* AppSignal::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:Proto.AppSignal.tags)
  return _internal_add_tags();
}
inline const std::string& AppSignal::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& AppSignal::tags(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.tags)
  return _internal_tags(index);
}
inline std::string* AppSignal::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.tags)
  return tags_.Mutable(index);
}
inline void AppSignal::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.AppSignal.tags)
  tags_.Mutable(index)->assign(value);
}
inline void AppSignal::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.AppSignal.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void AppSignal::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.AppSignal.tags)
}
inline void AppSignal::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.AppSignal.tags)
}
inline std::string* AppSignal::_internal_add_tags() {
  return tags_.Add();
}
inline void AppSignal::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.AppSignal.tags)
}
inline void AppSignal::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.AppSignal.tags)
}
inline void AppSignal::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.AppSignal.tags)
}
inline void AppSignal::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.AppSignal.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppSignal::tags() const {
  // @@protoc_insertion_point(field_list:Proto.AppSignal.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppSignal::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AppSignal.tags)
  return &tags_;
}

// optional .Proto.AppSignalDbField dbField = 120;
inline bool AppSignal::_internal_has_dbfield() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || dbfield_ != nullptr);
  return value;
}
inline bool AppSignal::has_dbfield() const {
  return _internal_has_dbfield();
}
inline void AppSignal::clear_dbfield() {
  if (dbfield_ != nullptr) dbfield_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::Proto::AppSignalDbField& AppSignal::_internal_dbfield() const {
  const ::Proto::AppSignalDbField* p = dbfield_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::AppSignalDbField&>(
      ::Proto::_AppSignalDbField_default_instance_);
}
inline const ::Proto::AppSignalDbField& AppSignal::dbfield() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.dbField)
  return _internal_dbfield();
}
inline void AppSignal::unsafe_arena_set_allocated_dbfield(
    ::Proto::AppSignalDbField* dbfield) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dbfield_);
  }
  dbfield_ = dbfield;
  if (dbfield) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignal.dbField)
}
inline ::Proto::AppSignalDbField* AppSignal::release_dbfield() {
  _has_bits_[0] &= ~0x00001000u;
  ::Proto::AppSignalDbField* temp = dbfield_;
  dbfield_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::AppSignalDbField* AppSignal::unsafe_arena_release_dbfield() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.dbField)
  _has_bits_[0] &= ~0x00001000u;
  ::Proto::AppSignalDbField* temp = dbfield_;
  dbfield_ = nullptr;
  return temp;
}
inline ::Proto::AppSignalDbField* AppSignal::_internal_mutable_dbfield() {
  _has_bits_[0] |= 0x00001000u;
  if (dbfield_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::AppSignalDbField>(GetArena());
    dbfield_ = p;
  }
  return dbfield_;
}
inline ::Proto::AppSignalDbField* AppSignal::mutable_dbfield() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.dbField)
  return _internal_mutable_dbfield();
}
inline void AppSignal::set_allocated_dbfield(::Proto::AppSignalDbField* dbfield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dbfield_;
  }
  if (dbfield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dbfield);
    if (message_arena != submessage_arena) {
      dbfield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dbfield, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  dbfield_ = dbfield;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.dbField)
}

// optional .Proto.AppSignalCalculatedParam calcParam = 121;
inline bool AppSignal::_internal_has_calcparam() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || calcparam_ != nullptr);
  return value;
}
inline bool AppSignal::has_calcparam() const {
  return _internal_has_calcparam();
}
inline void AppSignal::clear_calcparam() {
  if (calcparam_ != nullptr) calcparam_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::Proto::AppSignalCalculatedParam& AppSignal::_internal_calcparam() const {
  const ::Proto::AppSignalCalculatedParam* p = calcparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::AppSignalCalculatedParam&>(
      ::Proto::_AppSignalCalculatedParam_default_instance_);
}
inline const ::Proto::AppSignalCalculatedParam& AppSignal::calcparam() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignal.calcParam)
  return _internal_calcparam();
}
inline void AppSignal::unsafe_arena_set_allocated_calcparam(
    ::Proto::AppSignalCalculatedParam* calcparam) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcparam_);
  }
  calcparam_ = calcparam;
  if (calcparam) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.AppSignal.calcParam)
}
inline ::Proto::AppSignalCalculatedParam* AppSignal::release_calcparam() {
  _has_bits_[0] &= ~0x00002000u;
  ::Proto::AppSignalCalculatedParam* temp = calcparam_;
  calcparam_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::AppSignalCalculatedParam* AppSignal::unsafe_arena_release_calcparam() {
  // @@protoc_insertion_point(field_release:Proto.AppSignal.calcParam)
  _has_bits_[0] &= ~0x00002000u;
  ::Proto::AppSignalCalculatedParam* temp = calcparam_;
  calcparam_ = nullptr;
  return temp;
}
inline ::Proto::AppSignalCalculatedParam* AppSignal::_internal_mutable_calcparam() {
  _has_bits_[0] |= 0x00002000u;
  if (calcparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::AppSignalCalculatedParam>(GetArena());
    calcparam_ = p;
  }
  return calcparam_;
}
inline ::Proto::AppSignalCalculatedParam* AppSignal::mutable_calcparam() {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignal.calcParam)
  return _internal_mutable_calcparam();
}
inline void AppSignal::set_allocated_calcparam(::Proto::AppSignalCalculatedParam* calcparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete calcparam_;
  }
  if (calcparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(calcparam);
    if (message_arena != submessage_arena) {
      calcparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calcparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  calcparam_ = calcparam;
  // @@protoc_insertion_point(field_set_allocated:Proto.AppSignal.calcParam)
}

// -------------------------------------------------------------------

// AppSignalSet

// repeated .Proto.AppSignal appSignal = 1;
inline int AppSignalSet::_internal_appsignal_size() const {
  return appsignal_.size();
}
inline int AppSignalSet::appsignal_size() const {
  return _internal_appsignal_size();
}
inline void AppSignalSet::clear_appsignal() {
  appsignal_.Clear();
}
inline ::Proto::AppSignal* AppSignalSet::mutable_appsignal(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AppSignalSet.appSignal)
  return appsignal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >*
AppSignalSet::mutable_appsignal() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AppSignalSet.appSignal)
  return &appsignal_;
}
inline const ::Proto::AppSignal& AppSignalSet::_internal_appsignal(int index) const {
  return appsignal_.Get(index);
}
inline const ::Proto::AppSignal& AppSignalSet::appsignal(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalSet.appSignal)
  return _internal_appsignal(index);
}
inline ::Proto::AppSignal* AppSignalSet::_internal_add_appsignal() {
  return appsignal_.Add();
}
inline ::Proto::AppSignal* AppSignalSet::add_appsignal() {
  // @@protoc_insertion_point(field_add:Proto.AppSignalSet.appSignal)
  return _internal_add_appsignal();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >&
AppSignalSet::appsignal() const {
  // @@protoc_insertion_point(field_list:Proto.AppSignalSet.appSignal)
  return appsignal_;
}

// -------------------------------------------------------------------

// ProtoAppSignalData

// optional string busTypeID = 1;
inline bool ProtoAppSignalData::_internal_has_bustypeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_bustypeid() const {
  return _internal_has_bustypeid();
}
inline void ProtoAppSignalData::clear_bustypeid() {
  bustypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoAppSignalData::bustypeid() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.busTypeID)
  return _internal_bustypeid();
}
inline void ProtoAppSignalData::set_bustypeid(const std::string& value) {
  _internal_set_bustypeid(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.busTypeID)
}
inline std::string* ProtoAppSignalData::mutable_bustypeid() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.busTypeID)
  return _internal_mutable_bustypeid();
}
inline const std::string& ProtoAppSignalData::_internal_bustypeid() const {
  return bustypeid_.Get();
}
inline void ProtoAppSignalData::_internal_set_bustypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoAppSignalData::set_bustypeid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ProtoAppSignalData.busTypeID)
}
inline void ProtoAppSignalData::set_bustypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ProtoAppSignalData.busTypeID)
}
inline void ProtoAppSignalData::set_bustypeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ProtoAppSignalData.busTypeID)
}
inline std::string* ProtoAppSignalData::_internal_mutable_bustypeid() {
  _has_bits_[0] |= 0x00000001u;
  return bustypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoAppSignalData::release_bustypeid() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.busTypeID)
  if (!_internal_has_bustypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bustypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAppSignalData::set_allocated_bustypeid(std::string* bustypeid) {
  if (bustypeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bustypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bustypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.busTypeID)
}

// optional string caption = 2;
inline bool ProtoAppSignalData::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_caption() const {
  return _internal_has_caption();
}
inline void ProtoAppSignalData::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProtoAppSignalData::caption() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.caption)
  return _internal_caption();
}
inline void ProtoAppSignalData::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.caption)
}
inline std::string* ProtoAppSignalData::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.caption)
  return _internal_mutable_caption();
}
inline const std::string& ProtoAppSignalData::_internal_caption() const {
  return caption_.Get();
}
inline void ProtoAppSignalData::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoAppSignalData::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ProtoAppSignalData.caption)
}
inline void ProtoAppSignalData::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ProtoAppSignalData.caption)
}
inline void ProtoAppSignalData::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ProtoAppSignalData.caption)
}
inline std::string* ProtoAppSignalData::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000002u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoAppSignalData::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAppSignalData::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.caption)
}

// optional int32 channel = 3 [default = 0];
inline bool ProtoAppSignalData::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_channel() const {
  return _internal_has_channel();
}
inline void ProtoAppSignalData::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::channel() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.channel)
  return _internal_channel();
}
inline void ProtoAppSignalData::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  channel_ = value;
}
inline void ProtoAppSignalData::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.channel)
}

// optional int32 dataSize = 4 [default = 32];
inline bool ProtoAppSignalData::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_datasize() const {
  return _internal_has_datasize();
}
inline void ProtoAppSignalData::clear_datasize() {
  datasize_ = 32;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::datasize() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.dataSize)
  return _internal_datasize();
}
inline void ProtoAppSignalData::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  datasize_ = value;
}
inline void ProtoAppSignalData::set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.dataSize)
}

// optional int32 byteOrder = 5 [default = 1];
inline bool ProtoAppSignalData::_internal_has_byteorder() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_byteorder() const {
  return _internal_has_byteorder();
}
inline void ProtoAppSignalData::clear_byteorder() {
  byteorder_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::_internal_byteorder() const {
  return byteorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::byteorder() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.byteOrder)
  return _internal_byteorder();
}
inline void ProtoAppSignalData::_internal_set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  byteorder_ = value;
}
inline void ProtoAppSignalData::set_byteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_byteorder(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.byteOrder)
}

// optional int32 analogSignalFormat = 6 [default = 2];
inline bool ProtoAppSignalData::_internal_has_analogsignalformat() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_analogsignalformat() const {
  return _internal_has_analogsignalformat();
}
inline void ProtoAppSignalData::clear_analogsignalformat() {
  analogsignalformat_ = 2;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::_internal_analogsignalformat() const {
  return analogsignalformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::analogsignalformat() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.analogSignalFormat)
  return _internal_analogsignalformat();
}
inline void ProtoAppSignalData::_internal_set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  analogsignalformat_ = value;
}
inline void ProtoAppSignalData::set_analogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogsignalformat(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.analogSignalFormat)
}

// optional string unit = 7;
inline bool ProtoAppSignalData::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_unit() const {
  return _internal_has_unit();
}
inline void ProtoAppSignalData::clear_unit() {
  unit_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProtoAppSignalData::unit() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.unit)
  return _internal_unit();
}
inline void ProtoAppSignalData::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.unit)
}
inline std::string* ProtoAppSignalData::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.unit)
  return _internal_mutable_unit();
}
inline const std::string& ProtoAppSignalData::_internal_unit() const {
  return unit_.Get();
}
inline void ProtoAppSignalData::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoAppSignalData::set_unit(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ProtoAppSignalData.unit)
}
inline void ProtoAppSignalData::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ProtoAppSignalData.unit)
}
inline void ProtoAppSignalData::set_unit(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ProtoAppSignalData.unit)
}
inline std::string* ProtoAppSignalData::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000004u;
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoAppSignalData::release_unit() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.unit)
  if (!_internal_has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return unit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAppSignalData::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.unit)
}

// optional bool enableTuning = 8 [default = false];
inline bool ProtoAppSignalData::_internal_has_enabletuning() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_enabletuning() const {
  return _internal_has_enabletuning();
}
inline void ProtoAppSignalData::clear_enabletuning() {
  enabletuning_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ProtoAppSignalData::_internal_enabletuning() const {
  return enabletuning_;
}
inline bool ProtoAppSignalData::enabletuning() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.enableTuning)
  return _internal_enabletuning();
}
inline void ProtoAppSignalData::_internal_set_enabletuning(bool value) {
  _has_bits_[0] |= 0x00000400u;
  enabletuning_ = value;
}
inline void ProtoAppSignalData::set_enabletuning(bool value) {
  _internal_set_enabletuning(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.enableTuning)
}

// optional .Proto.TuningValue tuningDefaultValue = 9;
inline bool ProtoAppSignalData::_internal_has_tuningdefaultvalue() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tuningdefaultvalue_ != nullptr);
  return value;
}
inline bool ProtoAppSignalData::has_tuningdefaultvalue() const {
  return _internal_has_tuningdefaultvalue();
}
inline void ProtoAppSignalData::clear_tuningdefaultvalue() {
  if (tuningdefaultvalue_ != nullptr) tuningdefaultvalue_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::TuningValue& ProtoAppSignalData::_internal_tuningdefaultvalue() const {
  const ::Proto::TuningValue* p = tuningdefaultvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& ProtoAppSignalData::tuningdefaultvalue() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.tuningDefaultValue)
  return _internal_tuningdefaultvalue();
}
inline void ProtoAppSignalData::unsafe_arena_set_allocated_tuningdefaultvalue(
    ::Proto::TuningValue* tuningdefaultvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuningdefaultvalue_);
  }
  tuningdefaultvalue_ = tuningdefaultvalue;
  if (tuningdefaultvalue) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.ProtoAppSignalData.tuningDefaultValue)
}
inline ::Proto::TuningValue* ProtoAppSignalData::release_tuningdefaultvalue() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::TuningValue* temp = tuningdefaultvalue_;
  tuningdefaultvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* ProtoAppSignalData::unsafe_arena_release_tuningdefaultvalue() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.tuningDefaultValue)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::TuningValue* temp = tuningdefaultvalue_;
  tuningdefaultvalue_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* ProtoAppSignalData::_internal_mutable_tuningdefaultvalue() {
  _has_bits_[0] |= 0x00000040u;
  if (tuningdefaultvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    tuningdefaultvalue_ = p;
  }
  return tuningdefaultvalue_;
}
inline ::Proto::TuningValue* ProtoAppSignalData::mutable_tuningdefaultvalue() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.tuningDefaultValue)
  return _internal_mutable_tuningdefaultvalue();
}
inline void ProtoAppSignalData::set_allocated_tuningdefaultvalue(::Proto::TuningValue* tuningdefaultvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuningdefaultvalue_;
  }
  if (tuningdefaultvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuningdefaultvalue);
    if (message_arena != submessage_arena) {
      tuningdefaultvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuningdefaultvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tuningdefaultvalue_ = tuningdefaultvalue;
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.tuningDefaultValue)
}

// optional .Proto.TuningValue tuningLowBound = 10;
inline bool ProtoAppSignalData::_internal_has_tuninglowbound() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tuninglowbound_ != nullptr);
  return value;
}
inline bool ProtoAppSignalData::has_tuninglowbound() const {
  return _internal_has_tuninglowbound();
}
inline void ProtoAppSignalData::clear_tuninglowbound() {
  if (tuninglowbound_ != nullptr) tuninglowbound_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Proto::TuningValue& ProtoAppSignalData::_internal_tuninglowbound() const {
  const ::Proto::TuningValue* p = tuninglowbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& ProtoAppSignalData::tuninglowbound() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.tuningLowBound)
  return _internal_tuninglowbound();
}
inline void ProtoAppSignalData::unsafe_arena_set_allocated_tuninglowbound(
    ::Proto::TuningValue* tuninglowbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuninglowbound_);
  }
  tuninglowbound_ = tuninglowbound;
  if (tuninglowbound) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.ProtoAppSignalData.tuningLowBound)
}
inline ::Proto::TuningValue* ProtoAppSignalData::release_tuninglowbound() {
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::TuningValue* temp = tuninglowbound_;
  tuninglowbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* ProtoAppSignalData::unsafe_arena_release_tuninglowbound() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.tuningLowBound)
  _has_bits_[0] &= ~0x00000080u;
  ::Proto::TuningValue* temp = tuninglowbound_;
  tuninglowbound_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* ProtoAppSignalData::_internal_mutable_tuninglowbound() {
  _has_bits_[0] |= 0x00000080u;
  if (tuninglowbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    tuninglowbound_ = p;
  }
  return tuninglowbound_;
}
inline ::Proto::TuningValue* ProtoAppSignalData::mutable_tuninglowbound() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.tuningLowBound)
  return _internal_mutable_tuninglowbound();
}
inline void ProtoAppSignalData::set_allocated_tuninglowbound(::Proto::TuningValue* tuninglowbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuninglowbound_;
  }
  if (tuninglowbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuninglowbound);
    if (message_arena != submessage_arena) {
      tuninglowbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuninglowbound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tuninglowbound_ = tuninglowbound;
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.tuningLowBound)
}

// optional .Proto.TuningValue tuningHighBound = 11;
inline bool ProtoAppSignalData::_internal_has_tuninghighbound() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tuninghighbound_ != nullptr);
  return value;
}
inline bool ProtoAppSignalData::has_tuninghighbound() const {
  return _internal_has_tuninghighbound();
}
inline void ProtoAppSignalData::clear_tuninghighbound() {
  if (tuninghighbound_ != nullptr) tuninghighbound_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::Proto::TuningValue& ProtoAppSignalData::_internal_tuninghighbound() const {
  const ::Proto::TuningValue* p = tuninghighbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& ProtoAppSignalData::tuninghighbound() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.tuningHighBound)
  return _internal_tuninghighbound();
}
inline void ProtoAppSignalData::unsafe_arena_set_allocated_tuninghighbound(
    ::Proto::TuningValue* tuninghighbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuninghighbound_);
  }
  tuninghighbound_ = tuninghighbound;
  if (tuninghighbound) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.ProtoAppSignalData.tuningHighBound)
}
inline ::Proto::TuningValue* ProtoAppSignalData::release_tuninghighbound() {
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::TuningValue* temp = tuninghighbound_;
  tuninghighbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* ProtoAppSignalData::unsafe_arena_release_tuninghighbound() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.tuningHighBound)
  _has_bits_[0] &= ~0x00000100u;
  ::Proto::TuningValue* temp = tuninghighbound_;
  tuninghighbound_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* ProtoAppSignalData::_internal_mutable_tuninghighbound() {
  _has_bits_[0] |= 0x00000100u;
  if (tuninghighbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    tuninghighbound_ = p;
  }
  return tuninghighbound_;
}
inline ::Proto::TuningValue* ProtoAppSignalData::mutable_tuninghighbound() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.tuningHighBound)
  return _internal_mutable_tuninghighbound();
}
inline void ProtoAppSignalData::set_allocated_tuninghighbound(::Proto::TuningValue* tuninghighbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuninghighbound_;
  }
  if (tuninghighbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuninghighbound);
    if (message_arena != submessage_arena) {
      tuninghighbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuninghighbound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tuninghighbound_ = tuninghighbound;
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.tuningHighBound)
}

// optional bool acquire = 12 [default = true];
inline bool ProtoAppSignalData::_internal_has_acquire() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_acquire() const {
  return _internal_has_acquire();
}
inline void ProtoAppSignalData::clear_acquire() {
  acquire_ = true;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ProtoAppSignalData::_internal_acquire() const {
  return acquire_;
}
inline bool ProtoAppSignalData::acquire() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.acquire)
  return _internal_acquire();
}
inline void ProtoAppSignalData::_internal_set_acquire(bool value) {
  _has_bits_[0] |= 0x00020000u;
  acquire_ = value;
}
inline void ProtoAppSignalData::set_acquire(bool value) {
  _internal_set_acquire(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.acquire)
}

// optional bool archive = 13 [default = true];
inline bool ProtoAppSignalData::_internal_has_archive() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_archive() const {
  return _internal_has_archive();
}
inline void ProtoAppSignalData::clear_archive() {
  archive_ = true;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ProtoAppSignalData::_internal_archive() const {
  return archive_;
}
inline bool ProtoAppSignalData::archive() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.archive)
  return _internal_archive();
}
inline void ProtoAppSignalData::_internal_set_archive(bool value) {
  _has_bits_[0] |= 0x00040000u;
  archive_ = value;
}
inline void ProtoAppSignalData::set_archive(bool value) {
  _internal_set_archive(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.archive)
}

// optional int32 decimalPlaces = 14 [default = 2];
inline bool ProtoAppSignalData::_internal_has_decimalplaces() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_decimalplaces() const {
  return _internal_has_decimalplaces();
}
inline void ProtoAppSignalData::clear_decimalplaces() {
  decimalplaces_ = 2;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::_internal_decimalplaces() const {
  return decimalplaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAppSignalData::decimalplaces() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.decimalPlaces)
  return _internal_decimalplaces();
}
inline void ProtoAppSignalData::_internal_set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  decimalplaces_ = value;
}
inline void ProtoAppSignalData::set_decimalplaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_decimalplaces(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.decimalPlaces)
}

// optional double coarseAperture = 15 [default = 1];
inline bool ProtoAppSignalData::_internal_has_coarseaperture() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_coarseaperture() const {
  return _internal_has_coarseaperture();
}
inline void ProtoAppSignalData::clear_coarseaperture() {
  coarseaperture_ = 1;
  _has_bits_[0] &= ~0x00080000u;
}
inline double ProtoAppSignalData::_internal_coarseaperture() const {
  return coarseaperture_;
}
inline double ProtoAppSignalData::coarseaperture() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.coarseAperture)
  return _internal_coarseaperture();
}
inline void ProtoAppSignalData::_internal_set_coarseaperture(double value) {
  _has_bits_[0] |= 0x00080000u;
  coarseaperture_ = value;
}
inline void ProtoAppSignalData::set_coarseaperture(double value) {
  _internal_set_coarseaperture(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.coarseAperture)
}

// optional double fineAperture = 16 [default = 0.5];
inline bool ProtoAppSignalData::_internal_has_fineaperture() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_fineaperture() const {
  return _internal_has_fineaperture();
}
inline void ProtoAppSignalData::clear_fineaperture() {
  fineaperture_ = 0.5;
  _has_bits_[0] &= ~0x00100000u;
}
inline double ProtoAppSignalData::_internal_fineaperture() const {
  return fineaperture_;
}
inline double ProtoAppSignalData::fineaperture() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.fineAperture)
  return _internal_fineaperture();
}
inline void ProtoAppSignalData::_internal_set_fineaperture(double value) {
  _has_bits_[0] |= 0x00100000u;
  fineaperture_ = value;
}
inline void ProtoAppSignalData::set_fineaperture(double value) {
  _internal_set_fineaperture(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.fineAperture)
}

// optional bool adaptiveAperture = 17 [default = false];
inline bool ProtoAppSignalData::_internal_has_adaptiveaperture() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_adaptiveaperture() const {
  return _internal_has_adaptiveaperture();
}
inline void ProtoAppSignalData::clear_adaptiveaperture() {
  adaptiveaperture_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ProtoAppSignalData::_internal_adaptiveaperture() const {
  return adaptiveaperture_;
}
inline bool ProtoAppSignalData::adaptiveaperture() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.adaptiveAperture)
  return _internal_adaptiveaperture();
}
inline void ProtoAppSignalData::_internal_set_adaptiveaperture(bool value) {
  _has_bits_[0] |= 0x00000800u;
  adaptiveaperture_ = value;
}
inline void ProtoAppSignalData::set_adaptiveaperture(bool value) {
  _internal_set_adaptiveaperture(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.adaptiveAperture)
}

// optional bool excludefromBuild = 18 [default = false];
inline bool ProtoAppSignalData::_internal_has_excludefrombuild() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_excludefrombuild() const {
  return _internal_has_excludefrombuild();
}
inline void ProtoAppSignalData::clear_excludefrombuild() {
  excludefrombuild_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ProtoAppSignalData::_internal_excludefrombuild() const {
  return excludefrombuild_;
}
inline bool ProtoAppSignalData::excludefrombuild() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.excludefromBuild)
  return _internal_excludefrombuild();
}
inline void ProtoAppSignalData::_internal_set_excludefrombuild(bool value) {
  _has_bits_[0] |= 0x00001000u;
  excludefrombuild_ = value;
}
inline void ProtoAppSignalData::set_excludefrombuild(bool value) {
  _internal_set_excludefrombuild(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.excludefromBuild)
}

// optional string tags = 19;
inline bool ProtoAppSignalData::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_tags() const {
  return _internal_has_tags();
}
inline void ProtoAppSignalData::clear_tags() {
  tags_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ProtoAppSignalData::tags() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.tags)
  return _internal_tags();
}
inline void ProtoAppSignalData::set_tags(const std::string& value) {
  _internal_set_tags(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.tags)
}
inline std::string* ProtoAppSignalData::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.tags)
  return _internal_mutable_tags();
}
inline const std::string& ProtoAppSignalData::_internal_tags() const {
  return tags_.Get();
}
inline void ProtoAppSignalData::_internal_set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoAppSignalData::set_tags(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  tags_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ProtoAppSignalData.tags)
}
inline void ProtoAppSignalData::set_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ProtoAppSignalData.tags)
}
inline void ProtoAppSignalData::set_tags(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ProtoAppSignalData.tags)
}
inline std::string* ProtoAppSignalData::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000008u;
  return tags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoAppSignalData::release_tags() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.tags)
  if (!_internal_has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return tags_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAppSignalData::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.tags)
}

// optional string userSpecPropStruct = 20;
inline bool ProtoAppSignalData::_internal_has_userspecpropstruct() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_userspecpropstruct() const {
  return _internal_has_userspecpropstruct();
}
inline void ProtoAppSignalData::clear_userspecpropstruct() {
  userspecpropstruct_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ProtoAppSignalData::userspecpropstruct() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.userSpecPropStruct)
  return _internal_userspecpropstruct();
}
inline void ProtoAppSignalData::set_userspecpropstruct(const std::string& value) {
  _internal_set_userspecpropstruct(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.userSpecPropStruct)
}
inline std::string* ProtoAppSignalData::mutable_userspecpropstruct() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.userSpecPropStruct)
  return _internal_mutable_userspecpropstruct();
}
inline const std::string& ProtoAppSignalData::_internal_userspecpropstruct() const {
  return userspecpropstruct_.Get();
}
inline void ProtoAppSignalData::_internal_set_userspecpropstruct(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  userspecpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoAppSignalData::set_userspecpropstruct(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  userspecpropstruct_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ProtoAppSignalData.userSpecPropStruct)
}
inline void ProtoAppSignalData::set_userspecpropstruct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  userspecpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ProtoAppSignalData.userSpecPropStruct)
}
inline void ProtoAppSignalData::set_userspecpropstruct(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  userspecpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ProtoAppSignalData.userSpecPropStruct)
}
inline std::string* ProtoAppSignalData::_internal_mutable_userspecpropstruct() {
  _has_bits_[0] |= 0x00000010u;
  return userspecpropstruct_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoAppSignalData::release_userspecpropstruct() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.userSpecPropStruct)
  if (!_internal_has_userspecpropstruct()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return userspecpropstruct_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAppSignalData::set_allocated_userspecpropstruct(std::string* userspecpropstruct) {
  if (userspecpropstruct != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  userspecpropstruct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userspecpropstruct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.userSpecPropStruct)
}

// optional bytes userSpecPropValues = 21;
inline bool ProtoAppSignalData::_internal_has_userspecpropvalues() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProtoAppSignalData::has_userspecpropvalues() const {
  return _internal_has_userspecpropvalues();
}
inline void ProtoAppSignalData::clear_userspecpropvalues() {
  userspecpropvalues_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ProtoAppSignalData::userspecpropvalues() const {
  // @@protoc_insertion_point(field_get:Proto.ProtoAppSignalData.userSpecPropValues)
  return _internal_userspecpropvalues();
}
inline void ProtoAppSignalData::set_userspecpropvalues(const std::string& value) {
  _internal_set_userspecpropvalues(value);
  // @@protoc_insertion_point(field_set:Proto.ProtoAppSignalData.userSpecPropValues)
}
inline std::string* ProtoAppSignalData::mutable_userspecpropvalues() {
  // @@protoc_insertion_point(field_mutable:Proto.ProtoAppSignalData.userSpecPropValues)
  return _internal_mutable_userspecpropvalues();
}
inline const std::string& ProtoAppSignalData::_internal_userspecpropvalues() const {
  return userspecpropvalues_.Get();
}
inline void ProtoAppSignalData::_internal_set_userspecpropvalues(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  userspecpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoAppSignalData::set_userspecpropvalues(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  userspecpropvalues_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ProtoAppSignalData.userSpecPropValues)
}
inline void ProtoAppSignalData::set_userspecpropvalues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  userspecpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ProtoAppSignalData.userSpecPropValues)
}
inline void ProtoAppSignalData::set_userspecpropvalues(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  userspecpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ProtoAppSignalData.userSpecPropValues)
}
inline std::string* ProtoAppSignalData::_internal_mutable_userspecpropvalues() {
  _has_bits_[0] |= 0x00000020u;
  return userspecpropvalues_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoAppSignalData::release_userspecpropvalues() {
  // @@protoc_insertion_point(field_release:Proto.ProtoAppSignalData.userSpecPropValues)
  if (!_internal_has_userspecpropvalues()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return userspecpropvalues_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAppSignalData::set_allocated_userspecpropvalues(std::string* userspecpropvalues) {
  if (userspecpropvalues != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  userspecpropvalues_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userspecpropvalues,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ProtoAppSignalData.userSpecPropValues)
}

// -------------------------------------------------------------------

// AppSignalState

// optional uint64 hash = 1 [default = 0];
inline bool AppSignalState::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppSignalState::has_hash() const {
  return _internal_has_hash();
}
inline void AppSignalState::clear_hash() {
  hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppSignalState::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppSignalState::hash() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.hash)
  return _internal_hash();
}
inline void AppSignalState::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  hash_ = value;
}
inline void AppSignalState::set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.hash)
}

// optional double value = 2 [default = 0];
inline bool AppSignalState::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppSignalState::has_value() const {
  return _internal_has_value();
}
inline void AppSignalState::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AppSignalState::_internal_value() const {
  return value_;
}
inline double AppSignalState::value() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.value)
  return _internal_value();
}
inline void AppSignalState::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void AppSignalState::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.value)
}

// optional uint32 flags = 3 [default = 0];
inline bool AppSignalState::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppSignalState::has_flags() const {
  return _internal_has_flags();
}
inline void AppSignalState::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppSignalState::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppSignalState::flags() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.flags)
  return _internal_flags();
}
inline void AppSignalState::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
}
inline void AppSignalState::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.flags)
}

// optional sfixed64 systemTime = 4 [default = 0];
inline bool AppSignalState::_internal_has_systemtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppSignalState::has_systemtime() const {
  return _internal_has_systemtime();
}
inline void AppSignalState::clear_systemtime() {
  systemtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::_internal_systemtime() const {
  return systemtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::systemtime() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.systemTime)
  return _internal_systemtime();
}
inline void AppSignalState::_internal_set_systemtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  systemtime_ = value;
}
inline void AppSignalState::set_systemtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_systemtime(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.systemTime)
}

// optional sfixed64 localTime = 5 [default = 0];
inline bool AppSignalState::_internal_has_localtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppSignalState::has_localtime() const {
  return _internal_has_localtime();
}
inline void AppSignalState::clear_localtime() {
  localtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::_internal_localtime() const {
  return localtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::localtime() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.localTime)
  return _internal_localtime();
}
inline void AppSignalState::_internal_set_localtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  localtime_ = value;
}
inline void AppSignalState::set_localtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_localtime(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.localTime)
}

// optional sfixed64 plantTime = 6 [default = 0];
inline bool AppSignalState::_internal_has_planttime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppSignalState::has_planttime() const {
  return _internal_has_planttime();
}
inline void AppSignalState::clear_planttime() {
  planttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::_internal_planttime() const {
  return planttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::planttime() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.plantTime)
  return _internal_planttime();
}
inline void AppSignalState::_internal_set_planttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  planttime_ = value;
}
inline void AppSignalState::set_planttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_planttime(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.plantTime)
}

// optional sfixed64 archiveId = 7 [default = -1];
inline bool AppSignalState::_internal_has_archiveid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppSignalState::has_archiveid() const {
  return _internal_has_archiveid();
}
inline void AppSignalState::clear_archiveid() {
  archiveid_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::_internal_archiveid() const {
  return archiveid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppSignalState::archiveid() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.archiveId)
  return _internal_archiveid();
}
inline void AppSignalState::_internal_set_archiveid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  archiveid_ = value;
}
inline void AppSignalState::set_archiveid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_archiveid(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.archiveId)
}

// optional uint32 packetNo = 8 [default = 0];
inline bool AppSignalState::_internal_has_packetno() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppSignalState::has_packetno() const {
  return _internal_has_packetno();
}
inline void AppSignalState::clear_packetno() {
  packetno_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppSignalState::_internal_packetno() const {
  return packetno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppSignalState::packetno() const {
  // @@protoc_insertion_point(field_get:Proto.AppSignalState.packetNo)
  return _internal_packetno();
}
inline void AppSignalState::_internal_set_packetno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  packetno_ = value;
}
inline void AppSignalState::set_packetno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetno(value);
  // @@protoc_insertion_point(field_set:Proto.AppSignalState.packetNo)
}

// -------------------------------------------------------------------

// Connection

// optional string ConnectionID = 2 [default = ""];
inline bool Connection::_internal_has_connectionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Connection::has_connectionid() const {
  return _internal_has_connectionid();
}
inline void Connection::clear_connectionid() {
  connectionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Connection::connectionid() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.ConnectionID)
  return _internal_connectionid();
}
inline void Connection::set_connectionid(const std::string& value) {
  _internal_set_connectionid(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.ConnectionID)
}
inline std::string* Connection::mutable_connectionid() {
  // @@protoc_insertion_point(field_mutable:Proto.Connection.ConnectionID)
  return _internal_mutable_connectionid();
}
inline const std::string& Connection::_internal_connectionid() const {
  return connectionid_.Get();
}
inline void Connection::_internal_set_connectionid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_connectionid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Connection.ConnectionID)
}
inline void Connection::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Connection.ConnectionID)
}
inline void Connection::set_connectionid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Connection.ConnectionID)
}
inline std::string* Connection::_internal_mutable_connectionid() {
  _has_bits_[0] |= 0x00000001u;
  return connectionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_connectionid() {
  // @@protoc_insertion_point(field_release:Proto.Connection.ConnectionID)
  if (!_internal_has_connectionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connectionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_connectionid(std::string* connectionid) {
  if (connectionid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Connection.ConnectionID)
}

// optional string Port1EquipmentID = 3 [default = ""];
inline bool Connection::_internal_has_port1equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Connection::has_port1equipmentid() const {
  return _internal_has_port1equipmentid();
}
inline void Connection::clear_port1equipmentid() {
  port1equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Connection::port1equipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1EquipmentID)
  return _internal_port1equipmentid();
}
inline void Connection::set_port1equipmentid(const std::string& value) {
  _internal_set_port1equipmentid(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1EquipmentID)
}
inline std::string* Connection::mutable_port1equipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.Connection.Port1EquipmentID)
  return _internal_mutable_port1equipmentid();
}
inline const std::string& Connection::_internal_port1equipmentid() const {
  return port1equipmentid_.Get();
}
inline void Connection::_internal_set_port1equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  port1equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_port1equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  port1equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Connection.Port1EquipmentID)
}
inline void Connection::set_port1equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  port1equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Connection.Port1EquipmentID)
}
inline void Connection::set_port1equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  port1equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Connection.Port1EquipmentID)
}
inline std::string* Connection::_internal_mutable_port1equipmentid() {
  _has_bits_[0] |= 0x00000002u;
  return port1equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_port1equipmentid() {
  // @@protoc_insertion_point(field_release:Proto.Connection.Port1EquipmentID)
  if (!_internal_has_port1equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return port1equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_port1equipmentid(std::string* port1equipmentid) {
  if (port1equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  port1equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port1equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Connection.Port1EquipmentID)
}

// optional string Port2EquipmentID = 4 [default = ""];
inline bool Connection::_internal_has_port2equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Connection::has_port2equipmentid() const {
  return _internal_has_port2equipmentid();
}
inline void Connection::clear_port2equipmentid() {
  port2equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Connection::port2equipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2EquipmentID)
  return _internal_port2equipmentid();
}
inline void Connection::set_port2equipmentid(const std::string& value) {
  _internal_set_port2equipmentid(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2EquipmentID)
}
inline std::string* Connection::mutable_port2equipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.Connection.Port2EquipmentID)
  return _internal_mutable_port2equipmentid();
}
inline const std::string& Connection::_internal_port2equipmentid() const {
  return port2equipmentid_.Get();
}
inline void Connection::_internal_set_port2equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  port2equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_port2equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  port2equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Connection.Port2EquipmentID)
}
inline void Connection::set_port2equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  port2equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Connection.Port2EquipmentID)
}
inline void Connection::set_port2equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  port2equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Connection.Port2EquipmentID)
}
inline std::string* Connection::_internal_mutable_port2equipmentid() {
  _has_bits_[0] |= 0x00000004u;
  return port2equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_port2equipmentid() {
  // @@protoc_insertion_point(field_release:Proto.Connection.Port2EquipmentID)
  if (!_internal_has_port2equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return port2equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_port2equipmentid(std::string* port2equipmentid) {
  if (port2equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  port2equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port2equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Connection.Port2EquipmentID)
}

// optional string Port1RawDataDescription = 5 [default = ""];
inline bool Connection::_internal_has_port1rawdatadescription() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Connection::has_port1rawdatadescription() const {
  return _internal_has_port1rawdatadescription();
}
inline void Connection::clear_port1rawdatadescription() {
  port1rawdatadescription_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Connection::port1rawdatadescription() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1RawDataDescription)
  return _internal_port1rawdatadescription();
}
inline void Connection::set_port1rawdatadescription(const std::string& value) {
  _internal_set_port1rawdatadescription(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1RawDataDescription)
}
inline std::string* Connection::mutable_port1rawdatadescription() {
  // @@protoc_insertion_point(field_mutable:Proto.Connection.Port1RawDataDescription)
  return _internal_mutable_port1rawdatadescription();
}
inline const std::string& Connection::_internal_port1rawdatadescription() const {
  return port1rawdatadescription_.Get();
}
inline void Connection::_internal_set_port1rawdatadescription(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  port1rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_port1rawdatadescription(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  port1rawdatadescription_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Connection.Port1RawDataDescription)
}
inline void Connection::set_port1rawdatadescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  port1rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Connection.Port1RawDataDescription)
}
inline void Connection::set_port1rawdatadescription(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  port1rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Connection.Port1RawDataDescription)
}
inline std::string* Connection::_internal_mutable_port1rawdatadescription() {
  _has_bits_[0] |= 0x00000008u;
  return port1rawdatadescription_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_port1rawdatadescription() {
  // @@protoc_insertion_point(field_release:Proto.Connection.Port1RawDataDescription)
  if (!_internal_has_port1rawdatadescription()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return port1rawdatadescription_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_port1rawdatadescription(std::string* port1rawdatadescription) {
  if (port1rawdatadescription != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  port1rawdatadescription_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port1rawdatadescription,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Connection.Port1RawDataDescription)
}

// optional string Port2RawDataDescription = 6 [default = ""];
inline bool Connection::_internal_has_port2rawdatadescription() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Connection::has_port2rawdatadescription() const {
  return _internal_has_port2rawdatadescription();
}
inline void Connection::clear_port2rawdatadescription() {
  port2rawdatadescription_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Connection::port2rawdatadescription() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2RawDataDescription)
  return _internal_port2rawdatadescription();
}
inline void Connection::set_port2rawdatadescription(const std::string& value) {
  _internal_set_port2rawdatadescription(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2RawDataDescription)
}
inline std::string* Connection::mutable_port2rawdatadescription() {
  // @@protoc_insertion_point(field_mutable:Proto.Connection.Port2RawDataDescription)
  return _internal_mutable_port2rawdatadescription();
}
inline const std::string& Connection::_internal_port2rawdatadescription() const {
  return port2rawdatadescription_.Get();
}
inline void Connection::_internal_set_port2rawdatadescription(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  port2rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_port2rawdatadescription(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  port2rawdatadescription_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Connection.Port2RawDataDescription)
}
inline void Connection::set_port2rawdatadescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  port2rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Connection.Port2RawDataDescription)
}
inline void Connection::set_port2rawdatadescription(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  port2rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Connection.Port2RawDataDescription)
}
inline std::string* Connection::_internal_mutable_port2rawdatadescription() {
  _has_bits_[0] |= 0x00000010u;
  return port2rawdatadescription_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_port2rawdatadescription() {
  // @@protoc_insertion_point(field_release:Proto.Connection.Port2RawDataDescription)
  if (!_internal_has_port2rawdatadescription()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return port2rawdatadescription_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_port2rawdatadescription(std::string* port2rawdatadescription) {
  if (port2rawdatadescription != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  port2rawdatadescription_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port2rawdatadescription,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Connection.Port2RawDataDescription)
}

// optional bool ManualSettings = 11 [default = false];
inline bool Connection::_internal_has_manualsettings() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Connection::has_manualsettings() const {
  return _internal_has_manualsettings();
}
inline void Connection::clear_manualsettings() {
  manualsettings_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Connection::_internal_manualsettings() const {
  return manualsettings_;
}
inline bool Connection::manualsettings() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.ManualSettings)
  return _internal_manualsettings();
}
inline void Connection::_internal_set_manualsettings(bool value) {
  _has_bits_[0] |= 0x00000200u;
  manualsettings_ = value;
}
inline void Connection::set_manualsettings(bool value) {
  _internal_set_manualsettings(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.ManualSettings)
}

// optional bool DisableDataID = 12 [default = false];
inline bool Connection::_internal_has_disabledataid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Connection::has_disabledataid() const {
  return _internal_has_disabledataid();
}
inline void Connection::clear_disabledataid() {
  disabledataid_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Connection::_internal_disabledataid() const {
  return disabledataid_;
}
inline bool Connection::disabledataid() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.DisableDataID)
  return _internal_disabledataid();
}
inline void Connection::_internal_set_disabledataid(bool value) {
  _has_bits_[0] |= 0x00000400u;
  disabledataid_ = value;
}
inline void Connection::set_disabledataid(bool value) {
  _internal_set_disabledataid(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.DisableDataID)
}

// optional bool GenerateVHDFile = 13 [default = false];
inline bool Connection::_internal_has_generatevhdfile() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Connection::has_generatevhdfile() const {
  return _internal_has_generatevhdfile();
}
inline void Connection::clear_generatevhdfile() {
  generatevhdfile_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Connection::_internal_generatevhdfile() const {
  return generatevhdfile_;
}
inline bool Connection::generatevhdfile() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.GenerateVHDFile)
  return _internal_generatevhdfile();
}
inline void Connection::_internal_set_generatevhdfile(bool value) {
  _has_bits_[0] |= 0x00000800u;
  generatevhdfile_ = value;
}
inline void Connection::set_generatevhdfile(bool value) {
  _internal_set_generatevhdfile(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.GenerateVHDFile)
}

// optional int32 Port1TxStartAddress = 14 [default = 0];
inline bool Connection::_internal_has_port1txstartaddress() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Connection::has_port1txstartaddress() const {
  return _internal_has_port1txstartaddress();
}
inline void Connection::clear_port1txstartaddress() {
  port1txstartaddress_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port1txstartaddress() const {
  return port1txstartaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port1txstartaddress() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1TxStartAddress)
  return _internal_port1txstartaddress();
}
inline void Connection::_internal_set_port1txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  port1txstartaddress_ = value;
}
inline void Connection::set_port1txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port1txstartaddress(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1TxStartAddress)
}

// optional int32 Port1TxWordsQuantity = 15 [default = 479];
inline bool Connection::_internal_has_port1txwordsquantity() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Connection::has_port1txwordsquantity() const {
  return _internal_has_port1txwordsquantity();
}
inline void Connection::clear_port1txwordsquantity() {
  port1txwordsquantity_ = 479;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port1txwordsquantity() const {
  return port1txwordsquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port1txwordsquantity() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1TxWordsQuantity)
  return _internal_port1txwordsquantity();
}
inline void Connection::_internal_set_port1txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  port1txwordsquantity_ = value;
}
inline void Connection::set_port1txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port1txwordsquantity(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1TxWordsQuantity)
}

// optional int32 Port1RxWordsQuantity = 16 [default = 479];
inline bool Connection::_internal_has_port1rxwordsquantity() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Connection::has_port1rxwordsquantity() const {
  return _internal_has_port1rxwordsquantity();
}
inline void Connection::clear_port1rxwordsquantity() {
  port1rxwordsquantity_ = 479;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port1rxwordsquantity() const {
  return port1rxwordsquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port1rxwordsquantity() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1RxWordsQuantity)
  return _internal_port1rxwordsquantity();
}
inline void Connection::_internal_set_port1rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  port1rxwordsquantity_ = value;
}
inline void Connection::set_port1rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port1rxwordsquantity(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1RxWordsQuantity)
}

// optional int32 Port2TxStartAddress = 17 [default = 0];
inline bool Connection::_internal_has_port2txstartaddress() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Connection::has_port2txstartaddress() const {
  return _internal_has_port2txstartaddress();
}
inline void Connection::clear_port2txstartaddress() {
  port2txstartaddress_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port2txstartaddress() const {
  return port2txstartaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port2txstartaddress() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2TxStartAddress)
  return _internal_port2txstartaddress();
}
inline void Connection::_internal_set_port2txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  port2txstartaddress_ = value;
}
inline void Connection::set_port2txstartaddress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port2txstartaddress(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2TxStartAddress)
}

// optional int32 Port2TxWordsQuantity = 18 [default = 479];
inline bool Connection::_internal_has_port2txwordsquantity() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Connection::has_port2txwordsquantity() const {
  return _internal_has_port2txwordsquantity();
}
inline void Connection::clear_port2txwordsquantity() {
  port2txwordsquantity_ = 479;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port2txwordsquantity() const {
  return port2txwordsquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port2txwordsquantity() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2TxWordsQuantity)
  return _internal_port2txwordsquantity();
}
inline void Connection::_internal_set_port2txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  port2txwordsquantity_ = value;
}
inline void Connection::set_port2txwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port2txwordsquantity(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2TxWordsQuantity)
}

// optional int32 Port2RxWordsQuantity = 19 [default = 479];
inline bool Connection::_internal_has_port2rxwordsquantity() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Connection::has_port2rxwordsquantity() const {
  return _internal_has_port2rxwordsquantity();
}
inline void Connection::clear_port2rxwordsquantity() {
  port2rxwordsquantity_ = 479;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port2rxwordsquantity() const {
  return port2rxwordsquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port2rxwordsquantity() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2RxWordsQuantity)
  return _internal_port2rxwordsquantity();
}
inline void Connection::_internal_set_port2rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  port2rxwordsquantity_ = value;
}
inline void Connection::set_port2rxwordsquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port2rxwordsquantity(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2RxWordsQuantity)
}

// optional .Proto.Uuid uuid = 20;
inline bool Connection::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool Connection::has_uuid() const {
  return _internal_has_uuid();
}
inline void Connection::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::Uuid& Connection::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& Connection::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.uuid)
  return _internal_uuid();
}
inline void Connection::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Connection.uuid)
}
inline ::Proto::Uuid* Connection::release_uuid() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* Connection::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.Connection.uuid)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* Connection::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000020u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* Connection::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.Connection.uuid)
  return _internal_mutable_uuid();
}
inline void Connection::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Connection.uuid)
}

// optional bool Port1EnableSerial = 21 [default = false];
inline bool Connection::_internal_has_port1enableserial() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Connection::has_port1enableserial() const {
  return _internal_has_port1enableserial();
}
inline void Connection::clear_port1enableserial() {
  port1enableserial_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Connection::_internal_port1enableserial() const {
  return port1enableserial_;
}
inline bool Connection::port1enableserial() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1EnableSerial)
  return _internal_port1enableserial();
}
inline void Connection::_internal_set_port1enableserial(bool value) {
  _has_bits_[0] |= 0x00001000u;
  port1enableserial_ = value;
}
inline void Connection::set_port1enableserial(bool value) {
  _internal_set_port1enableserial(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1EnableSerial)
}

// optional int32 Port1SerialMode = 22 [default = 0];
inline bool Connection::_internal_has_port1serialmode() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Connection::has_port1serialmode() const {
  return _internal_has_port1serialmode();
}
inline void Connection::clear_port1serialmode() {
  port1serialmode_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port1serialmode() const {
  return port1serialmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port1serialmode() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1SerialMode)
  return _internal_port1serialmode();
}
inline void Connection::_internal_set_port1serialmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  port1serialmode_ = value;
}
inline void Connection::set_port1serialmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port1serialmode(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1SerialMode)
}

// optional bool Port1EnableDuplex = 23 [default = false];
inline bool Connection::_internal_has_port1enableduplex() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Connection::has_port1enableduplex() const {
  return _internal_has_port1enableduplex();
}
inline void Connection::clear_port1enableduplex() {
  port1enableduplex_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Connection::_internal_port1enableduplex() const {
  return port1enableduplex_;
}
inline bool Connection::port1enableduplex() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port1EnableDuplex)
  return _internal_port1enableduplex();
}
inline void Connection::_internal_set_port1enableduplex(bool value) {
  _has_bits_[0] |= 0x00004000u;
  port1enableduplex_ = value;
}
inline void Connection::set_port1enableduplex(bool value) {
  _internal_set_port1enableduplex(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port1EnableDuplex)
}

// optional bool Port2EnableSerial = 24 [default = false];
inline bool Connection::_internal_has_port2enableserial() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Connection::has_port2enableserial() const {
  return _internal_has_port2enableserial();
}
inline void Connection::clear_port2enableserial() {
  port2enableserial_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Connection::_internal_port2enableserial() const {
  return port2enableserial_;
}
inline bool Connection::port2enableserial() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2EnableSerial)
  return _internal_port2enableserial();
}
inline void Connection::_internal_set_port2enableserial(bool value) {
  _has_bits_[0] |= 0x00008000u;
  port2enableserial_ = value;
}
inline void Connection::set_port2enableserial(bool value) {
  _internal_set_port2enableserial(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2EnableSerial)
}

// optional int32 Port2SerialMode = 25 [default = 0];
inline bool Connection::_internal_has_port2serialmode() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Connection::has_port2serialmode() const {
  return _internal_has_port2serialmode();
}
inline void Connection::clear_port2serialmode() {
  port2serialmode_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_port2serialmode() const {
  return port2serialmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::port2serialmode() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2SerialMode)
  return _internal_port2serialmode();
}
inline void Connection::_internal_set_port2serialmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  port2serialmode_ = value;
}
inline void Connection::set_port2serialmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port2serialmode(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2SerialMode)
}

// optional bool Port2EnableDuplex = 26 [default = false];
inline bool Connection::_internal_has_port2enableduplex() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Connection::has_port2enableduplex() const {
  return _internal_has_port2enableduplex();
}
inline void Connection::clear_port2enableduplex() {
  port2enableduplex_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Connection::_internal_port2enableduplex() const {
  return port2enableduplex_;
}
inline bool Connection::port2enableduplex() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Port2EnableDuplex)
  return _internal_port2enableduplex();
}
inline void Connection::_internal_set_port2enableduplex(bool value) {
  _has_bits_[0] |= 0x00010000u;
  port2enableduplex_ = value;
}
inline void Connection::set_port2enableduplex(bool value) {
  _internal_set_port2enableduplex(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Port2EnableDuplex)
}

// optional int32 Type = 27 [default = 0];
inline bool Connection::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Connection::has_type() const {
  return _internal_has_type();
}
inline void Connection::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::type() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.Type)
  return _internal_type();
}
inline void Connection::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  type_ = value;
}
inline void Connection::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.Type)
}

// optional int32 ObsoleteMode = 8 [default = 0];
inline bool Connection::_internal_has_obsoletemode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Connection::has_obsoletemode() const {
  return _internal_has_obsoletemode();
}
inline void Connection::clear_obsoletemode() {
  obsoletemode_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_obsoletemode() const {
  return obsoletemode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::obsoletemode() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.ObsoleteMode)
  return _internal_obsoletemode();
}
inline void Connection::_internal_set_obsoletemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  obsoletemode_ = value;
}
inline void Connection::set_obsoletemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obsoletemode(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.ObsoleteMode)
}

// optional int32 ObsoleteSerialMode = 7 [default = 0];
inline bool Connection::_internal_has_obsoleteserialmode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Connection::has_obsoleteserialmode() const {
  return _internal_has_obsoleteserialmode();
}
inline void Connection::clear_obsoleteserialmode() {
  obsoleteserialmode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_obsoleteserialmode() const {
  return obsoleteserialmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::obsoleteserialmode() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.ObsoleteSerialMode)
  return _internal_obsoleteserialmode();
}
inline void Connection::_internal_set_obsoleteserialmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  obsoleteserialmode_ = value;
}
inline void Connection::set_obsoleteserialmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obsoleteserialmode(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.ObsoleteSerialMode)
}

// optional bool ObsoleteEnableDuplex = 10 [default = false];
inline bool Connection::_internal_has_obsoleteenableduplex() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Connection::has_obsoleteenableduplex() const {
  return _internal_has_obsoleteenableduplex();
}
inline void Connection::clear_obsoleteenableduplex() {
  obsoleteenableduplex_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Connection::_internal_obsoleteenableduplex() const {
  return obsoleteenableduplex_;
}
inline bool Connection::obsoleteenableduplex() const {
  // @@protoc_insertion_point(field_get:Proto.Connection.ObsoleteEnableDuplex)
  return _internal_obsoleteenableduplex();
}
inline void Connection::_internal_set_obsoleteenableduplex(bool value) {
  _has_bits_[0] |= 0x00020000u;
  obsoleteenableduplex_ = value;
}
inline void Connection::set_obsoleteenableduplex(bool value) {
  _internal_set_obsoleteenableduplex(value);
  // @@protoc_insertion_point(field_set:Proto.Connection.ObsoleteEnableDuplex)
}

// -------------------------------------------------------------------

// SchemaDetailsSet

// repeated .Proto.SchemaDetails schemasDetails = 2;
inline int SchemaDetailsSet::_internal_schemasdetails_size() const {
  return schemasdetails_.size();
}
inline int SchemaDetailsSet::schemasdetails_size() const {
  return _internal_schemasdetails_size();
}
inline void SchemaDetailsSet::clear_schemasdetails() {
  schemasdetails_.Clear();
}
inline ::Proto::SchemaDetails* SchemaDetailsSet::mutable_schemasdetails(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetailsSet.schemasDetails)
  return schemasdetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaDetails >*
SchemaDetailsSet::mutable_schemasdetails() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetailsSet.schemasDetails)
  return &schemasdetails_;
}
inline const ::Proto::SchemaDetails& SchemaDetailsSet::_internal_schemasdetails(int index) const {
  return schemasdetails_.Get(index);
}
inline const ::Proto::SchemaDetails& SchemaDetailsSet::schemasdetails(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetailsSet.schemasDetails)
  return _internal_schemasdetails(index);
}
inline ::Proto::SchemaDetails* SchemaDetailsSet::_internal_add_schemasdetails() {
  return schemasdetails_.Add();
}
inline ::Proto::SchemaDetails* SchemaDetailsSet::add_schemasdetails() {
  // @@protoc_insertion_point(field_add:Proto.SchemaDetailsSet.schemasDetails)
  return _internal_add_schemasdetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SchemaDetails >&
SchemaDetailsSet::schemasdetails() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetailsSet.schemasDetails)
  return schemasdetails_;
}

// -------------------------------------------------------------------

// SchemaDetails

// optional int32 version = 2;
inline bool SchemaDetails::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchemaDetails::has_version() const {
  return _internal_has_version();
}
inline void SchemaDetails::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaDetails::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchemaDetails::version() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.version)
  return _internal_version();
}
inline void SchemaDetails::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  version_ = value;
}
inline void SchemaDetails::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.version)
}

// optional string schemaId = 4;
inline bool SchemaDetails::_internal_has_schemaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchemaDetails::has_schemaid() const {
  return _internal_has_schemaid();
}
inline void SchemaDetails::clear_schemaid() {
  schemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchemaDetails::schemaid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.schemaId)
  return _internal_schemaid();
}
inline void SchemaDetails::set_schemaid(const std::string& value) {
  _internal_set_schemaid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.schemaId)
}
inline std::string* SchemaDetails::mutable_schemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.schemaId)
  return _internal_mutable_schemaid();
}
inline const std::string& SchemaDetails::_internal_schemaid() const {
  return schemaid_.Get();
}
inline void SchemaDetails::_internal_set_schemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaDetails::set_schemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaDetails.schemaId)
}
inline void SchemaDetails::set_schemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.schemaId)
}
inline void SchemaDetails::set_schemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.schemaId)
}
inline std::string* SchemaDetails::_internal_mutable_schemaid() {
  _has_bits_[0] |= 0x00000001u;
  return schemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaDetails::release_schemaid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaDetails.schemaId)
  if (!_internal_has_schemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return schemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaDetails::set_allocated_schemaid(std::string* schemaid) {
  if (schemaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  schemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaDetails.schemaId)
}

// optional string caption = 5;
inline bool SchemaDetails::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchemaDetails::has_caption() const {
  return _internal_has_caption();
}
inline void SchemaDetails::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchemaDetails::caption() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.caption)
  return _internal_caption();
}
inline void SchemaDetails::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.caption)
}
inline std::string* SchemaDetails::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.caption)
  return _internal_mutable_caption();
}
inline const std::string& SchemaDetails::_internal_caption() const {
  return caption_.Get();
}
inline void SchemaDetails::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaDetails::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaDetails.caption)
}
inline void SchemaDetails::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.caption)
}
inline void SchemaDetails::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.caption)
}
inline std::string* SchemaDetails::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000002u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaDetails::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.SchemaDetails.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaDetails::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaDetails.caption)
}

// optional bool excludedfromBuild = 6;
inline bool SchemaDetails::_internal_has_excludedfrombuild() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchemaDetails::has_excludedfrombuild() const {
  return _internal_has_excludedfrombuild();
}
inline void SchemaDetails::clear_excludedfrombuild() {
  excludedfrombuild_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SchemaDetails::_internal_excludedfrombuild() const {
  return excludedfrombuild_;
}
inline bool SchemaDetails::excludedfrombuild() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.excludedfromBuild)
  return _internal_excludedfrombuild();
}
inline void SchemaDetails::_internal_set_excludedfrombuild(bool value) {
  _has_bits_[0] |= 0x00000040u;
  excludedfrombuild_ = value;
}
inline void SchemaDetails::set_excludedfrombuild(bool value) {
  _internal_set_excludedfrombuild(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.excludedfromBuild)
}

// optional string equipmentId = 7;
inline bool SchemaDetails::_internal_has_equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchemaDetails::has_equipmentid() const {
  return _internal_has_equipmentid();
}
inline void SchemaDetails::clear_equipmentid() {
  equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SchemaDetails::equipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.equipmentId)
  return _internal_equipmentid();
}
inline void SchemaDetails::set_equipmentid(const std::string& value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.equipmentId)
}
inline std::string* SchemaDetails::mutable_equipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.equipmentId)
  return _internal_mutable_equipmentid();
}
inline const std::string& SchemaDetails::_internal_equipmentid() const {
  return equipmentid_.Get();
}
inline void SchemaDetails::_internal_set_equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaDetails::set_equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaDetails.equipmentId)
}
inline void SchemaDetails::set_equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.equipmentId)
}
inline void SchemaDetails::set_equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.equipmentId)
}
inline std::string* SchemaDetails::_internal_mutable_equipmentid() {
  _has_bits_[0] |= 0x00000004u;
  return equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaDetails::release_equipmentid() {
  // @@protoc_insertion_point(field_release:Proto.SchemaDetails.equipmentId)
  if (!_internal_has_equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaDetails::set_allocated_equipmentid(std::string* equipmentid) {
  if (equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaDetails.equipmentId)
}

// optional string lmDescriptionFile = 8;
inline bool SchemaDetails::_internal_has_lmdescriptionfile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchemaDetails::has_lmdescriptionfile() const {
  return _internal_has_lmdescriptionfile();
}
inline void SchemaDetails::clear_lmdescriptionfile() {
  lmdescriptionfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SchemaDetails::lmdescriptionfile() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.lmDescriptionFile)
  return _internal_lmdescriptionfile();
}
inline void SchemaDetails::set_lmdescriptionfile(const std::string& value) {
  _internal_set_lmdescriptionfile(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.lmDescriptionFile)
}
inline std::string* SchemaDetails::mutable_lmdescriptionfile() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.lmDescriptionFile)
  return _internal_mutable_lmdescriptionfile();
}
inline const std::string& SchemaDetails::_internal_lmdescriptionfile() const {
  return lmdescriptionfile_.Get();
}
inline void SchemaDetails::_internal_set_lmdescriptionfile(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaDetails::set_lmdescriptionfile(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  lmdescriptionfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaDetails.lmDescriptionFile)
}
inline void SchemaDetails::set_lmdescriptionfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.lmDescriptionFile)
}
inline void SchemaDetails::set_lmdescriptionfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.lmDescriptionFile)
}
inline std::string* SchemaDetails::_internal_mutable_lmdescriptionfile() {
  _has_bits_[0] |= 0x00000008u;
  return lmdescriptionfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaDetails::release_lmdescriptionfile() {
  // @@protoc_insertion_point(field_release:Proto.SchemaDetails.lmDescriptionFile)
  if (!_internal_has_lmdescriptionfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return lmdescriptionfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaDetails::set_allocated_lmdescriptionfile(std::string* lmdescriptionfile) {
  if (lmdescriptionfile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lmdescriptionfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmdescriptionfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaDetails.lmDescriptionFile)
}

// optional string path = 9;
inline bool SchemaDetails::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchemaDetails::has_path() const {
  return _internal_has_path();
}
inline void SchemaDetails::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SchemaDetails::path() const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.path)
  return _internal_path();
}
inline void SchemaDetails::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.path)
}
inline std::string* SchemaDetails::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.path)
  return _internal_mutable_path();
}
inline const std::string& SchemaDetails::_internal_path() const {
  return path_.Get();
}
inline void SchemaDetails::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchemaDetails::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SchemaDetails.path)
}
inline void SchemaDetails::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.path)
}
inline void SchemaDetails::set_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.path)
}
inline std::string* SchemaDetails::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000010u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchemaDetails::release_path() {
  // @@protoc_insertion_point(field_release:Proto.SchemaDetails.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchemaDetails::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SchemaDetails.path)
}

// repeated string signalIds = 20;
inline int SchemaDetails::_internal_signalids_size() const {
  return signalids_.size();
}
inline int SchemaDetails::signalids_size() const {
  return _internal_signalids_size();
}
inline void SchemaDetails::clear_signalids() {
  signalids_.Clear();
}
inline std::string* SchemaDetails::add_signalids() {
  // @@protoc_insertion_point(field_add_mutable:Proto.SchemaDetails.signalIds)
  return _internal_add_signalids();
}
inline const std::string& SchemaDetails::_internal_signalids(int index) const {
  return signalids_.Get(index);
}
inline const std::string& SchemaDetails::signalids(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.signalIds)
  return _internal_signalids(index);
}
inline std::string* SchemaDetails::mutable_signalids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.signalIds)
  return signalids_.Mutable(index);
}
inline void SchemaDetails::set_signalids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.signalIds)
  signalids_.Mutable(index)->assign(value);
}
inline void SchemaDetails::set_signalids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.signalIds)
  signalids_.Mutable(index)->assign(std::move(value));
}
inline void SchemaDetails::set_signalids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signalids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.signalIds)
}
inline void SchemaDetails::set_signalids(int index, const char* value, size_t size) {
  signalids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.signalIds)
}
inline std::string* SchemaDetails::_internal_add_signalids() {
  return signalids_.Add();
}
inline void SchemaDetails::add_signalids(const std::string& value) {
  signalids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.signalIds)
}
inline void SchemaDetails::add_signalids(std::string&& value) {
  signalids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.signalIds)
}
inline void SchemaDetails::add_signalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signalids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.SchemaDetails.signalIds)
}
inline void SchemaDetails::add_signalids(const char* value, size_t size) {
  signalids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.SchemaDetails.signalIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SchemaDetails::signalids() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetails.signalIds)
  return signalids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SchemaDetails::mutable_signalids() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetails.signalIds)
  return &signalids_;
}

// repeated string labels = 21;
inline int SchemaDetails::_internal_labels_size() const {
  return labels_.size();
}
inline int SchemaDetails::labels_size() const {
  return _internal_labels_size();
}
inline void SchemaDetails::clear_labels() {
  labels_.Clear();
}
inline std::string* SchemaDetails::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:Proto.SchemaDetails.labels)
  return _internal_add_labels();
}
inline const std::string& SchemaDetails::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& SchemaDetails::labels(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.labels)
  return _internal_labels(index);
}
inline std::string* SchemaDetails::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.labels)
  return labels_.Mutable(index);
}
inline void SchemaDetails::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.labels)
  labels_.Mutable(index)->assign(value);
}
inline void SchemaDetails::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void SchemaDetails::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.labels)
}
inline void SchemaDetails::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.labels)
}
inline std::string* SchemaDetails::_internal_add_labels() {
  return labels_.Add();
}
inline void SchemaDetails::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.labels)
}
inline void SchemaDetails::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.labels)
}
inline void SchemaDetails::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.SchemaDetails.labels)
}
inline void SchemaDetails::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.SchemaDetails.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SchemaDetails::labels() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetails.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SchemaDetails::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetails.labels)
  return &labels_;
}

// repeated string connections = 22;
inline int SchemaDetails::_internal_connections_size() const {
  return connections_.size();
}
inline int SchemaDetails::connections_size() const {
  return _internal_connections_size();
}
inline void SchemaDetails::clear_connections() {
  connections_.Clear();
}
inline std::string* SchemaDetails::add_connections() {
  // @@protoc_insertion_point(field_add_mutable:Proto.SchemaDetails.connections)
  return _internal_add_connections();
}
inline const std::string& SchemaDetails::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const std::string& SchemaDetails::connections(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.connections)
  return _internal_connections(index);
}
inline std::string* SchemaDetails::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.connections)
  return connections_.Mutable(index);
}
inline void SchemaDetails::set_connections(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.connections)
  connections_.Mutable(index)->assign(value);
}
inline void SchemaDetails::set_connections(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.connections)
  connections_.Mutable(index)->assign(std::move(value));
}
inline void SchemaDetails::set_connections(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  connections_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.connections)
}
inline void SchemaDetails::set_connections(int index, const char* value, size_t size) {
  connections_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.connections)
}
inline std::string* SchemaDetails::_internal_add_connections() {
  return connections_.Add();
}
inline void SchemaDetails::add_connections(const std::string& value) {
  connections_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.connections)
}
inline void SchemaDetails::add_connections(std::string&& value) {
  connections_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.connections)
}
inline void SchemaDetails::add_connections(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  connections_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.SchemaDetails.connections)
}
inline void SchemaDetails::add_connections(const char* value, size_t size) {
  connections_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.SchemaDetails.connections)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SchemaDetails::connections() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetails.connections)
  return connections_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SchemaDetails::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetails.connections)
  return &connections_;
}

// repeated .Proto.Uuid guids = 23;
inline int SchemaDetails::_internal_guids_size() const {
  return guids_.size();
}
inline int SchemaDetails::guids_size() const {
  return _internal_guids_size();
}
inline void SchemaDetails::clear_guids() {
  guids_.Clear();
}
inline ::Proto::Uuid* SchemaDetails::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.guids)
  return guids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >*
SchemaDetails::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetails.guids)
  return &guids_;
}
inline const ::Proto::Uuid& SchemaDetails::_internal_guids(int index) const {
  return guids_.Get(index);
}
inline const ::Proto::Uuid& SchemaDetails::guids(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.guids)
  return _internal_guids(index);
}
inline ::Proto::Uuid* SchemaDetails::_internal_add_guids() {
  return guids_.Add();
}
inline ::Proto::Uuid* SchemaDetails::add_guids() {
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.guids)
  return _internal_add_guids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Uuid >&
SchemaDetails::guids() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetails.guids)
  return guids_;
}

// repeated string tags = 24;
inline int SchemaDetails::_internal_tags_size() const {
  return tags_.size();
}
inline int SchemaDetails::tags_size() const {
  return _internal_tags_size();
}
inline void SchemaDetails::clear_tags() {
  tags_.Clear();
}
inline std::string* SchemaDetails::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:Proto.SchemaDetails.tags)
  return _internal_add_tags();
}
inline const std::string& SchemaDetails::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& SchemaDetails::tags(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.tags)
  return _internal_tags(index);
}
inline std::string* SchemaDetails::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.tags)
  return tags_.Mutable(index);
}
inline void SchemaDetails::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.tags)
  tags_.Mutable(index)->assign(value);
}
inline void SchemaDetails::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void SchemaDetails::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.tags)
}
inline void SchemaDetails::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.tags)
}
inline std::string* SchemaDetails::_internal_add_tags() {
  return tags_.Add();
}
inline void SchemaDetails::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.tags)
}
inline void SchemaDetails::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.tags)
}
inline void SchemaDetails::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.SchemaDetails.tags)
}
inline void SchemaDetails::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.SchemaDetails.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SchemaDetails::tags() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetails.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SchemaDetails::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetails.tags)
  return &tags_;
}

// repeated string loopbacks = 25;
inline int SchemaDetails::_internal_loopbacks_size() const {
  return loopbacks_.size();
}
inline int SchemaDetails::loopbacks_size() const {
  return _internal_loopbacks_size();
}
inline void SchemaDetails::clear_loopbacks() {
  loopbacks_.Clear();
}
inline std::string* SchemaDetails::add_loopbacks() {
  // @@protoc_insertion_point(field_add_mutable:Proto.SchemaDetails.loopbacks)
  return _internal_add_loopbacks();
}
inline const std::string& SchemaDetails::_internal_loopbacks(int index) const {
  return loopbacks_.Get(index);
}
inline const std::string& SchemaDetails::loopbacks(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SchemaDetails.loopbacks)
  return _internal_loopbacks(index);
}
inline std::string* SchemaDetails::mutable_loopbacks(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SchemaDetails.loopbacks)
  return loopbacks_.Mutable(index);
}
inline void SchemaDetails::set_loopbacks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.loopbacks)
  loopbacks_.Mutable(index)->assign(value);
}
inline void SchemaDetails::set_loopbacks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Proto.SchemaDetails.loopbacks)
  loopbacks_.Mutable(index)->assign(std::move(value));
}
inline void SchemaDetails::set_loopbacks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loopbacks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.SchemaDetails.loopbacks)
}
inline void SchemaDetails::set_loopbacks(int index, const char* value, size_t size) {
  loopbacks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.SchemaDetails.loopbacks)
}
inline std::string* SchemaDetails::_internal_add_loopbacks() {
  return loopbacks_.Add();
}
inline void SchemaDetails::add_loopbacks(const std::string& value) {
  loopbacks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.loopbacks)
}
inline void SchemaDetails::add_loopbacks(std::string&& value) {
  loopbacks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.SchemaDetails.loopbacks)
}
inline void SchemaDetails::add_loopbacks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loopbacks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.SchemaDetails.loopbacks)
}
inline void SchemaDetails::add_loopbacks(const char* value, size_t size) {
  loopbacks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.SchemaDetails.loopbacks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SchemaDetails::loopbacks() const {
  // @@protoc_insertion_point(field_list:Proto.SchemaDetails.loopbacks)
  return loopbacks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SchemaDetails::mutable_loopbacks() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SchemaDetails.loopbacks)
  return &loopbacks_;
}

// -------------------------------------------------------------------

// ArchSignal

// required uint64 hash = 1;
inline bool ArchSignal::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArchSignal::has_hash() const {
  return _internal_has_hash();
}
inline void ArchSignal::clear_hash() {
  hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchSignal::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchSignal::hash() const {
  // @@protoc_insertion_point(field_get:Proto.ArchSignal.hash)
  return _internal_hash();
}
inline void ArchSignal::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  hash_ = value;
}
inline void ArchSignal::set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Proto.ArchSignal.hash)
}

// required bool isAnalog = 2;
inline bool ArchSignal::_internal_has_isanalog() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArchSignal::has_isanalog() const {
  return _internal_has_isanalog();
}
inline void ArchSignal::clear_isanalog() {
  isanalog_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ArchSignal::_internal_isanalog() const {
  return isanalog_;
}
inline bool ArchSignal::isanalog() const {
  // @@protoc_insertion_point(field_get:Proto.ArchSignal.isAnalog)
  return _internal_isanalog();
}
inline void ArchSignal::_internal_set_isanalog(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isanalog_ = value;
}
inline void ArchSignal::set_isanalog(bool value) {
  _internal_set_isanalog(value);
  // @@protoc_insertion_point(field_set:Proto.ArchSignal.isAnalog)
}

// required string appSignalID = 3;
inline bool ArchSignal::_internal_has_appsignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArchSignal::has_appsignalid() const {
  return _internal_has_appsignalid();
}
inline void ArchSignal::clear_appsignalid() {
  appsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArchSignal::appsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.ArchSignal.appSignalID)
  return _internal_appsignalid();
}
inline void ArchSignal::set_appsignalid(const std::string& value) {
  _internal_set_appsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.ArchSignal.appSignalID)
}
inline std::string* ArchSignal::mutable_appsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.ArchSignal.appSignalID)
  return _internal_mutable_appsignalid();
}
inline const std::string& ArchSignal::_internal_appsignalid() const {
  return appsignalid_.Get();
}
inline void ArchSignal::_internal_set_appsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArchSignal::set_appsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ArchSignal.appSignalID)
}
inline void ArchSignal::set_appsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ArchSignal.appSignalID)
}
inline void ArchSignal::set_appsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ArchSignal.appSignalID)
}
inline std::string* ArchSignal::_internal_mutable_appsignalid() {
  _has_bits_[0] |= 0x00000001u;
  return appsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArchSignal::release_appsignalid() {
  // @@protoc_insertion_point(field_release:Proto.ArchSignal.appSignalID)
  if (!_internal_has_appsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchSignal::set_allocated_appsignalid(std::string* appsignalid) {
  if (appsignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ArchSignal.appSignalID)
}

// -------------------------------------------------------------------

// ArchSignals

// repeated .Proto.ArchSignal archSignals = 1;
inline int ArchSignals::_internal_archsignals_size() const {
  return archsignals_.size();
}
inline int ArchSignals::archsignals_size() const {
  return _internal_archsignals_size();
}
inline void ArchSignals::clear_archsignals() {
  archsignals_.Clear();
}
inline ::Proto::ArchSignal* ArchSignals::mutable_archsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ArchSignals.archSignals)
  return archsignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ArchSignal >*
ArchSignals::mutable_archsignals() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ArchSignals.archSignals)
  return &archsignals_;
}
inline const ::Proto::ArchSignal& ArchSignals::_internal_archsignals(int index) const {
  return archsignals_.Get(index);
}
inline const ::Proto::ArchSignal& ArchSignals::archsignals(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ArchSignals.archSignals)
  return _internal_archsignals(index);
}
inline ::Proto::ArchSignal* ArchSignals::_internal_add_archsignals() {
  return archsignals_.Add();
}
inline ::Proto::ArchSignal* ArchSignals::add_archsignals() {
  // @@protoc_insertion_point(field_add:Proto.ArchSignals.archSignals)
  return _internal_add_archsignals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ArchSignal >&
ArchSignals::archsignals() const {
  // @@protoc_insertion_point(field_list:Proto.ArchSignals.archSignals)
  return archsignals_;
}

// -------------------------------------------------------------------

// BusSignal

// optional string signalId = 1;
inline bool BusSignal::_internal_has_signalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BusSignal::has_signalid() const {
  return _internal_has_signalid();
}
inline void BusSignal::clear_signalid() {
  signalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BusSignal::signalid() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.signalId)
  return _internal_signalid();
}
inline void BusSignal::set_signalid(const std::string& value) {
  _internal_set_signalid(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.signalId)
}
inline std::string* BusSignal::mutable_signalid() {
  // @@protoc_insertion_point(field_mutable:Proto.BusSignal.signalId)
  return _internal_mutable_signalid();
}
inline const std::string& BusSignal::_internal_signalid() const {
  return signalid_.Get();
}
inline void BusSignal::_internal_set_signalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusSignal::set_signalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.BusSignal.signalId)
}
inline void BusSignal::set_signalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.BusSignal.signalId)
}
inline void BusSignal::set_signalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.BusSignal.signalId)
}
inline std::string* BusSignal::_internal_mutable_signalid() {
  _has_bits_[0] |= 0x00000001u;
  return signalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusSignal::release_signalid() {
  // @@protoc_insertion_point(field_release:Proto.BusSignal.signalId)
  if (!_internal_has_signalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusSignal::set_allocated_signalid(std::string* signalid) {
  if (signalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.BusSignal.signalId)
}

// optional string caption = 2;
inline bool BusSignal::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BusSignal::has_caption() const {
  return _internal_has_caption();
}
inline void BusSignal::clear_caption() {
  caption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BusSignal::caption() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.caption)
  return _internal_caption();
}
inline void BusSignal::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.caption)
}
inline std::string* BusSignal::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:Proto.BusSignal.caption)
  return _internal_mutable_caption();
}
inline const std::string& BusSignal::_internal_caption() const {
  return caption_.Get();
}
inline void BusSignal::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusSignal::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.BusSignal.caption)
}
inline void BusSignal::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.BusSignal.caption)
}
inline void BusSignal::set_caption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.BusSignal.caption)
}
inline std::string* BusSignal::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000002u;
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusSignal::release_caption() {
  // @@protoc_insertion_point(field_release:Proto.BusSignal.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return caption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusSignal::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.BusSignal.caption)
}

// optional int32 type = 3;
inline bool BusSignal::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BusSignal::has_type() const {
  return _internal_has_type();
}
inline void BusSignal::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::type() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.type)
  return _internal_type();
}
inline void BusSignal::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void BusSignal::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.type)
}

// optional string units = 4;
inline bool BusSignal::_internal_has_units() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BusSignal::has_units() const {
  return _internal_has_units();
}
inline void BusSignal::clear_units() {
  units_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BusSignal::units() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.units)
  return _internal_units();
}
inline void BusSignal::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.units)
}
inline std::string* BusSignal::mutable_units() {
  // @@protoc_insertion_point(field_mutable:Proto.BusSignal.units)
  return _internal_mutable_units();
}
inline const std::string& BusSignal::_internal_units() const {
  return units_.Get();
}
inline void BusSignal::_internal_set_units(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusSignal::set_units(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  units_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.BusSignal.units)
}
inline void BusSignal::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.BusSignal.units)
}
inline void BusSignal::set_units(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.BusSignal.units)
}
inline std::string* BusSignal::_internal_mutable_units() {
  _has_bits_[0] |= 0x00000004u;
  return units_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusSignal::release_units() {
  // @@protoc_insertion_point(field_release:Proto.BusSignal.units)
  if (!_internal_has_units()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return units_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusSignal::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.BusSignal.units)
}

// optional int32 analogFormat = 10;
inline bool BusSignal::_internal_has_analogformat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BusSignal::has_analogformat() const {
  return _internal_has_analogformat();
}
inline void BusSignal::clear_analogformat() {
  analogformat_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_analogformat() const {
  return analogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::analogformat() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.analogFormat)
  return _internal_analogformat();
}
inline void BusSignal::_internal_set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  analogformat_ = value;
}
inline void BusSignal::set_analogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogformat(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.analogFormat)
}

// optional int32 precision = 11 [default = 2];
inline bool BusSignal::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BusSignal::has_precision() const {
  return _internal_has_precision();
}
inline void BusSignal::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::precision() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.precision)
  return _internal_precision();
}
inline void BusSignal::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  precision_ = value;
}
inline void BusSignal::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.precision)
}

// optional double coarseAperture = 12 [default = 1];
inline bool BusSignal::_internal_has_coarseaperture() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BusSignal::has_coarseaperture() const {
  return _internal_has_coarseaperture();
}
inline void BusSignal::clear_coarseaperture() {
  coarseaperture_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline double BusSignal::_internal_coarseaperture() const {
  return coarseaperture_;
}
inline double BusSignal::coarseaperture() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.coarseAperture)
  return _internal_coarseaperture();
}
inline void BusSignal::_internal_set_coarseaperture(double value) {
  _has_bits_[0] |= 0x00020000u;
  coarseaperture_ = value;
}
inline void BusSignal::set_coarseaperture(double value) {
  _internal_set_coarseaperture(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.coarseAperture)
}

// optional double fineAperture = 13 [default = 0.5];
inline bool BusSignal::_internal_has_fineaperture() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool BusSignal::has_fineaperture() const {
  return _internal_has_fineaperture();
}
inline void BusSignal::clear_fineaperture() {
  fineaperture_ = 0.5;
  _has_bits_[0] &= ~0x00040000u;
}
inline double BusSignal::_internal_fineaperture() const {
  return fineaperture_;
}
inline double BusSignal::fineaperture() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.fineAperture)
  return _internal_fineaperture();
}
inline void BusSignal::_internal_set_fineaperture(double value) {
  _has_bits_[0] |= 0x00040000u;
  fineaperture_ = value;
}
inline void BusSignal::set_fineaperture(double value) {
  _internal_set_fineaperture(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.fineAperture)
}

// optional bool adaptiveAperture = 14 [default = false];
inline bool BusSignal::_internal_has_adaptiveaperture() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BusSignal::has_adaptiveaperture() const {
  return _internal_has_adaptiveaperture();
}
inline void BusSignal::clear_adaptiveaperture() {
  adaptiveaperture_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BusSignal::_internal_adaptiveaperture() const {
  return adaptiveaperture_;
}
inline bool BusSignal::adaptiveaperture() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.adaptiveAperture)
  return _internal_adaptiveaperture();
}
inline void BusSignal::_internal_set_adaptiveaperture(bool value) {
  _has_bits_[0] |= 0x00000040u;
  adaptiveaperture_ = value;
}
inline void BusSignal::set_adaptiveaperture(bool value) {
  _internal_set_adaptiveaperture(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.adaptiveAperture)
}

// optional string busTypeId = 15;
inline bool BusSignal::_internal_has_bustypeid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BusSignal::has_bustypeid() const {
  return _internal_has_bustypeid();
}
inline void BusSignal::clear_bustypeid() {
  bustypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BusSignal::bustypeid() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.busTypeId)
  return _internal_bustypeid();
}
inline void BusSignal::set_bustypeid(const std::string& value) {
  _internal_set_bustypeid(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.busTypeId)
}
inline std::string* BusSignal::mutable_bustypeid() {
  // @@protoc_insertion_point(field_mutable:Proto.BusSignal.busTypeId)
  return _internal_mutable_bustypeid();
}
inline const std::string& BusSignal::_internal_bustypeid() const {
  return bustypeid_.Get();
}
inline void BusSignal::_internal_set_bustypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusSignal::set_bustypeid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  bustypeid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.BusSignal.busTypeId)
}
inline void BusSignal::set_bustypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.BusSignal.busTypeId)
}
inline void BusSignal::set_bustypeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.BusSignal.busTypeId)
}
inline std::string* BusSignal::_internal_mutable_bustypeid() {
  _has_bits_[0] |= 0x00000008u;
  return bustypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusSignal::release_bustypeid() {
  // @@protoc_insertion_point(field_release:Proto.BusSignal.busTypeId)
  if (!_internal_has_bustypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return bustypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusSignal::set_allocated_bustypeid(std::string* bustypeid) {
  if (bustypeid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bustypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bustypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.BusSignal.busTypeId)
}

// optional int32 inbusOffset = 32;
inline bool BusSignal::_internal_has_inbusoffset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BusSignal::has_inbusoffset() const {
  return _internal_has_inbusoffset();
}
inline void BusSignal::clear_inbusoffset() {
  inbusoffset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_inbusoffset() const {
  return inbusoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::inbusoffset() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusOffset)
  return _internal_inbusoffset();
}
inline void BusSignal::_internal_set_inbusoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  inbusoffset_ = value;
}
inline void BusSignal::set_inbusoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inbusoffset(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusOffset)
}

// optional int32 inbusDiscreteBitNo = 40;
inline bool BusSignal::_internal_has_inbusdiscretebitno() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BusSignal::has_inbusdiscretebitno() const {
  return _internal_has_inbusdiscretebitno();
}
inline void BusSignal::clear_inbusdiscretebitno() {
  inbusdiscretebitno_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_inbusdiscretebitno() const {
  return inbusdiscretebitno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::inbusdiscretebitno() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusDiscreteBitNo)
  return _internal_inbusdiscretebitno();
}
inline void BusSignal::_internal_set_inbusdiscretebitno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  inbusdiscretebitno_ = value;
}
inline void BusSignal::set_inbusdiscretebitno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inbusdiscretebitno(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusDiscreteBitNo)
}

// optional int32 inbusAnalogSize = 50;
inline bool BusSignal::_internal_has_inbusanalogsize() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BusSignal::has_inbusanalogsize() const {
  return _internal_has_inbusanalogsize();
}
inline void BusSignal::clear_inbusanalogsize() {
  inbusanalogsize_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_inbusanalogsize() const {
  return inbusanalogsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::inbusanalogsize() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusAnalogSize)
  return _internal_inbusanalogsize();
}
inline void BusSignal::_internal_set_inbusanalogsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  inbusanalogsize_ = value;
}
inline void BusSignal::set_inbusanalogsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inbusanalogsize(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusAnalogSize)
}

// optional int32 inbusAnalogFormat = 51;
inline bool BusSignal::_internal_has_inbusanalogformat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BusSignal::has_inbusanalogformat() const {
  return _internal_has_inbusanalogformat();
}
inline void BusSignal::clear_inbusanalogformat() {
  inbusanalogformat_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_inbusanalogformat() const {
  return inbusanalogformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::inbusanalogformat() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusAnalogFormat)
  return _internal_inbusanalogformat();
}
inline void BusSignal::_internal_set_inbusanalogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  inbusanalogformat_ = value;
}
inline void BusSignal::set_inbusanalogformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inbusanalogformat(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusAnalogFormat)
}

// optional int32 inbusAnalogByteOrder = 52;
inline bool BusSignal::_internal_has_inbusanalogbyteorder() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BusSignal::has_inbusanalogbyteorder() const {
  return _internal_has_inbusanalogbyteorder();
}
inline void BusSignal::clear_inbusanalogbyteorder() {
  inbusanalogbyteorder_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::_internal_inbusanalogbyteorder() const {
  return inbusanalogbyteorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusSignal::inbusanalogbyteorder() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusAnalogByteOrder)
  return _internal_inbusanalogbyteorder();
}
inline void BusSignal::_internal_set_inbusanalogbyteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  inbusanalogbyteorder_ = value;
}
inline void BusSignal::set_inbusanalogbyteorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inbusanalogbyteorder(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusAnalogByteOrder)
}

// optional double busAnalogLowLimit = 53;
inline bool BusSignal::_internal_has_busanaloglowlimit() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BusSignal::has_busanaloglowlimit() const {
  return _internal_has_busanaloglowlimit();
}
inline void BusSignal::clear_busanaloglowlimit() {
  busanaloglowlimit_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double BusSignal::_internal_busanaloglowlimit() const {
  return busanaloglowlimit_;
}
inline double BusSignal::busanaloglowlimit() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.busAnalogLowLimit)
  return _internal_busanaloglowlimit();
}
inline void BusSignal::_internal_set_busanaloglowlimit(double value) {
  _has_bits_[0] |= 0x00001000u;
  busanaloglowlimit_ = value;
}
inline void BusSignal::set_busanaloglowlimit(double value) {
  _internal_set_busanaloglowlimit(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.busAnalogLowLimit)
}

// optional double busAnalogHighLimit = 54;
inline bool BusSignal::_internal_has_busanaloghighlimit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BusSignal::has_busanaloghighlimit() const {
  return _internal_has_busanaloghighlimit();
}
inline void BusSignal::clear_busanaloghighlimit() {
  busanaloghighlimit_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double BusSignal::_internal_busanaloghighlimit() const {
  return busanaloghighlimit_;
}
inline double BusSignal::busanaloghighlimit() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.busAnalogHighLimit)
  return _internal_busanaloghighlimit();
}
inline void BusSignal::_internal_set_busanaloghighlimit(double value) {
  _has_bits_[0] |= 0x00002000u;
  busanaloghighlimit_ = value;
}
inline void BusSignal::set_busanaloghighlimit(double value) {
  _internal_set_busanaloghighlimit(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.busAnalogHighLimit)
}

// optional double inbusAnalogLowLimit = 55;
inline bool BusSignal::_internal_has_inbusanaloglowlimit() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BusSignal::has_inbusanaloglowlimit() const {
  return _internal_has_inbusanaloglowlimit();
}
inline void BusSignal::clear_inbusanaloglowlimit() {
  inbusanaloglowlimit_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double BusSignal::_internal_inbusanaloglowlimit() const {
  return inbusanaloglowlimit_;
}
inline double BusSignal::inbusanaloglowlimit() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusAnalogLowLimit)
  return _internal_inbusanaloglowlimit();
}
inline void BusSignal::_internal_set_inbusanaloglowlimit(double value) {
  _has_bits_[0] |= 0x00004000u;
  inbusanaloglowlimit_ = value;
}
inline void BusSignal::set_inbusanaloglowlimit(double value) {
  _internal_set_inbusanaloglowlimit(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusAnalogLowLimit)
}

// optional double inbusAnalogHighLimit = 56;
inline bool BusSignal::_internal_has_inbusanaloghighlimit() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BusSignal::has_inbusanaloghighlimit() const {
  return _internal_has_inbusanaloghighlimit();
}
inline void BusSignal::clear_inbusanaloghighlimit() {
  inbusanaloghighlimit_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double BusSignal::_internal_inbusanaloghighlimit() const {
  return inbusanaloghighlimit_;
}
inline double BusSignal::inbusanaloghighlimit() const {
  // @@protoc_insertion_point(field_get:Proto.BusSignal.inbusAnalogHighLimit)
  return _internal_inbusanaloghighlimit();
}
inline void BusSignal::_internal_set_inbusanaloghighlimit(double value) {
  _has_bits_[0] |= 0x00008000u;
  inbusanaloghighlimit_ = value;
}
inline void BusSignal::set_inbusanaloghighlimit(double value) {
  _internal_set_inbusanaloghighlimit(value);
  // @@protoc_insertion_point(field_set:Proto.BusSignal.inbusAnalogHighLimit)
}

// -------------------------------------------------------------------

// Bus

// optional .Proto.Uuid uuid = 1;
inline bool Bus::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool Bus::has_uuid() const {
  return _internal_has_uuid();
}
inline void Bus::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::Uuid& Bus::_internal_uuid() const {
  const ::Proto::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& Bus::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.Bus.uuid)
  return _internal_uuid();
}
inline void Bus::unsafe_arena_set_allocated_uuid(
    ::Proto::Uuid* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Bus.uuid)
}
inline ::Proto::Uuid* Bus::release_uuid() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* Bus::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.Bus.uuid)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* Bus::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000002u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::Proto::Uuid* Bus::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Proto.Bus.uuid)
  return _internal_mutable_uuid();
}
inline void Bus::set_allocated_uuid(::Proto::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Bus.uuid)
}

// optional string busTypeId = 2;
inline bool Bus::_internal_has_bustypeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bus::has_bustypeid() const {
  return _internal_has_bustypeid();
}
inline void Bus::clear_bustypeid() {
  bustypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Bus::bustypeid() const {
  // @@protoc_insertion_point(field_get:Proto.Bus.busTypeId)
  return _internal_bustypeid();
}
inline void Bus::set_bustypeid(const std::string& value) {
  _internal_set_bustypeid(value);
  // @@protoc_insertion_point(field_set:Proto.Bus.busTypeId)
}
inline std::string* Bus::mutable_bustypeid() {
  // @@protoc_insertion_point(field_mutable:Proto.Bus.busTypeId)
  return _internal_mutable_bustypeid();
}
inline const std::string& Bus::_internal_bustypeid() const {
  return bustypeid_.Get();
}
inline void Bus::_internal_set_bustypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bus::set_bustypeid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Bus.busTypeId)
}
inline void Bus::set_bustypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Bus.busTypeId)
}
inline void Bus::set_bustypeid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Bus.busTypeId)
}
inline std::string* Bus::_internal_mutable_bustypeid() {
  _has_bits_[0] |= 0x00000001u;
  return bustypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bus::release_bustypeid() {
  // @@protoc_insertion_point(field_release:Proto.Bus.busTypeId)
  if (!_internal_has_bustypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bustypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bus::set_allocated_bustypeid(std::string* bustypeid) {
  if (bustypeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bustypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bustypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Bus.busTypeId)
}

// repeated .Proto.BusSignal busSignals = 3;
inline int Bus::_internal_bussignals_size() const {
  return bussignals_.size();
}
inline int Bus::bussignals_size() const {
  return _internal_bussignals_size();
}
inline void Bus::clear_bussignals() {
  bussignals_.Clear();
}
inline ::Proto::BusSignal* Bus::mutable_bussignals(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Bus.busSignals)
  return bussignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BusSignal >*
Bus::mutable_bussignals() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Bus.busSignals)
  return &bussignals_;
}
inline const ::Proto::BusSignal& Bus::_internal_bussignals(int index) const {
  return bussignals_.Get(index);
}
inline const ::Proto::BusSignal& Bus::bussignals(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Bus.busSignals)
  return _internal_bussignals(index);
}
inline ::Proto::BusSignal* Bus::_internal_add_bussignals() {
  return bussignals_.Add();
}
inline ::Proto::BusSignal* Bus::add_bussignals() {
  // @@protoc_insertion_point(field_add:Proto.Bus.busSignals)
  return _internal_add_bussignals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BusSignal >&
Bus::bussignals() const {
  // @@protoc_insertion_point(field_list:Proto.Bus.busSignals)
  return bussignals_;
}

// optional bool autoSignalPlacement = 10 [default = true];
inline bool Bus::_internal_has_autosignalplacement() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Bus::has_autosignalplacement() const {
  return _internal_has_autosignalplacement();
}
inline void Bus::clear_autosignalplacement() {
  autosignalplacement_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Bus::_internal_autosignalplacement() const {
  return autosignalplacement_;
}
inline bool Bus::autosignalplacement() const {
  // @@protoc_insertion_point(field_get:Proto.Bus.autoSignalPlacement)
  return _internal_autosignalplacement();
}
inline void Bus::_internal_set_autosignalplacement(bool value) {
  _has_bits_[0] |= 0x00000010u;
  autosignalplacement_ = value;
}
inline void Bus::set_autosignalplacement(bool value) {
  _internal_set_autosignalplacement(value);
  // @@protoc_insertion_point(field_set:Proto.Bus.autoSignalPlacement)
}

// optional int32 manualBusSize = 11 [default = 0];
inline bool Bus::_internal_has_manualbussize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bus::has_manualbussize() const {
  return _internal_has_manualbussize();
}
inline void Bus::clear_manualbussize() {
  manualbussize_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bus::_internal_manualbussize() const {
  return manualbussize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bus::manualbussize() const {
  // @@protoc_insertion_point(field_get:Proto.Bus.manualBusSize)
  return _internal_manualbussize();
}
inline void Bus::_internal_set_manualbussize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  manualbussize_ = value;
}
inline void Bus::set_manualbussize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manualbussize(value);
  // @@protoc_insertion_point(field_set:Proto.Bus.manualBusSize)
}

// optional bool enableManualBusSize = 12 [default = false];
inline bool Bus::_internal_has_enablemanualbussize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bus::has_enablemanualbussize() const {
  return _internal_has_enablemanualbussize();
}
inline void Bus::clear_enablemanualbussize() {
  enablemanualbussize_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Bus::_internal_enablemanualbussize() const {
  return enablemanualbussize_;
}
inline bool Bus::enablemanualbussize() const {
  // @@protoc_insertion_point(field_get:Proto.Bus.enableManualBusSize)
  return _internal_enablemanualbussize();
}
inline void Bus::_internal_set_enablemanualbussize(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enablemanualbussize_ = value;
}
inline void Bus::set_enablemanualbussize(bool value) {
  _internal_set_enablemanualbussize(value);
  // @@protoc_insertion_point(field_set:Proto.Bus.enableManualBusSize)
}

// optional bool enableManualBusSizeIsNotInitialized = 13 [default = true];
inline bool Bus::_internal_has_enablemanualbussizeisnotinitialized() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Bus::has_enablemanualbussizeisnotinitialized() const {
  return _internal_has_enablemanualbussizeisnotinitialized();
}
inline void Bus::clear_enablemanualbussizeisnotinitialized() {
  enablemanualbussizeisnotinitialized_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Bus::_internal_enablemanualbussizeisnotinitialized() const {
  return enablemanualbussizeisnotinitialized_;
}
inline bool Bus::enablemanualbussizeisnotinitialized() const {
  // @@protoc_insertion_point(field_get:Proto.Bus.enableManualBusSizeIsNotInitialized)
  return _internal_enablemanualbussizeisnotinitialized();
}
inline void Bus::_internal_set_enablemanualbussizeisnotinitialized(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enablemanualbussizeisnotinitialized_ = value;
}
inline void Bus::set_enablemanualbussizeisnotinitialized(bool value) {
  _internal_set_enablemanualbussizeisnotinitialized(value);
  // @@protoc_insertion_point(field_set:Proto.Bus.enableManualBusSizeIsNotInitialized)
}

// -------------------------------------------------------------------

// ComparatorSignal

// optional bool isConst = 1 [default = true];
inline bool ComparatorSignal::_internal_has_isconst() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComparatorSignal::has_isconst() const {
  return _internal_has_isconst();
}
inline void ComparatorSignal::clear_isconst() {
  isconst_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ComparatorSignal::_internal_isconst() const {
  return isconst_;
}
inline bool ComparatorSignal::isconst() const {
  // @@protoc_insertion_point(field_get:Proto.ComparatorSignal.isConst)
  return _internal_isconst();
}
inline void ComparatorSignal::_internal_set_isconst(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isconst_ = value;
}
inline void ComparatorSignal::set_isconst(bool value) {
  _internal_set_isconst(value);
  // @@protoc_insertion_point(field_set:Proto.ComparatorSignal.isConst)
}

// optional double constValue = 2 [default = 0];
inline bool ComparatorSignal::_internal_has_constvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComparatorSignal::has_constvalue() const {
  return _internal_has_constvalue();
}
inline void ComparatorSignal::clear_constvalue() {
  constvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ComparatorSignal::_internal_constvalue() const {
  return constvalue_;
}
inline double ComparatorSignal::constvalue() const {
  // @@protoc_insertion_point(field_get:Proto.ComparatorSignal.constValue)
  return _internal_constvalue();
}
inline void ComparatorSignal::_internal_set_constvalue(double value) {
  _has_bits_[0] |= 0x00000002u;
  constvalue_ = value;
}
inline void ComparatorSignal::set_constvalue(double value) {
  _internal_set_constvalue(value);
  // @@protoc_insertion_point(field_set:Proto.ComparatorSignal.constValue)
}

// optional string appSignalId = 3;
inline bool ComparatorSignal::_internal_has_appsignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComparatorSignal::has_appsignalid() const {
  return _internal_has_appsignalid();
}
inline void ComparatorSignal::clear_appsignalid() {
  appsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComparatorSignal::appsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.ComparatorSignal.appSignalId)
  return _internal_appsignalid();
}
inline void ComparatorSignal::set_appsignalid(const std::string& value) {
  _internal_set_appsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.ComparatorSignal.appSignalId)
}
inline std::string* ComparatorSignal::mutable_appsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.ComparatorSignal.appSignalId)
  return _internal_mutable_appsignalid();
}
inline const std::string& ComparatorSignal::_internal_appsignalid() const {
  return appsignalid_.Get();
}
inline void ComparatorSignal::_internal_set_appsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComparatorSignal::set_appsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.ComparatorSignal.appSignalId)
}
inline void ComparatorSignal::set_appsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.ComparatorSignal.appSignalId)
}
inline void ComparatorSignal::set_appsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.ComparatorSignal.appSignalId)
}
inline std::string* ComparatorSignal::_internal_mutable_appsignalid() {
  _has_bits_[0] |= 0x00000001u;
  return appsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComparatorSignal::release_appsignalid() {
  // @@protoc_insertion_point(field_release:Proto.ComparatorSignal.appSignalId)
  if (!_internal_has_appsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComparatorSignal::set_allocated_appsignalid(std::string* appsignalid) {
  if (appsignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.ComparatorSignal.appSignalId)
}

// optional bool isAcquired = 4 [default = false];
inline bool ComparatorSignal::_internal_has_isacquired() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComparatorSignal::has_isacquired() const {
  return _internal_has_isacquired();
}
inline void ComparatorSignal::clear_isacquired() {
  isacquired_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ComparatorSignal::_internal_isacquired() const {
  return isacquired_;
}
inline bool ComparatorSignal::isacquired() const {
  // @@protoc_insertion_point(field_get:Proto.ComparatorSignal.isAcquired)
  return _internal_isacquired();
}
inline void ComparatorSignal::_internal_set_isacquired(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isacquired_ = value;
}
inline void ComparatorSignal::set_isacquired(bool value) {
  _internal_set_isacquired(value);
  // @@protoc_insertion_point(field_set:Proto.ComparatorSignal.isAcquired)
}

// -------------------------------------------------------------------

// Comparator

// optional int32 cmpType = 1 [default = 1];
inline bool Comparator::_internal_has_cmptype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Comparator::has_cmptype() const {
  return _internal_has_cmptype();
}
inline void Comparator::clear_cmptype() {
  cmptype_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Comparator::_internal_cmptype() const {
  return cmptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Comparator::cmptype() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.cmpType)
  return _internal_cmptype();
}
inline void Comparator::_internal_set_cmptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  cmptype_ = value;
}
inline void Comparator::set_cmptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmptype(value);
  // @@protoc_insertion_point(field_set:Proto.Comparator.cmpType)
}

// optional int32 inAnalogSignalFormat = 2 [default = 1];
inline bool Comparator::_internal_has_inanalogsignalformat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Comparator::has_inanalogsignalformat() const {
  return _internal_has_inanalogsignalformat();
}
inline void Comparator::clear_inanalogsignalformat() {
  inanalogsignalformat_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Comparator::_internal_inanalogsignalformat() const {
  return inanalogsignalformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Comparator::inanalogsignalformat() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.inAnalogSignalFormat)
  return _internal_inanalogsignalformat();
}
inline void Comparator::_internal_set_inanalogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  inanalogsignalformat_ = value;
}
inline void Comparator::set_inanalogsignalformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inanalogsignalformat(value);
  // @@protoc_insertion_point(field_set:Proto.Comparator.inAnalogSignalFormat)
}

// optional .Proto.ComparatorSignal input = 3;
inline bool Comparator::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || input_ != nullptr);
  return value;
}
inline bool Comparator::has_input() const {
  return _internal_has_input();
}
inline void Comparator::clear_input() {
  if (input_ != nullptr) input_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::ComparatorSignal& Comparator::_internal_input() const {
  const ::Proto::ComparatorSignal* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::ComparatorSignal&>(
      ::Proto::_ComparatorSignal_default_instance_);
}
inline const ::Proto::ComparatorSignal& Comparator::input() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.input)
  return _internal_input();
}
inline void Comparator::unsafe_arena_set_allocated_input(
    ::Proto::ComparatorSignal* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Comparator.input)
}
inline ::Proto::ComparatorSignal* Comparator::release_input() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::ComparatorSignal* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.input)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::ComparatorSignal* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::_internal_mutable_input() {
  _has_bits_[0] |= 0x00000004u;
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ComparatorSignal>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::Proto::ComparatorSignal* Comparator::mutable_input() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.input)
  return _internal_mutable_input();
}
inline void Comparator::set_allocated_input(::Proto::ComparatorSignal* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.input)
}

// optional .Proto.ComparatorSignal compare = 4;
inline bool Comparator::_internal_has_compare() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || compare_ != nullptr);
  return value;
}
inline bool Comparator::has_compare() const {
  return _internal_has_compare();
}
inline void Comparator::clear_compare() {
  if (compare_ != nullptr) compare_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Proto::ComparatorSignal& Comparator::_internal_compare() const {
  const ::Proto::ComparatorSignal* p = compare_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::ComparatorSignal&>(
      ::Proto::_ComparatorSignal_default_instance_);
}
inline const ::Proto::ComparatorSignal& Comparator::compare() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.compare)
  return _internal_compare();
}
inline void Comparator::unsafe_arena_set_allocated_compare(
    ::Proto::ComparatorSignal* compare) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compare_);
  }
  compare_ = compare;
  if (compare) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Comparator.compare)
}
inline ::Proto::ComparatorSignal* Comparator::release_compare() {
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::ComparatorSignal* temp = compare_;
  compare_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::unsafe_arena_release_compare() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.compare)
  _has_bits_[0] &= ~0x00000008u;
  ::Proto::ComparatorSignal* temp = compare_;
  compare_ = nullptr;
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::_internal_mutable_compare() {
  _has_bits_[0] |= 0x00000008u;
  if (compare_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ComparatorSignal>(GetArena());
    compare_ = p;
  }
  return compare_;
}
inline ::Proto::ComparatorSignal* Comparator::mutable_compare() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.compare)
  return _internal_mutable_compare();
}
inline void Comparator::set_allocated_compare(::Proto::ComparatorSignal* compare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compare_;
  }
  if (compare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compare);
    if (message_arena != submessage_arena) {
      compare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compare, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  compare_ = compare;
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.compare)
}

// optional .Proto.ComparatorSignal hysteresis = 5;
inline bool Comparator::_internal_has_hysteresis() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || hysteresis_ != nullptr);
  return value;
}
inline bool Comparator::has_hysteresis() const {
  return _internal_has_hysteresis();
}
inline void Comparator::clear_hysteresis() {
  if (hysteresis_ != nullptr) hysteresis_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Proto::ComparatorSignal& Comparator::_internal_hysteresis() const {
  const ::Proto::ComparatorSignal* p = hysteresis_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::ComparatorSignal&>(
      ::Proto::_ComparatorSignal_default_instance_);
}
inline const ::Proto::ComparatorSignal& Comparator::hysteresis() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.hysteresis)
  return _internal_hysteresis();
}
inline void Comparator::unsafe_arena_set_allocated_hysteresis(
    ::Proto::ComparatorSignal* hysteresis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hysteresis_);
  }
  hysteresis_ = hysteresis;
  if (hysteresis) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Comparator.hysteresis)
}
inline ::Proto::ComparatorSignal* Comparator::release_hysteresis() {
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::ComparatorSignal* temp = hysteresis_;
  hysteresis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::unsafe_arena_release_hysteresis() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.hysteresis)
  _has_bits_[0] &= ~0x00000010u;
  ::Proto::ComparatorSignal* temp = hysteresis_;
  hysteresis_ = nullptr;
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::_internal_mutable_hysteresis() {
  _has_bits_[0] |= 0x00000010u;
  if (hysteresis_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ComparatorSignal>(GetArena());
    hysteresis_ = p;
  }
  return hysteresis_;
}
inline ::Proto::ComparatorSignal* Comparator::mutable_hysteresis() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.hysteresis)
  return _internal_mutable_hysteresis();
}
inline void Comparator::set_allocated_hysteresis(::Proto::ComparatorSignal* hysteresis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hysteresis_;
  }
  if (hysteresis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hysteresis);
    if (message_arena != submessage_arena) {
      hysteresis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hysteresis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hysteresis_ = hysteresis;
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.hysteresis)
}

// optional .Proto.ComparatorSignal output = 6;
inline bool Comparator::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || output_ != nullptr);
  return value;
}
inline bool Comparator::has_output() const {
  return _internal_has_output();
}
inline void Comparator::clear_output() {
  if (output_ != nullptr) output_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Proto::ComparatorSignal& Comparator::_internal_output() const {
  const ::Proto::ComparatorSignal* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::ComparatorSignal&>(
      ::Proto::_ComparatorSignal_default_instance_);
}
inline const ::Proto::ComparatorSignal& Comparator::output() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.output)
  return _internal_output();
}
inline void Comparator::unsafe_arena_set_allocated_output(
    ::Proto::ComparatorSignal* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Comparator.output)
}
inline ::Proto::ComparatorSignal* Comparator::release_output() {
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::ComparatorSignal* temp = output_;
  output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.output)
  _has_bits_[0] &= ~0x00000020u;
  ::Proto::ComparatorSignal* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::Proto::ComparatorSignal* Comparator::_internal_mutable_output() {
  _has_bits_[0] |= 0x00000020u;
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ComparatorSignal>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::Proto::ComparatorSignal* Comparator::mutable_output() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.output)
  return _internal_mutable_output();
}
inline void Comparator::set_allocated_output(::Proto::ComparatorSignal* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.output)
}

// optional bool allSignalsIsAcquired = 7 [default = false];
inline bool Comparator::_internal_has_allsignalsisacquired() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Comparator::has_allsignalsisacquired() const {
  return _internal_has_allsignalsisacquired();
}
inline void Comparator::clear_allsignalsisacquired() {
  allsignalsisacquired_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Comparator::_internal_allsignalsisacquired() const {
  return allsignalsisacquired_;
}
inline bool Comparator::allsignalsisacquired() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.allSignalsIsAcquired)
  return _internal_allsignalsisacquired();
}
inline void Comparator::_internal_set_allsignalsisacquired(bool value) {
  _has_bits_[0] |= 0x00000080u;
  allsignalsisacquired_ = value;
}
inline void Comparator::set_allsignalsisacquired(bool value) {
  _internal_set_allsignalsisacquired(value);
  // @@protoc_insertion_point(field_set:Proto.Comparator.allSignalsIsAcquired)
}

// optional int32 precision = 8 [default = 2];
inline bool Comparator::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Comparator::has_precision() const {
  return _internal_has_precision();
}
inline void Comparator::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Comparator::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Comparator::precision() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.precision)
  return _internal_precision();
}
inline void Comparator::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  precision_ = value;
}
inline void Comparator::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Proto.Comparator.precision)
}

// optional string label = 9;
inline bool Comparator::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Comparator::has_label() const {
  return _internal_has_label();
}
inline void Comparator::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Comparator::label() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.label)
  return _internal_label();
}
inline void Comparator::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:Proto.Comparator.label)
}
inline std::string* Comparator::mutable_label() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.label)
  return _internal_mutable_label();
}
inline const std::string& Comparator::_internal_label() const {
  return label_.Get();
}
inline void Comparator::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Comparator::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Comparator.label)
}
inline void Comparator::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Comparator.label)
}
inline void Comparator::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Comparator.label)
}
inline std::string* Comparator::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Comparator::release_label() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Comparator::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.label)
}

// optional string schemaId = 10;
inline bool Comparator::_internal_has_schemaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Comparator::has_schemaid() const {
  return _internal_has_schemaid();
}
inline void Comparator::clear_schemaid() {
  schemaid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Comparator::schemaid() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.schemaId)
  return _internal_schemaid();
}
inline void Comparator::set_schemaid(const std::string& value) {
  _internal_set_schemaid(value);
  // @@protoc_insertion_point(field_set:Proto.Comparator.schemaId)
}
inline std::string* Comparator::mutable_schemaid() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.schemaId)
  return _internal_mutable_schemaid();
}
inline const std::string& Comparator::_internal_schemaid() const {
  return schemaid_.Get();
}
inline void Comparator::_internal_set_schemaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Comparator::set_schemaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  schemaid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Comparator.schemaId)
}
inline void Comparator::set_schemaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Comparator.schemaId)
}
inline void Comparator::set_schemaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Comparator.schemaId)
}
inline std::string* Comparator::_internal_mutable_schemaid() {
  _has_bits_[0] |= 0x00000002u;
  return schemaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Comparator::release_schemaid() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.schemaId)
  if (!_internal_has_schemaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return schemaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Comparator::set_allocated_schemaid(std::string* schemaid) {
  if (schemaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  schemaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schemaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.schemaId)
}

// optional .Proto.Uuid schemaItemUuid = 11;
inline bool Comparator::_internal_has_schemaitemuuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || schemaitemuuid_ != nullptr);
  return value;
}
inline bool Comparator::has_schemaitemuuid() const {
  return _internal_has_schemaitemuuid();
}
inline void Comparator::clear_schemaitemuuid() {
  if (schemaitemuuid_ != nullptr) schemaitemuuid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Proto::Uuid& Comparator::_internal_schemaitemuuid() const {
  const ::Proto::Uuid* p = schemaitemuuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Uuid&>(
      ::Proto::_Uuid_default_instance_);
}
inline const ::Proto::Uuid& Comparator::schemaitemuuid() const {
  // @@protoc_insertion_point(field_get:Proto.Comparator.schemaItemUuid)
  return _internal_schemaitemuuid();
}
inline void Comparator::unsafe_arena_set_allocated_schemaitemuuid(
    ::Proto::Uuid* schemaitemuuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schemaitemuuid_);
  }
  schemaitemuuid_ = schemaitemuuid;
  if (schemaitemuuid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Comparator.schemaItemUuid)
}
inline ::Proto::Uuid* Comparator::release_schemaitemuuid() {
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::Uuid* temp = schemaitemuuid_;
  schemaitemuuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Uuid* Comparator::unsafe_arena_release_schemaitemuuid() {
  // @@protoc_insertion_point(field_release:Proto.Comparator.schemaItemUuid)
  _has_bits_[0] &= ~0x00000040u;
  ::Proto::Uuid* temp = schemaitemuuid_;
  schemaitemuuid_ = nullptr;
  return temp;
}
inline ::Proto::Uuid* Comparator::_internal_mutable_schemaitemuuid() {
  _has_bits_[0] |= 0x00000040u;
  if (schemaitemuuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Uuid>(GetArena());
    schemaitemuuid_ = p;
  }
  return schemaitemuuid_;
}
inline ::Proto::Uuid* Comparator::mutable_schemaitemuuid() {
  // @@protoc_insertion_point(field_mutable:Proto.Comparator.schemaItemUuid)
  return _internal_mutable_schemaitemuuid();
}
inline void Comparator::set_allocated_schemaitemuuid(::Proto::Uuid* schemaitemuuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schemaitemuuid_;
  }
  if (schemaitemuuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schemaitemuuid);
    if (message_arena != submessage_arena) {
      schemaitemuuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schemaitemuuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  schemaitemuuid_ = schemaitemuuid;
  // @@protoc_insertion_point(field_set_allocated:Proto.Comparator.schemaItemUuid)
}

// -------------------------------------------------------------------

// LmComparatorSet

// optional string lmEquipmentID = 1;
inline bool LmComparatorSet::_internal_has_lmequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LmComparatorSet::has_lmequipmentid() const {
  return _internal_has_lmequipmentid();
}
inline void LmComparatorSet::clear_lmequipmentid() {
  lmequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LmComparatorSet::lmequipmentid() const {
  // @@protoc_insertion_point(field_get:Proto.LmComparatorSet.lmEquipmentID)
  return _internal_lmequipmentid();
}
inline void LmComparatorSet::set_lmequipmentid(const std::string& value) {
  _internal_set_lmequipmentid(value);
  // @@protoc_insertion_point(field_set:Proto.LmComparatorSet.lmEquipmentID)
}
inline std::string* LmComparatorSet::mutable_lmequipmentid() {
  // @@protoc_insertion_point(field_mutable:Proto.LmComparatorSet.lmEquipmentID)
  return _internal_mutable_lmequipmentid();
}
inline const std::string& LmComparatorSet::_internal_lmequipmentid() const {
  return lmequipmentid_.Get();
}
inline void LmComparatorSet::_internal_set_lmequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LmComparatorSet::set_lmequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.LmComparatorSet.lmEquipmentID)
}
inline void LmComparatorSet::set_lmequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.LmComparatorSet.lmEquipmentID)
}
inline void LmComparatorSet::set_lmequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.LmComparatorSet.lmEquipmentID)
}
inline std::string* LmComparatorSet::_internal_mutable_lmequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return lmequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LmComparatorSet::release_lmequipmentid() {
  // @@protoc_insertion_point(field_release:Proto.LmComparatorSet.lmEquipmentID)
  if (!_internal_has_lmequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lmequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LmComparatorSet::set_allocated_lmequipmentid(std::string* lmequipmentid) {
  if (lmequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lmequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.LmComparatorSet.lmEquipmentID)
}

// repeated .Proto.Comparator comparator = 2;
inline int LmComparatorSet::_internal_comparator_size() const {
  return comparator_.size();
}
inline int LmComparatorSet::comparator_size() const {
  return _internal_comparator_size();
}
inline void LmComparatorSet::clear_comparator() {
  comparator_.Clear();
}
inline ::Proto::Comparator* LmComparatorSet::mutable_comparator(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.LmComparatorSet.comparator)
  return comparator_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Comparator >*
LmComparatorSet::mutable_comparator() {
  // @@protoc_insertion_point(field_mutable_list:Proto.LmComparatorSet.comparator)
  return &comparator_;
}
inline const ::Proto::Comparator& LmComparatorSet::_internal_comparator(int index) const {
  return comparator_.Get(index);
}
inline const ::Proto::Comparator& LmComparatorSet::comparator(int index) const {
  // @@protoc_insertion_point(field_get:Proto.LmComparatorSet.comparator)
  return _internal_comparator(index);
}
inline ::Proto::Comparator* LmComparatorSet::_internal_add_comparator() {
  return comparator_.Add();
}
inline ::Proto::Comparator* LmComparatorSet::add_comparator() {
  // @@protoc_insertion_point(field_add:Proto.LmComparatorSet.comparator)
  return _internal_add_comparator();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Comparator >&
LmComparatorSet::comparator() const {
  // @@protoc_insertion_point(field_list:Proto.LmComparatorSet.comparator)
  return comparator_;
}

// -------------------------------------------------------------------

// ComparatorSet

// repeated .Proto.LmComparatorSet lmComparatorSet = 1;
inline int ComparatorSet::_internal_lmcomparatorset_size() const {
  return lmcomparatorset_.size();
}
inline int ComparatorSet::lmcomparatorset_size() const {
  return _internal_lmcomparatorset_size();
}
inline void ComparatorSet::clear_lmcomparatorset() {
  lmcomparatorset_.Clear();
}
inline ::Proto::LmComparatorSet* ComparatorSet::mutable_lmcomparatorset(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ComparatorSet.lmComparatorSet)
  return lmcomparatorset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::LmComparatorSet >*
ComparatorSet::mutable_lmcomparatorset() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ComparatorSet.lmComparatorSet)
  return &lmcomparatorset_;
}
inline const ::Proto::LmComparatorSet& ComparatorSet::_internal_lmcomparatorset(int index) const {
  return lmcomparatorset_.Get(index);
}
inline const ::Proto::LmComparatorSet& ComparatorSet::lmcomparatorset(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ComparatorSet.lmComparatorSet)
  return _internal_lmcomparatorset(index);
}
inline ::Proto::LmComparatorSet* ComparatorSet::_internal_add_lmcomparatorset() {
  return lmcomparatorset_.Add();
}
inline ::Proto::LmComparatorSet* ComparatorSet::add_lmcomparatorset() {
  // @@protoc_insertion_point(field_add:Proto.ComparatorSet.lmComparatorSet)
  return _internal_add_lmcomparatorset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::LmComparatorSet >&
ComparatorSet::lmcomparatorset() const {
  // @@protoc_insertion_point(field_list:Proto.ComparatorSet.lmComparatorSet)
  return lmcomparatorset_;
}

// -------------------------------------------------------------------

// MetrologySignalLocation

// optional string rackID = 1;
inline bool MetrologySignalLocation::_internal_has_rackid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_rackid() const {
  return _internal_has_rackid();
}
inline void MetrologySignalLocation::clear_rackid() {
  rackid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetrologySignalLocation::rackid() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.rackID)
  return _internal_rackid();
}
inline void MetrologySignalLocation::set_rackid(const std::string& value) {
  _internal_set_rackid(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.rackID)
}
inline std::string* MetrologySignalLocation::mutable_rackid() {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignalLocation.rackID)
  return _internal_mutable_rackid();
}
inline const std::string& MetrologySignalLocation::_internal_rackid() const {
  return rackid_.Get();
}
inline void MetrologySignalLocation::_internal_set_rackid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetrologySignalLocation::set_rackid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rackid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.MetrologySignalLocation.rackID)
}
inline void MetrologySignalLocation::set_rackid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.MetrologySignalLocation.rackID)
}
inline void MetrologySignalLocation::set_rackid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.MetrologySignalLocation.rackID)
}
inline std::string* MetrologySignalLocation::_internal_mutable_rackid() {
  _has_bits_[0] |= 0x00000001u;
  return rackid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetrologySignalLocation::release_rackid() {
  // @@protoc_insertion_point(field_release:Proto.MetrologySignalLocation.rackID)
  if (!_internal_has_rackid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rackid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetrologySignalLocation::set_allocated_rackid(std::string* rackid) {
  if (rackid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rackid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rackid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.MetrologySignalLocation.rackID)
}

// optional string chassisID = 2;
inline bool MetrologySignalLocation::_internal_has_chassisid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_chassisid() const {
  return _internal_has_chassisid();
}
inline void MetrologySignalLocation::clear_chassisid() {
  chassisid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MetrologySignalLocation::chassisid() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.chassisID)
  return _internal_chassisid();
}
inline void MetrologySignalLocation::set_chassisid(const std::string& value) {
  _internal_set_chassisid(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.chassisID)
}
inline std::string* MetrologySignalLocation::mutable_chassisid() {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignalLocation.chassisID)
  return _internal_mutable_chassisid();
}
inline const std::string& MetrologySignalLocation::_internal_chassisid() const {
  return chassisid_.Get();
}
inline void MetrologySignalLocation::_internal_set_chassisid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  chassisid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetrologySignalLocation::set_chassisid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  chassisid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.MetrologySignalLocation.chassisID)
}
inline void MetrologySignalLocation::set_chassisid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  chassisid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.MetrologySignalLocation.chassisID)
}
inline void MetrologySignalLocation::set_chassisid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  chassisid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.MetrologySignalLocation.chassisID)
}
inline std::string* MetrologySignalLocation::_internal_mutable_chassisid() {
  _has_bits_[0] |= 0x00000002u;
  return chassisid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetrologySignalLocation::release_chassisid() {
  // @@protoc_insertion_point(field_release:Proto.MetrologySignalLocation.chassisID)
  if (!_internal_has_chassisid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return chassisid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetrologySignalLocation::set_allocated_chassisid(std::string* chassisid) {
  if (chassisid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chassisid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chassisid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.MetrologySignalLocation.chassisID)
}

// optional int32 chassis = 3 [default = -1];
inline bool MetrologySignalLocation::_internal_has_chassis() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_chassis() const {
  return _internal_has_chassis();
}
inline void MetrologySignalLocation::clear_chassis() {
  chassis_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignalLocation::_internal_chassis() const {
  return chassis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignalLocation::chassis() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.chassis)
  return _internal_chassis();
}
inline void MetrologySignalLocation::_internal_set_chassis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  chassis_ = value;
}
inline void MetrologySignalLocation::set_chassis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chassis(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.chassis)
}

// optional string moduleID = 4;
inline bool MetrologySignalLocation::_internal_has_moduleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_moduleid() const {
  return _internal_has_moduleid();
}
inline void MetrologySignalLocation::clear_moduleid() {
  moduleid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MetrologySignalLocation::moduleid() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.moduleID)
  return _internal_moduleid();
}
inline void MetrologySignalLocation::set_moduleid(const std::string& value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.moduleID)
}
inline std::string* MetrologySignalLocation::mutable_moduleid() {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignalLocation.moduleID)
  return _internal_mutable_moduleid();
}
inline const std::string& MetrologySignalLocation::_internal_moduleid() const {
  return moduleid_.Get();
}
inline void MetrologySignalLocation::_internal_set_moduleid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  moduleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetrologySignalLocation::set_moduleid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  moduleid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.MetrologySignalLocation.moduleID)
}
inline void MetrologySignalLocation::set_moduleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  moduleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.MetrologySignalLocation.moduleID)
}
inline void MetrologySignalLocation::set_moduleid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  moduleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.MetrologySignalLocation.moduleID)
}
inline std::string* MetrologySignalLocation::_internal_mutable_moduleid() {
  _has_bits_[0] |= 0x00000004u;
  return moduleid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetrologySignalLocation::release_moduleid() {
  // @@protoc_insertion_point(field_release:Proto.MetrologySignalLocation.moduleID)
  if (!_internal_has_moduleid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return moduleid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetrologySignalLocation::set_allocated_moduleid(std::string* moduleid) {
  if (moduleid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  moduleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moduleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.MetrologySignalLocation.moduleID)
}

// optional int32 module = 5 [default = -1];
inline bool MetrologySignalLocation::_internal_has_module() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_module() const {
  return _internal_has_module();
}
inline void MetrologySignalLocation::clear_module() {
  module_ = -1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignalLocation::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignalLocation::module() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.module)
  return _internal_module();
}
inline void MetrologySignalLocation::_internal_set_module(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  module_ = value;
}
inline void MetrologySignalLocation::set_module(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.module)
}

// optional int32 place = 6 [default = -1];
inline bool MetrologySignalLocation::_internal_has_place() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_place() const {
  return _internal_has_place();
}
inline void MetrologySignalLocation::clear_place() {
  place_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignalLocation::_internal_place() const {
  return place_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignalLocation::place() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.place)
  return _internal_place();
}
inline void MetrologySignalLocation::_internal_set_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  place_ = value;
}
inline void MetrologySignalLocation::set_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_place(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.place)
}

// optional string contact = 7;
inline bool MetrologySignalLocation::_internal_has_contact() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_contact() const {
  return _internal_has_contact();
}
inline void MetrologySignalLocation::clear_contact() {
  contact_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MetrologySignalLocation::contact() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.contact)
  return _internal_contact();
}
inline void MetrologySignalLocation::set_contact(const std::string& value) {
  _internal_set_contact(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.contact)
}
inline std::string* MetrologySignalLocation::mutable_contact() {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignalLocation.contact)
  return _internal_mutable_contact();
}
inline const std::string& MetrologySignalLocation::_internal_contact() const {
  return contact_.Get();
}
inline void MetrologySignalLocation::_internal_set_contact(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetrologySignalLocation::set_contact(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  contact_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.MetrologySignalLocation.contact)
}
inline void MetrologySignalLocation::set_contact(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.MetrologySignalLocation.contact)
}
inline void MetrologySignalLocation::set_contact(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.MetrologySignalLocation.contact)
}
inline std::string* MetrologySignalLocation::_internal_mutable_contact() {
  _has_bits_[0] |= 0x00000008u;
  return contact_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetrologySignalLocation::release_contact() {
  // @@protoc_insertion_point(field_release:Proto.MetrologySignalLocation.contact)
  if (!_internal_has_contact()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return contact_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetrologySignalLocation::set_allocated_contact(std::string* contact) {
  if (contact != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  contact_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.MetrologySignalLocation.contact)
}

// optional bool shownOnSchemas = 8 [default = false];
inline bool MetrologySignalLocation::_internal_has_shownonschemas() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MetrologySignalLocation::has_shownonschemas() const {
  return _internal_has_shownonschemas();
}
inline void MetrologySignalLocation::clear_shownonschemas() {
  shownonschemas_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MetrologySignalLocation::_internal_shownonschemas() const {
  return shownonschemas_;
}
inline bool MetrologySignalLocation::shownonschemas() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalLocation.shownOnSchemas)
  return _internal_shownonschemas();
}
inline void MetrologySignalLocation::_internal_set_shownonschemas(bool value) {
  _has_bits_[0] |= 0x00000010u;
  shownonschemas_ = value;
}
inline void MetrologySignalLocation::set_shownonschemas(bool value) {
  _internal_set_shownonschemas(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignalLocation.shownOnSchemas)
}

// -------------------------------------------------------------------

// MetrologySignal

// optional .Proto.AppSignal appSignal = 1;
inline bool MetrologySignal::_internal_has_appsignal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || appsignal_ != nullptr);
  return value;
}
inline bool MetrologySignal::has_appsignal() const {
  return _internal_has_appsignal();
}
inline void MetrologySignal::clear_appsignal() {
  if (appsignal_ != nullptr) appsignal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::AppSignal& MetrologySignal::_internal_appsignal() const {
  const ::Proto::AppSignal* p = appsignal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::AppSignal&>(
      ::Proto::_AppSignal_default_instance_);
}
inline const ::Proto::AppSignal& MetrologySignal::appsignal() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.appSignal)
  return _internal_appsignal();
}
inline void MetrologySignal::unsafe_arena_set_allocated_appsignal(
    ::Proto::AppSignal* appsignal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appsignal_);
  }
  appsignal_ = appsignal;
  if (appsignal) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.MetrologySignal.appSignal)
}
inline ::Proto::AppSignal* MetrologySignal::release_appsignal() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::AppSignal* temp = appsignal_;
  appsignal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::AppSignal* MetrologySignal::unsafe_arena_release_appsignal() {
  // @@protoc_insertion_point(field_release:Proto.MetrologySignal.appSignal)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::AppSignal* temp = appsignal_;
  appsignal_ = nullptr;
  return temp;
}
inline ::Proto::AppSignal* MetrologySignal::_internal_mutable_appsignal() {
  _has_bits_[0] |= 0x00000001u;
  if (appsignal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::AppSignal>(GetArena());
    appsignal_ = p;
  }
  return appsignal_;
}
inline ::Proto::AppSignal* MetrologySignal::mutable_appsignal() {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignal.appSignal)
  return _internal_mutable_appsignal();
}
inline void MetrologySignal::set_allocated_appsignal(::Proto::AppSignal* appsignal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appsignal_;
  }
  if (appsignal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appsignal);
    if (message_arena != submessage_arena) {
      appsignal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appsignal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appsignal_ = appsignal;
  // @@protoc_insertion_point(field_set_allocated:Proto.MetrologySignal.appSignal)
}

// optional .Proto.MetrologySignalLocation location = 2;
inline bool MetrologySignal::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool MetrologySignal::has_location() const {
  return _internal_has_location();
}
inline void MetrologySignal::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::MetrologySignalLocation& MetrologySignal::_internal_location() const {
  const ::Proto::MetrologySignalLocation* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::MetrologySignalLocation&>(
      ::Proto::_MetrologySignalLocation_default_instance_);
}
inline const ::Proto::MetrologySignalLocation& MetrologySignal::location() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.location)
  return _internal_location();
}
inline void MetrologySignal::unsafe_arena_set_allocated_location(
    ::Proto::MetrologySignalLocation* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.MetrologySignal.location)
}
inline ::Proto::MetrologySignalLocation* MetrologySignal::release_location() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::MetrologySignalLocation* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::MetrologySignalLocation* MetrologySignal::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Proto.MetrologySignal.location)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::MetrologySignalLocation* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::Proto::MetrologySignalLocation* MetrologySignal::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::MetrologySignalLocation>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::Proto::MetrologySignalLocation* MetrologySignal::mutable_location() {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignal.location)
  return _internal_mutable_location();
}
inline void MetrologySignal::set_allocated_location(::Proto::MetrologySignalLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Proto.MetrologySignal.location)
}

// optional double electricLowLimit = 3 [default = 0];
inline bool MetrologySignal::_internal_has_electriclowlimit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MetrologySignal::has_electriclowlimit() const {
  return _internal_has_electriclowlimit();
}
inline void MetrologySignal::clear_electriclowlimit() {
  electriclowlimit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double MetrologySignal::_internal_electriclowlimit() const {
  return electriclowlimit_;
}
inline double MetrologySignal::electriclowlimit() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricLowLimit)
  return _internal_electriclowlimit();
}
inline void MetrologySignal::_internal_set_electriclowlimit(double value) {
  _has_bits_[0] |= 0x00000004u;
  electriclowlimit_ = value;
}
inline void MetrologySignal::set_electriclowlimit(double value) {
  _internal_set_electriclowlimit(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricLowLimit)
}

// optional double electricHighLimit = 4 [default = 0];
inline bool MetrologySignal::_internal_has_electrichighlimit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MetrologySignal::has_electrichighlimit() const {
  return _internal_has_electrichighlimit();
}
inline void MetrologySignal::clear_electrichighlimit() {
  electrichighlimit_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double MetrologySignal::_internal_electrichighlimit() const {
  return electrichighlimit_;
}
inline double MetrologySignal::electrichighlimit() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricHighLimit)
  return _internal_electrichighlimit();
}
inline void MetrologySignal::_internal_set_electrichighlimit(double value) {
  _has_bits_[0] |= 0x00000008u;
  electrichighlimit_ = value;
}
inline void MetrologySignal::set_electrichighlimit(double value) {
  _internal_set_electrichighlimit(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricHighLimit)
}

// optional int32 electricUnitID = 5 [default = 1];
inline bool MetrologySignal::_internal_has_electricunitid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MetrologySignal::has_electricunitid() const {
  return _internal_has_electricunitid();
}
inline void MetrologySignal::clear_electricunitid() {
  electricunitid_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignal::_internal_electricunitid() const {
  return electricunitid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignal::electricunitid() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricUnitID)
  return _internal_electricunitid();
}
inline void MetrologySignal::_internal_set_electricunitid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  electricunitid_ = value;
}
inline void MetrologySignal::set_electricunitid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricunitid(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricUnitID)
}

// optional int32 electricSensorType = 6 [default = 1];
inline bool MetrologySignal::_internal_has_electricsensortype() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MetrologySignal::has_electricsensortype() const {
  return _internal_has_electricsensortype();
}
inline void MetrologySignal::clear_electricsensortype() {
  electricsensortype_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignal::_internal_electricsensortype() const {
  return electricsensortype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignal::electricsensortype() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricSensorType)
  return _internal_electricsensortype();
}
inline void MetrologySignal::_internal_set_electricsensortype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  electricsensortype_ = value;
}
inline void MetrologySignal::set_electricsensortype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricsensortype(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricSensorType)
}

// optional double electricRload = 11 [default = 0];
inline bool MetrologySignal::_internal_has_electricrload() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MetrologySignal::has_electricrload() const {
  return _internal_has_electricrload();
}
inline void MetrologySignal::clear_electricrload() {
  electricrload_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double MetrologySignal::_internal_electricrload() const {
  return electricrload_;
}
inline double MetrologySignal::electricrload() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricRload)
  return _internal_electricrload();
}
inline void MetrologySignal::_internal_set_electricrload(double value) {
  _has_bits_[0] |= 0x00000080u;
  electricrload_ = value;
}
inline void MetrologySignal::set_electricrload(double value) {
  _internal_set_electricrload(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricRload)
}

// optional double electricR0 = 7 [default = 0];
inline bool MetrologySignal::_internal_has_electricr0() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MetrologySignal::has_electricr0() const {
  return _internal_has_electricr0();
}
inline void MetrologySignal::clear_electricr0() {
  electricr0_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double MetrologySignal::_internal_electricr0() const {
  return electricr0_;
}
inline double MetrologySignal::electricr0() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricR0)
  return _internal_electricr0();
}
inline void MetrologySignal::_internal_set_electricr0(double value) {
  _has_bits_[0] |= 0x00000010u;
  electricr0_ = value;
}
inline void MetrologySignal::set_electricr0(double value) {
  _internal_set_electricr0(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricR0)
}

// optional int32 electricPrecision = 8 [default = 4];
inline bool MetrologySignal::_internal_has_electricprecision() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MetrologySignal::has_electricprecision() const {
  return _internal_has_electricprecision();
}
inline void MetrologySignal::clear_electricprecision() {
  electricprecision_ = 4;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignal::_internal_electricprecision() const {
  return electricprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetrologySignal::electricprecision() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.electricPrecision)
  return _internal_electricprecision();
}
inline void MetrologySignal::_internal_set_electricprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  electricprecision_ = value;
}
inline void MetrologySignal::set_electricprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricprecision(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.electricPrecision)
}

// optional double physicalLowLimit = 9 [default = 0];
inline bool MetrologySignal::_internal_has_physicallowlimit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MetrologySignal::has_physicallowlimit() const {
  return _internal_has_physicallowlimit();
}
inline void MetrologySignal::clear_physicallowlimit() {
  physicallowlimit_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double MetrologySignal::_internal_physicallowlimit() const {
  return physicallowlimit_;
}
inline double MetrologySignal::physicallowlimit() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.physicalLowLimit)
  return _internal_physicallowlimit();
}
inline void MetrologySignal::_internal_set_physicallowlimit(double value) {
  _has_bits_[0] |= 0x00000020u;
  physicallowlimit_ = value;
}
inline void MetrologySignal::set_physicallowlimit(double value) {
  _internal_set_physicallowlimit(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.physicalLowLimit)
}

// optional double physicalHighLimit = 10 [default = 0];
inline bool MetrologySignal::_internal_has_physicalhighlimit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MetrologySignal::has_physicalhighlimit() const {
  return _internal_has_physicalhighlimit();
}
inline void MetrologySignal::clear_physicalhighlimit() {
  physicalhighlimit_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double MetrologySignal::_internal_physicalhighlimit() const {
  return physicalhighlimit_;
}
inline double MetrologySignal::physicalhighlimit() const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignal.physicalHighLimit)
  return _internal_physicalhighlimit();
}
inline void MetrologySignal::_internal_set_physicalhighlimit(double value) {
  _has_bits_[0] |= 0x00000040u;
  physicalhighlimit_ = value;
}
inline void MetrologySignal::set_physicalhighlimit(double value) {
  _internal_set_physicalhighlimit(value);
  // @@protoc_insertion_point(field_set:Proto.MetrologySignal.physicalHighLimit)
}

// -------------------------------------------------------------------

// MetrologySignalSet

// repeated .Proto.MetrologySignal metrologySignal = 1;
inline int MetrologySignalSet::_internal_metrologysignal_size() const {
  return metrologysignal_.size();
}
inline int MetrologySignalSet::metrologysignal_size() const {
  return _internal_metrologysignal_size();
}
inline void MetrologySignalSet::clear_metrologysignal() {
  metrologysignal_.Clear();
}
inline ::Proto::MetrologySignal* MetrologySignalSet::mutable_metrologysignal(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.MetrologySignalSet.metrologySignal)
  return metrologysignal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::MetrologySignal >*
MetrologySignalSet::mutable_metrologysignal() {
  // @@protoc_insertion_point(field_mutable_list:Proto.MetrologySignalSet.metrologySignal)
  return &metrologysignal_;
}
inline const ::Proto::MetrologySignal& MetrologySignalSet::_internal_metrologysignal(int index) const {
  return metrologysignal_.Get(index);
}
inline const ::Proto::MetrologySignal& MetrologySignalSet::metrologysignal(int index) const {
  // @@protoc_insertion_point(field_get:Proto.MetrologySignalSet.metrologySignal)
  return _internal_metrologysignal(index);
}
inline ::Proto::MetrologySignal* MetrologySignalSet::_internal_add_metrologysignal() {
  return metrologysignal_.Add();
}
inline ::Proto::MetrologySignal* MetrologySignalSet::add_metrologysignal() {
  // @@protoc_insertion_point(field_add:Proto.MetrologySignalSet.metrologySignal)
  return _internal_add_metrologysignal();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::MetrologySignal >&
MetrologySignalSet::metrologysignal() const {
  // @@protoc_insertion_point(field_list:Proto.MetrologySignalSet.metrologySignal)
  return metrologysignal_;
}

// -------------------------------------------------------------------

// SimOverrideSignal

// optional bool enabled = 2;
inline bool SimOverrideSignal::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimOverrideSignal::has_enabled() const {
  return _internal_has_enabled();
}
inline void SimOverrideSignal::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SimOverrideSignal::_internal_enabled() const {
  return enabled_;
}
inline bool SimOverrideSignal::enabled() const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignal.enabled)
  return _internal_enabled();
}
inline void SimOverrideSignal::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enabled_ = value;
}
inline void SimOverrideSignal::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Proto.SimOverrideSignal.enabled)
}

// optional int32 index = 3;
inline bool SimOverrideSignal::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimOverrideSignal::has_index() const {
  return _internal_has_index();
}
inline void SimOverrideSignal::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimOverrideSignal::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimOverrideSignal::index() const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignal.index)
  return _internal_index();
}
inline void SimOverrideSignal::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void SimOverrideSignal::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Proto.SimOverrideSignal.index)
}

// optional string appSignalId = 10;
inline bool SimOverrideSignal::_internal_has_appsignalid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimOverrideSignal::has_appsignalid() const {
  return _internal_has_appsignalid();
}
inline void SimOverrideSignal::clear_appsignalid() {
  appsignalid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimOverrideSignal::appsignalid() const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignal.appSignalId)
  return _internal_appsignalid();
}
inline void SimOverrideSignal::set_appsignalid(const std::string& value) {
  _internal_set_appsignalid(value);
  // @@protoc_insertion_point(field_set:Proto.SimOverrideSignal.appSignalId)
}
inline std::string* SimOverrideSignal::mutable_appsignalid() {
  // @@protoc_insertion_point(field_mutable:Proto.SimOverrideSignal.appSignalId)
  return _internal_mutable_appsignalid();
}
inline const std::string& SimOverrideSignal::_internal_appsignalid() const {
  return appsignalid_.Get();
}
inline void SimOverrideSignal::_internal_set_appsignalid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimOverrideSignal::set_appsignalid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SimOverrideSignal.appSignalId)
}
inline void SimOverrideSignal::set_appsignalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SimOverrideSignal.appSignalId)
}
inline void SimOverrideSignal::set_appsignalid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SimOverrideSignal.appSignalId)
}
inline std::string* SimOverrideSignal::_internal_mutable_appsignalid() {
  _has_bits_[0] |= 0x00000001u;
  return appsignalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimOverrideSignal::release_appsignalid() {
  // @@protoc_insertion_point(field_release:Proto.SimOverrideSignal.appSignalId)
  if (!_internal_has_appsignalid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appsignalid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimOverrideSignal::set_allocated_appsignalid(std::string* appsignalid) {
  if (appsignalid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appsignalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsignalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SimOverrideSignal.appSignalId)
}

// optional int32 overrideMethod = 30;
inline bool SimOverrideSignal::_internal_has_overridemethod() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimOverrideSignal::has_overridemethod() const {
  return _internal_has_overridemethod();
}
inline void SimOverrideSignal::clear_overridemethod() {
  overridemethod_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimOverrideSignal::_internal_overridemethod() const {
  return overridemethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimOverrideSignal::overridemethod() const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignal.overrideMethod)
  return _internal_overridemethod();
}
inline void SimOverrideSignal::_internal_set_overridemethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  overridemethod_ = value;
}
inline void SimOverrideSignal::set_overridemethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overridemethod(value);
  // @@protoc_insertion_point(field_set:Proto.SimOverrideSignal.overrideMethod)
}

// optional .Proto.qvariant overrideValue = 40;
inline bool SimOverrideSignal::_internal_has_overridevalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || overridevalue_ != nullptr);
  return value;
}
inline bool SimOverrideSignal::has_overridevalue() const {
  return _internal_has_overridevalue();
}
inline void SimOverrideSignal::clear_overridevalue() {
  if (overridevalue_ != nullptr) overridevalue_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::qvariant& SimOverrideSignal::_internal_overridevalue() const {
  const ::Proto::qvariant* p = overridevalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::qvariant&>(
      ::Proto::_qvariant_default_instance_);
}
inline const ::Proto::qvariant& SimOverrideSignal::overridevalue() const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignal.overrideValue)
  return _internal_overridevalue();
}
inline void SimOverrideSignal::unsafe_arena_set_allocated_overridevalue(
    ::Proto::qvariant* overridevalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overridevalue_);
  }
  overridevalue_ = overridevalue;
  if (overridevalue) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SimOverrideSignal.overrideValue)
}
inline ::Proto::qvariant* SimOverrideSignal::release_overridevalue() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::qvariant* temp = overridevalue_;
  overridevalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::qvariant* SimOverrideSignal::unsafe_arena_release_overridevalue() {
  // @@protoc_insertion_point(field_release:Proto.SimOverrideSignal.overrideValue)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::qvariant* temp = overridevalue_;
  overridevalue_ = nullptr;
  return temp;
}
inline ::Proto::qvariant* SimOverrideSignal::_internal_mutable_overridevalue() {
  _has_bits_[0] |= 0x00000004u;
  if (overridevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::qvariant>(GetArena());
    overridevalue_ = p;
  }
  return overridevalue_;
}
inline ::Proto::qvariant* SimOverrideSignal::mutable_overridevalue() {
  // @@protoc_insertion_point(field_mutable:Proto.SimOverrideSignal.overrideValue)
  return _internal_mutable_overridevalue();
}
inline void SimOverrideSignal::set_allocated_overridevalue(::Proto::qvariant* overridevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overridevalue_;
  }
  if (overridevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overridevalue);
    if (message_arena != submessage_arena) {
      overridevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overridevalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  overridevalue_ = overridevalue;
  // @@protoc_insertion_point(field_set_allocated:Proto.SimOverrideSignal.overrideValue)
}

// optional string overrideScript = 50;
inline bool SimOverrideSignal::_internal_has_overridescript() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimOverrideSignal::has_overridescript() const {
  return _internal_has_overridescript();
}
inline void SimOverrideSignal::clear_overridescript() {
  overridescript_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SimOverrideSignal::overridescript() const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignal.overrideScript)
  return _internal_overridescript();
}
inline void SimOverrideSignal::set_overridescript(const std::string& value) {
  _internal_set_overridescript(value);
  // @@protoc_insertion_point(field_set:Proto.SimOverrideSignal.overrideScript)
}
inline std::string* SimOverrideSignal::mutable_overridescript() {
  // @@protoc_insertion_point(field_mutable:Proto.SimOverrideSignal.overrideScript)
  return _internal_mutable_overridescript();
}
inline const std::string& SimOverrideSignal::_internal_overridescript() const {
  return overridescript_.Get();
}
inline void SimOverrideSignal::_internal_set_overridescript(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  overridescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimOverrideSignal::set_overridescript(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  overridescript_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.SimOverrideSignal.overrideScript)
}
inline void SimOverrideSignal::set_overridescript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  overridescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.SimOverrideSignal.overrideScript)
}
inline void SimOverrideSignal::set_overridescript(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  overridescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.SimOverrideSignal.overrideScript)
}
inline std::string* SimOverrideSignal::_internal_mutable_overridescript() {
  _has_bits_[0] |= 0x00000002u;
  return overridescript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimOverrideSignal::release_overridescript() {
  // @@protoc_insertion_point(field_release:Proto.SimOverrideSignal.overrideScript)
  if (!_internal_has_overridescript()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return overridescript_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimOverrideSignal::set_allocated_overridescript(std::string* overridescript) {
  if (overridescript != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  overridescript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overridescript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.SimOverrideSignal.overrideScript)
}

// -------------------------------------------------------------------

// SimOverrideSignalWorkspace

// repeated .Proto.SimOverrideSignal overrideSignals = 2;
inline int SimOverrideSignalWorkspace::_internal_overridesignals_size() const {
  return overridesignals_.size();
}
inline int SimOverrideSignalWorkspace::overridesignals_size() const {
  return _internal_overridesignals_size();
}
inline void SimOverrideSignalWorkspace::clear_overridesignals() {
  overridesignals_.Clear();
}
inline ::Proto::SimOverrideSignal* SimOverrideSignalWorkspace::mutable_overridesignals(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SimOverrideSignalWorkspace.overrideSignals)
  return overridesignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SimOverrideSignal >*
SimOverrideSignalWorkspace::mutable_overridesignals() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SimOverrideSignalWorkspace.overrideSignals)
  return &overridesignals_;
}
inline const ::Proto::SimOverrideSignal& SimOverrideSignalWorkspace::_internal_overridesignals(int index) const {
  return overridesignals_.Get(index);
}
inline const ::Proto::SimOverrideSignal& SimOverrideSignalWorkspace::overridesignals(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SimOverrideSignalWorkspace.overrideSignals)
  return _internal_overridesignals(index);
}
inline ::Proto::SimOverrideSignal* SimOverrideSignalWorkspace::_internal_add_overridesignals() {
  return overridesignals_.Add();
}
inline ::Proto::SimOverrideSignal* SimOverrideSignalWorkspace::add_overridesignals() {
  // @@protoc_insertion_point(field_add:Proto.SimOverrideSignalWorkspace.overrideSignals)
  return _internal_add_overridesignals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SimOverrideSignal >&
SimOverrideSignalWorkspace::overridesignals() const {
  // @@protoc_insertion_point(field_list:Proto.SimOverrideSignalWorkspace.overrideSignals)
  return overridesignals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::SchemaUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::SchemaUnit>() {
  return ::Proto::SchemaUnit_descriptor();
}
template <> struct is_proto_enum< ::Proto::ConnectionDirrection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ConnectionDirrection>() {
  return ::Proto::ConnectionDirrection_descriptor();
}
template <> struct is_proto_enum< ::Proto::FblSignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::FblSignalType>() {
  return ::Proto::FblSignalType_descriptor();
}
template <> struct is_proto_enum< ::Proto::FblDataFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::FblDataFormat>() {
  return ::Proto::FblDataFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serialization_2eproto

#ifdef _MSC_VER
#pragma warning(pop)
#endif