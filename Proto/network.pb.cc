// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Network {

namespace {

const ::google::protobuf::Descriptor* GetSignalListStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListStartReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListStartReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListNextRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListNextRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListNextReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListNextReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalParamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalParamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalParamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalParamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataSourcesInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataSourcesInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataSourcesInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataSourcesInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppDataSourceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppDataSourceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppDataSourcesStatesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppDataSourcesStatesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUnitsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUnitsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUnitsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUnitsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTuningSourcesStates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTuningSourcesStates_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSourceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSourceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTuningSourcesStatesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTuningSourcesStatesReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_2eproto() {
  protobuf_AddDesc_network_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network.proto");
  GOOGLE_CHECK(file != NULL);
  GetSignalListStartRequest_descriptor_ = file->message_type(0);
  static const int GetSignalListStartRequest_offsets_[1] = {
  };
  GetSignalListStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListStartRequest_descriptor_,
      GetSignalListStartRequest::default_instance_,
      GetSignalListStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListStartRequest));
  GetSignalListStartReply_descriptor_ = file->message_type(1);
  static const int GetSignalListStartReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, totalitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, partcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, itemsperpart_),
  };
  GetSignalListStartReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListStartReply_descriptor_,
      GetSignalListStartReply::default_instance_,
      GetSignalListStartReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListStartReply));
  GetSignalListNextRequest_descriptor_ = file->message_type(2);
  static const int GetSignalListNextRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, part_),
  };
  GetSignalListNextRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListNextRequest_descriptor_,
      GetSignalListNextRequest::default_instance_,
      GetSignalListNextRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListNextRequest));
  GetSignalListNextReply_descriptor_ = file->message_type(3);
  static const int GetSignalListNextReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, appsignalids_),
  };
  GetSignalListNextReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListNextReply_descriptor_,
      GetSignalListNextReply::default_instance_,
      GetSignalListNextReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListNextReply));
  GetAppSignalParamRequest_descriptor_ = file->message_type(4);
  static const int GetAppSignalParamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamRequest, signalhashes_),
  };
  GetAppSignalParamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalParamRequest_descriptor_,
      GetAppSignalParamRequest::default_instance_,
      GetAppSignalParamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalParamRequest));
  GetAppSignalParamReply_descriptor_ = file->message_type(5);
  static const int GetAppSignalParamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, appsignalparams_),
  };
  GetAppSignalParamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalParamReply_descriptor_,
      GetAppSignalParamReply::default_instance_,
      GetAppSignalParamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalParamReply));
  GetAppSignalStateRequest_descriptor_ = file->message_type(6);
  static const int GetAppSignalStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateRequest, signalhashes_),
  };
  GetAppSignalStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStateRequest_descriptor_,
      GetAppSignalStateRequest::default_instance_,
      GetAppSignalStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStateRequest));
  GetAppSignalStateReply_descriptor_ = file->message_type(7);
  static const int GetAppSignalStateReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, appsignalstates_),
  };
  GetAppSignalStateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStateReply_descriptor_,
      GetAppSignalStateReply::default_instance_,
      GetAppSignalStateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStateReply));
  DataSourceInfo_descriptor_ = file->message_type(8);
  static const int DataSourceInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, subsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, subsystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmmoduletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmadapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmdataenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmdataid_),
  };
  DataSourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataSourceInfo_descriptor_,
      DataSourceInfo::default_instance_,
      DataSourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataSourceInfo));
  GetDataSourcesInfoRequest_descriptor_ = file->message_type(9);
  static const int GetDataSourcesInfoRequest_offsets_[1] = {
  };
  GetDataSourcesInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataSourcesInfoRequest_descriptor_,
      GetDataSourcesInfoRequest::default_instance_,
      GetDataSourcesInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataSourcesInfoRequest));
  GetDataSourcesInfoReply_descriptor_ = file->message_type(10);
  static const int GetDataSourcesInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, datasourceinfo_),
  };
  GetDataSourcesInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataSourcesInfoReply_descriptor_,
      GetDataSourcesInfoReply::default_instance_,
      GetDataSourcesInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataSourcesInfoReply));
  AppDataSourceState_descriptor_ = file->message_type(11);
  static const int AppDataSourceState_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receiveddatasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, datareceivingrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receivedframescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, processingenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, processedpacketcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorprotocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorframesquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorframeno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, lostedpackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errordataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receiveddataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, processingskiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorbadframesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, haserrors_),
  };
  AppDataSourceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppDataSourceState_descriptor_,
      AppDataSourceState::default_instance_,
      AppDataSourceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppDataSourceState));
  GetAppDataSourcesStatesReply_descriptor_ = file->message_type(12);
  static const int GetAppDataSourcesStatesReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, appdatasourcesstates_),
  };
  GetAppDataSourcesStatesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppDataSourcesStatesReply_descriptor_,
      GetAppDataSourcesStatesReply::default_instance_,
      GetAppDataSourcesStatesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppDataSourcesStatesReply));
  GetUnitsRequest_descriptor_ = file->message_type(13);
  static const int GetUnitsRequest_offsets_[1] = {
  };
  GetUnitsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUnitsRequest_descriptor_,
      GetUnitsRequest::default_instance_,
      GetUnitsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnitsRequest));
  Unit_descriptor_ = file->message_type(14);
  static const int Unit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, unit_),
  };
  Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unit_descriptor_,
      Unit::default_instance_,
      Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unit));
  GetUnitsReply_descriptor_ = file->message_type(15);
  static const int GetUnitsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, units_),
  };
  GetUnitsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUnitsReply_descriptor_,
      GetUnitsReply::default_instance_,
      GetUnitsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnitsReply));
  GetServiceInfoRequest_descriptor_ = file->message_type(16);
  static const int GetServiceInfoRequest_offsets_[1] = {
  };
  GetServiceInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceInfoRequest_descriptor_,
      GetServiceInfoRequest::default_instance_,
      GetServiceInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceInfoRequest));
  ServiceInfo_descriptor_ = file->message_type(17);
  static const int ServiceInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, majorversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, minorversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, buildno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, servicestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, serviceuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, clientrequestip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, clientrequestport_),
  };
  ServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceInfo_descriptor_,
      ServiceInfo::default_instance_,
      ServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceInfo));
  GetServiceInfoReply_descriptor_ = file->message_type(18);
  static const int GetServiceInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, serviceinfo_),
  };
  GetServiceInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceInfoReply_descriptor_,
      GetServiceInfoReply::default_instance_,
      GetServiceInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceInfoReply));
  GetTuningSourcesStates_descriptor_ = file->message_type(19);
  static const int GetTuningSourcesStates_offsets_[1] = {
  };
  GetTuningSourcesStates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTuningSourcesStates_descriptor_,
      GetTuningSourcesStates::default_instance_,
      GetTuningSourcesStates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTuningSourcesStates));
  TuningSourceState_descriptor_ = file->message_type(20);
  static const int TuningSourceState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, receiveddatasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, datareceivingrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, respond_),
  };
  TuningSourceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSourceState_descriptor_,
      TuningSourceState::default_instance_,
      TuningSourceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSourceState));
  GetTuningSourcesStatesReply_descriptor_ = file->message_type(21);
  static const int GetTuningSourcesStatesReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, tuningdatasourcesstates_),
  };
  GetTuningSourcesStatesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTuningSourcesStatesReply_descriptor_,
      GetTuningSourcesStatesReply::default_instance_,
      GetTuningSourcesStatesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTuningSourcesStatesReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListStartRequest_descriptor_, &GetSignalListStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListStartReply_descriptor_, &GetSignalListStartReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListNextRequest_descriptor_, &GetSignalListNextRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListNextReply_descriptor_, &GetSignalListNextReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalParamRequest_descriptor_, &GetAppSignalParamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalParamReply_descriptor_, &GetAppSignalParamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStateRequest_descriptor_, &GetAppSignalStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStateReply_descriptor_, &GetAppSignalStateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataSourceInfo_descriptor_, &DataSourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataSourcesInfoRequest_descriptor_, &GetDataSourcesInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataSourcesInfoReply_descriptor_, &GetDataSourcesInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppDataSourceState_descriptor_, &AppDataSourceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppDataSourcesStatesReply_descriptor_, &GetAppDataSourcesStatesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnitsRequest_descriptor_, &GetUnitsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unit_descriptor_, &Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnitsReply_descriptor_, &GetUnitsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceInfoRequest_descriptor_, &GetServiceInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceInfo_descriptor_, &ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceInfoReply_descriptor_, &GetServiceInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTuningSourcesStates_descriptor_, &GetTuningSourcesStates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSourceState_descriptor_, &TuningSourceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTuningSourcesStatesReply_descriptor_, &GetTuningSourcesStatesReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_2eproto() {
  delete GetSignalListStartRequest::default_instance_;
  delete GetSignalListStartRequest_reflection_;
  delete GetSignalListStartReply::default_instance_;
  delete GetSignalListStartReply_reflection_;
  delete GetSignalListNextRequest::default_instance_;
  delete GetSignalListNextRequest_reflection_;
  delete GetSignalListNextReply::default_instance_;
  delete GetSignalListNextReply_reflection_;
  delete GetAppSignalParamRequest::default_instance_;
  delete GetAppSignalParamRequest_reflection_;
  delete GetAppSignalParamReply::default_instance_;
  delete GetAppSignalParamReply_reflection_;
  delete GetAppSignalStateRequest::default_instance_;
  delete GetAppSignalStateRequest_reflection_;
  delete GetAppSignalStateReply::default_instance_;
  delete GetAppSignalStateReply_reflection_;
  delete DataSourceInfo::default_instance_;
  delete DataSourceInfo_reflection_;
  delete GetDataSourcesInfoRequest::default_instance_;
  delete GetDataSourcesInfoRequest_reflection_;
  delete GetDataSourcesInfoReply::default_instance_;
  delete GetDataSourcesInfoReply_reflection_;
  delete AppDataSourceState::default_instance_;
  delete AppDataSourceState_reflection_;
  delete GetAppDataSourcesStatesReply::default_instance_;
  delete GetAppDataSourcesStatesReply_reflection_;
  delete GetUnitsRequest::default_instance_;
  delete GetUnitsRequest_reflection_;
  delete Unit::default_instance_;
  delete Unit_reflection_;
  delete GetUnitsReply::default_instance_;
  delete GetUnitsReply_reflection_;
  delete GetServiceInfoRequest::default_instance_;
  delete GetServiceInfoRequest_reflection_;
  delete ServiceInfo::default_instance_;
  delete ServiceInfo_reflection_;
  delete GetServiceInfoReply::default_instance_;
  delete GetServiceInfoReply_reflection_;
  delete GetTuningSourcesStates::default_instance_;
  delete GetTuningSourcesStates_reflection_;
  delete TuningSourceState::default_instance_;
  delete TuningSourceState_reflection_;
  delete GetTuningSourcesStatesReply::default_instance_;
  delete GetTuningSourcesStatesReply_reflection_;
}

void protobuf_AddDesc_network_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_serialization_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnetwork.proto\022\007Network\032\023serialization."
    "proto\"\033\n\031GetSignalListStartRequest\"l\n\027Ge"
    "tSignalListStartReply\022\020\n\005error\030\001 \001(\005:\0010\022"
    "\026\n\016totalItemCount\030\002 \001(\005\022\021\n\tpartCount\030\003 \001"
    "(\005\022\024\n\014itemsPerPart\030\004 \001(\005\"(\n\030GetSignalLis"
    "tNextRequest\022\014\n\004part\030\001 \001(\005\"N\n\026GetSignalL"
    "istNextReply\022\020\n\005error\030\001 \001(\005:\0010\022\014\n\004part\030\002"
    " \001(\005\022\024\n\014appSignalIds\030\003 \003(\t\"0\n\030GetAppSign"
    "alParamRequest\022\024\n\014signalHashes\030\001 \003(\004\"U\n\026"
    "GetAppSignalParamReply\022\020\n\005error\030\001 \001(\005:\0010"
    "\022)\n\017appSignalParams\030\002 \003(\0132\020.Proto.AppSig"
    "nal\"0\n\030GetAppSignalStateRequest\022\024\n\014signa"
    "lHashes\030\001 \003(\004\"Z\n\026GetAppSignalStateReply\022"
    "\020\n\005error\030\001 \001(\005:\0010\022.\n\017appSignalStates\030\002 \003"
    "(\0132\025.Proto.AppSignalState\"\214\002\n\016DataSource"
    "Info\022\n\n\002id\030\001 \001(\004\022\023\n\013equipmentID\030\002 \001(\t\022\017\n"
    "\007caption\030\003 \001(\t\022\020\n\010dataType\030\004 \001(\005\022\n\n\002ip\030\005"
    " \001(\t\022\014\n\004port\030\006 \001(\005\022\017\n\007channel\030\007 \001(\005\022\023\n\013s"
    "ubsystemID\030\010 \001(\005\022\021\n\tsubsystem\030\t \001(\t\022\020\n\010l"
    "mNumber\030\n \001(\005\022\024\n\014lmModuleType\030\013 \001(\005\022\023\n\013l"
    "mAdapterID\030\014 \001(\t\022\024\n\014lmDataEnable\030\r \001(\010\022\020"
    "\n\010lmDataID\030\016 \001(\004\"\033\n\031GetDataSourcesInfoRe"
    "quest\"\\\n\027GetDataSourcesInfoReply\022\020\n\005erro"
    "r\030\001 \001(\005:\0010\022/\n\016dataSourceInfo\030\002 \003(\0132\027.Net"
    "work.DataSourceInfo\"\247\003\n\022AppDataSourceSta"
    "te\022\n\n\002id\030\001 \001(\004\022\016\n\006uptime\030\002 \001(\003\022\030\n\020receiv"
    "edDataSize\030\003 \001(\003\022\031\n\021dataReceivingRate\030\004 "
    "\001(\001\022\033\n\023receivedFramesCount\030\005 \001(\003\022\031\n\021proc"
    "essingEnabled\030\006 \001(\010\022\034\n\024processedPacketCo"
    "unt\030\007 \001(\003\022\034\n\024errorProtocolVersion\030\010 \001(\003\022"
    "\033\n\023errorFramesQuantity\030\t \001(\003\022\024\n\014errorFra"
    "meNo\030\n \001(\003\022\025\n\rlostedPackets\030\013 \001(\003\022\023\n\013err"
    "orDataID\030\014 \001(\003\022\026\n\016receivedDataID\030\r \001(\004\022\030"
    "\n\020processingSkiped\030\016 \001(\010\022\r\n\005state\030\017 \001(\005\022"
    "\031\n\021errorBadFrameSize\030\020 \001(\003\022\021\n\thasErrors\030"
    "\021 \001(\010\"k\n\034GetAppDataSourcesStatesReply\022\020\n"
    "\005error\030\001 \001(\005:\0010\0229\n\024appDataSourcesStates\030"
    "\002 \003(\0132\033.Network.AppDataSourceState\"\021\n\017Ge"
    "tUnitsRequest\" \n\004Unit\022\n\n\002id\030\001 \001(\005\022\014\n\004uni"
    "t\030\002 \001(\t\"\?\n\rGetUnitsReply\022\020\n\005error\030\001 \001(\005:"
    "\0010\022\034\n\005units\030\002 \003(\0132\r.Network.Unit\"\027\n\025GetS"
    "erviceInfoRequest\"\364\001\n\013ServiceInfo\022\017\n\004typ"
    "e\030\001 \001(\005:\0010\022\027\n\014majorVersion\030\002 \001(\005:\0010\022\027\n\014m"
    "inorVersion\030\003 \001(\005:\0010\022\022\n\007buildNo\030\004 \001(\005:\0010"
    "\022\016\n\003crc\030\005 \001(\r:\0010\022\021\n\006uptime\030\006 \001(\003:\0010\022\027\n\014s"
    "erviceState\030\007 \001(\005:\0010\022\030\n\rserviceUptime\030\010 "
    "\001(\003:\0010\022\032\n\017clientRequestIP\030\t \001(\r:\0010\022\034\n\021cl"
    "ientRequestPort\030\n \001(\005:\0010\"R\n\023GetServiceIn"
    "foReply\022\020\n\005error\030\001 \002(\005:\0010\022)\n\013serviceInfo"
    "\030\002 \002(\0132\024.Network.ServiceInfo\"\030\n\026GetTunin"
    "gSourcesStates\"u\n\021TuningSourceState\022\n\n\002i"
    "d\030\001 \001(\004\022\016\n\006uptime\030\002 \001(\003\022\030\n\020receivedDataS"
    "ize\030\003 \001(\003\022\031\n\021dataReceivingRate\030\004 \001(\001\022\017\n\007"
    "respond\030\005 \001(\010\"l\n\033GetTuningSourcesStatesR"
    "eply\022\020\n\005error\030\001 \001(\005:\0010\022;\n\027tuningDataSour"
    "cesStates\030\002 \003(\0132\032.Network.TuningSourceSt"
    "ate", 2243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network.proto", &protobuf_RegisterTypes);
  GetSignalListStartRequest::default_instance_ = new GetSignalListStartRequest();
  GetSignalListStartReply::default_instance_ = new GetSignalListStartReply();
  GetSignalListNextRequest::default_instance_ = new GetSignalListNextRequest();
  GetSignalListNextReply::default_instance_ = new GetSignalListNextReply();
  GetAppSignalParamRequest::default_instance_ = new GetAppSignalParamRequest();
  GetAppSignalParamReply::default_instance_ = new GetAppSignalParamReply();
  GetAppSignalStateRequest::default_instance_ = new GetAppSignalStateRequest();
  GetAppSignalStateReply::default_instance_ = new GetAppSignalStateReply();
  DataSourceInfo::default_instance_ = new DataSourceInfo();
  GetDataSourcesInfoRequest::default_instance_ = new GetDataSourcesInfoRequest();
  GetDataSourcesInfoReply::default_instance_ = new GetDataSourcesInfoReply();
  AppDataSourceState::default_instance_ = new AppDataSourceState();
  GetAppDataSourcesStatesReply::default_instance_ = new GetAppDataSourcesStatesReply();
  GetUnitsRequest::default_instance_ = new GetUnitsRequest();
  Unit::default_instance_ = new Unit();
  GetUnitsReply::default_instance_ = new GetUnitsReply();
  GetServiceInfoRequest::default_instance_ = new GetServiceInfoRequest();
  ServiceInfo::default_instance_ = new ServiceInfo();
  GetServiceInfoReply::default_instance_ = new GetServiceInfoReply();
  GetTuningSourcesStates::default_instance_ = new GetTuningSourcesStates();
  TuningSourceState::default_instance_ = new TuningSourceState();
  GetTuningSourcesStatesReply::default_instance_ = new GetTuningSourcesStatesReply();
  GetSignalListStartRequest::default_instance_->InitAsDefaultInstance();
  GetSignalListStartReply::default_instance_->InitAsDefaultInstance();
  GetSignalListNextRequest::default_instance_->InitAsDefaultInstance();
  GetSignalListNextReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalParamRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalParamReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalStateRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalStateReply::default_instance_->InitAsDefaultInstance();
  DataSourceInfo::default_instance_->InitAsDefaultInstance();
  GetDataSourcesInfoRequest::default_instance_->InitAsDefaultInstance();
  GetDataSourcesInfoReply::default_instance_->InitAsDefaultInstance();
  AppDataSourceState::default_instance_->InitAsDefaultInstance();
  GetAppDataSourcesStatesReply::default_instance_->InitAsDefaultInstance();
  GetUnitsRequest::default_instance_->InitAsDefaultInstance();
  Unit::default_instance_->InitAsDefaultInstance();
  GetUnitsReply::default_instance_->InitAsDefaultInstance();
  GetServiceInfoRequest::default_instance_->InitAsDefaultInstance();
  ServiceInfo::default_instance_->InitAsDefaultInstance();
  GetServiceInfoReply::default_instance_->InitAsDefaultInstance();
  GetTuningSourcesStates::default_instance_->InitAsDefaultInstance();
  TuningSourceState::default_instance_->InitAsDefaultInstance();
  GetTuningSourcesStatesReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_2eproto {
  StaticDescriptorInitializer_network_2eproto() {
    protobuf_AddDesc_network_2eproto();
  }
} static_descriptor_initializer_network_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSignalListStartRequest::GetSignalListStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListStartRequest::InitAsDefaultInstance() {
}

GetSignalListStartRequest::GetSignalListStartRequest(const GetSignalListStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListStartRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListStartRequest::~GetSignalListStartRequest() {
  SharedDtor();
}

void GetSignalListStartRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListStartRequest_descriptor_;
}

const GetSignalListStartRequest& GetSignalListStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListStartRequest* GetSignalListStartRequest::default_instance_ = NULL;

GetSignalListStartRequest* GetSignalListStartRequest::New() const {
  return new GetSignalListStartRequest;
}

void GetSignalListStartRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSignalListStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListStartRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListStartRequest::MergeFrom(const GetSignalListStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartRequest::CopyFrom(const GetSignalListStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartRequest::IsInitialized() const {

  return true;
}

void GetSignalListStartRequest::Swap(GetSignalListStartRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListStartRequest_descriptor_;
  metadata.reflection = GetSignalListStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListStartReply::kErrorFieldNumber;
const int GetSignalListStartReply::kTotalItemCountFieldNumber;
const int GetSignalListStartReply::kPartCountFieldNumber;
const int GetSignalListStartReply::kItemsPerPartFieldNumber;
#endif  // !_MSC_VER

GetSignalListStartReply::GetSignalListStartReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListStartReply::InitAsDefaultInstance() {
}

GetSignalListStartReply::GetSignalListStartReply(const GetSignalListStartReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListStartReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  totalitemcount_ = 0;
  partcount_ = 0;
  itemsperpart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListStartReply::~GetSignalListStartReply() {
  SharedDtor();
}

void GetSignalListStartReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListStartReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListStartReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListStartReply_descriptor_;
}

const GetSignalListStartReply& GetSignalListStartReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListStartReply* GetSignalListStartReply::default_instance_ = NULL;

GetSignalListStartReply* GetSignalListStartReply::New() const {
  return new GetSignalListStartReply;
}

void GetSignalListStartReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    totalitemcount_ = 0;
    partcount_ = 0;
    itemsperpart_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListStartReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalItemCount;
        break;
      }

      // optional int32 totalItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalitemcount_)));
          set_has_totalitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partCount;
        break;
      }

      // optional int32 partCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partcount_)));
          set_has_partcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemsPerPart;
        break;
      }

      // optional int32 itemsPerPart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsPerPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsperpart_)));
          set_has_itemsperpart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListStartReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 totalItemCount = 2;
  if (has_totalitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalitemcount(), output);
  }

  // optional int32 partCount = 3;
  if (has_partcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partcount(), output);
  }

  // optional int32 itemsPerPart = 4;
  if (has_itemsperpart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemsperpart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListStartReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 totalItemCount = 2;
  if (has_totalitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalitemcount(), target);
  }

  // optional int32 partCount = 3;
  if (has_partcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partcount(), target);
  }

  // optional int32 itemsPerPart = 4;
  if (has_itemsperpart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemsperpart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListStartReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 totalItemCount = 2;
    if (has_totalitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalitemcount());
    }

    // optional int32 partCount = 3;
    if (has_partcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partcount());
    }

    // optional int32 itemsPerPart = 4;
    if (has_itemsperpart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemsperpart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListStartReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListStartReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListStartReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListStartReply::MergeFrom(const GetSignalListStartReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_totalitemcount()) {
      set_totalitemcount(from.totalitemcount());
    }
    if (from.has_partcount()) {
      set_partcount(from.partcount());
    }
    if (from.has_itemsperpart()) {
      set_itemsperpart(from.itemsperpart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListStartReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartReply::CopyFrom(const GetSignalListStartReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartReply::IsInitialized() const {

  return true;
}

void GetSignalListStartReply::Swap(GetSignalListStartReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(totalitemcount_, other->totalitemcount_);
    std::swap(partcount_, other->partcount_);
    std::swap(itemsperpart_, other->itemsperpart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListStartReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListStartReply_descriptor_;
  metadata.reflection = GetSignalListStartReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListNextRequest::kPartFieldNumber;
#endif  // !_MSC_VER

GetSignalListNextRequest::GetSignalListNextRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListNextRequest::InitAsDefaultInstance() {
}

GetSignalListNextRequest::GetSignalListNextRequest(const GetSignalListNextRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListNextRequest::SharedCtor() {
  _cached_size_ = 0;
  part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListNextRequest::~GetSignalListNextRequest() {
  SharedDtor();
}

void GetSignalListNextRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListNextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListNextRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListNextRequest_descriptor_;
}

const GetSignalListNextRequest& GetSignalListNextRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListNextRequest* GetSignalListNextRequest::default_instance_ = NULL;

GetSignalListNextRequest* GetSignalListNextRequest::New() const {
  return new GetSignalListNextRequest;
}

void GetSignalListNextRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListNextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListNextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 part = 1;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListNextRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 part = 1;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListNextRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 part = 1;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListNextRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListNextRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListNextRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListNextRequest::MergeFrom(const GetSignalListNextRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListNextRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextRequest::CopyFrom(const GetSignalListNextRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextRequest::IsInitialized() const {

  return true;
}

void GetSignalListNextRequest::Swap(GetSignalListNextRequest* other) {
  if (other != this) {
    std::swap(part_, other->part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListNextRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListNextRequest_descriptor_;
  metadata.reflection = GetSignalListNextRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListNextReply::kErrorFieldNumber;
const int GetSignalListNextReply::kPartFieldNumber;
const int GetSignalListNextReply::kAppSignalIdsFieldNumber;
#endif  // !_MSC_VER

GetSignalListNextReply::GetSignalListNextReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListNextReply::InitAsDefaultInstance() {
}

GetSignalListNextReply::GetSignalListNextReply(const GetSignalListNextReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListNextReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListNextReply::~GetSignalListNextReply() {
  SharedDtor();
}

void GetSignalListNextReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListNextReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListNextReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListNextReply_descriptor_;
}

const GetSignalListNextReply& GetSignalListNextReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListNextReply* GetSignalListNextReply::default_instance_ = NULL;

GetSignalListNextReply* GetSignalListNextReply::New() const {
  return new GetSignalListNextReply;
}

void GetSignalListNextReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    part_ = 0;
  }
  appsignalids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListNextReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part;
        break;
      }

      // optional int32 part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalIds;
        break;
      }

      // repeated string appSignalIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_appsignalids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appsignalids(this->appsignalids_size() - 1).data(),
            this->appsignalids(this->appsignalids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListNextReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->part(), output);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0; i < this->appsignalids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->appsignalids(i).data(), this->appsignalids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appsignalids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListNextReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 part = 2;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->part(), target);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalids(i).data(), this->appsignalids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->appsignalids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListNextReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

  }
  // repeated string appSignalIds = 3;
  total_size += 1 * this->appsignalids_size();
  for (int i = 0; i < this->appsignalids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->appsignalids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListNextReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListNextReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListNextReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListNextReply::MergeFrom(const GetSignalListNextReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalids_.MergeFrom(from.appsignalids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListNextReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextReply::CopyFrom(const GetSignalListNextReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextReply::IsInitialized() const {

  return true;
}

void GetSignalListNextReply::Swap(GetSignalListNextReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(part_, other->part_);
    appsignalids_.Swap(&other->appsignalids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListNextReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListNextReply_descriptor_;
  metadata.reflection = GetSignalListNextReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalParamRequest::kSignalHashesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalParamRequest::GetAppSignalParamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalParamRequest::InitAsDefaultInstance() {
}

GetAppSignalParamRequest::GetAppSignalParamRequest(const GetAppSignalParamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalParamRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalParamRequest::~GetAppSignalParamRequest() {
  SharedDtor();
}

void GetAppSignalParamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalParamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalParamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalParamRequest_descriptor_;
}

const GetAppSignalParamRequest& GetAppSignalParamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalParamRequest* GetAppSignalParamRequest::default_instance_ = NULL;

GetAppSignalParamRequest* GetAppSignalParamRequest::New() const {
  return new GetAppSignalParamRequest;
}

void GetAppSignalParamRequest::Clear() {
  signalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalParamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 signalHashes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_signalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_signalHashes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalParamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->signalhashes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalParamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->signalhashes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalParamRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 signalHashes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhashes(i));
    }
    total_size += 1 * this->signalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalParamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalParamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalParamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalParamRequest::MergeFrom(const GetAppSignalParamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhashes_.MergeFrom(from.signalhashes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalParamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalParamRequest::CopyFrom(const GetAppSignalParamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalParamRequest::IsInitialized() const {

  return true;
}

void GetAppSignalParamRequest::Swap(GetAppSignalParamRequest* other) {
  if (other != this) {
    signalhashes_.Swap(&other->signalhashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalParamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalParamRequest_descriptor_;
  metadata.reflection = GetAppSignalParamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalParamReply::kErrorFieldNumber;
const int GetAppSignalParamReply::kAppSignalParamsFieldNumber;
#endif  // !_MSC_VER

GetAppSignalParamReply::GetAppSignalParamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalParamReply::InitAsDefaultInstance() {
}

GetAppSignalParamReply::GetAppSignalParamReply(const GetAppSignalParamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalParamReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalParamReply::~GetAppSignalParamReply() {
  SharedDtor();
}

void GetAppSignalParamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalParamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalParamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalParamReply_descriptor_;
}

const GetAppSignalParamReply& GetAppSignalParamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalParamReply* GetAppSignalParamReply::default_instance_ = NULL;

GetAppSignalParamReply* GetAppSignalParamReply::New() const {
  return new GetAppSignalParamReply;
}

void GetAppSignalParamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appsignalparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalParamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalParams;
        break;
      }

      // repeated .Proto.AppSignal appSignalParams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalParams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalParamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Proto.AppSignal appSignalParams = 2;
  for (int i = 0; i < this->appsignalparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appsignalparams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalParamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Proto.AppSignal appSignalParams = 2;
  for (int i = 0; i < this->appsignalparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appsignalparams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalParamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Proto.AppSignal appSignalParams = 2;
  total_size += 1 * this->appsignalparams_size();
  for (int i = 0; i < this->appsignalparams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalparams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalParamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalParamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalParamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalParamReply::MergeFrom(const GetAppSignalParamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalparams_.MergeFrom(from.appsignalparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalParamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalParamReply::CopyFrom(const GetAppSignalParamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalParamReply::IsInitialized() const {

  return true;
}

void GetAppSignalParamReply::Swap(GetAppSignalParamReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appsignalparams_.Swap(&other->appsignalparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalParamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalParamReply_descriptor_;
  metadata.reflection = GetAppSignalParamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStateRequest::kSignalHashesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStateRequest::GetAppSignalStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStateRequest::InitAsDefaultInstance() {
}

GetAppSignalStateRequest::GetAppSignalStateRequest(const GetAppSignalStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStateRequest::~GetAppSignalStateRequest() {
  SharedDtor();
}

void GetAppSignalStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStateRequest_descriptor_;
}

const GetAppSignalStateRequest& GetAppSignalStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStateRequest* GetAppSignalStateRequest::default_instance_ = NULL;

GetAppSignalStateRequest* GetAppSignalStateRequest::New() const {
  return new GetAppSignalStateRequest;
}

void GetAppSignalStateRequest::Clear() {
  signalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 signalHashes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_signalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_signalHashes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->signalhashes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->signalhashes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStateRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 signalHashes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhashes(i));
    }
    total_size += 1 * this->signalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStateRequest::MergeFrom(const GetAppSignalStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhashes_.MergeFrom(from.signalhashes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateRequest::CopyFrom(const GetAppSignalStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateRequest::IsInitialized() const {

  return true;
}

void GetAppSignalStateRequest::Swap(GetAppSignalStateRequest* other) {
  if (other != this) {
    signalhashes_.Swap(&other->signalhashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStateRequest_descriptor_;
  metadata.reflection = GetAppSignalStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStateReply::kErrorFieldNumber;
const int GetAppSignalStateReply::kAppSignalStatesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStateReply::GetAppSignalStateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStateReply::InitAsDefaultInstance() {
}

GetAppSignalStateReply::GetAppSignalStateReply(const GetAppSignalStateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStateReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStateReply::~GetAppSignalStateReply() {
  SharedDtor();
}

void GetAppSignalStateReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalStateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStateReply_descriptor_;
}

const GetAppSignalStateReply& GetAppSignalStateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStateReply* GetAppSignalStateReply::default_instance_ = NULL;

GetAppSignalStateReply* GetAppSignalStateReply::New() const {
  return new GetAppSignalStateReply;
}

void GetAppSignalStateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appsignalstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalStates;
        break;
      }

      // repeated .Proto.AppSignalState appSignalStates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appsignalstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appsignalstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Proto.AppSignalState appSignalStates = 2;
  total_size += 1 * this->appsignalstates_size();
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStateReply::MergeFrom(const GetAppSignalStateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalstates_.MergeFrom(from.appsignalstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateReply::CopyFrom(const GetAppSignalStateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateReply::IsInitialized() const {

  return true;
}

void GetAppSignalStateReply::Swap(GetAppSignalStateReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appsignalstates_.Swap(&other->appsignalstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStateReply_descriptor_;
  metadata.reflection = GetAppSignalStateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataSourceInfo::kIdFieldNumber;
const int DataSourceInfo::kEquipmentIDFieldNumber;
const int DataSourceInfo::kCaptionFieldNumber;
const int DataSourceInfo::kDataTypeFieldNumber;
const int DataSourceInfo::kIpFieldNumber;
const int DataSourceInfo::kPortFieldNumber;
const int DataSourceInfo::kChannelFieldNumber;
const int DataSourceInfo::kSubsystemIDFieldNumber;
const int DataSourceInfo::kSubsystemFieldNumber;
const int DataSourceInfo::kLmNumberFieldNumber;
const int DataSourceInfo::kLmModuleTypeFieldNumber;
const int DataSourceInfo::kLmAdapterIDFieldNumber;
const int DataSourceInfo::kLmDataEnableFieldNumber;
const int DataSourceInfo::kLmDataIDFieldNumber;
#endif  // !_MSC_VER

DataSourceInfo::DataSourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataSourceInfo::InitAsDefaultInstance() {
}

DataSourceInfo::DataSourceInfo(const DataSourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataSourceInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datatype_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  channel_ = 0;
  subsystemid_ = 0;
  subsystem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmnumber_ = 0;
  lmmoduletype_ = 0;
  lmadapterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmdataenable_ = false;
  lmdataid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSourceInfo::~DataSourceInfo() {
  SharedDtor();
}

void DataSourceInfo::SharedDtor() {
  if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmentid_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (subsystem_ != &::google::protobuf::internal::kEmptyString) {
    delete subsystem_;
  }
  if (lmadapterid_ != &::google::protobuf::internal::kEmptyString) {
    delete lmadapterid_;
  }
  if (this != default_instance_) {
  }
}

void DataSourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSourceInfo_descriptor_;
}

const DataSourceInfo& DataSourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

DataSourceInfo* DataSourceInfo::default_instance_ = NULL;

DataSourceInfo* DataSourceInfo::New() const {
  return new DataSourceInfo;
}

void DataSourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_equipmentid()) {
      if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        equipmentid_->clear();
      }
    }
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    datatype_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    channel_ = 0;
    subsystemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_subsystem()) {
      if (subsystem_ != &::google::protobuf::internal::kEmptyString) {
        subsystem_->clear();
      }
    }
    lmnumber_ = 0;
    lmmoduletype_ = 0;
    if (has_lmadapterid()) {
      if (lmadapterid_ != &::google::protobuf::internal::kEmptyString) {
        lmadapterid_->clear();
      }
    }
    lmdataenable_ = false;
    lmdataid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataSourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipmentID;
        break;
      }

      // optional string equipmentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipmentid().data(), this->equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // optional string caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataType;
        break;
      }

      // optional int32 dataType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channel;
        break;
      }

      // optional int32 channel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_subsystemID;
        break;
      }

      // optional int32 subsystemID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subsystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subsystemid_)));
          set_has_subsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_subsystem;
        break;
      }

      // optional string subsystem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subsystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subsystem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subsystem().data(), this->subsystem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lmNumber;
        break;
      }

      // optional int32 lmNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmnumber_)));
          set_has_lmnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lmModuleType;
        break;
      }

      // optional int32 lmModuleType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmModuleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmmoduletype_)));
          set_has_lmmoduletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_lmAdapterID;
        break;
      }

      // optional string lmAdapterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmAdapterID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmadapterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmadapterid().data(), this->lmadapterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lmDataEnable;
        break;
      }

      // optional bool lmDataEnable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmDataEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lmdataenable_)));
          set_has_lmdataenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lmDataID;
        break;
      }

      // optional uint64 lmDataID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lmdataid_)));
          set_has_lmdataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataSourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string equipmentID = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->equipmentid(), output);
  }

  // optional string caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->caption(), output);
  }

  // optional int32 dataType = 4;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatype(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  // optional int32 channel = 7;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->channel(), output);
  }

  // optional int32 subsystemID = 8;
  if (has_subsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->subsystemid(), output);
  }

  // optional string subsystem = 9;
  if (has_subsystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsystem().data(), this->subsystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->subsystem(), output);
  }

  // optional int32 lmNumber = 10;
  if (has_lmnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lmnumber(), output);
  }

  // optional int32 lmModuleType = 11;
  if (has_lmmoduletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lmmoduletype(), output);
  }

  // optional string lmAdapterID = 12;
  if (has_lmadapterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmadapterid().data(), this->lmadapterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->lmadapterid(), output);
  }

  // optional bool lmDataEnable = 13;
  if (has_lmdataenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->lmdataenable(), output);
  }

  // optional uint64 lmDataID = 14;
  if (has_lmdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->lmdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataSourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string equipmentID = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->equipmentid(), target);
  }

  // optional string caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->caption(), target);
  }

  // optional int32 dataType = 4;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatype(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  // optional int32 channel = 7;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->channel(), target);
  }

  // optional int32 subsystemID = 8;
  if (has_subsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->subsystemid(), target);
  }

  // optional string subsystem = 9;
  if (has_subsystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsystem().data(), this->subsystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subsystem(), target);
  }

  // optional int32 lmNumber = 10;
  if (has_lmnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lmnumber(), target);
  }

  // optional int32 lmModuleType = 11;
  if (has_lmmoduletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lmmoduletype(), target);
  }

  // optional string lmAdapterID = 12;
  if (has_lmadapterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmadapterid().data(), this->lmadapterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lmadapterid(), target);
  }

  // optional bool lmDataEnable = 13;
  if (has_lmdataenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->lmdataenable(), target);
  }

  // optional uint64 lmDataID = 14;
  if (has_lmdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->lmdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataSourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string equipmentID = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmentid());
    }

    // optional string caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional int32 dataType = 4;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 subsystemID = 8;
    if (has_subsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subsystemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string subsystem = 9;
    if (has_subsystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subsystem());
    }

    // optional int32 lmNumber = 10;
    if (has_lmnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmnumber());
    }

    // optional int32 lmModuleType = 11;
    if (has_lmmoduletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmmoduletype());
    }

    // optional string lmAdapterID = 12;
    if (has_lmadapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmadapterid());
    }

    // optional bool lmDataEnable = 13;
    if (has_lmdataenable()) {
      total_size += 1 + 1;
    }

    // optional uint64 lmDataID = 14;
    if (has_lmdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lmdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataSourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataSourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSourceInfo::MergeFrom(const DataSourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_subsystemid()) {
      set_subsystemid(from.subsystemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subsystem()) {
      set_subsystem(from.subsystem());
    }
    if (from.has_lmnumber()) {
      set_lmnumber(from.lmnumber());
    }
    if (from.has_lmmoduletype()) {
      set_lmmoduletype(from.lmmoduletype());
    }
    if (from.has_lmadapterid()) {
      set_lmadapterid(from.lmadapterid());
    }
    if (from.has_lmdataenable()) {
      set_lmdataenable(from.lmdataenable());
    }
    if (from.has_lmdataid()) {
      set_lmdataid(from.lmdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataSourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceInfo::CopyFrom(const DataSourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceInfo::IsInitialized() const {

  return true;
}

void DataSourceInfo::Swap(DataSourceInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(caption_, other->caption_);
    std::swap(datatype_, other->datatype_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(channel_, other->channel_);
    std::swap(subsystemid_, other->subsystemid_);
    std::swap(subsystem_, other->subsystem_);
    std::swap(lmnumber_, other->lmnumber_);
    std::swap(lmmoduletype_, other->lmmoduletype_);
    std::swap(lmadapterid_, other->lmadapterid_);
    std::swap(lmdataenable_, other->lmdataenable_);
    std::swap(lmdataid_, other->lmdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataSourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSourceInfo_descriptor_;
  metadata.reflection = DataSourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetDataSourcesInfoRequest::GetDataSourcesInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataSourcesInfoRequest::InitAsDefaultInstance() {
}

GetDataSourcesInfoRequest::GetDataSourcesInfoRequest(const GetDataSourcesInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataSourcesInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataSourcesInfoRequest::~GetDataSourcesInfoRequest() {
  SharedDtor();
}

void GetDataSourcesInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataSourcesInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataSourcesInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataSourcesInfoRequest_descriptor_;
}

const GetDataSourcesInfoRequest& GetDataSourcesInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetDataSourcesInfoRequest* GetDataSourcesInfoRequest::default_instance_ = NULL;

GetDataSourcesInfoRequest* GetDataSourcesInfoRequest::New() const {
  return new GetDataSourcesInfoRequest;
}

void GetDataSourcesInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataSourcesInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetDataSourcesInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataSourcesInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataSourcesInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataSourcesInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataSourcesInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataSourcesInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataSourcesInfoRequest::MergeFrom(const GetDataSourcesInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataSourcesInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataSourcesInfoRequest::CopyFrom(const GetDataSourcesInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataSourcesInfoRequest::IsInitialized() const {

  return true;
}

void GetDataSourcesInfoRequest::Swap(GetDataSourcesInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataSourcesInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataSourcesInfoRequest_descriptor_;
  metadata.reflection = GetDataSourcesInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDataSourcesInfoReply::kErrorFieldNumber;
const int GetDataSourcesInfoReply::kDataSourceInfoFieldNumber;
#endif  // !_MSC_VER

GetDataSourcesInfoReply::GetDataSourcesInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataSourcesInfoReply::InitAsDefaultInstance() {
}

GetDataSourcesInfoReply::GetDataSourcesInfoReply(const GetDataSourcesInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataSourcesInfoReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataSourcesInfoReply::~GetDataSourcesInfoReply() {
  SharedDtor();
}

void GetDataSourcesInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataSourcesInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataSourcesInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataSourcesInfoReply_descriptor_;
}

const GetDataSourcesInfoReply& GetDataSourcesInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetDataSourcesInfoReply* GetDataSourcesInfoReply::default_instance_ = NULL;

GetDataSourcesInfoReply* GetDataSourcesInfoReply::New() const {
  return new GetDataSourcesInfoReply;
}

void GetDataSourcesInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  datasourceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataSourcesInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataSourceInfo;
        break;
      }

      // repeated .Network.DataSourceInfo dataSourceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataSourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasourceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataSourceInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDataSourcesInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  for (int i = 0; i < this->datasourceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasourceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataSourcesInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  for (int i = 0; i < this->datasourceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasourceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataSourcesInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  total_size += 1 * this->datasourceinfo_size();
  for (int i = 0; i < this->datasourceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasourceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataSourcesInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataSourcesInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataSourcesInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataSourcesInfoReply::MergeFrom(const GetDataSourcesInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasourceinfo_.MergeFrom(from.datasourceinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataSourcesInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataSourcesInfoReply::CopyFrom(const GetDataSourcesInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataSourcesInfoReply::IsInitialized() const {

  return true;
}

void GetDataSourcesInfoReply::Swap(GetDataSourcesInfoReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    datasourceinfo_.Swap(&other->datasourceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataSourcesInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataSourcesInfoReply_descriptor_;
  metadata.reflection = GetDataSourcesInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppDataSourceState::kIdFieldNumber;
const int AppDataSourceState::kUptimeFieldNumber;
const int AppDataSourceState::kReceivedDataSizeFieldNumber;
const int AppDataSourceState::kDataReceivingRateFieldNumber;
const int AppDataSourceState::kReceivedFramesCountFieldNumber;
const int AppDataSourceState::kProcessingEnabledFieldNumber;
const int AppDataSourceState::kProcessedPacketCountFieldNumber;
const int AppDataSourceState::kErrorProtocolVersionFieldNumber;
const int AppDataSourceState::kErrorFramesQuantityFieldNumber;
const int AppDataSourceState::kErrorFrameNoFieldNumber;
const int AppDataSourceState::kLostedPacketsFieldNumber;
const int AppDataSourceState::kErrorDataIDFieldNumber;
const int AppDataSourceState::kReceivedDataIDFieldNumber;
const int AppDataSourceState::kProcessingSkipedFieldNumber;
const int AppDataSourceState::kStateFieldNumber;
const int AppDataSourceState::kErrorBadFrameSizeFieldNumber;
const int AppDataSourceState::kHasErrorsFieldNumber;
#endif  // !_MSC_VER

AppDataSourceState::AppDataSourceState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppDataSourceState::InitAsDefaultInstance() {
}

AppDataSourceState::AppDataSourceState(const AppDataSourceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppDataSourceState::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  uptime_ = GOOGLE_LONGLONG(0);
  receiveddatasize_ = GOOGLE_LONGLONG(0);
  datareceivingrate_ = 0;
  receivedframescount_ = GOOGLE_LONGLONG(0);
  processingenabled_ = false;
  processedpacketcount_ = GOOGLE_LONGLONG(0);
  errorprotocolversion_ = GOOGLE_LONGLONG(0);
  errorframesquantity_ = GOOGLE_LONGLONG(0);
  errorframeno_ = GOOGLE_LONGLONG(0);
  lostedpackets_ = GOOGLE_LONGLONG(0);
  errordataid_ = GOOGLE_LONGLONG(0);
  receiveddataid_ = GOOGLE_ULONGLONG(0);
  processingskiped_ = false;
  state_ = 0;
  errorbadframesize_ = GOOGLE_LONGLONG(0);
  haserrors_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppDataSourceState::~AppDataSourceState() {
  SharedDtor();
}

void AppDataSourceState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppDataSourceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppDataSourceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppDataSourceState_descriptor_;
}

const AppDataSourceState& AppDataSourceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

AppDataSourceState* AppDataSourceState::default_instance_ = NULL;

AppDataSourceState* AppDataSourceState::New() const {
  return new AppDataSourceState;
}

void AppDataSourceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    uptime_ = GOOGLE_LONGLONG(0);
    receiveddatasize_ = GOOGLE_LONGLONG(0);
    datareceivingrate_ = 0;
    receivedframescount_ = GOOGLE_LONGLONG(0);
    processingenabled_ = false;
    processedpacketcount_ = GOOGLE_LONGLONG(0);
    errorprotocolversion_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    errorframesquantity_ = GOOGLE_LONGLONG(0);
    errorframeno_ = GOOGLE_LONGLONG(0);
    lostedpackets_ = GOOGLE_LONGLONG(0);
    errordataid_ = GOOGLE_LONGLONG(0);
    receiveddataid_ = GOOGLE_ULONGLONG(0);
    processingskiped_ = false;
    state_ = 0;
    errorbadframesize_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    haserrors_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppDataSourceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uptime;
        break;
      }

      // optional int64 uptime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receivedDataSize;
        break;
      }

      // optional int64 receivedDataSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedDataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiveddatasize_)));
          set_has_receiveddatasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dataReceivingRate;
        break;
      }

      // optional double dataReceivingRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataReceivingRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datareceivingrate_)));
          set_has_datareceivingrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receivedFramesCount;
        break;
      }

      // optional int64 receivedFramesCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedFramesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedframescount_)));
          set_has_receivedframescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_processingEnabled;
        break;
      }

      // optional bool processingEnabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processingEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processingenabled_)));
          set_has_processingenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_processedPacketCount;
        break;
      }

      // optional int64 processedPacketCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processedPacketCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processedpacketcount_)));
          set_has_processedpacketcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_errorProtocolVersion;
        break;
      }

      // optional int64 errorProtocolVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorProtocolVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorprotocolversion_)));
          set_has_errorprotocolversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_errorFramesQuantity;
        break;
      }

      // optional int64 errorFramesQuantity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorFramesQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorframesquantity_)));
          set_has_errorframesquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_errorFrameNo;
        break;
      }

      // optional int64 errorFrameNo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorFrameNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorframeno_)));
          set_has_errorframeno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lostedPackets;
        break;
      }

      // optional int64 lostedPackets = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lostedPackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lostedpackets_)));
          set_has_lostedpackets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_errorDataID;
        break;
      }

      // optional int64 errorDataID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errordataid_)));
          set_has_errordataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_receivedDataID;
        break;
      }

      // optional uint64 receivedDataID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiveddataid_)));
          set_has_receiveddataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_processingSkiped;
        break;
      }

      // optional bool processingSkiped = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processingSkiped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processingskiped_)));
          set_has_processingskiped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_state;
        break;
      }

      // optional int32 state = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_errorBadFrameSize;
        break;
      }

      // optional int64 errorBadFrameSize = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorBadFrameSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorbadframesize_)));
          set_has_errorbadframesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hasErrors;
        break;
      }

      // optional bool hasErrors = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasErrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haserrors_)));
          set_has_haserrors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppDataSourceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 uptime = 2;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uptime(), output);
  }

  // optional int64 receivedDataSize = 3;
  if (has_receiveddatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->receiveddatasize(), output);
  }

  // optional double dataReceivingRate = 4;
  if (has_datareceivingrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->datareceivingrate(), output);
  }

  // optional int64 receivedFramesCount = 5;
  if (has_receivedframescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->receivedframescount(), output);
  }

  // optional bool processingEnabled = 6;
  if (has_processingenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->processingenabled(), output);
  }

  // optional int64 processedPacketCount = 7;
  if (has_processedpacketcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->processedpacketcount(), output);
  }

  // optional int64 errorProtocolVersion = 8;
  if (has_errorprotocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->errorprotocolversion(), output);
  }

  // optional int64 errorFramesQuantity = 9;
  if (has_errorframesquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->errorframesquantity(), output);
  }

  // optional int64 errorFrameNo = 10;
  if (has_errorframeno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->errorframeno(), output);
  }

  // optional int64 lostedPackets = 11;
  if (has_lostedpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lostedpackets(), output);
  }

  // optional int64 errorDataID = 12;
  if (has_errordataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->errordataid(), output);
  }

  // optional uint64 receivedDataID = 13;
  if (has_receiveddataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->receiveddataid(), output);
  }

  // optional bool processingSkiped = 14;
  if (has_processingskiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->processingskiped(), output);
  }

  // optional int32 state = 15;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->state(), output);
  }

  // optional int64 errorBadFrameSize = 16;
  if (has_errorbadframesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->errorbadframesize(), output);
  }

  // optional bool hasErrors = 17;
  if (has_haserrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->haserrors(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppDataSourceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 uptime = 2;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uptime(), target);
  }

  // optional int64 receivedDataSize = 3;
  if (has_receiveddatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->receiveddatasize(), target);
  }

  // optional double dataReceivingRate = 4;
  if (has_datareceivingrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->datareceivingrate(), target);
  }

  // optional int64 receivedFramesCount = 5;
  if (has_receivedframescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->receivedframescount(), target);
  }

  // optional bool processingEnabled = 6;
  if (has_processingenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->processingenabled(), target);
  }

  // optional int64 processedPacketCount = 7;
  if (has_processedpacketcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->processedpacketcount(), target);
  }

  // optional int64 errorProtocolVersion = 8;
  if (has_errorprotocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->errorprotocolversion(), target);
  }

  // optional int64 errorFramesQuantity = 9;
  if (has_errorframesquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->errorframesquantity(), target);
  }

  // optional int64 errorFrameNo = 10;
  if (has_errorframeno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->errorframeno(), target);
  }

  // optional int64 lostedPackets = 11;
  if (has_lostedpackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->lostedpackets(), target);
  }

  // optional int64 errorDataID = 12;
  if (has_errordataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->errordataid(), target);
  }

  // optional uint64 receivedDataID = 13;
  if (has_receiveddataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->receiveddataid(), target);
  }

  // optional bool processingSkiped = 14;
  if (has_processingskiped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->processingskiped(), target);
  }

  // optional int32 state = 15;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->state(), target);
  }

  // optional int64 errorBadFrameSize = 16;
  if (has_errorbadframesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->errorbadframesize(), target);
  }

  // optional bool hasErrors = 17;
  if (has_haserrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->haserrors(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppDataSourceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int64 uptime = 2;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }

    // optional int64 receivedDataSize = 3;
    if (has_receiveddatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiveddatasize());
    }

    // optional double dataReceivingRate = 4;
    if (has_datareceivingrate()) {
      total_size += 1 + 8;
    }

    // optional int64 receivedFramesCount = 5;
    if (has_receivedframescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedframescount());
    }

    // optional bool processingEnabled = 6;
    if (has_processingenabled()) {
      total_size += 1 + 1;
    }

    // optional int64 processedPacketCount = 7;
    if (has_processedpacketcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->processedpacketcount());
    }

    // optional int64 errorProtocolVersion = 8;
    if (has_errorprotocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorprotocolversion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 errorFramesQuantity = 9;
    if (has_errorframesquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorframesquantity());
    }

    // optional int64 errorFrameNo = 10;
    if (has_errorframeno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorframeno());
    }

    // optional int64 lostedPackets = 11;
    if (has_lostedpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lostedpackets());
    }

    // optional int64 errorDataID = 12;
    if (has_errordataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errordataid());
    }

    // optional uint64 receivedDataID = 13;
    if (has_receiveddataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiveddataid());
    }

    // optional bool processingSkiped = 14;
    if (has_processingskiped()) {
      total_size += 1 + 1;
    }

    // optional int32 state = 15;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int64 errorBadFrameSize = 16;
    if (has_errorbadframesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorbadframesize());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool hasErrors = 17;
    if (has_haserrors()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppDataSourceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppDataSourceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppDataSourceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppDataSourceState::MergeFrom(const AppDataSourceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_receiveddatasize()) {
      set_receiveddatasize(from.receiveddatasize());
    }
    if (from.has_datareceivingrate()) {
      set_datareceivingrate(from.datareceivingrate());
    }
    if (from.has_receivedframescount()) {
      set_receivedframescount(from.receivedframescount());
    }
    if (from.has_processingenabled()) {
      set_processingenabled(from.processingenabled());
    }
    if (from.has_processedpacketcount()) {
      set_processedpacketcount(from.processedpacketcount());
    }
    if (from.has_errorprotocolversion()) {
      set_errorprotocolversion(from.errorprotocolversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errorframesquantity()) {
      set_errorframesquantity(from.errorframesquantity());
    }
    if (from.has_errorframeno()) {
      set_errorframeno(from.errorframeno());
    }
    if (from.has_lostedpackets()) {
      set_lostedpackets(from.lostedpackets());
    }
    if (from.has_errordataid()) {
      set_errordataid(from.errordataid());
    }
    if (from.has_receiveddataid()) {
      set_receiveddataid(from.receiveddataid());
    }
    if (from.has_processingskiped()) {
      set_processingskiped(from.processingskiped());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_errorbadframesize()) {
      set_errorbadframesize(from.errorbadframesize());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_haserrors()) {
      set_haserrors(from.haserrors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppDataSourceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataSourceState::CopyFrom(const AppDataSourceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataSourceState::IsInitialized() const {

  return true;
}

void AppDataSourceState::Swap(AppDataSourceState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uptime_, other->uptime_);
    std::swap(receiveddatasize_, other->receiveddatasize_);
    std::swap(datareceivingrate_, other->datareceivingrate_);
    std::swap(receivedframescount_, other->receivedframescount_);
    std::swap(processingenabled_, other->processingenabled_);
    std::swap(processedpacketcount_, other->processedpacketcount_);
    std::swap(errorprotocolversion_, other->errorprotocolversion_);
    std::swap(errorframesquantity_, other->errorframesquantity_);
    std::swap(errorframeno_, other->errorframeno_);
    std::swap(lostedpackets_, other->lostedpackets_);
    std::swap(errordataid_, other->errordataid_);
    std::swap(receiveddataid_, other->receiveddataid_);
    std::swap(processingskiped_, other->processingskiped_);
    std::swap(state_, other->state_);
    std::swap(errorbadframesize_, other->errorbadframesize_);
    std::swap(haserrors_, other->haserrors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppDataSourceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppDataSourceState_descriptor_;
  metadata.reflection = AppDataSourceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppDataSourcesStatesReply::kErrorFieldNumber;
const int GetAppDataSourcesStatesReply::kAppDataSourcesStatesFieldNumber;
#endif  // !_MSC_VER

GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppDataSourcesStatesReply::InitAsDefaultInstance() {
}

GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply(const GetAppDataSourcesStatesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppDataSourcesStatesReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppDataSourcesStatesReply::~GetAppDataSourcesStatesReply() {
  SharedDtor();
}

void GetAppDataSourcesStatesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppDataSourcesStatesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppDataSourcesStatesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppDataSourcesStatesReply_descriptor_;
}

const GetAppDataSourcesStatesReply& GetAppDataSourcesStatesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppDataSourcesStatesReply* GetAppDataSourcesStatesReply::default_instance_ = NULL;

GetAppDataSourcesStatesReply* GetAppDataSourcesStatesReply::New() const {
  return new GetAppDataSourcesStatesReply;
}

void GetAppDataSourcesStatesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appdatasourcesstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppDataSourcesStatesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appDataSourcesStates;
        break;
      }

      // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appDataSourcesStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appdatasourcesstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appDataSourcesStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppDataSourcesStatesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  for (int i = 0; i < this->appdatasourcesstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appdatasourcesstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppDataSourcesStatesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  for (int i = 0; i < this->appdatasourcesstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appdatasourcesstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppDataSourcesStatesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  total_size += 1 * this->appdatasourcesstates_size();
  for (int i = 0; i < this->appdatasourcesstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appdatasourcesstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppDataSourcesStatesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppDataSourcesStatesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppDataSourcesStatesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppDataSourcesStatesReply::MergeFrom(const GetAppDataSourcesStatesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appdatasourcesstates_.MergeFrom(from.appdatasourcesstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppDataSourcesStatesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppDataSourcesStatesReply::CopyFrom(const GetAppDataSourcesStatesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDataSourcesStatesReply::IsInitialized() const {

  return true;
}

void GetAppDataSourcesStatesReply::Swap(GetAppDataSourcesStatesReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appdatasourcesstates_.Swap(&other->appdatasourcesstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppDataSourcesStatesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppDataSourcesStatesReply_descriptor_;
  metadata.reflection = GetAppDataSourcesStatesReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetUnitsRequest::GetUnitsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUnitsRequest::InitAsDefaultInstance() {
}

GetUnitsRequest::GetUnitsRequest(const GetUnitsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnitsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnitsRequest::~GetUnitsRequest() {
  SharedDtor();
}

void GetUnitsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnitsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUnitsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnitsRequest_descriptor_;
}

const GetUnitsRequest& GetUnitsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetUnitsRequest* GetUnitsRequest::default_instance_ = NULL;

GetUnitsRequest* GetUnitsRequest::New() const {
  return new GetUnitsRequest;
}

void GetUnitsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnitsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetUnitsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUnitsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnitsRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnitsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnitsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUnitsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnitsRequest::MergeFrom(const GetUnitsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnitsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnitsRequest::CopyFrom(const GetUnitsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnitsRequest::IsInitialized() const {

  return true;
}

void GetUnitsRequest::Swap(GetUnitsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUnitsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUnitsRequest_descriptor_;
  metadata.reflection = GetUnitsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Unit::kIdFieldNumber;
const int Unit::kUnitFieldNumber;
#endif  // !_MSC_VER

Unit::Unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unit::InitAsDefaultInstance() {
}

Unit::Unit(const Unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unit::~Unit() {
  SharedDtor();
}

void Unit::SharedDtor() {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (this != default_instance_) {
  }
}

void Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unit_descriptor_;
}

const Unit& Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

Unit* Unit::default_instance_ = NULL;

Unit* Unit::New() const {
  return new Unit;
}

void Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unit;
        break;
      }

      // optional string unit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string unit = 2;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {

  return true;
}

void Unit::Swap(Unit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unit_, other->unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unit_descriptor_;
  metadata.reflection = Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUnitsReply::kErrorFieldNumber;
const int GetUnitsReply::kUnitsFieldNumber;
#endif  // !_MSC_VER

GetUnitsReply::GetUnitsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUnitsReply::InitAsDefaultInstance() {
}

GetUnitsReply::GetUnitsReply(const GetUnitsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnitsReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnitsReply::~GetUnitsReply() {
  SharedDtor();
}

void GetUnitsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnitsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUnitsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnitsReply_descriptor_;
}

const GetUnitsReply& GetUnitsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetUnitsReply* GetUnitsReply::default_instance_ = NULL;

GetUnitsReply* GetUnitsReply::New() const {
  return new GetUnitsReply;
}

void GetUnitsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnitsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }

      // repeated .Network.Unit units = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_units;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUnitsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.Unit units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->units(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUnitsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.Unit units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnitsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.Unit units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnitsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnitsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUnitsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnitsReply::MergeFrom(const GetUnitsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnitsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnitsReply::CopyFrom(const GetUnitsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnitsReply::IsInitialized() const {

  return true;
}

void GetUnitsReply::Swap(GetUnitsReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUnitsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUnitsReply_descriptor_;
  metadata.reflection = GetUnitsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServiceInfoRequest::GetServiceInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceInfoRequest::InitAsDefaultInstance() {
}

GetServiceInfoRequest::GetServiceInfoRequest(const GetServiceInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceInfoRequest::~GetServiceInfoRequest() {
  SharedDtor();
}

void GetServiceInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServiceInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceInfoRequest_descriptor_;
}

const GetServiceInfoRequest& GetServiceInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetServiceInfoRequest* GetServiceInfoRequest::default_instance_ = NULL;

GetServiceInfoRequest* GetServiceInfoRequest::New() const {
  return new GetServiceInfoRequest;
}

void GetServiceInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServiceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceInfoRequest::MergeFrom(const GetServiceInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceInfoRequest::CopyFrom(const GetServiceInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceInfoRequest::IsInitialized() const {

  return true;
}

void GetServiceInfoRequest::Swap(GetServiceInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceInfoRequest_descriptor_;
  metadata.reflection = GetServiceInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceInfo::kTypeFieldNumber;
const int ServiceInfo::kMajorVersionFieldNumber;
const int ServiceInfo::kMinorVersionFieldNumber;
const int ServiceInfo::kBuildNoFieldNumber;
const int ServiceInfo::kCrcFieldNumber;
const int ServiceInfo::kUptimeFieldNumber;
const int ServiceInfo::kServiceStateFieldNumber;
const int ServiceInfo::kServiceUptimeFieldNumber;
const int ServiceInfo::kClientRequestIPFieldNumber;
const int ServiceInfo::kClientRequestPortFieldNumber;
#endif  // !_MSC_VER

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceInfo::InitAsDefaultInstance() {
}

ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  majorversion_ = 0;
  minorversion_ = 0;
  buildno_ = 0;
  crc_ = 0u;
  uptime_ = GOOGLE_LONGLONG(0);
  servicestate_ = 0;
  serviceuptime_ = GOOGLE_LONGLONG(0);
  clientrequestip_ = 0u;
  clientrequestport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceInfo::~ServiceInfo() {
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfo_descriptor_;
}

const ServiceInfo& ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ServiceInfo* ServiceInfo::default_instance_ = NULL;

ServiceInfo* ServiceInfo::New() const {
  return new ServiceInfo;
}

void ServiceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    majorversion_ = 0;
    minorversion_ = 0;
    buildno_ = 0;
    crc_ = 0u;
    uptime_ = GOOGLE_LONGLONG(0);
    servicestate_ = 0;
    serviceuptime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clientrequestip_ = 0u;
    clientrequestport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_majorVersion;
        break;
      }

      // optional int32 majorVersion = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majorVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorversion_)));
          set_has_majorversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minorVersion;
        break;
      }

      // optional int32 minorVersion = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minorVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minorversion_)));
          set_has_minorversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buildNo;
        break;
      }

      // optional int32 buildNo = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildno_)));
          set_has_buildno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crc;
        break;
      }

      // optional uint32 crc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uptime;
        break;
      }

      // optional int64 uptime = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serviceState;
        break;
      }

      // optional int32 serviceState = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicestate_)));
          set_has_servicestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_serviceUptime;
        break;
      }

      // optional int64 serviceUptime = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceUptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serviceuptime_)));
          set_has_serviceuptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clientRequestIP;
        break;
      }

      // optional uint32 clientRequestIP = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientRequestIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientrequestip_)));
          set_has_clientrequestip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_clientRequestPort;
        break;
      }

      // optional int32 clientRequestPort = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientRequestPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientrequestport_)));
          set_has_clientrequestport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 majorVersion = 2 [default = 0];
  if (has_majorversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->majorversion(), output);
  }

  // optional int32 minorVersion = 3 [default = 0];
  if (has_minorversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minorversion(), output);
  }

  // optional int32 buildNo = 4 [default = 0];
  if (has_buildno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buildno(), output);
  }

  // optional uint32 crc = 5 [default = 0];
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crc(), output);
  }

  // optional int64 uptime = 6 [default = 0];
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->uptime(), output);
  }

  // optional int32 serviceState = 7 [default = 0];
  if (has_servicestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->servicestate(), output);
  }

  // optional int64 serviceUptime = 8 [default = 0];
  if (has_serviceuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->serviceuptime(), output);
  }

  // optional uint32 clientRequestIP = 9 [default = 0];
  if (has_clientrequestip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clientrequestip(), output);
  }

  // optional int32 clientRequestPort = 10 [default = 0];
  if (has_clientrequestport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->clientrequestport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 majorVersion = 2 [default = 0];
  if (has_majorversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->majorversion(), target);
  }

  // optional int32 minorVersion = 3 [default = 0];
  if (has_minorversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minorversion(), target);
  }

  // optional int32 buildNo = 4 [default = 0];
  if (has_buildno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buildno(), target);
  }

  // optional uint32 crc = 5 [default = 0];
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crc(), target);
  }

  // optional int64 uptime = 6 [default = 0];
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->uptime(), target);
  }

  // optional int32 serviceState = 7 [default = 0];
  if (has_servicestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->servicestate(), target);
  }

  // optional int64 serviceUptime = 8 [default = 0];
  if (has_serviceuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->serviceuptime(), target);
  }

  // optional uint32 clientRequestIP = 9 [default = 0];
  if (has_clientrequestip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clientrequestip(), target);
  }

  // optional int32 clientRequestPort = 10 [default = 0];
  if (has_clientrequestport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->clientrequestport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 majorVersion = 2 [default = 0];
    if (has_majorversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorversion());
    }

    // optional int32 minorVersion = 3 [default = 0];
    if (has_minorversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minorversion());
    }

    // optional int32 buildNo = 4 [default = 0];
    if (has_buildno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildno());
    }

    // optional uint32 crc = 5 [default = 0];
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

    // optional int64 uptime = 6 [default = 0];
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }

    // optional int32 serviceState = 7 [default = 0];
    if (has_servicestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicestate());
    }

    // optional int64 serviceUptime = 8 [default = 0];
    if (has_serviceuptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serviceuptime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 clientRequestIP = 9 [default = 0];
    if (has_clientrequestip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientrequestip());
    }

    // optional int32 clientRequestPort = 10 [default = 0];
    if (has_clientrequestport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientrequestport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_majorversion()) {
      set_majorversion(from.majorversion());
    }
    if (from.has_minorversion()) {
      set_minorversion(from.minorversion());
    }
    if (from.has_buildno()) {
      set_buildno(from.buildno());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_servicestate()) {
      set_servicestate(from.servicestate());
    }
    if (from.has_serviceuptime()) {
      set_serviceuptime(from.serviceuptime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientrequestip()) {
      set_clientrequestip(from.clientrequestip());
    }
    if (from.has_clientrequestport()) {
      set_clientrequestport(from.clientrequestport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {

  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(majorversion_, other->majorversion_);
    std::swap(minorversion_, other->minorversion_);
    std::swap(buildno_, other->buildno_);
    std::swap(crc_, other->crc_);
    std::swap(uptime_, other->uptime_);
    std::swap(servicestate_, other->servicestate_);
    std::swap(serviceuptime_, other->serviceuptime_);
    std::swap(clientrequestip_, other->clientrequestip_);
    std::swap(clientrequestport_, other->clientrequestport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfo_descriptor_;
  metadata.reflection = ServiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceInfoReply::kErrorFieldNumber;
const int GetServiceInfoReply::kServiceInfoFieldNumber;
#endif  // !_MSC_VER

GetServiceInfoReply::GetServiceInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceInfoReply::InitAsDefaultInstance() {
  serviceinfo_ = const_cast< ::Network::ServiceInfo*>(&::Network::ServiceInfo::default_instance());
}

GetServiceInfoReply::GetServiceInfoReply(const GetServiceInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceInfoReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  serviceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceInfoReply::~GetServiceInfoReply() {
  SharedDtor();
}

void GetServiceInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete serviceinfo_;
  }
}

void GetServiceInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceInfoReply_descriptor_;
}

const GetServiceInfoReply& GetServiceInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetServiceInfoReply* GetServiceInfoReply::default_instance_ = NULL;

GetServiceInfoReply* GetServiceInfoReply::New() const {
  return new GetServiceInfoReply;
}

void GetServiceInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_serviceinfo()) {
      if (serviceinfo_ != NULL) serviceinfo_->::Network::ServiceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serviceInfo;
        break;
      }

      // required .Network.ServiceInfo serviceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // required .Network.ServiceInfo serviceInfo = 2;
  if (has_serviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serviceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // required .Network.ServiceInfo serviceInfo = 2;
  if (has_serviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serviceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required .Network.ServiceInfo serviceInfo = 2;
    if (has_serviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceInfoReply::MergeFrom(const GetServiceInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_serviceinfo()) {
      mutable_serviceinfo()->::Network::ServiceInfo::MergeFrom(from.serviceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceInfoReply::CopyFrom(const GetServiceInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetServiceInfoReply::Swap(GetServiceInfoReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(serviceinfo_, other->serviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceInfoReply_descriptor_;
  metadata.reflection = GetServiceInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTuningSourcesStates::GetTuningSourcesStates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTuningSourcesStates::InitAsDefaultInstance() {
}

GetTuningSourcesStates::GetTuningSourcesStates(const GetTuningSourcesStates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTuningSourcesStates::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTuningSourcesStates::~GetTuningSourcesStates() {
  SharedDtor();
}

void GetTuningSourcesStates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTuningSourcesStates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTuningSourcesStates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTuningSourcesStates_descriptor_;
}

const GetTuningSourcesStates& GetTuningSourcesStates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetTuningSourcesStates* GetTuningSourcesStates::default_instance_ = NULL;

GetTuningSourcesStates* GetTuningSourcesStates::New() const {
  return new GetTuningSourcesStates;
}

void GetTuningSourcesStates::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTuningSourcesStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTuningSourcesStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTuningSourcesStates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTuningSourcesStates::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTuningSourcesStates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTuningSourcesStates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTuningSourcesStates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTuningSourcesStates::MergeFrom(const GetTuningSourcesStates& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTuningSourcesStates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesStates::CopyFrom(const GetTuningSourcesStates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesStates::IsInitialized() const {

  return true;
}

void GetTuningSourcesStates::Swap(GetTuningSourcesStates* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTuningSourcesStates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTuningSourcesStates_descriptor_;
  metadata.reflection = GetTuningSourcesStates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSourceState::kIdFieldNumber;
const int TuningSourceState::kUptimeFieldNumber;
const int TuningSourceState::kReceivedDataSizeFieldNumber;
const int TuningSourceState::kDataReceivingRateFieldNumber;
const int TuningSourceState::kRespondFieldNumber;
#endif  // !_MSC_VER

TuningSourceState::TuningSourceState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSourceState::InitAsDefaultInstance() {
}

TuningSourceState::TuningSourceState(const TuningSourceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSourceState::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  uptime_ = GOOGLE_LONGLONG(0);
  receiveddatasize_ = GOOGLE_LONGLONG(0);
  datareceivingrate_ = 0;
  respond_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSourceState::~TuningSourceState() {
  SharedDtor();
}

void TuningSourceState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSourceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSourceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSourceState_descriptor_;
}

const TuningSourceState& TuningSourceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSourceState* TuningSourceState::default_instance_ = NULL;

TuningSourceState* TuningSourceState::New() const {
  return new TuningSourceState;
}

void TuningSourceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    uptime_ = GOOGLE_LONGLONG(0);
    receiveddatasize_ = GOOGLE_LONGLONG(0);
    datareceivingrate_ = 0;
    respond_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSourceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uptime;
        break;
      }

      // optional int64 uptime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receivedDataSize;
        break;
      }

      // optional int64 receivedDataSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedDataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiveddatasize_)));
          set_has_receiveddatasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dataReceivingRate;
        break;
      }

      // optional double dataReceivingRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataReceivingRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datareceivingrate_)));
          set_has_datareceivingrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_respond;
        break;
      }

      // optional bool respond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_respond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &respond_)));
          set_has_respond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSourceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 uptime = 2;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uptime(), output);
  }

  // optional int64 receivedDataSize = 3;
  if (has_receiveddatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->receiveddatasize(), output);
  }

  // optional double dataReceivingRate = 4;
  if (has_datareceivingrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->datareceivingrate(), output);
  }

  // optional bool respond = 5;
  if (has_respond()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->respond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSourceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 uptime = 2;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uptime(), target);
  }

  // optional int64 receivedDataSize = 3;
  if (has_receiveddatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->receiveddatasize(), target);
  }

  // optional double dataReceivingRate = 4;
  if (has_datareceivingrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->datareceivingrate(), target);
  }

  // optional bool respond = 5;
  if (has_respond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->respond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSourceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int64 uptime = 2;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }

    // optional int64 receivedDataSize = 3;
    if (has_receiveddatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiveddatasize());
    }

    // optional double dataReceivingRate = 4;
    if (has_datareceivingrate()) {
      total_size += 1 + 8;
    }

    // optional bool respond = 5;
    if (has_respond()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSourceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSourceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSourceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSourceState::MergeFrom(const TuningSourceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_receiveddatasize()) {
      set_receiveddatasize(from.receiveddatasize());
    }
    if (from.has_datareceivingrate()) {
      set_datareceivingrate(from.datareceivingrate());
    }
    if (from.has_respond()) {
      set_respond(from.respond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSourceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSourceState::CopyFrom(const TuningSourceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSourceState::IsInitialized() const {

  return true;
}

void TuningSourceState::Swap(TuningSourceState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uptime_, other->uptime_);
    std::swap(receiveddatasize_, other->receiveddatasize_);
    std::swap(datareceivingrate_, other->datareceivingrate_);
    std::swap(respond_, other->respond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSourceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSourceState_descriptor_;
  metadata.reflection = TuningSourceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTuningSourcesStatesReply::kErrorFieldNumber;
const int GetTuningSourcesStatesReply::kTuningDataSourcesStatesFieldNumber;
#endif  // !_MSC_VER

GetTuningSourcesStatesReply::GetTuningSourcesStatesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTuningSourcesStatesReply::InitAsDefaultInstance() {
}

GetTuningSourcesStatesReply::GetTuningSourcesStatesReply(const GetTuningSourcesStatesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTuningSourcesStatesReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTuningSourcesStatesReply::~GetTuningSourcesStatesReply() {
  SharedDtor();
}

void GetTuningSourcesStatesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTuningSourcesStatesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTuningSourcesStatesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTuningSourcesStatesReply_descriptor_;
}

const GetTuningSourcesStatesReply& GetTuningSourcesStatesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetTuningSourcesStatesReply* GetTuningSourcesStatesReply::default_instance_ = NULL;

GetTuningSourcesStatesReply* GetTuningSourcesStatesReply::New() const {
  return new GetTuningSourcesStatesReply;
}

void GetTuningSourcesStatesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  tuningdatasourcesstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTuningSourcesStatesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningDataSourcesStates;
        break;
      }

      // repeated .Network.TuningSourceState tuningDataSourcesStates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningDataSourcesStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuningdatasourcesstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningDataSourcesStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTuningSourcesStatesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.TuningSourceState tuningDataSourcesStates = 2;
  for (int i = 0; i < this->tuningdatasourcesstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tuningdatasourcesstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTuningSourcesStatesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.TuningSourceState tuningDataSourcesStates = 2;
  for (int i = 0; i < this->tuningdatasourcesstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tuningdatasourcesstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTuningSourcesStatesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.TuningSourceState tuningDataSourcesStates = 2;
  total_size += 1 * this->tuningdatasourcesstates_size();
  for (int i = 0; i < this->tuningdatasourcesstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuningdatasourcesstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTuningSourcesStatesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTuningSourcesStatesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTuningSourcesStatesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTuningSourcesStatesReply::MergeFrom(const GetTuningSourcesStatesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuningdatasourcesstates_.MergeFrom(from.tuningdatasourcesstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTuningSourcesStatesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesStatesReply::CopyFrom(const GetTuningSourcesStatesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesStatesReply::IsInitialized() const {

  return true;
}

void GetTuningSourcesStatesReply::Swap(GetTuningSourcesStatesReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    tuningdatasourcesstates_.Swap(&other->tuningdatasourcesstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTuningSourcesStatesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTuningSourcesStatesReply_descriptor_;
  metadata.reflection = GetTuningSourcesStatesReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Network

// @@protoc_insertion_point(global_scope)
