#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 4127)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4996)
#pragma warning(disable : 6011)
#pragma warning(disable : 6326)
#pragma warning(disable : 6385)
#pragma warning(disable : 6387)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Network {
constexpr GetSignalListStartRequest::GetSignalListStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetSignalListStartRequestDefaultTypeInternal {
  constexpr GetSignalListStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalListStartRequestDefaultTypeInternal() {}
  union {
    GetSignalListStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalListStartRequestDefaultTypeInternal _GetSignalListStartRequest_default_instance_;
constexpr GetSignalListStartReply::GetSignalListStartReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(0)
  , totalitemcount_(0)
  , partcount_(0)
  , itemsperpart_(0){}
struct GetSignalListStartReplyDefaultTypeInternal {
  constexpr GetSignalListStartReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalListStartReplyDefaultTypeInternal() {}
  union {
    GetSignalListStartReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalListStartReplyDefaultTypeInternal _GetSignalListStartReply_default_instance_;
constexpr GetSignalListNextRequest::GetSignalListNextRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : part_(0){}
struct GetSignalListNextRequestDefaultTypeInternal {
  constexpr GetSignalListNextRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalListNextRequestDefaultTypeInternal() {}
  union {
    GetSignalListNextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalListNextRequestDefaultTypeInternal _GetSignalListNextRequest_default_instance_;
constexpr GetSignalListNextReply::GetSignalListNextReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalids_()
  , error_(0)
  , part_(0){}
struct GetSignalListNextReplyDefaultTypeInternal {
  constexpr GetSignalListNextReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalListNextReplyDefaultTypeInternal() {}
  union {
    GetSignalListNextReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalListNextReplyDefaultTypeInternal _GetSignalListNextReply_default_instance_;
constexpr GetAppSignalParamRequest::GetAppSignalParamRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhashes_(){}
struct GetAppSignalParamRequestDefaultTypeInternal {
  constexpr GetAppSignalParamRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalParamRequestDefaultTypeInternal() {}
  union {
    GetAppSignalParamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalParamRequestDefaultTypeInternal _GetAppSignalParamRequest_default_instance_;
constexpr GetAppSignalParamReply::GetAppSignalParamReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignals_()
  , error_(0){}
struct GetAppSignalParamReplyDefaultTypeInternal {
  constexpr GetAppSignalParamReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalParamReplyDefaultTypeInternal() {}
  union {
    GetAppSignalParamReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalParamReplyDefaultTypeInternal _GetAppSignalParamReply_default_instance_;
constexpr GetAppSignalRequest::GetAppSignalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhashes_(){}
struct GetAppSignalRequestDefaultTypeInternal {
  constexpr GetAppSignalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalRequestDefaultTypeInternal() {}
  union {
    GetAppSignalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalRequestDefaultTypeInternal _GetAppSignalRequest_default_instance_;
constexpr GetAppSignalReply::GetAppSignalReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignals_()
  , error_(0){}
struct GetAppSignalReplyDefaultTypeInternal {
  constexpr GetAppSignalReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalReplyDefaultTypeInternal() {}
  union {
    GetAppSignalReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalReplyDefaultTypeInternal _GetAppSignalReply_default_instance_;
constexpr GetAppSignalStateRequest::GetAppSignalStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhashes_(){}
struct GetAppSignalStateRequestDefaultTypeInternal {
  constexpr GetAppSignalStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStateRequestDefaultTypeInternal() {}
  union {
    GetAppSignalStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStateRequestDefaultTypeInternal _GetAppSignalStateRequest_default_instance_;
constexpr GetAppSignalStateReply::GetAppSignalStateReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalstates_()
  , servertimeutc_(PROTOBUF_LONGLONG(0))
  , servertimelocal_(PROTOBUF_LONGLONG(0))
  , error_(0){}
struct GetAppSignalStateReplyDefaultTypeInternal {
  constexpr GetAppSignalStateReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStateReplyDefaultTypeInternal() {}
  union {
    GetAppSignalStateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStateReplyDefaultTypeInternal _GetAppSignalStateReply_default_instance_;
constexpr GetAppSignalStateChangesRequest::GetAppSignalStateChangesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetAppSignalStateChangesRequestDefaultTypeInternal {
  constexpr GetAppSignalStateChangesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStateChangesRequestDefaultTypeInternal() {}
  union {
    GetAppSignalStateChangesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStateChangesRequestDefaultTypeInternal _GetAppSignalStateChangesRequest_default_instance_;
constexpr GetAppSignalStateChangesReply::GetAppSignalStateChangesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalstates_()
  , servertimeutc_(PROTOBUF_LONGLONG(0))
  , error_(0)
  , pendingstatescount_(0)
  , servertimelocal_(PROTOBUF_LONGLONG(0)){}
struct GetAppSignalStateChangesReplyDefaultTypeInternal {
  constexpr GetAppSignalStateChangesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStateChangesReplyDefaultTypeInternal() {}
  union {
    GetAppSignalStateChangesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStateChangesReplyDefaultTypeInternal _GetAppSignalStateChangesReply_default_instance_;
constexpr DataSourceInfo::DataSourceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lmequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmcaption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmsubsystemid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmsubsystemchannel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmadapterid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmpresetname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_ULONGLONG(0))
  , lmdatatype_(0)
  , lmport_(0)
  , lmsubsystemkey_(0)
  , lmnumber_(0)
  , lmmoduletype_(0)
  , lmdataenable_(false)
  , lmuniqueid_(PROTOBUF_ULONGLONG(0))
  , lmdataid_(0u)
  , lmrupframesquantity_(0){}
struct DataSourceInfoDefaultTypeInternal {
  constexpr DataSourceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataSourceInfoDefaultTypeInternal() {}
  union {
    DataSourceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataSourceInfoDefaultTypeInternal _DataSourceInfo_default_instance_;
constexpr GetDataSourcesInfoRequest::GetDataSourcesInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDataSourcesInfoRequestDefaultTypeInternal {
  constexpr GetDataSourcesInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDataSourcesInfoRequestDefaultTypeInternal() {}
  union {
    GetDataSourcesInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDataSourcesInfoRequestDefaultTypeInternal _GetDataSourcesInfoRequest_default_instance_;
constexpr GetDataSourcesInfoReply::GetDataSourcesInfoReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datasourceinfo_()
  , error_(0){}
struct GetDataSourcesInfoReplyDefaultTypeInternal {
  constexpr GetDataSourcesInfoReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDataSourcesInfoReplyDefaultTypeInternal() {}
  union {
    GetDataSourcesInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDataSourcesInfoReplyDefaultTypeInternal _GetDataSourcesInfoReply_default_instance_;
constexpr AppDataReceiveState::AppDataReceiveState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receivingrate_(0)
  , udpreceivingrate_(0)
  , rupframescount_(PROTOBUF_LONGLONG(0))
  , simframescount_(PROTOBUF_LONGLONG(0))
  , errdatagramsize_(PROTOBUF_LONGLONG(0))
  , errsimversion_(PROTOBUF_LONGLONG(0))
  , errunknownappdatasourceip_(PROTOBUF_LONGLONG(0))
  , errrupframecrc_(PROTOBUF_LONGLONG(0))
  , errnotexpectedsimpacket_(PROTOBUF_LONGLONG(0))
  , rupframesreceivingrate_(0){}
struct AppDataReceiveStateDefaultTypeInternal {
  constexpr AppDataReceiveStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDataReceiveStateDefaultTypeInternal() {}
  union {
    AppDataReceiveState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDataReceiveStateDefaultTypeInternal _AppDataReceiveState_default_instance_;
constexpr AppDataSourceState::AppDataSourceState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lmequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_ULONGLONG(0))
  , uptime_(PROTOBUF_LONGLONG(0))
  , receiveddataid_(PROTOBUF_ULONGLONG(0))
  , rupframesqueuecursize_(0)
  , rupframesqueuecurmaxsize_(0)
  , datareceivingrate_(0)
  , receiveddatasize_(PROTOBUF_LONGLONG(0))
  , receivedframescount_(PROTOBUF_LONGLONG(0))
  , receivedpacketcount_(PROTOBUF_LONGLONG(0))
  , datareceives_(false)
  , dataprocessingenabled_(false)
  , rupframenumerator_(0u)
  , lostpacketcount_(PROTOBUF_LONGLONG(0))
  , processedpacketcount_(PROTOBUF_LONGLONG(0))
  , lastpacketsystemtime_(PROTOBUF_LONGLONG(0))
  , rupframeplanttime_(PROTOBUF_LONGLONG(0))
  , signalstatesqueuecursize_(0)
  , signalstatesqueuecurmaxsize_(0)
  , errorprotocolversion_(PROTOBUF_LONGLONG(0))
  , errorframesquantity_(PROTOBUF_LONGLONG(0))
  , errorframeno_(PROTOBUF_LONGLONG(0))
  , errordataid_(PROTOBUF_LONGLONG(0))
  , acquiredsignalscount_(0)
  , rupframesqueuesize_(0)
  , errorframesize_(PROTOBUF_LONGLONG(0))
  , errorduplicateplanttime_(PROTOBUF_LONGLONG(0))
  , errornonmonotonicplanttime_(PROTOBUF_LONGLONG(0))
  , signalstatesqueuesize_(0)
  , state_(0){}
struct AppDataSourceStateDefaultTypeInternal {
  constexpr AppDataSourceStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDataSourceStateDefaultTypeInternal() {}
  union {
    AppDataSourceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDataSourceStateDefaultTypeInternal _AppDataSourceState_default_instance_;
constexpr GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appdatasourcesstates_()
  , error_(0){}
struct GetAppDataSourcesStatesReplyDefaultTypeInternal {
  constexpr GetAppDataSourcesStatesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppDataSourcesStatesReplyDefaultTypeInternal() {}
  union {
    GetAppDataSourcesStatesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppDataSourcesStatesReplyDefaultTypeInternal _GetAppDataSourcesStatesReply_default_instance_;
constexpr AppDataServiceState::AppDataServiceState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appdatareceivestate_(nullptr)
  , cfgserviceip_(0u)
  , cfgserviceisconnected_(false)
  , archiveserviceisconnected_(false)
  , cfgserviceport_(0)
  , archiveserviceip_(0u)
  , archiveserviceport_(0){}
struct AppDataServiceStateDefaultTypeInternal {
  constexpr AppDataServiceStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDataServiceStateDefaultTypeInternal() {}
  union {
    AppDataServiceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDataServiceStateDefaultTypeInternal _AppDataServiceState_default_instance_;
constexpr SoftwareInfo::SoftwareInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buildbranch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commitsha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientdescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , majorversion_(0)
  , minorversion_(0)
  , commitno_(0)
  , buildno_(0)
  , crc_(0u)
  , softwaretype_(8000){}
struct SoftwareInfoDefaultTypeInternal {
  constexpr SoftwareInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoftwareInfoDefaultTypeInternal() {}
  union {
    SoftwareInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoftwareInfoDefaultTypeInternal _SoftwareInfo_default_instance_;
constexpr GetServiceInfoRequest::GetServiceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetServiceInfoRequestDefaultTypeInternal {
  constexpr GetServiceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServiceInfoRequestDefaultTypeInternal() {}
  union {
    GetServiceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServiceInfoRequestDefaultTypeInternal _GetServiceInfoRequest_default_instance_;
constexpr SessionParams::SessionParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currentsettingsprofile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , softwarerunmode_(0){}
struct SessionParamsDefaultTypeInternal {
  constexpr SessionParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionParamsDefaultTypeInternal() {}
  union {
    SessionParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionParamsDefaultTypeInternal _SessionParams_default_instance_;
constexpr ServiceInfo::ServiceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settingsxml_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , softwareinfo_(nullptr)
  , sessionparams_(nullptr)
  , uptime_(PROTOBUF_LONGLONG(0))
  , serviceuptime_(PROTOBUF_LONGLONG(0))
  , servicestate_(0){}
struct ServiceInfoDefaultTypeInternal {
  constexpr ServiceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceInfoDefaultTypeInternal() {}
  union {
    ServiceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
constexpr GetServiceInfoReply::GetServiceInfoReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serviceinfo_(nullptr)
  , error_(0){}
struct GetServiceInfoReplyDefaultTypeInternal {
  constexpr GetServiceInfoReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServiceInfoReplyDefaultTypeInternal() {}
  union {
    GetServiceInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServiceInfoReplyDefaultTypeInternal _GetServiceInfoReply_default_instance_;
constexpr ConfigurationServiceState::ConfigurationServiceState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currentbuilddirectory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checkbuildattemptquantity_(0)
  , buildcheckerstate_(0){}
struct ConfigurationServiceStateDefaultTypeInternal {
  constexpr ConfigurationServiceStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationServiceStateDefaultTypeInternal() {}
  union {
    ConfigurationServiceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationServiceStateDefaultTypeInternal _ConfigurationServiceState_default_instance_;
constexpr ServiceClientInfo::ServiceClientInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : softwareinfo_(nullptr)
  , ip_(0)
  , isactual_(false)
  , uptime_(PROTOBUF_LONGLONG(0))
  , replyquantity_(PROTOBUF_LONGLONG(0)){}
struct ServiceClientInfoDefaultTypeInternal {
  constexpr ServiceClientInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceClientInfoDefaultTypeInternal() {}
  union {
    ServiceClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceClientInfoDefaultTypeInternal _ServiceClientInfo_default_instance_;
constexpr ServiceClients::ServiceClients(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clients_(){}
struct ServiceClientsDefaultTypeInternal {
  constexpr ServiceClientsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceClientsDefaultTypeInternal() {}
  union {
    ServiceClients _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceClientsDefaultTypeInternal _ServiceClients_default_instance_;
constexpr BuildInfo::BuildInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workstation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(PROTOBUF_LONGLONG(0))
  , changeset_(0)
  , id_(-1){}
struct BuildInfoDefaultTypeInternal {
  constexpr BuildInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildInfoDefaultTypeInternal() {}
  union {
    BuildInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildInfoDefaultTypeInternal _BuildInfo_default_instance_;
constexpr ConfigurationServiceSettings::ConfigurationServiceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , autoloadbuildpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workdirectory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigurationServiceSettingsDefaultTypeInternal {
  constexpr ConfigurationServiceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationServiceSettingsDefaultTypeInternal() {}
  union {
    ConfigurationServiceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationServiceSettingsDefaultTypeInternal _ConfigurationServiceSettings_default_instance_;
constexpr ServiceSettings::ServiceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configip1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configip2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServiceSettingsDefaultTypeInternal {
  constexpr ServiceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceSettingsDefaultTypeInternal() {}
  union {
    ServiceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceSettingsDefaultTypeInternal _ServiceSettings_default_instance_;
constexpr GetTuningSourcesInfo::GetTuningSourcesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetTuningSourcesInfoDefaultTypeInternal {
  constexpr GetTuningSourcesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTuningSourcesInfoDefaultTypeInternal() {}
  union {
    GetTuningSourcesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTuningSourcesInfoDefaultTypeInternal _GetTuningSourcesInfo_default_instance_;
constexpr GetTuningSourcesInfoReply::GetTuningSourcesInfoReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuningsourceinfo_()
  , activeclientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , activeclientip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , singlelmcontrolmode_(true){}
struct GetTuningSourcesInfoReplyDefaultTypeInternal {
  constexpr GetTuningSourcesInfoReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTuningSourcesInfoReplyDefaultTypeInternal() {}
  union {
    GetTuningSourcesInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTuningSourcesInfoReplyDefaultTypeInternal _GetTuningSourcesInfoReply_default_instance_;
constexpr GetTuningSourcesStates::GetTuningSourcesStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetTuningSourcesStatesDefaultTypeInternal {
  constexpr GetTuningSourcesStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTuningSourcesStatesDefaultTypeInternal() {}
  union {
    GetTuningSourcesStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTuningSourcesStatesDefaultTypeInternal _GetTuningSourcesStates_default_instance_;
constexpr SignalsAssociatedToTuningSource::SignalsAssociatedToTuningSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhash_()
  , sourceid_(PROTOBUF_ULONGLONG(0)){}
struct SignalsAssociatedToTuningSourceDefaultTypeInternal {
  constexpr SignalsAssociatedToTuningSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalsAssociatedToTuningSourceDefaultTypeInternal() {}
  union {
    SignalsAssociatedToTuningSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalsAssociatedToTuningSourceDefaultTypeInternal _SignalsAssociatedToTuningSource_default_instance_;
constexpr TuningSourceFilling::TuningSourceFilling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalspersource_()
  , signalcount_(PROTOBUF_ULONGLONG(0)){}
struct TuningSourceFillingDefaultTypeInternal {
  constexpr TuningSourceFillingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSourceFillingDefaultTypeInternal() {}
  union {
    TuningSourceFilling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSourceFillingDefaultTypeInternal _TuningSourceFilling_default_instance_;
constexpr TuningSourceState::TuningSourceState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sourceid_(PROTOBUF_ULONGLONG(0))
  , requestcount_(PROTOBUF_LONGLONG(0))
  , replycount_(PROTOBUF_LONGLONG(0))
  , erruntimelyreplay_(PROTOBUF_LONGLONG(0))
  , errsent_(PROTOBUF_LONGLONG(0))
  , errpartialsent_(PROTOBUF_LONGLONG(0))
  , errreplysize_(PROTOBUF_LONGLONG(0))
  , errnoreply_(PROTOBUF_LONGLONG(0))
  , errrupprotocolversion_(PROTOBUF_LONGLONG(0))
  , errrupframesize_(PROTOBUF_LONGLONG(0))
  , errrupnontuningdata_(PROTOBUF_LONGLONG(0))
  , errrupmoduletype_(PROTOBUF_LONGLONG(0))
  , errrupframesquantity_(PROTOBUF_LONGLONG(0))
  , errrupframenumber_(PROTOBUF_LONGLONG(0))
  , errfotipprotocolversion_(PROTOBUF_LONGLONG(0))
  , errfotipuniqueid_(PROTOBUF_LONGLONG(0))
  , errfotiplmnumber_(PROTOBUF_LONGLONG(0))
  , errfotipsubsystemcode_(PROTOBUF_LONGLONG(0))
  , errfotipoperationcode_(PROTOBUF_LONGLONG(0))
  , errfotipframesize_(PROTOBUF_LONGLONG(0))
  , errfotipromsize_(PROTOBUF_LONGLONG(0))
  , errfotipromframesize_(PROTOBUF_LONGLONG(0))
  , fotipflagboundschecksuccess_(PROTOBUF_LONGLONG(0))
  , fotipflagwritesuccess_(PROTOBUF_LONGLONG(0))
  , fotipflagdatatypeerr_(PROTOBUF_LONGLONG(0))
  , commandqueuesize_(0)
  , isreply_(false)
  , controlisactive_(false)
  , setsor_(false)
  , hasunappliedparams_(false)
  , fotipflagopcodeerr_(PROTOBUF_LONGLONG(0))
  , fotipflagstartaddrerr_(PROTOBUF_LONGLONG(0))
  , fotipflagromsizeerr_(PROTOBUF_LONGLONG(0))
  , fotipflagromframesizeerr_(PROTOBUF_LONGLONG(0))
  , fotipflagframesizeerr_(PROTOBUF_LONGLONG(0))
  , fotipflagprotocolversionerr_(PROTOBUF_LONGLONG(0))
  , fotipflagsubsystemkeyerr_(PROTOBUF_LONGLONG(0))
  , fotipflaguniueiderr_(PROTOBUF_LONGLONG(0))
  , fotipflagoffseterr_(PROTOBUF_LONGLONG(0))
  , fotipflagapplysuccess_(PROTOBUF_LONGLONG(0))
  , fotipflagsetsor_(PROTOBUF_LONGLONG(0))
  , erranaloglowboundcheck_(PROTOBUF_LONGLONG(0))
  , erranaloghighboundcheck_(PROTOBUF_LONGLONG(0))
  , errrupcrc_(PROTOBUF_LONGLONG(0))
  , fotipflagwritingdisabled_(PROTOBUF_LONGLONG(0))
  , errtuningframeupdate_(PROTOBUF_LONGLONG(0))
  , writingdisabled_(false){}
struct TuningSourceStateDefaultTypeInternal {
  constexpr TuningSourceStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSourceStateDefaultTypeInternal() {}
  union {
    TuningSourceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSourceStateDefaultTypeInternal _TuningSourceState_default_instance_;
constexpr GetTuningSourcesStatesReply::GetTuningSourcesStatesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuningsourcesstate_()
  , activeclientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , activeclientip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , singlelmcontrolmode_(true){}
struct GetTuningSourcesStatesReplyDefaultTypeInternal {
  constexpr GetTuningSourcesStatesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTuningSourcesStatesReplyDefaultTypeInternal() {}
  union {
    GetTuningSourcesStatesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTuningSourcesStatesReplyDefaultTypeInternal _GetTuningSourcesStatesReply_default_instance_;
constexpr ChangeConrolledTuningSourceRequest::ChangeConrolledTuningSourceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuningsourceequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , takecontrol_(false)
  , activatecontrol_(false){}
struct ChangeConrolledTuningSourceRequestDefaultTypeInternal {
  constexpr ChangeConrolledTuningSourceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeConrolledTuningSourceRequestDefaultTypeInternal() {}
  union {
    ChangeConrolledTuningSourceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeConrolledTuningSourceRequestDefaultTypeInternal _ChangeConrolledTuningSourceRequest_default_instance_;
constexpr ChangeConrolledTuningSourceReply::ChangeConrolledTuningSourceReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlledtuningsourceequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , controlisactive_(false){}
struct ChangeConrolledTuningSourceReplyDefaultTypeInternal {
  constexpr ChangeConrolledTuningSourceReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeConrolledTuningSourceReplyDefaultTypeInternal() {}
  union {
    ChangeConrolledTuningSourceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeConrolledTuningSourceReplyDefaultTypeInternal _ChangeConrolledTuningSourceReply_default_instance_;
constexpr TuningSignalsRead::TuningSignalsRead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhash_(){}
struct TuningSignalsReadDefaultTypeInternal {
  constexpr TuningSignalsReadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalsReadDefaultTypeInternal() {}
  union {
    TuningSignalsRead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalsReadDefaultTypeInternal _TuningSignalsRead_default_instance_;
constexpr TuningSignalState::TuningSignalState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr)
  , readlowbound_(nullptr)
  , readhighbound_(nullptr)
  , signalhash_(PROTOBUF_ULONGLONG(0))
  , error_(0)
  , writeerrorcode_(0)
  , writeclient_(PROTOBUF_ULONGLONG(0))
  , successfulreadtime_(PROTOBUF_LONGLONG(0))
  , writerequesttime_(PROTOBUF_LONGLONG(0))
  , successfulwritetime_(PROTOBUF_LONGLONG(0))
  , unsuccessfulwritetime_(PROTOBUF_LONGLONG(0))
  , valid_(false)
  , writeinprogress_(false)
  , setsor_(false)
  , writingdisabled_(false){}
struct TuningSignalStateDefaultTypeInternal {
  constexpr TuningSignalStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalStateDefaultTypeInternal() {}
  union {
    TuningSignalState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalStateDefaultTypeInternal _TuningSignalState_default_instance_;
constexpr TuningSignalsReadReply::TuningSignalsReadReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuningsignalstate_()
  , error_(0){}
struct TuningSignalsReadReplyDefaultTypeInternal {
  constexpr TuningSignalsReadReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalsReadReplyDefaultTypeInternal() {}
  union {
    TuningSignalsReadReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalsReadReplyDefaultTypeInternal _TuningSignalsReadReply_default_instance_;
constexpr TuningWriteCommand::TuningWriteCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr)
  , signalhash_(PROTOBUF_ULONGLONG(0)){}
struct TuningWriteCommandDefaultTypeInternal {
  constexpr TuningWriteCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningWriteCommandDefaultTypeInternal() {}
  union {
    TuningWriteCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningWriteCommandDefaultTypeInternal _TuningWriteCommand_default_instance_;
constexpr TuningSignalsWrite::TuningSignalsWrite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_()
  , autoapply_(false){}
struct TuningSignalsWriteDefaultTypeInternal {
  constexpr TuningSignalsWriteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalsWriteDefaultTypeInternal() {}
  union {
    TuningSignalsWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalsWriteDefaultTypeInternal _TuningSignalsWrite_default_instance_;
constexpr TuningSignalWriteResult::TuningSignalWriteResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhash_(PROTOBUF_ULONGLONG(0))
  , error_(0){}
struct TuningSignalWriteResultDefaultTypeInternal {
  constexpr TuningSignalWriteResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalWriteResultDefaultTypeInternal() {}
  union {
    TuningSignalWriteResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalWriteResultDefaultTypeInternal _TuningSignalWriteResult_default_instance_;
constexpr TuningSignalsWriteReply::TuningSignalsWriteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : writeresult_()
  , error_(0){}
struct TuningSignalsWriteReplyDefaultTypeInternal {
  constexpr TuningSignalsWriteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalsWriteReplyDefaultTypeInternal() {}
  union {
    TuningSignalsWriteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalsWriteReplyDefaultTypeInternal _TuningSignalsWriteReply_default_instance_;
constexpr TuningSignalsApply::TuningSignalsApply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TuningSignalsApplyDefaultTypeInternal {
  constexpr TuningSignalsApplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalsApplyDefaultTypeInternal() {}
  union {
    TuningSignalsApply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalsApplyDefaultTypeInternal _TuningSignalsApply_default_instance_;
constexpr TuningSignalsApplyReply::TuningSignalsApplyReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(0){}
struct TuningSignalsApplyReplyDefaultTypeInternal {
  constexpr TuningSignalsApplyReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningSignalsApplyReplyDefaultTypeInternal() {}
  union {
    TuningSignalsApplyReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningSignalsApplyReplyDefaultTypeInternal _TuningSignalsApplyReply_default_instance_;
constexpr DataSourceWrite::DataSourceWrite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sourceequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(false){}
struct DataSourceWriteDefaultTypeInternal {
  constexpr DataSourceWriteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataSourceWriteDefaultTypeInternal() {}
  union {
    DataSourceWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataSourceWriteDefaultTypeInternal _DataSourceWrite_default_instance_;
constexpr DataSourceWriteReply::DataSourceWriteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(0){}
struct DataSourceWriteReplyDefaultTypeInternal {
  constexpr DataSourceWriteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataSourceWriteReplyDefaultTypeInternal() {}
  union {
    DataSourceWriteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataSourceWriteReplyDefaultTypeInternal _DataSourceWriteReply_default_instance_;
constexpr PacketSourceExit::PacketSourceExit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PacketSourceExitDefaultTypeInternal {
  constexpr PacketSourceExitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketSourceExitDefaultTypeInternal() {}
  union {
    PacketSourceExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketSourceExitDefaultTypeInternal _PacketSourceExit_default_instance_;
constexpr PacketSourceExitReply::PacketSourceExitReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(0){}
struct PacketSourceExitReplyDefaultTypeInternal {
  constexpr PacketSourceExitReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketSourceExitReplyDefaultTypeInternal() {}
  union {
    PacketSourceExitReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketSourceExitReplyDefaultTypeInternal _PacketSourceExitReply_default_instance_;
constexpr SaveAppSignalsStatesToArchiveRequest::SaveAppSignalsStatesToArchiveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalstates_()
  , clientequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SaveAppSignalsStatesToArchiveRequestDefaultTypeInternal {
  constexpr SaveAppSignalsStatesToArchiveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveAppSignalsStatesToArchiveRequestDefaultTypeInternal() {}
  union {
    SaveAppSignalsStatesToArchiveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveAppSignalsStatesToArchiveRequestDefaultTypeInternal _SaveAppSignalsStatesToArchiveRequest_default_instance_;
constexpr SaveAppSignalsStatesToArchiveReply::SaveAppSignalsStatesToArchiveReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(0)
  , archerror_(100){}
struct SaveAppSignalsStatesToArchiveReplyDefaultTypeInternal {
  constexpr SaveAppSignalsStatesToArchiveReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveAppSignalsStatesToArchiveReplyDefaultTypeInternal() {}
  union {
    SaveAppSignalsStatesToArchiveReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveAppSignalsStatesToArchiveReplyDefaultTypeInternal _SaveAppSignalsStatesToArchiveReply_default_instance_;
constexpr GetAppSignalStatesFromArchiveStartRequest::GetAppSignalStatesFromArchiveStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalhashes_()
  , clientequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , starttime_(PROTOBUF_LONGLONG(0))
  , endtime_(PROTOBUF_LONGLONG(0))
  , timetype_(1)
  , removeperiodic_(true){}
struct GetAppSignalStatesFromArchiveStartRequestDefaultTypeInternal {
  constexpr GetAppSignalStatesFromArchiveStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStatesFromArchiveStartRequestDefaultTypeInternal() {}
  union {
    GetAppSignalStatesFromArchiveStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStatesFromArchiveStartRequestDefaultTypeInternal _GetAppSignalStatesFromArchiveStartRequest_default_instance_;
constexpr GetAppSignalStatesFromArchiveStartReply::GetAppSignalStatesFromArchiveStartReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errorstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , requestid_(0u)
  , archerror_(100){}
struct GetAppSignalStatesFromArchiveStartReplyDefaultTypeInternal {
  constexpr GetAppSignalStatesFromArchiveStartReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStatesFromArchiveStartReplyDefaultTypeInternal() {}
  union {
    GetAppSignalStatesFromArchiveStartReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStatesFromArchiveStartReplyDefaultTypeInternal _GetAppSignalStatesFromArchiveStartReply_default_instance_;
constexpr GetAppSignalStatesFromArchiveNextRequest::GetAppSignalStatesFromArchiveNextRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(0u){}
struct GetAppSignalStatesFromArchiveNextRequestDefaultTypeInternal {
  constexpr GetAppSignalStatesFromArchiveNextRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStatesFromArchiveNextRequestDefaultTypeInternal() {}
  union {
    GetAppSignalStatesFromArchiveNextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStatesFromArchiveNextRequestDefaultTypeInternal _GetAppSignalStatesFromArchiveNextRequest_default_instance_;
constexpr GetAppSignalStatesFromArchiveNextReply::GetAppSignalStatesFromArchiveNextReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalstates_()
  , errorstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , requestid_(0u)
  , totalstatescount_(0)
  , sentstatescount_(0)
  , dataready_(false)
  , islastpart_(false)
  , statesinpartcount_(0)
  , archerror_(100){}
struct GetAppSignalStatesFromArchiveNextReplyDefaultTypeInternal {
  constexpr GetAppSignalStatesFromArchiveNextReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStatesFromArchiveNextReplyDefaultTypeInternal() {}
  union {
    GetAppSignalStatesFromArchiveNextReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStatesFromArchiveNextReplyDefaultTypeInternal _GetAppSignalStatesFromArchiveNextReply_default_instance_;
constexpr GetAppSignalStatesFromArchiveCancelRequest::GetAppSignalStatesFromArchiveCancelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(0u){}
struct GetAppSignalStatesFromArchiveCancelRequestDefaultTypeInternal {
  constexpr GetAppSignalStatesFromArchiveCancelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStatesFromArchiveCancelRequestDefaultTypeInternal() {}
  union {
    GetAppSignalStatesFromArchiveCancelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStatesFromArchiveCancelRequestDefaultTypeInternal _GetAppSignalStatesFromArchiveCancelRequest_default_instance_;
constexpr GetAppSignalStatesFromArchiveCancelReply::GetAppSignalStatesFromArchiveCancelReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errorstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , archerror_(100){}
struct GetAppSignalStatesFromArchiveCancelReplyDefaultTypeInternal {
  constexpr GetAppSignalStatesFromArchiveCancelReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppSignalStatesFromArchiveCancelReplyDefaultTypeInternal() {}
  union {
    GetAppSignalStatesFromArchiveCancelReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppSignalStatesFromArchiveCancelReplyDefaultTypeInternal _GetAppSignalStatesFromArchiveCancelReply_default_instance_;
constexpr RtTrendsManagementRequest::RtTrendsManagementRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appendsignalhashes_()
  , deletesignalhashes_()
  , clientequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sampleperiod_(0){}
struct RtTrendsManagementRequestDefaultTypeInternal {
  constexpr RtTrendsManagementRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtTrendsManagementRequestDefaultTypeInternal() {}
  union {
    RtTrendsManagementRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtTrendsManagementRequestDefaultTypeInternal _RtTrendsManagementRequest_default_instance_;
constexpr RtTrendsManagementReply::RtTrendsManagementReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trackedsignalhashes_()
  , errorstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
  , sampleperiod_(0){}
struct RtTrendsManagementReplyDefaultTypeInternal {
  constexpr RtTrendsManagementReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtTrendsManagementReplyDefaultTypeInternal() {}
  union {
    RtTrendsManagementReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtTrendsManagementReplyDefaultTypeInternal _RtTrendsManagementReply_default_instance_;
constexpr RtTrendsGetStateChangesRequest::RtTrendsGetStateChangesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RtTrendsGetStateChangesRequestDefaultTypeInternal {
  constexpr RtTrendsGetStateChangesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtTrendsGetStateChangesRequestDefaultTypeInternal() {}
  union {
    RtTrendsGetStateChangesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtTrendsGetStateChangesRequestDefaultTypeInternal _RtTrendsGetStateChangesRequest_default_instance_;
constexpr RtTrendsGetStateChangesReply::RtTrendsGetStateChangesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalstates_()
  , errorstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0){}
struct RtTrendsGetStateChangesReplyDefaultTypeInternal {
  constexpr RtTrendsGetStateChangesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtTrendsGetStateChangesReplyDefaultTypeInternal() {}
  union {
    RtTrendsGetStateChangesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtTrendsGetStateChangesReplyDefaultTypeInternal _RtTrendsGetStateChangesReply_default_instance_;
constexpr GetFileReply::GetFileReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : md5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filepartdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filesize_(PROTOBUF_LONGLONG(0))
  , errorcode_(0)
  , totalparts_(0)
  , currentpart_(0)
  , currentpartsize_(0){}
struct GetFileReplyDefaultTypeInternal {
  constexpr GetFileReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileReplyDefaultTypeInternal() {}
  union {
    GetFileReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileReplyDefaultTypeInternal _GetFileReply_default_instance_;
}  // namespace Network
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_network_2eproto[65];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_network_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_network_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_network_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartReply, totalitemcount_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartReply, partcount_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListStartReply, itemsperpart_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextRequest, part_),
  0,
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextReply, part_),
  PROTOBUF_FIELD_OFFSET(::Network::GetSignalListNextReply, appsignalids_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalParamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalParamRequest, signalhashes_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalParamReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalParamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalParamReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalParamReply, appsignals_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalRequest, signalhashes_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalReply, appsignals_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateRequest, signalhashes_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateReply, servertimeutc_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateReply, servertimelocal_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateReply, appsignalstates_),
  2,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, servertimeutc_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, servertimelocal_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, pendingstatescount_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStateChangesReply, appsignalstates_),
  1,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, id_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmcaption_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmdatatype_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmip_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmport_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmsubsystemkey_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmsubsystemid_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmsubsystemchannel_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmnumber_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmmoduletype_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmadapterid_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmdataenable_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmdataid_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmuniqueid_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmrupframesquantity_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceInfo, lmpresetname_),
  7,
  0,
  1,
  8,
  2,
  9,
  10,
  3,
  4,
  11,
  12,
  5,
  13,
  15,
  14,
  16,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetDataSourcesInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetDataSourcesInfoReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetDataSourcesInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetDataSourcesInfoReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetDataSourcesInfoReply, datasourceinfo_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, receivingrate_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, udpreceivingrate_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, rupframesreceivingrate_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, rupframescount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, simframescount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, errdatagramsize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, errsimversion_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, errunknownappdatasourceip_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, errrupframecrc_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataReceiveState, errnotexpectedsimpacket_),
  0,
  1,
  9,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, id_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, datareceives_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, uptime_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, receiveddataid_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, rupframesqueuecursize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, rupframesqueuecurmaxsize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, datareceivingrate_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, receiveddatasize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, receivedframescount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, receivedpacketcount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, lostpacketcount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, dataprocessingenabled_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, processedpacketcount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, lastpacketsystemtime_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, rupframeplanttime_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, rupframenumerator_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, signalstatesqueuecursize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, signalstatesqueuecurmaxsize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, acquiredsignalscount_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errorprotocolversion_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errorframesquantity_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errorframeno_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errordataid_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errorframesize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errorduplicateplanttime_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, errornonmonotonicplanttime_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, lmequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, rupframesqueuesize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, signalstatesqueuesize_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataSourceState, state_),
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  13,
  11,
  14,
  15,
  16,
  12,
  17,
  18,
  23,
  19,
  20,
  21,
  22,
  25,
  26,
  27,
  0,
  24,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppDataSourcesStatesReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppDataSourcesStatesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppDataSourcesStatesReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppDataSourcesStatesReply, appdatasourcesstates_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, cfgserviceisconnected_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, cfgserviceip_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, cfgserviceport_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, archiveserviceisconnected_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, archiveserviceip_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, archiveserviceport_),
  PROTOBUF_FIELD_OFFSET(::Network::AppDataServiceState, appdatareceivestate_),
  2,
  1,
  4,
  3,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, softwaretype_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, majorversion_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, minorversion_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, commitno_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, buildbranch_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, commitsha_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, username_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, buildno_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, crc_),
  PROTOBUF_FIELD_OFFSET(::Network::SoftwareInfo, clientdescription_),
  10,
  0,
  5,
  6,
  7,
  1,
  2,
  3,
  8,
  9,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetServiceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SessionParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::SessionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SessionParams, currentsettingsprofile_),
  PROTOBUF_FIELD_OFFSET(::Network::SessionParams, softwarerunmode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, softwareinfo_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, uptime_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, servicestate_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, serviceuptime_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, sessionparams_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceInfo, settingsxml_),
  1,
  3,
  5,
  4,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::Network::GetServiceInfoReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetServiceInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetServiceInfoReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetServiceInfoReply, serviceinfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceState, currentbuilddirectory_),
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceState, checkbuildattemptquantity_),
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceState, buildcheckerstate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, uptime_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, isactual_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, replyquantity_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClientInfo, softwareinfo_),
  1,
  3,
  2,
  4,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClients, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ServiceClients, clients_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, project_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, id_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, date_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, changeset_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, user_),
  PROTOBUF_FIELD_OFFSET(::Network::BuildInfo, workstation_),
  0,
  5,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceSettings, equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceSettings, autoloadbuildpath_),
  PROTOBUF_FIELD_OFFSET(::Network::ConfigurationServiceSettings, workdirectory_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Network::ServiceSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ServiceSettings, equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceSettings, configip1_),
  PROTOBUF_FIELD_OFFSET(::Network::ServiceSettings, configip2_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, tuningsourceinfo_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, singlelmcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, activeclientid_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesInfoReply, activeclientip_),
  2,
  ~0u,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SignalsAssociatedToTuningSource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::SignalsAssociatedToTuningSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SignalsAssociatedToTuningSource, sourceid_),
  PROTOBUF_FIELD_OFFSET(::Network::SignalsAssociatedToTuningSource, signalhash_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceFilling, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceFilling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceFilling, signalcount_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceFilling, signalspersource_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, sourceid_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, isreply_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, requestcount_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, replycount_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, commandqueuesize_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, erruntimelyreplay_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errsent_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errpartialsent_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errreplysize_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errnoreply_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupprotocolversion_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupframesize_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupnontuningdata_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupmoduletype_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupframesquantity_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupframenumber_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipprotocolversion_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipuniqueid_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotiplmnumber_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipsubsystemcode_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipoperationcode_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipframesize_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipromsize_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errfotipromframesize_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagboundschecksuccess_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagwritesuccess_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagdatatypeerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagopcodeerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagstartaddrerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagromsizeerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagromframesizeerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagframesizeerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagprotocolversionerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagsubsystemkeyerr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflaguniueiderr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagoffseterr_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagapplysuccess_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagsetsor_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, erranaloglowboundcheck_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, erranaloghighboundcheck_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errrupcrc_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, controlisactive_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, setsor_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, hasunappliedparams_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, writingdisabled_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, fotipflagwritingdisabled_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSourceState, errtuningframeupdate_),
  0,
  26,
  1,
  2,
  25,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  27,
  28,
  29,
  46,
  44,
  45,
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, tuningsourcesstate_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, singlelmcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, activeclientid_),
  PROTOBUF_FIELD_OFFSET(::Network::GetTuningSourcesStatesReply, activeclientip_),
  2,
  ~0u,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceRequest, takecontrol_),
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceRequest, tuningsourceequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceRequest, activatecontrol_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceReply, controlledtuningsourceequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::ChangeConrolledTuningSourceReply, controlisactive_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsRead, signalhash_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, signalhash_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, error_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, valid_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, value_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, readlowbound_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, readhighbound_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, writeinprogress_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, writeerrorcode_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, writeclient_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, successfulreadtime_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, writerequesttime_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, successfulwritetime_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, unsuccessfulwritetime_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, setsor_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalState, writingdisabled_),
  3,
  4,
  11,
  0,
  1,
  2,
  12,
  5,
  6,
  7,
  8,
  9,
  10,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsReadReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsReadReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsReadReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsReadReply, tuningsignalstate_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::TuningWriteCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningWriteCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningWriteCommand, signalhash_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningWriteCommand, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWrite, autoapply_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWrite, commands_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalWriteResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalWriteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalWriteResult, signalhash_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalWriteResult, error_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWriteReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWriteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWriteReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsWriteReply, writeresult_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsApplyReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsApplyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::TuningSignalsApplyReply, error_),
  0,
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWrite, sourceequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWrite, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWriteReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWriteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::DataSourceWriteReply, error_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::PacketSourceExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::PacketSourceExitReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::PacketSourceExitReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::PacketSourceExitReply, error_),
  0,
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveRequest, clientequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveRequest, appsignalstates_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::SaveAppSignalsStatesToArchiveReply, archerror_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, clientequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, timetype_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, starttime_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, endtime_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, signalhashes_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartRequest, removeperiodic_),
  0,
  3,
  1,
  2,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartReply, archerror_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartReply, errorstring_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveStartReply, requestid_),
  1,
  3,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextRequest, requestid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, archerror_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, requestid_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, errorstring_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, dataready_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, totalstatescount_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, sentstatescount_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, statesinpartcount_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, islastpart_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveNextReply, appsignalstates_),
  1,
  8,
  2,
  0,
  5,
  3,
  4,
  7,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelRequest, requestid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelReply, archerror_),
  PROTOBUF_FIELD_OFFSET(::Network::GetAppSignalStatesFromArchiveCancelReply, errorstring_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementRequest, clientequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementRequest, sampleperiod_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementRequest, appendsignalhashes_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementRequest, deletesignalhashes_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementReply, errorstring_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementReply, sampleperiod_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsManagementReply, trackedsignalhashes_),
  1,
  0,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsGetStateChangesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsGetStateChangesReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsGetStateChangesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsGetStateChangesReply, error_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsGetStateChangesReply, errorstring_),
  PROTOBUF_FIELD_OFFSET(::Network::RtTrendsGetStateChangesReply, signalstates_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, errorcode_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, filesize_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, totalparts_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, currentpart_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, currentpartsize_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, md5_),
  PROTOBUF_FIELD_OFFSET(::Network::GetFileReply, filepartdata_),
  3,
  2,
  4,
  5,
  6,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Network::GetSignalListStartRequest)},
  { 5, 14, sizeof(::Network::GetSignalListStartReply)},
  { 18, 24, sizeof(::Network::GetSignalListNextRequest)},
  { 25, 33, sizeof(::Network::GetSignalListNextReply)},
  { 36, -1, sizeof(::Network::GetAppSignalParamRequest)},
  { 42, 49, sizeof(::Network::GetAppSignalParamReply)},
  { 51, -1, sizeof(::Network::GetAppSignalRequest)},
  { 57, 64, sizeof(::Network::GetAppSignalReply)},
  { 66, -1, sizeof(::Network::GetAppSignalStateRequest)},
  { 72, 81, sizeof(::Network::GetAppSignalStateReply)},
  { 85, -1, sizeof(::Network::GetAppSignalStateChangesRequest)},
  { 90, 100, sizeof(::Network::GetAppSignalStateChangesReply)},
  { 105, 127, sizeof(::Network::DataSourceInfo)},
  { 144, -1, sizeof(::Network::GetDataSourcesInfoRequest)},
  { 149, 156, sizeof(::Network::GetDataSourcesInfoReply)},
  { 158, 173, sizeof(::Network::AppDataReceiveState)},
  { 183, 218, sizeof(::Network::AppDataSourceState)},
  { 248, 255, sizeof(::Network::GetAppDataSourcesStatesReply)},
  { 257, 269, sizeof(::Network::AppDataServiceState)},
  { 276, 292, sizeof(::Network::SoftwareInfo)},
  { 303, -1, sizeof(::Network::GetServiceInfoRequest)},
  { 308, 315, sizeof(::Network::SessionParams)},
  { 317, 328, sizeof(::Network::ServiceInfo)},
  { 334, 341, sizeof(::Network::GetServiceInfoReply)},
  { 343, 351, sizeof(::Network::ConfigurationServiceState)},
  { 354, 364, sizeof(::Network::ServiceClientInfo)},
  { 369, -1, sizeof(::Network::ServiceClients)},
  { 375, 386, sizeof(::Network::BuildInfo)},
  { 392, 400, sizeof(::Network::ConfigurationServiceSettings)},
  { 403, 411, sizeof(::Network::ServiceSettings)},
  { 414, -1, sizeof(::Network::GetTuningSourcesInfo)},
  { 419, 429, sizeof(::Network::GetTuningSourcesInfoReply)},
  { 434, -1, sizeof(::Network::GetTuningSourcesStates)},
  { 439, 446, sizeof(::Network::SignalsAssociatedToTuningSource)},
  { 448, 455, sizeof(::Network::TuningSourceFilling)},
  { 457, 509, sizeof(::Network::TuningSourceState)},
  { 556, 566, sizeof(::Network::GetTuningSourcesStatesReply)},
  { 571, 579, sizeof(::Network::ChangeConrolledTuningSourceRequest)},
  { 582, 590, sizeof(::Network::ChangeConrolledTuningSourceReply)},
  { 593, -1, sizeof(::Network::TuningSignalsRead)},
  { 599, 619, sizeof(::Network::TuningSignalState)},
  { 634, 641, sizeof(::Network::TuningSignalsReadReply)},
  { 643, 650, sizeof(::Network::TuningWriteCommand)},
  { 652, 659, sizeof(::Network::TuningSignalsWrite)},
  { 661, 668, sizeof(::Network::TuningSignalWriteResult)},
  { 670, 677, sizeof(::Network::TuningSignalsWriteReply)},
  { 679, -1, sizeof(::Network::TuningSignalsApply)},
  { 684, 690, sizeof(::Network::TuningSignalsApplyReply)},
  { 691, 698, sizeof(::Network::DataSourceWrite)},
  { 700, 706, sizeof(::Network::DataSourceWriteReply)},
  { 707, -1, sizeof(::Network::PacketSourceExit)},
  { 712, 718, sizeof(::Network::PacketSourceExitReply)},
  { 719, 726, sizeof(::Network::SaveAppSignalsStatesToArchiveRequest)},
  { 728, 735, sizeof(::Network::SaveAppSignalsStatesToArchiveReply)},
  { 737, 748, sizeof(::Network::GetAppSignalStatesFromArchiveStartRequest)},
  { 754, 763, sizeof(::Network::GetAppSignalStatesFromArchiveStartReply)},
  { 767, 773, sizeof(::Network::GetAppSignalStatesFromArchiveNextRequest)},
  { 774, 789, sizeof(::Network::GetAppSignalStatesFromArchiveNextReply)},
  { 799, 805, sizeof(::Network::GetAppSignalStatesFromArchiveCancelRequest)},
  { 806, 814, sizeof(::Network::GetAppSignalStatesFromArchiveCancelReply)},
  { 817, 826, sizeof(::Network::RtTrendsManagementRequest)},
  { 830, 839, sizeof(::Network::RtTrendsManagementReply)},
  { 843, -1, sizeof(::Network::RtTrendsGetStateChangesRequest)},
  { 848, 856, sizeof(::Network::RtTrendsGetStateChangesReply)},
  { 859, 871, sizeof(::Network::GetFileReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetSignalListStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetSignalListStartReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetSignalListNextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetSignalListNextReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalParamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalParamReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStateChangesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStateChangesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_DataSourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetDataSourcesInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetDataSourcesInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_AppDataReceiveState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_AppDataSourceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppDataSourcesStatesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_AppDataServiceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_SoftwareInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetServiceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_SessionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ServiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetServiceInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ConfigurationServiceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ServiceClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ServiceClients_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_BuildInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ConfigurationServiceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ServiceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetTuningSourcesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetTuningSourcesInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetTuningSourcesStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_SignalsAssociatedToTuningSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSourceFilling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSourceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetTuningSourcesStatesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ChangeConrolledTuningSourceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_ChangeConrolledTuningSourceReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalsRead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalsReadReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningWriteCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalsWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalWriteResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalsWriteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalsApply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_TuningSignalsApplyReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_DataSourceWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_DataSourceWriteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_PacketSourceExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_PacketSourceExitReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_SaveAppSignalsStatesToArchiveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_SaveAppSignalsStatesToArchiveReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStatesFromArchiveStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStatesFromArchiveStartReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStatesFromArchiveNextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStatesFromArchiveNextReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStatesFromArchiveCancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetAppSignalStatesFromArchiveCancelReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_RtTrendsManagementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_RtTrendsManagementReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_RtTrendsGetStateChangesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_RtTrendsGetStateChangesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Network::_GetFileReply_default_instance_),
};

const char descriptor_table_protodef_network_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnetwork.proto\022\007Network\032\023serialization."
  "proto\"\033\n\031GetSignalListStartRequest\"l\n\027Ge"
  "tSignalListStartReply\022\020\n\005error\030\001 \001(\005:\0010\022"
  "\026\n\016totalItemCount\030\002 \001(\005\022\021\n\tpartCount\030\003 \001"
  "(\005\022\024\n\014itemsPerPart\030\004 \001(\005\"(\n\030GetSignalLis"
  "tNextRequest\022\014\n\004part\030\001 \001(\005\"N\n\026GetSignalL"
  "istNextReply\022\020\n\005error\030\001 \001(\005:\0010\022\014\n\004part\030\002"
  " \001(\005\022\024\n\014appSignalIds\030\003 \003(\t\"0\n\030GetAppSign"
  "alParamRequest\022\024\n\014signalHashes\030\001 \003(\004\"P\n\026"
  "GetAppSignalParamReply\022\020\n\005error\030\001 \001(\005:\0010"
  "\022$\n\nappSignals\030\002 \003(\0132\020.Proto.AppSignal\"+"
  "\n\023GetAppSignalRequest\022\024\n\014signalHashes\030\001 "
  "\003(\004\"K\n\021GetAppSignalReply\022\020\n\005error\030\001 \001(\005:"
  "\0010\022$\n\nappSignals\030\002 \003(\0132\020.Proto.AppSignal"
  "\"0\n\030GetAppSignalStateRequest\022\024\n\014signalHa"
  "shes\030\001 \003(\004\"\212\001\n\026GetAppSignalStateReply\022\020\n"
  "\005error\030\001 \001(\005:\0010\022\025\n\rserverTimeUtc\030\002 \001(\003\022\027"
  "\n\017serverTimeLocal\030\003 \001(\003\022.\n\017appSignalStat"
  "es\030\004 \003(\0132\025.Proto.AppSignalState\"!\n\037GetAp"
  "pSignalStateChangesRequest\"\260\001\n\035GetAppSig"
  "nalStateChangesReply\022\020\n\005error\030\001 \001(\005:\0010\022\025"
  "\n\rserverTimeUtc\030\002 \001(\003\022\027\n\017serverTimeLocal"
  "\030\003 \001(\003\022\035\n\022pendingStatesCount\030\004 \001(\005:\0010\022.\n"
  "\017appSignalStates\030\005 \003(\0132\025.Proto.AppSignal"
  "State\"\221\003\n\016DataSourceInfo\022\r\n\002id\030\001 \001(\004:\0010\022"
  "\025\n\rlmEquipmentID\030\002 \001(\t\022\021\n\tlmCaption\030\003 \001("
  "\t\022\025\n\nlmDataType\030\004 \001(\005:\0010\022\014\n\004lmIP\030\005 \001(\t\022\021"
  "\n\006lmPort\030\006 \001(\005:\0010\022\031\n\016lmSubsystemKey\030\007 \001("
  "\005:\0010\022\025\n\rlmSubsystemID\030\010 \001(\t\022\032\n\022lmSubsyst"
  "emChannel\030\t \001(\t\022\023\n\010lmNumber\030\n \001(\005:\0010\022\027\n\014"
  "lmModuleType\030\013 \001(\005:\0010\022\023\n\013lmAdapterID\030\014 \001"
  "(\t\022\033\n\014lmDataEnable\030\r \001(\010:\005false\022\023\n\010lmDat"
  "aID\030\016 \001(\r:\0010\022\025\n\nlmUniqueID\030\017 \001(\004:\0010\022\036\n\023l"
  "mRupFramesQuantity\030\020 \001(\005:\0010\022\024\n\014lmPresetN"
  "ame\030\021 \001(\t\"\033\n\031GetDataSourcesInfoRequest\"\\"
  "\n\027GetDataSourcesInfoReply\022\020\n\005error\030\001 \001(\005"
  ":\0010\022/\n\016dataSourceInfo\030\002 \003(\0132\027.Network.Da"
  "taSourceInfo\"\300\002\n\023AppDataReceiveState\022\030\n\r"
  "receivingRate\030\001 \001(\005:\0010\022\033\n\020udpReceivingRa"
  "te\030\002 \001(\005:\0010\022!\n\026rupFramesReceivingRate\030\003 "
  "\001(\005:\0010\022\031\n\016rupFramesCount\030\004 \001(\003:\0010\022\031\n\016sim"
  "FramesCount\030\005 \001(\003:\0010\022\032\n\017errDatagramSize\030"
  "\006 \001(\003:\0010\022\030\n\rerrSimVersion\030\007 \001(\003:\0010\022$\n\031er"
  "rUnknownAppDataSourceIP\030\010 \001(\003:\0010\022\031\n\016errR"
  "upFrameCRC\030\t \001(\003:\0010\022\"\n\027errNotExpectedSim"
  "Packet\030\n \001(\003:\0010\"\240\007\n\022AppDataSourceState\022\r"
  "\n\002id\030\001 \001(\004:\0010\022\033\n\014dataReceives\030\002 \001(\010:\005fal"
  "se\022\021\n\006uptime\030\003 \001(\003:\0010\022\031\n\016receivedDataID\030"
  "\004 \001(\004:\0010\022 \n\025rupFramesQueueCurSize\030\005 \001(\005:"
  "\0010\022#\n\030rupFramesQueueCurMaxSize\030\006 \001(\005:\0010\022"
  "\034\n\021dataReceivingRate\030\007 \001(\001:\0010\022\033\n\020receive"
  "dDataSize\030\010 \001(\003:\0010\022\036\n\023receivedFramesCoun"
  "t\030\t \001(\003:\0010\022\036\n\023receivedPacketCount\030\n \001(\003:"
  "\0010\022\032\n\017lostPacketCount\030\013 \001(\003:\0010\022$\n\025dataPr"
  "ocessingEnabled\030\014 \001(\010:\005false\022\037\n\024processe"
  "dPacketCount\030\r \001(\003:\0010\022\037\n\024lastPacketSyste"
  "mTime\030\016 \001(\003:\0010\022\034\n\021rupFramePlantTime\030\017 \001("
  "\003:\0010\022\034\n\021rupFrameNumerator\030\020 \001(\r:\0010\022#\n\030si"
  "gnalStatesQueueCurSize\030\021 \001(\005:\0010\022&\n\033signa"
  "lStatesQueueCurMaxSize\030\022 \001(\005:\0010\022\037\n\024acqui"
  "redSignalsCount\030\023 \001(\005:\0010\022\037\n\024errorProtoco"
  "lVersion\030\024 \001(\003:\0010\022\036\n\023errorFramesQuantity"
  "\030\025 \001(\003:\0010\022\027\n\014errorFrameNo\030\026 \001(\003:\0010\022\026\n\013er"
  "rorDataID\030\027 \001(\003:\0010\022\031\n\016errorFrameSize\030\030 \001"
  "(\003:\0010\022\"\n\027errorDuplicatePlantTime\030\031 \001(\003:\001"
  "0\022%\n\032errorNonmonotonicPlantTime\030\032 \001(\003:\0010"
  "\022\025\n\rlmEquipmentID\030\033 \001(\t\022\035\n\022rupFramesQueu"
  "eSize\030\034 \001(\005:\0010\022 \n\025signalStatesQueueSize\030"
  "\035 \001(\005:\0010\022\020\n\005state\030\036 \001(\005:\0010\"k\n\034GetAppData"
  "SourcesStatesReply\022\020\n\005error\030\001 \001(\005:\0010\0229\n\024"
  "appDataSourcesStates\030\002 \003(\0132\033.Network.App"
  "DataSourceState\"\220\002\n\023AppDataServiceState\022"
  "$\n\025CfgServiceIsConnected\030\001 \002(\010:\005false\022\027\n"
  "\014CfgServiceIp\030\002 \001(\r:\0010\022\031\n\016CfgServicePort"
  "\030\003 \001(\005:\0010\022(\n\031ArchiveServiceIsConnected\030\004"
  " \002(\010:\005false\022\033\n\020ArchiveServiceIp\030\005 \001(\r:\0010"
  "\022\035\n\022ArchiveServicePort\030\006 \001(\005:\0010\0229\n\023appDa"
  "taReceiveState\030\007 \001(\0132\034.Network.AppDataRe"
  "ceiveState\"\377\001\n\014SoftwareInfo\022\032\n\014softwareT"
  "ype\030\001 \002(\005:\0048000\022\023\n\013equipmentId\030\002 \002(\t\022\027\n\014"
  "majorVersion\030\003 \002(\005:\0010\022\027\n\014minorVersion\030\004 "
  "\002(\005:\0010\022\023\n\010commitNo\030\005 \002(\005:\0010\022\023\n\013buildBran"
  "ch\030\006 \002(\t\022\021\n\tcommitSHA\030\007 \002(\t\022\020\n\010userName\030"
  "\010 \002(\t\022\022\n\007buildNo\030\t \002(\005:\0010\022\016\n\003crc\030\n \002(\r:\001"
  "0\022\031\n\021clientDescription\030\013 \001(\t\"\027\n\025GetServi"
  "ceInfoRequest\"K\n\rSessionParams\022\036\n\026curren"
  "tSettingsProfile\030\001 \001(\t\022\032\n\017softwareRunMod"
  "e\030\002 \001(\005:\0010\"\304\001\n\013ServiceInfo\022+\n\014softwareIn"
  "fo\030\001 \002(\0132\025.Network.SoftwareInfo\022\021\n\006uptim"
  "e\030\002 \001(\003:\0010\022\027\n\014serviceState\030\003 \001(\005:\0010\022\030\n\rs"
  "erviceUptime\030\004 \001(\003:\0010\022-\n\rsessionParams\030\005"
  " \001(\0132\026.Network.SessionParams\022\023\n\013settings"
  "Xml\030\006 \001(\t\"R\n\023GetServiceInfoReply\022\020\n\005erro"
  "r\030\001 \002(\005:\0010\022)\n\013serviceInfo\030\002 \002(\0132\024.Networ"
  "k.ServiceInfo\"x\n\031ConfigurationServiceSta"
  "te\022\035\n\025currentBuildDirectory\030\001 \002(\t\022!\n\031che"
  "ckBuildAttemptQuantity\030\002 \002(\005\022\031\n\021buildChe"
  "ckerState\030\003 \002(\005\"\205\001\n\021ServiceClientInfo\022\n\n"
  "\002ip\030\003 \002(\005\022\016\n\006uptime\030\005 \002(\003\022\020\n\010isActual\030\006 "
  "\002(\010\022\025\n\rreplyQuantity\030\007 \002(\003\022+\n\014softwareIn"
  "fo\030\013 \002(\0132\025.Network.SoftwareInfo\"=\n\016Servi"
  "ceClients\022+\n\007clients\030\001 \003(\0132\032.Network.Ser"
  "viceClientInfo\"s\n\tBuildInfo\022\017\n\007project\030\001"
  " \002(\t\022\016\n\002id\030\002 \002(\005:\002-1\022\014\n\004date\030\004 \002(\003\022\024\n\tch"
  "angeset\030\005 \002(\005:\0010\022\014\n\004user\030\006 \002(\t\022\023\n\013workst"
  "ation\030\007 \002(\t\"e\n\034ConfigurationServiceSetti"
  "ngs\022\023\n\013equipmentID\030\001 \002(\t\022\031\n\021autoloadBuil"
  "dPath\030\002 \002(\t\022\025\n\rworkDirectory\030\003 \002(\t\"L\n\017Se"
  "rviceSettings\022\023\n\013equipmentID\030\001 \002(\t\022\021\n\tco"
  "nfigIP1\030\002 \002(\t\022\021\n\tconfigIP2\030\003 \002(\t\"\026\n\024GetT"
  "uningSourcesInfo\"\263\001\n\031GetTuningSourcesInf"
  "oReply\022\020\n\005error\030\001 \001(\005:\0010\0221\n\020tuningSource"
  "Info\030\002 \003(\0132\027.Network.DataSourceInfo\022!\n\023s"
  "ingleLmControlMode\030\003 \001(\010:\004true\022\026\n\016active"
  "ClientID\030\004 \001(\t\022\026\n\016activeClientIP\030\005 \001(\t\"\030"
  "\n\026GetTuningSourcesStates\"G\n\037SignalsAssoc"
  "iatedToTuningSource\022\020\n\010sourceID\030\001 \002(\004\022\022\n"
  "\nsignalHash\030\002 \003(\004\"n\n\023TuningSourceFilling"
  "\022\023\n\013signalCount\030\001 \002(\004\022B\n\020signalsPerSourc"
  "e\030\002 \003(\0132(.Network.SignalsAssociatedToTun"
  "ingSource\"\273\013\n\021TuningSourceState\022\023\n\010sourc"
  "eID\030\001 \001(\004:\0010\022\026\n\007isReply\030\002 \001(\010:\005false\022\027\n\014"
  "requestCount\030\003 \001(\003:\0010\022\025\n\nreplyCount\030\004 \001("
  "\003:\0010\022\033\n\020commandQueueSize\030\005 \001(\005:\0010\022\034\n\021err"
  "UntimelyReplay\030\006 \001(\003:\0010\022\022\n\007errSent\030\007 \001(\003"
  ":\0010\022\031\n\016errPartialSent\030\010 \001(\003:\0010\022\027\n\014errRep"
  "lySize\030\t \001(\003:\0010\022\025\n\nerrNoReply\030\n \001(\003:\0010\022 "
  "\n\025errRupProtocolVersion\030\013 \001(\003:\0010\022\032\n\017errR"
  "upFrameSize\030\014 \001(\003:\0010\022\036\n\023errRupNonTuningD"
  "ata\030\r \001(\003:\0010\022\033\n\020errRupModuleType\030\016 \001(\003:\001"
  "0\022\037\n\024errRupFramesQuantity\030\017 \001(\003:\0010\022\034\n\021er"
  "rRupFrameNumber\030\020 \001(\003:\0010\022\"\n\027errFotipProt"
  "ocolVersion\030\021 \001(\003:\0010\022\033\n\020errFotipUniqueID"
  "\030\022 \001(\003:\0010\022\033\n\020errFotipLmNumber\030\023 \001(\003:\0010\022 "
  "\n\025errFotipSubsystemCode\030\024 \001(\003:\0010\022 \n\025errF"
  "otipOperationCode\030\025 \001(\003:\0010\022\034\n\021errFotipFr"
  "ameSize\030\026 \001(\003:\0010\022\032\n\017errFotipRomSize\030\027 \001("
  "\003:\0010\022\037\n\024errFotipRomFrameSize\030\030 \001(\003:\0010\022&\n"
  "\033fotipFlagBoundsCheckSuccess\030\031 \001(\003:\0010\022 \n"
  "\025fotipFlagWriteSuccess\030\032 \001(\003:\0010\022\037\n\024fotip"
  "FlagDataTypeErr\030\033 \001(\003:\0010\022\035\n\022fotipFlagOpC"
  "odeErr\030\034 \001(\003:\0010\022 \n\025fotipFlagStartAddrErr"
  "\030\035 \001(\003:\0010\022\036\n\023fotipFlagRomSizeErr\030\036 \001(\003:\001"
  "0\022#\n\030fotipFlagRomFrameSizeErr\030\037 \001(\003:\0010\022 "
  "\n\025fotipFlagFrameSizeErr\030  \001(\003:\0010\022&\n\033foti"
  "pFlagProtocolVersionErr\030! \001(\003:\0010\022#\n\030foti"
  "pFlagSubsystemKeyErr\030\" \001(\003:\0010\022\036\n\023fotipFl"
  "agUniueIDErr\030# \001(\003:\0010\022\035\n\022fotipFlagOffset"
  "Err\030$ \001(\003:\0010\022 \n\025fotipFlagApplySuccess\030% "
  "\001(\003:\0010\022\032\n\017fotipFlagSetSOR\030& \001(\003:\0010\022!\n\026er"
  "rAnalogLowBoundCheck\030\' \001(\003:\0010\022\"\n\027errAnal"
  "ogHighBoundCheck\030( \001(\003:\0010\022\024\n\terrRupCRC\030)"
  " \001(\003:\0010\022\036\n\017controlIsActive\030* \001(\010:\005false\022"
  "\025\n\006setSOR\030+ \001(\010:\005false\022!\n\022hasUnappliedPa"
  "rams\030, \001(\010:\005false\022\036\n\017writingDisabled\030- \001"
  "(\010:\005false\022#\n\030fotipFlagWritingDisabled\030. "
  "\001(\003:\0010\022\037\n\024errTuningFrameUpdate\030/ \001(\003:\0010\""
  "\272\001\n\033GetTuningSourcesStatesReply\022\020\n\005error"
  "\030\001 \001(\005:\0010\0226\n\022tuningSourcesState\030\002 \003(\0132\032."
  "Network.TuningSourceState\022!\n\023singleLmCon"
  "trolMode\030\003 \001(\010:\004true\022\026\n\016activeClientID\030\004"
  " \001(\t\022\026\n\016activeClientIP\030\005 \001(\t\"z\n\"ChangeCo"
  "nrolledTuningSourceRequest\022\023\n\013takeContro"
  "l\030\001 \001(\010\022\037\n\027tuningSourceEquipmentID\030\002 \001(\t"
  "\022\036\n\017activateControl\030\003 \001(\010:\005false\"\177\n Chan"
  "geConrolledTuningSourceReply\022\020\n\005error\030\001 "
  "\001(\005:\0010\022)\n!controlledTuningSourceEquipmen"
  "tID\030\002 \001(\t\022\036\n\017controlIsActive\030\003 \001(\010:\005fals"
  "e\"\'\n\021TuningSignalsRead\022\022\n\nsignalHash\030\002 \003"
  "(\004\"\322\003\n\021TuningSignalState\022\025\n\nsignalHash\030\001"
  " \001(\006:\0010\022\020\n\005error\030\002 \001(\005:\0010\022\024\n\005valid\030\003 \001(\010"
  ":\005false\022!\n\005value\030\004 \001(\0132\022.Proto.TuningVal"
  "ue\022(\n\014readLowBound\030\005 \001(\0132\022.Proto.TuningV"
  "alue\022)\n\rreadHighBound\030\006 \001(\0132\022.Proto.Tuni"
  "ngValue\022\036\n\017writeInProgress\030\007 \001(\010:\005false\022"
  "\031\n\016writeErrorCode\030\010 \001(\005:\0010\022\026\n\013writeClien"
  "t\030\t \001(\006:\0010\022\035\n\022successfulReadTime\030\n \001(\020:\001"
  "0\022\033\n\020writeRequestTime\030\013 \001(\020:\0010\022\036\n\023succes"
  "sfulWriteTime\030\014 \001(\020:\0010\022 \n\025unsuccessfulWr"
  "iteTime\030\r \001(\020:\0010\022\025\n\006setSOR\030\016 \001(\010:\005false\022"
  "\036\n\017writingDisabled\030\017 \001(\010:\005false\"a\n\026Tunin"
  "gSignalsReadReply\022\020\n\005error\030\001 \001(\005:\0010\0225\n\021t"
  "uningSignalState\030\002 \003(\0132\032.Network.TuningS"
  "ignalState\"N\n\022TuningWriteCommand\022\025\n\nsign"
  "alHash\030\001 \001(\004:\0010\022!\n\005value\030\002 \001(\0132\022.Proto.T"
  "uningValue\"]\n\022TuningSignalsWrite\022\030\n\tauto"
  "Apply\030\002 \001(\010:\005false\022-\n\010commands\030\003 \003(\0132\033.N"
  "etwork.TuningWriteCommand\"B\n\027TuningSigna"
  "lWriteResult\022\025\n\nsignalHash\030\001 \001(\004:\0010\022\020\n\005e"
  "rror\030\002 \001(\005:\0010\"b\n\027TuningSignalsWriteReply"
  "\022\020\n\005error\030\001 \001(\005:\0010\0225\n\013writeResult\030\002 \003(\0132"
  " .Network.TuningSignalWriteResult\"\024\n\022Tun"
  "ingSignalsApply\"+\n\027TuningSignalsApplyRep"
  "ly\022\020\n\005error\030\001 \001(\005:\0010\"B\n\017DataSourceWrite\022"
  "\031\n\021sourceEquipmentID\030\001 \001(\t\022\024\n\005state\030\002 \001("
  "\010:\005false\"(\n\024DataSourceWriteReply\022\020\n\005erro"
  "r\030\001 \001(\005:\0010\"\022\n\020PacketSourceExit\")\n\025Packet"
  "SourceExitReply\022\020\n\005error\030\001 \001(\005:\0010\"q\n$Sav"
  "eAppSignalsStatesToArchiveRequest\022\031\n\021cli"
  "entEquipmentID\030\001 \001(\t\022.\n\017appSignalStates\030"
  "\002 \003(\0132\025.Proto.AppSignalState\"N\n\"SaveAppS"
  "ignalsStatesToArchiveReply\022\020\n\005error\030\001 \001("
  "\005:\0010\022\026\n\tarchError\030\002 \001(\005:\003100\"\271\001\n)GetAppS"
  "ignalStatesFromArchiveStartRequest\022\031\n\021cl"
  "ientEquipmentID\030\001 \001(\t\022\023\n\010timeType\030\002 \001(\005:"
  "\0011\022\024\n\tstartTime\030\003 \001(\020:\0010\022\022\n\007endTime\030\004 \001("
  "\020:\0010\022\024\n\014signalHashes\030\005 \003(\004\022\034\n\016removePeri"
  "odic\030\006 \001(\010:\004true\"~\n\'GetAppSignalStatesFr"
  "omArchiveStartReply\022\020\n\005error\030\001 \001(\005:\0010\022\026\n"
  "\tarchError\030\002 \001(\005:\003100\022\023\n\013errorString\030\004 \001"
  "(\t\022\024\n\trequestID\030\003 \001(\r:\0010\"@\n(GetAppSignal"
  "StatesFromArchiveNextRequest\022\024\n\trequestI"
  "D\030\001 \001(\r:\0010\"\271\002\n&GetAppSignalStatesFromArc"
  "hiveNextReply\022\020\n\005error\030\001 \001(\005:\0010\022\026\n\tarchE"
  "rror\030\002 \001(\005:\003100\022\024\n\trequestID\030\003 \001(\r:\0010\022\023\n"
  "\013errorString\030\n \001(\t\022\030\n\tdataReady\030\004 \001(\010:\005f"
  "alse\022\033\n\020totalStatesCount\030\005 \001(\005:\0010\022\032\n\017sen"
  "tStatesCount\030\006 \001(\005:\0010\022\034\n\021statesInPartCou"
  "nt\030\007 \001(\005:\0010\022\031\n\nisLastPart\030\010 \001(\010:\005false\022."
  "\n\017appSignalStates\030\t \003(\0132\025.Proto.AppSigna"
  "lState\"B\n*GetAppSignalStatesFromArchiveC"
  "ancelRequest\022\024\n\trequestID\030\001 \001(\r:\0010\"i\n(Ge"
  "tAppSignalStatesFromArchiveCancelReply\022\020"
  "\n\005error\030\001 \001(\005:\0010\022\026\n\tarchError\030\002 \001(\005:\003100"
  "\022\023\n\013errorString\030\003 \001(\t\"\204\001\n\031RtTrendsManage"
  "mentRequest\022\031\n\021clientEquipmentID\030\001 \001(\t\022\024"
  "\n\014samplePeriod\030\002 \001(\005\022\032\n\022appendSignalHash"
  "es\030\003 \003(\004\022\032\n\022deleteSignalHashes\030\004 \003(\004\"s\n\027"
  "RtTrendsManagementReply\022\020\n\005error\030\001 \001(\005:\001"
  "0\022\023\n\013errorString\030\002 \001(\t\022\024\n\014samplePeriod\030\003"
  " \001(\005\022\033\n\023trackedSignalHashes\030\004 \003(\004\" \n\036RtT"
  "rendsGetStateChangesRequest\"r\n\034RtTrendsG"
  "etStateChangesReply\022\020\n\005error\030\001 \001(\005:\0010\022\023\n"
  "\013errorString\030\002 \001(\t\022+\n\014signalStates\030\003 \003(\013"
  "2\025.Proto.AppSignalState\"\247\001\n\014GetFileReply"
  "\022\024\n\terrorCode\030\001 \002(\005:\0010\022\023\n\010fileSize\030\002 \001(\003"
  ":\0010\022\025\n\ntotalParts\030\003 \001(\005:\0010\022\026\n\013currentPar"
  "t\030\004 \001(\005:\0010\022\032\n\017currentPartSize\030\005 \001(\005:\0010\022\013"
  "\n\003md5\030\006 \001(\014\022\024\n\014filePartData\030\n \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_network_2eproto_deps[1] = {
  &::descriptor_table_serialization_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_network_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto = {
  false, false, 9553, descriptor_table_protodef_network_2eproto, "network.proto", 
  &descriptor_table_network_2eproto_once, descriptor_table_network_2eproto_deps, 1, 65,
  schemas, file_default_instances, TableStruct_network_2eproto::offsets,
  file_level_metadata_network_2eproto, file_level_enum_descriptors_network_2eproto, file_level_service_descriptors_network_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_network_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2eproto);
  return descriptor_table_network_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_network_2eproto(&descriptor_table_network_2eproto);
namespace Network {

// ===================================================================

class GetSignalListStartRequest::_Internal {
 public:
};

GetSignalListStartRequest::GetSignalListStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetSignalListStartRequest)
}
GetSignalListStartRequest::GetSignalListStartRequest(const GetSignalListStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetSignalListStartRequest)
}

void GetSignalListStartRequest::SharedCtor() {
}

GetSignalListStartRequest::~GetSignalListStartRequest() {
  // @@protoc_insertion_point(destructor:Network.GetSignalListStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSignalListStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSignalListStartRequest::ArenaDtor(void* object) {
  GetSignalListStartRequest* _this = reinterpret_cast< GetSignalListStartRequest* >(object);
  (void)_this;
}
void GetSignalListStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalListStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalListStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetSignalListStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalListStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalListStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetSignalListStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetSignalListStartRequest)
  return target;
}

size_t GetSignalListStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetSignalListStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignalListStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetSignalListStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignalListStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignalListStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetSignalListStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetSignalListStartRequest)
    MergeFrom(*source);
  }
}

void GetSignalListStartRequest::MergeFrom(const GetSignalListStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetSignalListStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSignalListStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetSignalListStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartRequest::CopyFrom(const GetSignalListStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetSignalListStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartRequest::IsInitialized() const {
  return true;
}

void GetSignalListStartRequest::InternalSwap(GetSignalListStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalListStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSignalListStartReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignalListStartReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_totalitemcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemsperpart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GetSignalListStartReply::GetSignalListStartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetSignalListStartReply)
}
GetSignalListStartReply::GetSignalListStartReply(const GetSignalListStartReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemsperpart_) -
    reinterpret_cast<char*>(&error_)) + sizeof(itemsperpart_));
  // @@protoc_insertion_point(copy_constructor:Network.GetSignalListStartReply)
}

void GetSignalListStartReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemsperpart_) -
    reinterpret_cast<char*>(&error_)) + sizeof(itemsperpart_));
}

GetSignalListStartReply::~GetSignalListStartReply() {
  // @@protoc_insertion_point(destructor:Network.GetSignalListStartReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSignalListStartReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSignalListStartReply::ArenaDtor(void* object) {
  GetSignalListStartReply* _this = reinterpret_cast< GetSignalListStartReply* >(object);
  (void)_this;
}
void GetSignalListStartReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalListStartReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalListStartReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetSignalListStartReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemsperpart_) -
        reinterpret_cast<char*>(&error_)) + sizeof(itemsperpart_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalListStartReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 totalItemCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_totalitemcount(&has_bits);
          totalitemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 partCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_partcount(&has_bits);
          partcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 itemsPerPart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_itemsperpart(&has_bits);
          itemsperpart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalListStartReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetSignalListStartReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int32 totalItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalitemcount(), target);
  }

  // optional int32 partCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_partcount(), target);
  }

  // optional int32 itemsPerPart = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_itemsperpart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetSignalListStartReply)
  return target;
}

size_t GetSignalListStartReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetSignalListStartReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 totalItemCount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_totalitemcount());
    }

    // optional int32 partCount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_partcount());
    }

    // optional int32 itemsPerPart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_itemsperpart());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignalListStartReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetSignalListStartReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignalListStartReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignalListStartReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetSignalListStartReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetSignalListStartReply)
    MergeFrom(*source);
  }
}

void GetSignalListStartReply::MergeFrom(const GetSignalListStartReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetSignalListStartReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      totalitemcount_ = from.totalitemcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      partcount_ = from.partcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      itemsperpart_ = from.itemsperpart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSignalListStartReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetSignalListStartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartReply::CopyFrom(const GetSignalListStartReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetSignalListStartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartReply::IsInitialized() const {
  return true;
}

void GetSignalListStartReply::InternalSwap(GetSignalListStartReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalListStartReply, itemsperpart_)
      + sizeof(GetSignalListStartReply::itemsperpart_)
      - PROTOBUF_FIELD_OFFSET(GetSignalListStartReply, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalListStartReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSignalListNextRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignalListNextRequest>()._has_bits_);
  static void set_has_part(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetSignalListNextRequest::GetSignalListNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetSignalListNextRequest)
}
GetSignalListNextRequest::GetSignalListNextRequest(const GetSignalListNextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  part_ = from.part_;
  // @@protoc_insertion_point(copy_constructor:Network.GetSignalListNextRequest)
}

void GetSignalListNextRequest::SharedCtor() {
part_ = 0;
}

GetSignalListNextRequest::~GetSignalListNextRequest() {
  // @@protoc_insertion_point(destructor:Network.GetSignalListNextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSignalListNextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSignalListNextRequest::ArenaDtor(void* object) {
  GetSignalListNextRequest* _this = reinterpret_cast< GetSignalListNextRequest* >(object);
  (void)_this;
}
void GetSignalListNextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalListNextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalListNextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetSignalListNextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalListNextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_part(&has_bits);
          part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalListNextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetSignalListNextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 part = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_part(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetSignalListNextRequest)
  return target;
}

size_t GetSignalListNextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetSignalListNextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 part = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignalListNextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetSignalListNextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignalListNextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignalListNextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetSignalListNextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetSignalListNextRequest)
    MergeFrom(*source);
  }
}

void GetSignalListNextRequest::MergeFrom(const GetSignalListNextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetSignalListNextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_part()) {
    _internal_set_part(from._internal_part());
  }
}

void GetSignalListNextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetSignalListNextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextRequest::CopyFrom(const GetSignalListNextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetSignalListNextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextRequest::IsInitialized() const {
  return true;
}

void GetSignalListNextRequest::InternalSwap(GetSignalListNextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(part_, other->part_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalListNextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSignalListNextReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignalListNextReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_part(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetSignalListNextReply::GetSignalListNextReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignalids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetSignalListNextReply)
}
GetSignalListNextReply::GetSignalListNextReply(const GetSignalListNextReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignalids_(from.appsignalids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&part_) -
    reinterpret_cast<char*>(&error_)) + sizeof(part_));
  // @@protoc_insertion_point(copy_constructor:Network.GetSignalListNextReply)
}

void GetSignalListNextReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&part_) -
    reinterpret_cast<char*>(&error_)) + sizeof(part_));
}

GetSignalListNextReply::~GetSignalListNextReply() {
  // @@protoc_insertion_point(destructor:Network.GetSignalListNextReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSignalListNextReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSignalListNextReply::ArenaDtor(void* object) {
  GetSignalListNextReply* _this = reinterpret_cast< GetSignalListNextReply* >(object);
  (void)_this;
}
void GetSignalListNextReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalListNextReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalListNextReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetSignalListNextReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignalids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&part_) -
        reinterpret_cast<char*>(&error_)) + sizeof(part_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalListNextReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_part(&has_bits);
          part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string appSignalIds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_appsignalids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetSignalListNextReply.appSignalIds");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalListNextReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetSignalListNextReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int32 part = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_part(), target);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0, n = this->_internal_appsignalids_size(); i < n; i++) {
    const auto& s = this->_internal_appsignalids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetSignalListNextReply.appSignalIds");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetSignalListNextReply)
  return target;
}

size_t GetSignalListNextReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetSignalListNextReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string appSignalIds = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(appsignalids_.size());
  for (int i = 0, n = appsignalids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      appsignalids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 part = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_part());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignalListNextReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetSignalListNextReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignalListNextReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignalListNextReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetSignalListNextReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetSignalListNextReply)
    MergeFrom(*source);
  }
}

void GetSignalListNextReply::MergeFrom(const GetSignalListNextReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetSignalListNextReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignalids_.MergeFrom(from.appsignalids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      part_ = from.part_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSignalListNextReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetSignalListNextReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextReply::CopyFrom(const GetSignalListNextReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetSignalListNextReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextReply::IsInitialized() const {
  return true;
}

void GetSignalListNextReply::InternalSwap(GetSignalListNextReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalids_.InternalSwap(&other->appsignalids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalListNextReply, part_)
      + sizeof(GetSignalListNextReply::part_)
      - PROTOBUF_FIELD_OFFSET(GetSignalListNextReply, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalListNextReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalParamRequest::_Internal {
 public:
};

GetAppSignalParamRequest::GetAppSignalParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalParamRequest)
}
GetAppSignalParamRequest::GetAppSignalParamRequest(const GetAppSignalParamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signalhashes_(from.signalhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalParamRequest)
}

void GetAppSignalParamRequest::SharedCtor() {
}

GetAppSignalParamRequest::~GetAppSignalParamRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalParamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalParamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalParamRequest::ArenaDtor(void* object) {
  GetAppSignalParamRequest* _this = reinterpret_cast< GetAppSignalParamRequest* >(object);
  (void)_this;
}
void GetAppSignalParamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalParamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalParamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalParamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalhashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalParamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 signalHashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_signalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalParamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalParamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 1;
  for (int i = 0, n = this->_internal_signalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalhashes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalParamRequest)
  return target;
}

size_t GetAppSignalParamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalParamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->signalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalhashes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalParamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalParamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalParamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalParamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalParamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalParamRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalParamRequest::MergeFrom(const GetAppSignalParamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalParamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalhashes_.MergeFrom(from.signalhashes_);
}

void GetAppSignalParamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalParamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalParamRequest::CopyFrom(const GetAppSignalParamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalParamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalParamRequest::IsInitialized() const {
  return true;
}

void GetAppSignalParamRequest::InternalSwap(GetAppSignalParamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signalhashes_.InternalSwap(&other->signalhashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalParamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalParamReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalParamReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetAppSignalParamReply::clear_appsignals() {
  appsignals_.Clear();
}
GetAppSignalParamReply::GetAppSignalParamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalParamReply)
}
GetAppSignalParamReply::GetAppSignalParamReply(const GetAppSignalParamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignals_(from.appsignals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalParamReply)
}

void GetAppSignalParamReply::SharedCtor() {
error_ = 0;
}

GetAppSignalParamReply::~GetAppSignalParamReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalParamReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalParamReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalParamReply::ArenaDtor(void* object) {
  GetAppSignalParamReply* _this = reinterpret_cast< GetAppSignalParamReply* >(object);
  (void)_this;
}
void GetAppSignalParamReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalParamReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalParamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalParamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignals_.Clear();
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalParamReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignal appSignals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalParamReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalParamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Proto.AppSignal appSignals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_appsignals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalParamReply)
  return target;
}

size_t GetAppSignalParamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalParamReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignal appSignals = 2;
  total_size += 1UL * this->_internal_appsignals_size();
  for (const auto& msg : this->appsignals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalParamReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalParamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalParamReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalParamReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalParamReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalParamReply)
    MergeFrom(*source);
  }
}

void GetAppSignalParamReply::MergeFrom(const GetAppSignalParamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalParamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignals_.MergeFrom(from.appsignals_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void GetAppSignalParamReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalParamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalParamReply::CopyFrom(const GetAppSignalParamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalParamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalParamReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(appsignals_)) return false;
  return true;
}

void GetAppSignalParamReply::InternalSwap(GetAppSignalParamReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignals_.InternalSwap(&other->appsignals_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalParamReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalRequest::_Internal {
 public:
};

GetAppSignalRequest::GetAppSignalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalRequest)
}
GetAppSignalRequest::GetAppSignalRequest(const GetAppSignalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signalhashes_(from.signalhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalRequest)
}

void GetAppSignalRequest::SharedCtor() {
}

GetAppSignalRequest::~GetAppSignalRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalRequest::ArenaDtor(void* object) {
  GetAppSignalRequest* _this = reinterpret_cast< GetAppSignalRequest* >(object);
  (void)_this;
}
void GetAppSignalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalhashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 signalHashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_signalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 1;
  for (int i = 0, n = this->_internal_signalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalhashes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalRequest)
  return target;
}

size_t GetAppSignalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->signalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalhashes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalRequest::MergeFrom(const GetAppSignalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalhashes_.MergeFrom(from.signalhashes_);
}

void GetAppSignalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalRequest::CopyFrom(const GetAppSignalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalRequest::IsInitialized() const {
  return true;
}

void GetAppSignalRequest::InternalSwap(GetAppSignalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signalhashes_.InternalSwap(&other->signalhashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetAppSignalReply::clear_appsignals() {
  appsignals_.Clear();
}
GetAppSignalReply::GetAppSignalReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalReply)
}
GetAppSignalReply::GetAppSignalReply(const GetAppSignalReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignals_(from.appsignals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalReply)
}

void GetAppSignalReply::SharedCtor() {
error_ = 0;
}

GetAppSignalReply::~GetAppSignalReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalReply::ArenaDtor(void* object) {
  GetAppSignalReply* _this = reinterpret_cast< GetAppSignalReply* >(object);
  (void)_this;
}
void GetAppSignalReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignals_.Clear();
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignal appSignals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Proto.AppSignal appSignals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_appsignals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalReply)
  return target;
}

size_t GetAppSignalReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignal appSignals = 2;
  total_size += 1UL * this->_internal_appsignals_size();
  for (const auto& msg : this->appsignals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalReply)
    MergeFrom(*source);
  }
}

void GetAppSignalReply::MergeFrom(const GetAppSignalReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignals_.MergeFrom(from.appsignals_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void GetAppSignalReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalReply::CopyFrom(const GetAppSignalReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(appsignals_)) return false;
  return true;
}

void GetAppSignalReply::InternalSwap(GetAppSignalReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignals_.InternalSwap(&other->appsignals_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStateRequest::_Internal {
 public:
};

GetAppSignalStateRequest::GetAppSignalStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStateRequest)
}
GetAppSignalStateRequest::GetAppSignalStateRequest(const GetAppSignalStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signalhashes_(from.signalhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStateRequest)
}

void GetAppSignalStateRequest::SharedCtor() {
}

GetAppSignalStateRequest::~GetAppSignalStateRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalStateRequest::ArenaDtor(void* object) {
  GetAppSignalStateRequest* _this = reinterpret_cast< GetAppSignalStateRequest* >(object);
  (void)_this;
}
void GetAppSignalStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalhashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 signalHashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_signalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 1;
  for (int i = 0, n = this->_internal_signalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalhashes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStateRequest)
  return target;
}

size_t GetAppSignalStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->signalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalhashes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStateRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalStateRequest::MergeFrom(const GetAppSignalStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalhashes_.MergeFrom(from.signalhashes_);
}

void GetAppSignalStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateRequest::CopyFrom(const GetAppSignalStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateRequest::IsInitialized() const {
  return true;
}

void GetAppSignalStateRequest::InternalSwap(GetAppSignalStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signalhashes_.InternalSwap(&other->signalhashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStateReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStateReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_servertimeutc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_servertimelocal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void GetAppSignalStateReply::clear_appsignalstates() {
  appsignalstates_.Clear();
}
GetAppSignalStateReply::GetAppSignalStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignalstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStateReply)
}
GetAppSignalStateReply::GetAppSignalStateReply(const GetAppSignalStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignalstates_(from.appsignalstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&servertimeutc_, &from.servertimeutc_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&servertimeutc_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStateReply)
}

void GetAppSignalStateReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&servertimeutc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&servertimeutc_)) + sizeof(error_));
}

GetAppSignalStateReply::~GetAppSignalStateReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalStateReply::ArenaDtor(void* object) {
  GetAppSignalStateReply* _this = reinterpret_cast< GetAppSignalStateReply* >(object);
  (void)_this;
}
void GetAppSignalStateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignalstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&servertimeutc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&servertimeutc_)) + sizeof(error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 serverTimeUtc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_servertimeutc(&has_bits);
          servertimeutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 serverTimeLocal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_servertimelocal(&has_bits);
          servertimelocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignalState appSignalStates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignalstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int64 serverTimeUtc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_servertimeutc(), target);
  }

  // optional int64 serverTimeLocal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_servertimelocal(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignalstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_appsignalstates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStateReply)
  return target;
}

size_t GetAppSignalStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignalState appSignalStates = 4;
  total_size += 1UL * this->_internal_appsignalstates_size();
  for (const auto& msg : this->appsignalstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 serverTimeUtc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_servertimeutc());
    }

    // optional int64 serverTimeLocal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_servertimelocal());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStateReply)
    MergeFrom(*source);
  }
}

void GetAppSignalStateReply::MergeFrom(const GetAppSignalStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignalstates_.MergeFrom(from.appsignalstates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      servertimeutc_ = from.servertimeutc_;
    }
    if (cached_has_bits & 0x00000002u) {
      servertimelocal_ = from.servertimelocal_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAppSignalStateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateReply::CopyFrom(const GetAppSignalStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateReply::IsInitialized() const {
  return true;
}

void GetAppSignalStateReply::InternalSwap(GetAppSignalStateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalstates_.InternalSwap(&other->appsignalstates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAppSignalStateReply, error_)
      + sizeof(GetAppSignalStateReply::error_)
      - PROTOBUF_FIELD_OFFSET(GetAppSignalStateReply, servertimeutc_)>(
          reinterpret_cast<char*>(&servertimeutc_),
          reinterpret_cast<char*>(&other->servertimeutc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStateChangesRequest::_Internal {
 public:
};

GetAppSignalStateChangesRequest::GetAppSignalStateChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStateChangesRequest)
}
GetAppSignalStateChangesRequest::GetAppSignalStateChangesRequest(const GetAppSignalStateChangesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStateChangesRequest)
}

void GetAppSignalStateChangesRequest::SharedCtor() {
}

GetAppSignalStateChangesRequest::~GetAppSignalStateChangesRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStateChangesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStateChangesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalStateChangesRequest::ArenaDtor(void* object) {
  GetAppSignalStateChangesRequest* _this = reinterpret_cast< GetAppSignalStateChangesRequest* >(object);
  (void)_this;
}
void GetAppSignalStateChangesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStateChangesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStateChangesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStateChangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStateChangesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStateChangesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStateChangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStateChangesRequest)
  return target;
}

size_t GetAppSignalStateChangesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStateChangesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStateChangesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStateChangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStateChangesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStateChangesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStateChangesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStateChangesRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalStateChangesRequest::MergeFrom(const GetAppSignalStateChangesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStateChangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAppSignalStateChangesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStateChangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateChangesRequest::CopyFrom(const GetAppSignalStateChangesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStateChangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateChangesRequest::IsInitialized() const {
  return true;
}

void GetAppSignalStateChangesRequest::InternalSwap(GetAppSignalStateChangesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStateChangesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStateChangesReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStateChangesReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_servertimeutc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_servertimelocal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pendingstatescount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void GetAppSignalStateChangesReply::clear_appsignalstates() {
  appsignalstates_.Clear();
}
GetAppSignalStateChangesReply::GetAppSignalStateChangesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignalstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStateChangesReply)
}
GetAppSignalStateChangesReply::GetAppSignalStateChangesReply(const GetAppSignalStateChangesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignalstates_(from.appsignalstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&servertimeutc_, &from.servertimeutc_,
    static_cast<size_t>(reinterpret_cast<char*>(&servertimelocal_) -
    reinterpret_cast<char*>(&servertimeutc_)) + sizeof(servertimelocal_));
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStateChangesReply)
}

void GetAppSignalStateChangesReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&servertimeutc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&servertimelocal_) -
    reinterpret_cast<char*>(&servertimeutc_)) + sizeof(servertimelocal_));
}

GetAppSignalStateChangesReply::~GetAppSignalStateChangesReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStateChangesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStateChangesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalStateChangesReply::ArenaDtor(void* object) {
  GetAppSignalStateChangesReply* _this = reinterpret_cast< GetAppSignalStateChangesReply* >(object);
  (void)_this;
}
void GetAppSignalStateChangesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStateChangesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStateChangesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStateChangesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignalstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&servertimeutc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&servertimelocal_) -
        reinterpret_cast<char*>(&servertimeutc_)) + sizeof(servertimelocal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStateChangesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 serverTimeUtc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_servertimeutc(&has_bits);
          servertimeutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 serverTimeLocal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_servertimelocal(&has_bits);
          servertimelocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pendingStatesCount = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pendingstatescount(&has_bits);
          pendingstatescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignalState appSignalStates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignalstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStateChangesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStateChangesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int64 serverTimeUtc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_servertimeutc(), target);
  }

  // optional int64 serverTimeLocal = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_servertimelocal(), target);
  }

  // optional int32 pendingStatesCount = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pendingstatescount(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignalstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_appsignalstates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStateChangesReply)
  return target;
}

size_t GetAppSignalStateChangesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStateChangesReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignalState appSignalStates = 5;
  total_size += 1UL * this->_internal_appsignalstates_size();
  for (const auto& msg : this->appsignalstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 serverTimeUtc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_servertimeutc());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 pendingStatesCount = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pendingstatescount());
    }

    // optional int64 serverTimeLocal = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_servertimelocal());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStateChangesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStateChangesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStateChangesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStateChangesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStateChangesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStateChangesReply)
    MergeFrom(*source);
  }
}

void GetAppSignalStateChangesReply::MergeFrom(const GetAppSignalStateChangesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStateChangesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignalstates_.MergeFrom(from.appsignalstates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      servertimeutc_ = from.servertimeutc_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      pendingstatescount_ = from.pendingstatescount_;
    }
    if (cached_has_bits & 0x00000008u) {
      servertimelocal_ = from.servertimelocal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAppSignalStateChangesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStateChangesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateChangesReply::CopyFrom(const GetAppSignalStateChangesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStateChangesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateChangesReply::IsInitialized() const {
  return true;
}

void GetAppSignalStateChangesReply::InternalSwap(GetAppSignalStateChangesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalstates_.InternalSwap(&other->appsignalstates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAppSignalStateChangesReply, servertimelocal_)
      + sizeof(GetAppSignalStateChangesReply::servertimelocal_)
      - PROTOBUF_FIELD_OFFSET(GetAppSignalStateChangesReply, servertimeutc_)>(
          reinterpret_cast<char*>(&servertimeutc_),
          reinterpret_cast<char*>(&other->servertimeutc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStateChangesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataSourceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lmequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lmcaption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lmdatatype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lmip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lmport(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lmsubsystemkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lmsubsystemid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lmsubsystemchannel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lmnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lmmoduletype(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lmadapterid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lmdataenable(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lmdataid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lmuniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lmrupframesquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lmpresetname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DataSourceInfo::DataSourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.DataSourceInfo)
}
DataSourceInfo::DataSourceInfo(const DataSourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmequipmentid()) {
    lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmequipmentid(), 
      GetArena());
  }
  lmcaption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmcaption()) {
    lmcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmcaption(), 
      GetArena());
  }
  lmip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmip()) {
    lmip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmip(), 
      GetArena());
  }
  lmsubsystemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmsubsystemid()) {
    lmsubsystemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmsubsystemid(), 
      GetArena());
  }
  lmsubsystemchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmsubsystemchannel()) {
    lmsubsystemchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmsubsystemchannel(), 
      GetArena());
  }
  lmadapterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmadapterid()) {
    lmadapterid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmadapterid(), 
      GetArena());
  }
  lmpresetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmpresetname()) {
    lmpresetname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmpresetname(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lmrupframesquantity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lmrupframesquantity_));
  // @@protoc_insertion_point(copy_constructor:Network.DataSourceInfo)
}

void DataSourceInfo::SharedCtor() {
lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmcaption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmsubsystemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmsubsystemchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmadapterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmpresetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lmrupframesquantity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lmrupframesquantity_));
}

DataSourceInfo::~DataSourceInfo() {
  // @@protoc_insertion_point(destructor:Network.DataSourceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataSourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lmequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmcaption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmsubsystemid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmsubsystemchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmadapterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmpresetname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataSourceInfo::ArenaDtor(void* object) {
  DataSourceInfo* _this = reinterpret_cast< DataSourceInfo* >(object);
  (void)_this;
}
void DataSourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataSourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataSourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.DataSourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lmequipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lmcaption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      lmip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      lmsubsystemid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      lmsubsystemchannel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      lmadapterid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      lmpresetname_.ClearNonDefaultToEmpty();
    }
  }
  id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lmdatatype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lmdataid_) -
        reinterpret_cast<char*>(&lmdatatype_)) + sizeof(lmdataid_));
  }
  lmrupframesquantity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmEquipmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lmequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmCaption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lmcaption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmCaption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmDataType = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lmdatatype(&has_bits);
          lmdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmIP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_lmip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmPort = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lmport(&has_bits);
          lmport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmSubsystemKey = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lmsubsystemkey(&has_bits);
          lmsubsystemkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmSubsystemID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_lmsubsystemid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmSubsystemID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmSubsystemChannel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_lmsubsystemchannel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmSubsystemChannel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmNumber = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_lmnumber(&has_bits);
          lmnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmModuleType = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lmmoduletype(&has_bits);
          lmmoduletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmAdapterID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_lmadapterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmAdapterID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lmDataEnable = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_lmdataenable(&has_bits);
          lmdataenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lmDataID = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_lmdataid(&has_bits);
          lmdataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lmUniqueID = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_lmuniqueid(&has_bits);
          lmuniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmRupFramesQuantity = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_lmrupframesquantity(&has_bits);
          lmrupframesquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmPresetName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_lmpresetname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceInfo.lmPresetName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.DataSourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string lmEquipmentID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmequipmentid().data(), static_cast<int>(this->_internal_lmequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmEquipmentID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lmequipmentid(), target);
  }

  // optional string lmCaption = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmcaption().data(), static_cast<int>(this->_internal_lmcaption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmCaption");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lmcaption(), target);
  }

  // optional int32 lmDataType = 4 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lmdatatype(), target);
  }

  // optional string lmIP = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmip().data(), static_cast<int>(this->_internal_lmip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmIP");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lmip(), target);
  }

  // optional int32 lmPort = 6 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lmport(), target);
  }

  // optional int32 lmSubsystemKey = 7 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_lmsubsystemkey(), target);
  }

  // optional string lmSubsystemID = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmsubsystemid().data(), static_cast<int>(this->_internal_lmsubsystemid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmSubsystemID");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lmsubsystemid(), target);
  }

  // optional string lmSubsystemChannel = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmsubsystemchannel().data(), static_cast<int>(this->_internal_lmsubsystemchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmSubsystemChannel");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lmsubsystemchannel(), target);
  }

  // optional int32 lmNumber = 10 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_lmnumber(), target);
  }

  // optional int32 lmModuleType = 11 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_lmmoduletype(), target);
  }

  // optional string lmAdapterID = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmadapterid().data(), static_cast<int>(this->_internal_lmadapterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmAdapterID");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_lmadapterid(), target);
  }

  // optional bool lmDataEnable = 13 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_lmdataenable(), target);
  }

  // optional uint32 lmDataID = 14 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_lmdataid(), target);
  }

  // optional uint64 lmUniqueID = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_lmuniqueid(), target);
  }

  // optional int32 lmRupFramesQuantity = 16 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_lmrupframesquantity(), target);
  }

  // optional string lmPresetName = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmpresetname().data(), static_cast<int>(this->_internal_lmpresetname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceInfo.lmPresetName");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_lmpresetname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.DataSourceInfo)
  return target;
}

size_t DataSourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.DataSourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lmEquipmentID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmequipmentid());
    }

    // optional string lmCaption = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmcaption());
    }

    // optional string lmIP = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmip());
    }

    // optional string lmSubsystemID = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmsubsystemid());
    }

    // optional string lmSubsystemChannel = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmsubsystemchannel());
    }

    // optional string lmAdapterID = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmadapterid());
    }

    // optional string lmPresetName = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmpresetname());
    }

    // optional uint64 id = 1 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 lmDataType = 4 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lmdatatype());
    }

    // optional int32 lmPort = 6 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lmport());
    }

    // optional int32 lmSubsystemKey = 7 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lmsubsystemkey());
    }

    // optional int32 lmNumber = 10 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lmnumber());
    }

    // optional int32 lmModuleType = 11 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lmmoduletype());
    }

    // optional bool lmDataEnable = 13 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint64 lmUniqueID = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lmuniqueid());
    }

    // optional uint32 lmDataID = 14 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lmdataid());
    }

  }
  // optional int32 lmRupFramesQuantity = 16 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lmrupframesquantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.DataSourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.DataSourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.DataSourceInfo)
    MergeFrom(*source);
  }
}

void DataSourceInfo::MergeFrom(const DataSourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.DataSourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lmequipmentid(from._internal_lmequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lmcaption(from._internal_lmcaption());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_lmip(from._internal_lmip());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_lmsubsystemid(from._internal_lmsubsystemid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_lmsubsystemchannel(from._internal_lmsubsystemchannel());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_lmadapterid(from._internal_lmadapterid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_lmpresetname(from._internal_lmpresetname());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lmdatatype_ = from.lmdatatype_;
    }
    if (cached_has_bits & 0x00000200u) {
      lmport_ = from.lmport_;
    }
    if (cached_has_bits & 0x00000400u) {
      lmsubsystemkey_ = from.lmsubsystemkey_;
    }
    if (cached_has_bits & 0x00000800u) {
      lmnumber_ = from.lmnumber_;
    }
    if (cached_has_bits & 0x00001000u) {
      lmmoduletype_ = from.lmmoduletype_;
    }
    if (cached_has_bits & 0x00002000u) {
      lmdataenable_ = from.lmdataenable_;
    }
    if (cached_has_bits & 0x00004000u) {
      lmuniqueid_ = from.lmuniqueid_;
    }
    if (cached_has_bits & 0x00008000u) {
      lmdataid_ = from.lmdataid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_lmrupframesquantity(from._internal_lmrupframesquantity());
  }
}

void DataSourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.DataSourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceInfo::CopyFrom(const DataSourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.DataSourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceInfo::IsInitialized() const {
  return true;
}

void DataSourceInfo::InternalSwap(DataSourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lmequipmentid_.Swap(&other->lmequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmcaption_.Swap(&other->lmcaption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmip_.Swap(&other->lmip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmsubsystemid_.Swap(&other->lmsubsystemid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmsubsystemchannel_.Swap(&other->lmsubsystemchannel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmadapterid_.Swap(&other->lmadapterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmpresetname_.Swap(&other->lmpresetname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSourceInfo, lmrupframesquantity_)
      + sizeof(DataSourceInfo::lmrupframesquantity_)
      - PROTOBUF_FIELD_OFFSET(DataSourceInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDataSourcesInfoRequest::_Internal {
 public:
};

GetDataSourcesInfoRequest::GetDataSourcesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetDataSourcesInfoRequest)
}
GetDataSourcesInfoRequest::GetDataSourcesInfoRequest(const GetDataSourcesInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetDataSourcesInfoRequest)
}

void GetDataSourcesInfoRequest::SharedCtor() {
}

GetDataSourcesInfoRequest::~GetDataSourcesInfoRequest() {
  // @@protoc_insertion_point(destructor:Network.GetDataSourcesInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDataSourcesInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDataSourcesInfoRequest::ArenaDtor(void* object) {
  GetDataSourcesInfoRequest* _this = reinterpret_cast< GetDataSourcesInfoRequest* >(object);
  (void)_this;
}
void GetDataSourcesInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDataSourcesInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDataSourcesInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetDataSourcesInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataSourcesInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataSourcesInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetDataSourcesInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetDataSourcesInfoRequest)
  return target;
}

size_t GetDataSourcesInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetDataSourcesInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataSourcesInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetDataSourcesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataSourcesInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDataSourcesInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetDataSourcesInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetDataSourcesInfoRequest)
    MergeFrom(*source);
  }
}

void GetDataSourcesInfoRequest::MergeFrom(const GetDataSourcesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetDataSourcesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDataSourcesInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetDataSourcesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataSourcesInfoRequest::CopyFrom(const GetDataSourcesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetDataSourcesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataSourcesInfoRequest::IsInitialized() const {
  return true;
}

void GetDataSourcesInfoRequest::InternalSwap(GetDataSourcesInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataSourcesInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDataSourcesInfoReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDataSourcesInfoReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetDataSourcesInfoReply::GetDataSourcesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  datasourceinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetDataSourcesInfoReply)
}
GetDataSourcesInfoReply::GetDataSourcesInfoReply(const GetDataSourcesInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      datasourceinfo_(from.datasourceinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.GetDataSourcesInfoReply)
}

void GetDataSourcesInfoReply::SharedCtor() {
error_ = 0;
}

GetDataSourcesInfoReply::~GetDataSourcesInfoReply() {
  // @@protoc_insertion_point(destructor:Network.GetDataSourcesInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDataSourcesInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDataSourcesInfoReply::ArenaDtor(void* object) {
  GetDataSourcesInfoReply* _this = reinterpret_cast< GetDataSourcesInfoReply* >(object);
  (void)_this;
}
void GetDataSourcesInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDataSourcesInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDataSourcesInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetDataSourcesInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasourceinfo_.Clear();
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataSourcesInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.DataSourceInfo dataSourceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasourceinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataSourcesInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetDataSourcesInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datasourceinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_datasourceinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetDataSourcesInfoReply)
  return target;
}

size_t GetDataSourcesInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetDataSourcesInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  total_size += 1UL * this->_internal_datasourceinfo_size();
  for (const auto& msg : this->datasourceinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataSourcesInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetDataSourcesInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataSourcesInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDataSourcesInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetDataSourcesInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetDataSourcesInfoReply)
    MergeFrom(*source);
  }
}

void GetDataSourcesInfoReply::MergeFrom(const GetDataSourcesInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetDataSourcesInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datasourceinfo_.MergeFrom(from.datasourceinfo_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void GetDataSourcesInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetDataSourcesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataSourcesInfoReply::CopyFrom(const GetDataSourcesInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetDataSourcesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataSourcesInfoReply::IsInitialized() const {
  return true;
}

void GetDataSourcesInfoReply::InternalSwap(GetDataSourcesInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datasourceinfo_.InternalSwap(&other->datasourceinfo_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataSourcesInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppDataReceiveState::_Internal {
 public:
  using HasBits = decltype(std::declval<AppDataReceiveState>()._has_bits_);
  static void set_has_receivingrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_udpreceivingrate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rupframesreceivingrate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rupframescount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_simframescount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_errdatagramsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errsimversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_errunknownappdatasourceip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_errrupframecrc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_errnotexpectedsimpacket(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AppDataReceiveState::AppDataReceiveState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.AppDataReceiveState)
}
AppDataReceiveState::AppDataReceiveState(const AppDataReceiveState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&receivingrate_, &from.receivingrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&rupframesreceivingrate_) -
    reinterpret_cast<char*>(&receivingrate_)) + sizeof(rupframesreceivingrate_));
  // @@protoc_insertion_point(copy_constructor:Network.AppDataReceiveState)
}

void AppDataReceiveState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&receivingrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rupframesreceivingrate_) -
    reinterpret_cast<char*>(&receivingrate_)) + sizeof(rupframesreceivingrate_));
}

AppDataReceiveState::~AppDataReceiveState() {
  // @@protoc_insertion_point(destructor:Network.AppDataReceiveState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppDataReceiveState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppDataReceiveState::ArenaDtor(void* object) {
  AppDataReceiveState* _this = reinterpret_cast< AppDataReceiveState* >(object);
  (void)_this;
}
void AppDataReceiveState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppDataReceiveState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppDataReceiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.AppDataReceiveState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&receivingrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errrupframecrc_) -
        reinterpret_cast<char*>(&receivingrate_)) + sizeof(errrupframecrc_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&errnotexpectedsimpacket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rupframesreceivingrate_) -
        reinterpret_cast<char*>(&errnotexpectedsimpacket_)) + sizeof(rupframesreceivingrate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDataReceiveState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 receivingRate = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_receivingrate(&has_bits);
          receivingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 udpReceivingRate = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_udpreceivingrate(&has_bits);
          udpreceivingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rupFramesReceivingRate = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rupframesreceivingrate(&has_bits);
          rupframesreceivingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rupFramesCount = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rupframescount(&has_bits);
          rupframescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 simFramesCount = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_simframescount(&has_bits);
          simframescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errDatagramSize = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_errdatagramsize(&has_bits);
          errdatagramsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errSimVersion = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_errsimversion(&has_bits);
          errsimversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errUnknownAppDataSourceIP = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_errunknownappdatasourceip(&has_bits);
          errunknownappdatasourceip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupFrameCRC = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_errrupframecrc(&has_bits);
          errrupframecrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errNotExpectedSimPacket = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_errnotexpectedsimpacket(&has_bits);
          errnotexpectedsimpacket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppDataReceiveState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.AppDataReceiveState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 receivingRate = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_receivingrate(), target);
  }

  // optional int32 udpReceivingRate = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_udpreceivingrate(), target);
  }

  // optional int32 rupFramesReceivingRate = 3 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rupframesreceivingrate(), target);
  }

  // optional int64 rupFramesCount = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_rupframescount(), target);
  }

  // optional int64 simFramesCount = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_simframescount(), target);
  }

  // optional int64 errDatagramSize = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_errdatagramsize(), target);
  }

  // optional int64 errSimVersion = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_errsimversion(), target);
  }

  // optional int64 errUnknownAppDataSourceIP = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_errunknownappdatasourceip(), target);
  }

  // optional int64 errRupFrameCRC = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_errrupframecrc(), target);
  }

  // optional int64 errNotExpectedSimPacket = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_errnotexpectedsimpacket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.AppDataReceiveState)
  return target;
}

size_t AppDataReceiveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.AppDataReceiveState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 receivingRate = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_receivingrate());
    }

    // optional int32 udpReceivingRate = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_udpreceivingrate());
    }

    // optional int64 rupFramesCount = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rupframescount());
    }

    // optional int64 simFramesCount = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_simframescount());
    }

    // optional int64 errDatagramSize = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errdatagramsize());
    }

    // optional int64 errSimVersion = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errsimversion());
    }

    // optional int64 errUnknownAppDataSourceIP = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errunknownappdatasourceip());
    }

    // optional int64 errRupFrameCRC = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupframecrc());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 errNotExpectedSimPacket = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errnotexpectedsimpacket());
    }

    // optional int32 rupFramesReceivingRate = 3 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rupframesreceivingrate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppDataReceiveState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.AppDataReceiveState)
  GOOGLE_DCHECK_NE(&from, this);
  const AppDataReceiveState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppDataReceiveState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.AppDataReceiveState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.AppDataReceiveState)
    MergeFrom(*source);
  }
}

void AppDataReceiveState::MergeFrom(const AppDataReceiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.AppDataReceiveState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      receivingrate_ = from.receivingrate_;
    }
    if (cached_has_bits & 0x00000002u) {
      udpreceivingrate_ = from.udpreceivingrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      rupframescount_ = from.rupframescount_;
    }
    if (cached_has_bits & 0x00000008u) {
      simframescount_ = from.simframescount_;
    }
    if (cached_has_bits & 0x00000010u) {
      errdatagramsize_ = from.errdatagramsize_;
    }
    if (cached_has_bits & 0x00000020u) {
      errsimversion_ = from.errsimversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      errunknownappdatasourceip_ = from.errunknownappdatasourceip_;
    }
    if (cached_has_bits & 0x00000080u) {
      errrupframecrc_ = from.errrupframecrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      errnotexpectedsimpacket_ = from.errnotexpectedsimpacket_;
    }
    if (cached_has_bits & 0x00000200u) {
      rupframesreceivingrate_ = from.rupframesreceivingrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppDataReceiveState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.AppDataReceiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataReceiveState::CopyFrom(const AppDataReceiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.AppDataReceiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataReceiveState::IsInitialized() const {
  return true;
}

void AppDataReceiveState::InternalSwap(AppDataReceiveState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDataReceiveState, rupframesreceivingrate_)
      + sizeof(AppDataReceiveState::rupframesreceivingrate_)
      - PROTOBUF_FIELD_OFFSET(AppDataReceiveState, receivingrate_)>(
          reinterpret_cast<char*>(&receivingrate_),
          reinterpret_cast<char*>(&other->receivingrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDataReceiveState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppDataSourceState::_Internal {
 public:
  using HasBits = decltype(std::declval<AppDataSourceState>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_datareceives(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_uptime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_receiveddataid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rupframesqueuecursize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rupframesqueuecurmaxsize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_datareceivingrate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_receiveddatasize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_receivedframescount(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_receivedpacketcount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lostpacketcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dataprocessingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_processedpacketcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lastpacketsystemtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rupframeplanttime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_rupframenumerator(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_signalstatesqueuecursize(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_signalstatesqueuecurmaxsize(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_acquiredsignalscount(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_errorprotocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_errorframesquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_errorframeno(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_errordataid(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_errorframesize(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_errorduplicateplanttime(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_errornonmonotonicplanttime(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_lmequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rupframesqueuesize(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_signalstatesqueuesize(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

AppDataSourceState::AppDataSourceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.AppDataSourceState)
}
AppDataSourceState::AppDataSourceState(const AppDataSourceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmequipmentid()) {
    lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmequipmentid(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Network.AppDataSourceState)
}

void AppDataSourceState::SharedCtor() {
lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

AppDataSourceState::~AppDataSourceState() {
  // @@protoc_insertion_point(destructor:Network.AppDataSourceState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppDataSourceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lmequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppDataSourceState::ArenaDtor(void* object) {
  AppDataSourceState* _this = reinterpret_cast< AppDataSourceState* >(object);
  (void)_this;
}
void AppDataSourceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppDataSourceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppDataSourceState::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.AppDataSourceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lmequipmentid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiveddatasize_) -
        reinterpret_cast<char*>(&id_)) + sizeof(receiveddatasize_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&receivedframescount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastpacketsystemtime_) -
        reinterpret_cast<char*>(&receivedframescount_)) + sizeof(lastpacketsystemtime_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&rupframeplanttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acquiredsignalscount_) -
        reinterpret_cast<char*>(&rupframeplanttime_)) + sizeof(acquiredsignalscount_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&rupframesqueuesize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&rupframesqueuesize_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDataSourceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dataReceives = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_datareceives(&has_bits);
          datareceives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 uptime = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uptime(&has_bits);
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 receivedDataID = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_receiveddataid(&has_bits);
          receiveddataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rupFramesQueueCurSize = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rupframesqueuecursize(&has_bits);
          rupframesqueuecursize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rupFramesQueueCurMaxSize = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rupframesqueuecurmaxsize(&has_bits);
          rupframesqueuecurmaxsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double dataReceivingRate = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_datareceivingrate(&has_bits);
          datareceivingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 receivedDataSize = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_receiveddatasize(&has_bits);
          receiveddatasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receivedFramesCount = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_receivedframescount(&has_bits);
          receivedframescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receivedPacketCount = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_receivedpacketcount(&has_bits);
          receivedpacketcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lostPacketCount = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lostpacketcount(&has_bits);
          lostpacketcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dataProcessingEnabled = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_dataprocessingenabled(&has_bits);
          dataprocessingenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 processedPacketCount = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_processedpacketcount(&has_bits);
          processedpacketcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lastPacketSystemTime = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_lastpacketsystemtime(&has_bits);
          lastpacketsystemtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rupFramePlantTime = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_rupframeplanttime(&has_bits);
          rupframeplanttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rupFrameNumerator = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rupframenumerator(&has_bits);
          rupframenumerator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalStatesQueueCurSize = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_signalstatesqueuecursize(&has_bits);
          signalstatesqueuecursize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalStatesQueueCurMaxSize = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_signalstatesqueuecurmaxsize(&has_bits);
          signalstatesqueuecurmaxsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acquiredSignalsCount = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_acquiredsignalscount(&has_bits);
          acquiredsignalscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorProtocolVersion = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_errorprotocolversion(&has_bits);
          errorprotocolversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorFramesQuantity = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_errorframesquantity(&has_bits);
          errorframesquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorFrameNo = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_errorframeno(&has_bits);
          errorframeno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorDataID = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_errordataid(&has_bits);
          errordataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorFrameSize = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_errorframesize(&has_bits);
          errorframesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorDuplicatePlantTime = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_errorduplicateplanttime(&has_bits);
          errorduplicateplanttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_errornonmonotonicplanttime(&has_bits);
          errornonmonotonicplanttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmEquipmentID = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_lmequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.AppDataSourceState.lmEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rupFramesQueueSize = 28 [default = 0];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_rupframesqueuesize(&has_bits);
          rupframesqueuesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalStatesQueueSize = 29 [default = 0];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_signalstatesqueuesize(&has_bits);
          signalstatesqueuesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 state = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppDataSourceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.AppDataSourceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional bool dataReceives = 2 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_datareceives(), target);
  }

  // optional int64 uptime = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_uptime(), target);
  }

  // optional uint64 receivedDataID = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_receiveddataid(), target);
  }

  // optional int32 rupFramesQueueCurSize = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rupframesqueuecursize(), target);
  }

  // optional int32 rupFramesQueueCurMaxSize = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rupframesqueuecurmaxsize(), target);
  }

  // optional double dataReceivingRate = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_datareceivingrate(), target);
  }

  // optional int64 receivedDataSize = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_receiveddatasize(), target);
  }

  // optional int64 receivedFramesCount = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_receivedframescount(), target);
  }

  // optional int64 receivedPacketCount = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_receivedpacketcount(), target);
  }

  // optional int64 lostPacketCount = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_lostpacketcount(), target);
  }

  // optional bool dataProcessingEnabled = 12 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_dataprocessingenabled(), target);
  }

  // optional int64 processedPacketCount = 13 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_processedpacketcount(), target);
  }

  // optional int64 lastPacketSystemTime = 14 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_lastpacketsystemtime(), target);
  }

  // optional int64 rupFramePlantTime = 15 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_rupframeplanttime(), target);
  }

  // optional uint32 rupFrameNumerator = 16 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_rupframenumerator(), target);
  }

  // optional int32 signalStatesQueueCurSize = 17 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_signalstatesqueuecursize(), target);
  }

  // optional int32 signalStatesQueueCurMaxSize = 18 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_signalstatesqueuecurmaxsize(), target);
  }

  // optional int32 acquiredSignalsCount = 19 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_acquiredsignalscount(), target);
  }

  // optional int64 errorProtocolVersion = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_errorprotocolversion(), target);
  }

  // optional int64 errorFramesQuantity = 21 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_errorframesquantity(), target);
  }

  // optional int64 errorFrameNo = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_errorframeno(), target);
  }

  // optional int64 errorDataID = 23 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_errordataid(), target);
  }

  // optional int64 errorFrameSize = 24 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_errorframesize(), target);
  }

  // optional int64 errorDuplicatePlantTime = 25 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_errorduplicateplanttime(), target);
  }

  // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->_internal_errornonmonotonicplanttime(), target);
  }

  // optional string lmEquipmentID = 27;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmequipmentid().data(), static_cast<int>(this->_internal_lmequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.AppDataSourceState.lmEquipmentID");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_lmequipmentid(), target);
  }

  // optional int32 rupFramesQueueSize = 28 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_rupframesqueuesize(), target);
  }

  // optional int32 signalStatesQueueSize = 29 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_signalstatesqueuesize(), target);
  }

  // optional int32 state = 30 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.AppDataSourceState)
  return target;
}

size_t AppDataSourceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.AppDataSourceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lmEquipmentID = 27;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmequipmentid());
    }

    // optional uint64 id = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional int64 uptime = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_uptime());
    }

    // optional uint64 receivedDataID = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_receiveddataid());
    }

    // optional int32 rupFramesQueueCurSize = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rupframesqueuecursize());
    }

    // optional int32 rupFramesQueueCurMaxSize = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rupframesqueuecurmaxsize());
    }

    // optional double dataReceivingRate = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int64 receivedDataSize = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receiveddatasize());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 receivedFramesCount = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receivedframescount());
    }

    // optional int64 receivedPacketCount = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receivedpacketcount());
    }

    // optional bool dataReceives = 2 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool dataProcessingEnabled = 12 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 rupFrameNumerator = 16 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rupframenumerator());
    }

    // optional int64 lostPacketCount = 11 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_lostpacketcount());
    }

    // optional int64 processedPacketCount = 13 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_processedpacketcount());
    }

    // optional int64 lastPacketSystemTime = 14 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_lastpacketsystemtime());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 rupFramePlantTime = 15 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rupframeplanttime());
    }

    // optional int32 signalStatesQueueCurSize = 17 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalstatesqueuecursize());
    }

    // optional int32 signalStatesQueueCurMaxSize = 18 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalstatesqueuecurmaxsize());
    }

    // optional int64 errorProtocolVersion = 20 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errorprotocolversion());
    }

    // optional int64 errorFramesQuantity = 21 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errorframesquantity());
    }

    // optional int64 errorFrameNo = 22 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errorframeno());
    }

    // optional int64 errorDataID = 23 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errordataid());
    }

    // optional int32 acquiredSignalsCount = 19 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_acquiredsignalscount());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional int32 rupFramesQueueSize = 28 [default = 0];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rupframesqueuesize());
    }

    // optional int64 errorFrameSize = 24 [default = 0];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errorframesize());
    }

    // optional int64 errorDuplicatePlantTime = 25 [default = 0];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errorduplicateplanttime());
    }

    // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errornonmonotonicplanttime());
    }

    // optional int32 signalStatesQueueSize = 29 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalstatesqueuesize());
    }

    // optional int32 state = 30 [default = 0];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppDataSourceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.AppDataSourceState)
  GOOGLE_DCHECK_NE(&from, this);
  const AppDataSourceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppDataSourceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.AppDataSourceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.AppDataSourceState)
    MergeFrom(*source);
  }
}

void AppDataSourceState::MergeFrom(const AppDataSourceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.AppDataSourceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lmequipmentid(from._internal_lmequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      uptime_ = from.uptime_;
    }
    if (cached_has_bits & 0x00000008u) {
      receiveddataid_ = from.receiveddataid_;
    }
    if (cached_has_bits & 0x00000010u) {
      rupframesqueuecursize_ = from.rupframesqueuecursize_;
    }
    if (cached_has_bits & 0x00000020u) {
      rupframesqueuecurmaxsize_ = from.rupframesqueuecurmaxsize_;
    }
    if (cached_has_bits & 0x00000040u) {
      datareceivingrate_ = from.datareceivingrate_;
    }
    if (cached_has_bits & 0x00000080u) {
      receiveddatasize_ = from.receiveddatasize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      receivedframescount_ = from.receivedframescount_;
    }
    if (cached_has_bits & 0x00000200u) {
      receivedpacketcount_ = from.receivedpacketcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      datareceives_ = from.datareceives_;
    }
    if (cached_has_bits & 0x00000800u) {
      dataprocessingenabled_ = from.dataprocessingenabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      rupframenumerator_ = from.rupframenumerator_;
    }
    if (cached_has_bits & 0x00002000u) {
      lostpacketcount_ = from.lostpacketcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      processedpacketcount_ = from.processedpacketcount_;
    }
    if (cached_has_bits & 0x00008000u) {
      lastpacketsystemtime_ = from.lastpacketsystemtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      rupframeplanttime_ = from.rupframeplanttime_;
    }
    if (cached_has_bits & 0x00020000u) {
      signalstatesqueuecursize_ = from.signalstatesqueuecursize_;
    }
    if (cached_has_bits & 0x00040000u) {
      signalstatesqueuecurmaxsize_ = from.signalstatesqueuecurmaxsize_;
    }
    if (cached_has_bits & 0x00080000u) {
      errorprotocolversion_ = from.errorprotocolversion_;
    }
    if (cached_has_bits & 0x00100000u) {
      errorframesquantity_ = from.errorframesquantity_;
    }
    if (cached_has_bits & 0x00200000u) {
      errorframeno_ = from.errorframeno_;
    }
    if (cached_has_bits & 0x00400000u) {
      errordataid_ = from.errordataid_;
    }
    if (cached_has_bits & 0x00800000u) {
      acquiredsignalscount_ = from.acquiredsignalscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      rupframesqueuesize_ = from.rupframesqueuesize_;
    }
    if (cached_has_bits & 0x02000000u) {
      errorframesize_ = from.errorframesize_;
    }
    if (cached_has_bits & 0x04000000u) {
      errorduplicateplanttime_ = from.errorduplicateplanttime_;
    }
    if (cached_has_bits & 0x08000000u) {
      errornonmonotonicplanttime_ = from.errornonmonotonicplanttime_;
    }
    if (cached_has_bits & 0x10000000u) {
      signalstatesqueuesize_ = from.signalstatesqueuesize_;
    }
    if (cached_has_bits & 0x20000000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppDataSourceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.AppDataSourceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataSourceState::CopyFrom(const AppDataSourceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.AppDataSourceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataSourceState::IsInitialized() const {
  return true;
}

void AppDataSourceState::InternalSwap(AppDataSourceState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lmequipmentid_.Swap(&other->lmequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDataSourceState, state_)
      + sizeof(AppDataSourceState::state_)
      - PROTOBUF_FIELD_OFFSET(AppDataSourceState, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDataSourceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppDataSourcesStatesReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppDataSourcesStatesReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appdatasourcesstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppDataSourcesStatesReply)
}
GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply(const GetAppDataSourcesStatesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appdatasourcesstates_(from.appdatasourcesstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.GetAppDataSourcesStatesReply)
}

void GetAppDataSourcesStatesReply::SharedCtor() {
error_ = 0;
}

GetAppDataSourcesStatesReply::~GetAppDataSourcesStatesReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppDataSourcesStatesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppDataSourcesStatesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppDataSourcesStatesReply::ArenaDtor(void* object) {
  GetAppDataSourcesStatesReply* _this = reinterpret_cast< GetAppDataSourcesStatesReply* >(object);
  (void)_this;
}
void GetAppDataSourcesStatesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppDataSourcesStatesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppDataSourcesStatesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppDataSourcesStatesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appdatasourcesstates_.Clear();
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppDataSourcesStatesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appdatasourcesstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppDataSourcesStatesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppDataSourcesStatesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appdatasourcesstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_appdatasourcesstates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppDataSourcesStatesReply)
  return target;
}

size_t GetAppDataSourcesStatesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppDataSourcesStatesReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  total_size += 1UL * this->_internal_appdatasourcesstates_size();
  for (const auto& msg : this->appdatasourcesstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppDataSourcesStatesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppDataSourcesStatesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppDataSourcesStatesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppDataSourcesStatesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppDataSourcesStatesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppDataSourcesStatesReply)
    MergeFrom(*source);
  }
}

void GetAppDataSourcesStatesReply::MergeFrom(const GetAppDataSourcesStatesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppDataSourcesStatesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appdatasourcesstates_.MergeFrom(from.appdatasourcesstates_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void GetAppDataSourcesStatesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppDataSourcesStatesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppDataSourcesStatesReply::CopyFrom(const GetAppDataSourcesStatesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppDataSourcesStatesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDataSourcesStatesReply::IsInitialized() const {
  return true;
}

void GetAppDataSourcesStatesReply::InternalSwap(GetAppDataSourcesStatesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appdatasourcesstates_.InternalSwap(&other->appdatasourcesstates_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppDataSourcesStatesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppDataServiceState::_Internal {
 public:
  using HasBits = decltype(std::declval<AppDataServiceState>()._has_bits_);
  static void set_has_cfgserviceisconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cfgserviceip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cfgserviceport(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_archiveserviceisconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_archiveserviceip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_archiveserviceport(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Network::AppDataReceiveState& appdatareceivestate(const AppDataServiceState* msg);
  static void set_has_appdatareceivestate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::Network::AppDataReceiveState&
AppDataServiceState::_Internal::appdatareceivestate(const AppDataServiceState* msg) {
  return *msg->appdatareceivestate_;
}
AppDataServiceState::AppDataServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.AppDataServiceState)
}
AppDataServiceState::AppDataServiceState(const AppDataServiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_appdatareceivestate()) {
    appdatareceivestate_ = new ::Network::AppDataReceiveState(*from.appdatareceivestate_);
  } else {
    appdatareceivestate_ = nullptr;
  }
  ::memcpy(&cfgserviceip_, &from.cfgserviceip_,
    static_cast<size_t>(reinterpret_cast<char*>(&archiveserviceport_) -
    reinterpret_cast<char*>(&cfgserviceip_)) + sizeof(archiveserviceport_));
  // @@protoc_insertion_point(copy_constructor:Network.AppDataServiceState)
}

void AppDataServiceState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appdatareceivestate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&archiveserviceport_) -
    reinterpret_cast<char*>(&appdatareceivestate_)) + sizeof(archiveserviceport_));
}

AppDataServiceState::~AppDataServiceState() {
  // @@protoc_insertion_point(destructor:Network.AppDataServiceState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppDataServiceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete appdatareceivestate_;
}

void AppDataServiceState::ArenaDtor(void* object) {
  AppDataServiceState* _this = reinterpret_cast< AppDataServiceState* >(object);
  (void)_this;
}
void AppDataServiceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppDataServiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppDataServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.AppDataServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(appdatareceivestate_ != nullptr);
    appdatareceivestate_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&cfgserviceip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&archiveserviceport_) -
        reinterpret_cast<char*>(&cfgserviceip_)) + sizeof(archiveserviceport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDataServiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool CfgServiceIsConnected = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cfgserviceisconnected(&has_bits);
          cfgserviceisconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 CfgServiceIp = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cfgserviceip(&has_bits);
          cfgserviceip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 CfgServicePort = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cfgserviceport(&has_bits);
          cfgserviceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool ArchiveServiceIsConnected = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_archiveserviceisconnected(&has_bits);
          archiveserviceisconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ArchiveServiceIp = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_archiveserviceip(&has_bits);
          archiveserviceip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ArchiveServicePort = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_archiveserviceport(&has_bits);
          archiveserviceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Network.AppDataReceiveState appDataReceiveState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_appdatareceivestate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppDataServiceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.AppDataServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool CfgServiceIsConnected = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cfgserviceisconnected(), target);
  }

  // optional uint32 CfgServiceIp = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cfgserviceip(), target);
  }

  // optional int32 CfgServicePort = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cfgserviceport(), target);
  }

  // required bool ArchiveServiceIsConnected = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_archiveserviceisconnected(), target);
  }

  // optional uint32 ArchiveServiceIp = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_archiveserviceip(), target);
  }

  // optional int32 ArchiveServicePort = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_archiveserviceport(), target);
  }

  // optional .Network.AppDataReceiveState appDataReceiveState = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::appdatareceivestate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.AppDataServiceState)
  return target;
}

size_t AppDataServiceState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.AppDataServiceState)
  size_t total_size = 0;

  if (_internal_has_cfgserviceisconnected()) {
    // required bool CfgServiceIsConnected = 1 [default = false];
    total_size += 1 + 1;
  }

  if (_internal_has_archiveserviceisconnected()) {
    // required bool ArchiveServiceIsConnected = 4 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AppDataServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.AppDataServiceState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required bool CfgServiceIsConnected = 1 [default = false];
    total_size += 1 + 1;

    // required bool ArchiveServiceIsConnected = 4 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Network.AppDataReceiveState appDataReceiveState = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *appdatareceivestate_);
    }

    // optional uint32 CfgServiceIp = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cfgserviceip());
    }

  }
  if (cached_has_bits & 0x00000070u) {
    // optional int32 CfgServicePort = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cfgserviceport());
    }

    // optional uint32 ArchiveServiceIp = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_archiveserviceip());
    }

    // optional int32 ArchiveServicePort = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_archiveserviceport());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppDataServiceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.AppDataServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  const AppDataServiceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppDataServiceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.AppDataServiceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.AppDataServiceState)
    MergeFrom(*source);
  }
}

void AppDataServiceState::MergeFrom(const AppDataServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.AppDataServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_appdatareceivestate()->::Network::AppDataReceiveState::MergeFrom(from._internal_appdatareceivestate());
    }
    if (cached_has_bits & 0x00000002u) {
      cfgserviceip_ = from.cfgserviceip_;
    }
    if (cached_has_bits & 0x00000004u) {
      cfgserviceisconnected_ = from.cfgserviceisconnected_;
    }
    if (cached_has_bits & 0x00000008u) {
      archiveserviceisconnected_ = from.archiveserviceisconnected_;
    }
    if (cached_has_bits & 0x00000010u) {
      cfgserviceport_ = from.cfgserviceport_;
    }
    if (cached_has_bits & 0x00000020u) {
      archiveserviceip_ = from.archiveserviceip_;
    }
    if (cached_has_bits & 0x00000040u) {
      archiveserviceport_ = from.archiveserviceport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppDataServiceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.AppDataServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataServiceState::CopyFrom(const AppDataServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.AppDataServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataServiceState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppDataServiceState::InternalSwap(AppDataServiceState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDataServiceState, archiveserviceport_)
      + sizeof(AppDataServiceState::archiveserviceport_)
      - PROTOBUF_FIELD_OFFSET(AppDataServiceState, appdatareceivestate_)>(
          reinterpret_cast<char*>(&appdatareceivestate_),
          reinterpret_cast<char*>(&other->appdatareceivestate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDataServiceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SoftwareInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareInfo>()._has_bits_);
  static void set_has_softwaretype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_majorversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minorversion(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_commitno(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_buildbranch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commitsha(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buildno(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clientdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ef) ^ 0x000007ef) != 0;
  }
};

SoftwareInfo::SoftwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.SoftwareInfo)
}
SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipmentid()) {
    equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipmentid(), 
      GetArena());
  }
  buildbranch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buildbranch()) {
    buildbranch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buildbranch(), 
      GetArena());
  }
  commitsha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commitsha()) {
    commitsha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commitsha(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  clientdescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientdescription()) {
    clientdescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientdescription(), 
      GetArena());
  }
  ::memcpy(&majorversion_, &from.majorversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&softwaretype_) -
    reinterpret_cast<char*>(&majorversion_)) + sizeof(softwaretype_));
  // @@protoc_insertion_point(copy_constructor:Network.SoftwareInfo)
}

void SoftwareInfo::SharedCtor() {
equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buildbranch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commitsha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clientdescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&majorversion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&majorversion_)) + sizeof(crc_));
softwaretype_ = 8000;
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:Network.SoftwareInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buildbranch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitsha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientdescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SoftwareInfo::ArenaDtor(void* object) {
  SoftwareInfo* _this = reinterpret_cast< SoftwareInfo* >(object);
  (void)_this;
}
void SoftwareInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.SoftwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      buildbranch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      commitsha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      clientdescription_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&majorversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commitno_) -
        reinterpret_cast<char*>(&majorversion_)) + sizeof(commitno_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&buildno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_) -
        reinterpret_cast<char*>(&buildno_)) + sizeof(crc_));
    softwaretype_ = 8000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 softwareType = 1 [default = 8000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_softwaretype(&has_bits);
          softwaretype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string equipmentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SoftwareInfo.equipmentId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 majorVersion = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_majorversion(&has_bits);
          majorversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 minorVersion = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_minorversion(&has_bits);
          minorversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 commitNo = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_commitno(&has_bits);
          commitno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string buildBranch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buildbranch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SoftwareInfo.buildBranch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string commitSHA = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_commitsha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SoftwareInfo.commitSHA");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string userName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SoftwareInfo.userName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 buildNo = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_buildno(&has_bits);
          buildno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 crc = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clientDescription = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_clientdescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SoftwareInfo.clientDescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.SoftwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 softwareType = 1 [default = 8000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_softwaretype(), target);
  }

  // required string equipmentId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_equipmentid().data(), static_cast<int>(this->_internal_equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SoftwareInfo.equipmentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_equipmentid(), target);
  }

  // required int32 majorVersion = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_majorversion(), target);
  }

  // required int32 minorVersion = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_minorversion(), target);
  }

  // required int32 commitNo = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_commitno(), target);
  }

  // required string buildBranch = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buildbranch().data(), static_cast<int>(this->_internal_buildbranch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SoftwareInfo.buildBranch");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_buildbranch(), target);
  }

  // required string commitSHA = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commitsha().data(), static_cast<int>(this->_internal_commitsha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SoftwareInfo.commitSHA");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_commitsha(), target);
  }

  // required string userName = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SoftwareInfo.userName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_username(), target);
  }

  // required int32 buildNo = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_buildno(), target);
  }

  // required uint32 crc = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_crc(), target);
  }

  // optional string clientDescription = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientdescription().data(), static_cast<int>(this->_internal_clientdescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SoftwareInfo.clientDescription");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_clientdescription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.SoftwareInfo)
  return target;
}

size_t SoftwareInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.SoftwareInfo)
  size_t total_size = 0;

  if (_internal_has_equipmentid()) {
    // required string equipmentId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipmentid());
  }

  if (_internal_has_buildbranch()) {
    // required string buildBranch = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildbranch());
  }

  if (_internal_has_commitsha()) {
    // required string commitSHA = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitsha());
  }

  if (_internal_has_username()) {
    // required string userName = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (_internal_has_majorversion()) {
    // required int32 majorVersion = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_majorversion());
  }

  if (_internal_has_minorversion()) {
    // required int32 minorVersion = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minorversion());
  }

  if (_internal_has_commitno()) {
    // required int32 commitNo = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commitno());
  }

  if (_internal_has_buildno()) {
    // required int32 buildNo = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buildno());
  }

  if (_internal_has_crc()) {
    // required uint32 crc = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crc());
  }

  if (_internal_has_softwaretype()) {
    // required int32 softwareType = 1 [default = 8000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_softwaretype());
  }

  return total_size;
}
size_t SoftwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.SoftwareInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ef) ^ 0x000007ef) == 0) {  // All required fields are present.
    // required string equipmentId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipmentid());

    // required string buildBranch = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildbranch());

    // required string commitSHA = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitsha());

    // required string userName = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());

    // required int32 majorVersion = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_majorversion());

    // required int32 minorVersion = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minorversion());

    // required int32 commitNo = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commitno());

    // required int32 buildNo = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buildno());

    // required uint32 crc = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crc());

    // required int32 softwareType = 1 [default = 8000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_softwaretype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clientDescription = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientdescription());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.SoftwareInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.SoftwareInfo)
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_equipmentid(from._internal_equipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_buildbranch(from._internal_buildbranch());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_commitsha(from._internal_commitsha());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_clientdescription(from._internal_clientdescription());
    }
    if (cached_has_bits & 0x00000020u) {
      majorversion_ = from.majorversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      minorversion_ = from.minorversion_;
    }
    if (cached_has_bits & 0x00000080u) {
      commitno_ = from.commitno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      buildno_ = from.buildno_;
    }
    if (cached_has_bits & 0x00000200u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000400u) {
      softwaretype_ = from.softwaretype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoftwareInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equipmentid_.Swap(&other->equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buildbranch_.Swap(&other->buildbranch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commitsha_.Swap(&other->commitsha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientdescription_.Swap(&other->clientdescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoftwareInfo, crc_)
      + sizeof(SoftwareInfo::crc_)
      - PROTOBUF_FIELD_OFFSET(SoftwareInfo, majorversion_)>(
          reinterpret_cast<char*>(&majorversion_),
          reinterpret_cast<char*>(&other->majorversion_));
  swap(softwaretype_, other->softwaretype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceInfoRequest::_Internal {
 public:
};

GetServiceInfoRequest::GetServiceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetServiceInfoRequest)
}
GetServiceInfoRequest::GetServiceInfoRequest(const GetServiceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetServiceInfoRequest)
}

void GetServiceInfoRequest::SharedCtor() {
}

GetServiceInfoRequest::~GetServiceInfoRequest() {
  // @@protoc_insertion_point(destructor:Network.GetServiceInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServiceInfoRequest::ArenaDtor(void* object) {
  GetServiceInfoRequest* _this = reinterpret_cast< GetServiceInfoRequest* >(object);
  (void)_this;
}
void GetServiceInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetServiceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetServiceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetServiceInfoRequest)
  return target;
}

size_t GetServiceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetServiceInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetServiceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetServiceInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetServiceInfoRequest)
    MergeFrom(*source);
  }
}

void GetServiceInfoRequest::MergeFrom(const GetServiceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetServiceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServiceInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetServiceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceInfoRequest::CopyFrom(const GetServiceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetServiceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceInfoRequest::IsInitialized() const {
  return true;
}

void GetServiceInfoRequest::InternalSwap(GetServiceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionParams>()._has_bits_);
  static void set_has_currentsettingsprofile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_softwarerunmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SessionParams::SessionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.SessionParams)
}
SessionParams::SessionParams(const SessionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currentsettingsprofile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currentsettingsprofile()) {
    currentsettingsprofile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currentsettingsprofile(), 
      GetArena());
  }
  softwarerunmode_ = from.softwarerunmode_;
  // @@protoc_insertion_point(copy_constructor:Network.SessionParams)
}

void SessionParams::SharedCtor() {
currentsettingsprofile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
softwarerunmode_ = 0;
}

SessionParams::~SessionParams() {
  // @@protoc_insertion_point(destructor:Network.SessionParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currentsettingsprofile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionParams::ArenaDtor(void* object) {
  SessionParams* _this = reinterpret_cast< SessionParams* >(object);
  (void)_this;
}
void SessionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.SessionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    currentsettingsprofile_.ClearNonDefaultToEmpty();
  }
  softwarerunmode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string currentSettingsProfile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currentsettingsprofile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SessionParams.currentSettingsProfile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 softwareRunMode = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_softwarerunmode(&has_bits);
          softwarerunmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.SessionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string currentSettingsProfile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currentsettingsprofile().data(), static_cast<int>(this->_internal_currentsettingsprofile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SessionParams.currentSettingsProfile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currentsettingsprofile(), target);
  }

  // optional int32 softwareRunMode = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_softwarerunmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.SessionParams)
  return target;
}

size_t SessionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.SessionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currentSettingsProfile = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currentsettingsprofile());
    }

    // optional int32 softwareRunMode = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_softwarerunmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.SessionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.SessionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.SessionParams)
    MergeFrom(*source);
  }
}

void SessionParams::MergeFrom(const SessionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.SessionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currentsettingsprofile(from._internal_currentsettingsprofile());
    }
    if (cached_has_bits & 0x00000002u) {
      softwarerunmode_ = from.softwarerunmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.SessionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionParams::CopyFrom(const SessionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.SessionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionParams::IsInitialized() const {
  return true;
}

void SessionParams::InternalSwap(SessionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  currentsettingsprofile_.Swap(&other->currentsettingsprofile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(softwarerunmode_, other->softwarerunmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceInfo>()._has_bits_);
  static const ::Network::SoftwareInfo& softwareinfo(const ServiceInfo* msg);
  static void set_has_softwareinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uptime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_servicestate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_serviceuptime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Network::SessionParams& sessionparams(const ServiceInfo* msg);
  static void set_has_sessionparams(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_settingsxml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Network::SoftwareInfo&
ServiceInfo::_Internal::softwareinfo(const ServiceInfo* msg) {
  return *msg->softwareinfo_;
}
const ::Network::SessionParams&
ServiceInfo::_Internal::sessionparams(const ServiceInfo* msg) {
  return *msg->sessionparams_;
}
ServiceInfo::ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  settingsxml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_settingsxml()) {
    settingsxml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settingsxml(), 
      GetArena());
  }
  if (from._internal_has_softwareinfo()) {
    softwareinfo_ = new ::Network::SoftwareInfo(*from.softwareinfo_);
  } else {
    softwareinfo_ = nullptr;
  }
  if (from._internal_has_sessionparams()) {
    sessionparams_ = new ::Network::SessionParams(*from.sessionparams_);
  } else {
    sessionparams_ = nullptr;
  }
  ::memcpy(&uptime_, &from.uptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&servicestate_) -
    reinterpret_cast<char*>(&uptime_)) + sizeof(servicestate_));
  // @@protoc_insertion_point(copy_constructor:Network.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
settingsxml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&softwareinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&servicestate_) -
    reinterpret_cast<char*>(&softwareinfo_)) + sizeof(servicestate_));
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:Network.ServiceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  settingsxml_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete softwareinfo_;
  if (this != internal_default_instance()) delete sessionparams_;
}

void ServiceInfo::ArenaDtor(void* object) {
  ServiceInfo* _this = reinterpret_cast< ServiceInfo* >(object);
  (void)_this;
}
void ServiceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      settingsxml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(softwareinfo_ != nullptr);
      softwareinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sessionparams_ != nullptr);
      sessionparams_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&uptime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&servicestate_) -
        reinterpret_cast<char*>(&uptime_)) + sizeof(servicestate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Network.SoftwareInfo softwareInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_softwareinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 uptime = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uptime(&has_bits);
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 serviceState = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_servicestate(&has_bits);
          servicestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 serviceUptime = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_serviceuptime(&has_bits);
          serviceuptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Network.SessionParams sessionParams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string settingsXml = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_settingsxml();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ServiceInfo.settingsXml");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Network.SoftwareInfo softwareInfo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::softwareinfo(this), target, stream);
  }

  // optional int64 uptime = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uptime(), target);
  }

  // optional int32 serviceState = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_servicestate(), target);
  }

  // optional int64 serviceUptime = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_serviceuptime(), target);
  }

  // optional .Network.SessionParams sessionParams = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sessionparams(this), target, stream);
  }

  // optional string settingsXml = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_settingsxml().data(), static_cast<int>(this->_internal_settingsxml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ServiceInfo.settingsXml");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_settingsxml(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ServiceInfo)
  size_t total_size = 0;

  // required .Network.SoftwareInfo softwareInfo = 1;
  if (_internal_has_softwareinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *softwareinfo_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string settingsXml = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settingsxml());
  }

  if (cached_has_bits & 0x0000003cu) {
    // optional .Network.SessionParams sessionParams = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sessionparams_);
    }

    // optional int64 uptime = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_uptime());
    }

    // optional int64 serviceUptime = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_serviceuptime());
    }

    // optional int32 serviceState = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_servicestate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ServiceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ServiceInfo)
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_settingsxml(from._internal_settingsxml());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_softwareinfo()->::Network::SoftwareInfo::MergeFrom(from._internal_softwareinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sessionparams()->::Network::SessionParams::MergeFrom(from._internal_sessionparams());
    }
    if (cached_has_bits & 0x00000008u) {
      uptime_ = from.uptime_;
    }
    if (cached_has_bits & 0x00000010u) {
      serviceuptime_ = from.serviceuptime_;
    }
    if (cached_has_bits & 0x00000020u) {
      servicestate_ = from.servicestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_softwareinfo()) {
    if (!softwareinfo_->IsInitialized()) return false;
  }
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  settingsxml_.Swap(&other->settingsxml_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceInfo, servicestate_)
      + sizeof(ServiceInfo::servicestate_)
      - PROTOBUF_FIELD_OFFSET(ServiceInfo, softwareinfo_)>(
          reinterpret_cast<char*>(&softwareinfo_),
          reinterpret_cast<char*>(&other->softwareinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServiceInfoReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServiceInfoReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Network::ServiceInfo& serviceinfo(const GetServiceInfoReply* msg);
  static void set_has_serviceinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::Network::ServiceInfo&
GetServiceInfoReply::_Internal::serviceinfo(const GetServiceInfoReply* msg) {
  return *msg->serviceinfo_;
}
GetServiceInfoReply::GetServiceInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetServiceInfoReply)
}
GetServiceInfoReply::GetServiceInfoReply(const GetServiceInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serviceinfo()) {
    serviceinfo_ = new ::Network::ServiceInfo(*from.serviceinfo_);
  } else {
    serviceinfo_ = nullptr;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.GetServiceInfoReply)
}

void GetServiceInfoReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serviceinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&serviceinfo_)) + sizeof(error_));
}

GetServiceInfoReply::~GetServiceInfoReply() {
  // @@protoc_insertion_point(destructor:Network.GetServiceInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServiceInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete serviceinfo_;
}

void GetServiceInfoReply::ArenaDtor(void* object) {
  GetServiceInfoReply* _this = reinterpret_cast< GetServiceInfoReply* >(object);
  (void)_this;
}
void GetServiceInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetServiceInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(serviceinfo_ != nullptr);
    serviceinfo_->Clear();
  }
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Network.ServiceInfo serviceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetServiceInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // required .Network.ServiceInfo serviceInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::serviceinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetServiceInfoReply)
  return target;
}

size_t GetServiceInfoReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.GetServiceInfoReply)
  size_t total_size = 0;

  if (_internal_has_serviceinfo()) {
    // required .Network.ServiceInfo serviceInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviceinfo_);
  }

  if (_internal_has_error()) {
    // required int32 error = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  return total_size;
}
size_t GetServiceInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetServiceInfoReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Network.ServiceInfo serviceInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviceinfo_);

    // required int32 error = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetServiceInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetServiceInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetServiceInfoReply)
    MergeFrom(*source);
  }
}

void GetServiceInfoReply::MergeFrom(const GetServiceInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetServiceInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_serviceinfo()->::Network::ServiceInfo::MergeFrom(from._internal_serviceinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetServiceInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetServiceInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceInfoReply::CopyFrom(const GetServiceInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetServiceInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceInfoReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_serviceinfo()) {
    if (!serviceinfo_->IsInitialized()) return false;
  }
  return true;
}

void GetServiceInfoReply::InternalSwap(GetServiceInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceInfoReply, error_)
      + sizeof(GetServiceInfoReply::error_)
      - PROTOBUF_FIELD_OFFSET(GetServiceInfoReply, serviceinfo_)>(
          reinterpret_cast<char*>(&serviceinfo_),
          reinterpret_cast<char*>(&other->serviceinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationServiceState::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigurationServiceState>()._has_bits_);
  static void set_has_currentbuilddirectory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_checkbuildattemptquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buildcheckerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ConfigurationServiceState::ConfigurationServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ConfigurationServiceState)
}
ConfigurationServiceState::ConfigurationServiceState(const ConfigurationServiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currentbuilddirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currentbuilddirectory()) {
    currentbuilddirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currentbuilddirectory(), 
      GetArena());
  }
  ::memcpy(&checkbuildattemptquantity_, &from.checkbuildattemptquantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&buildcheckerstate_) -
    reinterpret_cast<char*>(&checkbuildattemptquantity_)) + sizeof(buildcheckerstate_));
  // @@protoc_insertion_point(copy_constructor:Network.ConfigurationServiceState)
}

void ConfigurationServiceState::SharedCtor() {
currentbuilddirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&checkbuildattemptquantity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buildcheckerstate_) -
    reinterpret_cast<char*>(&checkbuildattemptquantity_)) + sizeof(buildcheckerstate_));
}

ConfigurationServiceState::~ConfigurationServiceState() {
  // @@protoc_insertion_point(destructor:Network.ConfigurationServiceState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationServiceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currentbuilddirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigurationServiceState::ArenaDtor(void* object) {
  ConfigurationServiceState* _this = reinterpret_cast< ConfigurationServiceState* >(object);
  (void)_this;
}
void ConfigurationServiceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationServiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigurationServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ConfigurationServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    currentbuilddirectory_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&checkbuildattemptquantity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buildcheckerstate_) -
        reinterpret_cast<char*>(&checkbuildattemptquantity_)) + sizeof(buildcheckerstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationServiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string currentBuildDirectory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currentbuilddirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ConfigurationServiceState.currentBuildDirectory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkBuildAttemptQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_checkbuildattemptquantity(&has_bits);
          checkbuildattemptquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 buildCheckerState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_buildcheckerstate(&has_bits);
          buildcheckerstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationServiceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ConfigurationServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string currentBuildDirectory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currentbuilddirectory().data(), static_cast<int>(this->_internal_currentbuilddirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ConfigurationServiceState.currentBuildDirectory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currentbuilddirectory(), target);
  }

  // required int32 checkBuildAttemptQuantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_checkbuildattemptquantity(), target);
  }

  // required int32 buildCheckerState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_buildcheckerstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ConfigurationServiceState)
  return target;
}

size_t ConfigurationServiceState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.ConfigurationServiceState)
  size_t total_size = 0;

  if (_internal_has_currentbuilddirectory()) {
    // required string currentBuildDirectory = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentbuilddirectory());
  }

  if (_internal_has_checkbuildattemptquantity()) {
    // required int32 checkBuildAttemptQuantity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checkbuildattemptquantity());
  }

  if (_internal_has_buildcheckerstate()) {
    // required int32 buildCheckerState = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buildcheckerstate());
  }

  return total_size;
}
size_t ConfigurationServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ConfigurationServiceState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string currentBuildDirectory = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentbuilddirectory());

    // required int32 checkBuildAttemptQuantity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checkbuildattemptquantity());

    // required int32 buildCheckerState = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buildcheckerstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationServiceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ConfigurationServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationServiceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationServiceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ConfigurationServiceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ConfigurationServiceState)
    MergeFrom(*source);
  }
}

void ConfigurationServiceState::MergeFrom(const ConfigurationServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ConfigurationServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currentbuilddirectory(from._internal_currentbuilddirectory());
    }
    if (cached_has_bits & 0x00000002u) {
      checkbuildattemptquantity_ = from.checkbuildattemptquantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      buildcheckerstate_ = from.buildcheckerstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigurationServiceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ConfigurationServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationServiceState::CopyFrom(const ConfigurationServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ConfigurationServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationServiceState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ConfigurationServiceState::InternalSwap(ConfigurationServiceState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  currentbuilddirectory_.Swap(&other->currentbuilddirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationServiceState, buildcheckerstate_)
      + sizeof(ConfigurationServiceState::buildcheckerstate_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationServiceState, checkbuildattemptquantity_)>(
          reinterpret_cast<char*>(&checkbuildattemptquantity_),
          reinterpret_cast<char*>(&other->checkbuildattemptquantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationServiceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceClientInfo>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uptime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isactual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replyquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Network::SoftwareInfo& softwareinfo(const ServiceClientInfo* msg);
  static void set_has_softwareinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::Network::SoftwareInfo&
ServiceClientInfo::_Internal::softwareinfo(const ServiceClientInfo* msg) {
  return *msg->softwareinfo_;
}
ServiceClientInfo::ServiceClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ServiceClientInfo)
}
ServiceClientInfo::ServiceClientInfo(const ServiceClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_softwareinfo()) {
    softwareinfo_ = new ::Network::SoftwareInfo(*from.softwareinfo_);
  } else {
    softwareinfo_ = nullptr;
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&replyquantity_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(replyquantity_));
  // @@protoc_insertion_point(copy_constructor:Network.ServiceClientInfo)
}

void ServiceClientInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&softwareinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replyquantity_) -
    reinterpret_cast<char*>(&softwareinfo_)) + sizeof(replyquantity_));
}

ServiceClientInfo::~ServiceClientInfo() {
  // @@protoc_insertion_point(destructor:Network.ServiceClientInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete softwareinfo_;
}

void ServiceClientInfo::ArenaDtor(void* object) {
  ServiceClientInfo* _this = reinterpret_cast< ServiceClientInfo* >(object);
  (void)_this;
}
void ServiceClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ServiceClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(softwareinfo_ != nullptr);
    softwareinfo_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replyquantity_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(replyquantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 uptime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uptime(&has_bits);
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isActual = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isactual(&has_bits);
          isactual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 replyQuantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_replyquantity(&has_bits);
          replyquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Network.SoftwareInfo softwareInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_softwareinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ServiceClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ip(), target);
  }

  // required int64 uptime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_uptime(), target);
  }

  // required bool isActual = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isactual(), target);
  }

  // required int64 replyQuantity = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_replyquantity(), target);
  }

  // required .Network.SoftwareInfo softwareInfo = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::softwareinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ServiceClientInfo)
  return target;
}

size_t ServiceClientInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.ServiceClientInfo)
  size_t total_size = 0;

  if (_internal_has_softwareinfo()) {
    // required .Network.SoftwareInfo softwareInfo = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *softwareinfo_);
  }

  if (_internal_has_ip()) {
    // required int32 ip = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  if (_internal_has_isactual()) {
    // required bool isActual = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_uptime()) {
    // required int64 uptime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uptime());
  }

  if (_internal_has_replyquantity()) {
    // required int64 replyQuantity = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_replyquantity());
  }

  return total_size;
}
size_t ServiceClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ServiceClientInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .Network.SoftwareInfo softwareInfo = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *softwareinfo_);

    // required int32 ip = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());

    // required bool isActual = 6;
    total_size += 1 + 1;

    // required int64 uptime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uptime());

    // required int64 replyQuantity = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_replyquantity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceClientInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ServiceClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceClientInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ServiceClientInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ServiceClientInfo)
    MergeFrom(*source);
  }
}

void ServiceClientInfo::MergeFrom(const ServiceClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ServiceClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_softwareinfo()->::Network::SoftwareInfo::MergeFrom(from._internal_softwareinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      isactual_ = from.isactual_;
    }
    if (cached_has_bits & 0x00000008u) {
      uptime_ = from.uptime_;
    }
    if (cached_has_bits & 0x00000010u) {
      replyquantity_ = from.replyquantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceClientInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ServiceClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceClientInfo::CopyFrom(const ServiceClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ServiceClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceClientInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_softwareinfo()) {
    if (!softwareinfo_->IsInitialized()) return false;
  }
  return true;
}

void ServiceClientInfo::InternalSwap(ServiceClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceClientInfo, replyquantity_)
      + sizeof(ServiceClientInfo::replyquantity_)
      - PROTOBUF_FIELD_OFFSET(ServiceClientInfo, softwareinfo_)>(
          reinterpret_cast<char*>(&softwareinfo_),
          reinterpret_cast<char*>(&other->softwareinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceClientInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceClients::_Internal {
 public:
};

ServiceClients::ServiceClients(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  clients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ServiceClients)
}
ServiceClients::ServiceClients(const ServiceClients& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clients_(from.clients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.ServiceClients)
}

void ServiceClients::SharedCtor() {
}

ServiceClients::~ServiceClients() {
  // @@protoc_insertion_point(destructor:Network.ServiceClients)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceClients::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServiceClients::ArenaDtor(void* object) {
  ServiceClients* _this = reinterpret_cast< ServiceClients* >(object);
  (void)_this;
}
void ServiceClients::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceClients::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceClients::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ServiceClients)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clients_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceClients::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Network.ServiceClientInfo clients = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceClients::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ServiceClients)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Network.ServiceClientInfo clients = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clients_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_clients(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ServiceClients)
  return target;
}

size_t ServiceClients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ServiceClients)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.ServiceClientInfo clients = 1;
  total_size += 1UL * this->_internal_clients_size();
  for (const auto& msg : this->clients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceClients::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ServiceClients)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceClients* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceClients>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ServiceClients)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ServiceClients)
    MergeFrom(*source);
  }
}

void ServiceClients::MergeFrom(const ServiceClients& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ServiceClients)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clients_.MergeFrom(from.clients_);
}

void ServiceClients::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ServiceClients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceClients::CopyFrom(const ServiceClients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ServiceClients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceClients::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(clients_)) return false;
  return true;
}

void ServiceClients::InternalSwap(ServiceClients* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clients_.InternalSwap(&other->clients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceClients::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildInfo>()._has_bits_);
  static void set_has_project(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_changeset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_workstation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

BuildInfo::BuildInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.BuildInfo)
}
BuildInfo::BuildInfo(const BuildInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_project()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArena());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArena());
  }
  workstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_workstation()) {
    workstation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workstation(), 
      GetArena());
  }
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&date_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Network.BuildInfo)
}

void BuildInfo::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&changeset_) -
    reinterpret_cast<char*>(&date_)) + sizeof(changeset_));
id_ = -1;
}

BuildInfo::~BuildInfo() {
  // @@protoc_insertion_point(destructor:Network.BuildInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workstation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildInfo::ArenaDtor(void* object) {
  BuildInfo* _this = reinterpret_cast< BuildInfo* >(object);
  (void)_this;
}
void BuildInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.BuildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      project_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      workstation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changeset_) -
        reinterpret_cast<char*>(&date_)) + sizeof(changeset_));
    id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.BuildInfo.project");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date(&has_bits);
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 changeset = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_changeset(&has_bits);
          changeset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.BuildInfo.user");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string workstation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_workstation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.BuildInfo.workstation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.BuildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string project = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.BuildInfo.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // required int32 id = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // required int64 date = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_date(), target);
  }

  // required int32 changeset = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_changeset(), target);
  }

  // required string user = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.BuildInfo.user");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user(), target);
  }

  // required string workstation = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_workstation().data(), static_cast<int>(this->_internal_workstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.BuildInfo.workstation");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_workstation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.BuildInfo)
  return target;
}

size_t BuildInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.BuildInfo)
  size_t total_size = 0;

  if (_internal_has_project()) {
    // required string project = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  if (_internal_has_user()) {
    // required string user = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  if (_internal_has_workstation()) {
    // required string workstation = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workstation());
  }

  if (_internal_has_date()) {
    // required int64 date = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date());
  }

  if (_internal_has_changeset()) {
    // required int32 changeset = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changeset());
  }

  if (_internal_has_id()) {
    // required int32 id = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t BuildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.BuildInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string project = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());

    // required string user = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());

    // required string workstation = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workstation());

    // required int64 date = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date());

    // required int32 changeset = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changeset());

    // required int32 id = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.BuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.BuildInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.BuildInfo)
    MergeFrom(*source);
  }
}

void BuildInfo::MergeFrom(const BuildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.BuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_project(from._internal_project());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_workstation(from._internal_workstation());
    }
    if (cached_has_bits & 0x00000008u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000010u) {
      changeset_ = from.changeset_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuildInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.BuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildInfo::CopyFrom(const BuildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.BuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BuildInfo::InternalSwap(BuildInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workstation_.Swap(&other->workstation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildInfo, changeset_)
      + sizeof(BuildInfo::changeset_)
      - PROTOBUF_FIELD_OFFSET(BuildInfo, date_)>(
          reinterpret_cast<char*>(&date_),
          reinterpret_cast<char*>(&other->date_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationServiceSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigurationServiceSettings>()._has_bits_);
  static void set_has_equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoloadbuildpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_workdirectory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ConfigurationServiceSettings::ConfigurationServiceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ConfigurationServiceSettings)
}
ConfigurationServiceSettings::ConfigurationServiceSettings(const ConfigurationServiceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipmentid()) {
    equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipmentid(), 
      GetArena());
  }
  autoloadbuildpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_autoloadbuildpath()) {
    autoloadbuildpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_autoloadbuildpath(), 
      GetArena());
  }
  workdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_workdirectory()) {
    workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workdirectory(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Network.ConfigurationServiceSettings)
}

void ConfigurationServiceSettings::SharedCtor() {
equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
autoloadbuildpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConfigurationServiceSettings::~ConfigurationServiceSettings() {
  // @@protoc_insertion_point(destructor:Network.ConfigurationServiceSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationServiceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  autoloadbuildpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workdirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigurationServiceSettings::ArenaDtor(void* object) {
  ConfigurationServiceSettings* _this = reinterpret_cast< ConfigurationServiceSettings* >(object);
  (void)_this;
}
void ConfigurationServiceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationServiceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigurationServiceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ConfigurationServiceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      autoloadbuildpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      workdirectory_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationServiceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string equipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ConfigurationServiceSettings.equipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string autoloadBuildPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_autoloadbuildpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ConfigurationServiceSettings.autoloadBuildPath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string workDirectory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_workdirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ConfigurationServiceSettings.workDirectory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationServiceSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ConfigurationServiceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string equipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_equipmentid().data(), static_cast<int>(this->_internal_equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ConfigurationServiceSettings.equipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_equipmentid(), target);
  }

  // required string autoloadBuildPath = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_autoloadbuildpath().data(), static_cast<int>(this->_internal_autoloadbuildpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ConfigurationServiceSettings.autoloadBuildPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_autoloadbuildpath(), target);
  }

  // required string workDirectory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_workdirectory().data(), static_cast<int>(this->_internal_workdirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ConfigurationServiceSettings.workDirectory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workdirectory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ConfigurationServiceSettings)
  return target;
}

size_t ConfigurationServiceSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.ConfigurationServiceSettings)
  size_t total_size = 0;

  if (_internal_has_equipmentid()) {
    // required string equipmentID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipmentid());
  }

  if (_internal_has_autoloadbuildpath()) {
    // required string autoloadBuildPath = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_autoloadbuildpath());
  }

  if (_internal_has_workdirectory()) {
    // required string workDirectory = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workdirectory());
  }

  return total_size;
}
size_t ConfigurationServiceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ConfigurationServiceSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string equipmentID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipmentid());

    // required string autoloadBuildPath = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_autoloadbuildpath());

    // required string workDirectory = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workdirectory());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationServiceSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ConfigurationServiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationServiceSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationServiceSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ConfigurationServiceSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ConfigurationServiceSettings)
    MergeFrom(*source);
  }
}

void ConfigurationServiceSettings::MergeFrom(const ConfigurationServiceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ConfigurationServiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_equipmentid(from._internal_equipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_autoloadbuildpath(from._internal_autoloadbuildpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_workdirectory(from._internal_workdirectory());
    }
  }
}

void ConfigurationServiceSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ConfigurationServiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationServiceSettings::CopyFrom(const ConfigurationServiceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ConfigurationServiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationServiceSettings::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ConfigurationServiceSettings::InternalSwap(ConfigurationServiceSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equipmentid_.Swap(&other->equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  autoloadbuildpath_.Swap(&other->autoloadbuildpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workdirectory_.Swap(&other->workdirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationServiceSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceSettings>()._has_bits_);
  static void set_has_equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_configip1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_configip2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ServiceSettings::ServiceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ServiceSettings)
}
ServiceSettings::ServiceSettings(const ServiceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipmentid()) {
    equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipmentid(), 
      GetArena());
  }
  configip1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_configip1()) {
    configip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_configip1(), 
      GetArena());
  }
  configip2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_configip2()) {
    configip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_configip2(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Network.ServiceSettings)
}

void ServiceSettings::SharedCtor() {
equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
configip1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
configip2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceSettings::~ServiceSettings() {
  // @@protoc_insertion_point(destructor:Network.ServiceSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configip1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configip2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceSettings::ArenaDtor(void* object) {
  ServiceSettings* _this = reinterpret_cast< ServiceSettings* >(object);
  (void)_this;
}
void ServiceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ServiceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      configip1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      configip2_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string equipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ServiceSettings.equipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string configIP1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_configip1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ServiceSettings.configIP1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string configIP2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_configip2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ServiceSettings.configIP2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ServiceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string equipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_equipmentid().data(), static_cast<int>(this->_internal_equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ServiceSettings.equipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_equipmentid(), target);
  }

  // required string configIP1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_configip1().data(), static_cast<int>(this->_internal_configip1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ServiceSettings.configIP1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_configip1(), target);
  }

  // required string configIP2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_configip2().data(), static_cast<int>(this->_internal_configip2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ServiceSettings.configIP2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_configip2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ServiceSettings)
  return target;
}

size_t ServiceSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Network.ServiceSettings)
  size_t total_size = 0;

  if (_internal_has_equipmentid()) {
    // required string equipmentID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipmentid());
  }

  if (_internal_has_configip1()) {
    // required string configIP1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configip1());
  }

  if (_internal_has_configip2()) {
    // required string configIP2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configip2());
  }

  return total_size;
}
size_t ServiceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ServiceSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string equipmentID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipmentid());

    // required string configIP1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configip1());

    // required string configIP2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configip2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ServiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ServiceSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ServiceSettings)
    MergeFrom(*source);
  }
}

void ServiceSettings::MergeFrom(const ServiceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ServiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_equipmentid(from._internal_equipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_configip1(from._internal_configip1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_configip2(from._internal_configip2());
    }
  }
}

void ServiceSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ServiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceSettings::CopyFrom(const ServiceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ServiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceSettings::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ServiceSettings::InternalSwap(ServiceSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equipmentid_.Swap(&other->equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  configip1_.Swap(&other->configip1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  configip2_.Swap(&other->configip2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetTuningSourcesInfo::_Internal {
 public:
};

GetTuningSourcesInfo::GetTuningSourcesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetTuningSourcesInfo)
}
GetTuningSourcesInfo::GetTuningSourcesInfo(const GetTuningSourcesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetTuningSourcesInfo)
}

void GetTuningSourcesInfo::SharedCtor() {
}

GetTuningSourcesInfo::~GetTuningSourcesInfo() {
  // @@protoc_insertion_point(destructor:Network.GetTuningSourcesInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTuningSourcesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTuningSourcesInfo::ArenaDtor(void* object) {
  GetTuningSourcesInfo* _this = reinterpret_cast< GetTuningSourcesInfo* >(object);
  (void)_this;
}
void GetTuningSourcesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTuningSourcesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTuningSourcesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetTuningSourcesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTuningSourcesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTuningSourcesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetTuningSourcesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetTuningSourcesInfo)
  return target;
}

size_t GetTuningSourcesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetTuningSourcesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTuningSourcesInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetTuningSourcesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTuningSourcesInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTuningSourcesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetTuningSourcesInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetTuningSourcesInfo)
    MergeFrom(*source);
  }
}

void GetTuningSourcesInfo::MergeFrom(const GetTuningSourcesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetTuningSourcesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTuningSourcesInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetTuningSourcesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesInfo::CopyFrom(const GetTuningSourcesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetTuningSourcesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesInfo::IsInitialized() const {
  return true;
}

void GetTuningSourcesInfo::InternalSwap(GetTuningSourcesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTuningSourcesInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetTuningSourcesInfoReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTuningSourcesInfoReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_singlelmcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activeclientid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activeclientip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetTuningSourcesInfoReply::GetTuningSourcesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tuningsourceinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetTuningSourcesInfoReply)
}
GetTuningSourcesInfoReply::GetTuningSourcesInfoReply(const GetTuningSourcesInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuningsourceinfo_(from.tuningsourceinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activeclientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activeclientid()) {
    activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activeclientid(), 
      GetArena());
  }
  activeclientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activeclientip()) {
    activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activeclientip(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&singlelmcontrolmode_) -
    reinterpret_cast<char*>(&error_)) + sizeof(singlelmcontrolmode_));
  // @@protoc_insertion_point(copy_constructor:Network.GetTuningSourcesInfoReply)
}

void GetTuningSourcesInfoReply::SharedCtor() {
activeclientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
activeclientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_ = 0;
singlelmcontrolmode_ = true;
}

GetTuningSourcesInfoReply::~GetTuningSourcesInfoReply() {
  // @@protoc_insertion_point(destructor:Network.GetTuningSourcesInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTuningSourcesInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  activeclientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activeclientip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTuningSourcesInfoReply::ArenaDtor(void* object) {
  GetTuningSourcesInfoReply* _this = reinterpret_cast< GetTuningSourcesInfoReply* >(object);
  (void)_this;
}
void GetTuningSourcesInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTuningSourcesInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTuningSourcesInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetTuningSourcesInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuningsourceinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      activeclientid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      activeclientip_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    error_ = 0;
    singlelmcontrolmode_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTuningSourcesInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuningsourceinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool singleLmControlMode = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_singlelmcontrolmode(&has_bits);
          singlelmcontrolmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activeClientID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_activeclientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetTuningSourcesInfoReply.activeClientID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activeClientIP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_activeclientip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetTuningSourcesInfoReply.activeClientIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTuningSourcesInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetTuningSourcesInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuningsourceinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tuningsourceinfo(i), target, stream);
  }

  // optional bool singleLmControlMode = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_singlelmcontrolmode(), target);
  }

  // optional string activeClientID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activeclientid().data(), static_cast<int>(this->_internal_activeclientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetTuningSourcesInfoReply.activeClientID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activeclientid(), target);
  }

  // optional string activeClientIP = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activeclientip().data(), static_cast<int>(this->_internal_activeclientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetTuningSourcesInfoReply.activeClientIP");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_activeclientip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetTuningSourcesInfoReply)
  return target;
}

size_t GetTuningSourcesInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetTuningSourcesInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
  total_size += 1UL * this->_internal_tuningsourceinfo_size();
  for (const auto& msg : this->tuningsourceinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string activeClientID = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activeclientid());
    }

    // optional string activeClientIP = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activeclientip());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional bool singleLmControlMode = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTuningSourcesInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetTuningSourcesInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTuningSourcesInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTuningSourcesInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetTuningSourcesInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetTuningSourcesInfoReply)
    MergeFrom(*source);
  }
}

void GetTuningSourcesInfoReply::MergeFrom(const GetTuningSourcesInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetTuningSourcesInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuningsourceinfo_.MergeFrom(from.tuningsourceinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activeclientid(from._internal_activeclientid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_activeclientip(from._internal_activeclientip());
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000008u) {
      singlelmcontrolmode_ = from.singlelmcontrolmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTuningSourcesInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetTuningSourcesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesInfoReply::CopyFrom(const GetTuningSourcesInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetTuningSourcesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesInfoReply::IsInitialized() const {
  return true;
}

void GetTuningSourcesInfoReply::InternalSwap(GetTuningSourcesInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuningsourceinfo_.InternalSwap(&other->tuningsourceinfo_);
  activeclientid_.Swap(&other->activeclientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activeclientip_.Swap(&other->activeclientip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
  swap(singlelmcontrolmode_, other->singlelmcontrolmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTuningSourcesInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetTuningSourcesStates::_Internal {
 public:
};

GetTuningSourcesStates::GetTuningSourcesStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetTuningSourcesStates)
}
GetTuningSourcesStates::GetTuningSourcesStates(const GetTuningSourcesStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.GetTuningSourcesStates)
}

void GetTuningSourcesStates::SharedCtor() {
}

GetTuningSourcesStates::~GetTuningSourcesStates() {
  // @@protoc_insertion_point(destructor:Network.GetTuningSourcesStates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTuningSourcesStates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTuningSourcesStates::ArenaDtor(void* object) {
  GetTuningSourcesStates* _this = reinterpret_cast< GetTuningSourcesStates* >(object);
  (void)_this;
}
void GetTuningSourcesStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTuningSourcesStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTuningSourcesStates::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetTuningSourcesStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTuningSourcesStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTuningSourcesStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetTuningSourcesStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetTuningSourcesStates)
  return target;
}

size_t GetTuningSourcesStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetTuningSourcesStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTuningSourcesStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetTuningSourcesStates)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTuningSourcesStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTuningSourcesStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetTuningSourcesStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetTuningSourcesStates)
    MergeFrom(*source);
  }
}

void GetTuningSourcesStates::MergeFrom(const GetTuningSourcesStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetTuningSourcesStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTuningSourcesStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetTuningSourcesStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesStates::CopyFrom(const GetTuningSourcesStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetTuningSourcesStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesStates::IsInitialized() const {
  return true;
}

void GetTuningSourcesStates::InternalSwap(GetTuningSourcesStates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTuningSourcesStates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalsAssociatedToTuningSource::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalsAssociatedToTuningSource>()._has_bits_);
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SignalsAssociatedToTuningSource::SignalsAssociatedToTuningSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalhash_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.SignalsAssociatedToTuningSource)
}
SignalsAssociatedToTuningSource::SignalsAssociatedToTuningSource(const SignalsAssociatedToTuningSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signalhash_(from.signalhash_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceid_ = from.sourceid_;
  // @@protoc_insertion_point(copy_constructor:Network.SignalsAssociatedToTuningSource)
}

void SignalsAssociatedToTuningSource::SharedCtor() {
sourceid_ = PROTOBUF_ULONGLONG(0);
}

SignalsAssociatedToTuningSource::~SignalsAssociatedToTuningSource() {
  // @@protoc_insertion_point(destructor:Network.SignalsAssociatedToTuningSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalsAssociatedToTuningSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalsAssociatedToTuningSource::ArenaDtor(void* object) {
  SignalsAssociatedToTuningSource* _this = reinterpret_cast< SignalsAssociatedToTuningSource* >(object);
  (void)_this;
}
void SignalsAssociatedToTuningSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalsAssociatedToTuningSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalsAssociatedToTuningSource::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.SignalsAssociatedToTuningSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalhash_.Clear();
  sourceid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalsAssociatedToTuningSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 sourceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sourceid(&has_bits);
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 signalHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signalhash(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_signalhash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalsAssociatedToTuningSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.SignalsAssociatedToTuningSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sourceID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sourceid(), target);
  }

  // repeated uint64 signalHash = 2;
  for (int i = 0, n = this->_internal_signalhash_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_signalhash(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.SignalsAssociatedToTuningSource)
  return target;
}

size_t SignalsAssociatedToTuningSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.SignalsAssociatedToTuningSource)
  size_t total_size = 0;

  // required uint64 sourceID = 1;
  if (_internal_has_sourceid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sourceid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 signalHash = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->signalhash_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalhash_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalsAssociatedToTuningSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.SignalsAssociatedToTuningSource)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalsAssociatedToTuningSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalsAssociatedToTuningSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.SignalsAssociatedToTuningSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.SignalsAssociatedToTuningSource)
    MergeFrom(*source);
  }
}

void SignalsAssociatedToTuningSource::MergeFrom(const SignalsAssociatedToTuningSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.SignalsAssociatedToTuningSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalhash_.MergeFrom(from.signalhash_);
  if (from._internal_has_sourceid()) {
    _internal_set_sourceid(from._internal_sourceid());
  }
}

void SignalsAssociatedToTuningSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.SignalsAssociatedToTuningSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalsAssociatedToTuningSource::CopyFrom(const SignalsAssociatedToTuningSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.SignalsAssociatedToTuningSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalsAssociatedToTuningSource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SignalsAssociatedToTuningSource::InternalSwap(SignalsAssociatedToTuningSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalhash_.InternalSwap(&other->signalhash_);
  swap(sourceid_, other->sourceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalsAssociatedToTuningSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSourceFilling::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSourceFilling>()._has_bits_);
  static void set_has_signalcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TuningSourceFilling::TuningSourceFilling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalspersource_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSourceFilling)
}
TuningSourceFilling::TuningSourceFilling(const TuningSourceFilling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signalspersource_(from.signalspersource_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signalcount_ = from.signalcount_;
  // @@protoc_insertion_point(copy_constructor:Network.TuningSourceFilling)
}

void TuningSourceFilling::SharedCtor() {
signalcount_ = PROTOBUF_ULONGLONG(0);
}

TuningSourceFilling::~TuningSourceFilling() {
  // @@protoc_insertion_point(destructor:Network.TuningSourceFilling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSourceFilling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSourceFilling::ArenaDtor(void* object) {
  TuningSourceFilling* _this = reinterpret_cast< TuningSourceFilling* >(object);
  (void)_this;
}
void TuningSourceFilling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSourceFilling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSourceFilling::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSourceFilling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalspersource_.Clear();
  signalcount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSourceFilling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 signalCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_signalcount(&has_bits);
          signalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signalspersource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSourceFilling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSourceFilling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 signalCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalcount(), target);
  }

  // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signalspersource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_signalspersource(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSourceFilling)
  return target;
}

size_t TuningSourceFilling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSourceFilling)
  size_t total_size = 0;

  // required uint64 signalCount = 1;
  if (_internal_has_signalcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_signalcount());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
  total_size += 1UL * this->_internal_signalspersource_size();
  for (const auto& msg : this->signalspersource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSourceFilling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSourceFilling)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSourceFilling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSourceFilling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSourceFilling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSourceFilling)
    MergeFrom(*source);
  }
}

void TuningSourceFilling::MergeFrom(const TuningSourceFilling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSourceFilling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalspersource_.MergeFrom(from.signalspersource_);
  if (from._internal_has_signalcount()) {
    _internal_set_signalcount(from._internal_signalcount());
  }
}

void TuningSourceFilling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSourceFilling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSourceFilling::CopyFrom(const TuningSourceFilling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSourceFilling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSourceFilling::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(signalspersource_)) return false;
  return true;
}

void TuningSourceFilling::InternalSwap(TuningSourceFilling* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalspersource_.InternalSwap(&other->signalspersource_);
  swap(signalcount_, other->signalcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSourceFilling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSourceState::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSourceState>()._has_bits_);
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isreply(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_requestcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replycount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commandqueuesize(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_erruntimelyreplay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_errsent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errpartialsent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_errreplysize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_errnoreply(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_errrupprotocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_errrupframesize(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_errrupnontuningdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_errrupmoduletype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_errrupframesquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_errrupframenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_errfotipprotocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_errfotipuniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_errfotiplmnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_errfotipsubsystemcode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_errfotipoperationcode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_errfotipframesize(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_errfotipromsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_errfotipromframesize(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_fotipflagboundschecksuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_fotipflagwritesuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_fotipflagdatatypeerr(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fotipflagopcodeerr(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_fotipflagstartaddrerr(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fotipflagromsizeerr(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_fotipflagromframesizeerr(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_fotipflagframesizeerr(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_fotipflagprotocolversionerr(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_fotipflagsubsystemkeyerr(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_fotipflaguniueiderr(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_fotipflagoffseterr(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_fotipflagapplysuccess(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_fotipflagsetsor(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_erranaloglowboundcheck(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_erranaloghighboundcheck(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_errrupcrc(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_controlisactive(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_setsor(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hasunappliedparams(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_writingdisabled(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_fotipflagwritingdisabled(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_errtuningframeupdate(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
};

TuningSourceState::TuningSourceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSourceState)
}
TuningSourceState::TuningSourceState(const TuningSourceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sourceid_, &from.sourceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&writingdisabled_) -
    reinterpret_cast<char*>(&sourceid_)) + sizeof(writingdisabled_));
  // @@protoc_insertion_point(copy_constructor:Network.TuningSourceState)
}

void TuningSourceState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sourceid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&writingdisabled_) -
    reinterpret_cast<char*>(&sourceid_)) + sizeof(writingdisabled_));
}

TuningSourceState::~TuningSourceState() {
  // @@protoc_insertion_point(destructor:Network.TuningSourceState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSourceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSourceState::ArenaDtor(void* object) {
  TuningSourceState* _this = reinterpret_cast< TuningSourceState* >(object);
  (void)_this;
}
void TuningSourceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSourceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSourceState::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSourceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&sourceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errnoreply_) -
        reinterpret_cast<char*>(&sourceid_)) + sizeof(errnoreply_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&errrupprotocolversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errfotipuniqueid_) -
        reinterpret_cast<char*>(&errrupprotocolversion_)) + sizeof(errfotipuniqueid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&errfotiplmnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fotipflagwritesuccess_) -
        reinterpret_cast<char*>(&errfotiplmnumber_)) + sizeof(fotipflagwritesuccess_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&fotipflagdatatypeerr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fotipflagstartaddrerr_) -
        reinterpret_cast<char*>(&fotipflagdatatypeerr_)) + sizeof(fotipflagstartaddrerr_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&fotipflagromsizeerr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fotipflagapplysuccess_) -
        reinterpret_cast<char*>(&fotipflagromsizeerr_)) + sizeof(fotipflagapplysuccess_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&fotipflagsetsor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writingdisabled_) -
        reinterpret_cast<char*>(&fotipflagsetsor_)) + sizeof(writingdisabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSourceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sourceID = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sourceid(&_has_bits_);
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isReply = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isreply(&_has_bits_);
          isreply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 requestCount = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_requestcount(&_has_bits_);
          requestcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 replyCount = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_replycount(&_has_bits_);
          replycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 commandQueueSize = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_commandqueuesize(&_has_bits_);
          commandqueuesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errUntimelyReplay = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_erruntimelyreplay(&_has_bits_);
          erruntimelyreplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errSent = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_errsent(&_has_bits_);
          errsent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errPartialSent = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_errpartialsent(&_has_bits_);
          errpartialsent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errReplySize = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_errreplysize(&_has_bits_);
          errreplysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errNoReply = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_errnoreply(&_has_bits_);
          errnoreply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupProtocolVersion = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_errrupprotocolversion(&_has_bits_);
          errrupprotocolversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupFrameSize = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_errrupframesize(&_has_bits_);
          errrupframesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupNonTuningData = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_errrupnontuningdata(&_has_bits_);
          errrupnontuningdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupModuleType = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_errrupmoduletype(&_has_bits_);
          errrupmoduletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupFramesQuantity = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_errrupframesquantity(&_has_bits_);
          errrupframesquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupFrameNumber = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_errrupframenumber(&_has_bits_);
          errrupframenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipProtocolVersion = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_errfotipprotocolversion(&_has_bits_);
          errfotipprotocolversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipUniqueID = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_errfotipuniqueid(&_has_bits_);
          errfotipuniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipLmNumber = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_errfotiplmnumber(&_has_bits_);
          errfotiplmnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipSubsystemCode = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_errfotipsubsystemcode(&_has_bits_);
          errfotipsubsystemcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipOperationCode = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_errfotipoperationcode(&_has_bits_);
          errfotipoperationcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipFrameSize = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_errfotipframesize(&_has_bits_);
          errfotipframesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipRomSize = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_errfotipromsize(&_has_bits_);
          errfotipromsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errFotipRomFrameSize = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_errfotipromframesize(&_has_bits_);
          errfotipromframesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_fotipflagboundschecksuccess(&_has_bits_);
          fotipflagboundschecksuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_fotipflagwritesuccess(&_has_bits_);
          fotipflagwritesuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_fotipflagdatatypeerr(&_has_bits_);
          fotipflagdatatypeerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_fotipflagopcodeerr(&_has_bits_);
          fotipflagopcodeerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_fotipflagstartaddrerr(&_has_bits_);
          fotipflagstartaddrerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_fotipflagromsizeerr(&_has_bits_);
          fotipflagromsizeerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_fotipflagromframesizeerr(&_has_bits_);
          fotipflagromframesizeerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_fotipflagframesizeerr(&_has_bits_);
          fotipflagframesizeerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fotipflagprotocolversionerr(&_has_bits_);
          fotipflagprotocolversionerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fotipflagsubsystemkeyerr(&_has_bits_);
          fotipflagsubsystemkeyerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fotipflaguniueiderr(&_has_bits_);
          fotipflaguniueiderr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagOffsetErr = 36 [default = 0];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fotipflagoffseterr(&_has_bits_);
          fotipflagoffseterr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagApplySuccess = 37 [default = 0];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fotipflagapplysuccess(&_has_bits_);
          fotipflagapplysuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagSetSOR = 38 [default = 0];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fotipflagsetsor(&_has_bits_);
          fotipflagsetsor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_erranaloglowboundcheck(&_has_bits_);
          erranaloglowboundcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_erranaloghighboundcheck(&_has_bits_);
          erranaloghighboundcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errRupCRC = 41 [default = 0];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_errrupcrc(&_has_bits_);
          errrupcrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controlIsActive = 42 [default = false];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_controlisactive(&_has_bits_);
          controlisactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool setSOR = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_setsor(&_has_bits_);
          setsor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasUnappliedParams = 44 [default = false];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_hasunappliedparams(&_has_bits_);
          hasunappliedparams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool writingDisabled = 45 [default = false];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_writingdisabled(&_has_bits_);
          writingdisabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fotipFlagWritingDisabled = 46 [default = 0];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_fotipflagwritingdisabled(&_has_bits_);
          fotipflagwritingdisabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 errTuningFrameUpdate = 47 [default = 0];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_errtuningframeupdate(&_has_bits_);
          errtuningframeupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSourceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSourceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sourceID = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sourceid(), target);
  }

  // optional bool isReply = 2 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isreply(), target);
  }

  // optional int64 requestCount = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_requestcount(), target);
  }

  // optional int64 replyCount = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_replycount(), target);
  }

  // optional int32 commandQueueSize = 5 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_commandqueuesize(), target);
  }

  // optional int64 errUntimelyReplay = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_erruntimelyreplay(), target);
  }

  // optional int64 errSent = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_errsent(), target);
  }

  // optional int64 errPartialSent = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_errpartialsent(), target);
  }

  // optional int64 errReplySize = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_errreplysize(), target);
  }

  // optional int64 errNoReply = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_errnoreply(), target);
  }

  // optional int64 errRupProtocolVersion = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_errrupprotocolversion(), target);
  }

  // optional int64 errRupFrameSize = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_errrupframesize(), target);
  }

  // optional int64 errRupNonTuningData = 13 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_errrupnontuningdata(), target);
  }

  // optional int64 errRupModuleType = 14 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_errrupmoduletype(), target);
  }

  // optional int64 errRupFramesQuantity = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_errrupframesquantity(), target);
  }

  // optional int64 errRupFrameNumber = 16 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_errrupframenumber(), target);
  }

  // optional int64 errFotipProtocolVersion = 17 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_errfotipprotocolversion(), target);
  }

  // optional int64 errFotipUniqueID = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_errfotipuniqueid(), target);
  }

  // optional int64 errFotipLmNumber = 19 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_errfotiplmnumber(), target);
  }

  // optional int64 errFotipSubsystemCode = 20 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_errfotipsubsystemcode(), target);
  }

  // optional int64 errFotipOperationCode = 21 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_errfotipoperationcode(), target);
  }

  // optional int64 errFotipFrameSize = 22 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_errfotipframesize(), target);
  }

  // optional int64 errFotipRomSize = 23 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_errfotipromsize(), target);
  }

  // optional int64 errFotipRomFrameSize = 24 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_errfotipromframesize(), target);
  }

  // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_fotipflagboundschecksuccess(), target);
  }

  // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->_internal_fotipflagwritesuccess(), target);
  }

  // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_fotipflagdatatypeerr(), target);
  }

  // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->_internal_fotipflagopcodeerr(), target);
  }

  // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->_internal_fotipflagstartaddrerr(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->_internal_fotipflagromsizeerr(), target);
  }

  // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->_internal_fotipflagromframesizeerr(), target);
  }

  // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->_internal_fotipflagframesizeerr(), target);
  }

  // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(33, this->_internal_fotipflagprotocolversionerr(), target);
  }

  // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(34, this->_internal_fotipflagsubsystemkeyerr(), target);
  }

  // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(35, this->_internal_fotipflaguniueiderr(), target);
  }

  // optional int64 fotipFlagOffsetErr = 36 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(36, this->_internal_fotipflagoffseterr(), target);
  }

  // optional int64 fotipFlagApplySuccess = 37 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(37, this->_internal_fotipflagapplysuccess(), target);
  }

  // optional int64 fotipFlagSetSOR = 38 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(38, this->_internal_fotipflagsetsor(), target);
  }

  // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(39, this->_internal_erranaloglowboundcheck(), target);
  }

  // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_erranaloghighboundcheck(), target);
  }

  // optional int64 errRupCRC = 41 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(41, this->_internal_errrupcrc(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool controlIsActive = 42 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_controlisactive(), target);
  }

  // optional bool setSOR = 43 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_setsor(), target);
  }

  // optional bool hasUnappliedParams = 44 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_hasunappliedparams(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool writingDisabled = 45 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_writingdisabled(), target);
  }

  // optional int64 fotipFlagWritingDisabled = 46 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(46, this->_internal_fotipflagwritingdisabled(), target);
  }

  // optional int64 errTuningFrameUpdate = 47 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(47, this->_internal_errtuningframeupdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSourceState)
  return target;
}

size_t TuningSourceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSourceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 sourceID = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sourceid());
    }

    // optional int64 requestCount = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_requestcount());
    }

    // optional int64 replyCount = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_replycount());
    }

    // optional int64 errUntimelyReplay = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_erruntimelyreplay());
    }

    // optional int64 errSent = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errsent());
    }

    // optional int64 errPartialSent = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errpartialsent());
    }

    // optional int64 errReplySize = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errreplysize());
    }

    // optional int64 errNoReply = 10 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errnoreply());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 errRupProtocolVersion = 11 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupprotocolversion());
    }

    // optional int64 errRupFrameSize = 12 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupframesize());
    }

    // optional int64 errRupNonTuningData = 13 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupnontuningdata());
    }

    // optional int64 errRupModuleType = 14 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupmoduletype());
    }

    // optional int64 errRupFramesQuantity = 15 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupframesquantity());
    }

    // optional int64 errRupFrameNumber = 16 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupframenumber());
    }

    // optional int64 errFotipProtocolVersion = 17 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipprotocolversion());
    }

    // optional int64 errFotipUniqueID = 18 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipuniqueid());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 errFotipLmNumber = 19 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotiplmnumber());
    }

    // optional int64 errFotipSubsystemCode = 20 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipsubsystemcode());
    }

    // optional int64 errFotipOperationCode = 21 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipoperationcode());
    }

    // optional int64 errFotipFrameSize = 22 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipframesize());
    }

    // optional int64 errFotipRomSize = 23 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipromsize());
    }

    // optional int64 errFotipRomFrameSize = 24 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errfotipromframesize());
    }

    // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagboundschecksuccess());
    }

    // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagwritesuccess());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagdatatypeerr());
    }

    // optional int32 commandQueueSize = 5 [default = 0];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_commandqueuesize());
    }

    // optional bool isReply = 2 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool controlIsActive = 42 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool setSOR = 43 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool hasUnappliedParams = 44 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagopcodeerr());
    }

    // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagstartaddrerr());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagromsizeerr());
    }

    // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagromframesizeerr());
    }

    // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagframesizeerr());
    }

    // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagprotocolversionerr());
    }

    // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagsubsystemkeyerr());
    }

    // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflaguniueiderr());
    }

    // optional int64 fotipFlagOffsetErr = 36 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagoffseterr());
    }

    // optional int64 fotipFlagApplySuccess = 37 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagapplysuccess());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int64 fotipFlagSetSOR = 38 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagsetsor());
    }

    // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_erranaloglowboundcheck());
    }

    // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_erranaloghighboundcheck());
    }

    // optional int64 errRupCRC = 41 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errrupcrc());
    }

    // optional int64 fotipFlagWritingDisabled = 46 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fotipflagwritingdisabled());
    }

    // optional int64 errTuningFrameUpdate = 47 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_errtuningframeupdate());
    }

    // optional bool writingDisabled = 45 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSourceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSourceState)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSourceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSourceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSourceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSourceState)
    MergeFrom(*source);
  }
}

void TuningSourceState::MergeFrom(const TuningSourceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSourceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sourceid_ = from.sourceid_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestcount_ = from.requestcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      replycount_ = from.replycount_;
    }
    if (cached_has_bits & 0x00000008u) {
      erruntimelyreplay_ = from.erruntimelyreplay_;
    }
    if (cached_has_bits & 0x00000010u) {
      errsent_ = from.errsent_;
    }
    if (cached_has_bits & 0x00000020u) {
      errpartialsent_ = from.errpartialsent_;
    }
    if (cached_has_bits & 0x00000040u) {
      errreplysize_ = from.errreplysize_;
    }
    if (cached_has_bits & 0x00000080u) {
      errnoreply_ = from.errnoreply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      errrupprotocolversion_ = from.errrupprotocolversion_;
    }
    if (cached_has_bits & 0x00000200u) {
      errrupframesize_ = from.errrupframesize_;
    }
    if (cached_has_bits & 0x00000400u) {
      errrupnontuningdata_ = from.errrupnontuningdata_;
    }
    if (cached_has_bits & 0x00000800u) {
      errrupmoduletype_ = from.errrupmoduletype_;
    }
    if (cached_has_bits & 0x00001000u) {
      errrupframesquantity_ = from.errrupframesquantity_;
    }
    if (cached_has_bits & 0x00002000u) {
      errrupframenumber_ = from.errrupframenumber_;
    }
    if (cached_has_bits & 0x00004000u) {
      errfotipprotocolversion_ = from.errfotipprotocolversion_;
    }
    if (cached_has_bits & 0x00008000u) {
      errfotipuniqueid_ = from.errfotipuniqueid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      errfotiplmnumber_ = from.errfotiplmnumber_;
    }
    if (cached_has_bits & 0x00020000u) {
      errfotipsubsystemcode_ = from.errfotipsubsystemcode_;
    }
    if (cached_has_bits & 0x00040000u) {
      errfotipoperationcode_ = from.errfotipoperationcode_;
    }
    if (cached_has_bits & 0x00080000u) {
      errfotipframesize_ = from.errfotipframesize_;
    }
    if (cached_has_bits & 0x00100000u) {
      errfotipromsize_ = from.errfotipromsize_;
    }
    if (cached_has_bits & 0x00200000u) {
      errfotipromframesize_ = from.errfotipromframesize_;
    }
    if (cached_has_bits & 0x00400000u) {
      fotipflagboundschecksuccess_ = from.fotipflagboundschecksuccess_;
    }
    if (cached_has_bits & 0x00800000u) {
      fotipflagwritesuccess_ = from.fotipflagwritesuccess_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      fotipflagdatatypeerr_ = from.fotipflagdatatypeerr_;
    }
    if (cached_has_bits & 0x02000000u) {
      commandqueuesize_ = from.commandqueuesize_;
    }
    if (cached_has_bits & 0x04000000u) {
      isreply_ = from.isreply_;
    }
    if (cached_has_bits & 0x08000000u) {
      controlisactive_ = from.controlisactive_;
    }
    if (cached_has_bits & 0x10000000u) {
      setsor_ = from.setsor_;
    }
    if (cached_has_bits & 0x20000000u) {
      hasunappliedparams_ = from.hasunappliedparams_;
    }
    if (cached_has_bits & 0x40000000u) {
      fotipflagopcodeerr_ = from.fotipflagopcodeerr_;
    }
    if (cached_has_bits & 0x80000000u) {
      fotipflagstartaddrerr_ = from.fotipflagstartaddrerr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fotipflagromsizeerr_ = from.fotipflagromsizeerr_;
    }
    if (cached_has_bits & 0x00000002u) {
      fotipflagromframesizeerr_ = from.fotipflagromframesizeerr_;
    }
    if (cached_has_bits & 0x00000004u) {
      fotipflagframesizeerr_ = from.fotipflagframesizeerr_;
    }
    if (cached_has_bits & 0x00000008u) {
      fotipflagprotocolversionerr_ = from.fotipflagprotocolversionerr_;
    }
    if (cached_has_bits & 0x00000010u) {
      fotipflagsubsystemkeyerr_ = from.fotipflagsubsystemkeyerr_;
    }
    if (cached_has_bits & 0x00000020u) {
      fotipflaguniueiderr_ = from.fotipflaguniueiderr_;
    }
    if (cached_has_bits & 0x00000040u) {
      fotipflagoffseterr_ = from.fotipflagoffseterr_;
    }
    if (cached_has_bits & 0x00000080u) {
      fotipflagapplysuccess_ = from.fotipflagapplysuccess_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      fotipflagsetsor_ = from.fotipflagsetsor_;
    }
    if (cached_has_bits & 0x00000200u) {
      erranaloglowboundcheck_ = from.erranaloglowboundcheck_;
    }
    if (cached_has_bits & 0x00000400u) {
      erranaloghighboundcheck_ = from.erranaloghighboundcheck_;
    }
    if (cached_has_bits & 0x00000800u) {
      errrupcrc_ = from.errrupcrc_;
    }
    if (cached_has_bits & 0x00001000u) {
      fotipflagwritingdisabled_ = from.fotipflagwritingdisabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      errtuningframeupdate_ = from.errtuningframeupdate_;
    }
    if (cached_has_bits & 0x00004000u) {
      writingdisabled_ = from.writingdisabled_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void TuningSourceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSourceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSourceState::CopyFrom(const TuningSourceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSourceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSourceState::IsInitialized() const {
  return true;
}

void TuningSourceState::InternalSwap(TuningSourceState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuningSourceState, writingdisabled_)
      + sizeof(TuningSourceState::writingdisabled_)
      - PROTOBUF_FIELD_OFFSET(TuningSourceState, sourceid_)>(
          reinterpret_cast<char*>(&sourceid_),
          reinterpret_cast<char*>(&other->sourceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSourceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetTuningSourcesStatesReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTuningSourcesStatesReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_singlelmcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activeclientid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activeclientip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetTuningSourcesStatesReply::GetTuningSourcesStatesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tuningsourcesstate_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetTuningSourcesStatesReply)
}
GetTuningSourcesStatesReply::GetTuningSourcesStatesReply(const GetTuningSourcesStatesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuningsourcesstate_(from.tuningsourcesstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activeclientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activeclientid()) {
    activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activeclientid(), 
      GetArena());
  }
  activeclientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activeclientip()) {
    activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activeclientip(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&singlelmcontrolmode_) -
    reinterpret_cast<char*>(&error_)) + sizeof(singlelmcontrolmode_));
  // @@protoc_insertion_point(copy_constructor:Network.GetTuningSourcesStatesReply)
}

void GetTuningSourcesStatesReply::SharedCtor() {
activeclientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
activeclientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_ = 0;
singlelmcontrolmode_ = true;
}

GetTuningSourcesStatesReply::~GetTuningSourcesStatesReply() {
  // @@protoc_insertion_point(destructor:Network.GetTuningSourcesStatesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTuningSourcesStatesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  activeclientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activeclientip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTuningSourcesStatesReply::ArenaDtor(void* object) {
  GetTuningSourcesStatesReply* _this = reinterpret_cast< GetTuningSourcesStatesReply* >(object);
  (void)_this;
}
void GetTuningSourcesStatesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTuningSourcesStatesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTuningSourcesStatesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetTuningSourcesStatesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuningsourcesstate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      activeclientid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      activeclientip_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    error_ = 0;
    singlelmcontrolmode_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTuningSourcesStatesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.TuningSourceState tuningSourcesState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuningsourcesstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool singleLmControlMode = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_singlelmcontrolmode(&has_bits);
          singlelmcontrolmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activeClientID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_activeclientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetTuningSourcesStatesReply.activeClientID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activeClientIP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_activeclientip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetTuningSourcesStatesReply.activeClientIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTuningSourcesStatesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetTuningSourcesStatesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Network.TuningSourceState tuningSourcesState = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuningsourcesstate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tuningsourcesstate(i), target, stream);
  }

  // optional bool singleLmControlMode = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_singlelmcontrolmode(), target);
  }

  // optional string activeClientID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activeclientid().data(), static_cast<int>(this->_internal_activeclientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetTuningSourcesStatesReply.activeClientID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activeclientid(), target);
  }

  // optional string activeClientIP = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activeclientip().data(), static_cast<int>(this->_internal_activeclientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetTuningSourcesStatesReply.activeClientIP");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_activeclientip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetTuningSourcesStatesReply)
  return target;
}

size_t GetTuningSourcesStatesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetTuningSourcesStatesReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.TuningSourceState tuningSourcesState = 2;
  total_size += 1UL * this->_internal_tuningsourcesstate_size();
  for (const auto& msg : this->tuningsourcesstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string activeClientID = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activeclientid());
    }

    // optional string activeClientIP = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activeclientip());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional bool singleLmControlMode = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTuningSourcesStatesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetTuningSourcesStatesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTuningSourcesStatesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTuningSourcesStatesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetTuningSourcesStatesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetTuningSourcesStatesReply)
    MergeFrom(*source);
  }
}

void GetTuningSourcesStatesReply::MergeFrom(const GetTuningSourcesStatesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetTuningSourcesStatesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuningsourcesstate_.MergeFrom(from.tuningsourcesstate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activeclientid(from._internal_activeclientid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_activeclientip(from._internal_activeclientip());
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000008u) {
      singlelmcontrolmode_ = from.singlelmcontrolmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTuningSourcesStatesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetTuningSourcesStatesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesStatesReply::CopyFrom(const GetTuningSourcesStatesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetTuningSourcesStatesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesStatesReply::IsInitialized() const {
  return true;
}

void GetTuningSourcesStatesReply::InternalSwap(GetTuningSourcesStatesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuningsourcesstate_.InternalSwap(&other->tuningsourcesstate_);
  activeclientid_.Swap(&other->activeclientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activeclientip_.Swap(&other->activeclientip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
  swap(singlelmcontrolmode_, other->singlelmcontrolmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTuningSourcesStatesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeConrolledTuningSourceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeConrolledTuningSourceRequest>()._has_bits_);
  static void set_has_takecontrol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tuningsourceequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activatecontrol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChangeConrolledTuningSourceRequest::ChangeConrolledTuningSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ChangeConrolledTuningSourceRequest)
}
ChangeConrolledTuningSourceRequest::ChangeConrolledTuningSourceRequest(const ChangeConrolledTuningSourceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tuningsourceequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tuningsourceequipmentid()) {
    tuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tuningsourceequipmentid(), 
      GetArena());
  }
  ::memcpy(&takecontrol_, &from.takecontrol_,
    static_cast<size_t>(reinterpret_cast<char*>(&activatecontrol_) -
    reinterpret_cast<char*>(&takecontrol_)) + sizeof(activatecontrol_));
  // @@protoc_insertion_point(copy_constructor:Network.ChangeConrolledTuningSourceRequest)
}

void ChangeConrolledTuningSourceRequest::SharedCtor() {
tuningsourceequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&takecontrol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&activatecontrol_) -
    reinterpret_cast<char*>(&takecontrol_)) + sizeof(activatecontrol_));
}

ChangeConrolledTuningSourceRequest::~ChangeConrolledTuningSourceRequest() {
  // @@protoc_insertion_point(destructor:Network.ChangeConrolledTuningSourceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeConrolledTuningSourceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tuningsourceequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeConrolledTuningSourceRequest::ArenaDtor(void* object) {
  ChangeConrolledTuningSourceRequest* _this = reinterpret_cast< ChangeConrolledTuningSourceRequest* >(object);
  (void)_this;
}
void ChangeConrolledTuningSourceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeConrolledTuningSourceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeConrolledTuningSourceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ChangeConrolledTuningSourceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tuningsourceequipmentid_.ClearNonDefaultToEmpty();
  }
  ::memset(&takecontrol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activatecontrol_) -
      reinterpret_cast<char*>(&takecontrol_)) + sizeof(activatecontrol_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeConrolledTuningSourceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool takeControl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_takecontrol(&has_bits);
          takecontrol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tuningSourceEquipmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tuningsourceequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool activateControl = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_activatecontrol(&has_bits);
          activatecontrol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeConrolledTuningSourceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ChangeConrolledTuningSourceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool takeControl = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_takecontrol(), target);
  }

  // optional string tuningSourceEquipmentID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tuningsourceequipmentid().data(), static_cast<int>(this->_internal_tuningsourceequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tuningsourceequipmentid(), target);
  }

  // optional bool activateControl = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_activatecontrol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ChangeConrolledTuningSourceRequest)
  return target;
}

size_t ChangeConrolledTuningSourceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ChangeConrolledTuningSourceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tuningSourceEquipmentID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tuningsourceequipmentid());
    }

    // optional bool takeControl = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool activateControl = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeConrolledTuningSourceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ChangeConrolledTuningSourceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeConrolledTuningSourceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeConrolledTuningSourceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ChangeConrolledTuningSourceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ChangeConrolledTuningSourceRequest)
    MergeFrom(*source);
  }
}

void ChangeConrolledTuningSourceRequest::MergeFrom(const ChangeConrolledTuningSourceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ChangeConrolledTuningSourceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tuningsourceequipmentid(from._internal_tuningsourceequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      takecontrol_ = from.takecontrol_;
    }
    if (cached_has_bits & 0x00000004u) {
      activatecontrol_ = from.activatecontrol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeConrolledTuningSourceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ChangeConrolledTuningSourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConrolledTuningSourceRequest::CopyFrom(const ChangeConrolledTuningSourceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ChangeConrolledTuningSourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConrolledTuningSourceRequest::IsInitialized() const {
  return true;
}

void ChangeConrolledTuningSourceRequest::InternalSwap(ChangeConrolledTuningSourceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuningsourceequipmentid_.Swap(&other->tuningsourceequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, activatecontrol_)
      + sizeof(ChangeConrolledTuningSourceRequest::activatecontrol_)
      - PROTOBUF_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, takecontrol_)>(
          reinterpret_cast<char*>(&takecontrol_),
          reinterpret_cast<char*>(&other->takecontrol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeConrolledTuningSourceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeConrolledTuningSourceReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeConrolledTuningSourceReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_controlledtuningsourceequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controlisactive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChangeConrolledTuningSourceReply::ChangeConrolledTuningSourceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.ChangeConrolledTuningSourceReply)
}
ChangeConrolledTuningSourceReply::ChangeConrolledTuningSourceReply(const ChangeConrolledTuningSourceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controlledtuningsourceequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controlledtuningsourceequipmentid()) {
    controlledtuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controlledtuningsourceequipmentid(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&controlisactive_) -
    reinterpret_cast<char*>(&error_)) + sizeof(controlisactive_));
  // @@protoc_insertion_point(copy_constructor:Network.ChangeConrolledTuningSourceReply)
}

void ChangeConrolledTuningSourceReply::SharedCtor() {
controlledtuningsourceequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controlisactive_) -
    reinterpret_cast<char*>(&error_)) + sizeof(controlisactive_));
}

ChangeConrolledTuningSourceReply::~ChangeConrolledTuningSourceReply() {
  // @@protoc_insertion_point(destructor:Network.ChangeConrolledTuningSourceReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeConrolledTuningSourceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  controlledtuningsourceequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeConrolledTuningSourceReply::ArenaDtor(void* object) {
  ChangeConrolledTuningSourceReply* _this = reinterpret_cast< ChangeConrolledTuningSourceReply* >(object);
  (void)_this;
}
void ChangeConrolledTuningSourceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeConrolledTuningSourceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeConrolledTuningSourceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.ChangeConrolledTuningSourceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    controlledtuningsourceequipmentid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controlisactive_) -
        reinterpret_cast<char*>(&error_)) + sizeof(controlisactive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeConrolledTuningSourceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controlledTuningSourceEquipmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controlledtuningsourceequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controlIsActive = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_controlisactive(&has_bits);
          controlisactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeConrolledTuningSourceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.ChangeConrolledTuningSourceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional string controlledTuningSourceEquipmentID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controlledtuningsourceequipmentid().data(), static_cast<int>(this->_internal_controlledtuningsourceequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controlledtuningsourceequipmentid(), target);
  }

  // optional bool controlIsActive = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_controlisactive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.ChangeConrolledTuningSourceReply)
  return target;
}

size_t ChangeConrolledTuningSourceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.ChangeConrolledTuningSourceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string controlledTuningSourceEquipmentID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controlledtuningsourceequipmentid());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional bool controlIsActive = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeConrolledTuningSourceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.ChangeConrolledTuningSourceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeConrolledTuningSourceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeConrolledTuningSourceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.ChangeConrolledTuningSourceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.ChangeConrolledTuningSourceReply)
    MergeFrom(*source);
  }
}

void ChangeConrolledTuningSourceReply::MergeFrom(const ChangeConrolledTuningSourceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.ChangeConrolledTuningSourceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_controlledtuningsourceequipmentid(from._internal_controlledtuningsourceequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      controlisactive_ = from.controlisactive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeConrolledTuningSourceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.ChangeConrolledTuningSourceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConrolledTuningSourceReply::CopyFrom(const ChangeConrolledTuningSourceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.ChangeConrolledTuningSourceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConrolledTuningSourceReply::IsInitialized() const {
  return true;
}

void ChangeConrolledTuningSourceReply::InternalSwap(ChangeConrolledTuningSourceReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controlledtuningsourceequipmentid_.Swap(&other->controlledtuningsourceequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeConrolledTuningSourceReply, controlisactive_)
      + sizeof(ChangeConrolledTuningSourceReply::controlisactive_)
      - PROTOBUF_FIELD_OFFSET(ChangeConrolledTuningSourceReply, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeConrolledTuningSourceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalsRead::_Internal {
 public:
};

TuningSignalsRead::TuningSignalsRead(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalhash_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalsRead)
}
TuningSignalsRead::TuningSignalsRead(const TuningSignalsRead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signalhash_(from.signalhash_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalsRead)
}

void TuningSignalsRead::SharedCtor() {
}

TuningSignalsRead::~TuningSignalsRead() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalsRead)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalsRead::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalsRead::ArenaDtor(void* object) {
  TuningSignalsRead* _this = reinterpret_cast< TuningSignalsRead* >(object);
  (void)_this;
}
void TuningSignalsRead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalsRead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalsRead::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalsRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalhash_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalsRead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 signalHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signalhash(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_signalhash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalsRead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalsRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 signalHash = 2;
  for (int i = 0, n = this->_internal_signalhash_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_signalhash(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalsRead)
  return target;
}

size_t TuningSignalsRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalsRead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 signalHash = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->signalhash_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalhash_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalsRead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalsRead)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalsRead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalsRead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalsRead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalsRead)
    MergeFrom(*source);
  }
}

void TuningSignalsRead::MergeFrom(const TuningSignalsRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalsRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalhash_.MergeFrom(from.signalhash_);
}

void TuningSignalsRead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalsRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsRead::CopyFrom(const TuningSignalsRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalsRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsRead::IsInitialized() const {
  return true;
}

void TuningSignalsRead::InternalSwap(TuningSignalsRead* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signalhash_.InternalSwap(&other->signalhash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalsRead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalState::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSignalState>()._has_bits_);
  static void set_has_signalhash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Proto::TuningValue& value(const TuningSignalState* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::TuningValue& readlowbound(const TuningSignalState* msg);
  static void set_has_readlowbound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::TuningValue& readhighbound(const TuningSignalState* msg);
  static void set_has_readhighbound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_writeinprogress(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_writeerrorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_writeclient(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_successfulreadtime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_writerequesttime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_successfulwritetime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unsuccessfulwritetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_setsor(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_writingdisabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::Proto::TuningValue&
TuningSignalState::_Internal::value(const TuningSignalState* msg) {
  return *msg->value_;
}
const ::Proto::TuningValue&
TuningSignalState::_Internal::readlowbound(const TuningSignalState* msg) {
  return *msg->readlowbound_;
}
const ::Proto::TuningValue&
TuningSignalState::_Internal::readhighbound(const TuningSignalState* msg) {
  return *msg->readhighbound_;
}
void TuningSignalState::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TuningSignalState::clear_readlowbound() {
  if (readlowbound_ != nullptr) readlowbound_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TuningSignalState::clear_readhighbound() {
  if (readhighbound_ != nullptr) readhighbound_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TuningSignalState::TuningSignalState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalState)
}
TuningSignalState::TuningSignalState(const TuningSignalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::Proto::TuningValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_readlowbound()) {
    readlowbound_ = new ::Proto::TuningValue(*from.readlowbound_);
  } else {
    readlowbound_ = nullptr;
  }
  if (from._internal_has_readhighbound()) {
    readhighbound_ = new ::Proto::TuningValue(*from.readhighbound_);
  } else {
    readhighbound_ = nullptr;
  }
  ::memcpy(&signalhash_, &from.signalhash_,
    static_cast<size_t>(reinterpret_cast<char*>(&writingdisabled_) -
    reinterpret_cast<char*>(&signalhash_)) + sizeof(writingdisabled_));
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalState)
}

void TuningSignalState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&writingdisabled_) -
    reinterpret_cast<char*>(&value_)) + sizeof(writingdisabled_));
}

TuningSignalState::~TuningSignalState() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete readlowbound_;
  if (this != internal_default_instance()) delete readhighbound_;
}

void TuningSignalState::ArenaDtor(void* object) {
  TuningSignalState* _this = reinterpret_cast< TuningSignalState* >(object);
  (void)_this;
}
void TuningSignalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalState::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(readlowbound_ != nullptr);
      readlowbound_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(readhighbound_ != nullptr);
      readhighbound_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&signalhash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&successfulreadtime_) -
        reinterpret_cast<char*>(&signalhash_)) + sizeof(successfulreadtime_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&writerequesttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writingdisabled_) -
        reinterpret_cast<char*>(&writerequesttime_)) + sizeof(writingdisabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 signalHash = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_signalhash(&has_bits);
          signalhash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 error = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool valid = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue readLowBound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_readlowbound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue readHighBound = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_readhighbound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool writeInProgress = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_writeinprogress(&has_bits);
          writeinprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 writeErrorCode = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_writeerrorcode(&has_bits);
          writeerrorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 writeClient = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_writeclient(&has_bits);
          writeclient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 successfulReadTime = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_successfulreadtime(&has_bits);
          successfulreadtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 writeRequestTime = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_writerequesttime(&has_bits);
          writerequesttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 successfulWriteTime = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_successfulwritetime(&has_bits);
          successfulwritetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_unsuccessfulwritetime(&has_bits);
          unsuccessfulwritetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional bool setSOR = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_setsor(&has_bits);
          setsor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool writingDisabled = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_writingdisabled(&has_bits);
          writingdisabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 signalHash = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_signalhash(), target);
  }

  // optional int32 error = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_error(), target);
  }

  // optional bool valid = 3 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_valid(), target);
  }

  // optional .Proto.TuningValue value = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  // optional .Proto.TuningValue readLowBound = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::readlowbound(this), target, stream);
  }

  // optional .Proto.TuningValue readHighBound = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::readhighbound(this), target, stream);
  }

  // optional bool writeInProgress = 7 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_writeinprogress(), target);
  }

  // optional int32 writeErrorCode = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_writeerrorcode(), target);
  }

  // optional fixed64 writeClient = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_writeclient(), target);
  }

  // optional sfixed64 successfulReadTime = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_successfulreadtime(), target);
  }

  // optional sfixed64 writeRequestTime = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(11, this->_internal_writerequesttime(), target);
  }

  // optional sfixed64 successfulWriteTime = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_successfulwritetime(), target);
  }

  // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(13, this->_internal_unsuccessfulwritetime(), target);
  }

  // optional bool setSOR = 14 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_setsor(), target);
  }

  // optional bool writingDisabled = 15 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_writingdisabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalState)
  return target;
}

size_t TuningSignalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .Proto.TuningValue value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .Proto.TuningValue readLowBound = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *readlowbound_);
    }

    // optional .Proto.TuningValue readHighBound = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *readhighbound_);
    }

    // optional fixed64 signalHash = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 error = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 writeErrorCode = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_writeerrorcode());
    }

    // optional fixed64 writeClient = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 successfulReadTime = 10 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional sfixed64 writeRequestTime = 11 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 successfulWriteTime = 12 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional bool valid = 3 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool writeInProgress = 7 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool setSOR = 14 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool writingDisabled = 15 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalState)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalState)
    MergeFrom(*source);
  }
}

void TuningSignalState::MergeFrom(const TuningSignalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_value()->::Proto::TuningValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_readlowbound()->::Proto::TuningValue::MergeFrom(from._internal_readlowbound());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_readhighbound()->::Proto::TuningValue::MergeFrom(from._internal_readhighbound());
    }
    if (cached_has_bits & 0x00000008u) {
      signalhash_ = from.signalhash_;
    }
    if (cached_has_bits & 0x00000010u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000020u) {
      writeerrorcode_ = from.writeerrorcode_;
    }
    if (cached_has_bits & 0x00000040u) {
      writeclient_ = from.writeclient_;
    }
    if (cached_has_bits & 0x00000080u) {
      successfulreadtime_ = from.successfulreadtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      writerequesttime_ = from.writerequesttime_;
    }
    if (cached_has_bits & 0x00000200u) {
      successfulwritetime_ = from.successfulwritetime_;
    }
    if (cached_has_bits & 0x00000400u) {
      unsuccessfulwritetime_ = from.unsuccessfulwritetime_;
    }
    if (cached_has_bits & 0x00000800u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      writeinprogress_ = from.writeinprogress_;
    }
    if (cached_has_bits & 0x00002000u) {
      setsor_ = from.setsor_;
    }
    if (cached_has_bits & 0x00004000u) {
      writingdisabled_ = from.writingdisabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TuningSignalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalState::CopyFrom(const TuningSignalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalState::IsInitialized() const {
  return true;
}

void TuningSignalState::InternalSwap(TuningSignalState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuningSignalState, writingdisabled_)
      + sizeof(TuningSignalState::writingdisabled_)
      - PROTOBUF_FIELD_OFFSET(TuningSignalState, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalsReadReply::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSignalsReadReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TuningSignalsReadReply::TuningSignalsReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tuningsignalstate_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalsReadReply)
}
TuningSignalsReadReply::TuningSignalsReadReply(const TuningSignalsReadReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuningsignalstate_(from.tuningsignalstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalsReadReply)
}

void TuningSignalsReadReply::SharedCtor() {
error_ = 0;
}

TuningSignalsReadReply::~TuningSignalsReadReply() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalsReadReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalsReadReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalsReadReply::ArenaDtor(void* object) {
  TuningSignalsReadReply* _this = reinterpret_cast< TuningSignalsReadReply* >(object);
  (void)_this;
}
void TuningSignalsReadReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalsReadReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalsReadReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalsReadReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuningsignalstate_.Clear();
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalsReadReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.TuningSignalState tuningSignalState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuningsignalstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalsReadReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalsReadReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Network.TuningSignalState tuningSignalState = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuningsignalstate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tuningsignalstate(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalsReadReply)
  return target;
}

size_t TuningSignalsReadReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalsReadReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.TuningSignalState tuningSignalState = 2;
  total_size += 1UL * this->_internal_tuningsignalstate_size();
  for (const auto& msg : this->tuningsignalstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalsReadReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalsReadReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalsReadReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalsReadReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalsReadReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalsReadReply)
    MergeFrom(*source);
  }
}

void TuningSignalsReadReply::MergeFrom(const TuningSignalsReadReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalsReadReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuningsignalstate_.MergeFrom(from.tuningsignalstate_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void TuningSignalsReadReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalsReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsReadReply::CopyFrom(const TuningSignalsReadReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalsReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsReadReply::IsInitialized() const {
  return true;
}

void TuningSignalsReadReply::InternalSwap(TuningSignalsReadReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuningsignalstate_.InternalSwap(&other->tuningsignalstate_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalsReadReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningWriteCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningWriteCommand>()._has_bits_);
  static void set_has_signalhash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::TuningValue& value(const TuningWriteCommand* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Proto::TuningValue&
TuningWriteCommand::_Internal::value(const TuningWriteCommand* msg) {
  return *msg->value_;
}
void TuningWriteCommand::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TuningWriteCommand::TuningWriteCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningWriteCommand)
}
TuningWriteCommand::TuningWriteCommand(const TuningWriteCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::Proto::TuningValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  signalhash_ = from.signalhash_;
  // @@protoc_insertion_point(copy_constructor:Network.TuningWriteCommand)
}

void TuningWriteCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signalhash_) -
    reinterpret_cast<char*>(&value_)) + sizeof(signalhash_));
}

TuningWriteCommand::~TuningWriteCommand() {
  // @@protoc_insertion_point(destructor:Network.TuningWriteCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningWriteCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void TuningWriteCommand::ArenaDtor(void* object) {
  TuningWriteCommand* _this = reinterpret_cast< TuningWriteCommand* >(object);
  (void)_this;
}
void TuningWriteCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningWriteCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningWriteCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningWriteCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  signalhash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningWriteCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 signalHash = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_signalhash(&has_bits);
          signalhash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningWriteCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningWriteCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 signalHash = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalhash(), target);
  }

  // optional .Proto.TuningValue value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningWriteCommand)
  return target;
}

size_t TuningWriteCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningWriteCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Proto.TuningValue value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional uint64 signalHash = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_signalhash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningWriteCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningWriteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningWriteCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningWriteCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningWriteCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningWriteCommand)
    MergeFrom(*source);
  }
}

void TuningWriteCommand::MergeFrom(const TuningWriteCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningWriteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_value()->::Proto::TuningValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      signalhash_ = from.signalhash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TuningWriteCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningWriteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningWriteCommand::CopyFrom(const TuningWriteCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningWriteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningWriteCommand::IsInitialized() const {
  return true;
}

void TuningWriteCommand::InternalSwap(TuningWriteCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuningWriteCommand, signalhash_)
      + sizeof(TuningWriteCommand::signalhash_)
      - PROTOBUF_FIELD_OFFSET(TuningWriteCommand, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningWriteCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalsWrite::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSignalsWrite>()._has_bits_);
  static void set_has_autoapply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TuningSignalsWrite::TuningSignalsWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalsWrite)
}
TuningSignalsWrite::TuningSignalsWrite(const TuningSignalsWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  autoapply_ = from.autoapply_;
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalsWrite)
}

void TuningSignalsWrite::SharedCtor() {
autoapply_ = false;
}

TuningSignalsWrite::~TuningSignalsWrite() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalsWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalsWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalsWrite::ArenaDtor(void* object) {
  TuningSignalsWrite* _this = reinterpret_cast< TuningSignalsWrite* >(object);
  (void)_this;
}
void TuningSignalsWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalsWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalsWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalsWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  autoapply_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalsWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool autoApply = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_autoapply(&has_bits);
          autoapply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.TuningWriteCommand commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalsWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalsWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool autoApply = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_autoapply(), target);
  }

  // repeated .Network.TuningWriteCommand commands = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalsWrite)
  return target;
}

size_t TuningSignalsWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalsWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.TuningWriteCommand commands = 3;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool autoApply = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalsWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalsWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalsWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalsWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalsWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalsWrite)
    MergeFrom(*source);
  }
}

void TuningSignalsWrite::MergeFrom(const TuningSignalsWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalsWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  if (from._internal_has_autoapply()) {
    _internal_set_autoapply(from._internal_autoapply());
  }
}

void TuningSignalsWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalsWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsWrite::CopyFrom(const TuningSignalsWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalsWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsWrite::IsInitialized() const {
  return true;
}

void TuningSignalsWrite::InternalSwap(TuningSignalsWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commands_.InternalSwap(&other->commands_);
  swap(autoapply_, other->autoapply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalsWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalWriteResult::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSignalWriteResult>()._has_bits_);
  static void set_has_signalhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TuningSignalWriteResult::TuningSignalWriteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalWriteResult)
}
TuningSignalWriteResult::TuningSignalWriteResult(const TuningSignalWriteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&signalhash_, &from.signalhash_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&signalhash_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalWriteResult)
}

void TuningSignalWriteResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signalhash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&signalhash_)) + sizeof(error_));
}

TuningSignalWriteResult::~TuningSignalWriteResult() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalWriteResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalWriteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalWriteResult::ArenaDtor(void* object) {
  TuningSignalWriteResult* _this = reinterpret_cast< TuningSignalWriteResult* >(object);
  (void)_this;
}
void TuningSignalWriteResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalWriteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalWriteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalWriteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&signalhash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&signalhash_)) + sizeof(error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalWriteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 signalHash = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_signalhash(&has_bits);
          signalhash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 error = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalWriteResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalWriteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 signalHash = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalhash(), target);
  }

  // optional int32 error = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalWriteResult)
  return target;
}

size_t TuningSignalWriteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalWriteResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 signalHash = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_signalhash());
    }

    // optional int32 error = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalWriteResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalWriteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalWriteResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalWriteResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalWriteResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalWriteResult)
    MergeFrom(*source);
  }
}

void TuningSignalWriteResult::MergeFrom(const TuningSignalWriteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalWriteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signalhash_ = from.signalhash_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TuningSignalWriteResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalWriteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalWriteResult::CopyFrom(const TuningSignalWriteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalWriteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalWriteResult::IsInitialized() const {
  return true;
}

void TuningSignalWriteResult::InternalSwap(TuningSignalWriteResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuningSignalWriteResult, error_)
      + sizeof(TuningSignalWriteResult::error_)
      - PROTOBUF_FIELD_OFFSET(TuningSignalWriteResult, signalhash_)>(
          reinterpret_cast<char*>(&signalhash_),
          reinterpret_cast<char*>(&other->signalhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalWriteResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalsWriteReply::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSignalsWriteReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TuningSignalsWriteReply::TuningSignalsWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  writeresult_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalsWriteReply)
}
TuningSignalsWriteReply::TuningSignalsWriteReply(const TuningSignalsWriteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      writeresult_(from.writeresult_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalsWriteReply)
}

void TuningSignalsWriteReply::SharedCtor() {
error_ = 0;
}

TuningSignalsWriteReply::~TuningSignalsWriteReply() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalsWriteReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalsWriteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalsWriteReply::ArenaDtor(void* object) {
  TuningSignalsWriteReply* _this = reinterpret_cast< TuningSignalsWriteReply* >(object);
  (void)_this;
}
void TuningSignalsWriteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalsWriteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalsWriteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalsWriteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writeresult_.Clear();
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalsWriteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Network.TuningSignalWriteResult writeResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writeresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalsWriteReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalsWriteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated .Network.TuningSignalWriteResult writeResult = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writeresult_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_writeresult(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalsWriteReply)
  return target;
}

size_t TuningSignalsWriteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalsWriteReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Network.TuningSignalWriteResult writeResult = 2;
  total_size += 1UL * this->_internal_writeresult_size();
  for (const auto& msg : this->writeresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalsWriteReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalsWriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalsWriteReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalsWriteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalsWriteReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalsWriteReply)
    MergeFrom(*source);
  }
}

void TuningSignalsWriteReply::MergeFrom(const TuningSignalsWriteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalsWriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  writeresult_.MergeFrom(from.writeresult_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void TuningSignalsWriteReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalsWriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsWriteReply::CopyFrom(const TuningSignalsWriteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalsWriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsWriteReply::IsInitialized() const {
  return true;
}

void TuningSignalsWriteReply::InternalSwap(TuningSignalsWriteReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  writeresult_.InternalSwap(&other->writeresult_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalsWriteReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalsApply::_Internal {
 public:
};

TuningSignalsApply::TuningSignalsApply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalsApply)
}
TuningSignalsApply::TuningSignalsApply(const TuningSignalsApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalsApply)
}

void TuningSignalsApply::SharedCtor() {
}

TuningSignalsApply::~TuningSignalsApply() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalsApply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalsApply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalsApply::ArenaDtor(void* object) {
  TuningSignalsApply* _this = reinterpret_cast< TuningSignalsApply* >(object);
  (void)_this;
}
void TuningSignalsApply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalsApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalsApply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalsApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalsApply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalsApply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalsApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalsApply)
  return target;
}

size_t TuningSignalsApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalsApply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalsApply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalsApply)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalsApply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalsApply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalsApply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalsApply)
    MergeFrom(*source);
  }
}

void TuningSignalsApply::MergeFrom(const TuningSignalsApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalsApply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TuningSignalsApply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalsApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsApply::CopyFrom(const TuningSignalsApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalsApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsApply::IsInitialized() const {
  return true;
}

void TuningSignalsApply::InternalSwap(TuningSignalsApply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalsApply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningSignalsApplyReply::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningSignalsApplyReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TuningSignalsApplyReply::TuningSignalsApplyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.TuningSignalsApplyReply)
}
TuningSignalsApplyReply::TuningSignalsApplyReply(const TuningSignalsApplyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.TuningSignalsApplyReply)
}

void TuningSignalsApplyReply::SharedCtor() {
error_ = 0;
}

TuningSignalsApplyReply::~TuningSignalsApplyReply() {
  // @@protoc_insertion_point(destructor:Network.TuningSignalsApplyReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningSignalsApplyReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningSignalsApplyReply::ArenaDtor(void* object) {
  TuningSignalsApplyReply* _this = reinterpret_cast< TuningSignalsApplyReply* >(object);
  (void)_this;
}
void TuningSignalsApplyReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningSignalsApplyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningSignalsApplyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.TuningSignalsApplyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningSignalsApplyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningSignalsApplyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.TuningSignalsApplyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.TuningSignalsApplyReply)
  return target;
}

size_t TuningSignalsApplyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.TuningSignalsApplyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningSignalsApplyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.TuningSignalsApplyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningSignalsApplyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningSignalsApplyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.TuningSignalsApplyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.TuningSignalsApplyReply)
    MergeFrom(*source);
  }
}

void TuningSignalsApplyReply::MergeFrom(const TuningSignalsApplyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.TuningSignalsApplyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void TuningSignalsApplyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.TuningSignalsApplyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsApplyReply::CopyFrom(const TuningSignalsApplyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.TuningSignalsApplyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsApplyReply::IsInitialized() const {
  return true;
}

void TuningSignalsApplyReply::InternalSwap(TuningSignalsApplyReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningSignalsApplyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataSourceWrite::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceWrite>()._has_bits_);
  static void set_has_sourceequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataSourceWrite::DataSourceWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.DataSourceWrite)
}
DataSourceWrite::DataSourceWrite(const DataSourceWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourceequipmentid()) {
    sourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceequipmentid(), 
      GetArena());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:Network.DataSourceWrite)
}

void DataSourceWrite::SharedCtor() {
sourceequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_ = false;
}

DataSourceWrite::~DataSourceWrite() {
  // @@protoc_insertion_point(destructor:Network.DataSourceWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataSourceWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataSourceWrite::ArenaDtor(void* object) {
  DataSourceWrite* _this = reinterpret_cast< DataSourceWrite* >(object);
  (void)_this;
}
void DataSourceWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataSourceWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataSourceWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.DataSourceWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sourceequipmentid_.ClearNonDefaultToEmpty();
  }
  state_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSourceWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sourceEquipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourceequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.DataSourceWrite.sourceEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool state = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSourceWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.DataSourceWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sourceEquipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceequipmentid().data(), static_cast<int>(this->_internal_sourceequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.DataSourceWrite.sourceEquipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourceequipmentid(), target);
  }

  // optional bool state = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.DataSourceWrite)
  return target;
}

size_t DataSourceWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.DataSourceWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sourceEquipmentID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourceequipmentid());
    }

    // optional bool state = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.DataSourceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSourceWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.DataSourceWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.DataSourceWrite)
    MergeFrom(*source);
  }
}

void DataSourceWrite::MergeFrom(const DataSourceWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.DataSourceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sourceequipmentid(from._internal_sourceequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSourceWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.DataSourceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceWrite::CopyFrom(const DataSourceWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.DataSourceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceWrite::IsInitialized() const {
  return true;
}

void DataSourceWrite::InternalSwap(DataSourceWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sourceequipmentid_.Swap(&other->sourceequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSourceWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataSourceWriteReply::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceWriteReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataSourceWriteReply::DataSourceWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.DataSourceWriteReply)
}
DataSourceWriteReply::DataSourceWriteReply(const DataSourceWriteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.DataSourceWriteReply)
}

void DataSourceWriteReply::SharedCtor() {
error_ = 0;
}

DataSourceWriteReply::~DataSourceWriteReply() {
  // @@protoc_insertion_point(destructor:Network.DataSourceWriteReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataSourceWriteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataSourceWriteReply::ArenaDtor(void* object) {
  DataSourceWriteReply* _this = reinterpret_cast< DataSourceWriteReply* >(object);
  (void)_this;
}
void DataSourceWriteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataSourceWriteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataSourceWriteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.DataSourceWriteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSourceWriteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSourceWriteReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.DataSourceWriteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.DataSourceWriteReply)
  return target;
}

size_t DataSourceWriteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.DataSourceWriteReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceWriteReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.DataSourceWriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceWriteReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSourceWriteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.DataSourceWriteReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.DataSourceWriteReply)
    MergeFrom(*source);
  }
}

void DataSourceWriteReply::MergeFrom(const DataSourceWriteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.DataSourceWriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void DataSourceWriteReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.DataSourceWriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceWriteReply::CopyFrom(const DataSourceWriteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.DataSourceWriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceWriteReply::IsInitialized() const {
  return true;
}

void DataSourceWriteReply::InternalSwap(DataSourceWriteReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSourceWriteReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PacketSourceExit::_Internal {
 public:
};

PacketSourceExit::PacketSourceExit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.PacketSourceExit)
}
PacketSourceExit::PacketSourceExit(const PacketSourceExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.PacketSourceExit)
}

void PacketSourceExit::SharedCtor() {
}

PacketSourceExit::~PacketSourceExit() {
  // @@protoc_insertion_point(destructor:Network.PacketSourceExit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketSourceExit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PacketSourceExit::ArenaDtor(void* object) {
  PacketSourceExit* _this = reinterpret_cast< PacketSourceExit* >(object);
  (void)_this;
}
void PacketSourceExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketSourceExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketSourceExit::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.PacketSourceExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketSourceExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketSourceExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.PacketSourceExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.PacketSourceExit)
  return target;
}

size_t PacketSourceExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.PacketSourceExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketSourceExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.PacketSourceExit)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketSourceExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketSourceExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.PacketSourceExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.PacketSourceExit)
    MergeFrom(*source);
  }
}

void PacketSourceExit::MergeFrom(const PacketSourceExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.PacketSourceExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PacketSourceExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.PacketSourceExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketSourceExit::CopyFrom(const PacketSourceExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.PacketSourceExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketSourceExit::IsInitialized() const {
  return true;
}

void PacketSourceExit::InternalSwap(PacketSourceExit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketSourceExit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PacketSourceExitReply::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketSourceExitReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PacketSourceExitReply::PacketSourceExitReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.PacketSourceExitReply)
}
PacketSourceExitReply::PacketSourceExitReply(const PacketSourceExitReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.PacketSourceExitReply)
}

void PacketSourceExitReply::SharedCtor() {
error_ = 0;
}

PacketSourceExitReply::~PacketSourceExitReply() {
  // @@protoc_insertion_point(destructor:Network.PacketSourceExitReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketSourceExitReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PacketSourceExitReply::ArenaDtor(void* object) {
  PacketSourceExitReply* _this = reinterpret_cast< PacketSourceExitReply* >(object);
  (void)_this;
}
void PacketSourceExitReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketSourceExitReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketSourceExitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.PacketSourceExitReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketSourceExitReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketSourceExitReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.PacketSourceExitReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.PacketSourceExitReply)
  return target;
}

size_t PacketSourceExitReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.PacketSourceExitReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 error = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketSourceExitReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.PacketSourceExitReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketSourceExitReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketSourceExitReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.PacketSourceExitReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.PacketSourceExitReply)
    MergeFrom(*source);
  }
}

void PacketSourceExitReply::MergeFrom(const PacketSourceExitReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.PacketSourceExitReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void PacketSourceExitReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.PacketSourceExitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketSourceExitReply::CopyFrom(const PacketSourceExitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.PacketSourceExitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketSourceExitReply::IsInitialized() const {
  return true;
}

void PacketSourceExitReply::InternalSwap(PacketSourceExitReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketSourceExitReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SaveAppSignalsStatesToArchiveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveAppSignalsStatesToArchiveRequest>()._has_bits_);
  static void set_has_clientequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SaveAppSignalsStatesToArchiveRequest::clear_appsignalstates() {
  appsignalstates_.Clear();
}
SaveAppSignalsStatesToArchiveRequest::SaveAppSignalsStatesToArchiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignalstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.SaveAppSignalsStatesToArchiveRequest)
}
SaveAppSignalsStatesToArchiveRequest::SaveAppSignalsStatesToArchiveRequest(const SaveAppSignalsStatesToArchiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignalstates_(from.appsignalstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientequipmentid()) {
    clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientequipmentid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Network.SaveAppSignalsStatesToArchiveRequest)
}

void SaveAppSignalsStatesToArchiveRequest::SharedCtor() {
clientequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveAppSignalsStatesToArchiveRequest::~SaveAppSignalsStatesToArchiveRequest() {
  // @@protoc_insertion_point(destructor:Network.SaveAppSignalsStatesToArchiveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveAppSignalsStatesToArchiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveAppSignalsStatesToArchiveRequest::ArenaDtor(void* object) {
  SaveAppSignalsStatesToArchiveRequest* _this = reinterpret_cast< SaveAppSignalsStatesToArchiveRequest* >(object);
  (void)_this;
}
void SaveAppSignalsStatesToArchiveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveAppSignalsStatesToArchiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveAppSignalsStatesToArchiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.SaveAppSignalsStatesToArchiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignalstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientequipmentid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveAppSignalsStatesToArchiveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clientEquipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignalState appSignalStates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignalstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveAppSignalsStatesToArchiveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.SaveAppSignalsStatesToArchiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clientEquipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientequipmentid().data(), static_cast<int>(this->_internal_clientequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientequipmentid(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignalstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_appsignalstates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.SaveAppSignalsStatesToArchiveRequest)
  return target;
}

size_t SaveAppSignalsStatesToArchiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.SaveAppSignalsStatesToArchiveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignalState appSignalStates = 2;
  total_size += 1UL * this->_internal_appsignalstates_size();
  for (const auto& msg : this->appsignalstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string clientEquipmentID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientequipmentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveAppSignalsStatesToArchiveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.SaveAppSignalsStatesToArchiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveAppSignalsStatesToArchiveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveAppSignalsStatesToArchiveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.SaveAppSignalsStatesToArchiveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.SaveAppSignalsStatesToArchiveRequest)
    MergeFrom(*source);
  }
}

void SaveAppSignalsStatesToArchiveRequest::MergeFrom(const SaveAppSignalsStatesToArchiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.SaveAppSignalsStatesToArchiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignalstates_.MergeFrom(from.appsignalstates_);
  if (from._internal_has_clientequipmentid()) {
    _internal_set_clientequipmentid(from._internal_clientequipmentid());
  }
}

void SaveAppSignalsStatesToArchiveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.SaveAppSignalsStatesToArchiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveAppSignalsStatesToArchiveRequest::CopyFrom(const SaveAppSignalsStatesToArchiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.SaveAppSignalsStatesToArchiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveAppSignalsStatesToArchiveRequest::IsInitialized() const {
  return true;
}

void SaveAppSignalsStatesToArchiveRequest::InternalSwap(SaveAppSignalsStatesToArchiveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalstates_.InternalSwap(&other->appsignalstates_);
  clientequipmentid_.Swap(&other->clientequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveAppSignalsStatesToArchiveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SaveAppSignalsStatesToArchiveReply::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveAppSignalsStatesToArchiveReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_archerror(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SaveAppSignalsStatesToArchiveReply::SaveAppSignalsStatesToArchiveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.SaveAppSignalsStatesToArchiveReply)
}
SaveAppSignalsStatesToArchiveReply::SaveAppSignalsStatesToArchiveReply(const SaveAppSignalsStatesToArchiveReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&archerror_) -
    reinterpret_cast<char*>(&error_)) + sizeof(archerror_));
  // @@protoc_insertion_point(copy_constructor:Network.SaveAppSignalsStatesToArchiveReply)
}

void SaveAppSignalsStatesToArchiveReply::SharedCtor() {
error_ = 0;
archerror_ = 100;
}

SaveAppSignalsStatesToArchiveReply::~SaveAppSignalsStatesToArchiveReply() {
  // @@protoc_insertion_point(destructor:Network.SaveAppSignalsStatesToArchiveReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveAppSignalsStatesToArchiveReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SaveAppSignalsStatesToArchiveReply::ArenaDtor(void* object) {
  SaveAppSignalsStatesToArchiveReply* _this = reinterpret_cast< SaveAppSignalsStatesToArchiveReply* >(object);
  (void)_this;
}
void SaveAppSignalsStatesToArchiveReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveAppSignalsStatesToArchiveReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveAppSignalsStatesToArchiveReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.SaveAppSignalsStatesToArchiveReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    archerror_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveAppSignalsStatesToArchiveReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 archError = 2 [default = 100];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_archerror(&has_bits);
          archerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveAppSignalsStatesToArchiveReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.SaveAppSignalsStatesToArchiveReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_archerror(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.SaveAppSignalsStatesToArchiveReply)
  return target;
}

size_t SaveAppSignalsStatesToArchiveReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.SaveAppSignalsStatesToArchiveReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 archError = 2 [default = 100];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_archerror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveAppSignalsStatesToArchiveReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.SaveAppSignalsStatesToArchiveReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveAppSignalsStatesToArchiveReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveAppSignalsStatesToArchiveReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.SaveAppSignalsStatesToArchiveReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.SaveAppSignalsStatesToArchiveReply)
    MergeFrom(*source);
  }
}

void SaveAppSignalsStatesToArchiveReply::MergeFrom(const SaveAppSignalsStatesToArchiveReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.SaveAppSignalsStatesToArchiveReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      archerror_ = from.archerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SaveAppSignalsStatesToArchiveReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.SaveAppSignalsStatesToArchiveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveAppSignalsStatesToArchiveReply::CopyFrom(const SaveAppSignalsStatesToArchiveReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.SaveAppSignalsStatesToArchiveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveAppSignalsStatesToArchiveReply::IsInitialized() const {
  return true;
}

void SaveAppSignalsStatesToArchiveReply::InternalSwap(SaveAppSignalsStatesToArchiveReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(archerror_, other->archerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveAppSignalsStatesToArchiveReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStatesFromArchiveStartRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStatesFromArchiveStartRequest>()._has_bits_);
  static void set_has_clientequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_removeperiodic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GetAppSignalStatesFromArchiveStartRequest::GetAppSignalStatesFromArchiveStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStatesFromArchiveStartRequest)
}
GetAppSignalStatesFromArchiveStartRequest::GetAppSignalStatesFromArchiveStartRequest(const GetAppSignalStatesFromArchiveStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signalhashes_(from.signalhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientequipmentid()) {
    clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientequipmentid(), 
      GetArena());
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&removeperiodic_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(removeperiodic_));
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStatesFromArchiveStartRequest)
}

void GetAppSignalStatesFromArchiveStartRequest::SharedCtor() {
clientequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&starttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
timetype_ = 1;
removeperiodic_ = true;
}

GetAppSignalStatesFromArchiveStartRequest::~GetAppSignalStatesFromArchiveStartRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStatesFromArchiveStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStatesFromArchiveStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAppSignalStatesFromArchiveStartRequest::ArenaDtor(void* object) {
  GetAppSignalStatesFromArchiveStartRequest* _this = reinterpret_cast< GetAppSignalStatesFromArchiveStartRequest* >(object);
  (void)_this;
}
void GetAppSignalStatesFromArchiveStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStatesFromArchiveStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStatesFromArchiveStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalhashes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientequipmentid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
    timetype_ = 1;
    removeperiodic_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStatesFromArchiveStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clientEquipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timeType = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timetype(&has_bits);
          timetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 startTime = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 endTime = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated uint64 signalHashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_signalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool removePeriodic = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_removeperiodic(&has_bits);
          removeperiodic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStatesFromArchiveStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clientEquipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientequipmentid().data(), static_cast<int>(this->_internal_clientequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientequipmentid(), target);
  }

  // optional int32 timeType = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timetype(), target);
  }

  // optional sfixed64 startTime = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_starttime(), target);
  }

  // optional sfixed64 endTime = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(4, this->_internal_endtime(), target);
  }

  // repeated uint64 signalHashes = 5;
  for (int i = 0, n = this->_internal_signalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_signalhashes(i), target);
  }

  // optional bool removePeriodic = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_removeperiodic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStatesFromArchiveStartRequest)
  return target;
}

size_t GetAppSignalStatesFromArchiveStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 signalHashes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->signalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalhashes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string clientEquipmentID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clientequipmentid());
    }

    // optional sfixed64 startTime = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 endTime = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 timeType = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timetype());
    }

    // optional bool removePeriodic = 6 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStatesFromArchiveStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStatesFromArchiveStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStatesFromArchiveStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStatesFromArchiveStartRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveStartRequest::MergeFrom(const GetAppSignalStatesFromArchiveStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalhashes_.MergeFrom(from.signalhashes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clientequipmentid(from._internal_clientequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      timetype_ = from.timetype_;
    }
    if (cached_has_bits & 0x00000010u) {
      removeperiodic_ = from.removeperiodic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAppSignalStatesFromArchiveStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveStartRequest::CopyFrom(const GetAppSignalStatesFromArchiveStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStatesFromArchiveStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveStartRequest::IsInitialized() const {
  return true;
}

void GetAppSignalStatesFromArchiveStartRequest::InternalSwap(GetAppSignalStatesFromArchiveStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalhashes_.InternalSwap(&other->signalhashes_);
  clientequipmentid_.Swap(&other->clientequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, endtime_)
      + sizeof(GetAppSignalStatesFromArchiveStartRequest::endtime_)
      - PROTOBUF_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
  swap(timetype_, other->timetype_);
  swap(removeperiodic_, other->removeperiodic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStatesFromArchiveStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStatesFromArchiveStartReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStatesFromArchiveStartReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_archerror(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_errorstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GetAppSignalStatesFromArchiveStartReply::GetAppSignalStatesFromArchiveStartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStatesFromArchiveStartReply)
}
GetAppSignalStatesFromArchiveStartReply::GetAppSignalStatesFromArchiveStartReply(const GetAppSignalStatesFromArchiveStartReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errorstring()) {
    errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorstring(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&archerror_) -
    reinterpret_cast<char*>(&error_)) + sizeof(archerror_));
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStatesFromArchiveStartReply)
}

void GetAppSignalStatesFromArchiveStartReply::SharedCtor() {
errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&error_)) + sizeof(requestid_));
archerror_ = 100;
}

GetAppSignalStatesFromArchiveStartReply::~GetAppSignalStatesFromArchiveStartReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStatesFromArchiveStartReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStatesFromArchiveStartReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errorstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAppSignalStatesFromArchiveStartReply::ArenaDtor(void* object) {
  GetAppSignalStatesFromArchiveStartReply* _this = reinterpret_cast< GetAppSignalStatesFromArchiveStartReply* >(object);
  (void)_this;
}
void GetAppSignalStatesFromArchiveStartReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStatesFromArchiveStartReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStatesFromArchiveStartReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStatesFromArchiveStartReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errorstring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&error_)) + sizeof(requestid_));
    archerror_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStatesFromArchiveStartReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 archError = 2 [default = 100];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_archerror(&has_bits);
          archerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 requestID = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errorString = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_errorstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetAppSignalStatesFromArchiveStartReply.errorString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStatesFromArchiveStartReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStatesFromArchiveStartReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_archerror(), target);
  }

  // optional uint32 requestID = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_requestid(), target);
  }

  // optional string errorString = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errorstring().data(), static_cast<int>(this->_internal_errorstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetAppSignalStatesFromArchiveStartReply.errorString");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_errorstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStatesFromArchiveStartReply)
  return target;
}

size_t GetAppSignalStatesFromArchiveStartReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStatesFromArchiveStartReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string errorString = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errorstring());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional uint32 requestID = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_requestid());
    }

    // optional int32 archError = 2 [default = 100];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_archerror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStatesFromArchiveStartReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStatesFromArchiveStartReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveStartReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStatesFromArchiveStartReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStatesFromArchiveStartReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStatesFromArchiveStartReply)
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveStartReply::MergeFrom(const GetAppSignalStatesFromArchiveStartReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStatesFromArchiveStartReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errorstring(from._internal_errorstring());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      archerror_ = from.archerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAppSignalStatesFromArchiveStartReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStatesFromArchiveStartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveStartReply::CopyFrom(const GetAppSignalStatesFromArchiveStartReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStatesFromArchiveStartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveStartReply::IsInitialized() const {
  return true;
}

void GetAppSignalStatesFromArchiveStartReply::InternalSwap(GetAppSignalStatesFromArchiveStartReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errorstring_.Swap(&other->errorstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, requestid_)
      + sizeof(GetAppSignalStatesFromArchiveStartReply::requestid_)
      - PROTOBUF_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
  swap(archerror_, other->archerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStatesFromArchiveStartReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStatesFromArchiveNextRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStatesFromArchiveNextRequest>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAppSignalStatesFromArchiveNextRequest::GetAppSignalStatesFromArchiveNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStatesFromArchiveNextRequest)
}
GetAppSignalStatesFromArchiveNextRequest::GetAppSignalStatesFromArchiveNextRequest(const GetAppSignalStatesFromArchiveNextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStatesFromArchiveNextRequest)
}

void GetAppSignalStatesFromArchiveNextRequest::SharedCtor() {
requestid_ = 0u;
}

GetAppSignalStatesFromArchiveNextRequest::~GetAppSignalStatesFromArchiveNextRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStatesFromArchiveNextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStatesFromArchiveNextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalStatesFromArchiveNextRequest::ArenaDtor(void* object) {
  GetAppSignalStatesFromArchiveNextRequest* _this = reinterpret_cast< GetAppSignalStatesFromArchiveNextRequest* >(object);
  (void)_this;
}
void GetAppSignalStatesFromArchiveNextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStatesFromArchiveNextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStatesFromArchiveNextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStatesFromArchiveNextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 requestID = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStatesFromArchiveNextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 requestID = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStatesFromArchiveNextRequest)
  return target;
}

size_t GetAppSignalStatesFromArchiveNextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 requestID = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStatesFromArchiveNextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveNextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStatesFromArchiveNextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStatesFromArchiveNextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStatesFromArchiveNextRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveNextRequest::MergeFrom(const GetAppSignalStatesFromArchiveNextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _internal_set_requestid(from._internal_requestid());
  }
}

void GetAppSignalStatesFromArchiveNextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveNextRequest::CopyFrom(const GetAppSignalStatesFromArchiveNextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStatesFromArchiveNextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveNextRequest::IsInitialized() const {
  return true;
}

void GetAppSignalStatesFromArchiveNextRequest::InternalSwap(GetAppSignalStatesFromArchiveNextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStatesFromArchiveNextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStatesFromArchiveNextReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStatesFromArchiveNextReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_archerror(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errorstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dataready(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_totalstatescount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sentstatescount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_statesinpartcount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_islastpart(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

void GetAppSignalStatesFromArchiveNextReply::clear_appsignalstates() {
  appsignalstates_.Clear();
}
GetAppSignalStatesFromArchiveNextReply::GetAppSignalStatesFromArchiveNextReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignalstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStatesFromArchiveNextReply)
}
GetAppSignalStatesFromArchiveNextReply::GetAppSignalStatesFromArchiveNextReply(const GetAppSignalStatesFromArchiveNextReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignalstates_(from.appsignalstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errorstring()) {
    errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorstring(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&archerror_) -
    reinterpret_cast<char*>(&error_)) + sizeof(archerror_));
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStatesFromArchiveNextReply)
}

void GetAppSignalStatesFromArchiveNextReply::SharedCtor() {
errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&statesinpartcount_) -
    reinterpret_cast<char*>(&error_)) + sizeof(statesinpartcount_));
archerror_ = 100;
}

GetAppSignalStatesFromArchiveNextReply::~GetAppSignalStatesFromArchiveNextReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStatesFromArchiveNextReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStatesFromArchiveNextReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errorstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAppSignalStatesFromArchiveNextReply::ArenaDtor(void* object) {
  GetAppSignalStatesFromArchiveNextReply* _this = reinterpret_cast< GetAppSignalStatesFromArchiveNextReply* >(object);
  (void)_this;
}
void GetAppSignalStatesFromArchiveNextReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStatesFromArchiveNextReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStatesFromArchiveNextReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStatesFromArchiveNextReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignalstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errorstring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&statesinpartcount_) -
        reinterpret_cast<char*>(&error_)) + sizeof(statesinpartcount_));
  }
  archerror_ = 100;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStatesFromArchiveNextReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 archError = 2 [default = 100];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_archerror(&has_bits);
          archerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 requestID = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dataReady = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dataready(&has_bits);
          dataready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 totalStatesCount = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_totalstatescount(&has_bits);
          totalstatescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sentStatesCount = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sentstatescount(&has_bits);
          sentstatescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 statesInPartCount = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_statesinpartcount(&has_bits);
          statesinpartcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isLastPart = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_islastpart(&has_bits);
          islastpart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignalState appSignalStates = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignalstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string errorString = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_errorstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetAppSignalStatesFromArchiveNextReply.errorString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStatesFromArchiveNextReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStatesFromArchiveNextReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_archerror(), target);
  }

  // optional uint32 requestID = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_requestid(), target);
  }

  // optional bool dataReady = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_dataready(), target);
  }

  // optional int32 totalStatesCount = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalstatescount(), target);
  }

  // optional int32 sentStatesCount = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sentstatescount(), target);
  }

  // optional int32 statesInPartCount = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_statesinpartcount(), target);
  }

  // optional bool isLastPart = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_islastpart(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignalstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_appsignalstates(i), target, stream);
  }

  // optional string errorString = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errorstring().data(), static_cast<int>(this->_internal_errorstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetAppSignalStatesFromArchiveNextReply.errorString");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_errorstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStatesFromArchiveNextReply)
  return target;
}

size_t GetAppSignalStatesFromArchiveNextReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStatesFromArchiveNextReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignalState appSignalStates = 9;
  total_size += 1UL * this->_internal_appsignalstates_size();
  for (const auto& msg : this->appsignalstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string errorString = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errorstring());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional uint32 requestID = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_requestid());
    }

    // optional int32 totalStatesCount = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_totalstatescount());
    }

    // optional int32 sentStatesCount = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sentstatescount());
    }

    // optional bool dataReady = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool isLastPart = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 statesInPartCount = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_statesinpartcount());
    }

  }
  // optional int32 archError = 2 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_archerror());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStatesFromArchiveNextReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStatesFromArchiveNextReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveNextReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStatesFromArchiveNextReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStatesFromArchiveNextReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStatesFromArchiveNextReply)
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveNextReply::MergeFrom(const GetAppSignalStatesFromArchiveNextReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStatesFromArchiveNextReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignalstates_.MergeFrom(from.appsignalstates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errorstring(from._internal_errorstring());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalstatescount_ = from.totalstatescount_;
    }
    if (cached_has_bits & 0x00000010u) {
      sentstatescount_ = from.sentstatescount_;
    }
    if (cached_has_bits & 0x00000020u) {
      dataready_ = from.dataready_;
    }
    if (cached_has_bits & 0x00000040u) {
      islastpart_ = from.islastpart_;
    }
    if (cached_has_bits & 0x00000080u) {
      statesinpartcount_ = from.statesinpartcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_archerror(from._internal_archerror());
  }
}

void GetAppSignalStatesFromArchiveNextReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStatesFromArchiveNextReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveNextReply::CopyFrom(const GetAppSignalStatesFromArchiveNextReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStatesFromArchiveNextReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveNextReply::IsInitialized() const {
  return true;
}

void GetAppSignalStatesFromArchiveNextReply::InternalSwap(GetAppSignalStatesFromArchiveNextReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalstates_.InternalSwap(&other->appsignalstates_);
  errorstring_.Swap(&other->errorstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, statesinpartcount_)
      + sizeof(GetAppSignalStatesFromArchiveNextReply::statesinpartcount_)
      - PROTOBUF_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
  swap(archerror_, other->archerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStatesFromArchiveNextReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStatesFromArchiveCancelRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStatesFromArchiveCancelRequest>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAppSignalStatesFromArchiveCancelRequest::GetAppSignalStatesFromArchiveCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStatesFromArchiveCancelRequest)
}
GetAppSignalStatesFromArchiveCancelRequest::GetAppSignalStatesFromArchiveCancelRequest(const GetAppSignalStatesFromArchiveCancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStatesFromArchiveCancelRequest)
}

void GetAppSignalStatesFromArchiveCancelRequest::SharedCtor() {
requestid_ = 0u;
}

GetAppSignalStatesFromArchiveCancelRequest::~GetAppSignalStatesFromArchiveCancelRequest() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStatesFromArchiveCancelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStatesFromArchiveCancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppSignalStatesFromArchiveCancelRequest::ArenaDtor(void* object) {
  GetAppSignalStatesFromArchiveCancelRequest* _this = reinterpret_cast< GetAppSignalStatesFromArchiveCancelRequest* >(object);
  (void)_this;
}
void GetAppSignalStatesFromArchiveCancelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStatesFromArchiveCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStatesFromArchiveCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStatesFromArchiveCancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 requestID = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStatesFromArchiveCancelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 requestID = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStatesFromArchiveCancelRequest)
  return target;
}

size_t GetAppSignalStatesFromArchiveCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 requestID = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStatesFromArchiveCancelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveCancelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStatesFromArchiveCancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStatesFromArchiveCancelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStatesFromArchiveCancelRequest)
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveCancelRequest::MergeFrom(const GetAppSignalStatesFromArchiveCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _internal_set_requestid(from._internal_requestid());
  }
}

void GetAppSignalStatesFromArchiveCancelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveCancelRequest::CopyFrom(const GetAppSignalStatesFromArchiveCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStatesFromArchiveCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveCancelRequest::IsInitialized() const {
  return true;
}

void GetAppSignalStatesFromArchiveCancelRequest::InternalSwap(GetAppSignalStatesFromArchiveCancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStatesFromArchiveCancelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAppSignalStatesFromArchiveCancelReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAppSignalStatesFromArchiveCancelReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_archerror(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errorstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAppSignalStatesFromArchiveCancelReply::GetAppSignalStatesFromArchiveCancelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetAppSignalStatesFromArchiveCancelReply)
}
GetAppSignalStatesFromArchiveCancelReply::GetAppSignalStatesFromArchiveCancelReply(const GetAppSignalStatesFromArchiveCancelReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errorstring()) {
    errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorstring(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&archerror_) -
    reinterpret_cast<char*>(&error_)) + sizeof(archerror_));
  // @@protoc_insertion_point(copy_constructor:Network.GetAppSignalStatesFromArchiveCancelReply)
}

void GetAppSignalStatesFromArchiveCancelReply::SharedCtor() {
errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_ = 0;
archerror_ = 100;
}

GetAppSignalStatesFromArchiveCancelReply::~GetAppSignalStatesFromArchiveCancelReply() {
  // @@protoc_insertion_point(destructor:Network.GetAppSignalStatesFromArchiveCancelReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppSignalStatesFromArchiveCancelReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errorstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAppSignalStatesFromArchiveCancelReply::ArenaDtor(void* object) {
  GetAppSignalStatesFromArchiveCancelReply* _this = reinterpret_cast< GetAppSignalStatesFromArchiveCancelReply* >(object);
  (void)_this;
}
void GetAppSignalStatesFromArchiveCancelReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppSignalStatesFromArchiveCancelReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppSignalStatesFromArchiveCancelReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errorstring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    error_ = 0;
    archerror_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppSignalStatesFromArchiveCancelReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 archError = 2 [default = 100];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_archerror(&has_bits);
          archerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errorString = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errorstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.GetAppSignalStatesFromArchiveCancelReply.errorString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppSignalStatesFromArchiveCancelReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_archerror(), target);
  }

  // optional string errorString = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errorstring().data(), static_cast<int>(this->_internal_errorstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.GetAppSignalStatesFromArchiveCancelReply.errorString");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errorstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetAppSignalStatesFromArchiveCancelReply)
  return target;
}

size_t GetAppSignalStatesFromArchiveCancelReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string errorString = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errorstring());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 archError = 2 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_archerror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppSignalStatesFromArchiveCancelReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveCancelReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppSignalStatesFromArchiveCancelReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetAppSignalStatesFromArchiveCancelReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetAppSignalStatesFromArchiveCancelReply)
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveCancelReply::MergeFrom(const GetAppSignalStatesFromArchiveCancelReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errorstring(from._internal_errorstring());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      archerror_ = from.archerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAppSignalStatesFromArchiveCancelReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveCancelReply::CopyFrom(const GetAppSignalStatesFromArchiveCancelReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetAppSignalStatesFromArchiveCancelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveCancelReply::IsInitialized() const {
  return true;
}

void GetAppSignalStatesFromArchiveCancelReply::InternalSwap(GetAppSignalStatesFromArchiveCancelReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errorstring_.Swap(&other->errorstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
  swap(archerror_, other->archerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppSignalStatesFromArchiveCancelReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RtTrendsManagementRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RtTrendsManagementRequest>()._has_bits_);
  static void set_has_clientequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampleperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RtTrendsManagementRequest::RtTrendsManagementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appendsignalhashes_(arena),
  deletesignalhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.RtTrendsManagementRequest)
}
RtTrendsManagementRequest::RtTrendsManagementRequest(const RtTrendsManagementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appendsignalhashes_(from.appendsignalhashes_),
      deletesignalhashes_(from.deletesignalhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientequipmentid()) {
    clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientequipmentid(), 
      GetArena());
  }
  sampleperiod_ = from.sampleperiod_;
  // @@protoc_insertion_point(copy_constructor:Network.RtTrendsManagementRequest)
}

void RtTrendsManagementRequest::SharedCtor() {
clientequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sampleperiod_ = 0;
}

RtTrendsManagementRequest::~RtTrendsManagementRequest() {
  // @@protoc_insertion_point(destructor:Network.RtTrendsManagementRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtTrendsManagementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtTrendsManagementRequest::ArenaDtor(void* object) {
  RtTrendsManagementRequest* _this = reinterpret_cast< RtTrendsManagementRequest* >(object);
  (void)_this;
}
void RtTrendsManagementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtTrendsManagementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtTrendsManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.RtTrendsManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appendsignalhashes_.Clear();
  deletesignalhashes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientequipmentid_.ClearNonDefaultToEmpty();
  }
  sampleperiod_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtTrendsManagementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clientEquipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.RtTrendsManagementRequest.clientEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 samplePeriod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sampleperiod(&has_bits);
          sampleperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 appendSignalHashes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appendsignalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_appendsignalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 deleteSignalHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_deletesignalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_deletesignalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtTrendsManagementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.RtTrendsManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clientEquipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientequipmentid().data(), static_cast<int>(this->_internal_clientequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.RtTrendsManagementRequest.clientEquipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientequipmentid(), target);
  }

  // optional int32 samplePeriod = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sampleperiod(), target);
  }

  // repeated uint64 appendSignalHashes = 3;
  for (int i = 0, n = this->_internal_appendsignalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_appendsignalhashes(i), target);
  }

  // repeated uint64 deleteSignalHashes = 4;
  for (int i = 0, n = this->_internal_deletesignalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_deletesignalhashes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.RtTrendsManagementRequest)
  return target;
}

size_t RtTrendsManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.RtTrendsManagementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 appendSignalHashes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->appendsignalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appendsignalhashes_size());
    total_size += data_size;
  }

  // repeated uint64 deleteSignalHashes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->deletesignalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deletesignalhashes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string clientEquipmentID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clientequipmentid());
    }

    // optional int32 samplePeriod = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sampleperiod());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtTrendsManagementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.RtTrendsManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RtTrendsManagementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtTrendsManagementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.RtTrendsManagementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.RtTrendsManagementRequest)
    MergeFrom(*source);
  }
}

void RtTrendsManagementRequest::MergeFrom(const RtTrendsManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.RtTrendsManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appendsignalhashes_.MergeFrom(from.appendsignalhashes_);
  deletesignalhashes_.MergeFrom(from.deletesignalhashes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clientequipmentid(from._internal_clientequipmentid());
    }
    if (cached_has_bits & 0x00000002u) {
      sampleperiod_ = from.sampleperiod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtTrendsManagementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.RtTrendsManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsManagementRequest::CopyFrom(const RtTrendsManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.RtTrendsManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsManagementRequest::IsInitialized() const {
  return true;
}

void RtTrendsManagementRequest::InternalSwap(RtTrendsManagementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appendsignalhashes_.InternalSwap(&other->appendsignalhashes_);
  deletesignalhashes_.InternalSwap(&other->deletesignalhashes_);
  clientequipmentid_.Swap(&other->clientequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sampleperiod_, other->sampleperiod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtTrendsManagementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RtTrendsManagementReply::_Internal {
 public:
  using HasBits = decltype(std::declval<RtTrendsManagementReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errorstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampleperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RtTrendsManagementReply::RtTrendsManagementReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trackedsignalhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.RtTrendsManagementReply)
}
RtTrendsManagementReply::RtTrendsManagementReply(const RtTrendsManagementReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trackedsignalhashes_(from.trackedsignalhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errorstring()) {
    errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorstring(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&sampleperiod_) -
    reinterpret_cast<char*>(&error_)) + sizeof(sampleperiod_));
  // @@protoc_insertion_point(copy_constructor:Network.RtTrendsManagementReply)
}

void RtTrendsManagementReply::SharedCtor() {
errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sampleperiod_) -
    reinterpret_cast<char*>(&error_)) + sizeof(sampleperiod_));
}

RtTrendsManagementReply::~RtTrendsManagementReply() {
  // @@protoc_insertion_point(destructor:Network.RtTrendsManagementReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtTrendsManagementReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errorstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtTrendsManagementReply::ArenaDtor(void* object) {
  RtTrendsManagementReply* _this = reinterpret_cast< RtTrendsManagementReply* >(object);
  (void)_this;
}
void RtTrendsManagementReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtTrendsManagementReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtTrendsManagementReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.RtTrendsManagementReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackedsignalhashes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errorstring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sampleperiod_) -
        reinterpret_cast<char*>(&error_)) + sizeof(sampleperiod_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtTrendsManagementReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errorString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errorstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.RtTrendsManagementReply.errorString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 samplePeriod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sampleperiod(&has_bits);
          sampleperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 trackedSignalHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_trackedsignalhashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_trackedsignalhashes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtTrendsManagementReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.RtTrendsManagementReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional string errorString = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errorstring().data(), static_cast<int>(this->_internal_errorstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.RtTrendsManagementReply.errorString");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errorstring(), target);
  }

  // optional int32 samplePeriod = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sampleperiod(), target);
  }

  // repeated uint64 trackedSignalHashes = 4;
  for (int i = 0, n = this->_internal_trackedsignalhashes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_trackedsignalhashes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.RtTrendsManagementReply)
  return target;
}

size_t RtTrendsManagementReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.RtTrendsManagementReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 trackedSignalHashes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->trackedsignalhashes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trackedsignalhashes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string errorString = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errorstring());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

    // optional int32 samplePeriod = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sampleperiod());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtTrendsManagementReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.RtTrendsManagementReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RtTrendsManagementReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtTrendsManagementReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.RtTrendsManagementReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.RtTrendsManagementReply)
    MergeFrom(*source);
  }
}

void RtTrendsManagementReply::MergeFrom(const RtTrendsManagementReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.RtTrendsManagementReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trackedsignalhashes_.MergeFrom(from.trackedsignalhashes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errorstring(from._internal_errorstring());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      sampleperiod_ = from.sampleperiod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtTrendsManagementReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.RtTrendsManagementReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsManagementReply::CopyFrom(const RtTrendsManagementReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.RtTrendsManagementReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsManagementReply::IsInitialized() const {
  return true;
}

void RtTrendsManagementReply::InternalSwap(RtTrendsManagementReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trackedsignalhashes_.InternalSwap(&other->trackedsignalhashes_);
  errorstring_.Swap(&other->errorstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtTrendsManagementReply, sampleperiod_)
      + sizeof(RtTrendsManagementReply::sampleperiod_)
      - PROTOBUF_FIELD_OFFSET(RtTrendsManagementReply, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtTrendsManagementReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RtTrendsGetStateChangesRequest::_Internal {
 public:
};

RtTrendsGetStateChangesRequest::RtTrendsGetStateChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.RtTrendsGetStateChangesRequest)
}
RtTrendsGetStateChangesRequest::RtTrendsGetStateChangesRequest(const RtTrendsGetStateChangesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Network.RtTrendsGetStateChangesRequest)
}

void RtTrendsGetStateChangesRequest::SharedCtor() {
}

RtTrendsGetStateChangesRequest::~RtTrendsGetStateChangesRequest() {
  // @@protoc_insertion_point(destructor:Network.RtTrendsGetStateChangesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtTrendsGetStateChangesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RtTrendsGetStateChangesRequest::ArenaDtor(void* object) {
  RtTrendsGetStateChangesRequest* _this = reinterpret_cast< RtTrendsGetStateChangesRequest* >(object);
  (void)_this;
}
void RtTrendsGetStateChangesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtTrendsGetStateChangesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtTrendsGetStateChangesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.RtTrendsGetStateChangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtTrendsGetStateChangesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtTrendsGetStateChangesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.RtTrendsGetStateChangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.RtTrendsGetStateChangesRequest)
  return target;
}

size_t RtTrendsGetStateChangesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.RtTrendsGetStateChangesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtTrendsGetStateChangesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.RtTrendsGetStateChangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RtTrendsGetStateChangesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtTrendsGetStateChangesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.RtTrendsGetStateChangesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.RtTrendsGetStateChangesRequest)
    MergeFrom(*source);
  }
}

void RtTrendsGetStateChangesRequest::MergeFrom(const RtTrendsGetStateChangesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.RtTrendsGetStateChangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RtTrendsGetStateChangesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.RtTrendsGetStateChangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsGetStateChangesRequest::CopyFrom(const RtTrendsGetStateChangesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.RtTrendsGetStateChangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsGetStateChangesRequest::IsInitialized() const {
  return true;
}

void RtTrendsGetStateChangesRequest::InternalSwap(RtTrendsGetStateChangesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtTrendsGetStateChangesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RtTrendsGetStateChangesReply::_Internal {
 public:
  using HasBits = decltype(std::declval<RtTrendsGetStateChangesReply>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errorstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void RtTrendsGetStateChangesReply::clear_signalstates() {
  signalstates_.Clear();
}
RtTrendsGetStateChangesReply::RtTrendsGetStateChangesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.RtTrendsGetStateChangesReply)
}
RtTrendsGetStateChangesReply::RtTrendsGetStateChangesReply(const RtTrendsGetStateChangesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signalstates_(from.signalstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errorstring()) {
    errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorstring(), 
      GetArena());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:Network.RtTrendsGetStateChangesReply)
}

void RtTrendsGetStateChangesReply::SharedCtor() {
errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_ = 0;
}

RtTrendsGetStateChangesReply::~RtTrendsGetStateChangesReply() {
  // @@protoc_insertion_point(destructor:Network.RtTrendsGetStateChangesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtTrendsGetStateChangesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errorstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtTrendsGetStateChangesReply::ArenaDtor(void* object) {
  RtTrendsGetStateChangesReply* _this = reinterpret_cast< RtTrendsGetStateChangesReply* >(object);
  (void)_this;
}
void RtTrendsGetStateChangesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtTrendsGetStateChangesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtTrendsGetStateChangesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.RtTrendsGetStateChangesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errorstring_.ClearNonDefaultToEmpty();
  }
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtTrendsGetStateChangesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errorString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errorstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Network.RtTrendsGetStateChangesReply.errorString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AppSignalState signalStates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signalstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtTrendsGetStateChangesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.RtTrendsGetStateChangesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // optional string errorString = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errorstring().data(), static_cast<int>(this->_internal_errorstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Network.RtTrendsGetStateChangesReply.errorString");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errorstring(), target);
  }

  // repeated .Proto.AppSignalState signalStates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signalstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_signalstates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.RtTrendsGetStateChangesReply)
  return target;
}

size_t RtTrendsGetStateChangesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.RtTrendsGetStateChangesReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignalState signalStates = 3;
  total_size += 1UL * this->_internal_signalstates_size();
  for (const auto& msg : this->signalstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string errorString = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errorstring());
    }

    // optional int32 error = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtTrendsGetStateChangesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.RtTrendsGetStateChangesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RtTrendsGetStateChangesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtTrendsGetStateChangesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.RtTrendsGetStateChangesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.RtTrendsGetStateChangesReply)
    MergeFrom(*source);
  }
}

void RtTrendsGetStateChangesReply::MergeFrom(const RtTrendsGetStateChangesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.RtTrendsGetStateChangesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalstates_.MergeFrom(from.signalstates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errorstring(from._internal_errorstring());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtTrendsGetStateChangesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.RtTrendsGetStateChangesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsGetStateChangesReply::CopyFrom(const RtTrendsGetStateChangesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.RtTrendsGetStateChangesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsGetStateChangesReply::IsInitialized() const {
  return true;
}

void RtTrendsGetStateChangesReply::InternalSwap(RtTrendsGetStateChangesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalstates_.InternalSwap(&other->signalstates_);
  errorstring_.Swap(&other->errorstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtTrendsGetStateChangesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetFileReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFileReply>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filesize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_totalparts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_currentpart(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_currentpartsize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_md5(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filepartdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

GetFileReply::GetFileReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Network.GetFileReply)
}
GetFileReply::GetFileReply(const GetFileReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_md5()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArena());
  }
  filepartdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filepartdata()) {
    filepartdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filepartdata(), 
      GetArena());
  }
  ::memcpy(&filesize_, &from.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentpartsize_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(currentpartsize_));
  // @@protoc_insertion_point(copy_constructor:Network.GetFileReply)
}

void GetFileReply::SharedCtor() {
md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filepartdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filesize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currentpartsize_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(currentpartsize_));
}

GetFileReply::~GetFileReply() {
  // @@protoc_insertion_point(destructor:Network.GetFileReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFileReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepartdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileReply::ArenaDtor(void* object) {
  GetFileReply* _this = reinterpret_cast< GetFileReply* >(object);
  (void)_this;
}
void GetFileReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Network.GetFileReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      md5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filepartdata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&filesize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currentpartsize_) -
        reinterpret_cast<char*>(&filesize_)) + sizeof(currentpartsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 errorCode = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 fileSize = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_filesize(&has_bits);
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 totalParts = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_totalparts(&has_bits);
          totalparts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 currentPart = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_currentpart(&has_bits);
          currentpart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 currentPartSize = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_currentpartsize(&has_bits);
          currentpartsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes md5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes filePartData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_filepartdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network.GetFileReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 errorCode = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional int64 fileSize = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_filesize(), target);
  }

  // optional int32 totalParts = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_totalparts(), target);
  }

  // optional int32 currentPart = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentpart(), target);
  }

  // optional int32 currentPartSize = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_currentpartsize(), target);
  }

  // optional bytes md5 = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_md5(), target);
  }

  // optional bytes filePartData = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_filepartdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network.GetFileReply)
  return target;
}

size_t GetFileReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network.GetFileReply)
  size_t total_size = 0;

  // required int32 errorCode = 1 [default = 0];
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes md5 = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_md5());
    }

    // optional bytes filePartData = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filepartdata());
    }

    // optional int64 fileSize = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_filesize());
    }

  }
  if (cached_has_bits & 0x00000070u) {
    // optional int32 totalParts = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_totalparts());
    }

    // optional int32 currentPart = 4 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_currentpart());
    }

    // optional int32 currentPartSize = 5 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_currentpartsize());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Network.GetFileReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Network.GetFileReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Network.GetFileReply)
    MergeFrom(*source);
  }
}

void GetFileReply::MergeFrom(const GetFileReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network.GetFileReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_md5(from._internal_md5());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filepartdata(from._internal_filepartdata());
    }
    if (cached_has_bits & 0x00000004u) {
      filesize_ = from.filesize_;
    }
    if (cached_has_bits & 0x00000008u) {
      errorcode_ = from.errorcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      totalparts_ = from.totalparts_;
    }
    if (cached_has_bits & 0x00000020u) {
      currentpart_ = from.currentpart_;
    }
    if (cached_has_bits & 0x00000040u) {
      currentpartsize_ = from.currentpartsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetFileReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Network.GetFileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileReply::CopyFrom(const GetFileReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network.GetFileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GetFileReply::InternalSwap(GetFileReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filepartdata_.Swap(&other->filepartdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileReply, currentpartsize_)
      + sizeof(GetFileReply::currentpartsize_)
      - PROTOBUF_FIELD_OFFSET(GetFileReply, filesize_)>(
          reinterpret_cast<char*>(&filesize_),
          reinterpret_cast<char*>(&other->filesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Network::GetSignalListStartRequest* Arena::CreateMaybeMessage< ::Network::GetSignalListStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetSignalListStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetSignalListStartReply* Arena::CreateMaybeMessage< ::Network::GetSignalListStartReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetSignalListStartReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetSignalListNextRequest* Arena::CreateMaybeMessage< ::Network::GetSignalListNextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetSignalListNextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetSignalListNextReply* Arena::CreateMaybeMessage< ::Network::GetSignalListNextReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetSignalListNextReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalParamRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalParamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalParamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalParamReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalParamReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalParamReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStateRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStateReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalStateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStateChangesRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalStateChangesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStateChangesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStateChangesReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalStateChangesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStateChangesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::DataSourceInfo* Arena::CreateMaybeMessage< ::Network::DataSourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::DataSourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetDataSourcesInfoRequest* Arena::CreateMaybeMessage< ::Network::GetDataSourcesInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetDataSourcesInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetDataSourcesInfoReply* Arena::CreateMaybeMessage< ::Network::GetDataSourcesInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetDataSourcesInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::AppDataReceiveState* Arena::CreateMaybeMessage< ::Network::AppDataReceiveState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::AppDataReceiveState >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::AppDataSourceState* Arena::CreateMaybeMessage< ::Network::AppDataSourceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::AppDataSourceState >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppDataSourcesStatesReply* Arena::CreateMaybeMessage< ::Network::GetAppDataSourcesStatesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppDataSourcesStatesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::AppDataServiceState* Arena::CreateMaybeMessage< ::Network::AppDataServiceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::AppDataServiceState >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::SoftwareInfo* Arena::CreateMaybeMessage< ::Network::SoftwareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::SoftwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetServiceInfoRequest* Arena::CreateMaybeMessage< ::Network::GetServiceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetServiceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::SessionParams* Arena::CreateMaybeMessage< ::Network::SessionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::SessionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ServiceInfo* Arena::CreateMaybeMessage< ::Network::ServiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetServiceInfoReply* Arena::CreateMaybeMessage< ::Network::GetServiceInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetServiceInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ConfigurationServiceState* Arena::CreateMaybeMessage< ::Network::ConfigurationServiceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ConfigurationServiceState >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ServiceClientInfo* Arena::CreateMaybeMessage< ::Network::ServiceClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ServiceClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ServiceClients* Arena::CreateMaybeMessage< ::Network::ServiceClients >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ServiceClients >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::BuildInfo* Arena::CreateMaybeMessage< ::Network::BuildInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::BuildInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ConfigurationServiceSettings* Arena::CreateMaybeMessage< ::Network::ConfigurationServiceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ConfigurationServiceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ServiceSettings* Arena::CreateMaybeMessage< ::Network::ServiceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ServiceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetTuningSourcesInfo* Arena::CreateMaybeMessage< ::Network::GetTuningSourcesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetTuningSourcesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetTuningSourcesInfoReply* Arena::CreateMaybeMessage< ::Network::GetTuningSourcesInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetTuningSourcesInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetTuningSourcesStates* Arena::CreateMaybeMessage< ::Network::GetTuningSourcesStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetTuningSourcesStates >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::SignalsAssociatedToTuningSource* Arena::CreateMaybeMessage< ::Network::SignalsAssociatedToTuningSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::SignalsAssociatedToTuningSource >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSourceFilling* Arena::CreateMaybeMessage< ::Network::TuningSourceFilling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSourceFilling >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSourceState* Arena::CreateMaybeMessage< ::Network::TuningSourceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSourceState >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetTuningSourcesStatesReply* Arena::CreateMaybeMessage< ::Network::GetTuningSourcesStatesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetTuningSourcesStatesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ChangeConrolledTuningSourceRequest* Arena::CreateMaybeMessage< ::Network::ChangeConrolledTuningSourceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ChangeConrolledTuningSourceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::ChangeConrolledTuningSourceReply* Arena::CreateMaybeMessage< ::Network::ChangeConrolledTuningSourceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::ChangeConrolledTuningSourceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalsRead* Arena::CreateMaybeMessage< ::Network::TuningSignalsRead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalsRead >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalState* Arena::CreateMaybeMessage< ::Network::TuningSignalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalState >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalsReadReply* Arena::CreateMaybeMessage< ::Network::TuningSignalsReadReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalsReadReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningWriteCommand* Arena::CreateMaybeMessage< ::Network::TuningWriteCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningWriteCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalsWrite* Arena::CreateMaybeMessage< ::Network::TuningSignalsWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalsWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalWriteResult* Arena::CreateMaybeMessage< ::Network::TuningSignalWriteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalWriteResult >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalsWriteReply* Arena::CreateMaybeMessage< ::Network::TuningSignalsWriteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalsWriteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalsApply* Arena::CreateMaybeMessage< ::Network::TuningSignalsApply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalsApply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::TuningSignalsApplyReply* Arena::CreateMaybeMessage< ::Network::TuningSignalsApplyReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::TuningSignalsApplyReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::DataSourceWrite* Arena::CreateMaybeMessage< ::Network::DataSourceWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::DataSourceWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::DataSourceWriteReply* Arena::CreateMaybeMessage< ::Network::DataSourceWriteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::DataSourceWriteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::PacketSourceExit* Arena::CreateMaybeMessage< ::Network::PacketSourceExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::PacketSourceExit >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::PacketSourceExitReply* Arena::CreateMaybeMessage< ::Network::PacketSourceExitReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::PacketSourceExitReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::SaveAppSignalsStatesToArchiveRequest* Arena::CreateMaybeMessage< ::Network::SaveAppSignalsStatesToArchiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::SaveAppSignalsStatesToArchiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::SaveAppSignalsStatesToArchiveReply* Arena::CreateMaybeMessage< ::Network::SaveAppSignalsStatesToArchiveReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::SaveAppSignalsStatesToArchiveReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStatesFromArchiveStartRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalStatesFromArchiveStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStatesFromArchiveStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStatesFromArchiveStartReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalStatesFromArchiveStartReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStatesFromArchiveStartReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStatesFromArchiveNextRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalStatesFromArchiveNextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStatesFromArchiveNextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStatesFromArchiveNextReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalStatesFromArchiveNextReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStatesFromArchiveNextReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStatesFromArchiveCancelRequest* Arena::CreateMaybeMessage< ::Network::GetAppSignalStatesFromArchiveCancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStatesFromArchiveCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetAppSignalStatesFromArchiveCancelReply* Arena::CreateMaybeMessage< ::Network::GetAppSignalStatesFromArchiveCancelReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetAppSignalStatesFromArchiveCancelReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::RtTrendsManagementRequest* Arena::CreateMaybeMessage< ::Network::RtTrendsManagementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::RtTrendsManagementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::RtTrendsManagementReply* Arena::CreateMaybeMessage< ::Network::RtTrendsManagementReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::RtTrendsManagementReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::RtTrendsGetStateChangesRequest* Arena::CreateMaybeMessage< ::Network::RtTrendsGetStateChangesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::RtTrendsGetStateChangesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::RtTrendsGetStateChangesReply* Arena::CreateMaybeMessage< ::Network::RtTrendsGetStateChangesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::RtTrendsGetStateChangesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Network::GetFileReply* Arena::CreateMaybeMessage< ::Network::GetFileReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Network::GetFileReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#ifdef _MSC_VER
#pragma warning(pop)
#endif