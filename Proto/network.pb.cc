#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 6011)
#pragma warning(disable : 4100)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Network {

namespace {

const ::google::protobuf::Descriptor* GetSignalListStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListStartReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListStartReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListNextRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListNextRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListNextReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListNextReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalParamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalParamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalParamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalParamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataSourcesInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataSourcesInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataSourcesInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataSourcesInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppDataSourceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppDataSourceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppDataSourcesStatesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppDataSourcesStatesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUnitsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUnitsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUnitsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUnitsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppDataServiceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppDataServiceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftwareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationServiceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationServiceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceClients_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceClients_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationServiceSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationServiceSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTuningSourcesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTuningSourcesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTuningSourcesInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTuningSourcesInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTuningSourcesStates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTuningSourcesStates_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalsAssociatedToTuningSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalsAssociatedToTuningSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSourceFilling_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSourceFilling_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSourceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSourceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTuningSourcesStatesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTuningSourcesStatesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeConrolledTuningSourceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeConrolledTuningSourceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeConrolledTuningSourceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeConrolledTuningSourceReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalsRead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalsRead_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalsReadReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalsReadReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningWriteCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningWriteCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalsWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalsWrite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalWriteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalWriteResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalsWriteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalsWriteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalsApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalsApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningSignalsApplyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningSignalsApplyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveAppSignalsStatesToArchiveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveAppSignalsStatesToArchiveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveAppSignalsStatesToArchiveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveAppSignalsStatesToArchiveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStatesFromArchiveStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveStartReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStatesFromArchiveStartReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveNextRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStatesFromArchiveNextRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveNextReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStatesFromArchiveNextReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveCancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStatesFromArchiveCancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveCancelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppSignalStatesFromArchiveCancelReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTrendsManagementRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTrendsManagementRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTrendsManagementReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTrendsManagementReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTrendsGetStateChangesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTrendsGetStateChangesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTrendsGetStateChangesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTrendsGetStateChangesReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_2eproto() {
  protobuf_AddDesc_network_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network.proto");
  GOOGLE_CHECK(file != NULL);
  GetSignalListStartRequest_descriptor_ = file->message_type(0);
  static const int GetSignalListStartRequest_offsets_[1] = {
  };
  GetSignalListStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListStartRequest_descriptor_,
      GetSignalListStartRequest::default_instance_,
      GetSignalListStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListStartRequest));
  GetSignalListStartReply_descriptor_ = file->message_type(1);
  static const int GetSignalListStartReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, totalitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, partcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, itemsperpart_),
  };
  GetSignalListStartReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListStartReply_descriptor_,
      GetSignalListStartReply::default_instance_,
      GetSignalListStartReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListStartReply));
  GetSignalListNextRequest_descriptor_ = file->message_type(2);
  static const int GetSignalListNextRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, part_),
  };
  GetSignalListNextRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListNextRequest_descriptor_,
      GetSignalListNextRequest::default_instance_,
      GetSignalListNextRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListNextRequest));
  GetSignalListNextReply_descriptor_ = file->message_type(3);
  static const int GetSignalListNextReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, appsignalids_),
  };
  GetSignalListNextReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListNextReply_descriptor_,
      GetSignalListNextReply::default_instance_,
      GetSignalListNextReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListNextReply));
  GetAppSignalParamRequest_descriptor_ = file->message_type(4);
  static const int GetAppSignalParamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamRequest, signalhashes_),
  };
  GetAppSignalParamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalParamRequest_descriptor_,
      GetAppSignalParamRequest::default_instance_,
      GetAppSignalParamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalParamRequest));
  GetAppSignalParamReply_descriptor_ = file->message_type(5);
  static const int GetAppSignalParamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, appsignals_),
  };
  GetAppSignalParamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalParamReply_descriptor_,
      GetAppSignalParamReply::default_instance_,
      GetAppSignalParamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalParamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalParamReply));
  GetAppSignalRequest_descriptor_ = file->message_type(6);
  static const int GetAppSignalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalRequest, signalhashes_),
  };
  GetAppSignalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalRequest_descriptor_,
      GetAppSignalRequest::default_instance_,
      GetAppSignalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalRequest));
  GetAppSignalReply_descriptor_ = file->message_type(7);
  static const int GetAppSignalReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalReply, appsignals_),
  };
  GetAppSignalReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalReply_descriptor_,
      GetAppSignalReply::default_instance_,
      GetAppSignalReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalReply));
  GetAppSignalStateRequest_descriptor_ = file->message_type(8);
  static const int GetAppSignalStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateRequest, signalhashes_),
  };
  GetAppSignalStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStateRequest_descriptor_,
      GetAppSignalStateRequest::default_instance_,
      GetAppSignalStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStateRequest));
  GetAppSignalStateReply_descriptor_ = file->message_type(9);
  static const int GetAppSignalStateReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, appsignalstates_),
  };
  GetAppSignalStateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStateReply_descriptor_,
      GetAppSignalStateReply::default_instance_,
      GetAppSignalStateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStateReply));
  DataSourceInfo_descriptor_ = file->message_type(10);
  static const int DataSourceInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmcaption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmdatatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmsubsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmsubsystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmsubsystemchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmmoduletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmadapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmdataenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmuniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, lmrupframesquantity_),
  };
  DataSourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataSourceInfo_descriptor_,
      DataSourceInfo::default_instance_,
      DataSourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataSourceInfo));
  GetDataSourcesInfoRequest_descriptor_ = file->message_type(11);
  static const int GetDataSourcesInfoRequest_offsets_[1] = {
  };
  GetDataSourcesInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataSourcesInfoRequest_descriptor_,
      GetDataSourcesInfoRequest::default_instance_,
      GetDataSourcesInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataSourcesInfoRequest));
  GetDataSourcesInfoReply_descriptor_ = file->message_type(12);
  static const int GetDataSourcesInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, datasourceinfo_),
  };
  GetDataSourcesInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataSourcesInfoReply_descriptor_,
      GetDataSourcesInfoReply::default_instance_,
      GetDataSourcesInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataSourcesInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataSourcesInfoReply));
  AppDataSourceState_descriptor_ = file->message_type(13);
  static const int AppDataSourceState_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, datareceives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receiveddataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, rupframesqueuesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, rupframesqueuemaxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, datareceivingrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receiveddatasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receivedframescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, receivedpacketcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, lostedpacketcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, dataprocessingenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, processedpacketcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, lastpacketsystemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, rupframeplanttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, rupframenumerator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, signalstatesqueuesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, signalstatesqueuemaxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, acquiredsignalscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorprotocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorframesquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorframeno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errordataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorframesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errorduplicateplanttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, errornonmonotonicplanttime_),
  };
  AppDataSourceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppDataSourceState_descriptor_,
      AppDataSourceState::default_instance_,
      AppDataSourceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataSourceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppDataSourceState));
  GetAppDataSourcesStatesReply_descriptor_ = file->message_type(14);
  static const int GetAppDataSourcesStatesReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, appdatasourcesstates_),
  };
  GetAppDataSourcesStatesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppDataSourcesStatesReply_descriptor_,
      GetAppDataSourcesStatesReply::default_instance_,
      GetAppDataSourcesStatesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppDataSourcesStatesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppDataSourcesStatesReply));
  GetUnitsRequest_descriptor_ = file->message_type(15);
  static const int GetUnitsRequest_offsets_[1] = {
  };
  GetUnitsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUnitsRequest_descriptor_,
      GetUnitsRequest::default_instance_,
      GetUnitsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnitsRequest));
  Unit_descriptor_ = file->message_type(16);
  static const int Unit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, unit_),
  };
  Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unit_descriptor_,
      Unit::default_instance_,
      Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unit));
  GetUnitsReply_descriptor_ = file->message_type(17);
  static const int GetUnitsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, units_),
  };
  GetUnitsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUnitsReply_descriptor_,
      GetUnitsReply::default_instance_,
      GetUnitsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnitsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnitsReply));
  AppDataServiceState_descriptor_ = file->message_type(18);
  static const int AppDataServiceState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, cfgserviceisconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, cfgserviceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, cfgserviceport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, archiveserviceisconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, archiveserviceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, archiveserviceport_),
  };
  AppDataServiceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppDataServiceState_descriptor_,
      AppDataServiceState::default_instance_,
      AppDataServiceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDataServiceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppDataServiceState));
  SoftwareInfo_descriptor_ = file->message_type(19);
  static const int SoftwareInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, softwaretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, majorversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, minorversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, commitno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, buildbranch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, commitsha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, buildno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, crc_),
  };
  SoftwareInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftwareInfo_descriptor_,
      SoftwareInfo::default_instance_,
      SoftwareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftwareInfo));
  GetServiceInfoRequest_descriptor_ = file->message_type(20);
  static const int GetServiceInfoRequest_offsets_[1] = {
  };
  GetServiceInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceInfoRequest_descriptor_,
      GetServiceInfoRequest::default_instance_,
      GetServiceInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceInfoRequest));
  ServiceInfo_descriptor_ = file->message_type(21);
  static const int ServiceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, softwareinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, servicestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, serviceuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, clientrequestip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, clientrequestport_),
  };
  ServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceInfo_descriptor_,
      ServiceInfo::default_instance_,
      ServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceInfo));
  GetServiceInfoReply_descriptor_ = file->message_type(22);
  static const int GetServiceInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, serviceinfo_),
  };
  GetServiceInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceInfoReply_descriptor_,
      GetServiceInfoReply::default_instance_,
      GetServiceInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceInfoReply));
  ConfigurationServiceState_descriptor_ = file->message_type(23);
  static const int ConfigurationServiceState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceState, currentbuilddirectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceState, checkbuildattemptquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceState, buildcheckerstate_),
  };
  ConfigurationServiceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationServiceState_descriptor_,
      ConfigurationServiceState::default_instance_,
      ConfigurationServiceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationServiceState));
  ServiceClientInfo_descriptor_ = file->message_type(24);
  static const int ServiceClientInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, isactual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, replyquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, softwareinfo_),
  };
  ServiceClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceClientInfo_descriptor_,
      ServiceClientInfo::default_instance_,
      ServiceClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceClientInfo));
  ServiceClients_descriptor_ = file->message_type(25);
  static const int ServiceClients_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClients, clients_),
  };
  ServiceClients_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceClients_descriptor_,
      ServiceClients::default_instance_,
      ServiceClients_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClients, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceClients, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceClients));
  BuildInfo_descriptor_ = file->message_type(26);
  static const int BuildInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, changeset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, workstation_),
  };
  BuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildInfo_descriptor_,
      BuildInfo::default_instance_,
      BuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildInfo));
  ConfigurationServiceSettings_descriptor_ = file->message_type(27);
  static const int ConfigurationServiceSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceSettings, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceSettings, autoloadbuildpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceSettings, workdirectory_),
  };
  ConfigurationServiceSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationServiceSettings_descriptor_,
      ConfigurationServiceSettings::default_instance_,
      ConfigurationServiceSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationServiceSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationServiceSettings));
  ServiceSettings_descriptor_ = file->message_type(28);
  static const int ServiceSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSettings, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSettings, configip1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSettings, configip2_),
  };
  ServiceSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceSettings_descriptor_,
      ServiceSettings::default_instance_,
      ServiceSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceSettings));
  GetTuningSourcesInfo_descriptor_ = file->message_type(29);
  static const int GetTuningSourcesInfo_offsets_[1] = {
  };
  GetTuningSourcesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTuningSourcesInfo_descriptor_,
      GetTuningSourcesInfo::default_instance_,
      GetTuningSourcesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTuningSourcesInfo));
  GetTuningSourcesInfoReply_descriptor_ = file->message_type(30);
  static const int GetTuningSourcesInfoReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, tuningsourceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, singlelmcontrolmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, activeclientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, activeclientip_),
  };
  GetTuningSourcesInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTuningSourcesInfoReply_descriptor_,
      GetTuningSourcesInfoReply::default_instance_,
      GetTuningSourcesInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTuningSourcesInfoReply));
  GetTuningSourcesStates_descriptor_ = file->message_type(31);
  static const int GetTuningSourcesStates_offsets_[1] = {
  };
  GetTuningSourcesStates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTuningSourcesStates_descriptor_,
      GetTuningSourcesStates::default_instance_,
      GetTuningSourcesStates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTuningSourcesStates));
  SignalsAssociatedToTuningSource_descriptor_ = file->message_type(32);
  static const int SignalsAssociatedToTuningSource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalsAssociatedToTuningSource, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalsAssociatedToTuningSource, signalhash_),
  };
  SignalsAssociatedToTuningSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalsAssociatedToTuningSource_descriptor_,
      SignalsAssociatedToTuningSource::default_instance_,
      SignalsAssociatedToTuningSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalsAssociatedToTuningSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalsAssociatedToTuningSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalsAssociatedToTuningSource));
  TuningSourceFilling_descriptor_ = file->message_type(33);
  static const int TuningSourceFilling_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceFilling, signalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceFilling, signalspersource_),
  };
  TuningSourceFilling_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSourceFilling_descriptor_,
      TuningSourceFilling::default_instance_,
      TuningSourceFilling_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceFilling, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceFilling, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSourceFilling));
  TuningSourceState_descriptor_ = file->message_type(34);
  static const int TuningSourceState_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, isreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, requestcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, replycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, commandqueuesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, erruntimelyreplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errpartialsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errreplysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errnoreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupprotocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupframesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupnontuningdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupmoduletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupframesquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupframenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipprotocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipuniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotiplmnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipsubsystemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipoperationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipframesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipromsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errfotipromframesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagboundschecksuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagwritesuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagdatatypeerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagopcodeerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagstartaddrerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagromsizeerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagromframesizeerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagframesizeerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagprotocolversionerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagsubsystemkeyerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflaguniueiderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagoffseterr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagapplysuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, fotipflagsetsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, erranaloglowboundcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, erranaloghighboundcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, errrupcrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, controlisactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, setsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, hasunappliedparams_),
  };
  TuningSourceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSourceState_descriptor_,
      TuningSourceState::default_instance_,
      TuningSourceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSourceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSourceState));
  GetTuningSourcesStatesReply_descriptor_ = file->message_type(35);
  static const int GetTuningSourcesStatesReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, tuningsourcesstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, singlelmcontrolmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, activeclientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, activeclientip_),
  };
  GetTuningSourcesStatesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTuningSourcesStatesReply_descriptor_,
      GetTuningSourcesStatesReply::default_instance_,
      GetTuningSourcesStatesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTuningSourcesStatesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTuningSourcesStatesReply));
  ChangeConrolledTuningSourceRequest_descriptor_ = file->message_type(36);
  static const int ChangeConrolledTuningSourceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, takecontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, tuningsourceequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, activatecontrol_),
  };
  ChangeConrolledTuningSourceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeConrolledTuningSourceRequest_descriptor_,
      ChangeConrolledTuningSourceRequest::default_instance_,
      ChangeConrolledTuningSourceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeConrolledTuningSourceRequest));
  ChangeConrolledTuningSourceReply_descriptor_ = file->message_type(37);
  static const int ChangeConrolledTuningSourceReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceReply, controlledtuningsourceequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceReply, controlisactive_),
  };
  ChangeConrolledTuningSourceReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeConrolledTuningSourceReply_descriptor_,
      ChangeConrolledTuningSourceReply::default_instance_,
      ChangeConrolledTuningSourceReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConrolledTuningSourceReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeConrolledTuningSourceReply));
  TuningSignalsRead_descriptor_ = file->message_type(38);
  static const int TuningSignalsRead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsRead, signalhash_),
  };
  TuningSignalsRead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalsRead_descriptor_,
      TuningSignalsRead::default_instance_,
      TuningSignalsRead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsRead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsRead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalsRead));
  TuningSignalState_descriptor_ = file->message_type(39);
  static const int TuningSignalState_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, signalhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, readlowbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, readhighbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, writeinprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, writeerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, writeclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, successfulreadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, writerequesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, successfulwritetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, unsuccessfulwritetime_),
  };
  TuningSignalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalState_descriptor_,
      TuningSignalState::default_instance_,
      TuningSignalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalState));
  TuningSignalsReadReply_descriptor_ = file->message_type(40);
  static const int TuningSignalsReadReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsReadReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsReadReply, tuningsignalstate_),
  };
  TuningSignalsReadReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalsReadReply_descriptor_,
      TuningSignalsReadReply::default_instance_,
      TuningSignalsReadReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsReadReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsReadReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalsReadReply));
  TuningWriteCommand_descriptor_ = file->message_type(41);
  static const int TuningWriteCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningWriteCommand, signalhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningWriteCommand, value_),
  };
  TuningWriteCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningWriteCommand_descriptor_,
      TuningWriteCommand::default_instance_,
      TuningWriteCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningWriteCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningWriteCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningWriteCommand));
  TuningSignalsWrite_descriptor_ = file->message_type(42);
  static const int TuningSignalsWrite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWrite, autoapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWrite, commands_),
  };
  TuningSignalsWrite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalsWrite_descriptor_,
      TuningSignalsWrite::default_instance_,
      TuningSignalsWrite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWrite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWrite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalsWrite));
  TuningSignalWriteResult_descriptor_ = file->message_type(43);
  static const int TuningSignalWriteResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalWriteResult, signalhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalWriteResult, error_),
  };
  TuningSignalWriteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalWriteResult_descriptor_,
      TuningSignalWriteResult::default_instance_,
      TuningSignalWriteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalWriteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalWriteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalWriteResult));
  TuningSignalsWriteReply_descriptor_ = file->message_type(44);
  static const int TuningSignalsWriteReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWriteReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWriteReply, writeresult_),
  };
  TuningSignalsWriteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalsWriteReply_descriptor_,
      TuningSignalsWriteReply::default_instance_,
      TuningSignalsWriteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWriteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsWriteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalsWriteReply));
  TuningSignalsApply_descriptor_ = file->message_type(45);
  static const int TuningSignalsApply_offsets_[1] = {
  };
  TuningSignalsApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalsApply_descriptor_,
      TuningSignalsApply::default_instance_,
      TuningSignalsApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalsApply));
  TuningSignalsApplyReply_descriptor_ = file->message_type(46);
  static const int TuningSignalsApplyReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsApplyReply, error_),
  };
  TuningSignalsApplyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningSignalsApplyReply_descriptor_,
      TuningSignalsApplyReply::default_instance_,
      TuningSignalsApplyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsApplyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningSignalsApplyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningSignalsApplyReply));
  SaveAppSignalsStatesToArchiveRequest_descriptor_ = file->message_type(47);
  static const int SaveAppSignalsStatesToArchiveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveRequest, clientequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveRequest, appsignalstates_),
  };
  SaveAppSignalsStatesToArchiveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveAppSignalsStatesToArchiveRequest_descriptor_,
      SaveAppSignalsStatesToArchiveRequest::default_instance_,
      SaveAppSignalsStatesToArchiveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveAppSignalsStatesToArchiveRequest));
  SaveAppSignalsStatesToArchiveReply_descriptor_ = file->message_type(48);
  static const int SaveAppSignalsStatesToArchiveReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveReply, archerror_),
  };
  SaveAppSignalsStatesToArchiveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveAppSignalsStatesToArchiveReply_descriptor_,
      SaveAppSignalsStatesToArchiveReply::default_instance_,
      SaveAppSignalsStatesToArchiveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveAppSignalsStatesToArchiveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveAppSignalsStatesToArchiveReply));
  GetAppSignalStatesFromArchiveStartRequest_descriptor_ = file->message_type(49);
  static const int GetAppSignalStatesFromArchiveStartRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, clientequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, signalhashes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, removeperiodic_),
  };
  GetAppSignalStatesFromArchiveStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStatesFromArchiveStartRequest_descriptor_,
      GetAppSignalStatesFromArchiveStartRequest::default_instance_,
      GetAppSignalStatesFromArchiveStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStatesFromArchiveStartRequest));
  GetAppSignalStatesFromArchiveStartReply_descriptor_ = file->message_type(50);
  static const int GetAppSignalStatesFromArchiveStartReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, archerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, requestid_),
  };
  GetAppSignalStatesFromArchiveStartReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStatesFromArchiveStartReply_descriptor_,
      GetAppSignalStatesFromArchiveStartReply::default_instance_,
      GetAppSignalStatesFromArchiveStartReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveStartReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStatesFromArchiveStartReply));
  GetAppSignalStatesFromArchiveNextRequest_descriptor_ = file->message_type(51);
  static const int GetAppSignalStatesFromArchiveNextRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextRequest, requestid_),
  };
  GetAppSignalStatesFromArchiveNextRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStatesFromArchiveNextRequest_descriptor_,
      GetAppSignalStatesFromArchiveNextRequest::default_instance_,
      GetAppSignalStatesFromArchiveNextRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStatesFromArchiveNextRequest));
  GetAppSignalStatesFromArchiveNextReply_descriptor_ = file->message_type(52);
  static const int GetAppSignalStatesFromArchiveNextReply_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, archerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, dataready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, totalstatescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, sentstatescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, statesinpartcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, islastpart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, appsignalstates_),
  };
  GetAppSignalStatesFromArchiveNextReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStatesFromArchiveNextReply_descriptor_,
      GetAppSignalStatesFromArchiveNextReply::default_instance_,
      GetAppSignalStatesFromArchiveNextReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveNextReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStatesFromArchiveNextReply));
  GetAppSignalStatesFromArchiveCancelRequest_descriptor_ = file->message_type(53);
  static const int GetAppSignalStatesFromArchiveCancelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelRequest, requestid_),
  };
  GetAppSignalStatesFromArchiveCancelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStatesFromArchiveCancelRequest_descriptor_,
      GetAppSignalStatesFromArchiveCancelRequest::default_instance_,
      GetAppSignalStatesFromArchiveCancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStatesFromArchiveCancelRequest));
  GetAppSignalStatesFromArchiveCancelReply_descriptor_ = file->message_type(54);
  static const int GetAppSignalStatesFromArchiveCancelReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelReply, archerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelReply, errorstring_),
  };
  GetAppSignalStatesFromArchiveCancelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppSignalStatesFromArchiveCancelReply_descriptor_,
      GetAppSignalStatesFromArchiveCancelReply::default_instance_,
      GetAppSignalStatesFromArchiveCancelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppSignalStatesFromArchiveCancelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppSignalStatesFromArchiveCancelReply));
  RtTrendsManagementRequest_descriptor_ = file->message_type(55);
  static const int RtTrendsManagementRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementRequest, clientequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementRequest, sampleperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementRequest, appendsignalhashes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementRequest, deletesignalhashes_),
  };
  RtTrendsManagementRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTrendsManagementRequest_descriptor_,
      RtTrendsManagementRequest::default_instance_,
      RtTrendsManagementRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTrendsManagementRequest));
  RtTrendsManagementReply_descriptor_ = file->message_type(56);
  static const int RtTrendsManagementReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementReply, errorstring_),
  };
  RtTrendsManagementReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTrendsManagementReply_descriptor_,
      RtTrendsManagementReply::default_instance_,
      RtTrendsManagementReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsManagementReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTrendsManagementReply));
  RtTrendsGetStateChangesRequest_descriptor_ = file->message_type(57);
  static const int RtTrendsGetStateChangesRequest_offsets_[1] = {
  };
  RtTrendsGetStateChangesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTrendsGetStateChangesRequest_descriptor_,
      RtTrendsGetStateChangesRequest::default_instance_,
      RtTrendsGetStateChangesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTrendsGetStateChangesRequest));
  RtTrendsGetStateChangesReply_descriptor_ = file->message_type(58);
  static const int RtTrendsGetStateChangesReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesReply, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesReply, signalstates_),
  };
  RtTrendsGetStateChangesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTrendsGetStateChangesReply_descriptor_,
      RtTrendsGetStateChangesReply::default_instance_,
      RtTrendsGetStateChangesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTrendsGetStateChangesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTrendsGetStateChangesReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListStartRequest_descriptor_, &GetSignalListStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListStartReply_descriptor_, &GetSignalListStartReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListNextRequest_descriptor_, &GetSignalListNextRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListNextReply_descriptor_, &GetSignalListNextReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalParamRequest_descriptor_, &GetAppSignalParamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalParamReply_descriptor_, &GetAppSignalParamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalRequest_descriptor_, &GetAppSignalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalReply_descriptor_, &GetAppSignalReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStateRequest_descriptor_, &GetAppSignalStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStateReply_descriptor_, &GetAppSignalStateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataSourceInfo_descriptor_, &DataSourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataSourcesInfoRequest_descriptor_, &GetDataSourcesInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataSourcesInfoReply_descriptor_, &GetDataSourcesInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppDataSourceState_descriptor_, &AppDataSourceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppDataSourcesStatesReply_descriptor_, &GetAppDataSourcesStatesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnitsRequest_descriptor_, &GetUnitsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unit_descriptor_, &Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnitsReply_descriptor_, &GetUnitsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppDataServiceState_descriptor_, &AppDataServiceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftwareInfo_descriptor_, &SoftwareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceInfoRequest_descriptor_, &GetServiceInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceInfo_descriptor_, &ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceInfoReply_descriptor_, &GetServiceInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationServiceState_descriptor_, &ConfigurationServiceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceClientInfo_descriptor_, &ServiceClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceClients_descriptor_, &ServiceClients::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildInfo_descriptor_, &BuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationServiceSettings_descriptor_, &ConfigurationServiceSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceSettings_descriptor_, &ServiceSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTuningSourcesInfo_descriptor_, &GetTuningSourcesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTuningSourcesInfoReply_descriptor_, &GetTuningSourcesInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTuningSourcesStates_descriptor_, &GetTuningSourcesStates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalsAssociatedToTuningSource_descriptor_, &SignalsAssociatedToTuningSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSourceFilling_descriptor_, &TuningSourceFilling::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSourceState_descriptor_, &TuningSourceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTuningSourcesStatesReply_descriptor_, &GetTuningSourcesStatesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeConrolledTuningSourceRequest_descriptor_, &ChangeConrolledTuningSourceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeConrolledTuningSourceReply_descriptor_, &ChangeConrolledTuningSourceReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalsRead_descriptor_, &TuningSignalsRead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalState_descriptor_, &TuningSignalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalsReadReply_descriptor_, &TuningSignalsReadReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningWriteCommand_descriptor_, &TuningWriteCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalsWrite_descriptor_, &TuningSignalsWrite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalWriteResult_descriptor_, &TuningSignalWriteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalsWriteReply_descriptor_, &TuningSignalsWriteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalsApply_descriptor_, &TuningSignalsApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningSignalsApplyReply_descriptor_, &TuningSignalsApplyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveAppSignalsStatesToArchiveRequest_descriptor_, &SaveAppSignalsStatesToArchiveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveAppSignalsStatesToArchiveReply_descriptor_, &SaveAppSignalsStatesToArchiveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStatesFromArchiveStartRequest_descriptor_, &GetAppSignalStatesFromArchiveStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStatesFromArchiveStartReply_descriptor_, &GetAppSignalStatesFromArchiveStartReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStatesFromArchiveNextRequest_descriptor_, &GetAppSignalStatesFromArchiveNextRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStatesFromArchiveNextReply_descriptor_, &GetAppSignalStatesFromArchiveNextReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStatesFromArchiveCancelRequest_descriptor_, &GetAppSignalStatesFromArchiveCancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppSignalStatesFromArchiveCancelReply_descriptor_, &GetAppSignalStatesFromArchiveCancelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTrendsManagementRequest_descriptor_, &RtTrendsManagementRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTrendsManagementReply_descriptor_, &RtTrendsManagementReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTrendsGetStateChangesRequest_descriptor_, &RtTrendsGetStateChangesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTrendsGetStateChangesReply_descriptor_, &RtTrendsGetStateChangesReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_2eproto() {
  delete GetSignalListStartRequest::default_instance_;
  delete GetSignalListStartRequest_reflection_;
  delete GetSignalListStartReply::default_instance_;
  delete GetSignalListStartReply_reflection_;
  delete GetSignalListNextRequest::default_instance_;
  delete GetSignalListNextRequest_reflection_;
  delete GetSignalListNextReply::default_instance_;
  delete GetSignalListNextReply_reflection_;
  delete GetAppSignalParamRequest::default_instance_;
  delete GetAppSignalParamRequest_reflection_;
  delete GetAppSignalParamReply::default_instance_;
  delete GetAppSignalParamReply_reflection_;
  delete GetAppSignalRequest::default_instance_;
  delete GetAppSignalRequest_reflection_;
  delete GetAppSignalReply::default_instance_;
  delete GetAppSignalReply_reflection_;
  delete GetAppSignalStateRequest::default_instance_;
  delete GetAppSignalStateRequest_reflection_;
  delete GetAppSignalStateReply::default_instance_;
  delete GetAppSignalStateReply_reflection_;
  delete DataSourceInfo::default_instance_;
  delete DataSourceInfo_reflection_;
  delete GetDataSourcesInfoRequest::default_instance_;
  delete GetDataSourcesInfoRequest_reflection_;
  delete GetDataSourcesInfoReply::default_instance_;
  delete GetDataSourcesInfoReply_reflection_;
  delete AppDataSourceState::default_instance_;
  delete AppDataSourceState_reflection_;
  delete GetAppDataSourcesStatesReply::default_instance_;
  delete GetAppDataSourcesStatesReply_reflection_;
  delete GetUnitsRequest::default_instance_;
  delete GetUnitsRequest_reflection_;
  delete Unit::default_instance_;
  delete Unit_reflection_;
  delete GetUnitsReply::default_instance_;
  delete GetUnitsReply_reflection_;
  delete AppDataServiceState::default_instance_;
  delete AppDataServiceState_reflection_;
  delete SoftwareInfo::default_instance_;
  delete SoftwareInfo_reflection_;
  delete GetServiceInfoRequest::default_instance_;
  delete GetServiceInfoRequest_reflection_;
  delete ServiceInfo::default_instance_;
  delete ServiceInfo_reflection_;
  delete GetServiceInfoReply::default_instance_;
  delete GetServiceInfoReply_reflection_;
  delete ConfigurationServiceState::default_instance_;
  delete ConfigurationServiceState_reflection_;
  delete ServiceClientInfo::default_instance_;
  delete ServiceClientInfo_reflection_;
  delete ServiceClients::default_instance_;
  delete ServiceClients_reflection_;
  delete BuildInfo::default_instance_;
  delete BuildInfo_reflection_;
  delete ConfigurationServiceSettings::default_instance_;
  delete ConfigurationServiceSettings_reflection_;
  delete ServiceSettings::default_instance_;
  delete ServiceSettings_reflection_;
  delete GetTuningSourcesInfo::default_instance_;
  delete GetTuningSourcesInfo_reflection_;
  delete GetTuningSourcesInfoReply::default_instance_;
  delete GetTuningSourcesInfoReply_reflection_;
  delete GetTuningSourcesStates::default_instance_;
  delete GetTuningSourcesStates_reflection_;
  delete SignalsAssociatedToTuningSource::default_instance_;
  delete SignalsAssociatedToTuningSource_reflection_;
  delete TuningSourceFilling::default_instance_;
  delete TuningSourceFilling_reflection_;
  delete TuningSourceState::default_instance_;
  delete TuningSourceState_reflection_;
  delete GetTuningSourcesStatesReply::default_instance_;
  delete GetTuningSourcesStatesReply_reflection_;
  delete ChangeConrolledTuningSourceRequest::default_instance_;
  delete ChangeConrolledTuningSourceRequest_reflection_;
  delete ChangeConrolledTuningSourceReply::default_instance_;
  delete ChangeConrolledTuningSourceReply_reflection_;
  delete TuningSignalsRead::default_instance_;
  delete TuningSignalsRead_reflection_;
  delete TuningSignalState::default_instance_;
  delete TuningSignalState_reflection_;
  delete TuningSignalsReadReply::default_instance_;
  delete TuningSignalsReadReply_reflection_;
  delete TuningWriteCommand::default_instance_;
  delete TuningWriteCommand_reflection_;
  delete TuningSignalsWrite::default_instance_;
  delete TuningSignalsWrite_reflection_;
  delete TuningSignalWriteResult::default_instance_;
  delete TuningSignalWriteResult_reflection_;
  delete TuningSignalsWriteReply::default_instance_;
  delete TuningSignalsWriteReply_reflection_;
  delete TuningSignalsApply::default_instance_;
  delete TuningSignalsApply_reflection_;
  delete TuningSignalsApplyReply::default_instance_;
  delete TuningSignalsApplyReply_reflection_;
  delete SaveAppSignalsStatesToArchiveRequest::default_instance_;
  delete SaveAppSignalsStatesToArchiveRequest_reflection_;
  delete SaveAppSignalsStatesToArchiveReply::default_instance_;
  delete SaveAppSignalsStatesToArchiveReply_reflection_;
  delete GetAppSignalStatesFromArchiveStartRequest::default_instance_;
  delete GetAppSignalStatesFromArchiveStartRequest_reflection_;
  delete GetAppSignalStatesFromArchiveStartReply::default_instance_;
  delete GetAppSignalStatesFromArchiveStartReply_reflection_;
  delete GetAppSignalStatesFromArchiveNextRequest::default_instance_;
  delete GetAppSignalStatesFromArchiveNextRequest_reflection_;
  delete GetAppSignalStatesFromArchiveNextReply::default_instance_;
  delete GetAppSignalStatesFromArchiveNextReply_reflection_;
  delete GetAppSignalStatesFromArchiveCancelRequest::default_instance_;
  delete GetAppSignalStatesFromArchiveCancelRequest_reflection_;
  delete GetAppSignalStatesFromArchiveCancelReply::default_instance_;
  delete GetAppSignalStatesFromArchiveCancelReply_reflection_;
  delete RtTrendsManagementRequest::default_instance_;
  delete RtTrendsManagementRequest_reflection_;
  delete RtTrendsManagementReply::default_instance_;
  delete RtTrendsManagementReply_reflection_;
  delete RtTrendsGetStateChangesRequest::default_instance_;
  delete RtTrendsGetStateChangesRequest_reflection_;
  delete RtTrendsGetStateChangesReply::default_instance_;
  delete RtTrendsGetStateChangesReply_reflection_;
}

void protobuf_AddDesc_network_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_serialization_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnetwork.proto\022\007Network\032\023serialization."
    "proto\"\033\n\031GetSignalListStartRequest\"l\n\027Ge"
    "tSignalListStartReply\022\020\n\005error\030\001 \001(\005:\0010\022"
    "\026\n\016totalItemCount\030\002 \001(\005\022\021\n\tpartCount\030\003 \001"
    "(\005\022\024\n\014itemsPerPart\030\004 \001(\005\"(\n\030GetSignalLis"
    "tNextRequest\022\014\n\004part\030\001 \001(\005\"N\n\026GetSignalL"
    "istNextReply\022\020\n\005error\030\001 \001(\005:\0010\022\014\n\004part\030\002"
    " \001(\005\022\024\n\014appSignalIds\030\003 \003(\t\"0\n\030GetAppSign"
    "alParamRequest\022\024\n\014signalHashes\030\001 \003(\004\"P\n\026"
    "GetAppSignalParamReply\022\020\n\005error\030\001 \001(\005:\0010"
    "\022$\n\nappSignals\030\002 \003(\0132\020.Proto.AppSignal\"+"
    "\n\023GetAppSignalRequest\022\024\n\014signalHashes\030\001 "
    "\003(\004\"K\n\021GetAppSignalReply\022\020\n\005error\030\001 \001(\005:"
    "\0010\022$\n\nappSignals\030\002 \003(\0132\020.Proto.AppSignal"
    "\"0\n\030GetAppSignalStateRequest\022\024\n\014signalHa"
    "shes\030\001 \003(\004\"Z\n\026GetAppSignalStateReply\022\020\n\005"
    "error\030\001 \001(\005:\0010\022.\n\017appSignalStates\030\002 \003(\0132"
    "\025.Proto.AppSignalState\"\370\002\n\016DataSourceInf"
    "o\022\r\n\002id\030\001 \001(\004:\0010\022\025\n\rlmEquipmentID\030\002 \001(\t\022"
    "\021\n\tlmCaption\030\003 \001(\t\022\025\n\nlmDataType\030\004 \001(\005:\001"
    "0\022\014\n\004lmIP\030\005 \001(\t\022\021\n\006lmPort\030\006 \001(\005:\0010\022\030\n\rlm"
    "SubsystemID\030\007 \001(\005:\0010\022\023\n\013lmSubsystem\030\010 \001("
    "\t\022\032\n\022lmSubsystemChannel\030\t \001(\t\022\023\n\010lmNumbe"
    "r\030\n \001(\005:\0010\022\027\n\014lmModuleType\030\013 \001(\005:\0010\022\023\n\013l"
    "mAdapterID\030\014 \001(\t\022\033\n\014lmDataEnable\030\r \001(\010:\005"
    "false\022\023\n\010lmDataID\030\016 \001(\004:\0010\022\025\n\nlmUniqueID"
    "\030\017 \001(\004:\0010\022\036\n\023lmRupFramesQuantity\030\020 \001(\005:\001"
    "0\"\033\n\031GetDataSourcesInfoRequest\"\\\n\027GetDat"
    "aSourcesInfoReply\022\020\n\005error\030\001 \001(\005:\0010\022/\n\016d"
    "ataSourceInfo\030\002 \003(\0132\027.Network.DataSource"
    "Info\"\254\006\n\022AppDataSourceState\022\r\n\002id\030\001 \001(\004:"
    "\0010\022\033\n\014dataReceives\030\002 \001(\010:\005false\022\021\n\006uptim"
    "e\030\003 \001(\003:\0010\022\031\n\016receivedDataID\030\004 \001(\004:\0010\022\035\n"
    "\022rupFramesQueueSize\030\005 \001(\005:\0010\022 \n\025rupFrame"
    "sQueueMaxSize\030\006 \001(\005:\0010\022\034\n\021dataReceivingR"
    "ate\030\007 \001(\001:\0010\022\033\n\020receivedDataSize\030\010 \001(\003:\001"
    "0\022\036\n\023receivedFramesCount\030\t \001(\003:\0010\022\036\n\023rec"
    "eivedPacketCount\030\n \001(\003:\0010\022\034\n\021lostedPacke"
    "tCount\030\013 \001(\003:\0010\022$\n\025dataProcessingEnabled"
    "\030\014 \001(\010:\005false\022\037\n\024processedPacketCount\030\r "
    "\001(\003:\0010\022\037\n\024lastPacketSystemTime\030\016 \001(\003:\0010\022"
    "\034\n\021rupFramePlantTime\030\017 \001(\003:\0010\022\034\n\021rupFram"
    "eNumerator\030\020 \001(\005:\0010\022 \n\025signalStatesQueue"
    "Size\030\021 \001(\005:\0010\022#\n\030signalStatesQueueMaxSiz"
    "e\030\022 \001(\005:\0010\022\037\n\024acquiredSignalsCount\030\023 \001(\005"
    ":\0010\022\037\n\024errorProtocolVersion\030\024 \001(\003:\0010\022\036\n\023"
    "errorFramesQuantity\030\025 \001(\003:\0010\022\027\n\014errorFra"
    "meNo\030\026 \001(\003:\0010\022\026\n\013errorDataID\030\027 \001(\003:\0010\022\031\n"
    "\016errorFrameSize\030\030 \001(\003:\0010\022\"\n\027errorDuplica"
    "tePlantTime\030\031 \001(\003:\0010\022%\n\032errorNonmonotoni"
    "cPlantTime\030\032 \001(\003:\0010\"k\n\034GetAppDataSources"
    "StatesReply\022\020\n\005error\030\001 \001(\005:\0010\0229\n\024appData"
    "SourcesStates\030\002 \003(\0132\033.Network.AppDataSou"
    "rceState\"\021\n\017GetUnitsRequest\" \n\004Unit\022\n\n\002i"
    "d\030\001 \001(\005\022\014\n\004unit\030\002 \001(\t\"\?\n\rGetUnitsReply\022\020"
    "\n\005error\030\001 \001(\005:\0010\022\034\n\005units\030\002 \003(\0132\r.Networ"
    "k.Unit\"\325\001\n\023AppDataServiceState\022$\n\025CfgSer"
    "viceIsConnected\030\001 \002(\010:\005false\022\027\n\014CfgServi"
    "ceIp\030\002 \001(\r:\0010\022\031\n\016CfgServicePort\030\003 \001(\005:\0010"
    "\022(\n\031ArchiveServiceIsConnected\030\004 \002(\010:\005fal"
    "se\022\033\n\020ArchiveServiceIp\030\005 \001(\r:\0010\022\035\n\022Archi"
    "veServicePort\030\006 \001(\005:\0010\"\344\001\n\014SoftwareInfo\022"
    "\032\n\014softwareType\030\001 \002(\005:\0048000\022\023\n\013equipment"
    "Id\030\002 \002(\t\022\027\n\014majorVersion\030\003 \002(\005:\0010\022\027\n\014min"
    "orVersion\030\004 \002(\005:\0010\022\023\n\010commitNo\030\005 \002(\005:\0010\022"
    "\023\n\013buildBranch\030\006 \002(\t\022\021\n\tcommitSHA\030\007 \002(\t\022"
    "\020\n\010userName\030\010 \002(\t\022\022\n\007buildNo\030\t \002(\005:\0010\022\016\n"
    "\003crc\030\n \002(\r:\0010\"\027\n\025GetServiceInfoRequest\"\272"
    "\001\n\013ServiceInfo\022+\n\014softwareInfo\030\001 \002(\0132\025.N"
    "etwork.SoftwareInfo\022\021\n\006uptime\030\002 \001(\003:\0010\022\027"
    "\n\014serviceState\030\003 \001(\005:\0010\022\030\n\rserviceUptime"
    "\030\004 \001(\003:\0010\022\032\n\017clientRequestIP\030\005 \001(\r:\0010\022\034\n"
    "\021clientRequestPort\030\006 \001(\005:\0010\"R\n\023GetServic"
    "eInfoReply\022\020\n\005error\030\001 \002(\005:\0010\022)\n\013serviceI"
    "nfo\030\002 \002(\0132\024.Network.ServiceInfo\"x\n\031Confi"
    "gurationServiceState\022\035\n\025currentBuildDire"
    "ctory\030\001 \002(\t\022!\n\031checkBuildAttemptQuantity"
    "\030\002 \002(\005\022\031\n\021buildCheckerState\030\003 \002(\005\"\205\001\n\021Se"
    "rviceClientInfo\022\n\n\002ip\030\003 \002(\005\022\016\n\006uptime\030\005 "
    "\002(\003\022\020\n\010isActual\030\006 \002(\010\022\025\n\rreplyQuantity\030\007"
    " \002(\003\022+\n\014softwareInfo\030\013 \002(\0132\025.Network.Sof"
    "twareInfo\"=\n\016ServiceClients\022+\n\007clients\030\001"
    " \003(\0132\032.Network.ServiceClientInfo\"\213\001\n\tBui"
    "ldInfo\022\017\n\007project\030\001 \002(\t\022\016\n\002id\030\002 \002(\005:\002-1\022"
    "\026\n\007release\030\003 \002(\010:\005false\022\014\n\004date\030\004 \002(\003\022\024\n"
    "\tchangeset\030\005 \002(\005:\0010\022\014\n\004user\030\006 \002(\t\022\023\n\013wor"
    "kstation\030\007 \002(\t\"e\n\034ConfigurationServiceSe"
    "ttings\022\023\n\013equipmentID\030\001 \002(\t\022\031\n\021autoloadB"
    "uildPath\030\002 \002(\t\022\025\n\rworkDirectory\030\003 \002(\t\"L\n"
    "\017ServiceSettings\022\023\n\013equipmentID\030\001 \002(\t\022\021\n"
    "\tconfigIP1\030\002 \002(\t\022\021\n\tconfigIP2\030\003 \002(\t\"\026\n\024G"
    "etTuningSourcesInfo\"\263\001\n\031GetTuningSources"
    "InfoReply\022\020\n\005error\030\001 \001(\005:\0010\0221\n\020tuningSou"
    "rceInfo\030\002 \003(\0132\027.Network.DataSourceInfo\022!"
    "\n\023singleLmControlMode\030\003 \001(\010:\004true\022\026\n\016act"
    "iveClientID\030\004 \001(\t\022\026\n\016activeClientIP\030\005 \001("
    "\t\"\030\n\026GetTuningSourcesStates\"G\n\037SignalsAs"
    "sociatedToTuningSource\022\020\n\010sourceID\030\001 \002(\004"
    "\022\022\n\nsignalHash\030\002 \003(\004\"n\n\023TuningSourceFill"
    "ing\022\023\n\013signalCount\030\001 \002(\004\022B\n\020signalsPerSo"
    "urce\030\002 \003(\0132(.Network.SignalsAssociatedTo"
    "TuningSource\"\325\n\n\021TuningSourceState\022\023\n\010so"
    "urceID\030\001 \001(\004:\0010\022\026\n\007isReply\030\002 \001(\010:\005false\022"
    "\027\n\014requestCount\030\003 \001(\003:\0010\022\025\n\nreplyCount\030\004"
    " \001(\003:\0010\022\033\n\020commandQueueSize\030\005 \001(\005:\0010\022\034\n\021"
    "errUntimelyReplay\030\006 \001(\003:\0010\022\022\n\007errSent\030\007 "
    "\001(\003:\0010\022\031\n\016errPartialSent\030\010 \001(\003:\0010\022\027\n\014err"
    "ReplySize\030\t \001(\003:\0010\022\025\n\nerrNoReply\030\n \001(\003:\001"
    "0\022 \n\025errRupProtocolVersion\030\013 \001(\003:\0010\022\032\n\017e"
    "rrRupFrameSize\030\014 \001(\003:\0010\022\036\n\023errRupNonTuni"
    "ngData\030\r \001(\003:\0010\022\033\n\020errRupModuleType\030\016 \001("
    "\003:\0010\022\037\n\024errRupFramesQuantity\030\017 \001(\003:\0010\022\034\n"
    "\021errRupFrameNumber\030\020 \001(\003:\0010\022\"\n\027errFotipP"
    "rotocolVersion\030\021 \001(\003:\0010\022\033\n\020errFotipUniqu"
    "eID\030\022 \001(\003:\0010\022\033\n\020errFotipLmNumber\030\023 \001(\003:\001"
    "0\022 \n\025errFotipSubsystemCode\030\024 \001(\003:\0010\022 \n\025e"
    "rrFotipOperationCode\030\025 \001(\003:\0010\022\034\n\021errFoti"
    "pFrameSize\030\026 \001(\003:\0010\022\032\n\017errFotipRomSize\030\027"
    " \001(\003:\0010\022\037\n\024errFotipRomFrameSize\030\030 \001(\003:\0010"
    "\022&\n\033fotipFlagBoundsCheckSuccess\030\031 \001(\003:\0010"
    "\022 \n\025fotipFlagWriteSuccess\030\032 \001(\003:\0010\022\037\n\024fo"
    "tipFlagDataTypeErr\030\033 \001(\003:\0010\022\035\n\022fotipFlag"
    "OpCodeErr\030\034 \001(\003:\0010\022 \n\025fotipFlagStartAddr"
    "Err\030\035 \001(\003:\0010\022\036\n\023fotipFlagRomSizeErr\030\036 \001("
    "\003:\0010\022#\n\030fotipFlagRomFrameSizeErr\030\037 \001(\003:\001"
    "0\022 \n\025fotipFlagFrameSizeErr\030  \001(\003:\0010\022&\n\033f"
    "otipFlagProtocolVersionErr\030! \001(\003:\0010\022#\n\030f"
    "otipFlagSubsystemKeyErr\030\" \001(\003:\0010\022\036\n\023foti"
    "pFlagUniueIDErr\030# \001(\003:\0010\022\035\n\022fotipFlagOff"
    "setErr\030$ \001(\003:\0010\022 \n\025fotipFlagApplySuccess"
    "\030% \001(\003:\0010\022\032\n\017fotipFlagSetSOR\030& \001(\003:\0010\022!\n"
    "\026errAnalogLowBoundCheck\030\' \001(\003:\0010\022\"\n\027errA"
    "nalogHighBoundCheck\030( \001(\003:\0010\022\024\n\terrRupCR"
    "C\030) \001(\003:\0010\022\036\n\017controlIsActive\030* \001(\010:\005fal"
    "se\022\025\n\006setSOR\030+ \001(\010:\005false\022!\n\022hasUnapplie"
    "dParams\030, \001(\010:\005false\"\272\001\n\033GetTuningSource"
    "sStatesReply\022\020\n\005error\030\001 \001(\005:\0010\0226\n\022tuning"
    "SourcesState\030\002 \003(\0132\032.Network.TuningSourc"
    "eState\022!\n\023singleLmControlMode\030\003 \001(\010:\004tru"
    "e\022\026\n\016activeClientID\030\004 \001(\t\022\026\n\016activeClien"
    "tIP\030\005 \001(\t\"z\n\"ChangeConrolledTuningSource"
    "Request\022\023\n\013takeControl\030\001 \001(\010\022\037\n\027tuningSo"
    "urceEquipmentID\030\002 \001(\t\022\036\n\017activateControl"
    "\030\003 \001(\010:\005false\"\177\n ChangeConrolledTuningSo"
    "urceReply\022\020\n\005error\030\001 \001(\005:\0010\022)\n!controlle"
    "dTuningSourceEquipmentID\030\002 \001(\t\022\036\n\017contro"
    "lIsActive\030\003 \001(\010:\005false\"\'\n\021TuningSignalsR"
    "ead\022\022\n\nsignalHash\030\002 \003(\004\"\233\003\n\021TuningSignal"
    "State\022\025\n\nsignalHash\030\001 \001(\006:\0010\022\020\n\005error\030\002 "
    "\001(\005:\0010\022\024\n\005valid\030\003 \001(\010:\005false\022!\n\005value\030\004 "
    "\001(\0132\022.Proto.TuningValue\022(\n\014readLowBound\030"
    "\005 \001(\0132\022.Proto.TuningValue\022)\n\rreadHighBou"
    "nd\030\006 \001(\0132\022.Proto.TuningValue\022\036\n\017writeInP"
    "rogress\030\007 \001(\010:\005false\022\031\n\016writeErrorCode\030\010"
    " \001(\005:\0010\022\026\n\013writeClient\030\t \001(\006:\0010\022\035\n\022succe"
    "ssfulReadTime\030\n \001(\020:\0010\022\033\n\020writeRequestTi"
    "me\030\013 \001(\020:\0010\022\036\n\023successfulWriteTime\030\014 \001(\020"
    ":\0010\022 \n\025unsuccessfulWriteTime\030\r \001(\020:\0010\"a\n"
    "\026TuningSignalsReadReply\022\020\n\005error\030\001 \001(\005:\001"
    "0\0225\n\021tuningSignalState\030\002 \003(\0132\032.Network.T"
    "uningSignalState\"N\n\022TuningWriteCommand\022\025"
    "\n\nsignalHash\030\001 \001(\004:\0010\022!\n\005value\030\002 \001(\0132\022.P"
    "roto.TuningValue\"]\n\022TuningSignalsWrite\022\030"
    "\n\tautoApply\030\002 \001(\010:\005false\022-\n\010commands\030\003 \003"
    "(\0132\033.Network.TuningWriteCommand\"B\n\027Tunin"
    "gSignalWriteResult\022\025\n\nsignalHash\030\001 \001(\004:\001"
    "0\022\020\n\005error\030\002 \001(\005:\0010\"b\n\027TuningSignalsWrit"
    "eReply\022\020\n\005error\030\001 \001(\005:\0010\0225\n\013writeResult\030"
    "\002 \003(\0132 .Network.TuningSignalWriteResult\""
    "\024\n\022TuningSignalsApply\"+\n\027TuningSignalsAp"
    "plyReply\022\020\n\005error\030\001 \001(\005:\0010\"q\n$SaveAppSig"
    "nalsStatesToArchiveRequest\022\031\n\021clientEqui"
    "pmentID\030\001 \001(\t\022.\n\017appSignalStates\030\002 \003(\0132\025"
    ".Proto.AppSignalState\"N\n\"SaveAppSignalsS"
    "tatesToArchiveReply\022\020\n\005error\030\001 \001(\005:\0010\022\026\n"
    "\tarchError\030\002 \001(\005:\003100\"\271\001\n)GetAppSignalSt"
    "atesFromArchiveStartRequest\022\031\n\021clientEqu"
    "ipmentID\030\001 \001(\t\022\023\n\010timeType\030\002 \001(\005:\0011\022\024\n\ts"
    "tartTime\030\003 \001(\020:\0010\022\022\n\007endTime\030\004 \001(\020:\0010\022\024\n"
    "\014signalHashes\030\005 \003(\004\022\034\n\016removePeriodic\030\006 "
    "\001(\010:\004true\"~\n\'GetAppSignalStatesFromArchi"
    "veStartReply\022\020\n\005error\030\001 \001(\005:\0010\022\026\n\tarchEr"
    "ror\030\002 \001(\005:\003100\022\023\n\013errorString\030\004 \001(\t\022\024\n\tr"
    "equestID\030\003 \001(\r:\0010\"@\n(GetAppSignalStatesF"
    "romArchiveNextRequest\022\024\n\trequestID\030\001 \001(\r"
    ":\0010\"\271\002\n&GetAppSignalStatesFromArchiveNex"
    "tReply\022\020\n\005error\030\001 \001(\005:\0010\022\026\n\tarchError\030\002 "
    "\001(\005:\003100\022\024\n\trequestID\030\003 \001(\r:\0010\022\023\n\013errorS"
    "tring\030\n \001(\t\022\030\n\tdataReady\030\004 \001(\010:\005false\022\033\n"
    "\020totalStatesCount\030\005 \001(\005:\0010\022\032\n\017sentStates"
    "Count\030\006 \001(\005:\0010\022\034\n\021statesInPartCount\030\007 \001("
    "\005:\0010\022\031\n\nisLastPart\030\010 \001(\010:\005false\022.\n\017appSi"
    "gnalStates\030\t \003(\0132\025.Proto.AppSignalState\""
    "B\n*GetAppSignalStatesFromArchiveCancelRe"
    "quest\022\024\n\trequestID\030\001 \001(\r:\0010\"i\n(GetAppSig"
    "nalStatesFromArchiveCancelReply\022\020\n\005error"
    "\030\001 \001(\005:\0010\022\026\n\tarchError\030\002 \001(\005:\003100\022\023\n\013err"
    "orString\030\003 \001(\t\"\204\001\n\031RtTrendsManagementReq"
    "uest\022\031\n\021clientEquipmentID\030\001 \001(\t\022\024\n\014sampl"
    "ePeriod\030\002 \001(\005\022\032\n\022appendSignalHashes\030\003 \003("
    "\004\022\032\n\022deleteSignalHashes\030\004 \003(\004\"@\n\027RtTrend"
    "sManagementReply\022\020\n\005error\030\001 \001(\005:\0010\022\023\n\013er"
    "rorString\030\002 \001(\t\" \n\036RtTrendsGetStateChang"
    "esRequest\"r\n\034RtTrendsGetStateChangesRepl"
    "y\022\020\n\005error\030\001 \001(\005:\0010\022\023\n\013errorString\030\002 \001(\t"
    "\022+\n\014signalStates\030\003 \003(\0132\025.Proto.AppSignal"
    "State", 8245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network.proto", &protobuf_RegisterTypes);
  GetSignalListStartRequest::default_instance_ = new GetSignalListStartRequest();
  GetSignalListStartReply::default_instance_ = new GetSignalListStartReply();
  GetSignalListNextRequest::default_instance_ = new GetSignalListNextRequest();
  GetSignalListNextReply::default_instance_ = new GetSignalListNextReply();
  GetAppSignalParamRequest::default_instance_ = new GetAppSignalParamRequest();
  GetAppSignalParamReply::default_instance_ = new GetAppSignalParamReply();
  GetAppSignalRequest::default_instance_ = new GetAppSignalRequest();
  GetAppSignalReply::default_instance_ = new GetAppSignalReply();
  GetAppSignalStateRequest::default_instance_ = new GetAppSignalStateRequest();
  GetAppSignalStateReply::default_instance_ = new GetAppSignalStateReply();
  DataSourceInfo::default_instance_ = new DataSourceInfo();
  GetDataSourcesInfoRequest::default_instance_ = new GetDataSourcesInfoRequest();
  GetDataSourcesInfoReply::default_instance_ = new GetDataSourcesInfoReply();
  AppDataSourceState::default_instance_ = new AppDataSourceState();
  GetAppDataSourcesStatesReply::default_instance_ = new GetAppDataSourcesStatesReply();
  GetUnitsRequest::default_instance_ = new GetUnitsRequest();
  Unit::default_instance_ = new Unit();
  GetUnitsReply::default_instance_ = new GetUnitsReply();
  AppDataServiceState::default_instance_ = new AppDataServiceState();
  SoftwareInfo::default_instance_ = new SoftwareInfo();
  GetServiceInfoRequest::default_instance_ = new GetServiceInfoRequest();
  ServiceInfo::default_instance_ = new ServiceInfo();
  GetServiceInfoReply::default_instance_ = new GetServiceInfoReply();
  ConfigurationServiceState::default_instance_ = new ConfigurationServiceState();
  ServiceClientInfo::default_instance_ = new ServiceClientInfo();
  ServiceClients::default_instance_ = new ServiceClients();
  BuildInfo::default_instance_ = new BuildInfo();
  ConfigurationServiceSettings::default_instance_ = new ConfigurationServiceSettings();
  ServiceSettings::default_instance_ = new ServiceSettings();
  GetTuningSourcesInfo::default_instance_ = new GetTuningSourcesInfo();
  GetTuningSourcesInfoReply::default_instance_ = new GetTuningSourcesInfoReply();
  GetTuningSourcesStates::default_instance_ = new GetTuningSourcesStates();
  SignalsAssociatedToTuningSource::default_instance_ = new SignalsAssociatedToTuningSource();
  TuningSourceFilling::default_instance_ = new TuningSourceFilling();
  TuningSourceState::default_instance_ = new TuningSourceState();
  GetTuningSourcesStatesReply::default_instance_ = new GetTuningSourcesStatesReply();
  ChangeConrolledTuningSourceRequest::default_instance_ = new ChangeConrolledTuningSourceRequest();
  ChangeConrolledTuningSourceReply::default_instance_ = new ChangeConrolledTuningSourceReply();
  TuningSignalsRead::default_instance_ = new TuningSignalsRead();
  TuningSignalState::default_instance_ = new TuningSignalState();
  TuningSignalsReadReply::default_instance_ = new TuningSignalsReadReply();
  TuningWriteCommand::default_instance_ = new TuningWriteCommand();
  TuningSignalsWrite::default_instance_ = new TuningSignalsWrite();
  TuningSignalWriteResult::default_instance_ = new TuningSignalWriteResult();
  TuningSignalsWriteReply::default_instance_ = new TuningSignalsWriteReply();
  TuningSignalsApply::default_instance_ = new TuningSignalsApply();
  TuningSignalsApplyReply::default_instance_ = new TuningSignalsApplyReply();
  SaveAppSignalsStatesToArchiveRequest::default_instance_ = new SaveAppSignalsStatesToArchiveRequest();
  SaveAppSignalsStatesToArchiveReply::default_instance_ = new SaveAppSignalsStatesToArchiveReply();
  GetAppSignalStatesFromArchiveStartRequest::default_instance_ = new GetAppSignalStatesFromArchiveStartRequest();
  GetAppSignalStatesFromArchiveStartReply::default_instance_ = new GetAppSignalStatesFromArchiveStartReply();
  GetAppSignalStatesFromArchiveNextRequest::default_instance_ = new GetAppSignalStatesFromArchiveNextRequest();
  GetAppSignalStatesFromArchiveNextReply::default_instance_ = new GetAppSignalStatesFromArchiveNextReply();
  GetAppSignalStatesFromArchiveCancelRequest::default_instance_ = new GetAppSignalStatesFromArchiveCancelRequest();
  GetAppSignalStatesFromArchiveCancelReply::default_instance_ = new GetAppSignalStatesFromArchiveCancelReply();
  RtTrendsManagementRequest::default_instance_ = new RtTrendsManagementRequest();
  RtTrendsManagementReply::default_instance_ = new RtTrendsManagementReply();
  RtTrendsGetStateChangesRequest::default_instance_ = new RtTrendsGetStateChangesRequest();
  RtTrendsGetStateChangesReply::default_instance_ = new RtTrendsGetStateChangesReply();
  GetSignalListStartRequest::default_instance_->InitAsDefaultInstance();
  GetSignalListStartReply::default_instance_->InitAsDefaultInstance();
  GetSignalListNextRequest::default_instance_->InitAsDefaultInstance();
  GetSignalListNextReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalParamRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalParamReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalStateRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalStateReply::default_instance_->InitAsDefaultInstance();
  DataSourceInfo::default_instance_->InitAsDefaultInstance();
  GetDataSourcesInfoRequest::default_instance_->InitAsDefaultInstance();
  GetDataSourcesInfoReply::default_instance_->InitAsDefaultInstance();
  AppDataSourceState::default_instance_->InitAsDefaultInstance();
  GetAppDataSourcesStatesReply::default_instance_->InitAsDefaultInstance();
  GetUnitsRequest::default_instance_->InitAsDefaultInstance();
  Unit::default_instance_->InitAsDefaultInstance();
  GetUnitsReply::default_instance_->InitAsDefaultInstance();
  AppDataServiceState::default_instance_->InitAsDefaultInstance();
  SoftwareInfo::default_instance_->InitAsDefaultInstance();
  GetServiceInfoRequest::default_instance_->InitAsDefaultInstance();
  ServiceInfo::default_instance_->InitAsDefaultInstance();
  GetServiceInfoReply::default_instance_->InitAsDefaultInstance();
  ConfigurationServiceState::default_instance_->InitAsDefaultInstance();
  ServiceClientInfo::default_instance_->InitAsDefaultInstance();
  ServiceClients::default_instance_->InitAsDefaultInstance();
  BuildInfo::default_instance_->InitAsDefaultInstance();
  ConfigurationServiceSettings::default_instance_->InitAsDefaultInstance();
  ServiceSettings::default_instance_->InitAsDefaultInstance();
  GetTuningSourcesInfo::default_instance_->InitAsDefaultInstance();
  GetTuningSourcesInfoReply::default_instance_->InitAsDefaultInstance();
  GetTuningSourcesStates::default_instance_->InitAsDefaultInstance();
  SignalsAssociatedToTuningSource::default_instance_->InitAsDefaultInstance();
  TuningSourceFilling::default_instance_->InitAsDefaultInstance();
  TuningSourceState::default_instance_->InitAsDefaultInstance();
  GetTuningSourcesStatesReply::default_instance_->InitAsDefaultInstance();
  ChangeConrolledTuningSourceRequest::default_instance_->InitAsDefaultInstance();
  ChangeConrolledTuningSourceReply::default_instance_->InitAsDefaultInstance();
  TuningSignalsRead::default_instance_->InitAsDefaultInstance();
  TuningSignalState::default_instance_->InitAsDefaultInstance();
  TuningSignalsReadReply::default_instance_->InitAsDefaultInstance();
  TuningWriteCommand::default_instance_->InitAsDefaultInstance();
  TuningSignalsWrite::default_instance_->InitAsDefaultInstance();
  TuningSignalWriteResult::default_instance_->InitAsDefaultInstance();
  TuningSignalsWriteReply::default_instance_->InitAsDefaultInstance();
  TuningSignalsApply::default_instance_->InitAsDefaultInstance();
  TuningSignalsApplyReply::default_instance_->InitAsDefaultInstance();
  SaveAppSignalsStatesToArchiveRequest::default_instance_->InitAsDefaultInstance();
  SaveAppSignalsStatesToArchiveReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalStatesFromArchiveStartRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalStatesFromArchiveStartReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalStatesFromArchiveNextRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalStatesFromArchiveNextReply::default_instance_->InitAsDefaultInstance();
  GetAppSignalStatesFromArchiveCancelRequest::default_instance_->InitAsDefaultInstance();
  GetAppSignalStatesFromArchiveCancelReply::default_instance_->InitAsDefaultInstance();
  RtTrendsManagementRequest::default_instance_->InitAsDefaultInstance();
  RtTrendsManagementReply::default_instance_->InitAsDefaultInstance();
  RtTrendsGetStateChangesRequest::default_instance_->InitAsDefaultInstance();
  RtTrendsGetStateChangesReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_2eproto {
  StaticDescriptorInitializer_network_2eproto() {
    protobuf_AddDesc_network_2eproto();
  }
} static_descriptor_initializer_network_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSignalListStartRequest::GetSignalListStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListStartRequest::InitAsDefaultInstance() {
}

GetSignalListStartRequest::GetSignalListStartRequest(const GetSignalListStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListStartRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListStartRequest::~GetSignalListStartRequest() {
  SharedDtor();
}

void GetSignalListStartRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListStartRequest_descriptor_;
}

const GetSignalListStartRequest& GetSignalListStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListStartRequest* GetSignalListStartRequest::default_instance_ = NULL;

GetSignalListStartRequest* GetSignalListStartRequest::New() const {
  return new GetSignalListStartRequest;
}

void GetSignalListStartRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSignalListStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListStartRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListStartRequest::MergeFrom(const GetSignalListStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartRequest::CopyFrom(const GetSignalListStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartRequest::IsInitialized() const {

  return true;
}

void GetSignalListStartRequest::Swap(GetSignalListStartRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListStartRequest_descriptor_;
  metadata.reflection = GetSignalListStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListStartReply::kErrorFieldNumber;
const int GetSignalListStartReply::kTotalItemCountFieldNumber;
const int GetSignalListStartReply::kPartCountFieldNumber;
const int GetSignalListStartReply::kItemsPerPartFieldNumber;
#endif  // !_MSC_VER

GetSignalListStartReply::GetSignalListStartReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListStartReply::InitAsDefaultInstance() {
}

GetSignalListStartReply::GetSignalListStartReply(const GetSignalListStartReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListStartReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  totalitemcount_ = 0;
  partcount_ = 0;
  itemsperpart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListStartReply::~GetSignalListStartReply() {
  SharedDtor();
}

void GetSignalListStartReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListStartReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListStartReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListStartReply_descriptor_;
}

const GetSignalListStartReply& GetSignalListStartReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListStartReply* GetSignalListStartReply::default_instance_ = NULL;

GetSignalListStartReply* GetSignalListStartReply::New() const {
  return new GetSignalListStartReply;
}

void GetSignalListStartReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    totalitemcount_ = 0;
    partcount_ = 0;
    itemsperpart_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListStartReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalItemCount;
        break;
      }

      // optional int32 totalItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalitemcount_)));
          set_has_totalitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partCount;
        break;
      }

      // optional int32 partCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partcount_)));
          set_has_partcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemsPerPart;
        break;
      }

      // optional int32 itemsPerPart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsPerPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsperpart_)));
          set_has_itemsperpart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListStartReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 totalItemCount = 2;
  if (has_totalitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalitemcount(), output);
  }

  // optional int32 partCount = 3;
  if (has_partcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partcount(), output);
  }

  // optional int32 itemsPerPart = 4;
  if (has_itemsperpart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemsperpart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListStartReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 totalItemCount = 2;
  if (has_totalitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalitemcount(), target);
  }

  // optional int32 partCount = 3;
  if (has_partcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partcount(), target);
  }

  // optional int32 itemsPerPart = 4;
  if (has_itemsperpart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemsperpart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListStartReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 totalItemCount = 2;
    if (has_totalitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalitemcount());
    }

    // optional int32 partCount = 3;
    if (has_partcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partcount());
    }

    // optional int32 itemsPerPart = 4;
    if (has_itemsperpart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemsperpart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListStartReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListStartReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListStartReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListStartReply::MergeFrom(const GetSignalListStartReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_totalitemcount()) {
      set_totalitemcount(from.totalitemcount());
    }
    if (from.has_partcount()) {
      set_partcount(from.partcount());
    }
    if (from.has_itemsperpart()) {
      set_itemsperpart(from.itemsperpart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListStartReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartReply::CopyFrom(const GetSignalListStartReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartReply::IsInitialized() const {

  return true;
}

void GetSignalListStartReply::Swap(GetSignalListStartReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(totalitemcount_, other->totalitemcount_);
    std::swap(partcount_, other->partcount_);
    std::swap(itemsperpart_, other->itemsperpart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListStartReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListStartReply_descriptor_;
  metadata.reflection = GetSignalListStartReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListNextRequest::kPartFieldNumber;
#endif  // !_MSC_VER

GetSignalListNextRequest::GetSignalListNextRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListNextRequest::InitAsDefaultInstance() {
}

GetSignalListNextRequest::GetSignalListNextRequest(const GetSignalListNextRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListNextRequest::SharedCtor() {
  _cached_size_ = 0;
  part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListNextRequest::~GetSignalListNextRequest() {
  SharedDtor();
}

void GetSignalListNextRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListNextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListNextRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListNextRequest_descriptor_;
}

const GetSignalListNextRequest& GetSignalListNextRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListNextRequest* GetSignalListNextRequest::default_instance_ = NULL;

GetSignalListNextRequest* GetSignalListNextRequest::New() const {
  return new GetSignalListNextRequest;
}

void GetSignalListNextRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListNextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListNextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 part = 1;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListNextRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 part = 1;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListNextRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 part = 1;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListNextRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListNextRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListNextRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListNextRequest::MergeFrom(const GetSignalListNextRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListNextRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextRequest::CopyFrom(const GetSignalListNextRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextRequest::IsInitialized() const {

  return true;
}

void GetSignalListNextRequest::Swap(GetSignalListNextRequest* other) {
  if (other != this) {
    std::swap(part_, other->part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListNextRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListNextRequest_descriptor_;
  metadata.reflection = GetSignalListNextRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListNextReply::kErrorFieldNumber;
const int GetSignalListNextReply::kPartFieldNumber;
const int GetSignalListNextReply::kAppSignalIdsFieldNumber;
#endif  // !_MSC_VER

GetSignalListNextReply::GetSignalListNextReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListNextReply::InitAsDefaultInstance() {
}

GetSignalListNextReply::GetSignalListNextReply(const GetSignalListNextReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListNextReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListNextReply::~GetSignalListNextReply() {
  SharedDtor();
}

void GetSignalListNextReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListNextReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListNextReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListNextReply_descriptor_;
}

const GetSignalListNextReply& GetSignalListNextReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListNextReply* GetSignalListNextReply::default_instance_ = NULL;

GetSignalListNextReply* GetSignalListNextReply::New() const {
  return new GetSignalListNextReply;
}

void GetSignalListNextReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    part_ = 0;
  }
  appsignalids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListNextReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part;
        break;
      }

      // optional int32 part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalIds;
        break;
      }

      // repeated string appSignalIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_appsignalids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appsignalids(this->appsignalids_size() - 1).data(),
            this->appsignalids(this->appsignalids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListNextReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->part(), output);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0; i < this->appsignalids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->appsignalids(i).data(), this->appsignalids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appsignalids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListNextReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 part = 2;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->part(), target);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalids(i).data(), this->appsignalids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->appsignalids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListNextReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

  }
  // repeated string appSignalIds = 3;
  total_size += 1 * this->appsignalids_size();
  for (int i = 0; i < this->appsignalids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->appsignalids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListNextReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListNextReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListNextReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListNextReply::MergeFrom(const GetSignalListNextReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalids_.MergeFrom(from.appsignalids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListNextReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextReply::CopyFrom(const GetSignalListNextReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextReply::IsInitialized() const {

  return true;
}

void GetSignalListNextReply::Swap(GetSignalListNextReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(part_, other->part_);
    appsignalids_.Swap(&other->appsignalids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListNextReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListNextReply_descriptor_;
  metadata.reflection = GetSignalListNextReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalParamRequest::kSignalHashesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalParamRequest::GetAppSignalParamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalParamRequest::InitAsDefaultInstance() {
}

GetAppSignalParamRequest::GetAppSignalParamRequest(const GetAppSignalParamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalParamRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalParamRequest::~GetAppSignalParamRequest() {
  SharedDtor();
}

void GetAppSignalParamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalParamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalParamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalParamRequest_descriptor_;
}

const GetAppSignalParamRequest& GetAppSignalParamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalParamRequest* GetAppSignalParamRequest::default_instance_ = NULL;

GetAppSignalParamRequest* GetAppSignalParamRequest::New() const {
  return new GetAppSignalParamRequest;
}

void GetAppSignalParamRequest::Clear() {
  signalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalParamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 signalHashes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_signalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_signalHashes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalParamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->signalhashes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalParamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->signalhashes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalParamRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 signalHashes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhashes(i));
    }
    total_size += 1 * this->signalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalParamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalParamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalParamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalParamRequest::MergeFrom(const GetAppSignalParamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhashes_.MergeFrom(from.signalhashes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalParamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalParamRequest::CopyFrom(const GetAppSignalParamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalParamRequest::IsInitialized() const {

  return true;
}

void GetAppSignalParamRequest::Swap(GetAppSignalParamRequest* other) {
  if (other != this) {
    signalhashes_.Swap(&other->signalhashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalParamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalParamRequest_descriptor_;
  metadata.reflection = GetAppSignalParamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalParamReply::kErrorFieldNumber;
const int GetAppSignalParamReply::kAppSignalsFieldNumber;
#endif  // !_MSC_VER

GetAppSignalParamReply::GetAppSignalParamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalParamReply::InitAsDefaultInstance() {
}

GetAppSignalParamReply::GetAppSignalParamReply(const GetAppSignalParamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalParamReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalParamReply::~GetAppSignalParamReply() {
  SharedDtor();
}

void GetAppSignalParamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalParamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalParamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalParamReply_descriptor_;
}

const GetAppSignalParamReply& GetAppSignalParamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalParamReply* GetAppSignalParamReply::default_instance_ = NULL;

GetAppSignalParamReply* GetAppSignalParamReply::New() const {
  return new GetAppSignalParamReply;
}

void GetAppSignalParamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appsignals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalParamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignals;
        break;
      }

      // repeated .Proto.AppSignal appSignals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalParamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Proto.AppSignal appSignals = 2;
  for (int i = 0; i < this->appsignals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appsignals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalParamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Proto.AppSignal appSignals = 2;
  for (int i = 0; i < this->appsignals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appsignals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalParamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Proto.AppSignal appSignals = 2;
  total_size += 1 * this->appsignals_size();
  for (int i = 0; i < this->appsignals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalParamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalParamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalParamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalParamReply::MergeFrom(const GetAppSignalParamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignals_.MergeFrom(from.appsignals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalParamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalParamReply::CopyFrom(const GetAppSignalParamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalParamReply::IsInitialized() const {

  for (int i = 0; i < appsignals_size(); i++) {
    if (!this->appsignals(i).IsInitialized()) return false;
  }
  return true;
}

void GetAppSignalParamReply::Swap(GetAppSignalParamReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appsignals_.Swap(&other->appsignals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalParamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalParamReply_descriptor_;
  metadata.reflection = GetAppSignalParamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalRequest::kSignalHashesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalRequest::GetAppSignalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalRequest::InitAsDefaultInstance() {
}

GetAppSignalRequest::GetAppSignalRequest(const GetAppSignalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalRequest::~GetAppSignalRequest() {
  SharedDtor();
}

void GetAppSignalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalRequest_descriptor_;
}

const GetAppSignalRequest& GetAppSignalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalRequest* GetAppSignalRequest::default_instance_ = NULL;

GetAppSignalRequest* GetAppSignalRequest::New() const {
  return new GetAppSignalRequest;
}

void GetAppSignalRequest::Clear() {
  signalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 signalHashes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_signalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_signalHashes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->signalhashes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->signalhashes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 signalHashes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhashes(i));
    }
    total_size += 1 * this->signalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalRequest::MergeFrom(const GetAppSignalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhashes_.MergeFrom(from.signalhashes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalRequest::CopyFrom(const GetAppSignalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalRequest::IsInitialized() const {

  return true;
}

void GetAppSignalRequest::Swap(GetAppSignalRequest* other) {
  if (other != this) {
    signalhashes_.Swap(&other->signalhashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalRequest_descriptor_;
  metadata.reflection = GetAppSignalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalReply::kErrorFieldNumber;
const int GetAppSignalReply::kAppSignalsFieldNumber;
#endif  // !_MSC_VER

GetAppSignalReply::GetAppSignalReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalReply::InitAsDefaultInstance() {
}

GetAppSignalReply::GetAppSignalReply(const GetAppSignalReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalReply::~GetAppSignalReply() {
  SharedDtor();
}

void GetAppSignalReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalReply_descriptor_;
}

const GetAppSignalReply& GetAppSignalReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalReply* GetAppSignalReply::default_instance_ = NULL;

GetAppSignalReply* GetAppSignalReply::New() const {
  return new GetAppSignalReply;
}

void GetAppSignalReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appsignals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignals;
        break;
      }

      // repeated .Proto.AppSignal appSignals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Proto.AppSignal appSignals = 2;
  for (int i = 0; i < this->appsignals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appsignals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Proto.AppSignal appSignals = 2;
  for (int i = 0; i < this->appsignals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appsignals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Proto.AppSignal appSignals = 2;
  total_size += 1 * this->appsignals_size();
  for (int i = 0; i < this->appsignals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalReply::MergeFrom(const GetAppSignalReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignals_.MergeFrom(from.appsignals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalReply::CopyFrom(const GetAppSignalReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalReply::IsInitialized() const {

  for (int i = 0; i < appsignals_size(); i++) {
    if (!this->appsignals(i).IsInitialized()) return false;
  }
  return true;
}

void GetAppSignalReply::Swap(GetAppSignalReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appsignals_.Swap(&other->appsignals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalReply_descriptor_;
  metadata.reflection = GetAppSignalReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStateRequest::kSignalHashesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStateRequest::GetAppSignalStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStateRequest::InitAsDefaultInstance() {
}

GetAppSignalStateRequest::GetAppSignalStateRequest(const GetAppSignalStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStateRequest::~GetAppSignalStateRequest() {
  SharedDtor();
}

void GetAppSignalStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStateRequest_descriptor_;
}

const GetAppSignalStateRequest& GetAppSignalStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStateRequest* GetAppSignalStateRequest::default_instance_ = NULL;

GetAppSignalStateRequest* GetAppSignalStateRequest::New() const {
  return new GetAppSignalStateRequest;
}

void GetAppSignalStateRequest::Clear() {
  signalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 signalHashes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_signalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_signalHashes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->signalhashes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 signalHashes = 1;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->signalhashes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStateRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 signalHashes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhashes(i));
    }
    total_size += 1 * this->signalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStateRequest::MergeFrom(const GetAppSignalStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhashes_.MergeFrom(from.signalhashes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateRequest::CopyFrom(const GetAppSignalStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateRequest::IsInitialized() const {

  return true;
}

void GetAppSignalStateRequest::Swap(GetAppSignalStateRequest* other) {
  if (other != this) {
    signalhashes_.Swap(&other->signalhashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStateRequest_descriptor_;
  metadata.reflection = GetAppSignalStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStateReply::kErrorFieldNumber;
const int GetAppSignalStateReply::kAppSignalStatesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStateReply::GetAppSignalStateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStateReply::InitAsDefaultInstance() {
}

GetAppSignalStateReply::GetAppSignalStateReply(const GetAppSignalStateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStateReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStateReply::~GetAppSignalStateReply() {
  SharedDtor();
}

void GetAppSignalStateReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalStateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStateReply_descriptor_;
}

const GetAppSignalStateReply& GetAppSignalStateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStateReply* GetAppSignalStateReply::default_instance_ = NULL;

GetAppSignalStateReply* GetAppSignalStateReply::New() const {
  return new GetAppSignalStateReply;
}

void GetAppSignalStateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appsignalstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalStates;
        break;
      }

      // repeated .Proto.AppSignalState appSignalStates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appsignalstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appsignalstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Proto.AppSignalState appSignalStates = 2;
  total_size += 1 * this->appsignalstates_size();
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStateReply::MergeFrom(const GetAppSignalStateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalstates_.MergeFrom(from.appsignalstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStateReply::CopyFrom(const GetAppSignalStateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStateReply::IsInitialized() const {

  return true;
}

void GetAppSignalStateReply::Swap(GetAppSignalStateReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appsignalstates_.Swap(&other->appsignalstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStateReply_descriptor_;
  metadata.reflection = GetAppSignalStateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataSourceInfo::kIdFieldNumber;
const int DataSourceInfo::kLmEquipmentIDFieldNumber;
const int DataSourceInfo::kLmCaptionFieldNumber;
const int DataSourceInfo::kLmDataTypeFieldNumber;
const int DataSourceInfo::kLmIPFieldNumber;
const int DataSourceInfo::kLmPortFieldNumber;
const int DataSourceInfo::kLmSubsystemIDFieldNumber;
const int DataSourceInfo::kLmSubsystemFieldNumber;
const int DataSourceInfo::kLmSubsystemChannelFieldNumber;
const int DataSourceInfo::kLmNumberFieldNumber;
const int DataSourceInfo::kLmModuleTypeFieldNumber;
const int DataSourceInfo::kLmAdapterIDFieldNumber;
const int DataSourceInfo::kLmDataEnableFieldNumber;
const int DataSourceInfo::kLmDataIDFieldNumber;
const int DataSourceInfo::kLmUniqueIDFieldNumber;
const int DataSourceInfo::kLmRupFramesQuantityFieldNumber;
#endif  // !_MSC_VER

DataSourceInfo::DataSourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataSourceInfo::InitAsDefaultInstance() {
}

DataSourceInfo::DataSourceInfo(const DataSourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataSourceInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  lmequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmcaption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmdatatype_ = 0;
  lmip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmport_ = 0;
  lmsubsystemid_ = 0;
  lmsubsystem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmsubsystemchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmnumber_ = 0;
  lmmoduletype_ = 0;
  lmadapterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmdataenable_ = false;
  lmdataid_ = GOOGLE_ULONGLONG(0);
  lmuniqueid_ = GOOGLE_ULONGLONG(0);
  lmrupframesquantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSourceInfo::~DataSourceInfo() {
  SharedDtor();
}

void DataSourceInfo::SharedDtor() {
  if (lmequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete lmequipmentid_;
  }
  if (lmcaption_ != &::google::protobuf::internal::kEmptyString) {
    delete lmcaption_;
  }
  if (lmip_ != &::google::protobuf::internal::kEmptyString) {
    delete lmip_;
  }
  if (lmsubsystem_ != &::google::protobuf::internal::kEmptyString) {
    delete lmsubsystem_;
  }
  if (lmsubsystemchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete lmsubsystemchannel_;
  }
  if (lmadapterid_ != &::google::protobuf::internal::kEmptyString) {
    delete lmadapterid_;
  }
  if (this != default_instance_) {
  }
}

void DataSourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSourceInfo_descriptor_;
}

const DataSourceInfo& DataSourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

DataSourceInfo* DataSourceInfo::default_instance_ = NULL;

DataSourceInfo* DataSourceInfo::New() const {
  return new DataSourceInfo;
}

void DataSourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_lmequipmentid()) {
      if (lmequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        lmequipmentid_->clear();
      }
    }
    if (has_lmcaption()) {
      if (lmcaption_ != &::google::protobuf::internal::kEmptyString) {
        lmcaption_->clear();
      }
    }
    lmdatatype_ = 0;
    if (has_lmip()) {
      if (lmip_ != &::google::protobuf::internal::kEmptyString) {
        lmip_->clear();
      }
    }
    lmport_ = 0;
    lmsubsystemid_ = 0;
    if (has_lmsubsystem()) {
      if (lmsubsystem_ != &::google::protobuf::internal::kEmptyString) {
        lmsubsystem_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lmsubsystemchannel()) {
      if (lmsubsystemchannel_ != &::google::protobuf::internal::kEmptyString) {
        lmsubsystemchannel_->clear();
      }
    }
    lmnumber_ = 0;
    lmmoduletype_ = 0;
    if (has_lmadapterid()) {
      if (lmadapterid_ != &::google::protobuf::internal::kEmptyString) {
        lmadapterid_->clear();
      }
    }
    lmdataenable_ = false;
    lmdataid_ = GOOGLE_ULONGLONG(0);
    lmuniqueid_ = GOOGLE_ULONGLONG(0);
    lmrupframesquantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataSourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lmEquipmentID;
        break;
      }

      // optional string lmEquipmentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmEquipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmequipmentid().data(), this->lmequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lmCaption;
        break;
      }

      // optional string lmCaption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmCaption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmcaption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmcaption().data(), this->lmcaption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lmDataType;
        break;
      }

      // optional int32 lmDataType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmDataType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmdatatype_)));
          set_has_lmdatatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lmIP;
        break;
      }

      // optional string lmIP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmip().data(), this->lmip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lmPort;
        break;
      }

      // optional int32 lmPort = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmport_)));
          set_has_lmport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lmSubsystemID;
        break;
      }

      // optional int32 lmSubsystemID = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmSubsystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmsubsystemid_)));
          set_has_lmsubsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lmSubsystem;
        break;
      }

      // optional string lmSubsystem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmSubsystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmsubsystem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmsubsystem().data(), this->lmsubsystem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_lmSubsystemChannel;
        break;
      }

      // optional string lmSubsystemChannel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmSubsystemChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmsubsystemchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmsubsystemchannel().data(), this->lmsubsystemchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lmNumber;
        break;
      }

      // optional int32 lmNumber = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmnumber_)));
          set_has_lmnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lmModuleType;
        break;
      }

      // optional int32 lmModuleType = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmModuleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmmoduletype_)));
          set_has_lmmoduletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_lmAdapterID;
        break;
      }

      // optional string lmAdapterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmAdapterID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmadapterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmadapterid().data(), this->lmadapterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lmDataEnable;
        break;
      }

      // optional bool lmDataEnable = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmDataEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lmdataenable_)));
          set_has_lmdataenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lmDataID;
        break;
      }

      // optional uint64 lmDataID = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lmdataid_)));
          set_has_lmdataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lmUniqueID;
        break;
      }

      // optional uint64 lmUniqueID = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmUniqueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lmuniqueid_)));
          set_has_lmuniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lmRupFramesQuantity;
        break;
      }

      // optional int32 lmRupFramesQuantity = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmRupFramesQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmrupframesquantity_)));
          set_has_lmrupframesquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataSourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string lmEquipmentID = 2;
  if (has_lmequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmequipmentid().data(), this->lmequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lmequipmentid(), output);
  }

  // optional string lmCaption = 3;
  if (has_lmcaption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmcaption().data(), this->lmcaption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lmcaption(), output);
  }

  // optional int32 lmDataType = 4 [default = 0];
  if (has_lmdatatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lmdatatype(), output);
  }

  // optional string lmIP = 5;
  if (has_lmip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmip().data(), this->lmip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lmip(), output);
  }

  // optional int32 lmPort = 6 [default = 0];
  if (has_lmport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lmport(), output);
  }

  // optional int32 lmSubsystemID = 7 [default = 0];
  if (has_lmsubsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lmsubsystemid(), output);
  }

  // optional string lmSubsystem = 8;
  if (has_lmsubsystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmsubsystem().data(), this->lmsubsystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lmsubsystem(), output);
  }

  // optional string lmSubsystemChannel = 9;
  if (has_lmsubsystemchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmsubsystemchannel().data(), this->lmsubsystemchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lmsubsystemchannel(), output);
  }

  // optional int32 lmNumber = 10 [default = 0];
  if (has_lmnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lmnumber(), output);
  }

  // optional int32 lmModuleType = 11 [default = 0];
  if (has_lmmoduletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lmmoduletype(), output);
  }

  // optional string lmAdapterID = 12;
  if (has_lmadapterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmadapterid().data(), this->lmadapterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->lmadapterid(), output);
  }

  // optional bool lmDataEnable = 13 [default = false];
  if (has_lmdataenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->lmdataenable(), output);
  }

  // optional uint64 lmDataID = 14 [default = 0];
  if (has_lmdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->lmdataid(), output);
  }

  // optional uint64 lmUniqueID = 15 [default = 0];
  if (has_lmuniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->lmuniqueid(), output);
  }

  // optional int32 lmRupFramesQuantity = 16 [default = 0];
  if (has_lmrupframesquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lmrupframesquantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataSourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string lmEquipmentID = 2;
  if (has_lmequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmequipmentid().data(), this->lmequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lmequipmentid(), target);
  }

  // optional string lmCaption = 3;
  if (has_lmcaption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmcaption().data(), this->lmcaption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lmcaption(), target);
  }

  // optional int32 lmDataType = 4 [default = 0];
  if (has_lmdatatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lmdatatype(), target);
  }

  // optional string lmIP = 5;
  if (has_lmip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmip().data(), this->lmip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lmip(), target);
  }

  // optional int32 lmPort = 6 [default = 0];
  if (has_lmport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lmport(), target);
  }

  // optional int32 lmSubsystemID = 7 [default = 0];
  if (has_lmsubsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lmsubsystemid(), target);
  }

  // optional string lmSubsystem = 8;
  if (has_lmsubsystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmsubsystem().data(), this->lmsubsystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lmsubsystem(), target);
  }

  // optional string lmSubsystemChannel = 9;
  if (has_lmsubsystemchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmsubsystemchannel().data(), this->lmsubsystemchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lmsubsystemchannel(), target);
  }

  // optional int32 lmNumber = 10 [default = 0];
  if (has_lmnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lmnumber(), target);
  }

  // optional int32 lmModuleType = 11 [default = 0];
  if (has_lmmoduletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lmmoduletype(), target);
  }

  // optional string lmAdapterID = 12;
  if (has_lmadapterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmadapterid().data(), this->lmadapterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lmadapterid(), target);
  }

  // optional bool lmDataEnable = 13 [default = false];
  if (has_lmdataenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->lmdataenable(), target);
  }

  // optional uint64 lmDataID = 14 [default = 0];
  if (has_lmdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->lmdataid(), target);
  }

  // optional uint64 lmUniqueID = 15 [default = 0];
  if (has_lmuniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->lmuniqueid(), target);
  }

  // optional int32 lmRupFramesQuantity = 16 [default = 0];
  if (has_lmrupframesquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lmrupframesquantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataSourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string lmEquipmentID = 2;
    if (has_lmequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmequipmentid());
    }

    // optional string lmCaption = 3;
    if (has_lmcaption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmcaption());
    }

    // optional int32 lmDataType = 4 [default = 0];
    if (has_lmdatatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmdatatype());
    }

    // optional string lmIP = 5;
    if (has_lmip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmip());
    }

    // optional int32 lmPort = 6 [default = 0];
    if (has_lmport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmport());
    }

    // optional int32 lmSubsystemID = 7 [default = 0];
    if (has_lmsubsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmsubsystemid());
    }

    // optional string lmSubsystem = 8;
    if (has_lmsubsystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmsubsystem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string lmSubsystemChannel = 9;
    if (has_lmsubsystemchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmsubsystemchannel());
    }

    // optional int32 lmNumber = 10 [default = 0];
    if (has_lmnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmnumber());
    }

    // optional int32 lmModuleType = 11 [default = 0];
    if (has_lmmoduletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmmoduletype());
    }

    // optional string lmAdapterID = 12;
    if (has_lmadapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmadapterid());
    }

    // optional bool lmDataEnable = 13 [default = false];
    if (has_lmdataenable()) {
      total_size += 1 + 1;
    }

    // optional uint64 lmDataID = 14 [default = 0];
    if (has_lmdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lmdataid());
    }

    // optional uint64 lmUniqueID = 15 [default = 0];
    if (has_lmuniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lmuniqueid());
    }

    // optional int32 lmRupFramesQuantity = 16 [default = 0];
    if (has_lmrupframesquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmrupframesquantity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataSourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataSourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSourceInfo::MergeFrom(const DataSourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lmequipmentid()) {
      set_lmequipmentid(from.lmequipmentid());
    }
    if (from.has_lmcaption()) {
      set_lmcaption(from.lmcaption());
    }
    if (from.has_lmdatatype()) {
      set_lmdatatype(from.lmdatatype());
    }
    if (from.has_lmip()) {
      set_lmip(from.lmip());
    }
    if (from.has_lmport()) {
      set_lmport(from.lmport());
    }
    if (from.has_lmsubsystemid()) {
      set_lmsubsystemid(from.lmsubsystemid());
    }
    if (from.has_lmsubsystem()) {
      set_lmsubsystem(from.lmsubsystem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lmsubsystemchannel()) {
      set_lmsubsystemchannel(from.lmsubsystemchannel());
    }
    if (from.has_lmnumber()) {
      set_lmnumber(from.lmnumber());
    }
    if (from.has_lmmoduletype()) {
      set_lmmoduletype(from.lmmoduletype());
    }
    if (from.has_lmadapterid()) {
      set_lmadapterid(from.lmadapterid());
    }
    if (from.has_lmdataenable()) {
      set_lmdataenable(from.lmdataenable());
    }
    if (from.has_lmdataid()) {
      set_lmdataid(from.lmdataid());
    }
    if (from.has_lmuniqueid()) {
      set_lmuniqueid(from.lmuniqueid());
    }
    if (from.has_lmrupframesquantity()) {
      set_lmrupframesquantity(from.lmrupframesquantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataSourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceInfo::CopyFrom(const DataSourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceInfo::IsInitialized() const {

  return true;
}

void DataSourceInfo::Swap(DataSourceInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lmequipmentid_, other->lmequipmentid_);
    std::swap(lmcaption_, other->lmcaption_);
    std::swap(lmdatatype_, other->lmdatatype_);
    std::swap(lmip_, other->lmip_);
    std::swap(lmport_, other->lmport_);
    std::swap(lmsubsystemid_, other->lmsubsystemid_);
    std::swap(lmsubsystem_, other->lmsubsystem_);
    std::swap(lmsubsystemchannel_, other->lmsubsystemchannel_);
    std::swap(lmnumber_, other->lmnumber_);
    std::swap(lmmoduletype_, other->lmmoduletype_);
    std::swap(lmadapterid_, other->lmadapterid_);
    std::swap(lmdataenable_, other->lmdataenable_);
    std::swap(lmdataid_, other->lmdataid_);
    std::swap(lmuniqueid_, other->lmuniqueid_);
    std::swap(lmrupframesquantity_, other->lmrupframesquantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataSourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSourceInfo_descriptor_;
  metadata.reflection = DataSourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetDataSourcesInfoRequest::GetDataSourcesInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataSourcesInfoRequest::InitAsDefaultInstance() {
}

GetDataSourcesInfoRequest::GetDataSourcesInfoRequest(const GetDataSourcesInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataSourcesInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataSourcesInfoRequest::~GetDataSourcesInfoRequest() {
  SharedDtor();
}

void GetDataSourcesInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataSourcesInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataSourcesInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataSourcesInfoRequest_descriptor_;
}

const GetDataSourcesInfoRequest& GetDataSourcesInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetDataSourcesInfoRequest* GetDataSourcesInfoRequest::default_instance_ = NULL;

GetDataSourcesInfoRequest* GetDataSourcesInfoRequest::New() const {
  return new GetDataSourcesInfoRequest;
}

void GetDataSourcesInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataSourcesInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetDataSourcesInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataSourcesInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataSourcesInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataSourcesInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataSourcesInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataSourcesInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataSourcesInfoRequest::MergeFrom(const GetDataSourcesInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataSourcesInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataSourcesInfoRequest::CopyFrom(const GetDataSourcesInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataSourcesInfoRequest::IsInitialized() const {

  return true;
}

void GetDataSourcesInfoRequest::Swap(GetDataSourcesInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataSourcesInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataSourcesInfoRequest_descriptor_;
  metadata.reflection = GetDataSourcesInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDataSourcesInfoReply::kErrorFieldNumber;
const int GetDataSourcesInfoReply::kDataSourceInfoFieldNumber;
#endif  // !_MSC_VER

GetDataSourcesInfoReply::GetDataSourcesInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataSourcesInfoReply::InitAsDefaultInstance() {
}

GetDataSourcesInfoReply::GetDataSourcesInfoReply(const GetDataSourcesInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataSourcesInfoReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataSourcesInfoReply::~GetDataSourcesInfoReply() {
  SharedDtor();
}

void GetDataSourcesInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataSourcesInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataSourcesInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataSourcesInfoReply_descriptor_;
}

const GetDataSourcesInfoReply& GetDataSourcesInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetDataSourcesInfoReply* GetDataSourcesInfoReply::default_instance_ = NULL;

GetDataSourcesInfoReply* GetDataSourcesInfoReply::New() const {
  return new GetDataSourcesInfoReply;
}

void GetDataSourcesInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  datasourceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataSourcesInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataSourceInfo;
        break;
      }

      // repeated .Network.DataSourceInfo dataSourceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataSourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasourceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataSourceInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDataSourcesInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  for (int i = 0; i < this->datasourceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasourceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataSourcesInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  for (int i = 0; i < this->datasourceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasourceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataSourcesInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  total_size += 1 * this->datasourceinfo_size();
  for (int i = 0; i < this->datasourceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasourceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataSourcesInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataSourcesInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataSourcesInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataSourcesInfoReply::MergeFrom(const GetDataSourcesInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasourceinfo_.MergeFrom(from.datasourceinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataSourcesInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataSourcesInfoReply::CopyFrom(const GetDataSourcesInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataSourcesInfoReply::IsInitialized() const {

  return true;
}

void GetDataSourcesInfoReply::Swap(GetDataSourcesInfoReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    datasourceinfo_.Swap(&other->datasourceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataSourcesInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataSourcesInfoReply_descriptor_;
  metadata.reflection = GetDataSourcesInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppDataSourceState::kIdFieldNumber;
const int AppDataSourceState::kDataReceivesFieldNumber;
const int AppDataSourceState::kUptimeFieldNumber;
const int AppDataSourceState::kReceivedDataIDFieldNumber;
const int AppDataSourceState::kRupFramesQueueSizeFieldNumber;
const int AppDataSourceState::kRupFramesQueueMaxSizeFieldNumber;
const int AppDataSourceState::kDataReceivingRateFieldNumber;
const int AppDataSourceState::kReceivedDataSizeFieldNumber;
const int AppDataSourceState::kReceivedFramesCountFieldNumber;
const int AppDataSourceState::kReceivedPacketCountFieldNumber;
const int AppDataSourceState::kLostedPacketCountFieldNumber;
const int AppDataSourceState::kDataProcessingEnabledFieldNumber;
const int AppDataSourceState::kProcessedPacketCountFieldNumber;
const int AppDataSourceState::kLastPacketSystemTimeFieldNumber;
const int AppDataSourceState::kRupFramePlantTimeFieldNumber;
const int AppDataSourceState::kRupFrameNumeratorFieldNumber;
const int AppDataSourceState::kSignalStatesQueueSizeFieldNumber;
const int AppDataSourceState::kSignalStatesQueueMaxSizeFieldNumber;
const int AppDataSourceState::kAcquiredSignalsCountFieldNumber;
const int AppDataSourceState::kErrorProtocolVersionFieldNumber;
const int AppDataSourceState::kErrorFramesQuantityFieldNumber;
const int AppDataSourceState::kErrorFrameNoFieldNumber;
const int AppDataSourceState::kErrorDataIDFieldNumber;
const int AppDataSourceState::kErrorFrameSizeFieldNumber;
const int AppDataSourceState::kErrorDuplicatePlantTimeFieldNumber;
const int AppDataSourceState::kErrorNonmonotonicPlantTimeFieldNumber;
#endif  // !_MSC_VER

AppDataSourceState::AppDataSourceState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppDataSourceState::InitAsDefaultInstance() {
}

AppDataSourceState::AppDataSourceState(const AppDataSourceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppDataSourceState::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  datareceives_ = false;
  uptime_ = GOOGLE_LONGLONG(0);
  receiveddataid_ = GOOGLE_ULONGLONG(0);
  rupframesqueuesize_ = 0;
  rupframesqueuemaxsize_ = 0;
  datareceivingrate_ = 0;
  receiveddatasize_ = GOOGLE_LONGLONG(0);
  receivedframescount_ = GOOGLE_LONGLONG(0);
  receivedpacketcount_ = GOOGLE_LONGLONG(0);
  lostedpacketcount_ = GOOGLE_LONGLONG(0);
  dataprocessingenabled_ = false;
  processedpacketcount_ = GOOGLE_LONGLONG(0);
  lastpacketsystemtime_ = GOOGLE_LONGLONG(0);
  rupframeplanttime_ = GOOGLE_LONGLONG(0);
  rupframenumerator_ = 0;
  signalstatesqueuesize_ = 0;
  signalstatesqueuemaxsize_ = 0;
  acquiredsignalscount_ = 0;
  errorprotocolversion_ = GOOGLE_LONGLONG(0);
  errorframesquantity_ = GOOGLE_LONGLONG(0);
  errorframeno_ = GOOGLE_LONGLONG(0);
  errordataid_ = GOOGLE_LONGLONG(0);
  errorframesize_ = GOOGLE_LONGLONG(0);
  errorduplicateplanttime_ = GOOGLE_LONGLONG(0);
  errornonmonotonicplanttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppDataSourceState::~AppDataSourceState() {
  SharedDtor();
}

void AppDataSourceState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppDataSourceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppDataSourceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppDataSourceState_descriptor_;
}

const AppDataSourceState& AppDataSourceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

AppDataSourceState* AppDataSourceState::default_instance_ = NULL;

AppDataSourceState* AppDataSourceState::New() const {
  return new AppDataSourceState;
}

void AppDataSourceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    datareceives_ = false;
    uptime_ = GOOGLE_LONGLONG(0);
    receiveddataid_ = GOOGLE_ULONGLONG(0);
    rupframesqueuesize_ = 0;
    rupframesqueuemaxsize_ = 0;
    datareceivingrate_ = 0;
    receiveddatasize_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    receivedframescount_ = GOOGLE_LONGLONG(0);
    receivedpacketcount_ = GOOGLE_LONGLONG(0);
    lostedpacketcount_ = GOOGLE_LONGLONG(0);
    dataprocessingenabled_ = false;
    processedpacketcount_ = GOOGLE_LONGLONG(0);
    lastpacketsystemtime_ = GOOGLE_LONGLONG(0);
    rupframeplanttime_ = GOOGLE_LONGLONG(0);
    rupframenumerator_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    signalstatesqueuesize_ = 0;
    signalstatesqueuemaxsize_ = 0;
    acquiredsignalscount_ = 0;
    errorprotocolversion_ = GOOGLE_LONGLONG(0);
    errorframesquantity_ = GOOGLE_LONGLONG(0);
    errorframeno_ = GOOGLE_LONGLONG(0);
    errordataid_ = GOOGLE_LONGLONG(0);
    errorframesize_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    errorduplicateplanttime_ = GOOGLE_LONGLONG(0);
    errornonmonotonicplanttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppDataSourceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataReceives;
        break;
      }

      // optional bool dataReceives = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataReceives:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &datareceives_)));
          set_has_datareceives();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uptime;
        break;
      }

      // optional int64 uptime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receivedDataID;
        break;
      }

      // optional uint64 receivedDataID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiveddataid_)));
          set_has_receiveddataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rupFramesQueueSize;
        break;
      }

      // optional int32 rupFramesQueueSize = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rupFramesQueueSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rupframesqueuesize_)));
          set_has_rupframesqueuesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rupFramesQueueMaxSize;
        break;
      }

      // optional int32 rupFramesQueueMaxSize = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rupFramesQueueMaxSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rupframesqueuemaxsize_)));
          set_has_rupframesqueuemaxsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_dataReceivingRate;
        break;
      }

      // optional double dataReceivingRate = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataReceivingRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datareceivingrate_)));
          set_has_datareceivingrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_receivedDataSize;
        break;
      }

      // optional int64 receivedDataSize = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedDataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiveddatasize_)));
          set_has_receiveddatasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_receivedFramesCount;
        break;
      }

      // optional int64 receivedFramesCount = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedFramesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedframescount_)));
          set_has_receivedframescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_receivedPacketCount;
        break;
      }

      // optional int64 receivedPacketCount = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedPacketCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedpacketcount_)));
          set_has_receivedpacketcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lostedPacketCount;
        break;
      }

      // optional int64 lostedPacketCount = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lostedPacketCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lostedpacketcount_)));
          set_has_lostedpacketcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dataProcessingEnabled;
        break;
      }

      // optional bool dataProcessingEnabled = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataProcessingEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dataprocessingenabled_)));
          set_has_dataprocessingenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_processedPacketCount;
        break;
      }

      // optional int64 processedPacketCount = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processedPacketCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processedpacketcount_)));
          set_has_processedpacketcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lastPacketSystemTime;
        break;
      }

      // optional int64 lastPacketSystemTime = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastPacketSystemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastpacketsystemtime_)));
          set_has_lastpacketsystemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rupFramePlantTime;
        break;
      }

      // optional int64 rupFramePlantTime = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rupFramePlantTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rupframeplanttime_)));
          set_has_rupframeplanttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_rupFrameNumerator;
        break;
      }

      // optional int32 rupFrameNumerator = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rupFrameNumerator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rupframenumerator_)));
          set_has_rupframenumerator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_signalStatesQueueSize;
        break;
      }

      // optional int32 signalStatesQueueSize = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalStatesQueueSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalstatesqueuesize_)));
          set_has_signalstatesqueuesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_signalStatesQueueMaxSize;
        break;
      }

      // optional int32 signalStatesQueueMaxSize = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalStatesQueueMaxSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalstatesqueuemaxsize_)));
          set_has_signalstatesqueuemaxsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_acquiredSignalsCount;
        break;
      }

      // optional int32 acquiredSignalsCount = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acquiredSignalsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acquiredsignalscount_)));
          set_has_acquiredsignalscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_errorProtocolVersion;
        break;
      }

      // optional int64 errorProtocolVersion = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorProtocolVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorprotocolversion_)));
          set_has_errorprotocolversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_errorFramesQuantity;
        break;
      }

      // optional int64 errorFramesQuantity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorFramesQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorframesquantity_)));
          set_has_errorframesquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_errorFrameNo;
        break;
      }

      // optional int64 errorFrameNo = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorFrameNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorframeno_)));
          set_has_errorframeno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_errorDataID;
        break;
      }

      // optional int64 errorDataID = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errordataid_)));
          set_has_errordataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_errorFrameSize;
        break;
      }

      // optional int64 errorFrameSize = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorFrameSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorframesize_)));
          set_has_errorframesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_errorDuplicatePlantTime;
        break;
      }

      // optional int64 errorDuplicatePlantTime = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorDuplicatePlantTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorduplicateplanttime_)));
          set_has_errorduplicateplanttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_errorNonmonotonicPlantTime;
        break;
      }

      // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNonmonotonicPlantTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errornonmonotonicplanttime_)));
          set_has_errornonmonotonicplanttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppDataSourceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bool dataReceives = 2 [default = false];
  if (has_datareceives()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->datareceives(), output);
  }

  // optional int64 uptime = 3 [default = 0];
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uptime(), output);
  }

  // optional uint64 receivedDataID = 4 [default = 0];
  if (has_receiveddataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->receiveddataid(), output);
  }

  // optional int32 rupFramesQueueSize = 5 [default = 0];
  if (has_rupframesqueuesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rupframesqueuesize(), output);
  }

  // optional int32 rupFramesQueueMaxSize = 6 [default = 0];
  if (has_rupframesqueuemaxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rupframesqueuemaxsize(), output);
  }

  // optional double dataReceivingRate = 7 [default = 0];
  if (has_datareceivingrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->datareceivingrate(), output);
  }

  // optional int64 receivedDataSize = 8 [default = 0];
  if (has_receiveddatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->receiveddatasize(), output);
  }

  // optional int64 receivedFramesCount = 9 [default = 0];
  if (has_receivedframescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->receivedframescount(), output);
  }

  // optional int64 receivedPacketCount = 10 [default = 0];
  if (has_receivedpacketcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->receivedpacketcount(), output);
  }

  // optional int64 lostedPacketCount = 11 [default = 0];
  if (has_lostedpacketcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lostedpacketcount(), output);
  }

  // optional bool dataProcessingEnabled = 12 [default = false];
  if (has_dataprocessingenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->dataprocessingenabled(), output);
  }

  // optional int64 processedPacketCount = 13 [default = 0];
  if (has_processedpacketcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->processedpacketcount(), output);
  }

  // optional int64 lastPacketSystemTime = 14 [default = 0];
  if (has_lastpacketsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->lastpacketsystemtime(), output);
  }

  // optional int64 rupFramePlantTime = 15 [default = 0];
  if (has_rupframeplanttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->rupframeplanttime(), output);
  }

  // optional int32 rupFrameNumerator = 16 [default = 0];
  if (has_rupframenumerator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->rupframenumerator(), output);
  }

  // optional int32 signalStatesQueueSize = 17 [default = 0];
  if (has_signalstatesqueuesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->signalstatesqueuesize(), output);
  }

  // optional int32 signalStatesQueueMaxSize = 18 [default = 0];
  if (has_signalstatesqueuemaxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->signalstatesqueuemaxsize(), output);
  }

  // optional int32 acquiredSignalsCount = 19 [default = 0];
  if (has_acquiredsignalscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->acquiredsignalscount(), output);
  }

  // optional int64 errorProtocolVersion = 20 [default = 0];
  if (has_errorprotocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->errorprotocolversion(), output);
  }

  // optional int64 errorFramesQuantity = 21 [default = 0];
  if (has_errorframesquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->errorframesquantity(), output);
  }

  // optional int64 errorFrameNo = 22 [default = 0];
  if (has_errorframeno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->errorframeno(), output);
  }

  // optional int64 errorDataID = 23 [default = 0];
  if (has_errordataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->errordataid(), output);
  }

  // optional int64 errorFrameSize = 24 [default = 0];
  if (has_errorframesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->errorframesize(), output);
  }

  // optional int64 errorDuplicatePlantTime = 25 [default = 0];
  if (has_errorduplicateplanttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->errorduplicateplanttime(), output);
  }

  // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
  if (has_errornonmonotonicplanttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->errornonmonotonicplanttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppDataSourceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bool dataReceives = 2 [default = false];
  if (has_datareceives()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->datareceives(), target);
  }

  // optional int64 uptime = 3 [default = 0];
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uptime(), target);
  }

  // optional uint64 receivedDataID = 4 [default = 0];
  if (has_receiveddataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->receiveddataid(), target);
  }

  // optional int32 rupFramesQueueSize = 5 [default = 0];
  if (has_rupframesqueuesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rupframesqueuesize(), target);
  }

  // optional int32 rupFramesQueueMaxSize = 6 [default = 0];
  if (has_rupframesqueuemaxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rupframesqueuemaxsize(), target);
  }

  // optional double dataReceivingRate = 7 [default = 0];
  if (has_datareceivingrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->datareceivingrate(), target);
  }

  // optional int64 receivedDataSize = 8 [default = 0];
  if (has_receiveddatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->receiveddatasize(), target);
  }

  // optional int64 receivedFramesCount = 9 [default = 0];
  if (has_receivedframescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->receivedframescount(), target);
  }

  // optional int64 receivedPacketCount = 10 [default = 0];
  if (has_receivedpacketcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->receivedpacketcount(), target);
  }

  // optional int64 lostedPacketCount = 11 [default = 0];
  if (has_lostedpacketcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->lostedpacketcount(), target);
  }

  // optional bool dataProcessingEnabled = 12 [default = false];
  if (has_dataprocessingenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->dataprocessingenabled(), target);
  }

  // optional int64 processedPacketCount = 13 [default = 0];
  if (has_processedpacketcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->processedpacketcount(), target);
  }

  // optional int64 lastPacketSystemTime = 14 [default = 0];
  if (has_lastpacketsystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->lastpacketsystemtime(), target);
  }

  // optional int64 rupFramePlantTime = 15 [default = 0];
  if (has_rupframeplanttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->rupframeplanttime(), target);
  }

  // optional int32 rupFrameNumerator = 16 [default = 0];
  if (has_rupframenumerator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->rupframenumerator(), target);
  }

  // optional int32 signalStatesQueueSize = 17 [default = 0];
  if (has_signalstatesqueuesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->signalstatesqueuesize(), target);
  }

  // optional int32 signalStatesQueueMaxSize = 18 [default = 0];
  if (has_signalstatesqueuemaxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->signalstatesqueuemaxsize(), target);
  }

  // optional int32 acquiredSignalsCount = 19 [default = 0];
  if (has_acquiredsignalscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->acquiredsignalscount(), target);
  }

  // optional int64 errorProtocolVersion = 20 [default = 0];
  if (has_errorprotocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->errorprotocolversion(), target);
  }

  // optional int64 errorFramesQuantity = 21 [default = 0];
  if (has_errorframesquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->errorframesquantity(), target);
  }

  // optional int64 errorFrameNo = 22 [default = 0];
  if (has_errorframeno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->errorframeno(), target);
  }

  // optional int64 errorDataID = 23 [default = 0];
  if (has_errordataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->errordataid(), target);
  }

  // optional int64 errorFrameSize = 24 [default = 0];
  if (has_errorframesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->errorframesize(), target);
  }

  // optional int64 errorDuplicatePlantTime = 25 [default = 0];
  if (has_errorduplicateplanttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->errorduplicateplanttime(), target);
  }

  // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
  if (has_errornonmonotonicplanttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->errornonmonotonicplanttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppDataSourceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bool dataReceives = 2 [default = false];
    if (has_datareceives()) {
      total_size += 1 + 1;
    }

    // optional int64 uptime = 3 [default = 0];
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }

    // optional uint64 receivedDataID = 4 [default = 0];
    if (has_receiveddataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiveddataid());
    }

    // optional int32 rupFramesQueueSize = 5 [default = 0];
    if (has_rupframesqueuesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rupframesqueuesize());
    }

    // optional int32 rupFramesQueueMaxSize = 6 [default = 0];
    if (has_rupframesqueuemaxsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rupframesqueuemaxsize());
    }

    // optional double dataReceivingRate = 7 [default = 0];
    if (has_datareceivingrate()) {
      total_size += 1 + 8;
    }

    // optional int64 receivedDataSize = 8 [default = 0];
    if (has_receiveddatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiveddatasize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 receivedFramesCount = 9 [default = 0];
    if (has_receivedframescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedframescount());
    }

    // optional int64 receivedPacketCount = 10 [default = 0];
    if (has_receivedpacketcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedpacketcount());
    }

    // optional int64 lostedPacketCount = 11 [default = 0];
    if (has_lostedpacketcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lostedpacketcount());
    }

    // optional bool dataProcessingEnabled = 12 [default = false];
    if (has_dataprocessingenabled()) {
      total_size += 1 + 1;
    }

    // optional int64 processedPacketCount = 13 [default = 0];
    if (has_processedpacketcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->processedpacketcount());
    }

    // optional int64 lastPacketSystemTime = 14 [default = 0];
    if (has_lastpacketsystemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastpacketsystemtime());
    }

    // optional int64 rupFramePlantTime = 15 [default = 0];
    if (has_rupframeplanttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rupframeplanttime());
    }

    // optional int32 rupFrameNumerator = 16 [default = 0];
    if (has_rupframenumerator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rupframenumerator());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 signalStatesQueueSize = 17 [default = 0];
    if (has_signalstatesqueuesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalstatesqueuesize());
    }

    // optional int32 signalStatesQueueMaxSize = 18 [default = 0];
    if (has_signalstatesqueuemaxsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalstatesqueuemaxsize());
    }

    // optional int32 acquiredSignalsCount = 19 [default = 0];
    if (has_acquiredsignalscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acquiredsignalscount());
    }

    // optional int64 errorProtocolVersion = 20 [default = 0];
    if (has_errorprotocolversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorprotocolversion());
    }

    // optional int64 errorFramesQuantity = 21 [default = 0];
    if (has_errorframesquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorframesquantity());
    }

    // optional int64 errorFrameNo = 22 [default = 0];
    if (has_errorframeno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorframeno());
    }

    // optional int64 errorDataID = 23 [default = 0];
    if (has_errordataid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errordataid());
    }

    // optional int64 errorFrameSize = 24 [default = 0];
    if (has_errorframesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorframesize());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 errorDuplicatePlantTime = 25 [default = 0];
    if (has_errorduplicateplanttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorduplicateplanttime());
    }

    // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
    if (has_errornonmonotonicplanttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errornonmonotonicplanttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppDataSourceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppDataSourceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppDataSourceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppDataSourceState::MergeFrom(const AppDataSourceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_datareceives()) {
      set_datareceives(from.datareceives());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_receiveddataid()) {
      set_receiveddataid(from.receiveddataid());
    }
    if (from.has_rupframesqueuesize()) {
      set_rupframesqueuesize(from.rupframesqueuesize());
    }
    if (from.has_rupframesqueuemaxsize()) {
      set_rupframesqueuemaxsize(from.rupframesqueuemaxsize());
    }
    if (from.has_datareceivingrate()) {
      set_datareceivingrate(from.datareceivingrate());
    }
    if (from.has_receiveddatasize()) {
      set_receiveddatasize(from.receiveddatasize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receivedframescount()) {
      set_receivedframescount(from.receivedframescount());
    }
    if (from.has_receivedpacketcount()) {
      set_receivedpacketcount(from.receivedpacketcount());
    }
    if (from.has_lostedpacketcount()) {
      set_lostedpacketcount(from.lostedpacketcount());
    }
    if (from.has_dataprocessingenabled()) {
      set_dataprocessingenabled(from.dataprocessingenabled());
    }
    if (from.has_processedpacketcount()) {
      set_processedpacketcount(from.processedpacketcount());
    }
    if (from.has_lastpacketsystemtime()) {
      set_lastpacketsystemtime(from.lastpacketsystemtime());
    }
    if (from.has_rupframeplanttime()) {
      set_rupframeplanttime(from.rupframeplanttime());
    }
    if (from.has_rupframenumerator()) {
      set_rupframenumerator(from.rupframenumerator());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_signalstatesqueuesize()) {
      set_signalstatesqueuesize(from.signalstatesqueuesize());
    }
    if (from.has_signalstatesqueuemaxsize()) {
      set_signalstatesqueuemaxsize(from.signalstatesqueuemaxsize());
    }
    if (from.has_acquiredsignalscount()) {
      set_acquiredsignalscount(from.acquiredsignalscount());
    }
    if (from.has_errorprotocolversion()) {
      set_errorprotocolversion(from.errorprotocolversion());
    }
    if (from.has_errorframesquantity()) {
      set_errorframesquantity(from.errorframesquantity());
    }
    if (from.has_errorframeno()) {
      set_errorframeno(from.errorframeno());
    }
    if (from.has_errordataid()) {
      set_errordataid(from.errordataid());
    }
    if (from.has_errorframesize()) {
      set_errorframesize(from.errorframesize());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_errorduplicateplanttime()) {
      set_errorduplicateplanttime(from.errorduplicateplanttime());
    }
    if (from.has_errornonmonotonicplanttime()) {
      set_errornonmonotonicplanttime(from.errornonmonotonicplanttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppDataSourceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataSourceState::CopyFrom(const AppDataSourceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataSourceState::IsInitialized() const {

  return true;
}

void AppDataSourceState::Swap(AppDataSourceState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(datareceives_, other->datareceives_);
    std::swap(uptime_, other->uptime_);
    std::swap(receiveddataid_, other->receiveddataid_);
    std::swap(rupframesqueuesize_, other->rupframesqueuesize_);
    std::swap(rupframesqueuemaxsize_, other->rupframesqueuemaxsize_);
    std::swap(datareceivingrate_, other->datareceivingrate_);
    std::swap(receiveddatasize_, other->receiveddatasize_);
    std::swap(receivedframescount_, other->receivedframescount_);
    std::swap(receivedpacketcount_, other->receivedpacketcount_);
    std::swap(lostedpacketcount_, other->lostedpacketcount_);
    std::swap(dataprocessingenabled_, other->dataprocessingenabled_);
    std::swap(processedpacketcount_, other->processedpacketcount_);
    std::swap(lastpacketsystemtime_, other->lastpacketsystemtime_);
    std::swap(rupframeplanttime_, other->rupframeplanttime_);
    std::swap(rupframenumerator_, other->rupframenumerator_);
    std::swap(signalstatesqueuesize_, other->signalstatesqueuesize_);
    std::swap(signalstatesqueuemaxsize_, other->signalstatesqueuemaxsize_);
    std::swap(acquiredsignalscount_, other->acquiredsignalscount_);
    std::swap(errorprotocolversion_, other->errorprotocolversion_);
    std::swap(errorframesquantity_, other->errorframesquantity_);
    std::swap(errorframeno_, other->errorframeno_);
    std::swap(errordataid_, other->errordataid_);
    std::swap(errorframesize_, other->errorframesize_);
    std::swap(errorduplicateplanttime_, other->errorduplicateplanttime_);
    std::swap(errornonmonotonicplanttime_, other->errornonmonotonicplanttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppDataSourceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppDataSourceState_descriptor_;
  metadata.reflection = AppDataSourceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppDataSourcesStatesReply::kErrorFieldNumber;
const int GetAppDataSourcesStatesReply::kAppDataSourcesStatesFieldNumber;
#endif  // !_MSC_VER

GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppDataSourcesStatesReply::InitAsDefaultInstance() {
}

GetAppDataSourcesStatesReply::GetAppDataSourcesStatesReply(const GetAppDataSourcesStatesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppDataSourcesStatesReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppDataSourcesStatesReply::~GetAppDataSourcesStatesReply() {
  SharedDtor();
}

void GetAppDataSourcesStatesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppDataSourcesStatesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppDataSourcesStatesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppDataSourcesStatesReply_descriptor_;
}

const GetAppDataSourcesStatesReply& GetAppDataSourcesStatesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppDataSourcesStatesReply* GetAppDataSourcesStatesReply::default_instance_ = NULL;

GetAppDataSourcesStatesReply* GetAppDataSourcesStatesReply::New() const {
  return new GetAppDataSourcesStatesReply;
}

void GetAppDataSourcesStatesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  appdatasourcesstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppDataSourcesStatesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appDataSourcesStates;
        break;
      }

      // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appDataSourcesStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appdatasourcesstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appDataSourcesStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppDataSourcesStatesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  for (int i = 0; i < this->appdatasourcesstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appdatasourcesstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppDataSourcesStatesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  for (int i = 0; i < this->appdatasourcesstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appdatasourcesstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppDataSourcesStatesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  total_size += 1 * this->appdatasourcesstates_size();
  for (int i = 0; i < this->appdatasourcesstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appdatasourcesstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppDataSourcesStatesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppDataSourcesStatesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppDataSourcesStatesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppDataSourcesStatesReply::MergeFrom(const GetAppDataSourcesStatesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appdatasourcesstates_.MergeFrom(from.appdatasourcesstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppDataSourcesStatesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppDataSourcesStatesReply::CopyFrom(const GetAppDataSourcesStatesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDataSourcesStatesReply::IsInitialized() const {

  return true;
}

void GetAppDataSourcesStatesReply::Swap(GetAppDataSourcesStatesReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    appdatasourcesstates_.Swap(&other->appdatasourcesstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppDataSourcesStatesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppDataSourcesStatesReply_descriptor_;
  metadata.reflection = GetAppDataSourcesStatesReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetUnitsRequest::GetUnitsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUnitsRequest::InitAsDefaultInstance() {
}

GetUnitsRequest::GetUnitsRequest(const GetUnitsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnitsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnitsRequest::~GetUnitsRequest() {
  SharedDtor();
}

void GetUnitsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnitsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUnitsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnitsRequest_descriptor_;
}

const GetUnitsRequest& GetUnitsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetUnitsRequest* GetUnitsRequest::default_instance_ = NULL;

GetUnitsRequest* GetUnitsRequest::New() const {
  return new GetUnitsRequest;
}

void GetUnitsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnitsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetUnitsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUnitsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnitsRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnitsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnitsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUnitsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnitsRequest::MergeFrom(const GetUnitsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnitsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnitsRequest::CopyFrom(const GetUnitsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnitsRequest::IsInitialized() const {

  return true;
}

void GetUnitsRequest::Swap(GetUnitsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUnitsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUnitsRequest_descriptor_;
  metadata.reflection = GetUnitsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Unit::kIdFieldNumber;
const int Unit::kUnitFieldNumber;
#endif  // !_MSC_VER

Unit::Unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unit::InitAsDefaultInstance() {
}

Unit::Unit(const Unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unit::~Unit() {
  SharedDtor();
}

void Unit::SharedDtor() {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (this != default_instance_) {
  }
}

void Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unit_descriptor_;
}

const Unit& Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

Unit* Unit::default_instance_ = NULL;

Unit* Unit::New() const {
  return new Unit;
}

void Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unit;
        break;
      }

      // optional string unit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string unit = 2;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {

  return true;
}

void Unit::Swap(Unit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unit_, other->unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unit_descriptor_;
  metadata.reflection = Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUnitsReply::kErrorFieldNumber;
const int GetUnitsReply::kUnitsFieldNumber;
#endif  // !_MSC_VER

GetUnitsReply::GetUnitsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUnitsReply::InitAsDefaultInstance() {
}

GetUnitsReply::GetUnitsReply(const GetUnitsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnitsReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnitsReply::~GetUnitsReply() {
  SharedDtor();
}

void GetUnitsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnitsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUnitsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnitsReply_descriptor_;
}

const GetUnitsReply& GetUnitsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetUnitsReply* GetUnitsReply::default_instance_ = NULL;

GetUnitsReply* GetUnitsReply::New() const {
  return new GetUnitsReply;
}

void GetUnitsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnitsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }

      // repeated .Network.Unit units = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_units;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUnitsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.Unit units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->units(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUnitsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.Unit units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnitsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.Unit units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnitsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnitsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUnitsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnitsReply::MergeFrom(const GetUnitsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnitsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnitsReply::CopyFrom(const GetUnitsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnitsReply::IsInitialized() const {

  return true;
}

void GetUnitsReply::Swap(GetUnitsReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUnitsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUnitsReply_descriptor_;
  metadata.reflection = GetUnitsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppDataServiceState::kCfgServiceIsConnectedFieldNumber;
const int AppDataServiceState::kCfgServiceIpFieldNumber;
const int AppDataServiceState::kCfgServicePortFieldNumber;
const int AppDataServiceState::kArchiveServiceIsConnectedFieldNumber;
const int AppDataServiceState::kArchiveServiceIpFieldNumber;
const int AppDataServiceState::kArchiveServicePortFieldNumber;
#endif  // !_MSC_VER

AppDataServiceState::AppDataServiceState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppDataServiceState::InitAsDefaultInstance() {
}

AppDataServiceState::AppDataServiceState(const AppDataServiceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppDataServiceState::SharedCtor() {
  _cached_size_ = 0;
  cfgserviceisconnected_ = false;
  cfgserviceip_ = 0u;
  cfgserviceport_ = 0;
  archiveserviceisconnected_ = false;
  archiveserviceip_ = 0u;
  archiveserviceport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppDataServiceState::~AppDataServiceState() {
  SharedDtor();
}

void AppDataServiceState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppDataServiceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppDataServiceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppDataServiceState_descriptor_;
}

const AppDataServiceState& AppDataServiceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

AppDataServiceState* AppDataServiceState::default_instance_ = NULL;

AppDataServiceState* AppDataServiceState::New() const {
  return new AppDataServiceState;
}

void AppDataServiceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgserviceisconnected_ = false;
    cfgserviceip_ = 0u;
    cfgserviceport_ = 0;
    archiveserviceisconnected_ = false;
    archiveserviceip_ = 0u;
    archiveserviceport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppDataServiceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool CfgServiceIsConnected = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cfgserviceisconnected_)));
          set_has_cfgserviceisconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CfgServiceIp;
        break;
      }

      // optional uint32 CfgServiceIp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CfgServiceIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgserviceip_)));
          set_has_cfgserviceip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CfgServicePort;
        break;
      }

      // optional int32 CfgServicePort = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CfgServicePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgserviceport_)));
          set_has_cfgserviceport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ArchiveServiceIsConnected;
        break;
      }

      // required bool ArchiveServiceIsConnected = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArchiveServiceIsConnected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &archiveserviceisconnected_)));
          set_has_archiveserviceisconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ArchiveServiceIp;
        break;
      }

      // optional uint32 ArchiveServiceIp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArchiveServiceIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &archiveserviceip_)));
          set_has_archiveserviceip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ArchiveServicePort;
        break;
      }

      // optional int32 ArchiveServicePort = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArchiveServicePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archiveserviceport_)));
          set_has_archiveserviceport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppDataServiceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool CfgServiceIsConnected = 1 [default = false];
  if (has_cfgserviceisconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cfgserviceisconnected(), output);
  }

  // optional uint32 CfgServiceIp = 2 [default = 0];
  if (has_cfgserviceip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgserviceip(), output);
  }

  // optional int32 CfgServicePort = 3 [default = 0];
  if (has_cfgserviceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cfgserviceport(), output);
  }

  // required bool ArchiveServiceIsConnected = 4 [default = false];
  if (has_archiveserviceisconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->archiveserviceisconnected(), output);
  }

  // optional uint32 ArchiveServiceIp = 5 [default = 0];
  if (has_archiveserviceip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->archiveserviceip(), output);
  }

  // optional int32 ArchiveServicePort = 6 [default = 0];
  if (has_archiveserviceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->archiveserviceport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppDataServiceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool CfgServiceIsConnected = 1 [default = false];
  if (has_cfgserviceisconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cfgserviceisconnected(), target);
  }

  // optional uint32 CfgServiceIp = 2 [default = 0];
  if (has_cfgserviceip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgserviceip(), target);
  }

  // optional int32 CfgServicePort = 3 [default = 0];
  if (has_cfgserviceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cfgserviceport(), target);
  }

  // required bool ArchiveServiceIsConnected = 4 [default = false];
  if (has_archiveserviceisconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->archiveserviceisconnected(), target);
  }

  // optional uint32 ArchiveServiceIp = 5 [default = 0];
  if (has_archiveserviceip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->archiveserviceip(), target);
  }

  // optional int32 ArchiveServicePort = 6 [default = 0];
  if (has_archiveserviceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->archiveserviceport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppDataServiceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool CfgServiceIsConnected = 1 [default = false];
    if (has_cfgserviceisconnected()) {
      total_size += 1 + 1;
    }

    // optional uint32 CfgServiceIp = 2 [default = 0];
    if (has_cfgserviceip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgserviceip());
    }

    // optional int32 CfgServicePort = 3 [default = 0];
    if (has_cfgserviceport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgserviceport());
    }

    // required bool ArchiveServiceIsConnected = 4 [default = false];
    if (has_archiveserviceisconnected()) {
      total_size += 1 + 1;
    }

    // optional uint32 ArchiveServiceIp = 5 [default = 0];
    if (has_archiveserviceip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->archiveserviceip());
    }

    // optional int32 ArchiveServicePort = 6 [default = 0];
    if (has_archiveserviceport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archiveserviceport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppDataServiceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppDataServiceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppDataServiceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppDataServiceState::MergeFrom(const AppDataServiceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgserviceisconnected()) {
      set_cfgserviceisconnected(from.cfgserviceisconnected());
    }
    if (from.has_cfgserviceip()) {
      set_cfgserviceip(from.cfgserviceip());
    }
    if (from.has_cfgserviceport()) {
      set_cfgserviceport(from.cfgserviceport());
    }
    if (from.has_archiveserviceisconnected()) {
      set_archiveserviceisconnected(from.archiveserviceisconnected());
    }
    if (from.has_archiveserviceip()) {
      set_archiveserviceip(from.archiveserviceip());
    }
    if (from.has_archiveserviceport()) {
      set_archiveserviceport(from.archiveserviceport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppDataServiceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataServiceState::CopyFrom(const AppDataServiceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataServiceState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void AppDataServiceState::Swap(AppDataServiceState* other) {
  if (other != this) {
    std::swap(cfgserviceisconnected_, other->cfgserviceisconnected_);
    std::swap(cfgserviceip_, other->cfgserviceip_);
    std::swap(cfgserviceport_, other->cfgserviceport_);
    std::swap(archiveserviceisconnected_, other->archiveserviceisconnected_);
    std::swap(archiveserviceip_, other->archiveserviceip_);
    std::swap(archiveserviceport_, other->archiveserviceport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppDataServiceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppDataServiceState_descriptor_;
  metadata.reflection = AppDataServiceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoftwareInfo::kSoftwareTypeFieldNumber;
const int SoftwareInfo::kEquipmentIdFieldNumber;
const int SoftwareInfo::kMajorVersionFieldNumber;
const int SoftwareInfo::kMinorVersionFieldNumber;
const int SoftwareInfo::kCommitNoFieldNumber;
const int SoftwareInfo::kBuildBranchFieldNumber;
const int SoftwareInfo::kCommitSHAFieldNumber;
const int SoftwareInfo::kUserNameFieldNumber;
const int SoftwareInfo::kBuildNoFieldNumber;
const int SoftwareInfo::kCrcFieldNumber;
#endif  // !_MSC_VER

SoftwareInfo::SoftwareInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoftwareInfo::InitAsDefaultInstance() {
}

SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoftwareInfo::SharedCtor() {
  _cached_size_ = 0;
  softwaretype_ = 8000;
  equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  majorversion_ = 0;
  minorversion_ = 0;
  commitno_ = 0;
  buildbranch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commitsha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildno_ = 0;
  crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftwareInfo::~SoftwareInfo() {
  SharedDtor();
}

void SoftwareInfo::SharedDtor() {
  if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmentid_;
  }
  if (buildbranch_ != &::google::protobuf::internal::kEmptyString) {
    delete buildbranch_;
  }
  if (commitsha_ != &::google::protobuf::internal::kEmptyString) {
    delete commitsha_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void SoftwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareInfo_descriptor_;
}

const SoftwareInfo& SoftwareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

SoftwareInfo* SoftwareInfo::default_instance_ = NULL;

SoftwareInfo* SoftwareInfo::New() const {
  return new SoftwareInfo;
}

void SoftwareInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    softwaretype_ = 8000;
    if (has_equipmentid()) {
      if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        equipmentid_->clear();
      }
    }
    majorversion_ = 0;
    minorversion_ = 0;
    commitno_ = 0;
    if (has_buildbranch()) {
      if (buildbranch_ != &::google::protobuf::internal::kEmptyString) {
        buildbranch_->clear();
      }
    }
    if (has_commitsha()) {
      if (commitsha_ != &::google::protobuf::internal::kEmptyString) {
        commitsha_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buildno_ = 0;
    crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 softwareType = 1 [default = 8000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &softwaretype_)));
          set_has_softwaretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipmentId;
        break;
      }

      // required string equipmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipmentid().data(), this->equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_majorVersion;
        break;
      }

      // required int32 majorVersion = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majorVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorversion_)));
          set_has_majorversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minorVersion;
        break;
      }

      // required int32 minorVersion = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minorVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minorversion_)));
          set_has_minorversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_commitNo;
        break;
      }

      // required int32 commitNo = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commitNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commitno_)));
          set_has_commitno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buildBranch;
        break;
      }

      // required string buildBranch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildBranch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildbranch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildbranch().data(), this->buildbranch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_commitSHA;
        break;
      }

      // required string commitSHA = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commitSHA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitsha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commitsha().data(), this->commitsha().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_userName;
        break;
      }

      // required string userName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buildNo;
        break;
      }

      // required int32 buildNo = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildno_)));
          set_has_buildno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_crc;
        break;
      }

      // required uint32 crc = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoftwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 softwareType = 1 [default = 8000];
  if (has_softwaretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->softwaretype(), output);
  }

  // required string equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->equipmentid(), output);
  }

  // required int32 majorVersion = 3 [default = 0];
  if (has_majorversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->majorversion(), output);
  }

  // required int32 minorVersion = 4 [default = 0];
  if (has_minorversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minorversion(), output);
  }

  // required int32 commitNo = 5 [default = 0];
  if (has_commitno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->commitno(), output);
  }

  // required string buildBranch = 6;
  if (has_buildbranch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildbranch().data(), this->buildbranch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->buildbranch(), output);
  }

  // required string commitSHA = 7;
  if (has_commitsha()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commitsha().data(), this->commitsha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->commitsha(), output);
  }

  // required string userName = 8;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->username(), output);
  }

  // required int32 buildNo = 9 [default = 0];
  if (has_buildno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buildno(), output);
  }

  // required uint32 crc = 10 [default = 0];
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoftwareInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 softwareType = 1 [default = 8000];
  if (has_softwaretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->softwaretype(), target);
  }

  // required string equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->equipmentid(), target);
  }

  // required int32 majorVersion = 3 [default = 0];
  if (has_majorversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->majorversion(), target);
  }

  // required int32 minorVersion = 4 [default = 0];
  if (has_minorversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minorversion(), target);
  }

  // required int32 commitNo = 5 [default = 0];
  if (has_commitno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->commitno(), target);
  }

  // required string buildBranch = 6;
  if (has_buildbranch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildbranch().data(), this->buildbranch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->buildbranch(), target);
  }

  // required string commitSHA = 7;
  if (has_commitsha()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commitsha().data(), this->commitsha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->commitsha(), target);
  }

  // required string userName = 8;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->username(), target);
  }

  // required int32 buildNo = 9 [default = 0];
  if (has_buildno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buildno(), target);
  }

  // required uint32 crc = 10 [default = 0];
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoftwareInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 softwareType = 1 [default = 8000];
    if (has_softwaretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->softwaretype());
    }

    // required string equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmentid());
    }

    // required int32 majorVersion = 3 [default = 0];
    if (has_majorversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorversion());
    }

    // required int32 minorVersion = 4 [default = 0];
    if (has_minorversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minorversion());
    }

    // required int32 commitNo = 5 [default = 0];
    if (has_commitno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commitno());
    }

    // required string buildBranch = 6;
    if (has_buildbranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildbranch());
    }

    // required string commitSHA = 7;
    if (has_commitsha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commitsha());
    }

    // required string userName = 8;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 buildNo = 9 [default = 0];
    if (has_buildno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildno());
    }

    // required uint32 crc = 10 [default = 0];
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftwareInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftwareInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_softwaretype()) {
      set_softwaretype(from.softwaretype());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_majorversion()) {
      set_majorversion(from.majorversion());
    }
    if (from.has_minorversion()) {
      set_minorversion(from.minorversion());
    }
    if (from.has_commitno()) {
      set_commitno(from.commitno());
    }
    if (from.has_buildbranch()) {
      set_buildbranch(from.buildbranch());
    }
    if (from.has_commitsha()) {
      set_commitsha(from.commitsha());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buildno()) {
      set_buildno(from.buildno());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void SoftwareInfo::Swap(SoftwareInfo* other) {
  if (other != this) {
    std::swap(softwaretype_, other->softwaretype_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(majorversion_, other->majorversion_);
    std::swap(minorversion_, other->minorversion_);
    std::swap(commitno_, other->commitno_);
    std::swap(buildbranch_, other->buildbranch_);
    std::swap(commitsha_, other->commitsha_);
    std::swap(username_, other->username_);
    std::swap(buildno_, other->buildno_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftwareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareInfo_descriptor_;
  metadata.reflection = SoftwareInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServiceInfoRequest::GetServiceInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceInfoRequest::InitAsDefaultInstance() {
}

GetServiceInfoRequest::GetServiceInfoRequest(const GetServiceInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceInfoRequest::~GetServiceInfoRequest() {
  SharedDtor();
}

void GetServiceInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServiceInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceInfoRequest_descriptor_;
}

const GetServiceInfoRequest& GetServiceInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetServiceInfoRequest* GetServiceInfoRequest::default_instance_ = NULL;

GetServiceInfoRequest* GetServiceInfoRequest::New() const {
  return new GetServiceInfoRequest;
}

void GetServiceInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServiceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceInfoRequest::MergeFrom(const GetServiceInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceInfoRequest::CopyFrom(const GetServiceInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceInfoRequest::IsInitialized() const {

  return true;
}

void GetServiceInfoRequest::Swap(GetServiceInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceInfoRequest_descriptor_;
  metadata.reflection = GetServiceInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceInfo::kSoftwareInfoFieldNumber;
const int ServiceInfo::kUptimeFieldNumber;
const int ServiceInfo::kServiceStateFieldNumber;
const int ServiceInfo::kServiceUptimeFieldNumber;
const int ServiceInfo::kClientRequestIPFieldNumber;
const int ServiceInfo::kClientRequestPortFieldNumber;
#endif  // !_MSC_VER

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceInfo::InitAsDefaultInstance() {
  softwareinfo_ = const_cast< ::Network::SoftwareInfo*>(&::Network::SoftwareInfo::default_instance());
}

ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceInfo::SharedCtor() {
  _cached_size_ = 0;
  softwareinfo_ = NULL;
  uptime_ = GOOGLE_LONGLONG(0);
  servicestate_ = 0;
  serviceuptime_ = GOOGLE_LONGLONG(0);
  clientrequestip_ = 0u;
  clientrequestport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceInfo::~ServiceInfo() {
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete softwareinfo_;
  }
}

void ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfo_descriptor_;
}

const ServiceInfo& ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ServiceInfo* ServiceInfo::default_instance_ = NULL;

ServiceInfo* ServiceInfo::New() const {
  return new ServiceInfo;
}

void ServiceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_softwareinfo()) {
      if (softwareinfo_ != NULL) softwareinfo_->::Network::SoftwareInfo::Clear();
    }
    uptime_ = GOOGLE_LONGLONG(0);
    servicestate_ = 0;
    serviceuptime_ = GOOGLE_LONGLONG(0);
    clientrequestip_ = 0u;
    clientrequestport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Network.SoftwareInfo softwareInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softwareinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uptime;
        break;
      }

      // optional int64 uptime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serviceState;
        break;
      }

      // optional int32 serviceState = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicestate_)));
          set_has_servicestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serviceUptime;
        break;
      }

      // optional int64 serviceUptime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceUptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serviceuptime_)));
          set_has_serviceuptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clientRequestIP;
        break;
      }

      // optional uint32 clientRequestIP = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientRequestIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientrequestip_)));
          set_has_clientrequestip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientRequestPort;
        break;
      }

      // optional int32 clientRequestPort = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientRequestPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientrequestport_)));
          set_has_clientrequestport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Network.SoftwareInfo softwareInfo = 1;
  if (has_softwareinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->softwareinfo(), output);
  }

  // optional int64 uptime = 2 [default = 0];
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uptime(), output);
  }

  // optional int32 serviceState = 3 [default = 0];
  if (has_servicestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servicestate(), output);
  }

  // optional int64 serviceUptime = 4 [default = 0];
  if (has_serviceuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serviceuptime(), output);
  }

  // optional uint32 clientRequestIP = 5 [default = 0];
  if (has_clientrequestip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clientrequestip(), output);
  }

  // optional int32 clientRequestPort = 6 [default = 0];
  if (has_clientrequestport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clientrequestport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Network.SoftwareInfo softwareInfo = 1;
  if (has_softwareinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->softwareinfo(), target);
  }

  // optional int64 uptime = 2 [default = 0];
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uptime(), target);
  }

  // optional int32 serviceState = 3 [default = 0];
  if (has_servicestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servicestate(), target);
  }

  // optional int64 serviceUptime = 4 [default = 0];
  if (has_serviceuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serviceuptime(), target);
  }

  // optional uint32 clientRequestIP = 5 [default = 0];
  if (has_clientrequestip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clientrequestip(), target);
  }

  // optional int32 clientRequestPort = 6 [default = 0];
  if (has_clientrequestport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clientrequestport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Network.SoftwareInfo softwareInfo = 1;
    if (has_softwareinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softwareinfo());
    }

    // optional int64 uptime = 2 [default = 0];
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }

    // optional int32 serviceState = 3 [default = 0];
    if (has_servicestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicestate());
    }

    // optional int64 serviceUptime = 4 [default = 0];
    if (has_serviceuptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serviceuptime());
    }

    // optional uint32 clientRequestIP = 5 [default = 0];
    if (has_clientrequestip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientrequestip());
    }

    // optional int32 clientRequestPort = 6 [default = 0];
    if (has_clientrequestport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientrequestport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_softwareinfo()) {
      mutable_softwareinfo()->::Network::SoftwareInfo::MergeFrom(from.softwareinfo());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_servicestate()) {
      set_servicestate(from.servicestate());
    }
    if (from.has_serviceuptime()) {
      set_serviceuptime(from.serviceuptime());
    }
    if (from.has_clientrequestip()) {
      set_clientrequestip(from.clientrequestip());
    }
    if (from.has_clientrequestport()) {
      set_clientrequestport(from.clientrequestport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_softwareinfo()) {
    if (!this->softwareinfo().IsInitialized()) return false;
  }
  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other != this) {
    std::swap(softwareinfo_, other->softwareinfo_);
    std::swap(uptime_, other->uptime_);
    std::swap(servicestate_, other->servicestate_);
    std::swap(serviceuptime_, other->serviceuptime_);
    std::swap(clientrequestip_, other->clientrequestip_);
    std::swap(clientrequestport_, other->clientrequestport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfo_descriptor_;
  metadata.reflection = ServiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceInfoReply::kErrorFieldNumber;
const int GetServiceInfoReply::kServiceInfoFieldNumber;
#endif  // !_MSC_VER

GetServiceInfoReply::GetServiceInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceInfoReply::InitAsDefaultInstance() {
  serviceinfo_ = const_cast< ::Network::ServiceInfo*>(&::Network::ServiceInfo::default_instance());
}

GetServiceInfoReply::GetServiceInfoReply(const GetServiceInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceInfoReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  serviceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceInfoReply::~GetServiceInfoReply() {
  SharedDtor();
}

void GetServiceInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete serviceinfo_;
  }
}

void GetServiceInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceInfoReply_descriptor_;
}

const GetServiceInfoReply& GetServiceInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetServiceInfoReply* GetServiceInfoReply::default_instance_ = NULL;

GetServiceInfoReply* GetServiceInfoReply::New() const {
  return new GetServiceInfoReply;
}

void GetServiceInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_serviceinfo()) {
      if (serviceinfo_ != NULL) serviceinfo_->::Network::ServiceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serviceInfo;
        break;
      }

      // required .Network.ServiceInfo serviceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // required .Network.ServiceInfo serviceInfo = 2;
  if (has_serviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serviceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // required .Network.ServiceInfo serviceInfo = 2;
  if (has_serviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serviceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required .Network.ServiceInfo serviceInfo = 2;
    if (has_serviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceInfoReply::MergeFrom(const GetServiceInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_serviceinfo()) {
      mutable_serviceinfo()->::Network::ServiceInfo::MergeFrom(from.serviceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceInfoReply::CopyFrom(const GetServiceInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_serviceinfo()) {
    if (!this->serviceinfo().IsInitialized()) return false;
  }
  return true;
}

void GetServiceInfoReply::Swap(GetServiceInfoReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(serviceinfo_, other->serviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceInfoReply_descriptor_;
  metadata.reflection = GetServiceInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationServiceState::kCurrentBuildDirectoryFieldNumber;
const int ConfigurationServiceState::kCheckBuildAttemptQuantityFieldNumber;
const int ConfigurationServiceState::kBuildCheckerStateFieldNumber;
#endif  // !_MSC_VER

ConfigurationServiceState::ConfigurationServiceState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigurationServiceState::InitAsDefaultInstance() {
}

ConfigurationServiceState::ConfigurationServiceState(const ConfigurationServiceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigurationServiceState::SharedCtor() {
  _cached_size_ = 0;
  currentbuilddirectory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checkbuildattemptquantity_ = 0;
  buildcheckerstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationServiceState::~ConfigurationServiceState() {
  SharedDtor();
}

void ConfigurationServiceState::SharedDtor() {
  if (currentbuilddirectory_ != &::google::protobuf::internal::kEmptyString) {
    delete currentbuilddirectory_;
  }
  if (this != default_instance_) {
  }
}

void ConfigurationServiceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationServiceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationServiceState_descriptor_;
}

const ConfigurationServiceState& ConfigurationServiceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ConfigurationServiceState* ConfigurationServiceState::default_instance_ = NULL;

ConfigurationServiceState* ConfigurationServiceState::New() const {
  return new ConfigurationServiceState;
}

void ConfigurationServiceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currentbuilddirectory()) {
      if (currentbuilddirectory_ != &::google::protobuf::internal::kEmptyString) {
        currentbuilddirectory_->clear();
      }
    }
    checkbuildattemptquantity_ = 0;
    buildcheckerstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationServiceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string currentBuildDirectory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentbuilddirectory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentbuilddirectory().data(), this->currentbuilddirectory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checkBuildAttemptQuantity;
        break;
      }

      // required int32 checkBuildAttemptQuantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkBuildAttemptQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkbuildattemptquantity_)));
          set_has_checkbuildattemptquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buildCheckerState;
        break;
      }

      // required int32 buildCheckerState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildCheckerState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildcheckerstate_)));
          set_has_buildcheckerstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigurationServiceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string currentBuildDirectory = 1;
  if (has_currentbuilddirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentbuilddirectory().data(), this->currentbuilddirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currentbuilddirectory(), output);
  }

  // required int32 checkBuildAttemptQuantity = 2;
  if (has_checkbuildattemptquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checkbuildattemptquantity(), output);
  }

  // required int32 buildCheckerState = 3;
  if (has_buildcheckerstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buildcheckerstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigurationServiceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string currentBuildDirectory = 1;
  if (has_currentbuilddirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentbuilddirectory().data(), this->currentbuilddirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currentbuilddirectory(), target);
  }

  // required int32 checkBuildAttemptQuantity = 2;
  if (has_checkbuildattemptquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checkbuildattemptquantity(), target);
  }

  // required int32 buildCheckerState = 3;
  if (has_buildcheckerstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buildcheckerstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigurationServiceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string currentBuildDirectory = 1;
    if (has_currentbuilddirectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentbuilddirectory());
    }

    // required int32 checkBuildAttemptQuantity = 2;
    if (has_checkbuildattemptquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkbuildattemptquantity());
    }

    // required int32 buildCheckerState = 3;
    if (has_buildcheckerstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildcheckerstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationServiceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationServiceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationServiceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationServiceState::MergeFrom(const ConfigurationServiceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentbuilddirectory()) {
      set_currentbuilddirectory(from.currentbuilddirectory());
    }
    if (from.has_checkbuildattemptquantity()) {
      set_checkbuildattemptquantity(from.checkbuildattemptquantity());
    }
    if (from.has_buildcheckerstate()) {
      set_buildcheckerstate(from.buildcheckerstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationServiceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationServiceState::CopyFrom(const ConfigurationServiceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationServiceState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConfigurationServiceState::Swap(ConfigurationServiceState* other) {
  if (other != this) {
    std::swap(currentbuilddirectory_, other->currentbuilddirectory_);
    std::swap(checkbuildattemptquantity_, other->checkbuildattemptquantity_);
    std::swap(buildcheckerstate_, other->buildcheckerstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationServiceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationServiceState_descriptor_;
  metadata.reflection = ConfigurationServiceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceClientInfo::kIpFieldNumber;
const int ServiceClientInfo::kUptimeFieldNumber;
const int ServiceClientInfo::kIsActualFieldNumber;
const int ServiceClientInfo::kReplyQuantityFieldNumber;
const int ServiceClientInfo::kSoftwareInfoFieldNumber;
#endif  // !_MSC_VER

ServiceClientInfo::ServiceClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceClientInfo::InitAsDefaultInstance() {
  softwareinfo_ = const_cast< ::Network::SoftwareInfo*>(&::Network::SoftwareInfo::default_instance());
}

ServiceClientInfo::ServiceClientInfo(const ServiceClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceClientInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  uptime_ = GOOGLE_LONGLONG(0);
  isactual_ = false;
  replyquantity_ = GOOGLE_LONGLONG(0);
  softwareinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceClientInfo::~ServiceClientInfo() {
  SharedDtor();
}

void ServiceClientInfo::SharedDtor() {
  if (this != default_instance_) {
    delete softwareinfo_;
  }
}

void ServiceClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceClientInfo_descriptor_;
}

const ServiceClientInfo& ServiceClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ServiceClientInfo* ServiceClientInfo::default_instance_ = NULL;

ServiceClientInfo* ServiceClientInfo::New() const {
  return new ServiceClientInfo;
}

void ServiceClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0;
    uptime_ = GOOGLE_LONGLONG(0);
    isactual_ = false;
    replyquantity_ = GOOGLE_LONGLONG(0);
    if (has_softwareinfo()) {
      if (softwareinfo_ != NULL) softwareinfo_->::Network::SoftwareInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uptime;
        break;
      }

      // required int64 uptime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isActual;
        break;
      }

      // required bool isActual = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactual_)));
          set_has_isactual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_replyQuantity;
        break;
      }

      // required int64 replyQuantity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replyQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replyquantity_)));
          set_has_replyquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_softwareInfo;
        break;
      }

      // required .Network.SoftwareInfo softwareInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_softwareInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softwareinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ip(), output);
  }

  // required int64 uptime = 5;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->uptime(), output);
  }

  // required bool isActual = 6;
  if (has_isactual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isactual(), output);
  }

  // required int64 replyQuantity = 7;
  if (has_replyquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->replyquantity(), output);
  }

  // required .Network.SoftwareInfo softwareInfo = 11;
  if (has_softwareinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->softwareinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ip = 3;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ip(), target);
  }

  // required int64 uptime = 5;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->uptime(), target);
  }

  // required bool isActual = 6;
  if (has_isactual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isactual(), target);
  }

  // required int64 replyQuantity = 7;
  if (has_replyquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->replyquantity(), target);
  }

  // required .Network.SoftwareInfo softwareInfo = 11;
  if (has_softwareinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->softwareinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int64 uptime = 5;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }

    // required bool isActual = 6;
    if (has_isactual()) {
      total_size += 1 + 1;
    }

    // required int64 replyQuantity = 7;
    if (has_replyquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replyquantity());
    }

    // required .Network.SoftwareInfo softwareInfo = 11;
    if (has_softwareinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softwareinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceClientInfo::MergeFrom(const ServiceClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_isactual()) {
      set_isactual(from.isactual());
    }
    if (from.has_replyquantity()) {
      set_replyquantity(from.replyquantity());
    }
    if (from.has_softwareinfo()) {
      mutable_softwareinfo()->::Network::SoftwareInfo::MergeFrom(from.softwareinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceClientInfo::CopyFrom(const ServiceClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceClientInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_softwareinfo()) {
    if (!this->softwareinfo().IsInitialized()) return false;
  }
  return true;
}

void ServiceClientInfo::Swap(ServiceClientInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(uptime_, other->uptime_);
    std::swap(isactual_, other->isactual_);
    std::swap(replyquantity_, other->replyquantity_);
    std::swap(softwareinfo_, other->softwareinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceClientInfo_descriptor_;
  metadata.reflection = ServiceClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceClients::kClientsFieldNumber;
#endif  // !_MSC_VER

ServiceClients::ServiceClients()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceClients::InitAsDefaultInstance() {
}

ServiceClients::ServiceClients(const ServiceClients& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceClients::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceClients::~ServiceClients() {
  SharedDtor();
}

void ServiceClients::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceClients::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceClients::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceClients_descriptor_;
}

const ServiceClients& ServiceClients::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ServiceClients* ServiceClients::default_instance_ = NULL;

ServiceClients* ServiceClients::New() const {
  return new ServiceClients;
}

void ServiceClients::Clear() {
  clients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceClients::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Network.ServiceClientInfo clients = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clients()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_clients;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceClients::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Network.ServiceClientInfo clients = 1;
  for (int i = 0; i < this->clients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clients(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceClients::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Network.ServiceClientInfo clients = 1;
  for (int i = 0; i < this->clients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clients(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceClients::ByteSize() const {
  int total_size = 0;

  // repeated .Network.ServiceClientInfo clients = 1;
  total_size += 1 * this->clients_size();
  for (int i = 0; i < this->clients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceClients::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceClients* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceClients*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceClients::MergeFrom(const ServiceClients& from) {
  GOOGLE_CHECK_NE(&from, this);
  clients_.MergeFrom(from.clients_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceClients::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceClients::CopyFrom(const ServiceClients& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceClients::IsInitialized() const {

  for (int i = 0; i < clients_size(); i++) {
    if (!this->clients(i).IsInitialized()) return false;
  }
  return true;
}

void ServiceClients::Swap(ServiceClients* other) {
  if (other != this) {
    clients_.Swap(&other->clients_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceClients::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceClients_descriptor_;
  metadata.reflection = ServiceClients_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildInfo::kProjectFieldNumber;
const int BuildInfo::kIdFieldNumber;
const int BuildInfo::kReleaseFieldNumber;
const int BuildInfo::kDateFieldNumber;
const int BuildInfo::kChangesetFieldNumber;
const int BuildInfo::kUserFieldNumber;
const int BuildInfo::kWorkstationFieldNumber;
#endif  // !_MSC_VER

BuildInfo::BuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildInfo::InitAsDefaultInstance() {
}

BuildInfo::BuildInfo(const BuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildInfo::SharedCtor() {
  _cached_size_ = 0;
  project_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = -1;
  release_ = false;
  date_ = GOOGLE_LONGLONG(0);
  changeset_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  workstation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildInfo::~BuildInfo() {
  SharedDtor();
}

void BuildInfo::SharedDtor() {
  if (project_ != &::google::protobuf::internal::kEmptyString) {
    delete project_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (workstation_ != &::google::protobuf::internal::kEmptyString) {
    delete workstation_;
  }
  if (this != default_instance_) {
  }
}

void BuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildInfo_descriptor_;
}

const BuildInfo& BuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

BuildInfo* BuildInfo::default_instance_ = NULL;

BuildInfo* BuildInfo::New() const {
  return new BuildInfo;
}

void BuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_project()) {
      if (project_ != &::google::protobuf::internal::kEmptyString) {
        project_->clear();
      }
    }
    id_ = -1;
    release_ = false;
    date_ = GOOGLE_LONGLONG(0);
    changeset_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_workstation()) {
      if (workstation_ != &::google::protobuf::internal::kEmptyString) {
        workstation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string project = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->project().data(), this->project().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_release;
        break;
      }

      // required bool release = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_release:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &release_)));
          set_has_release();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date;
        break;
      }

      // required int64 date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_changeset;
        break;
      }

      // required int32 changeset = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeset_)));
          set_has_changeset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // required string user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_workstation;
        break;
      }

      // required string workstation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workstation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workstation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->workstation().data(), this->workstation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->project(), output);
  }

  // required int32 id = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required bool release = 3 [default = false];
  if (has_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->release(), output);
  }

  // required int64 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->date(), output);
  }

  // required int32 changeset = 5 [default = 0];
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->changeset(), output);
  }

  // required string user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user(), output);
  }

  // required string workstation = 7;
  if (has_workstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workstation().data(), this->workstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->workstation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // required int32 id = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required bool release = 3 [default = false];
  if (has_release()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->release(), target);
  }

  // required int64 date = 4;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->date(), target);
  }

  // required int32 changeset = 5 [default = 0];
  if (has_changeset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->changeset(), target);
  }

  // required string user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user(), target);
  }

  // required string workstation = 7;
  if (has_workstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workstation().data(), this->workstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->workstation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string project = 1;
    if (has_project()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project());
    }

    // required int32 id = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool release = 3 [default = false];
    if (has_release()) {
      total_size += 1 + 1;
    }

    // required int64 date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

    // required int32 changeset = 5 [default = 0];
    if (has_changeset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeset());
    }

    // required string user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string workstation = 7;
    if (has_workstation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workstation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildInfo::MergeFrom(const BuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_project()) {
      set_project(from.project());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_release()) {
      set_release(from.release());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_changeset()) {
      set_changeset(from.changeset());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_workstation()) {
      set_workstation(from.workstation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildInfo::CopyFrom(const BuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void BuildInfo::Swap(BuildInfo* other) {
  if (other != this) {
    std::swap(project_, other->project_);
    std::swap(id_, other->id_);
    std::swap(release_, other->release_);
    std::swap(date_, other->date_);
    std::swap(changeset_, other->changeset_);
    std::swap(user_, other->user_);
    std::swap(workstation_, other->workstation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildInfo_descriptor_;
  metadata.reflection = BuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationServiceSettings::kEquipmentIDFieldNumber;
const int ConfigurationServiceSettings::kAutoloadBuildPathFieldNumber;
const int ConfigurationServiceSettings::kWorkDirectoryFieldNumber;
#endif  // !_MSC_VER

ConfigurationServiceSettings::ConfigurationServiceSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigurationServiceSettings::InitAsDefaultInstance() {
}

ConfigurationServiceSettings::ConfigurationServiceSettings(const ConfigurationServiceSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigurationServiceSettings::SharedCtor() {
  _cached_size_ = 0;
  equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autoloadbuildpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  workdirectory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationServiceSettings::~ConfigurationServiceSettings() {
  SharedDtor();
}

void ConfigurationServiceSettings::SharedDtor() {
  if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmentid_;
  }
  if (autoloadbuildpath_ != &::google::protobuf::internal::kEmptyString) {
    delete autoloadbuildpath_;
  }
  if (workdirectory_ != &::google::protobuf::internal::kEmptyString) {
    delete workdirectory_;
  }
  if (this != default_instance_) {
  }
}

void ConfigurationServiceSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationServiceSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationServiceSettings_descriptor_;
}

const ConfigurationServiceSettings& ConfigurationServiceSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ConfigurationServiceSettings* ConfigurationServiceSettings::default_instance_ = NULL;

ConfigurationServiceSettings* ConfigurationServiceSettings::New() const {
  return new ConfigurationServiceSettings;
}

void ConfigurationServiceSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equipmentid()) {
      if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        equipmentid_->clear();
      }
    }
    if (has_autoloadbuildpath()) {
      if (autoloadbuildpath_ != &::google::protobuf::internal::kEmptyString) {
        autoloadbuildpath_->clear();
      }
    }
    if (has_workdirectory()) {
      if (workdirectory_ != &::google::protobuf::internal::kEmptyString) {
        workdirectory_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationServiceSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string equipmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipmentid().data(), this->equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_autoloadBuildPath;
        break;
      }

      // required string autoloadBuildPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autoloadBuildPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoloadbuildpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->autoloadbuildpath().data(), this->autoloadbuildpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_workDirectory;
        break;
      }

      // required string workDirectory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workDirectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workdirectory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->workdirectory().data(), this->workdirectory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigurationServiceSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string equipmentID = 1;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->equipmentid(), output);
  }

  // required string autoloadBuildPath = 2;
  if (has_autoloadbuildpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->autoloadbuildpath().data(), this->autoloadbuildpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->autoloadbuildpath(), output);
  }

  // required string workDirectory = 3;
  if (has_workdirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workdirectory().data(), this->workdirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->workdirectory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigurationServiceSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string equipmentID = 1;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->equipmentid(), target);
  }

  // required string autoloadBuildPath = 2;
  if (has_autoloadbuildpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->autoloadbuildpath().data(), this->autoloadbuildpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->autoloadbuildpath(), target);
  }

  // required string workDirectory = 3;
  if (has_workdirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workdirectory().data(), this->workdirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->workdirectory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigurationServiceSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string equipmentID = 1;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmentid());
    }

    // required string autoloadBuildPath = 2;
    if (has_autoloadbuildpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoloadbuildpath());
    }

    // required string workDirectory = 3;
    if (has_workdirectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workdirectory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationServiceSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationServiceSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationServiceSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationServiceSettings::MergeFrom(const ConfigurationServiceSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_autoloadbuildpath()) {
      set_autoloadbuildpath(from.autoloadbuildpath());
    }
    if (from.has_workdirectory()) {
      set_workdirectory(from.workdirectory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationServiceSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationServiceSettings::CopyFrom(const ConfigurationServiceSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationServiceSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConfigurationServiceSettings::Swap(ConfigurationServiceSettings* other) {
  if (other != this) {
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(autoloadbuildpath_, other->autoloadbuildpath_);
    std::swap(workdirectory_, other->workdirectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationServiceSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationServiceSettings_descriptor_;
  metadata.reflection = ConfigurationServiceSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceSettings::kEquipmentIDFieldNumber;
const int ServiceSettings::kConfigIP1FieldNumber;
const int ServiceSettings::kConfigIP2FieldNumber;
#endif  // !_MSC_VER

ServiceSettings::ServiceSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceSettings::InitAsDefaultInstance() {
}

ServiceSettings::ServiceSettings(const ServiceSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceSettings::SharedCtor() {
  _cached_size_ = 0;
  equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configip2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceSettings::~ServiceSettings() {
  SharedDtor();
}

void ServiceSettings::SharedDtor() {
  if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmentid_;
  }
  if (configip1_ != &::google::protobuf::internal::kEmptyString) {
    delete configip1_;
  }
  if (configip2_ != &::google::protobuf::internal::kEmptyString) {
    delete configip2_;
  }
  if (this != default_instance_) {
  }
}

void ServiceSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceSettings_descriptor_;
}

const ServiceSettings& ServiceSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ServiceSettings* ServiceSettings::default_instance_ = NULL;

ServiceSettings* ServiceSettings::New() const {
  return new ServiceSettings;
}

void ServiceSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equipmentid()) {
      if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        equipmentid_->clear();
      }
    }
    if (has_configip1()) {
      if (configip1_ != &::google::protobuf::internal::kEmptyString) {
        configip1_->clear();
      }
    }
    if (has_configip2()) {
      if (configip2_ != &::google::protobuf::internal::kEmptyString) {
        configip2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string equipmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipmentid().data(), this->equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configIP1;
        break;
      }

      // required string configIP1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configIP1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configip1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configip1().data(), this->configip1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configIP2;
        break;
      }

      // required string configIP2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configIP2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configip2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configip2().data(), this->configip2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string equipmentID = 1;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->equipmentid(), output);
  }

  // required string configIP1 = 2;
  if (has_configip1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configip1().data(), this->configip1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->configip1(), output);
  }

  // required string configIP2 = 3;
  if (has_configip2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configip2().data(), this->configip2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->configip2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string equipmentID = 1;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->equipmentid(), target);
  }

  // required string configIP1 = 2;
  if (has_configip1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configip1().data(), this->configip1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->configip1(), target);
  }

  // required string configIP2 = 3;
  if (has_configip2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configip2().data(), this->configip2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->configip2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string equipmentID = 1;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmentid());
    }

    // required string configIP1 = 2;
    if (has_configip1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configip1());
    }

    // required string configIP2 = 3;
    if (has_configip2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configip2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceSettings::MergeFrom(const ServiceSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_configip1()) {
      set_configip1(from.configip1());
    }
    if (from.has_configip2()) {
      set_configip2(from.configip2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceSettings::CopyFrom(const ServiceSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServiceSettings::Swap(ServiceSettings* other) {
  if (other != this) {
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(configip1_, other->configip1_);
    std::swap(configip2_, other->configip2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceSettings_descriptor_;
  metadata.reflection = ServiceSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTuningSourcesInfo::GetTuningSourcesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTuningSourcesInfo::InitAsDefaultInstance() {
}

GetTuningSourcesInfo::GetTuningSourcesInfo(const GetTuningSourcesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTuningSourcesInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTuningSourcesInfo::~GetTuningSourcesInfo() {
  SharedDtor();
}

void GetTuningSourcesInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTuningSourcesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTuningSourcesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTuningSourcesInfo_descriptor_;
}

const GetTuningSourcesInfo& GetTuningSourcesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetTuningSourcesInfo* GetTuningSourcesInfo::default_instance_ = NULL;

GetTuningSourcesInfo* GetTuningSourcesInfo::New() const {
  return new GetTuningSourcesInfo;
}

void GetTuningSourcesInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTuningSourcesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTuningSourcesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTuningSourcesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTuningSourcesInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTuningSourcesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTuningSourcesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTuningSourcesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTuningSourcesInfo::MergeFrom(const GetTuningSourcesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTuningSourcesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesInfo::CopyFrom(const GetTuningSourcesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesInfo::IsInitialized() const {

  return true;
}

void GetTuningSourcesInfo::Swap(GetTuningSourcesInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTuningSourcesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTuningSourcesInfo_descriptor_;
  metadata.reflection = GetTuningSourcesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTuningSourcesInfoReply::kErrorFieldNumber;
const int GetTuningSourcesInfoReply::kTuningSourceInfoFieldNumber;
const int GetTuningSourcesInfoReply::kSingleLmControlModeFieldNumber;
const int GetTuningSourcesInfoReply::kActiveClientIDFieldNumber;
const int GetTuningSourcesInfoReply::kActiveClientIPFieldNumber;
#endif  // !_MSC_VER

GetTuningSourcesInfoReply::GetTuningSourcesInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTuningSourcesInfoReply::InitAsDefaultInstance() {
}

GetTuningSourcesInfoReply::GetTuningSourcesInfoReply(const GetTuningSourcesInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTuningSourcesInfoReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  singlelmcontrolmode_ = true;
  activeclientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activeclientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTuningSourcesInfoReply::~GetTuningSourcesInfoReply() {
  SharedDtor();
}

void GetTuningSourcesInfoReply::SharedDtor() {
  if (activeclientid_ != &::google::protobuf::internal::kEmptyString) {
    delete activeclientid_;
  }
  if (activeclientip_ != &::google::protobuf::internal::kEmptyString) {
    delete activeclientip_;
  }
  if (this != default_instance_) {
  }
}

void GetTuningSourcesInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTuningSourcesInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTuningSourcesInfoReply_descriptor_;
}

const GetTuningSourcesInfoReply& GetTuningSourcesInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetTuningSourcesInfoReply* GetTuningSourcesInfoReply::default_instance_ = NULL;

GetTuningSourcesInfoReply* GetTuningSourcesInfoReply::New() const {
  return new GetTuningSourcesInfoReply;
}

void GetTuningSourcesInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    singlelmcontrolmode_ = true;
    if (has_activeclientid()) {
      if (activeclientid_ != &::google::protobuf::internal::kEmptyString) {
        activeclientid_->clear();
      }
    }
    if (has_activeclientip()) {
      if (activeclientip_ != &::google::protobuf::internal::kEmptyString) {
        activeclientip_->clear();
      }
    }
  }
  tuningsourceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTuningSourcesInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSourceInfo;
        break;
      }

      // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningSourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuningsourceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSourceInfo;
        if (input->ExpectTag(24)) goto parse_singleLmControlMode;
        break;
      }

      // optional bool singleLmControlMode = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singleLmControlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &singlelmcontrolmode_)));
          set_has_singlelmcontrolmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeClientID;
        break;
      }

      // optional string activeClientID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeclientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activeclientid().data(), this->activeclientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_activeClientIP;
        break;
      }

      // optional string activeClientIP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeClientIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeclientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activeclientip().data(), this->activeclientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTuningSourcesInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
  for (int i = 0; i < this->tuningsourceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tuningsourceinfo(i), output);
  }

  // optional bool singleLmControlMode = 3 [default = true];
  if (has_singlelmcontrolmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->singlelmcontrolmode(), output);
  }

  // optional string activeClientID = 4;
  if (has_activeclientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientid().data(), this->activeclientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activeclientid(), output);
  }

  // optional string activeClientIP = 5;
  if (has_activeclientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientip().data(), this->activeclientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->activeclientip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTuningSourcesInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
  for (int i = 0; i < this->tuningsourceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tuningsourceinfo(i), target);
  }

  // optional bool singleLmControlMode = 3 [default = true];
  if (has_singlelmcontrolmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->singlelmcontrolmode(), target);
  }

  // optional string activeClientID = 4;
  if (has_activeclientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientid().data(), this->activeclientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activeclientid(), target);
  }

  // optional string activeClientIP = 5;
  if (has_activeclientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientip().data(), this->activeclientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->activeclientip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTuningSourcesInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional bool singleLmControlMode = 3 [default = true];
    if (has_singlelmcontrolmode()) {
      total_size += 1 + 1;
    }

    // optional string activeClientID = 4;
    if (has_activeclientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activeclientid());
    }

    // optional string activeClientIP = 5;
    if (has_activeclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activeclientip());
    }

  }
  // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
  total_size += 1 * this->tuningsourceinfo_size();
  for (int i = 0; i < this->tuningsourceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuningsourceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTuningSourcesInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTuningSourcesInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTuningSourcesInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTuningSourcesInfoReply::MergeFrom(const GetTuningSourcesInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuningsourceinfo_.MergeFrom(from.tuningsourceinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_singlelmcontrolmode()) {
      set_singlelmcontrolmode(from.singlelmcontrolmode());
    }
    if (from.has_activeclientid()) {
      set_activeclientid(from.activeclientid());
    }
    if (from.has_activeclientip()) {
      set_activeclientip(from.activeclientip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTuningSourcesInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesInfoReply::CopyFrom(const GetTuningSourcesInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesInfoReply::IsInitialized() const {

  return true;
}

void GetTuningSourcesInfoReply::Swap(GetTuningSourcesInfoReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    tuningsourceinfo_.Swap(&other->tuningsourceinfo_);
    std::swap(singlelmcontrolmode_, other->singlelmcontrolmode_);
    std::swap(activeclientid_, other->activeclientid_);
    std::swap(activeclientip_, other->activeclientip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTuningSourcesInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTuningSourcesInfoReply_descriptor_;
  metadata.reflection = GetTuningSourcesInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTuningSourcesStates::GetTuningSourcesStates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTuningSourcesStates::InitAsDefaultInstance() {
}

GetTuningSourcesStates::GetTuningSourcesStates(const GetTuningSourcesStates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTuningSourcesStates::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTuningSourcesStates::~GetTuningSourcesStates() {
  SharedDtor();
}

void GetTuningSourcesStates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTuningSourcesStates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTuningSourcesStates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTuningSourcesStates_descriptor_;
}

const GetTuningSourcesStates& GetTuningSourcesStates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetTuningSourcesStates* GetTuningSourcesStates::default_instance_ = NULL;

GetTuningSourcesStates* GetTuningSourcesStates::New() const {
  return new GetTuningSourcesStates;
}

void GetTuningSourcesStates::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTuningSourcesStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTuningSourcesStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTuningSourcesStates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTuningSourcesStates::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTuningSourcesStates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTuningSourcesStates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTuningSourcesStates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTuningSourcesStates::MergeFrom(const GetTuningSourcesStates& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTuningSourcesStates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesStates::CopyFrom(const GetTuningSourcesStates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesStates::IsInitialized() const {

  return true;
}

void GetTuningSourcesStates::Swap(GetTuningSourcesStates* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTuningSourcesStates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTuningSourcesStates_descriptor_;
  metadata.reflection = GetTuningSourcesStates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalsAssociatedToTuningSource::kSourceIDFieldNumber;
const int SignalsAssociatedToTuningSource::kSignalHashFieldNumber;
#endif  // !_MSC_VER

SignalsAssociatedToTuningSource::SignalsAssociatedToTuningSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalsAssociatedToTuningSource::InitAsDefaultInstance() {
}

SignalsAssociatedToTuningSource::SignalsAssociatedToTuningSource(const SignalsAssociatedToTuningSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalsAssociatedToTuningSource::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalsAssociatedToTuningSource::~SignalsAssociatedToTuningSource() {
  SharedDtor();
}

void SignalsAssociatedToTuningSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalsAssociatedToTuningSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalsAssociatedToTuningSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalsAssociatedToTuningSource_descriptor_;
}

const SignalsAssociatedToTuningSource& SignalsAssociatedToTuningSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

SignalsAssociatedToTuningSource* SignalsAssociatedToTuningSource::default_instance_ = NULL;

SignalsAssociatedToTuningSource* SignalsAssociatedToTuningSource::New() const {
  return new SignalsAssociatedToTuningSource;
}

void SignalsAssociatedToTuningSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = GOOGLE_ULONGLONG(0);
  }
  signalhash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalsAssociatedToTuningSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sourceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signalHash;
        break;
      }

      // repeated uint64 signalHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_signalhash())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhash())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signalHash;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalsAssociatedToTuningSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sourceID = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sourceid(), output);
  }

  // repeated uint64 signalHash = 2;
  for (int i = 0; i < this->signalhash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->signalhash(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalsAssociatedToTuningSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sourceID = 1;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sourceid(), target);
  }

  // repeated uint64 signalHash = 2;
  for (int i = 0; i < this->signalhash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->signalhash(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalsAssociatedToTuningSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sourceID = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourceid());
    }

  }
  // repeated uint64 signalHash = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhash_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhash(i));
    }
    total_size += 1 * this->signalhash_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalsAssociatedToTuningSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalsAssociatedToTuningSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalsAssociatedToTuningSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalsAssociatedToTuningSource::MergeFrom(const SignalsAssociatedToTuningSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhash_.MergeFrom(from.signalhash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalsAssociatedToTuningSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalsAssociatedToTuningSource::CopyFrom(const SignalsAssociatedToTuningSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalsAssociatedToTuningSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SignalsAssociatedToTuningSource::Swap(SignalsAssociatedToTuningSource* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    signalhash_.Swap(&other->signalhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalsAssociatedToTuningSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalsAssociatedToTuningSource_descriptor_;
  metadata.reflection = SignalsAssociatedToTuningSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSourceFilling::kSignalCountFieldNumber;
const int TuningSourceFilling::kSignalsPerSourceFieldNumber;
#endif  // !_MSC_VER

TuningSourceFilling::TuningSourceFilling()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSourceFilling::InitAsDefaultInstance() {
}

TuningSourceFilling::TuningSourceFilling(const TuningSourceFilling& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSourceFilling::SharedCtor() {
  _cached_size_ = 0;
  signalcount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSourceFilling::~TuningSourceFilling() {
  SharedDtor();
}

void TuningSourceFilling::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSourceFilling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSourceFilling::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSourceFilling_descriptor_;
}

const TuningSourceFilling& TuningSourceFilling::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSourceFilling* TuningSourceFilling::default_instance_ = NULL;

TuningSourceFilling* TuningSourceFilling::New() const {
  return new TuningSourceFilling;
}

void TuningSourceFilling::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signalcount_ = GOOGLE_ULONGLONG(0);
  }
  signalspersource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSourceFilling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 signalCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signalcount_)));
          set_has_signalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signalsPerSource;
        break;
      }

      // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalsPerSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signalspersource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signalsPerSource;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSourceFilling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 signalCount = 1;
  if (has_signalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signalcount(), output);
  }

  // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
  for (int i = 0; i < this->signalspersource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signalspersource(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSourceFilling::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 signalCount = 1;
  if (has_signalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signalcount(), target);
  }

  // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
  for (int i = 0; i < this->signalspersource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signalspersource(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSourceFilling::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 signalCount = 1;
    if (has_signalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signalcount());
    }

  }
  // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
  total_size += 1 * this->signalspersource_size();
  for (int i = 0; i < this->signalspersource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signalspersource(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSourceFilling::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSourceFilling* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSourceFilling*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSourceFilling::MergeFrom(const TuningSourceFilling& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalspersource_.MergeFrom(from.signalspersource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalcount()) {
      set_signalcount(from.signalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSourceFilling::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSourceFilling::CopyFrom(const TuningSourceFilling& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSourceFilling::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < signalspersource_size(); i++) {
    if (!this->signalspersource(i).IsInitialized()) return false;
  }
  return true;
}

void TuningSourceFilling::Swap(TuningSourceFilling* other) {
  if (other != this) {
    std::swap(signalcount_, other->signalcount_);
    signalspersource_.Swap(&other->signalspersource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSourceFilling::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSourceFilling_descriptor_;
  metadata.reflection = TuningSourceFilling_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSourceState::kSourceIDFieldNumber;
const int TuningSourceState::kIsReplyFieldNumber;
const int TuningSourceState::kRequestCountFieldNumber;
const int TuningSourceState::kReplyCountFieldNumber;
const int TuningSourceState::kCommandQueueSizeFieldNumber;
const int TuningSourceState::kErrUntimelyReplayFieldNumber;
const int TuningSourceState::kErrSentFieldNumber;
const int TuningSourceState::kErrPartialSentFieldNumber;
const int TuningSourceState::kErrReplySizeFieldNumber;
const int TuningSourceState::kErrNoReplyFieldNumber;
const int TuningSourceState::kErrRupProtocolVersionFieldNumber;
const int TuningSourceState::kErrRupFrameSizeFieldNumber;
const int TuningSourceState::kErrRupNonTuningDataFieldNumber;
const int TuningSourceState::kErrRupModuleTypeFieldNumber;
const int TuningSourceState::kErrRupFramesQuantityFieldNumber;
const int TuningSourceState::kErrRupFrameNumberFieldNumber;
const int TuningSourceState::kErrFotipProtocolVersionFieldNumber;
const int TuningSourceState::kErrFotipUniqueIDFieldNumber;
const int TuningSourceState::kErrFotipLmNumberFieldNumber;
const int TuningSourceState::kErrFotipSubsystemCodeFieldNumber;
const int TuningSourceState::kErrFotipOperationCodeFieldNumber;
const int TuningSourceState::kErrFotipFrameSizeFieldNumber;
const int TuningSourceState::kErrFotipRomSizeFieldNumber;
const int TuningSourceState::kErrFotipRomFrameSizeFieldNumber;
const int TuningSourceState::kFotipFlagBoundsCheckSuccessFieldNumber;
const int TuningSourceState::kFotipFlagWriteSuccessFieldNumber;
const int TuningSourceState::kFotipFlagDataTypeErrFieldNumber;
const int TuningSourceState::kFotipFlagOpCodeErrFieldNumber;
const int TuningSourceState::kFotipFlagStartAddrErrFieldNumber;
const int TuningSourceState::kFotipFlagRomSizeErrFieldNumber;
const int TuningSourceState::kFotipFlagRomFrameSizeErrFieldNumber;
const int TuningSourceState::kFotipFlagFrameSizeErrFieldNumber;
const int TuningSourceState::kFotipFlagProtocolVersionErrFieldNumber;
const int TuningSourceState::kFotipFlagSubsystemKeyErrFieldNumber;
const int TuningSourceState::kFotipFlagUniueIDErrFieldNumber;
const int TuningSourceState::kFotipFlagOffsetErrFieldNumber;
const int TuningSourceState::kFotipFlagApplySuccessFieldNumber;
const int TuningSourceState::kFotipFlagSetSORFieldNumber;
const int TuningSourceState::kErrAnalogLowBoundCheckFieldNumber;
const int TuningSourceState::kErrAnalogHighBoundCheckFieldNumber;
const int TuningSourceState::kErrRupCRCFieldNumber;
const int TuningSourceState::kControlIsActiveFieldNumber;
const int TuningSourceState::kSetSORFieldNumber;
const int TuningSourceState::kHasUnappliedParamsFieldNumber;
#endif  // !_MSC_VER

TuningSourceState::TuningSourceState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSourceState::InitAsDefaultInstance() {
}

TuningSourceState::TuningSourceState(const TuningSourceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSourceState::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = GOOGLE_ULONGLONG(0);
  isreply_ = false;
  requestcount_ = GOOGLE_LONGLONG(0);
  replycount_ = GOOGLE_LONGLONG(0);
  commandqueuesize_ = 0;
  erruntimelyreplay_ = GOOGLE_LONGLONG(0);
  errsent_ = GOOGLE_LONGLONG(0);
  errpartialsent_ = GOOGLE_LONGLONG(0);
  errreplysize_ = GOOGLE_LONGLONG(0);
  errnoreply_ = GOOGLE_LONGLONG(0);
  errrupprotocolversion_ = GOOGLE_LONGLONG(0);
  errrupframesize_ = GOOGLE_LONGLONG(0);
  errrupnontuningdata_ = GOOGLE_LONGLONG(0);
  errrupmoduletype_ = GOOGLE_LONGLONG(0);
  errrupframesquantity_ = GOOGLE_LONGLONG(0);
  errrupframenumber_ = GOOGLE_LONGLONG(0);
  errfotipprotocolversion_ = GOOGLE_LONGLONG(0);
  errfotipuniqueid_ = GOOGLE_LONGLONG(0);
  errfotiplmnumber_ = GOOGLE_LONGLONG(0);
  errfotipsubsystemcode_ = GOOGLE_LONGLONG(0);
  errfotipoperationcode_ = GOOGLE_LONGLONG(0);
  errfotipframesize_ = GOOGLE_LONGLONG(0);
  errfotipromsize_ = GOOGLE_LONGLONG(0);
  errfotipromframesize_ = GOOGLE_LONGLONG(0);
  fotipflagboundschecksuccess_ = GOOGLE_LONGLONG(0);
  fotipflagwritesuccess_ = GOOGLE_LONGLONG(0);
  fotipflagdatatypeerr_ = GOOGLE_LONGLONG(0);
  fotipflagopcodeerr_ = GOOGLE_LONGLONG(0);
  fotipflagstartaddrerr_ = GOOGLE_LONGLONG(0);
  fotipflagromsizeerr_ = GOOGLE_LONGLONG(0);
  fotipflagromframesizeerr_ = GOOGLE_LONGLONG(0);
  fotipflagframesizeerr_ = GOOGLE_LONGLONG(0);
  fotipflagprotocolversionerr_ = GOOGLE_LONGLONG(0);
  fotipflagsubsystemkeyerr_ = GOOGLE_LONGLONG(0);
  fotipflaguniueiderr_ = GOOGLE_LONGLONG(0);
  fotipflagoffseterr_ = GOOGLE_LONGLONG(0);
  fotipflagapplysuccess_ = GOOGLE_LONGLONG(0);
  fotipflagsetsor_ = GOOGLE_LONGLONG(0);
  erranaloglowboundcheck_ = GOOGLE_LONGLONG(0);
  erranaloghighboundcheck_ = GOOGLE_LONGLONG(0);
  errrupcrc_ = GOOGLE_LONGLONG(0);
  controlisactive_ = false;
  setsor_ = false;
  hasunappliedparams_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSourceState::~TuningSourceState() {
  SharedDtor();
}

void TuningSourceState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSourceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSourceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSourceState_descriptor_;
}

const TuningSourceState& TuningSourceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSourceState* TuningSourceState::default_instance_ = NULL;

TuningSourceState* TuningSourceState::New() const {
  return new TuningSourceState;
}

void TuningSourceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = GOOGLE_ULONGLONG(0);
    isreply_ = false;
    requestcount_ = GOOGLE_LONGLONG(0);
    replycount_ = GOOGLE_LONGLONG(0);
    commandqueuesize_ = 0;
    erruntimelyreplay_ = GOOGLE_LONGLONG(0);
    errsent_ = GOOGLE_LONGLONG(0);
    errpartialsent_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    errreplysize_ = GOOGLE_LONGLONG(0);
    errnoreply_ = GOOGLE_LONGLONG(0);
    errrupprotocolversion_ = GOOGLE_LONGLONG(0);
    errrupframesize_ = GOOGLE_LONGLONG(0);
    errrupnontuningdata_ = GOOGLE_LONGLONG(0);
    errrupmoduletype_ = GOOGLE_LONGLONG(0);
    errrupframesquantity_ = GOOGLE_LONGLONG(0);
    errrupframenumber_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    errfotipprotocolversion_ = GOOGLE_LONGLONG(0);
    errfotipuniqueid_ = GOOGLE_LONGLONG(0);
    errfotiplmnumber_ = GOOGLE_LONGLONG(0);
    errfotipsubsystemcode_ = GOOGLE_LONGLONG(0);
    errfotipoperationcode_ = GOOGLE_LONGLONG(0);
    errfotipframesize_ = GOOGLE_LONGLONG(0);
    errfotipromsize_ = GOOGLE_LONGLONG(0);
    errfotipromframesize_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    fotipflagboundschecksuccess_ = GOOGLE_LONGLONG(0);
    fotipflagwritesuccess_ = GOOGLE_LONGLONG(0);
    fotipflagdatatypeerr_ = GOOGLE_LONGLONG(0);
    fotipflagopcodeerr_ = GOOGLE_LONGLONG(0);
    fotipflagstartaddrerr_ = GOOGLE_LONGLONG(0);
    fotipflagromsizeerr_ = GOOGLE_LONGLONG(0);
    fotipflagromframesizeerr_ = GOOGLE_LONGLONG(0);
    fotipflagframesizeerr_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    fotipflagprotocolversionerr_ = GOOGLE_LONGLONG(0);
    fotipflagsubsystemkeyerr_ = GOOGLE_LONGLONG(0);
    fotipflaguniueiderr_ = GOOGLE_LONGLONG(0);
    fotipflagoffseterr_ = GOOGLE_LONGLONG(0);
    fotipflagapplysuccess_ = GOOGLE_LONGLONG(0);
    fotipflagsetsor_ = GOOGLE_LONGLONG(0);
    erranaloglowboundcheck_ = GOOGLE_LONGLONG(0);
    erranaloghighboundcheck_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    errrupcrc_ = GOOGLE_LONGLONG(0);
    controlisactive_ = false;
    setsor_ = false;
    hasunappliedparams_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSourceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sourceID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isReply;
        break;
      }

      // optional bool isReply = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreply_)));
          set_has_isreply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestCount;
        break;
      }

      // optional int64 requestCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requestcount_)));
          set_has_requestcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_replyCount;
        break;
      }

      // optional int64 replyCount = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replycount_)));
          set_has_replycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_commandQueueSize;
        break;
      }

      // optional int32 commandQueueSize = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandQueueSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commandqueuesize_)));
          set_has_commandqueuesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_errUntimelyReplay;
        break;
      }

      // optional int64 errUntimelyReplay = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errUntimelyReplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &erruntimelyreplay_)));
          set_has_erruntimelyreplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_errSent;
        break;
      }

      // optional int64 errSent = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errsent_)));
          set_has_errsent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_errPartialSent;
        break;
      }

      // optional int64 errPartialSent = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errPartialSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errpartialsent_)));
          set_has_errpartialsent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_errReplySize;
        break;
      }

      // optional int64 errReplySize = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errReplySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errreplysize_)));
          set_has_errreplysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_errNoReply;
        break;
      }

      // optional int64 errNoReply = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errNoReply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errnoreply_)));
          set_has_errnoreply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_errRupProtocolVersion;
        break;
      }

      // optional int64 errRupProtocolVersion = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupProtocolVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupprotocolversion_)));
          set_has_errrupprotocolversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_errRupFrameSize;
        break;
      }

      // optional int64 errRupFrameSize = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupFrameSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupframesize_)));
          set_has_errrupframesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_errRupNonTuningData;
        break;
      }

      // optional int64 errRupNonTuningData = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupNonTuningData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupnontuningdata_)));
          set_has_errrupnontuningdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errRupModuleType;
        break;
      }

      // optional int64 errRupModuleType = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupModuleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupmoduletype_)));
          set_has_errrupmoduletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_errRupFramesQuantity;
        break;
      }

      // optional int64 errRupFramesQuantity = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupFramesQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupframesquantity_)));
          set_has_errrupframesquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_errRupFrameNumber;
        break;
      }

      // optional int64 errRupFrameNumber = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupFrameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupframenumber_)));
          set_has_errrupframenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_errFotipProtocolVersion;
        break;
      }

      // optional int64 errFotipProtocolVersion = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipProtocolVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipprotocolversion_)));
          set_has_errfotipprotocolversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_errFotipUniqueID;
        break;
      }

      // optional int64 errFotipUniqueID = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipUniqueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipuniqueid_)));
          set_has_errfotipuniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_errFotipLmNumber;
        break;
      }

      // optional int64 errFotipLmNumber = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipLmNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotiplmnumber_)));
          set_has_errfotiplmnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_errFotipSubsystemCode;
        break;
      }

      // optional int64 errFotipSubsystemCode = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipSubsystemCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipsubsystemcode_)));
          set_has_errfotipsubsystemcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_errFotipOperationCode;
        break;
      }

      // optional int64 errFotipOperationCode = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipOperationCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipoperationcode_)));
          set_has_errfotipoperationcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_errFotipFrameSize;
        break;
      }

      // optional int64 errFotipFrameSize = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipFrameSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipframesize_)));
          set_has_errfotipframesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_errFotipRomSize;
        break;
      }

      // optional int64 errFotipRomSize = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipRomSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipromsize_)));
          set_has_errfotipromsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_errFotipRomFrameSize;
        break;
      }

      // optional int64 errFotipRomFrameSize = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFotipRomFrameSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errfotipromframesize_)));
          set_has_errfotipromframesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_fotipFlagBoundsCheckSuccess;
        break;
      }

      // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagBoundsCheckSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagboundschecksuccess_)));
          set_has_fotipflagboundschecksuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_fotipFlagWriteSuccess;
        break;
      }

      // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagWriteSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagwritesuccess_)));
          set_has_fotipflagwritesuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_fotipFlagDataTypeErr;
        break;
      }

      // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagDataTypeErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagdatatypeerr_)));
          set_has_fotipflagdatatypeerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_fotipFlagOpCodeErr;
        break;
      }

      // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagOpCodeErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagopcodeerr_)));
          set_has_fotipflagopcodeerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_fotipFlagStartAddrErr;
        break;
      }

      // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagStartAddrErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagstartaddrerr_)));
          set_has_fotipflagstartaddrerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fotipFlagRomSizeErr;
        break;
      }

      // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagRomSizeErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagromsizeerr_)));
          set_has_fotipflagromsizeerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_fotipFlagRomFrameSizeErr;
        break;
      }

      // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagRomFrameSizeErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagromframesizeerr_)));
          set_has_fotipflagromframesizeerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_fotipFlagFrameSizeErr;
        break;
      }

      // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagFrameSizeErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagframesizeerr_)));
          set_has_fotipflagframesizeerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_fotipFlagProtocolVersionErr;
        break;
      }

      // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagProtocolVersionErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagprotocolversionerr_)));
          set_has_fotipflagprotocolversionerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_fotipFlagSubsystemKeyErr;
        break;
      }

      // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagSubsystemKeyErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagsubsystemkeyerr_)));
          set_has_fotipflagsubsystemkeyerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_fotipFlagUniueIDErr;
        break;
      }

      // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagUniueIDErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflaguniueiderr_)));
          set_has_fotipflaguniueiderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_fotipFlagOffsetErr;
        break;
      }

      // optional int64 fotipFlagOffsetErr = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagOffsetErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagoffseterr_)));
          set_has_fotipflagoffseterr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_fotipFlagApplySuccess;
        break;
      }

      // optional int64 fotipFlagApplySuccess = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagApplySuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagapplysuccess_)));
          set_has_fotipflagapplysuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_fotipFlagSetSOR;
        break;
      }

      // optional int64 fotipFlagSetSOR = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fotipFlagSetSOR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fotipflagsetsor_)));
          set_has_fotipflagsetsor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_errAnalogLowBoundCheck;
        break;
      }

      // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errAnalogLowBoundCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &erranaloglowboundcheck_)));
          set_has_erranaloglowboundcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_errAnalogHighBoundCheck;
        break;
      }

      // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errAnalogHighBoundCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &erranaloghighboundcheck_)));
          set_has_erranaloghighboundcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_errRupCRC;
        break;
      }

      // optional int64 errRupCRC = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRupCRC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errrupcrc_)));
          set_has_errrupcrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_controlIsActive;
        break;
      }

      // optional bool controlIsActive = 42 [default = false];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlIsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controlisactive_)));
          set_has_controlisactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_setSOR;
        break;
      }

      // optional bool setSOR = 43 [default = false];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setSOR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setsor_)));
          set_has_setsor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_hasUnappliedParams;
        break;
      }

      // optional bool hasUnappliedParams = 44 [default = false];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasUnappliedParams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasunappliedparams_)));
          set_has_hasunappliedparams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSourceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sourceID = 1 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sourceid(), output);
  }

  // optional bool isReply = 2 [default = false];
  if (has_isreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isreply(), output);
  }

  // optional int64 requestCount = 3 [default = 0];
  if (has_requestcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requestcount(), output);
  }

  // optional int64 replyCount = 4 [default = 0];
  if (has_replycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->replycount(), output);
  }

  // optional int32 commandQueueSize = 5 [default = 0];
  if (has_commandqueuesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->commandqueuesize(), output);
  }

  // optional int64 errUntimelyReplay = 6 [default = 0];
  if (has_erruntimelyreplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->erruntimelyreplay(), output);
  }

  // optional int64 errSent = 7 [default = 0];
  if (has_errsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->errsent(), output);
  }

  // optional int64 errPartialSent = 8 [default = 0];
  if (has_errpartialsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->errpartialsent(), output);
  }

  // optional int64 errReplySize = 9 [default = 0];
  if (has_errreplysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->errreplysize(), output);
  }

  // optional int64 errNoReply = 10 [default = 0];
  if (has_errnoreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->errnoreply(), output);
  }

  // optional int64 errRupProtocolVersion = 11 [default = 0];
  if (has_errrupprotocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->errrupprotocolversion(), output);
  }

  // optional int64 errRupFrameSize = 12 [default = 0];
  if (has_errrupframesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->errrupframesize(), output);
  }

  // optional int64 errRupNonTuningData = 13 [default = 0];
  if (has_errrupnontuningdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->errrupnontuningdata(), output);
  }

  // optional int64 errRupModuleType = 14 [default = 0];
  if (has_errrupmoduletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->errrupmoduletype(), output);
  }

  // optional int64 errRupFramesQuantity = 15 [default = 0];
  if (has_errrupframesquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->errrupframesquantity(), output);
  }

  // optional int64 errRupFrameNumber = 16 [default = 0];
  if (has_errrupframenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->errrupframenumber(), output);
  }

  // optional int64 errFotipProtocolVersion = 17 [default = 0];
  if (has_errfotipprotocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->errfotipprotocolversion(), output);
  }

  // optional int64 errFotipUniqueID = 18 [default = 0];
  if (has_errfotipuniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->errfotipuniqueid(), output);
  }

  // optional int64 errFotipLmNumber = 19 [default = 0];
  if (has_errfotiplmnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->errfotiplmnumber(), output);
  }

  // optional int64 errFotipSubsystemCode = 20 [default = 0];
  if (has_errfotipsubsystemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->errfotipsubsystemcode(), output);
  }

  // optional int64 errFotipOperationCode = 21 [default = 0];
  if (has_errfotipoperationcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->errfotipoperationcode(), output);
  }

  // optional int64 errFotipFrameSize = 22 [default = 0];
  if (has_errfotipframesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->errfotipframesize(), output);
  }

  // optional int64 errFotipRomSize = 23 [default = 0];
  if (has_errfotipromsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->errfotipromsize(), output);
  }

  // optional int64 errFotipRomFrameSize = 24 [default = 0];
  if (has_errfotipromframesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->errfotipromframesize(), output);
  }

  // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
  if (has_fotipflagboundschecksuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->fotipflagboundschecksuccess(), output);
  }

  // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
  if (has_fotipflagwritesuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->fotipflagwritesuccess(), output);
  }

  // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
  if (has_fotipflagdatatypeerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->fotipflagdatatypeerr(), output);
  }

  // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
  if (has_fotipflagopcodeerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->fotipflagopcodeerr(), output);
  }

  // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
  if (has_fotipflagstartaddrerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->fotipflagstartaddrerr(), output);
  }

  // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
  if (has_fotipflagromsizeerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->fotipflagromsizeerr(), output);
  }

  // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
  if (has_fotipflagromframesizeerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->fotipflagromframesizeerr(), output);
  }

  // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
  if (has_fotipflagframesizeerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->fotipflagframesizeerr(), output);
  }

  // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
  if (has_fotipflagprotocolversionerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->fotipflagprotocolversionerr(), output);
  }

  // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
  if (has_fotipflagsubsystemkeyerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->fotipflagsubsystemkeyerr(), output);
  }

  // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
  if (has_fotipflaguniueiderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->fotipflaguniueiderr(), output);
  }

  // optional int64 fotipFlagOffsetErr = 36 [default = 0];
  if (has_fotipflagoffseterr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->fotipflagoffseterr(), output);
  }

  // optional int64 fotipFlagApplySuccess = 37 [default = 0];
  if (has_fotipflagapplysuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->fotipflagapplysuccess(), output);
  }

  // optional int64 fotipFlagSetSOR = 38 [default = 0];
  if (has_fotipflagsetsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->fotipflagsetsor(), output);
  }

  // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
  if (has_erranaloglowboundcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->erranaloglowboundcheck(), output);
  }

  // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
  if (has_erranaloghighboundcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->erranaloghighboundcheck(), output);
  }

  // optional int64 errRupCRC = 41 [default = 0];
  if (has_errrupcrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->errrupcrc(), output);
  }

  // optional bool controlIsActive = 42 [default = false];
  if (has_controlisactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->controlisactive(), output);
  }

  // optional bool setSOR = 43 [default = false];
  if (has_setsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->setsor(), output);
  }

  // optional bool hasUnappliedParams = 44 [default = false];
  if (has_hasunappliedparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->hasunappliedparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSourceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sourceID = 1 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sourceid(), target);
  }

  // optional bool isReply = 2 [default = false];
  if (has_isreply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isreply(), target);
  }

  // optional int64 requestCount = 3 [default = 0];
  if (has_requestcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requestcount(), target);
  }

  // optional int64 replyCount = 4 [default = 0];
  if (has_replycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->replycount(), target);
  }

  // optional int32 commandQueueSize = 5 [default = 0];
  if (has_commandqueuesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->commandqueuesize(), target);
  }

  // optional int64 errUntimelyReplay = 6 [default = 0];
  if (has_erruntimelyreplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->erruntimelyreplay(), target);
  }

  // optional int64 errSent = 7 [default = 0];
  if (has_errsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->errsent(), target);
  }

  // optional int64 errPartialSent = 8 [default = 0];
  if (has_errpartialsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->errpartialsent(), target);
  }

  // optional int64 errReplySize = 9 [default = 0];
  if (has_errreplysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->errreplysize(), target);
  }

  // optional int64 errNoReply = 10 [default = 0];
  if (has_errnoreply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->errnoreply(), target);
  }

  // optional int64 errRupProtocolVersion = 11 [default = 0];
  if (has_errrupprotocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->errrupprotocolversion(), target);
  }

  // optional int64 errRupFrameSize = 12 [default = 0];
  if (has_errrupframesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->errrupframesize(), target);
  }

  // optional int64 errRupNonTuningData = 13 [default = 0];
  if (has_errrupnontuningdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->errrupnontuningdata(), target);
  }

  // optional int64 errRupModuleType = 14 [default = 0];
  if (has_errrupmoduletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->errrupmoduletype(), target);
  }

  // optional int64 errRupFramesQuantity = 15 [default = 0];
  if (has_errrupframesquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->errrupframesquantity(), target);
  }

  // optional int64 errRupFrameNumber = 16 [default = 0];
  if (has_errrupframenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->errrupframenumber(), target);
  }

  // optional int64 errFotipProtocolVersion = 17 [default = 0];
  if (has_errfotipprotocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->errfotipprotocolversion(), target);
  }

  // optional int64 errFotipUniqueID = 18 [default = 0];
  if (has_errfotipuniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->errfotipuniqueid(), target);
  }

  // optional int64 errFotipLmNumber = 19 [default = 0];
  if (has_errfotiplmnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->errfotiplmnumber(), target);
  }

  // optional int64 errFotipSubsystemCode = 20 [default = 0];
  if (has_errfotipsubsystemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->errfotipsubsystemcode(), target);
  }

  // optional int64 errFotipOperationCode = 21 [default = 0];
  if (has_errfotipoperationcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->errfotipoperationcode(), target);
  }

  // optional int64 errFotipFrameSize = 22 [default = 0];
  if (has_errfotipframesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->errfotipframesize(), target);
  }

  // optional int64 errFotipRomSize = 23 [default = 0];
  if (has_errfotipromsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->errfotipromsize(), target);
  }

  // optional int64 errFotipRomFrameSize = 24 [default = 0];
  if (has_errfotipromframesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->errfotipromframesize(), target);
  }

  // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
  if (has_fotipflagboundschecksuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->fotipflagboundschecksuccess(), target);
  }

  // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
  if (has_fotipflagwritesuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->fotipflagwritesuccess(), target);
  }

  // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
  if (has_fotipflagdatatypeerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->fotipflagdatatypeerr(), target);
  }

  // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
  if (has_fotipflagopcodeerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->fotipflagopcodeerr(), target);
  }

  // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
  if (has_fotipflagstartaddrerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->fotipflagstartaddrerr(), target);
  }

  // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
  if (has_fotipflagromsizeerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->fotipflagromsizeerr(), target);
  }

  // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
  if (has_fotipflagromframesizeerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->fotipflagromframesizeerr(), target);
  }

  // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
  if (has_fotipflagframesizeerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->fotipflagframesizeerr(), target);
  }

  // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
  if (has_fotipflagprotocolversionerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->fotipflagprotocolversionerr(), target);
  }

  // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
  if (has_fotipflagsubsystemkeyerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->fotipflagsubsystemkeyerr(), target);
  }

  // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
  if (has_fotipflaguniueiderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->fotipflaguniueiderr(), target);
  }

  // optional int64 fotipFlagOffsetErr = 36 [default = 0];
  if (has_fotipflagoffseterr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->fotipflagoffseterr(), target);
  }

  // optional int64 fotipFlagApplySuccess = 37 [default = 0];
  if (has_fotipflagapplysuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->fotipflagapplysuccess(), target);
  }

  // optional int64 fotipFlagSetSOR = 38 [default = 0];
  if (has_fotipflagsetsor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->fotipflagsetsor(), target);
  }

  // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
  if (has_erranaloglowboundcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->erranaloglowboundcheck(), target);
  }

  // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
  if (has_erranaloghighboundcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->erranaloghighboundcheck(), target);
  }

  // optional int64 errRupCRC = 41 [default = 0];
  if (has_errrupcrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->errrupcrc(), target);
  }

  // optional bool controlIsActive = 42 [default = false];
  if (has_controlisactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->controlisactive(), target);
  }

  // optional bool setSOR = 43 [default = false];
  if (has_setsor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->setsor(), target);
  }

  // optional bool hasUnappliedParams = 44 [default = false];
  if (has_hasunappliedparams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->hasunappliedparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSourceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sourceID = 1 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourceid());
    }

    // optional bool isReply = 2 [default = false];
    if (has_isreply()) {
      total_size += 1 + 1;
    }

    // optional int64 requestCount = 3 [default = 0];
    if (has_requestcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requestcount());
    }

    // optional int64 replyCount = 4 [default = 0];
    if (has_replycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replycount());
    }

    // optional int32 commandQueueSize = 5 [default = 0];
    if (has_commandqueuesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commandqueuesize());
    }

    // optional int64 errUntimelyReplay = 6 [default = 0];
    if (has_erruntimelyreplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->erruntimelyreplay());
    }

    // optional int64 errSent = 7 [default = 0];
    if (has_errsent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errsent());
    }

    // optional int64 errPartialSent = 8 [default = 0];
    if (has_errpartialsent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errpartialsent());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 errReplySize = 9 [default = 0];
    if (has_errreplysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errreplysize());
    }

    // optional int64 errNoReply = 10 [default = 0];
    if (has_errnoreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errnoreply());
    }

    // optional int64 errRupProtocolVersion = 11 [default = 0];
    if (has_errrupprotocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupprotocolversion());
    }

    // optional int64 errRupFrameSize = 12 [default = 0];
    if (has_errrupframesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupframesize());
    }

    // optional int64 errRupNonTuningData = 13 [default = 0];
    if (has_errrupnontuningdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupnontuningdata());
    }

    // optional int64 errRupModuleType = 14 [default = 0];
    if (has_errrupmoduletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupmoduletype());
    }

    // optional int64 errRupFramesQuantity = 15 [default = 0];
    if (has_errrupframesquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupframesquantity());
    }

    // optional int64 errRupFrameNumber = 16 [default = 0];
    if (has_errrupframenumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupframenumber());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 errFotipProtocolVersion = 17 [default = 0];
    if (has_errfotipprotocolversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipprotocolversion());
    }

    // optional int64 errFotipUniqueID = 18 [default = 0];
    if (has_errfotipuniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipuniqueid());
    }

    // optional int64 errFotipLmNumber = 19 [default = 0];
    if (has_errfotiplmnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotiplmnumber());
    }

    // optional int64 errFotipSubsystemCode = 20 [default = 0];
    if (has_errfotipsubsystemcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipsubsystemcode());
    }

    // optional int64 errFotipOperationCode = 21 [default = 0];
    if (has_errfotipoperationcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipoperationcode());
    }

    // optional int64 errFotipFrameSize = 22 [default = 0];
    if (has_errfotipframesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipframesize());
    }

    // optional int64 errFotipRomSize = 23 [default = 0];
    if (has_errfotipromsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipromsize());
    }

    // optional int64 errFotipRomFrameSize = 24 [default = 0];
    if (has_errfotipromframesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errfotipromframesize());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
    if (has_fotipflagboundschecksuccess()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagboundschecksuccess());
    }

    // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
    if (has_fotipflagwritesuccess()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagwritesuccess());
    }

    // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
    if (has_fotipflagdatatypeerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagdatatypeerr());
    }

    // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
    if (has_fotipflagopcodeerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagopcodeerr());
    }

    // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
    if (has_fotipflagstartaddrerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagstartaddrerr());
    }

    // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
    if (has_fotipflagromsizeerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagromsizeerr());
    }

    // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
    if (has_fotipflagromframesizeerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagromframesizeerr());
    }

    // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
    if (has_fotipflagframesizeerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagframesizeerr());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
    if (has_fotipflagprotocolversionerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagprotocolversionerr());
    }

    // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
    if (has_fotipflagsubsystemkeyerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagsubsystemkeyerr());
    }

    // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
    if (has_fotipflaguniueiderr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflaguniueiderr());
    }

    // optional int64 fotipFlagOffsetErr = 36 [default = 0];
    if (has_fotipflagoffseterr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagoffseterr());
    }

    // optional int64 fotipFlagApplySuccess = 37 [default = 0];
    if (has_fotipflagapplysuccess()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagapplysuccess());
    }

    // optional int64 fotipFlagSetSOR = 38 [default = 0];
    if (has_fotipflagsetsor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fotipflagsetsor());
    }

    // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
    if (has_erranaloglowboundcheck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->erranaloglowboundcheck());
    }

    // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
    if (has_erranaloghighboundcheck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->erranaloghighboundcheck());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int64 errRupCRC = 41 [default = 0];
    if (has_errrupcrc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errrupcrc());
    }

    // optional bool controlIsActive = 42 [default = false];
    if (has_controlisactive()) {
      total_size += 2 + 1;
    }

    // optional bool setSOR = 43 [default = false];
    if (has_setsor()) {
      total_size += 2 + 1;
    }

    // optional bool hasUnappliedParams = 44 [default = false];
    if (has_hasunappliedparams()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSourceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSourceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSourceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSourceState::MergeFrom(const TuningSourceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_isreply()) {
      set_isreply(from.isreply());
    }
    if (from.has_requestcount()) {
      set_requestcount(from.requestcount());
    }
    if (from.has_replycount()) {
      set_replycount(from.replycount());
    }
    if (from.has_commandqueuesize()) {
      set_commandqueuesize(from.commandqueuesize());
    }
    if (from.has_erruntimelyreplay()) {
      set_erruntimelyreplay(from.erruntimelyreplay());
    }
    if (from.has_errsent()) {
      set_errsent(from.errsent());
    }
    if (from.has_errpartialsent()) {
      set_errpartialsent(from.errpartialsent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errreplysize()) {
      set_errreplysize(from.errreplysize());
    }
    if (from.has_errnoreply()) {
      set_errnoreply(from.errnoreply());
    }
    if (from.has_errrupprotocolversion()) {
      set_errrupprotocolversion(from.errrupprotocolversion());
    }
    if (from.has_errrupframesize()) {
      set_errrupframesize(from.errrupframesize());
    }
    if (from.has_errrupnontuningdata()) {
      set_errrupnontuningdata(from.errrupnontuningdata());
    }
    if (from.has_errrupmoduletype()) {
      set_errrupmoduletype(from.errrupmoduletype());
    }
    if (from.has_errrupframesquantity()) {
      set_errrupframesquantity(from.errrupframesquantity());
    }
    if (from.has_errrupframenumber()) {
      set_errrupframenumber(from.errrupframenumber());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_errfotipprotocolversion()) {
      set_errfotipprotocolversion(from.errfotipprotocolversion());
    }
    if (from.has_errfotipuniqueid()) {
      set_errfotipuniqueid(from.errfotipuniqueid());
    }
    if (from.has_errfotiplmnumber()) {
      set_errfotiplmnumber(from.errfotiplmnumber());
    }
    if (from.has_errfotipsubsystemcode()) {
      set_errfotipsubsystemcode(from.errfotipsubsystemcode());
    }
    if (from.has_errfotipoperationcode()) {
      set_errfotipoperationcode(from.errfotipoperationcode());
    }
    if (from.has_errfotipframesize()) {
      set_errfotipframesize(from.errfotipframesize());
    }
    if (from.has_errfotipromsize()) {
      set_errfotipromsize(from.errfotipromsize());
    }
    if (from.has_errfotipromframesize()) {
      set_errfotipromframesize(from.errfotipromframesize());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fotipflagboundschecksuccess()) {
      set_fotipflagboundschecksuccess(from.fotipflagboundschecksuccess());
    }
    if (from.has_fotipflagwritesuccess()) {
      set_fotipflagwritesuccess(from.fotipflagwritesuccess());
    }
    if (from.has_fotipflagdatatypeerr()) {
      set_fotipflagdatatypeerr(from.fotipflagdatatypeerr());
    }
    if (from.has_fotipflagopcodeerr()) {
      set_fotipflagopcodeerr(from.fotipflagopcodeerr());
    }
    if (from.has_fotipflagstartaddrerr()) {
      set_fotipflagstartaddrerr(from.fotipflagstartaddrerr());
    }
    if (from.has_fotipflagromsizeerr()) {
      set_fotipflagromsizeerr(from.fotipflagromsizeerr());
    }
    if (from.has_fotipflagromframesizeerr()) {
      set_fotipflagromframesizeerr(from.fotipflagromframesizeerr());
    }
    if (from.has_fotipflagframesizeerr()) {
      set_fotipflagframesizeerr(from.fotipflagframesizeerr());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_fotipflagprotocolversionerr()) {
      set_fotipflagprotocolversionerr(from.fotipflagprotocolversionerr());
    }
    if (from.has_fotipflagsubsystemkeyerr()) {
      set_fotipflagsubsystemkeyerr(from.fotipflagsubsystemkeyerr());
    }
    if (from.has_fotipflaguniueiderr()) {
      set_fotipflaguniueiderr(from.fotipflaguniueiderr());
    }
    if (from.has_fotipflagoffseterr()) {
      set_fotipflagoffseterr(from.fotipflagoffseterr());
    }
    if (from.has_fotipflagapplysuccess()) {
      set_fotipflagapplysuccess(from.fotipflagapplysuccess());
    }
    if (from.has_fotipflagsetsor()) {
      set_fotipflagsetsor(from.fotipflagsetsor());
    }
    if (from.has_erranaloglowboundcheck()) {
      set_erranaloglowboundcheck(from.erranaloglowboundcheck());
    }
    if (from.has_erranaloghighboundcheck()) {
      set_erranaloghighboundcheck(from.erranaloghighboundcheck());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_errrupcrc()) {
      set_errrupcrc(from.errrupcrc());
    }
    if (from.has_controlisactive()) {
      set_controlisactive(from.controlisactive());
    }
    if (from.has_setsor()) {
      set_setsor(from.setsor());
    }
    if (from.has_hasunappliedparams()) {
      set_hasunappliedparams(from.hasunappliedparams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSourceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSourceState::CopyFrom(const TuningSourceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSourceState::IsInitialized() const {

  return true;
}

void TuningSourceState::Swap(TuningSourceState* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(isreply_, other->isreply_);
    std::swap(requestcount_, other->requestcount_);
    std::swap(replycount_, other->replycount_);
    std::swap(commandqueuesize_, other->commandqueuesize_);
    std::swap(erruntimelyreplay_, other->erruntimelyreplay_);
    std::swap(errsent_, other->errsent_);
    std::swap(errpartialsent_, other->errpartialsent_);
    std::swap(errreplysize_, other->errreplysize_);
    std::swap(errnoreply_, other->errnoreply_);
    std::swap(errrupprotocolversion_, other->errrupprotocolversion_);
    std::swap(errrupframesize_, other->errrupframesize_);
    std::swap(errrupnontuningdata_, other->errrupnontuningdata_);
    std::swap(errrupmoduletype_, other->errrupmoduletype_);
    std::swap(errrupframesquantity_, other->errrupframesquantity_);
    std::swap(errrupframenumber_, other->errrupframenumber_);
    std::swap(errfotipprotocolversion_, other->errfotipprotocolversion_);
    std::swap(errfotipuniqueid_, other->errfotipuniqueid_);
    std::swap(errfotiplmnumber_, other->errfotiplmnumber_);
    std::swap(errfotipsubsystemcode_, other->errfotipsubsystemcode_);
    std::swap(errfotipoperationcode_, other->errfotipoperationcode_);
    std::swap(errfotipframesize_, other->errfotipframesize_);
    std::swap(errfotipromsize_, other->errfotipromsize_);
    std::swap(errfotipromframesize_, other->errfotipromframesize_);
    std::swap(fotipflagboundschecksuccess_, other->fotipflagboundschecksuccess_);
    std::swap(fotipflagwritesuccess_, other->fotipflagwritesuccess_);
    std::swap(fotipflagdatatypeerr_, other->fotipflagdatatypeerr_);
    std::swap(fotipflagopcodeerr_, other->fotipflagopcodeerr_);
    std::swap(fotipflagstartaddrerr_, other->fotipflagstartaddrerr_);
    std::swap(fotipflagromsizeerr_, other->fotipflagromsizeerr_);
    std::swap(fotipflagromframesizeerr_, other->fotipflagromframesizeerr_);
    std::swap(fotipflagframesizeerr_, other->fotipflagframesizeerr_);
    std::swap(fotipflagprotocolversionerr_, other->fotipflagprotocolversionerr_);
    std::swap(fotipflagsubsystemkeyerr_, other->fotipflagsubsystemkeyerr_);
    std::swap(fotipflaguniueiderr_, other->fotipflaguniueiderr_);
    std::swap(fotipflagoffseterr_, other->fotipflagoffseterr_);
    std::swap(fotipflagapplysuccess_, other->fotipflagapplysuccess_);
    std::swap(fotipflagsetsor_, other->fotipflagsetsor_);
    std::swap(erranaloglowboundcheck_, other->erranaloglowboundcheck_);
    std::swap(erranaloghighboundcheck_, other->erranaloghighboundcheck_);
    std::swap(errrupcrc_, other->errrupcrc_);
    std::swap(controlisactive_, other->controlisactive_);
    std::swap(setsor_, other->setsor_);
    std::swap(hasunappliedparams_, other->hasunappliedparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSourceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSourceState_descriptor_;
  metadata.reflection = TuningSourceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTuningSourcesStatesReply::kErrorFieldNumber;
const int GetTuningSourcesStatesReply::kTuningSourcesStateFieldNumber;
const int GetTuningSourcesStatesReply::kSingleLmControlModeFieldNumber;
const int GetTuningSourcesStatesReply::kActiveClientIDFieldNumber;
const int GetTuningSourcesStatesReply::kActiveClientIPFieldNumber;
#endif  // !_MSC_VER

GetTuningSourcesStatesReply::GetTuningSourcesStatesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTuningSourcesStatesReply::InitAsDefaultInstance() {
}

GetTuningSourcesStatesReply::GetTuningSourcesStatesReply(const GetTuningSourcesStatesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTuningSourcesStatesReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  singlelmcontrolmode_ = true;
  activeclientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activeclientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTuningSourcesStatesReply::~GetTuningSourcesStatesReply() {
  SharedDtor();
}

void GetTuningSourcesStatesReply::SharedDtor() {
  if (activeclientid_ != &::google::protobuf::internal::kEmptyString) {
    delete activeclientid_;
  }
  if (activeclientip_ != &::google::protobuf::internal::kEmptyString) {
    delete activeclientip_;
  }
  if (this != default_instance_) {
  }
}

void GetTuningSourcesStatesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTuningSourcesStatesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTuningSourcesStatesReply_descriptor_;
}

const GetTuningSourcesStatesReply& GetTuningSourcesStatesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetTuningSourcesStatesReply* GetTuningSourcesStatesReply::default_instance_ = NULL;

GetTuningSourcesStatesReply* GetTuningSourcesStatesReply::New() const {
  return new GetTuningSourcesStatesReply;
}

void GetTuningSourcesStatesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    singlelmcontrolmode_ = true;
    if (has_activeclientid()) {
      if (activeclientid_ != &::google::protobuf::internal::kEmptyString) {
        activeclientid_->clear();
      }
    }
    if (has_activeclientip()) {
      if (activeclientip_ != &::google::protobuf::internal::kEmptyString) {
        activeclientip_->clear();
      }
    }
  }
  tuningsourcesstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTuningSourcesStatesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSourcesState;
        break;
      }

      // repeated .Network.TuningSourceState tuningSourcesState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningSourcesState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuningsourcesstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSourcesState;
        if (input->ExpectTag(24)) goto parse_singleLmControlMode;
        break;
      }

      // optional bool singleLmControlMode = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singleLmControlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &singlelmcontrolmode_)));
          set_has_singlelmcontrolmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeClientID;
        break;
      }

      // optional string activeClientID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeclientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activeclientid().data(), this->activeclientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_activeClientIP;
        break;
      }

      // optional string activeClientIP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeClientIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeclientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activeclientip().data(), this->activeclientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTuningSourcesStatesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.TuningSourceState tuningSourcesState = 2;
  for (int i = 0; i < this->tuningsourcesstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tuningsourcesstate(i), output);
  }

  // optional bool singleLmControlMode = 3 [default = true];
  if (has_singlelmcontrolmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->singlelmcontrolmode(), output);
  }

  // optional string activeClientID = 4;
  if (has_activeclientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientid().data(), this->activeclientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activeclientid(), output);
  }

  // optional string activeClientIP = 5;
  if (has_activeclientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientip().data(), this->activeclientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->activeclientip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTuningSourcesStatesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.TuningSourceState tuningSourcesState = 2;
  for (int i = 0; i < this->tuningsourcesstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tuningsourcesstate(i), target);
  }

  // optional bool singleLmControlMode = 3 [default = true];
  if (has_singlelmcontrolmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->singlelmcontrolmode(), target);
  }

  // optional string activeClientID = 4;
  if (has_activeclientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientid().data(), this->activeclientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activeclientid(), target);
  }

  // optional string activeClientIP = 5;
  if (has_activeclientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeclientip().data(), this->activeclientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->activeclientip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTuningSourcesStatesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional bool singleLmControlMode = 3 [default = true];
    if (has_singlelmcontrolmode()) {
      total_size += 1 + 1;
    }

    // optional string activeClientID = 4;
    if (has_activeclientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activeclientid());
    }

    // optional string activeClientIP = 5;
    if (has_activeclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activeclientip());
    }

  }
  // repeated .Network.TuningSourceState tuningSourcesState = 2;
  total_size += 1 * this->tuningsourcesstate_size();
  for (int i = 0; i < this->tuningsourcesstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuningsourcesstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTuningSourcesStatesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTuningSourcesStatesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTuningSourcesStatesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTuningSourcesStatesReply::MergeFrom(const GetTuningSourcesStatesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuningsourcesstate_.MergeFrom(from.tuningsourcesstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_singlelmcontrolmode()) {
      set_singlelmcontrolmode(from.singlelmcontrolmode());
    }
    if (from.has_activeclientid()) {
      set_activeclientid(from.activeclientid());
    }
    if (from.has_activeclientip()) {
      set_activeclientip(from.activeclientip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTuningSourcesStatesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTuningSourcesStatesReply::CopyFrom(const GetTuningSourcesStatesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTuningSourcesStatesReply::IsInitialized() const {

  return true;
}

void GetTuningSourcesStatesReply::Swap(GetTuningSourcesStatesReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    tuningsourcesstate_.Swap(&other->tuningsourcesstate_);
    std::swap(singlelmcontrolmode_, other->singlelmcontrolmode_);
    std::swap(activeclientid_, other->activeclientid_);
    std::swap(activeclientip_, other->activeclientip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTuningSourcesStatesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTuningSourcesStatesReply_descriptor_;
  metadata.reflection = GetTuningSourcesStatesReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeConrolledTuningSourceRequest::kTakeControlFieldNumber;
const int ChangeConrolledTuningSourceRequest::kTuningSourceEquipmentIDFieldNumber;
const int ChangeConrolledTuningSourceRequest::kActivateControlFieldNumber;
#endif  // !_MSC_VER

ChangeConrolledTuningSourceRequest::ChangeConrolledTuningSourceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeConrolledTuningSourceRequest::InitAsDefaultInstance() {
}

ChangeConrolledTuningSourceRequest::ChangeConrolledTuningSourceRequest(const ChangeConrolledTuningSourceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeConrolledTuningSourceRequest::SharedCtor() {
  _cached_size_ = 0;
  takecontrol_ = false;
  tuningsourceequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activatecontrol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeConrolledTuningSourceRequest::~ChangeConrolledTuningSourceRequest() {
  SharedDtor();
}

void ChangeConrolledTuningSourceRequest::SharedDtor() {
  if (tuningsourceequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete tuningsourceequipmentid_;
  }
  if (this != default_instance_) {
  }
}

void ChangeConrolledTuningSourceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConrolledTuningSourceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeConrolledTuningSourceRequest_descriptor_;
}

const ChangeConrolledTuningSourceRequest& ChangeConrolledTuningSourceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ChangeConrolledTuningSourceRequest* ChangeConrolledTuningSourceRequest::default_instance_ = NULL;

ChangeConrolledTuningSourceRequest* ChangeConrolledTuningSourceRequest::New() const {
  return new ChangeConrolledTuningSourceRequest;
}

void ChangeConrolledTuningSourceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    takecontrol_ = false;
    if (has_tuningsourceequipmentid()) {
      if (tuningsourceequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        tuningsourceequipmentid_->clear();
      }
    }
    activatecontrol_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeConrolledTuningSourceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool takeControl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takecontrol_)));
          set_has_takecontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSourceEquipmentID;
        break;
      }

      // optional string tuningSourceEquipmentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningSourceEquipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tuningsourceequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tuningsourceequipmentid().data(), this->tuningsourceequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activateControl;
        break;
      }

      // optional bool activateControl = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activateControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activatecontrol_)));
          set_has_activatecontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeConrolledTuningSourceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool takeControl = 1;
  if (has_takecontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->takecontrol(), output);
  }

  // optional string tuningSourceEquipmentID = 2;
  if (has_tuningsourceequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tuningsourceequipmentid().data(), this->tuningsourceequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tuningsourceequipmentid(), output);
  }

  // optional bool activateControl = 3 [default = false];
  if (has_activatecontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->activatecontrol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeConrolledTuningSourceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool takeControl = 1;
  if (has_takecontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->takecontrol(), target);
  }

  // optional string tuningSourceEquipmentID = 2;
  if (has_tuningsourceequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tuningsourceequipmentid().data(), this->tuningsourceequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tuningsourceequipmentid(), target);
  }

  // optional bool activateControl = 3 [default = false];
  if (has_activatecontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->activatecontrol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeConrolledTuningSourceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool takeControl = 1;
    if (has_takecontrol()) {
      total_size += 1 + 1;
    }

    // optional string tuningSourceEquipmentID = 2;
    if (has_tuningsourceequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tuningsourceequipmentid());
    }

    // optional bool activateControl = 3 [default = false];
    if (has_activatecontrol()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConrolledTuningSourceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeConrolledTuningSourceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeConrolledTuningSourceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeConrolledTuningSourceRequest::MergeFrom(const ChangeConrolledTuningSourceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_takecontrol()) {
      set_takecontrol(from.takecontrol());
    }
    if (from.has_tuningsourceequipmentid()) {
      set_tuningsourceequipmentid(from.tuningsourceequipmentid());
    }
    if (from.has_activatecontrol()) {
      set_activatecontrol(from.activatecontrol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeConrolledTuningSourceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConrolledTuningSourceRequest::CopyFrom(const ChangeConrolledTuningSourceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConrolledTuningSourceRequest::IsInitialized() const {

  return true;
}

void ChangeConrolledTuningSourceRequest::Swap(ChangeConrolledTuningSourceRequest* other) {
  if (other != this) {
    std::swap(takecontrol_, other->takecontrol_);
    std::swap(tuningsourceequipmentid_, other->tuningsourceequipmentid_);
    std::swap(activatecontrol_, other->activatecontrol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeConrolledTuningSourceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeConrolledTuningSourceRequest_descriptor_;
  metadata.reflection = ChangeConrolledTuningSourceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeConrolledTuningSourceReply::kErrorFieldNumber;
const int ChangeConrolledTuningSourceReply::kControlledTuningSourceEquipmentIDFieldNumber;
const int ChangeConrolledTuningSourceReply::kControlIsActiveFieldNumber;
#endif  // !_MSC_VER

ChangeConrolledTuningSourceReply::ChangeConrolledTuningSourceReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeConrolledTuningSourceReply::InitAsDefaultInstance() {
}

ChangeConrolledTuningSourceReply::ChangeConrolledTuningSourceReply(const ChangeConrolledTuningSourceReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeConrolledTuningSourceReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  controlledtuningsourceequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  controlisactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeConrolledTuningSourceReply::~ChangeConrolledTuningSourceReply() {
  SharedDtor();
}

void ChangeConrolledTuningSourceReply::SharedDtor() {
  if (controlledtuningsourceequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete controlledtuningsourceequipmentid_;
  }
  if (this != default_instance_) {
  }
}

void ChangeConrolledTuningSourceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConrolledTuningSourceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeConrolledTuningSourceReply_descriptor_;
}

const ChangeConrolledTuningSourceReply& ChangeConrolledTuningSourceReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

ChangeConrolledTuningSourceReply* ChangeConrolledTuningSourceReply::default_instance_ = NULL;

ChangeConrolledTuningSourceReply* ChangeConrolledTuningSourceReply::New() const {
  return new ChangeConrolledTuningSourceReply;
}

void ChangeConrolledTuningSourceReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_controlledtuningsourceequipmentid()) {
      if (controlledtuningsourceequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        controlledtuningsourceequipmentid_->clear();
      }
    }
    controlisactive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeConrolledTuningSourceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_controlledTuningSourceEquipmentID;
        break;
      }

      // optional string controlledTuningSourceEquipmentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_controlledTuningSourceEquipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controlledtuningsourceequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->controlledtuningsourceequipmentid().data(), this->controlledtuningsourceequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_controlIsActive;
        break;
      }

      // optional bool controlIsActive = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlIsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controlisactive_)));
          set_has_controlisactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeConrolledTuningSourceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional string controlledTuningSourceEquipmentID = 2;
  if (has_controlledtuningsourceequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->controlledtuningsourceequipmentid().data(), this->controlledtuningsourceequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->controlledtuningsourceequipmentid(), output);
  }

  // optional bool controlIsActive = 3 [default = false];
  if (has_controlisactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->controlisactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeConrolledTuningSourceReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional string controlledTuningSourceEquipmentID = 2;
  if (has_controlledtuningsourceequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->controlledtuningsourceequipmentid().data(), this->controlledtuningsourceequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controlledtuningsourceequipmentid(), target);
  }

  // optional bool controlIsActive = 3 [default = false];
  if (has_controlisactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->controlisactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeConrolledTuningSourceReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional string controlledTuningSourceEquipmentID = 2;
    if (has_controlledtuningsourceequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controlledtuningsourceequipmentid());
    }

    // optional bool controlIsActive = 3 [default = false];
    if (has_controlisactive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConrolledTuningSourceReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeConrolledTuningSourceReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeConrolledTuningSourceReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeConrolledTuningSourceReply::MergeFrom(const ChangeConrolledTuningSourceReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_controlledtuningsourceequipmentid()) {
      set_controlledtuningsourceequipmentid(from.controlledtuningsourceequipmentid());
    }
    if (from.has_controlisactive()) {
      set_controlisactive(from.controlisactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeConrolledTuningSourceReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConrolledTuningSourceReply::CopyFrom(const ChangeConrolledTuningSourceReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConrolledTuningSourceReply::IsInitialized() const {

  return true;
}

void ChangeConrolledTuningSourceReply::Swap(ChangeConrolledTuningSourceReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(controlledtuningsourceequipmentid_, other->controlledtuningsourceequipmentid_);
    std::swap(controlisactive_, other->controlisactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeConrolledTuningSourceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeConrolledTuningSourceReply_descriptor_;
  metadata.reflection = ChangeConrolledTuningSourceReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalsRead::kSignalHashFieldNumber;
#endif  // !_MSC_VER

TuningSignalsRead::TuningSignalsRead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalsRead::InitAsDefaultInstance() {
}

TuningSignalsRead::TuningSignalsRead(const TuningSignalsRead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalsRead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalsRead::~TuningSignalsRead() {
  SharedDtor();
}

void TuningSignalsRead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalsRead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalsRead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalsRead_descriptor_;
}

const TuningSignalsRead& TuningSignalsRead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalsRead* TuningSignalsRead::default_instance_ = NULL;

TuningSignalsRead* TuningSignalsRead::New() const {
  return new TuningSignalsRead;
}

void TuningSignalsRead::Clear() {
  signalhash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalsRead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 signalHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_signalhash())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhash())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signalHash;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalsRead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 signalHash = 2;
  for (int i = 0; i < this->signalhash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->signalhash(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalsRead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 signalHash = 2;
  for (int i = 0; i < this->signalhash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->signalhash(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalsRead::ByteSize() const {
  int total_size = 0;

  // repeated uint64 signalHash = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhash_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhash(i));
    }
    total_size += 1 * this->signalhash_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalsRead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalsRead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalsRead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalsRead::MergeFrom(const TuningSignalsRead& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhash_.MergeFrom(from.signalhash_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalsRead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsRead::CopyFrom(const TuningSignalsRead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsRead::IsInitialized() const {

  return true;
}

void TuningSignalsRead::Swap(TuningSignalsRead* other) {
  if (other != this) {
    signalhash_.Swap(&other->signalhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalsRead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalsRead_descriptor_;
  metadata.reflection = TuningSignalsRead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalState::kSignalHashFieldNumber;
const int TuningSignalState::kErrorFieldNumber;
const int TuningSignalState::kValidFieldNumber;
const int TuningSignalState::kValueFieldNumber;
const int TuningSignalState::kReadLowBoundFieldNumber;
const int TuningSignalState::kReadHighBoundFieldNumber;
const int TuningSignalState::kWriteInProgressFieldNumber;
const int TuningSignalState::kWriteErrorCodeFieldNumber;
const int TuningSignalState::kWriteClientFieldNumber;
const int TuningSignalState::kSuccessfulReadTimeFieldNumber;
const int TuningSignalState::kWriteRequestTimeFieldNumber;
const int TuningSignalState::kSuccessfulWriteTimeFieldNumber;
const int TuningSignalState::kUnsuccessfulWriteTimeFieldNumber;
#endif  // !_MSC_VER

TuningSignalState::TuningSignalState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalState::InitAsDefaultInstance() {
  value_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  readlowbound_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  readhighbound_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
}

TuningSignalState::TuningSignalState(const TuningSignalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalState::SharedCtor() {
  _cached_size_ = 0;
  signalhash_ = GOOGLE_ULONGLONG(0);
  error_ = 0;
  valid_ = false;
  value_ = NULL;
  readlowbound_ = NULL;
  readhighbound_ = NULL;
  writeinprogress_ = false;
  writeerrorcode_ = 0;
  writeclient_ = GOOGLE_ULONGLONG(0);
  successfulreadtime_ = GOOGLE_LONGLONG(0);
  writerequesttime_ = GOOGLE_LONGLONG(0);
  successfulwritetime_ = GOOGLE_LONGLONG(0);
  unsuccessfulwritetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalState::~TuningSignalState() {
  SharedDtor();
}

void TuningSignalState::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
    delete readlowbound_;
    delete readhighbound_;
  }
}

void TuningSignalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalState_descriptor_;
}

const TuningSignalState& TuningSignalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalState* TuningSignalState::default_instance_ = NULL;

TuningSignalState* TuningSignalState::New() const {
  return new TuningSignalState;
}

void TuningSignalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signalhash_ = GOOGLE_ULONGLONG(0);
    error_ = 0;
    valid_ = false;
    if (has_value()) {
      if (value_ != NULL) value_->::Proto::TuningValue::Clear();
    }
    if (has_readlowbound()) {
      if (readlowbound_ != NULL) readlowbound_->::Proto::TuningValue::Clear();
    }
    if (has_readhighbound()) {
      if (readhighbound_ != NULL) readhighbound_->::Proto::TuningValue::Clear();
    }
    writeinprogress_ = false;
    writeerrorcode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    writeclient_ = GOOGLE_ULONGLONG(0);
    successfulreadtime_ = GOOGLE_LONGLONG(0);
    writerequesttime_ = GOOGLE_LONGLONG(0);
    successfulwritetime_ = GOOGLE_LONGLONG(0);
    unsuccessfulwritetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 signalHash = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signalhash_)));
          set_has_signalhash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional int32 error = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valid;
        break;
      }

      // optional bool valid = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional .Proto.TuningValue value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_readLowBound;
        break;
      }

      // optional .Proto.TuningValue readLowBound = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_readLowBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readlowbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_readHighBound;
        break;
      }

      // optional .Proto.TuningValue readHighBound = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_readHighBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readhighbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_writeInProgress;
        break;
      }

      // optional bool writeInProgress = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeInProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writeinprogress_)));
          set_has_writeinprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_writeErrorCode;
        break;
      }

      // optional int32 writeErrorCode = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeerrorcode_)));
          set_has_writeerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_writeClient;
        break;
      }

      // optional fixed64 writeClient = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_writeClient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &writeclient_)));
          set_has_writeclient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_successfulReadTime;
        break;
      }

      // optional sfixed64 successfulReadTime = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_successfulReadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &successfulreadtime_)));
          set_has_successfulreadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_writeRequestTime;
        break;
      }

      // optional sfixed64 writeRequestTime = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_writeRequestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &writerequesttime_)));
          set_has_writerequesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_successfulWriteTime;
        break;
      }

      // optional sfixed64 successfulWriteTime = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_successfulWriteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &successfulwritetime_)));
          set_has_successfulwritetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_unsuccessfulWriteTime;
        break;
      }

      // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unsuccessfulWriteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &unsuccessfulwritetime_)));
          set_has_unsuccessfulwritetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 signalHash = 1 [default = 0];
  if (has_signalhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->signalhash(), output);
  }

  // optional int32 error = 2 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  // optional bool valid = 3 [default = false];
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valid(), output);
  }

  // optional .Proto.TuningValue value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value(), output);
  }

  // optional .Proto.TuningValue readLowBound = 5;
  if (has_readlowbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->readlowbound(), output);
  }

  // optional .Proto.TuningValue readHighBound = 6;
  if (has_readhighbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->readhighbound(), output);
  }

  // optional bool writeInProgress = 7 [default = false];
  if (has_writeinprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->writeinprogress(), output);
  }

  // optional int32 writeErrorCode = 8 [default = 0];
  if (has_writeerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->writeerrorcode(), output);
  }

  // optional fixed64 writeClient = 9 [default = 0];
  if (has_writeclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->writeclient(), output);
  }

  // optional sfixed64 successfulReadTime = 10 [default = 0];
  if (has_successfulreadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->successfulreadtime(), output);
  }

  // optional sfixed64 writeRequestTime = 11 [default = 0];
  if (has_writerequesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->writerequesttime(), output);
  }

  // optional sfixed64 successfulWriteTime = 12 [default = 0];
  if (has_successfulwritetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->successfulwritetime(), output);
  }

  // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
  if (has_unsuccessfulwritetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->unsuccessfulwritetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 signalHash = 1 [default = 0];
  if (has_signalhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->signalhash(), target);
  }

  // optional int32 error = 2 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  // optional bool valid = 3 [default = false];
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valid(), target);
  }

  // optional .Proto.TuningValue value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value(), target);
  }

  // optional .Proto.TuningValue readLowBound = 5;
  if (has_readlowbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->readlowbound(), target);
  }

  // optional .Proto.TuningValue readHighBound = 6;
  if (has_readhighbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->readhighbound(), target);
  }

  // optional bool writeInProgress = 7 [default = false];
  if (has_writeinprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->writeinprogress(), target);
  }

  // optional int32 writeErrorCode = 8 [default = 0];
  if (has_writeerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->writeerrorcode(), target);
  }

  // optional fixed64 writeClient = 9 [default = 0];
  if (has_writeclient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->writeclient(), target);
  }

  // optional sfixed64 successfulReadTime = 10 [default = 0];
  if (has_successfulreadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->successfulreadtime(), target);
  }

  // optional sfixed64 writeRequestTime = 11 [default = 0];
  if (has_writerequesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->writerequesttime(), target);
  }

  // optional sfixed64 successfulWriteTime = 12 [default = 0];
  if (has_successfulwritetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->successfulwritetime(), target);
  }

  // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
  if (has_unsuccessfulwritetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->unsuccessfulwritetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 signalHash = 1 [default = 0];
    if (has_signalhash()) {
      total_size += 1 + 8;
    }

    // optional int32 error = 2 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional bool valid = 3 [default = false];
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional .Proto.TuningValue value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

    // optional .Proto.TuningValue readLowBound = 5;
    if (has_readlowbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readlowbound());
    }

    // optional .Proto.TuningValue readHighBound = 6;
    if (has_readhighbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readhighbound());
    }

    // optional bool writeInProgress = 7 [default = false];
    if (has_writeinprogress()) {
      total_size += 1 + 1;
    }

    // optional int32 writeErrorCode = 8 [default = 0];
    if (has_writeerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeerrorcode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 writeClient = 9 [default = 0];
    if (has_writeclient()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 successfulReadTime = 10 [default = 0];
    if (has_successfulreadtime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 writeRequestTime = 11 [default = 0];
    if (has_writerequesttime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 successfulWriteTime = 12 [default = 0];
    if (has_successfulwritetime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
    if (has_unsuccessfulwritetime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalState::MergeFrom(const TuningSignalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalhash()) {
      set_signalhash(from.signalhash());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_value()) {
      mutable_value()->::Proto::TuningValue::MergeFrom(from.value());
    }
    if (from.has_readlowbound()) {
      mutable_readlowbound()->::Proto::TuningValue::MergeFrom(from.readlowbound());
    }
    if (from.has_readhighbound()) {
      mutable_readhighbound()->::Proto::TuningValue::MergeFrom(from.readhighbound());
    }
    if (from.has_writeinprogress()) {
      set_writeinprogress(from.writeinprogress());
    }
    if (from.has_writeerrorcode()) {
      set_writeerrorcode(from.writeerrorcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writeclient()) {
      set_writeclient(from.writeclient());
    }
    if (from.has_successfulreadtime()) {
      set_successfulreadtime(from.successfulreadtime());
    }
    if (from.has_writerequesttime()) {
      set_writerequesttime(from.writerequesttime());
    }
    if (from.has_successfulwritetime()) {
      set_successfulwritetime(from.successfulwritetime());
    }
    if (from.has_unsuccessfulwritetime()) {
      set_unsuccessfulwritetime(from.unsuccessfulwritetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalState::CopyFrom(const TuningSignalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalState::IsInitialized() const {

  return true;
}

void TuningSignalState::Swap(TuningSignalState* other) {
  if (other != this) {
    std::swap(signalhash_, other->signalhash_);
    std::swap(error_, other->error_);
    std::swap(valid_, other->valid_);
    std::swap(value_, other->value_);
    std::swap(readlowbound_, other->readlowbound_);
    std::swap(readhighbound_, other->readhighbound_);
    std::swap(writeinprogress_, other->writeinprogress_);
    std::swap(writeerrorcode_, other->writeerrorcode_);
    std::swap(writeclient_, other->writeclient_);
    std::swap(successfulreadtime_, other->successfulreadtime_);
    std::swap(writerequesttime_, other->writerequesttime_);
    std::swap(successfulwritetime_, other->successfulwritetime_);
    std::swap(unsuccessfulwritetime_, other->unsuccessfulwritetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalState_descriptor_;
  metadata.reflection = TuningSignalState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalsReadReply::kErrorFieldNumber;
const int TuningSignalsReadReply::kTuningSignalStateFieldNumber;
#endif  // !_MSC_VER

TuningSignalsReadReply::TuningSignalsReadReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalsReadReply::InitAsDefaultInstance() {
}

TuningSignalsReadReply::TuningSignalsReadReply(const TuningSignalsReadReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalsReadReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalsReadReply::~TuningSignalsReadReply() {
  SharedDtor();
}

void TuningSignalsReadReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalsReadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalsReadReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalsReadReply_descriptor_;
}

const TuningSignalsReadReply& TuningSignalsReadReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalsReadReply* TuningSignalsReadReply::default_instance_ = NULL;

TuningSignalsReadReply* TuningSignalsReadReply::New() const {
  return new TuningSignalsReadReply;
}

void TuningSignalsReadReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  tuningsignalstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalsReadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSignalState;
        break;
      }

      // repeated .Network.TuningSignalState tuningSignalState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningSignalState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuningsignalstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tuningSignalState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalsReadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.TuningSignalState tuningSignalState = 2;
  for (int i = 0; i < this->tuningsignalstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tuningsignalstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalsReadReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.TuningSignalState tuningSignalState = 2;
  for (int i = 0; i < this->tuningsignalstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tuningsignalstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalsReadReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.TuningSignalState tuningSignalState = 2;
  total_size += 1 * this->tuningsignalstate_size();
  for (int i = 0; i < this->tuningsignalstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuningsignalstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalsReadReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalsReadReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalsReadReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalsReadReply::MergeFrom(const TuningSignalsReadReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuningsignalstate_.MergeFrom(from.tuningsignalstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalsReadReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsReadReply::CopyFrom(const TuningSignalsReadReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsReadReply::IsInitialized() const {

  return true;
}

void TuningSignalsReadReply::Swap(TuningSignalsReadReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    tuningsignalstate_.Swap(&other->tuningsignalstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalsReadReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalsReadReply_descriptor_;
  metadata.reflection = TuningSignalsReadReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningWriteCommand::kSignalHashFieldNumber;
const int TuningWriteCommand::kValueFieldNumber;
#endif  // !_MSC_VER

TuningWriteCommand::TuningWriteCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningWriteCommand::InitAsDefaultInstance() {
  value_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
}

TuningWriteCommand::TuningWriteCommand(const TuningWriteCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningWriteCommand::SharedCtor() {
  _cached_size_ = 0;
  signalhash_ = GOOGLE_ULONGLONG(0);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningWriteCommand::~TuningWriteCommand() {
  SharedDtor();
}

void TuningWriteCommand::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void TuningWriteCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningWriteCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningWriteCommand_descriptor_;
}

const TuningWriteCommand& TuningWriteCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningWriteCommand* TuningWriteCommand::default_instance_ = NULL;

TuningWriteCommand* TuningWriteCommand::New() const {
  return new TuningWriteCommand;
}

void TuningWriteCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signalhash_ = GOOGLE_ULONGLONG(0);
    if (has_value()) {
      if (value_ != NULL) value_->::Proto::TuningValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningWriteCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 signalHash = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signalhash_)));
          set_has_signalhash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .Proto.TuningValue value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningWriteCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 signalHash = 1 [default = 0];
  if (has_signalhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signalhash(), output);
  }

  // optional .Proto.TuningValue value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningWriteCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 signalHash = 1 [default = 0];
  if (has_signalhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signalhash(), target);
  }

  // optional .Proto.TuningValue value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningWriteCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 signalHash = 1 [default = 0];
    if (has_signalhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signalhash());
    }

    // optional .Proto.TuningValue value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningWriteCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningWriteCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningWriteCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningWriteCommand::MergeFrom(const TuningWriteCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalhash()) {
      set_signalhash(from.signalhash());
    }
    if (from.has_value()) {
      mutable_value()->::Proto::TuningValue::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningWriteCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningWriteCommand::CopyFrom(const TuningWriteCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningWriteCommand::IsInitialized() const {

  return true;
}

void TuningWriteCommand::Swap(TuningWriteCommand* other) {
  if (other != this) {
    std::swap(signalhash_, other->signalhash_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningWriteCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningWriteCommand_descriptor_;
  metadata.reflection = TuningWriteCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalsWrite::kAutoApplyFieldNumber;
const int TuningSignalsWrite::kCommandsFieldNumber;
#endif  // !_MSC_VER

TuningSignalsWrite::TuningSignalsWrite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalsWrite::InitAsDefaultInstance() {
}

TuningSignalsWrite::TuningSignalsWrite(const TuningSignalsWrite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalsWrite::SharedCtor() {
  _cached_size_ = 0;
  autoapply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalsWrite::~TuningSignalsWrite() {
  SharedDtor();
}

void TuningSignalsWrite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalsWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalsWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalsWrite_descriptor_;
}

const TuningSignalsWrite& TuningSignalsWrite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalsWrite* TuningSignalsWrite::default_instance_ = NULL;

TuningSignalsWrite* TuningSignalsWrite::New() const {
  return new TuningSignalsWrite;
}

void TuningSignalsWrite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autoapply_ = false;
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalsWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool autoApply = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoapply_)));
          set_has_autoapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        break;
      }

      // repeated .Network.TuningWriteCommand commands = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalsWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool autoApply = 2 [default = false];
  if (has_autoapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoapply(), output);
  }

  // repeated .Network.TuningWriteCommand commands = 3;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalsWrite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool autoApply = 2 [default = false];
  if (has_autoapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoapply(), target);
  }

  // repeated .Network.TuningWriteCommand commands = 3;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalsWrite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool autoApply = 2 [default = false];
    if (has_autoapply()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Network.TuningWriteCommand commands = 3;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalsWrite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalsWrite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalsWrite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalsWrite::MergeFrom(const TuningSignalsWrite& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoapply()) {
      set_autoapply(from.autoapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalsWrite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsWrite::CopyFrom(const TuningSignalsWrite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsWrite::IsInitialized() const {

  return true;
}

void TuningSignalsWrite::Swap(TuningSignalsWrite* other) {
  if (other != this) {
    std::swap(autoapply_, other->autoapply_);
    commands_.Swap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalsWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalsWrite_descriptor_;
  metadata.reflection = TuningSignalsWrite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalWriteResult::kSignalHashFieldNumber;
const int TuningSignalWriteResult::kErrorFieldNumber;
#endif  // !_MSC_VER

TuningSignalWriteResult::TuningSignalWriteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalWriteResult::InitAsDefaultInstance() {
}

TuningSignalWriteResult::TuningSignalWriteResult(const TuningSignalWriteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalWriteResult::SharedCtor() {
  _cached_size_ = 0;
  signalhash_ = GOOGLE_ULONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalWriteResult::~TuningSignalWriteResult() {
  SharedDtor();
}

void TuningSignalWriteResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalWriteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalWriteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalWriteResult_descriptor_;
}

const TuningSignalWriteResult& TuningSignalWriteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalWriteResult* TuningSignalWriteResult::default_instance_ = NULL;

TuningSignalWriteResult* TuningSignalWriteResult::New() const {
  return new TuningSignalWriteResult;
}

void TuningSignalWriteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signalhash_ = GOOGLE_ULONGLONG(0);
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalWriteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 signalHash = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signalhash_)));
          set_has_signalhash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional int32 error = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalWriteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 signalHash = 1 [default = 0];
  if (has_signalhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signalhash(), output);
  }

  // optional int32 error = 2 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalWriteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 signalHash = 1 [default = 0];
  if (has_signalhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signalhash(), target);
  }

  // optional int32 error = 2 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalWriteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 signalHash = 1 [default = 0];
    if (has_signalhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signalhash());
    }

    // optional int32 error = 2 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalWriteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalWriteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalWriteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalWriteResult::MergeFrom(const TuningSignalWriteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalhash()) {
      set_signalhash(from.signalhash());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalWriteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalWriteResult::CopyFrom(const TuningSignalWriteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalWriteResult::IsInitialized() const {

  return true;
}

void TuningSignalWriteResult::Swap(TuningSignalWriteResult* other) {
  if (other != this) {
    std::swap(signalhash_, other->signalhash_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalWriteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalWriteResult_descriptor_;
  metadata.reflection = TuningSignalWriteResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalsWriteReply::kErrorFieldNumber;
const int TuningSignalsWriteReply::kWriteResultFieldNumber;
#endif  // !_MSC_VER

TuningSignalsWriteReply::TuningSignalsWriteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalsWriteReply::InitAsDefaultInstance() {
}

TuningSignalsWriteReply::TuningSignalsWriteReply(const TuningSignalsWriteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalsWriteReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalsWriteReply::~TuningSignalsWriteReply() {
  SharedDtor();
}

void TuningSignalsWriteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalsWriteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalsWriteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalsWriteReply_descriptor_;
}

const TuningSignalsWriteReply& TuningSignalsWriteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalsWriteReply* TuningSignalsWriteReply::default_instance_ = NULL;

TuningSignalsWriteReply* TuningSignalsWriteReply::New() const {
  return new TuningSignalsWriteReply;
}

void TuningSignalsWriteReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  writeresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalsWriteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_writeResult;
        break;
      }

      // repeated .Network.TuningSignalWriteResult writeResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_writeResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_writeresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_writeResult;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalsWriteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Network.TuningSignalWriteResult writeResult = 2;
  for (int i = 0; i < this->writeresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->writeresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalsWriteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Network.TuningSignalWriteResult writeResult = 2;
  for (int i = 0; i < this->writeresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->writeresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalsWriteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Network.TuningSignalWriteResult writeResult = 2;
  total_size += 1 * this->writeresult_size();
  for (int i = 0; i < this->writeresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->writeresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalsWriteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalsWriteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalsWriteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalsWriteReply::MergeFrom(const TuningSignalsWriteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  writeresult_.MergeFrom(from.writeresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalsWriteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsWriteReply::CopyFrom(const TuningSignalsWriteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsWriteReply::IsInitialized() const {

  return true;
}

void TuningSignalsWriteReply::Swap(TuningSignalsWriteReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    writeresult_.Swap(&other->writeresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalsWriteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalsWriteReply_descriptor_;
  metadata.reflection = TuningSignalsWriteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TuningSignalsApply::TuningSignalsApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalsApply::InitAsDefaultInstance() {
}

TuningSignalsApply::TuningSignalsApply(const TuningSignalsApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalsApply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalsApply::~TuningSignalsApply() {
  SharedDtor();
}

void TuningSignalsApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalsApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalsApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalsApply_descriptor_;
}

const TuningSignalsApply& TuningSignalsApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalsApply* TuningSignalsApply::default_instance_ = NULL;

TuningSignalsApply* TuningSignalsApply::New() const {
  return new TuningSignalsApply;
}

void TuningSignalsApply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalsApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TuningSignalsApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalsApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalsApply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalsApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalsApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalsApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalsApply::MergeFrom(const TuningSignalsApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalsApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsApply::CopyFrom(const TuningSignalsApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsApply::IsInitialized() const {

  return true;
}

void TuningSignalsApply::Swap(TuningSignalsApply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalsApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalsApply_descriptor_;
  metadata.reflection = TuningSignalsApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningSignalsApplyReply::kErrorFieldNumber;
#endif  // !_MSC_VER

TuningSignalsApplyReply::TuningSignalsApplyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningSignalsApplyReply::InitAsDefaultInstance() {
}

TuningSignalsApplyReply::TuningSignalsApplyReply(const TuningSignalsApplyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningSignalsApplyReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningSignalsApplyReply::~TuningSignalsApplyReply() {
  SharedDtor();
}

void TuningSignalsApplyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningSignalsApplyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningSignalsApplyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningSignalsApplyReply_descriptor_;
}

const TuningSignalsApplyReply& TuningSignalsApplyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

TuningSignalsApplyReply* TuningSignalsApplyReply::default_instance_ = NULL;

TuningSignalsApplyReply* TuningSignalsApplyReply::New() const {
  return new TuningSignalsApplyReply;
}

void TuningSignalsApplyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningSignalsApplyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningSignalsApplyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningSignalsApplyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningSignalsApplyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningSignalsApplyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningSignalsApplyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningSignalsApplyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningSignalsApplyReply::MergeFrom(const TuningSignalsApplyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningSignalsApplyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningSignalsApplyReply::CopyFrom(const TuningSignalsApplyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningSignalsApplyReply::IsInitialized() const {

  return true;
}

void TuningSignalsApplyReply::Swap(TuningSignalsApplyReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningSignalsApplyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningSignalsApplyReply_descriptor_;
  metadata.reflection = TuningSignalsApplyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveAppSignalsStatesToArchiveRequest::kClientEquipmentIDFieldNumber;
const int SaveAppSignalsStatesToArchiveRequest::kAppSignalStatesFieldNumber;
#endif  // !_MSC_VER

SaveAppSignalsStatesToArchiveRequest::SaveAppSignalsStatesToArchiveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveAppSignalsStatesToArchiveRequest::InitAsDefaultInstance() {
}

SaveAppSignalsStatesToArchiveRequest::SaveAppSignalsStatesToArchiveRequest(const SaveAppSignalsStatesToArchiveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveAppSignalsStatesToArchiveRequest::SharedCtor() {
  _cached_size_ = 0;
  clientequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveAppSignalsStatesToArchiveRequest::~SaveAppSignalsStatesToArchiveRequest() {
  SharedDtor();
}

void SaveAppSignalsStatesToArchiveRequest::SharedDtor() {
  if (clientequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientequipmentid_;
  }
  if (this != default_instance_) {
  }
}

void SaveAppSignalsStatesToArchiveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveAppSignalsStatesToArchiveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveAppSignalsStatesToArchiveRequest_descriptor_;
}

const SaveAppSignalsStatesToArchiveRequest& SaveAppSignalsStatesToArchiveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

SaveAppSignalsStatesToArchiveRequest* SaveAppSignalsStatesToArchiveRequest::default_instance_ = NULL;

SaveAppSignalsStatesToArchiveRequest* SaveAppSignalsStatesToArchiveRequest::New() const {
  return new SaveAppSignalsStatesToArchiveRequest;
}

void SaveAppSignalsStatesToArchiveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientequipmentid()) {
      if (clientequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        clientequipmentid_->clear();
      }
    }
  }
  appsignalstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveAppSignalsStatesToArchiveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientEquipmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientequipmentid().data(), this->clientequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalStates;
        break;
      }

      // repeated .Proto.AppSignalState appSignalStates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveAppSignalsStatesToArchiveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clientEquipmentID = 1;
  if (has_clientequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientequipmentid().data(), this->clientequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientequipmentid(), output);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appsignalstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveAppSignalsStatesToArchiveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clientEquipmentID = 1;
  if (has_clientequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientequipmentid().data(), this->clientequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientequipmentid(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 2;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appsignalstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveAppSignalsStatesToArchiveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clientEquipmentID = 1;
    if (has_clientequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientequipmentid());
    }

  }
  // repeated .Proto.AppSignalState appSignalStates = 2;
  total_size += 1 * this->appsignalstates_size();
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveAppSignalsStatesToArchiveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveAppSignalsStatesToArchiveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveAppSignalsStatesToArchiveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveAppSignalsStatesToArchiveRequest::MergeFrom(const SaveAppSignalsStatesToArchiveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalstates_.MergeFrom(from.appsignalstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientequipmentid()) {
      set_clientequipmentid(from.clientequipmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveAppSignalsStatesToArchiveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveAppSignalsStatesToArchiveRequest::CopyFrom(const SaveAppSignalsStatesToArchiveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveAppSignalsStatesToArchiveRequest::IsInitialized() const {

  return true;
}

void SaveAppSignalsStatesToArchiveRequest::Swap(SaveAppSignalsStatesToArchiveRequest* other) {
  if (other != this) {
    std::swap(clientequipmentid_, other->clientequipmentid_);
    appsignalstates_.Swap(&other->appsignalstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveAppSignalsStatesToArchiveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveAppSignalsStatesToArchiveRequest_descriptor_;
  metadata.reflection = SaveAppSignalsStatesToArchiveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveAppSignalsStatesToArchiveReply::kErrorFieldNumber;
const int SaveAppSignalsStatesToArchiveReply::kArchErrorFieldNumber;
#endif  // !_MSC_VER

SaveAppSignalsStatesToArchiveReply::SaveAppSignalsStatesToArchiveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveAppSignalsStatesToArchiveReply::InitAsDefaultInstance() {
}

SaveAppSignalsStatesToArchiveReply::SaveAppSignalsStatesToArchiveReply(const SaveAppSignalsStatesToArchiveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveAppSignalsStatesToArchiveReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  archerror_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveAppSignalsStatesToArchiveReply::~SaveAppSignalsStatesToArchiveReply() {
  SharedDtor();
}

void SaveAppSignalsStatesToArchiveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveAppSignalsStatesToArchiveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveAppSignalsStatesToArchiveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveAppSignalsStatesToArchiveReply_descriptor_;
}

const SaveAppSignalsStatesToArchiveReply& SaveAppSignalsStatesToArchiveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

SaveAppSignalsStatesToArchiveReply* SaveAppSignalsStatesToArchiveReply::default_instance_ = NULL;

SaveAppSignalsStatesToArchiveReply* SaveAppSignalsStatesToArchiveReply::New() const {
  return new SaveAppSignalsStatesToArchiveReply;
}

void SaveAppSignalsStatesToArchiveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    archerror_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveAppSignalsStatesToArchiveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_archError;
        break;
      }

      // optional int32 archError = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archerror_)));
          set_has_archerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveAppSignalsStatesToArchiveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->archerror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveAppSignalsStatesToArchiveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->archerror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveAppSignalsStatesToArchiveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 archError = 2 [default = 100];
    if (has_archerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archerror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveAppSignalsStatesToArchiveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveAppSignalsStatesToArchiveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveAppSignalsStatesToArchiveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveAppSignalsStatesToArchiveReply::MergeFrom(const SaveAppSignalsStatesToArchiveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_archerror()) {
      set_archerror(from.archerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveAppSignalsStatesToArchiveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveAppSignalsStatesToArchiveReply::CopyFrom(const SaveAppSignalsStatesToArchiveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveAppSignalsStatesToArchiveReply::IsInitialized() const {

  return true;
}

void SaveAppSignalsStatesToArchiveReply::Swap(SaveAppSignalsStatesToArchiveReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(archerror_, other->archerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveAppSignalsStatesToArchiveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveAppSignalsStatesToArchiveReply_descriptor_;
  metadata.reflection = SaveAppSignalsStatesToArchiveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStatesFromArchiveStartRequest::kClientEquipmentIDFieldNumber;
const int GetAppSignalStatesFromArchiveStartRequest::kTimeTypeFieldNumber;
const int GetAppSignalStatesFromArchiveStartRequest::kStartTimeFieldNumber;
const int GetAppSignalStatesFromArchiveStartRequest::kEndTimeFieldNumber;
const int GetAppSignalStatesFromArchiveStartRequest::kSignalHashesFieldNumber;
const int GetAppSignalStatesFromArchiveStartRequest::kRemovePeriodicFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStatesFromArchiveStartRequest::GetAppSignalStatesFromArchiveStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStatesFromArchiveStartRequest::InitAsDefaultInstance() {
}

GetAppSignalStatesFromArchiveStartRequest::GetAppSignalStatesFromArchiveStartRequest(const GetAppSignalStatesFromArchiveStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveStartRequest::SharedCtor() {
  _cached_size_ = 0;
  clientequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timetype_ = 1;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  removeperiodic_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStatesFromArchiveStartRequest::~GetAppSignalStatesFromArchiveStartRequest() {
  SharedDtor();
}

void GetAppSignalStatesFromArchiveStartRequest::SharedDtor() {
  if (clientequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientequipmentid_;
  }
  if (this != default_instance_) {
  }
}

void GetAppSignalStatesFromArchiveStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStatesFromArchiveStartRequest_descriptor_;
}

const GetAppSignalStatesFromArchiveStartRequest& GetAppSignalStatesFromArchiveStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStatesFromArchiveStartRequest* GetAppSignalStatesFromArchiveStartRequest::default_instance_ = NULL;

GetAppSignalStatesFromArchiveStartRequest* GetAppSignalStatesFromArchiveStartRequest::New() const {
  return new GetAppSignalStatesFromArchiveStartRequest;
}

void GetAppSignalStatesFromArchiveStartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientequipmentid()) {
      if (clientequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        clientequipmentid_->clear();
      }
    }
    timetype_ = 1;
    starttime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    removeperiodic_ = true;
  }
  signalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStatesFromArchiveStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientEquipmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientequipmentid().data(), this->clientequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeType;
        break;
      }

      // optional int32 timeType = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetype_)));
          set_has_timetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_startTime;
        break;
      }

      // optional sfixed64 startTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_endTime;
        break;
      }

      // optional sfixed64 endTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_signalHashes;
        break;
      }

      // repeated uint64 signalHashes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_signalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_signalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_signalHashes;
        if (input->ExpectTag(48)) goto parse_removePeriodic;
        break;
      }

      // optional bool removePeriodic = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removePeriodic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removeperiodic_)));
          set_has_removeperiodic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStatesFromArchiveStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clientEquipmentID = 1;
  if (has_clientequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientequipmentid().data(), this->clientequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientequipmentid(), output);
  }

  // optional int32 timeType = 2 [default = 1];
  if (has_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timetype(), output);
  }

  // optional sfixed64 startTime = 3 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->starttime(), output);
  }

  // optional sfixed64 endTime = 4 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->endtime(), output);
  }

  // repeated uint64 signalHashes = 5;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->signalhashes(i), output);
  }

  // optional bool removePeriodic = 6 [default = true];
  if (has_removeperiodic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->removeperiodic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStatesFromArchiveStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clientEquipmentID = 1;
  if (has_clientequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientequipmentid().data(), this->clientequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientequipmentid(), target);
  }

  // optional int32 timeType = 2 [default = 1];
  if (has_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timetype(), target);
  }

  // optional sfixed64 startTime = 3 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->starttime(), target);
  }

  // optional sfixed64 endTime = 4 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->endtime(), target);
  }

  // repeated uint64 signalHashes = 5;
  for (int i = 0; i < this->signalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->signalhashes(i), target);
  }

  // optional bool removePeriodic = 6 [default = true];
  if (has_removeperiodic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->removeperiodic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStatesFromArchiveStartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clientEquipmentID = 1;
    if (has_clientequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientequipmentid());
    }

    // optional int32 timeType = 2 [default = 1];
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetype());
    }

    // optional sfixed64 startTime = 3 [default = 0];
    if (has_starttime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 endTime = 4 [default = 0];
    if (has_endtime()) {
      total_size += 1 + 8;
    }

    // optional bool removePeriodic = 6 [default = true];
    if (has_removeperiodic()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 signalHashes = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->signalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->signalhashes(i));
    }
    total_size += 1 * this->signalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStatesFromArchiveStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStatesFromArchiveStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveStartRequest::MergeFrom(const GetAppSignalStatesFromArchiveStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalhashes_.MergeFrom(from.signalhashes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientequipmentid()) {
      set_clientequipmentid(from.clientequipmentid());
    }
    if (from.has_timetype()) {
      set_timetype(from.timetype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_removeperiodic()) {
      set_removeperiodic(from.removeperiodic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStatesFromArchiveStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveStartRequest::CopyFrom(const GetAppSignalStatesFromArchiveStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveStartRequest::IsInitialized() const {

  return true;
}

void GetAppSignalStatesFromArchiveStartRequest::Swap(GetAppSignalStatesFromArchiveStartRequest* other) {
  if (other != this) {
    std::swap(clientequipmentid_, other->clientequipmentid_);
    std::swap(timetype_, other->timetype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    signalhashes_.Swap(&other->signalhashes_);
    std::swap(removeperiodic_, other->removeperiodic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStatesFromArchiveStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStatesFromArchiveStartRequest_descriptor_;
  metadata.reflection = GetAppSignalStatesFromArchiveStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStatesFromArchiveStartReply::kErrorFieldNumber;
const int GetAppSignalStatesFromArchiveStartReply::kArchErrorFieldNumber;
const int GetAppSignalStatesFromArchiveStartReply::kErrorStringFieldNumber;
const int GetAppSignalStatesFromArchiveStartReply::kRequestIDFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStatesFromArchiveStartReply::GetAppSignalStatesFromArchiveStartReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStatesFromArchiveStartReply::InitAsDefaultInstance() {
}

GetAppSignalStatesFromArchiveStartReply::GetAppSignalStatesFromArchiveStartReply(const GetAppSignalStatesFromArchiveStartReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveStartReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  archerror_ = 100;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStatesFromArchiveStartReply::~GetAppSignalStatesFromArchiveStartReply() {
  SharedDtor();
}

void GetAppSignalStatesFromArchiveStartReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void GetAppSignalStatesFromArchiveStartReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveStartReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStatesFromArchiveStartReply_descriptor_;
}

const GetAppSignalStatesFromArchiveStartReply& GetAppSignalStatesFromArchiveStartReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStatesFromArchiveStartReply* GetAppSignalStatesFromArchiveStartReply::default_instance_ = NULL;

GetAppSignalStatesFromArchiveStartReply* GetAppSignalStatesFromArchiveStartReply::New() const {
  return new GetAppSignalStatesFromArchiveStartReply;
}

void GetAppSignalStatesFromArchiveStartReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    archerror_ = 100;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
    requestid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStatesFromArchiveStartReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_archError;
        break;
      }

      // optional int32 archError = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archerror_)));
          set_has_archerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestID;
        break;
      }

      // optional uint32 requestID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_errorString;
        break;
      }

      // optional string errorString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStatesFromArchiveStartReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->archerror(), output);
  }

  // optional uint32 requestID = 3 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->requestid(), output);
  }

  // optional string errorString = 4;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->errorstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStatesFromArchiveStartReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->archerror(), target);
  }

  // optional uint32 requestID = 3 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->requestid(), target);
  }

  // optional string errorString = 4;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errorstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStatesFromArchiveStartReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 archError = 2 [default = 100];
    if (has_archerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archerror());
    }

    // optional string errorString = 4;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

    // optional uint32 requestID = 3 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStatesFromArchiveStartReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveStartReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStatesFromArchiveStartReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveStartReply::MergeFrom(const GetAppSignalStatesFromArchiveStartReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_archerror()) {
      set_archerror(from.archerror());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStatesFromArchiveStartReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveStartReply::CopyFrom(const GetAppSignalStatesFromArchiveStartReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveStartReply::IsInitialized() const {

  return true;
}

void GetAppSignalStatesFromArchiveStartReply::Swap(GetAppSignalStatesFromArchiveStartReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(archerror_, other->archerror_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStatesFromArchiveStartReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStatesFromArchiveStartReply_descriptor_;
  metadata.reflection = GetAppSignalStatesFromArchiveStartReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStatesFromArchiveNextRequest::kRequestIDFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStatesFromArchiveNextRequest::GetAppSignalStatesFromArchiveNextRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStatesFromArchiveNextRequest::InitAsDefaultInstance() {
}

GetAppSignalStatesFromArchiveNextRequest::GetAppSignalStatesFromArchiveNextRequest(const GetAppSignalStatesFromArchiveNextRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveNextRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStatesFromArchiveNextRequest::~GetAppSignalStatesFromArchiveNextRequest() {
  SharedDtor();
}

void GetAppSignalStatesFromArchiveNextRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalStatesFromArchiveNextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveNextRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStatesFromArchiveNextRequest_descriptor_;
}

const GetAppSignalStatesFromArchiveNextRequest& GetAppSignalStatesFromArchiveNextRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStatesFromArchiveNextRequest* GetAppSignalStatesFromArchiveNextRequest::default_instance_ = NULL;

GetAppSignalStatesFromArchiveNextRequest* GetAppSignalStatesFromArchiveNextRequest::New() const {
  return new GetAppSignalStatesFromArchiveNextRequest;
}

void GetAppSignalStatesFromArchiveNextRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStatesFromArchiveNextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 requestID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStatesFromArchiveNextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 requestID = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStatesFromArchiveNextRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 requestID = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStatesFromArchiveNextRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 requestID = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStatesFromArchiveNextRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveNextRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStatesFromArchiveNextRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveNextRequest::MergeFrom(const GetAppSignalStatesFromArchiveNextRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStatesFromArchiveNextRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveNextRequest::CopyFrom(const GetAppSignalStatesFromArchiveNextRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveNextRequest::IsInitialized() const {

  return true;
}

void GetAppSignalStatesFromArchiveNextRequest::Swap(GetAppSignalStatesFromArchiveNextRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStatesFromArchiveNextRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStatesFromArchiveNextRequest_descriptor_;
  metadata.reflection = GetAppSignalStatesFromArchiveNextRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStatesFromArchiveNextReply::kErrorFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kArchErrorFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kRequestIDFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kErrorStringFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kDataReadyFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kTotalStatesCountFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kSentStatesCountFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kStatesInPartCountFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kIsLastPartFieldNumber;
const int GetAppSignalStatesFromArchiveNextReply::kAppSignalStatesFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStatesFromArchiveNextReply::GetAppSignalStatesFromArchiveNextReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStatesFromArchiveNextReply::InitAsDefaultInstance() {
}

GetAppSignalStatesFromArchiveNextReply::GetAppSignalStatesFromArchiveNextReply(const GetAppSignalStatesFromArchiveNextReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveNextReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  archerror_ = 100;
  requestid_ = 0u;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataready_ = false;
  totalstatescount_ = 0;
  sentstatescount_ = 0;
  statesinpartcount_ = 0;
  islastpart_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStatesFromArchiveNextReply::~GetAppSignalStatesFromArchiveNextReply() {
  SharedDtor();
}

void GetAppSignalStatesFromArchiveNextReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void GetAppSignalStatesFromArchiveNextReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveNextReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStatesFromArchiveNextReply_descriptor_;
}

const GetAppSignalStatesFromArchiveNextReply& GetAppSignalStatesFromArchiveNextReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStatesFromArchiveNextReply* GetAppSignalStatesFromArchiveNextReply::default_instance_ = NULL;

GetAppSignalStatesFromArchiveNextReply* GetAppSignalStatesFromArchiveNextReply::New() const {
  return new GetAppSignalStatesFromArchiveNextReply;
}

void GetAppSignalStatesFromArchiveNextReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    archerror_ = 100;
    requestid_ = 0u;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
    dataready_ = false;
    totalstatescount_ = 0;
    sentstatescount_ = 0;
    statesinpartcount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    islastpart_ = false;
  }
  appsignalstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStatesFromArchiveNextReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_archError;
        break;
      }

      // optional int32 archError = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archerror_)));
          set_has_archerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestID;
        break;
      }

      // optional uint32 requestID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataReady;
        break;
      }

      // optional bool dataReady = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dataready_)));
          set_has_dataready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalStatesCount;
        break;
      }

      // optional int32 totalStatesCount = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalStatesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalstatescount_)));
          set_has_totalstatescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sentStatesCount;
        break;
      }

      // optional int32 sentStatesCount = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentStatesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sentstatescount_)));
          set_has_sentstatescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_statesInPartCount;
        break;
      }

      // optional int32 statesInPartCount = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statesInPartCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statesinpartcount_)));
          set_has_statesinpartcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isLastPart;
        break;
      }

      // optional bool isLastPart = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLastPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islastpart_)));
          set_has_islastpart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_appSignalStates;
        break;
      }

      // repeated .Proto.AppSignalState appSignalStates = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_appSignalStates;
        if (input->ExpectTag(82)) goto parse_errorString;
        break;
      }

      // optional string errorString = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStatesFromArchiveNextReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->archerror(), output);
  }

  // optional uint32 requestID = 3 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->requestid(), output);
  }

  // optional bool dataReady = 4 [default = false];
  if (has_dataready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dataready(), output);
  }

  // optional int32 totalStatesCount = 5 [default = 0];
  if (has_totalstatescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalstatescount(), output);
  }

  // optional int32 sentStatesCount = 6 [default = 0];
  if (has_sentstatescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sentstatescount(), output);
  }

  // optional int32 statesInPartCount = 7 [default = 0];
  if (has_statesinpartcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->statesinpartcount(), output);
  }

  // optional bool isLastPart = 8 [default = false];
  if (has_islastpart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->islastpart(), output);
  }

  // repeated .Proto.AppSignalState appSignalStates = 9;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->appsignalstates(i), output);
  }

  // optional string errorString = 10;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->errorstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStatesFromArchiveNextReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->archerror(), target);
  }

  // optional uint32 requestID = 3 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->requestid(), target);
  }

  // optional bool dataReady = 4 [default = false];
  if (has_dataready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dataready(), target);
  }

  // optional int32 totalStatesCount = 5 [default = 0];
  if (has_totalstatescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalstatescount(), target);
  }

  // optional int32 sentStatesCount = 6 [default = 0];
  if (has_sentstatescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sentstatescount(), target);
  }

  // optional int32 statesInPartCount = 7 [default = 0];
  if (has_statesinpartcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->statesinpartcount(), target);
  }

  // optional bool isLastPart = 8 [default = false];
  if (has_islastpart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->islastpart(), target);
  }

  // repeated .Proto.AppSignalState appSignalStates = 9;
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->appsignalstates(i), target);
  }

  // optional string errorString = 10;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->errorstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStatesFromArchiveNextReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 archError = 2 [default = 100];
    if (has_archerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archerror());
    }

    // optional uint32 requestID = 3 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }

    // optional string errorString = 10;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

    // optional bool dataReady = 4 [default = false];
    if (has_dataready()) {
      total_size += 1 + 1;
    }

    // optional int32 totalStatesCount = 5 [default = 0];
    if (has_totalstatescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalstatescount());
    }

    // optional int32 sentStatesCount = 6 [default = 0];
    if (has_sentstatescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sentstatescount());
    }

    // optional int32 statesInPartCount = 7 [default = 0];
    if (has_statesinpartcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statesinpartcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isLastPart = 8 [default = false];
    if (has_islastpart()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Proto.AppSignalState appSignalStates = 9;
  total_size += 1 * this->appsignalstates_size();
  for (int i = 0; i < this->appsignalstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStatesFromArchiveNextReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveNextReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStatesFromArchiveNextReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveNextReply::MergeFrom(const GetAppSignalStatesFromArchiveNextReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalstates_.MergeFrom(from.appsignalstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_archerror()) {
      set_archerror(from.archerror());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
    if (from.has_dataready()) {
      set_dataready(from.dataready());
    }
    if (from.has_totalstatescount()) {
      set_totalstatescount(from.totalstatescount());
    }
    if (from.has_sentstatescount()) {
      set_sentstatescount(from.sentstatescount());
    }
    if (from.has_statesinpartcount()) {
      set_statesinpartcount(from.statesinpartcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_islastpart()) {
      set_islastpart(from.islastpart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStatesFromArchiveNextReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveNextReply::CopyFrom(const GetAppSignalStatesFromArchiveNextReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveNextReply::IsInitialized() const {

  return true;
}

void GetAppSignalStatesFromArchiveNextReply::Swap(GetAppSignalStatesFromArchiveNextReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(archerror_, other->archerror_);
    std::swap(requestid_, other->requestid_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(dataready_, other->dataready_);
    std::swap(totalstatescount_, other->totalstatescount_);
    std::swap(sentstatescount_, other->sentstatescount_);
    std::swap(statesinpartcount_, other->statesinpartcount_);
    std::swap(islastpart_, other->islastpart_);
    appsignalstates_.Swap(&other->appsignalstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStatesFromArchiveNextReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStatesFromArchiveNextReply_descriptor_;
  metadata.reflection = GetAppSignalStatesFromArchiveNextReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStatesFromArchiveCancelRequest::kRequestIDFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStatesFromArchiveCancelRequest::GetAppSignalStatesFromArchiveCancelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStatesFromArchiveCancelRequest::InitAsDefaultInstance() {
}

GetAppSignalStatesFromArchiveCancelRequest::GetAppSignalStatesFromArchiveCancelRequest(const GetAppSignalStatesFromArchiveCancelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStatesFromArchiveCancelRequest::~GetAppSignalStatesFromArchiveCancelRequest() {
  SharedDtor();
}

void GetAppSignalStatesFromArchiveCancelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppSignalStatesFromArchiveCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveCancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStatesFromArchiveCancelRequest_descriptor_;
}

const GetAppSignalStatesFromArchiveCancelRequest& GetAppSignalStatesFromArchiveCancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStatesFromArchiveCancelRequest* GetAppSignalStatesFromArchiveCancelRequest::default_instance_ = NULL;

GetAppSignalStatesFromArchiveCancelRequest* GetAppSignalStatesFromArchiveCancelRequest::New() const {
  return new GetAppSignalStatesFromArchiveCancelRequest;
}

void GetAppSignalStatesFromArchiveCancelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStatesFromArchiveCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 requestID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStatesFromArchiveCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 requestID = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStatesFromArchiveCancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 requestID = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStatesFromArchiveCancelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 requestID = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStatesFromArchiveCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveCancelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStatesFromArchiveCancelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveCancelRequest::MergeFrom(const GetAppSignalStatesFromArchiveCancelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStatesFromArchiveCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveCancelRequest::CopyFrom(const GetAppSignalStatesFromArchiveCancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveCancelRequest::IsInitialized() const {

  return true;
}

void GetAppSignalStatesFromArchiveCancelRequest::Swap(GetAppSignalStatesFromArchiveCancelRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStatesFromArchiveCancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStatesFromArchiveCancelRequest_descriptor_;
  metadata.reflection = GetAppSignalStatesFromArchiveCancelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppSignalStatesFromArchiveCancelReply::kErrorFieldNumber;
const int GetAppSignalStatesFromArchiveCancelReply::kArchErrorFieldNumber;
const int GetAppSignalStatesFromArchiveCancelReply::kErrorStringFieldNumber;
#endif  // !_MSC_VER

GetAppSignalStatesFromArchiveCancelReply::GetAppSignalStatesFromArchiveCancelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppSignalStatesFromArchiveCancelReply::InitAsDefaultInstance() {
}

GetAppSignalStatesFromArchiveCancelReply::GetAppSignalStatesFromArchiveCancelReply(const GetAppSignalStatesFromArchiveCancelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveCancelReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  archerror_ = 100;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppSignalStatesFromArchiveCancelReply::~GetAppSignalStatesFromArchiveCancelReply() {
  SharedDtor();
}

void GetAppSignalStatesFromArchiveCancelReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void GetAppSignalStatesFromArchiveCancelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppSignalStatesFromArchiveCancelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppSignalStatesFromArchiveCancelReply_descriptor_;
}

const GetAppSignalStatesFromArchiveCancelReply& GetAppSignalStatesFromArchiveCancelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetAppSignalStatesFromArchiveCancelReply* GetAppSignalStatesFromArchiveCancelReply::default_instance_ = NULL;

GetAppSignalStatesFromArchiveCancelReply* GetAppSignalStatesFromArchiveCancelReply::New() const {
  return new GetAppSignalStatesFromArchiveCancelReply;
}

void GetAppSignalStatesFromArchiveCancelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    archerror_ = 100;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppSignalStatesFromArchiveCancelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_archError;
        break;
      }

      // optional int32 archError = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archerror_)));
          set_has_archerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errorString;
        break;
      }

      // optional string errorString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppSignalStatesFromArchiveCancelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->archerror(), output);
  }

  // optional string errorString = 3;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->errorstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppSignalStatesFromArchiveCancelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 archError = 2 [default = 100];
  if (has_archerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->archerror(), target);
  }

  // optional string errorString = 3;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errorstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppSignalStatesFromArchiveCancelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 archError = 2 [default = 100];
    if (has_archerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archerror());
    }

    // optional string errorString = 3;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppSignalStatesFromArchiveCancelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppSignalStatesFromArchiveCancelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppSignalStatesFromArchiveCancelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppSignalStatesFromArchiveCancelReply::MergeFrom(const GetAppSignalStatesFromArchiveCancelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_archerror()) {
      set_archerror(from.archerror());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppSignalStatesFromArchiveCancelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppSignalStatesFromArchiveCancelReply::CopyFrom(const GetAppSignalStatesFromArchiveCancelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppSignalStatesFromArchiveCancelReply::IsInitialized() const {

  return true;
}

void GetAppSignalStatesFromArchiveCancelReply::Swap(GetAppSignalStatesFromArchiveCancelReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(archerror_, other->archerror_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppSignalStatesFromArchiveCancelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppSignalStatesFromArchiveCancelReply_descriptor_;
  metadata.reflection = GetAppSignalStatesFromArchiveCancelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTrendsManagementRequest::kClientEquipmentIDFieldNumber;
const int RtTrendsManagementRequest::kSamplePeriodFieldNumber;
const int RtTrendsManagementRequest::kAppendSignalHashesFieldNumber;
const int RtTrendsManagementRequest::kDeleteSignalHashesFieldNumber;
#endif  // !_MSC_VER

RtTrendsManagementRequest::RtTrendsManagementRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTrendsManagementRequest::InitAsDefaultInstance() {
}

RtTrendsManagementRequest::RtTrendsManagementRequest(const RtTrendsManagementRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTrendsManagementRequest::SharedCtor() {
  _cached_size_ = 0;
  clientequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sampleperiod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTrendsManagementRequest::~RtTrendsManagementRequest() {
  SharedDtor();
}

void RtTrendsManagementRequest::SharedDtor() {
  if (clientequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientequipmentid_;
  }
  if (this != default_instance_) {
  }
}

void RtTrendsManagementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTrendsManagementRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTrendsManagementRequest_descriptor_;
}

const RtTrendsManagementRequest& RtTrendsManagementRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

RtTrendsManagementRequest* RtTrendsManagementRequest::default_instance_ = NULL;

RtTrendsManagementRequest* RtTrendsManagementRequest::New() const {
  return new RtTrendsManagementRequest;
}

void RtTrendsManagementRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientequipmentid()) {
      if (clientequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        clientequipmentid_->clear();
      }
    }
    sampleperiod_ = 0;
  }
  appendsignalhashes_.Clear();
  deletesignalhashes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTrendsManagementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientEquipmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientequipmentid().data(), this->clientequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_samplePeriod;
        break;
      }

      // optional int32 samplePeriod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_samplePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampleperiod_)));
          set_has_sampleperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appendSignalHashes;
        break;
      }

      // repeated uint64 appendSignalHashes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendSignalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_appendsignalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_appendsignalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appendSignalHashes;
        if (input->ExpectTag(32)) goto parse_deleteSignalHashes;
        break;
      }

      // repeated uint64 deleteSignalHashes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleteSignalHashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_deletesignalhashes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deletesignalhashes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deleteSignalHashes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTrendsManagementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clientEquipmentID = 1;
  if (has_clientequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientequipmentid().data(), this->clientequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientequipmentid(), output);
  }

  // optional int32 samplePeriod = 2;
  if (has_sampleperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sampleperiod(), output);
  }

  // repeated uint64 appendSignalHashes = 3;
  for (int i = 0; i < this->appendsignalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->appendsignalhashes(i), output);
  }

  // repeated uint64 deleteSignalHashes = 4;
  for (int i = 0; i < this->deletesignalhashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->deletesignalhashes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTrendsManagementRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clientEquipmentID = 1;
  if (has_clientequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientequipmentid().data(), this->clientequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientequipmentid(), target);
  }

  // optional int32 samplePeriod = 2;
  if (has_sampleperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sampleperiod(), target);
  }

  // repeated uint64 appendSignalHashes = 3;
  for (int i = 0; i < this->appendsignalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->appendsignalhashes(i), target);
  }

  // repeated uint64 deleteSignalHashes = 4;
  for (int i = 0; i < this->deletesignalhashes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->deletesignalhashes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTrendsManagementRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clientEquipmentID = 1;
    if (has_clientequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientequipmentid());
    }

    // optional int32 samplePeriod = 2;
    if (has_sampleperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sampleperiod());
    }

  }
  // repeated uint64 appendSignalHashes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->appendsignalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->appendsignalhashes(i));
    }
    total_size += 1 * this->appendsignalhashes_size() + data_size;
  }

  // repeated uint64 deleteSignalHashes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletesignalhashes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deletesignalhashes(i));
    }
    total_size += 1 * this->deletesignalhashes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTrendsManagementRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTrendsManagementRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTrendsManagementRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTrendsManagementRequest::MergeFrom(const RtTrendsManagementRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  appendsignalhashes_.MergeFrom(from.appendsignalhashes_);
  deletesignalhashes_.MergeFrom(from.deletesignalhashes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientequipmentid()) {
      set_clientequipmentid(from.clientequipmentid());
    }
    if (from.has_sampleperiod()) {
      set_sampleperiod(from.sampleperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTrendsManagementRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsManagementRequest::CopyFrom(const RtTrendsManagementRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsManagementRequest::IsInitialized() const {

  return true;
}

void RtTrendsManagementRequest::Swap(RtTrendsManagementRequest* other) {
  if (other != this) {
    std::swap(clientequipmentid_, other->clientequipmentid_);
    std::swap(sampleperiod_, other->sampleperiod_);
    appendsignalhashes_.Swap(&other->appendsignalhashes_);
    deletesignalhashes_.Swap(&other->deletesignalhashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTrendsManagementRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTrendsManagementRequest_descriptor_;
  metadata.reflection = RtTrendsManagementRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTrendsManagementReply::kErrorFieldNumber;
const int RtTrendsManagementReply::kErrorStringFieldNumber;
#endif  // !_MSC_VER

RtTrendsManagementReply::RtTrendsManagementReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTrendsManagementReply::InitAsDefaultInstance() {
}

RtTrendsManagementReply::RtTrendsManagementReply(const RtTrendsManagementReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTrendsManagementReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTrendsManagementReply::~RtTrendsManagementReply() {
  SharedDtor();
}

void RtTrendsManagementReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void RtTrendsManagementReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTrendsManagementReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTrendsManagementReply_descriptor_;
}

const RtTrendsManagementReply& RtTrendsManagementReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

RtTrendsManagementReply* RtTrendsManagementReply::default_instance_ = NULL;

RtTrendsManagementReply* RtTrendsManagementReply::New() const {
  return new RtTrendsManagementReply;
}

void RtTrendsManagementReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTrendsManagementReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorString;
        break;
      }

      // optional string errorString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTrendsManagementReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional string errorString = 2;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errorstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTrendsManagementReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional string errorString = 2;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errorstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTrendsManagementReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional string errorString = 2;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTrendsManagementReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTrendsManagementReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTrendsManagementReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTrendsManagementReply::MergeFrom(const RtTrendsManagementReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTrendsManagementReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsManagementReply::CopyFrom(const RtTrendsManagementReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsManagementReply::IsInitialized() const {

  return true;
}

void RtTrendsManagementReply::Swap(RtTrendsManagementReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTrendsManagementReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTrendsManagementReply_descriptor_;
  metadata.reflection = RtTrendsManagementReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RtTrendsGetStateChangesRequest::RtTrendsGetStateChangesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTrendsGetStateChangesRequest::InitAsDefaultInstance() {
}

RtTrendsGetStateChangesRequest::RtTrendsGetStateChangesRequest(const RtTrendsGetStateChangesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTrendsGetStateChangesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTrendsGetStateChangesRequest::~RtTrendsGetStateChangesRequest() {
  SharedDtor();
}

void RtTrendsGetStateChangesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTrendsGetStateChangesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTrendsGetStateChangesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTrendsGetStateChangesRequest_descriptor_;
}

const RtTrendsGetStateChangesRequest& RtTrendsGetStateChangesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

RtTrendsGetStateChangesRequest* RtTrendsGetStateChangesRequest::default_instance_ = NULL;

RtTrendsGetStateChangesRequest* RtTrendsGetStateChangesRequest::New() const {
  return new RtTrendsGetStateChangesRequest;
}

void RtTrendsGetStateChangesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTrendsGetStateChangesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RtTrendsGetStateChangesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTrendsGetStateChangesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTrendsGetStateChangesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTrendsGetStateChangesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTrendsGetStateChangesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTrendsGetStateChangesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTrendsGetStateChangesRequest::MergeFrom(const RtTrendsGetStateChangesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTrendsGetStateChangesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsGetStateChangesRequest::CopyFrom(const RtTrendsGetStateChangesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsGetStateChangesRequest::IsInitialized() const {

  return true;
}

void RtTrendsGetStateChangesRequest::Swap(RtTrendsGetStateChangesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTrendsGetStateChangesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTrendsGetStateChangesRequest_descriptor_;
  metadata.reflection = RtTrendsGetStateChangesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTrendsGetStateChangesReply::kErrorFieldNumber;
const int RtTrendsGetStateChangesReply::kErrorStringFieldNumber;
const int RtTrendsGetStateChangesReply::kSignalStatesFieldNumber;
#endif  // !_MSC_VER

RtTrendsGetStateChangesReply::RtTrendsGetStateChangesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTrendsGetStateChangesReply::InitAsDefaultInstance() {
}

RtTrendsGetStateChangesReply::RtTrendsGetStateChangesReply(const RtTrendsGetStateChangesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTrendsGetStateChangesReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTrendsGetStateChangesReply::~RtTrendsGetStateChangesReply() {
  SharedDtor();
}

void RtTrendsGetStateChangesReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void RtTrendsGetStateChangesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTrendsGetStateChangesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTrendsGetStateChangesReply_descriptor_;
}

const RtTrendsGetStateChangesReply& RtTrendsGetStateChangesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

RtTrendsGetStateChangesReply* RtTrendsGetStateChangesReply::default_instance_ = NULL;

RtTrendsGetStateChangesReply* RtTrendsGetStateChangesReply::New() const {
  return new RtTrendsGetStateChangesReply;
}

void RtTrendsGetStateChangesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
  }
  signalstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTrendsGetStateChangesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorString;
        break;
      }

      // optional string errorString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signalStates;
        break;
      }

      // repeated .Proto.AppSignalState signalStates = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signalstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signalStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTrendsGetStateChangesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional string errorString = 2;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errorstring(), output);
  }

  // repeated .Proto.AppSignalState signalStates = 3;
  for (int i = 0; i < this->signalstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signalstates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTrendsGetStateChangesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional string errorString = 2;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errorstring(), target);
  }

  // repeated .Proto.AppSignalState signalStates = 3;
  for (int i = 0; i < this->signalstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signalstates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTrendsGetStateChangesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional string errorString = 2;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

  }
  // repeated .Proto.AppSignalState signalStates = 3;
  total_size += 1 * this->signalstates_size();
  for (int i = 0; i < this->signalstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signalstates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTrendsGetStateChangesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTrendsGetStateChangesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTrendsGetStateChangesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTrendsGetStateChangesReply::MergeFrom(const RtTrendsGetStateChangesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalstates_.MergeFrom(from.signalstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTrendsGetStateChangesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTrendsGetStateChangesReply::CopyFrom(const RtTrendsGetStateChangesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTrendsGetStateChangesReply::IsInitialized() const {

  return true;
}

void RtTrendsGetStateChangesReply::Swap(RtTrendsGetStateChangesReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(errorstring_, other->errorstring_);
    signalstates_.Swap(&other->signalstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTrendsGetStateChangesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTrendsGetStateChangesReply_descriptor_;
  metadata.reflection = RtTrendsGetStateChangesReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Network

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#pragma warning(pop)
#endif