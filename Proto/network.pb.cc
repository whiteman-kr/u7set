// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Network {

namespace {

const ::google::protobuf::Descriptor* GetSignalListStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListStartReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListStartReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListNextRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListNextRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSignalListNextReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSignalListNextReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppSignalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppSignalState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_2eproto() {
  protobuf_AddDesc_network_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network.proto");
  GOOGLE_CHECK(file != NULL);
  GetSignalListStartRequest_descriptor_ = file->message_type(0);
  static const int GetSignalListStartRequest_offsets_[1] = {
  };
  GetSignalListStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListStartRequest_descriptor_,
      GetSignalListStartRequest::default_instance_,
      GetSignalListStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListStartRequest));
  GetSignalListStartReply_descriptor_ = file->message_type(1);
  static const int GetSignalListStartReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, totalitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, partcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, itemsperpart_),
  };
  GetSignalListStartReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListStartReply_descriptor_,
      GetSignalListStartReply::default_instance_,
      GetSignalListStartReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListStartReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListStartReply));
  GetSignalListNextRequest_descriptor_ = file->message_type(2);
  static const int GetSignalListNextRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, part_),
  };
  GetSignalListNextRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListNextRequest_descriptor_,
      GetSignalListNextRequest::default_instance_,
      GetSignalListNextRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListNextRequest));
  GetSignalListNextReply_descriptor_ = file->message_type(3);
  static const int GetSignalListNextReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, appsignalids_),
  };
  GetSignalListNextReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSignalListNextReply_descriptor_,
      GetSignalListNextReply::default_instance_,
      GetSignalListNextReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSignalListNextReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSignalListNextReply));
  AppSignalState_descriptor_ = file->message_type(4);
  static const int AppSignalState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, systemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, localtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, planttime_),
  };
  AppSignalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppSignalState_descriptor_,
      AppSignalState::default_instance_,
      AppSignalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppSignalState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListStartRequest_descriptor_, &GetSignalListStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListStartReply_descriptor_, &GetSignalListStartReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListNextRequest_descriptor_, &GetSignalListNextRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSignalListNextReply_descriptor_, &GetSignalListNextReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppSignalState_descriptor_, &AppSignalState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_2eproto() {
  delete GetSignalListStartRequest::default_instance_;
  delete GetSignalListStartRequest_reflection_;
  delete GetSignalListStartReply::default_instance_;
  delete GetSignalListStartReply_reflection_;
  delete GetSignalListNextRequest::default_instance_;
  delete GetSignalListNextRequest_reflection_;
  delete GetSignalListNextReply::default_instance_;
  delete GetSignalListNextReply_reflection_;
  delete AppSignalState::default_instance_;
  delete AppSignalState_reflection_;
}

void protobuf_AddDesc_network_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnetwork.proto\022\007Network\"\033\n\031GetSignalLis"
    "tStartRequest\"l\n\027GetSignalListStartReply"
    "\022\020\n\005error\030\001 \001(\005:\0010\022\026\n\016totalItemCount\030\002 \001"
    "(\005\022\021\n\tpartCount\030\003 \001(\005\022\024\n\014itemsPerPart\030\004 "
    "\001(\005\"(\n\030GetSignalListNextRequest\022\014\n\004part\030"
    "\001 \001(\005\"N\n\026GetSignalListNextReply\022\020\n\005error"
    "\030\001 \001(\005:\0010\022\014\n\004part\030\002 \001(\005\022\024\n\014appSignalIds\030"
    "\003 \003(\t\"v\n\016AppSignalState\022\014\n\004hash\030\001 \001(\004\022\r\n"
    "\005value\030\002 \001(\001\022\r\n\005flags\030\003 \001(\r\022\022\n\nsystemTim"
    "e\030\004 \001(\022\022\021\n\tlocalTime\030\005 \001(\022\022\021\n\tplantTime\030"
    "\006 \001(\022", 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network.proto", &protobuf_RegisterTypes);
  GetSignalListStartRequest::default_instance_ = new GetSignalListStartRequest();
  GetSignalListStartReply::default_instance_ = new GetSignalListStartReply();
  GetSignalListNextRequest::default_instance_ = new GetSignalListNextRequest();
  GetSignalListNextReply::default_instance_ = new GetSignalListNextReply();
  AppSignalState::default_instance_ = new AppSignalState();
  GetSignalListStartRequest::default_instance_->InitAsDefaultInstance();
  GetSignalListStartReply::default_instance_->InitAsDefaultInstance();
  GetSignalListNextRequest::default_instance_->InitAsDefaultInstance();
  GetSignalListNextReply::default_instance_->InitAsDefaultInstance();
  AppSignalState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_2eproto {
  StaticDescriptorInitializer_network_2eproto() {
    protobuf_AddDesc_network_2eproto();
  }
} static_descriptor_initializer_network_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSignalListStartRequest::GetSignalListStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListStartRequest::InitAsDefaultInstance() {
}

GetSignalListStartRequest::GetSignalListStartRequest(const GetSignalListStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListStartRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListStartRequest::~GetSignalListStartRequest() {
  SharedDtor();
}

void GetSignalListStartRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListStartRequest_descriptor_;
}

const GetSignalListStartRequest& GetSignalListStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListStartRequest* GetSignalListStartRequest::default_instance_ = NULL;

GetSignalListStartRequest* GetSignalListStartRequest::New() const {
  return new GetSignalListStartRequest;
}

void GetSignalListStartRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSignalListStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListStartRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListStartRequest::MergeFrom(const GetSignalListStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartRequest::CopyFrom(const GetSignalListStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartRequest::IsInitialized() const {

  return true;
}

void GetSignalListStartRequest::Swap(GetSignalListStartRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListStartRequest_descriptor_;
  metadata.reflection = GetSignalListStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListStartReply::kErrorFieldNumber;
const int GetSignalListStartReply::kTotalItemCountFieldNumber;
const int GetSignalListStartReply::kPartCountFieldNumber;
const int GetSignalListStartReply::kItemsPerPartFieldNumber;
#endif  // !_MSC_VER

GetSignalListStartReply::GetSignalListStartReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListStartReply::InitAsDefaultInstance() {
}

GetSignalListStartReply::GetSignalListStartReply(const GetSignalListStartReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListStartReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  totalitemcount_ = 0;
  partcount_ = 0;
  itemsperpart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListStartReply::~GetSignalListStartReply() {
  SharedDtor();
}

void GetSignalListStartReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListStartReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListStartReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListStartReply_descriptor_;
}

const GetSignalListStartReply& GetSignalListStartReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListStartReply* GetSignalListStartReply::default_instance_ = NULL;

GetSignalListStartReply* GetSignalListStartReply::New() const {
  return new GetSignalListStartReply;
}

void GetSignalListStartReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    totalitemcount_ = 0;
    partcount_ = 0;
    itemsperpart_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListStartReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalItemCount;
        break;
      }

      // optional int32 totalItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalitemcount_)));
          set_has_totalitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partCount;
        break;
      }

      // optional int32 partCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partcount_)));
          set_has_partcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemsPerPart;
        break;
      }

      // optional int32 itemsPerPart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsPerPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsperpart_)));
          set_has_itemsperpart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListStartReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 totalItemCount = 2;
  if (has_totalitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalitemcount(), output);
  }

  // optional int32 partCount = 3;
  if (has_partcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partcount(), output);
  }

  // optional int32 itemsPerPart = 4;
  if (has_itemsperpart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemsperpart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListStartReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 totalItemCount = 2;
  if (has_totalitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalitemcount(), target);
  }

  // optional int32 partCount = 3;
  if (has_partcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partcount(), target);
  }

  // optional int32 itemsPerPart = 4;
  if (has_itemsperpart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemsperpart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListStartReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 totalItemCount = 2;
    if (has_totalitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalitemcount());
    }

    // optional int32 partCount = 3;
    if (has_partcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partcount());
    }

    // optional int32 itemsPerPart = 4;
    if (has_itemsperpart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemsperpart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListStartReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListStartReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListStartReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListStartReply::MergeFrom(const GetSignalListStartReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_totalitemcount()) {
      set_totalitemcount(from.totalitemcount());
    }
    if (from.has_partcount()) {
      set_partcount(from.partcount());
    }
    if (from.has_itemsperpart()) {
      set_itemsperpart(from.itemsperpart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListStartReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListStartReply::CopyFrom(const GetSignalListStartReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListStartReply::IsInitialized() const {

  return true;
}

void GetSignalListStartReply::Swap(GetSignalListStartReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(totalitemcount_, other->totalitemcount_);
    std::swap(partcount_, other->partcount_);
    std::swap(itemsperpart_, other->itemsperpart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListStartReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListStartReply_descriptor_;
  metadata.reflection = GetSignalListStartReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListNextRequest::kPartFieldNumber;
#endif  // !_MSC_VER

GetSignalListNextRequest::GetSignalListNextRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListNextRequest::InitAsDefaultInstance() {
}

GetSignalListNextRequest::GetSignalListNextRequest(const GetSignalListNextRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListNextRequest::SharedCtor() {
  _cached_size_ = 0;
  part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListNextRequest::~GetSignalListNextRequest() {
  SharedDtor();
}

void GetSignalListNextRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListNextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListNextRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListNextRequest_descriptor_;
}

const GetSignalListNextRequest& GetSignalListNextRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListNextRequest* GetSignalListNextRequest::default_instance_ = NULL;

GetSignalListNextRequest* GetSignalListNextRequest::New() const {
  return new GetSignalListNextRequest;
}

void GetSignalListNextRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListNextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListNextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 part = 1;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListNextRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 part = 1;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListNextRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 part = 1;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListNextRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListNextRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListNextRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListNextRequest::MergeFrom(const GetSignalListNextRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListNextRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextRequest::CopyFrom(const GetSignalListNextRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextRequest::IsInitialized() const {

  return true;
}

void GetSignalListNextRequest::Swap(GetSignalListNextRequest* other) {
  if (other != this) {
    std::swap(part_, other->part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListNextRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListNextRequest_descriptor_;
  metadata.reflection = GetSignalListNextRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSignalListNextReply::kErrorFieldNumber;
const int GetSignalListNextReply::kPartFieldNumber;
const int GetSignalListNextReply::kAppSignalIdsFieldNumber;
#endif  // !_MSC_VER

GetSignalListNextReply::GetSignalListNextReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSignalListNextReply::InitAsDefaultInstance() {
}

GetSignalListNextReply::GetSignalListNextReply(const GetSignalListNextReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSignalListNextReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSignalListNextReply::~GetSignalListNextReply() {
  SharedDtor();
}

void GetSignalListNextReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSignalListNextReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSignalListNextReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSignalListNextReply_descriptor_;
}

const GetSignalListNextReply& GetSignalListNextReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

GetSignalListNextReply* GetSignalListNextReply::default_instance_ = NULL;

GetSignalListNextReply* GetSignalListNextReply::New() const {
  return new GetSignalListNextReply;
}

void GetSignalListNextReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    part_ = 0;
  }
  appsignalids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSignalListNextReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part;
        break;
      }

      // optional int32 part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalIds;
        break;
      }

      // repeated string appSignalIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_appsignalids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appsignalids(this->appsignalids_size() - 1).data(),
            this->appsignalids(this->appsignalids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSignalListNextReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->part(), output);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0; i < this->appsignalids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->appsignalids(i).data(), this->appsignalids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appsignalids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSignalListNextReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1 [default = 0];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 part = 2;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->part(), target);
  }

  // repeated string appSignalIds = 3;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalids(i).data(), this->appsignalids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->appsignalids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSignalListNextReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

  }
  // repeated string appSignalIds = 3;
  total_size += 1 * this->appsignalids_size();
  for (int i = 0; i < this->appsignalids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->appsignalids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSignalListNextReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSignalListNextReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSignalListNextReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSignalListNextReply::MergeFrom(const GetSignalListNextReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalids_.MergeFrom(from.appsignalids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSignalListNextReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignalListNextReply::CopyFrom(const GetSignalListNextReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalListNextReply::IsInitialized() const {

  return true;
}

void GetSignalListNextReply::Swap(GetSignalListNextReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(part_, other->part_);
    appsignalids_.Swap(&other->appsignalids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSignalListNextReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSignalListNextReply_descriptor_;
  metadata.reflection = GetSignalListNextReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppSignalState::kHashFieldNumber;
const int AppSignalState::kValueFieldNumber;
const int AppSignalState::kFlagsFieldNumber;
const int AppSignalState::kSystemTimeFieldNumber;
const int AppSignalState::kLocalTimeFieldNumber;
const int AppSignalState::kPlantTimeFieldNumber;
#endif  // !_MSC_VER

AppSignalState::AppSignalState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppSignalState::InitAsDefaultInstance() {
}

AppSignalState::AppSignalState(const AppSignalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppSignalState::SharedCtor() {
  _cached_size_ = 0;
  hash_ = GOOGLE_ULONGLONG(0);
  value_ = 0;
  flags_ = 0u;
  systemtime_ = GOOGLE_LONGLONG(0);
  localtime_ = GOOGLE_LONGLONG(0);
  planttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppSignalState::~AppSignalState() {
  SharedDtor();
}

void AppSignalState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppSignalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppSignalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppSignalState_descriptor_;
}

const AppSignalState& AppSignalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

AppSignalState* AppSignalState::default_instance_ = NULL;

AppSignalState* AppSignalState::New() const {
  return new AppSignalState;
}

void AppSignalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = GOOGLE_ULONGLONG(0);
    value_ = 0;
    flags_ = 0u;
    systemtime_ = GOOGLE_LONGLONG(0);
    localtime_ = GOOGLE_LONGLONG(0);
    planttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppSignalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_systemTime;
        break;
      }

      // optional sint64 systemTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_systemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &systemtime_)));
          set_has_systemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_localTime;
        break;
      }

      // optional sint64 localTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &localtime_)));
          set_has_localtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_plantTime;
        break;
      }

      // optional sint64 plantTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plantTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &planttime_)));
          set_has_planttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppSignalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional sint64 systemTime = 4;
  if (has_systemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->systemtime(), output);
  }

  // optional sint64 localTime = 5;
  if (has_localtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->localtime(), output);
  }

  // optional sint64 plantTime = 6;
  if (has_planttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->planttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppSignalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional sint64 systemTime = 4;
  if (has_systemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->systemtime(), target);
  }

  // optional sint64 localTime = 5;
  if (has_localtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->localtime(), target);
  }

  // optional sint64 plantTime = 6;
  if (has_planttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->planttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppSignalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional sint64 systemTime = 4;
    if (has_systemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->systemtime());
    }

    // optional sint64 localTime = 5;
    if (has_localtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->localtime());
    }

    // optional sint64 plantTime = 6;
    if (has_planttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->planttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppSignalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppSignalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppSignalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppSignalState::MergeFrom(const AppSignalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_systemtime()) {
      set_systemtime(from.systemtime());
    }
    if (from.has_localtime()) {
      set_localtime(from.localtime());
    }
    if (from.has_planttime()) {
      set_planttime(from.planttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppSignalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalState::CopyFrom(const AppSignalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalState::IsInitialized() const {

  return true;
}

void AppSignalState::Swap(AppSignalState* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(value_, other->value_);
    std::swap(flags_, other->flags_);
    std::swap(systemtime_, other->systemtime_);
    std::swap(localtime_, other->localtime_);
    std::swap(planttime_, other->planttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppSignalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppSignalState_descriptor_;
  metadata.reflection = AppSignalState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Network

// @@protoc_insertion_point(global_scope)
