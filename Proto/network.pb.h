#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 4127)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4996)
#pragma warning(disable : 6011)
#pragma warning(disable : 6326)
#pragma warning(disable : 6385)
#pragma warning(disable : 6387)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "serialization.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[65]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_network_2eproto_metadata_getter(int index);
namespace Network {
class AppDataReceiveState;
struct AppDataReceiveStateDefaultTypeInternal;
extern AppDataReceiveStateDefaultTypeInternal _AppDataReceiveState_default_instance_;
class AppDataServiceState;
struct AppDataServiceStateDefaultTypeInternal;
extern AppDataServiceStateDefaultTypeInternal _AppDataServiceState_default_instance_;
class AppDataSourceState;
struct AppDataSourceStateDefaultTypeInternal;
extern AppDataSourceStateDefaultTypeInternal _AppDataSourceState_default_instance_;
class BuildInfo;
struct BuildInfoDefaultTypeInternal;
extern BuildInfoDefaultTypeInternal _BuildInfo_default_instance_;
class ChangeConrolledTuningSourceReply;
struct ChangeConrolledTuningSourceReplyDefaultTypeInternal;
extern ChangeConrolledTuningSourceReplyDefaultTypeInternal _ChangeConrolledTuningSourceReply_default_instance_;
class ChangeConrolledTuningSourceRequest;
struct ChangeConrolledTuningSourceRequestDefaultTypeInternal;
extern ChangeConrolledTuningSourceRequestDefaultTypeInternal _ChangeConrolledTuningSourceRequest_default_instance_;
class ConfigurationServiceSettings;
struct ConfigurationServiceSettingsDefaultTypeInternal;
extern ConfigurationServiceSettingsDefaultTypeInternal _ConfigurationServiceSettings_default_instance_;
class ConfigurationServiceState;
struct ConfigurationServiceStateDefaultTypeInternal;
extern ConfigurationServiceStateDefaultTypeInternal _ConfigurationServiceState_default_instance_;
class DataSourceInfo;
struct DataSourceInfoDefaultTypeInternal;
extern DataSourceInfoDefaultTypeInternal _DataSourceInfo_default_instance_;
class DataSourceWrite;
struct DataSourceWriteDefaultTypeInternal;
extern DataSourceWriteDefaultTypeInternal _DataSourceWrite_default_instance_;
class DataSourceWriteReply;
struct DataSourceWriteReplyDefaultTypeInternal;
extern DataSourceWriteReplyDefaultTypeInternal _DataSourceWriteReply_default_instance_;
class GetAppDataSourcesStatesReply;
struct GetAppDataSourcesStatesReplyDefaultTypeInternal;
extern GetAppDataSourcesStatesReplyDefaultTypeInternal _GetAppDataSourcesStatesReply_default_instance_;
class GetAppSignalParamReply;
struct GetAppSignalParamReplyDefaultTypeInternal;
extern GetAppSignalParamReplyDefaultTypeInternal _GetAppSignalParamReply_default_instance_;
class GetAppSignalParamRequest;
struct GetAppSignalParamRequestDefaultTypeInternal;
extern GetAppSignalParamRequestDefaultTypeInternal _GetAppSignalParamRequest_default_instance_;
class GetAppSignalReply;
struct GetAppSignalReplyDefaultTypeInternal;
extern GetAppSignalReplyDefaultTypeInternal _GetAppSignalReply_default_instance_;
class GetAppSignalRequest;
struct GetAppSignalRequestDefaultTypeInternal;
extern GetAppSignalRequestDefaultTypeInternal _GetAppSignalRequest_default_instance_;
class GetAppSignalStateChangesReply;
struct GetAppSignalStateChangesReplyDefaultTypeInternal;
extern GetAppSignalStateChangesReplyDefaultTypeInternal _GetAppSignalStateChangesReply_default_instance_;
class GetAppSignalStateChangesRequest;
struct GetAppSignalStateChangesRequestDefaultTypeInternal;
extern GetAppSignalStateChangesRequestDefaultTypeInternal _GetAppSignalStateChangesRequest_default_instance_;
class GetAppSignalStateReply;
struct GetAppSignalStateReplyDefaultTypeInternal;
extern GetAppSignalStateReplyDefaultTypeInternal _GetAppSignalStateReply_default_instance_;
class GetAppSignalStateRequest;
struct GetAppSignalStateRequestDefaultTypeInternal;
extern GetAppSignalStateRequestDefaultTypeInternal _GetAppSignalStateRequest_default_instance_;
class GetAppSignalStatesFromArchiveCancelReply;
struct GetAppSignalStatesFromArchiveCancelReplyDefaultTypeInternal;
extern GetAppSignalStatesFromArchiveCancelReplyDefaultTypeInternal _GetAppSignalStatesFromArchiveCancelReply_default_instance_;
class GetAppSignalStatesFromArchiveCancelRequest;
struct GetAppSignalStatesFromArchiveCancelRequestDefaultTypeInternal;
extern GetAppSignalStatesFromArchiveCancelRequestDefaultTypeInternal _GetAppSignalStatesFromArchiveCancelRequest_default_instance_;
class GetAppSignalStatesFromArchiveNextReply;
struct GetAppSignalStatesFromArchiveNextReplyDefaultTypeInternal;
extern GetAppSignalStatesFromArchiveNextReplyDefaultTypeInternal _GetAppSignalStatesFromArchiveNextReply_default_instance_;
class GetAppSignalStatesFromArchiveNextRequest;
struct GetAppSignalStatesFromArchiveNextRequestDefaultTypeInternal;
extern GetAppSignalStatesFromArchiveNextRequestDefaultTypeInternal _GetAppSignalStatesFromArchiveNextRequest_default_instance_;
class GetAppSignalStatesFromArchiveStartReply;
struct GetAppSignalStatesFromArchiveStartReplyDefaultTypeInternal;
extern GetAppSignalStatesFromArchiveStartReplyDefaultTypeInternal _GetAppSignalStatesFromArchiveStartReply_default_instance_;
class GetAppSignalStatesFromArchiveStartRequest;
struct GetAppSignalStatesFromArchiveStartRequestDefaultTypeInternal;
extern GetAppSignalStatesFromArchiveStartRequestDefaultTypeInternal _GetAppSignalStatesFromArchiveStartRequest_default_instance_;
class GetDataSourcesInfoReply;
struct GetDataSourcesInfoReplyDefaultTypeInternal;
extern GetDataSourcesInfoReplyDefaultTypeInternal _GetDataSourcesInfoReply_default_instance_;
class GetDataSourcesInfoRequest;
struct GetDataSourcesInfoRequestDefaultTypeInternal;
extern GetDataSourcesInfoRequestDefaultTypeInternal _GetDataSourcesInfoRequest_default_instance_;
class GetFileReply;
struct GetFileReplyDefaultTypeInternal;
extern GetFileReplyDefaultTypeInternal _GetFileReply_default_instance_;
class GetServiceInfoReply;
struct GetServiceInfoReplyDefaultTypeInternal;
extern GetServiceInfoReplyDefaultTypeInternal _GetServiceInfoReply_default_instance_;
class GetServiceInfoRequest;
struct GetServiceInfoRequestDefaultTypeInternal;
extern GetServiceInfoRequestDefaultTypeInternal _GetServiceInfoRequest_default_instance_;
class GetSignalListNextReply;
struct GetSignalListNextReplyDefaultTypeInternal;
extern GetSignalListNextReplyDefaultTypeInternal _GetSignalListNextReply_default_instance_;
class GetSignalListNextRequest;
struct GetSignalListNextRequestDefaultTypeInternal;
extern GetSignalListNextRequestDefaultTypeInternal _GetSignalListNextRequest_default_instance_;
class GetSignalListStartReply;
struct GetSignalListStartReplyDefaultTypeInternal;
extern GetSignalListStartReplyDefaultTypeInternal _GetSignalListStartReply_default_instance_;
class GetSignalListStartRequest;
struct GetSignalListStartRequestDefaultTypeInternal;
extern GetSignalListStartRequestDefaultTypeInternal _GetSignalListStartRequest_default_instance_;
class GetTuningSourcesInfo;
struct GetTuningSourcesInfoDefaultTypeInternal;
extern GetTuningSourcesInfoDefaultTypeInternal _GetTuningSourcesInfo_default_instance_;
class GetTuningSourcesInfoReply;
struct GetTuningSourcesInfoReplyDefaultTypeInternal;
extern GetTuningSourcesInfoReplyDefaultTypeInternal _GetTuningSourcesInfoReply_default_instance_;
class GetTuningSourcesStates;
struct GetTuningSourcesStatesDefaultTypeInternal;
extern GetTuningSourcesStatesDefaultTypeInternal _GetTuningSourcesStates_default_instance_;
class GetTuningSourcesStatesReply;
struct GetTuningSourcesStatesReplyDefaultTypeInternal;
extern GetTuningSourcesStatesReplyDefaultTypeInternal _GetTuningSourcesStatesReply_default_instance_;
class PacketSourceExit;
struct PacketSourceExitDefaultTypeInternal;
extern PacketSourceExitDefaultTypeInternal _PacketSourceExit_default_instance_;
class PacketSourceExitReply;
struct PacketSourceExitReplyDefaultTypeInternal;
extern PacketSourceExitReplyDefaultTypeInternal _PacketSourceExitReply_default_instance_;
class RtTrendsGetStateChangesReply;
struct RtTrendsGetStateChangesReplyDefaultTypeInternal;
extern RtTrendsGetStateChangesReplyDefaultTypeInternal _RtTrendsGetStateChangesReply_default_instance_;
class RtTrendsGetStateChangesRequest;
struct RtTrendsGetStateChangesRequestDefaultTypeInternal;
extern RtTrendsGetStateChangesRequestDefaultTypeInternal _RtTrendsGetStateChangesRequest_default_instance_;
class RtTrendsManagementReply;
struct RtTrendsManagementReplyDefaultTypeInternal;
extern RtTrendsManagementReplyDefaultTypeInternal _RtTrendsManagementReply_default_instance_;
class RtTrendsManagementRequest;
struct RtTrendsManagementRequestDefaultTypeInternal;
extern RtTrendsManagementRequestDefaultTypeInternal _RtTrendsManagementRequest_default_instance_;
class SaveAppSignalsStatesToArchiveReply;
struct SaveAppSignalsStatesToArchiveReplyDefaultTypeInternal;
extern SaveAppSignalsStatesToArchiveReplyDefaultTypeInternal _SaveAppSignalsStatesToArchiveReply_default_instance_;
class SaveAppSignalsStatesToArchiveRequest;
struct SaveAppSignalsStatesToArchiveRequestDefaultTypeInternal;
extern SaveAppSignalsStatesToArchiveRequestDefaultTypeInternal _SaveAppSignalsStatesToArchiveRequest_default_instance_;
class ServiceClientInfo;
struct ServiceClientInfoDefaultTypeInternal;
extern ServiceClientInfoDefaultTypeInternal _ServiceClientInfo_default_instance_;
class ServiceClients;
struct ServiceClientsDefaultTypeInternal;
extern ServiceClientsDefaultTypeInternal _ServiceClients_default_instance_;
class ServiceInfo;
struct ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
class ServiceSettings;
struct ServiceSettingsDefaultTypeInternal;
extern ServiceSettingsDefaultTypeInternal _ServiceSettings_default_instance_;
class SessionParams;
struct SessionParamsDefaultTypeInternal;
extern SessionParamsDefaultTypeInternal _SessionParams_default_instance_;
class SignalsAssociatedToTuningSource;
struct SignalsAssociatedToTuningSourceDefaultTypeInternal;
extern SignalsAssociatedToTuningSourceDefaultTypeInternal _SignalsAssociatedToTuningSource_default_instance_;
class SoftwareInfo;
struct SoftwareInfoDefaultTypeInternal;
extern SoftwareInfoDefaultTypeInternal _SoftwareInfo_default_instance_;
class TuningSignalState;
struct TuningSignalStateDefaultTypeInternal;
extern TuningSignalStateDefaultTypeInternal _TuningSignalState_default_instance_;
class TuningSignalWriteResult;
struct TuningSignalWriteResultDefaultTypeInternal;
extern TuningSignalWriteResultDefaultTypeInternal _TuningSignalWriteResult_default_instance_;
class TuningSignalsApply;
struct TuningSignalsApplyDefaultTypeInternal;
extern TuningSignalsApplyDefaultTypeInternal _TuningSignalsApply_default_instance_;
class TuningSignalsApplyReply;
struct TuningSignalsApplyReplyDefaultTypeInternal;
extern TuningSignalsApplyReplyDefaultTypeInternal _TuningSignalsApplyReply_default_instance_;
class TuningSignalsRead;
struct TuningSignalsReadDefaultTypeInternal;
extern TuningSignalsReadDefaultTypeInternal _TuningSignalsRead_default_instance_;
class TuningSignalsReadReply;
struct TuningSignalsReadReplyDefaultTypeInternal;
extern TuningSignalsReadReplyDefaultTypeInternal _TuningSignalsReadReply_default_instance_;
class TuningSignalsWrite;
struct TuningSignalsWriteDefaultTypeInternal;
extern TuningSignalsWriteDefaultTypeInternal _TuningSignalsWrite_default_instance_;
class TuningSignalsWriteReply;
struct TuningSignalsWriteReplyDefaultTypeInternal;
extern TuningSignalsWriteReplyDefaultTypeInternal _TuningSignalsWriteReply_default_instance_;
class TuningSourceFilling;
struct TuningSourceFillingDefaultTypeInternal;
extern TuningSourceFillingDefaultTypeInternal _TuningSourceFilling_default_instance_;
class TuningSourceState;
struct TuningSourceStateDefaultTypeInternal;
extern TuningSourceStateDefaultTypeInternal _TuningSourceState_default_instance_;
class TuningWriteCommand;
struct TuningWriteCommandDefaultTypeInternal;
extern TuningWriteCommandDefaultTypeInternal _TuningWriteCommand_default_instance_;
}  // namespace Network
PROTOBUF_NAMESPACE_OPEN
template<> ::Network::AppDataReceiveState* Arena::CreateMaybeMessage<::Network::AppDataReceiveState>(Arena*);
template<> ::Network::AppDataServiceState* Arena::CreateMaybeMessage<::Network::AppDataServiceState>(Arena*);
template<> ::Network::AppDataSourceState* Arena::CreateMaybeMessage<::Network::AppDataSourceState>(Arena*);
template<> ::Network::BuildInfo* Arena::CreateMaybeMessage<::Network::BuildInfo>(Arena*);
template<> ::Network::ChangeConrolledTuningSourceReply* Arena::CreateMaybeMessage<::Network::ChangeConrolledTuningSourceReply>(Arena*);
template<> ::Network::ChangeConrolledTuningSourceRequest* Arena::CreateMaybeMessage<::Network::ChangeConrolledTuningSourceRequest>(Arena*);
template<> ::Network::ConfigurationServiceSettings* Arena::CreateMaybeMessage<::Network::ConfigurationServiceSettings>(Arena*);
template<> ::Network::ConfigurationServiceState* Arena::CreateMaybeMessage<::Network::ConfigurationServiceState>(Arena*);
template<> ::Network::DataSourceInfo* Arena::CreateMaybeMessage<::Network::DataSourceInfo>(Arena*);
template<> ::Network::DataSourceWrite* Arena::CreateMaybeMessage<::Network::DataSourceWrite>(Arena*);
template<> ::Network::DataSourceWriteReply* Arena::CreateMaybeMessage<::Network::DataSourceWriteReply>(Arena*);
template<> ::Network::GetAppDataSourcesStatesReply* Arena::CreateMaybeMessage<::Network::GetAppDataSourcesStatesReply>(Arena*);
template<> ::Network::GetAppSignalParamReply* Arena::CreateMaybeMessage<::Network::GetAppSignalParamReply>(Arena*);
template<> ::Network::GetAppSignalParamRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalParamRequest>(Arena*);
template<> ::Network::GetAppSignalReply* Arena::CreateMaybeMessage<::Network::GetAppSignalReply>(Arena*);
template<> ::Network::GetAppSignalRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalRequest>(Arena*);
template<> ::Network::GetAppSignalStateChangesReply* Arena::CreateMaybeMessage<::Network::GetAppSignalStateChangesReply>(Arena*);
template<> ::Network::GetAppSignalStateChangesRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalStateChangesRequest>(Arena*);
template<> ::Network::GetAppSignalStateReply* Arena::CreateMaybeMessage<::Network::GetAppSignalStateReply>(Arena*);
template<> ::Network::GetAppSignalStateRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalStateRequest>(Arena*);
template<> ::Network::GetAppSignalStatesFromArchiveCancelReply* Arena::CreateMaybeMessage<::Network::GetAppSignalStatesFromArchiveCancelReply>(Arena*);
template<> ::Network::GetAppSignalStatesFromArchiveCancelRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalStatesFromArchiveCancelRequest>(Arena*);
template<> ::Network::GetAppSignalStatesFromArchiveNextReply* Arena::CreateMaybeMessage<::Network::GetAppSignalStatesFromArchiveNextReply>(Arena*);
template<> ::Network::GetAppSignalStatesFromArchiveNextRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalStatesFromArchiveNextRequest>(Arena*);
template<> ::Network::GetAppSignalStatesFromArchiveStartReply* Arena::CreateMaybeMessage<::Network::GetAppSignalStatesFromArchiveStartReply>(Arena*);
template<> ::Network::GetAppSignalStatesFromArchiveStartRequest* Arena::CreateMaybeMessage<::Network::GetAppSignalStatesFromArchiveStartRequest>(Arena*);
template<> ::Network::GetDataSourcesInfoReply* Arena::CreateMaybeMessage<::Network::GetDataSourcesInfoReply>(Arena*);
template<> ::Network::GetDataSourcesInfoRequest* Arena::CreateMaybeMessage<::Network::GetDataSourcesInfoRequest>(Arena*);
template<> ::Network::GetFileReply* Arena::CreateMaybeMessage<::Network::GetFileReply>(Arena*);
template<> ::Network::GetServiceInfoReply* Arena::CreateMaybeMessage<::Network::GetServiceInfoReply>(Arena*);
template<> ::Network::GetServiceInfoRequest* Arena::CreateMaybeMessage<::Network::GetServiceInfoRequest>(Arena*);
template<> ::Network::GetSignalListNextReply* Arena::CreateMaybeMessage<::Network::GetSignalListNextReply>(Arena*);
template<> ::Network::GetSignalListNextRequest* Arena::CreateMaybeMessage<::Network::GetSignalListNextRequest>(Arena*);
template<> ::Network::GetSignalListStartReply* Arena::CreateMaybeMessage<::Network::GetSignalListStartReply>(Arena*);
template<> ::Network::GetSignalListStartRequest* Arena::CreateMaybeMessage<::Network::GetSignalListStartRequest>(Arena*);
template<> ::Network::GetTuningSourcesInfo* Arena::CreateMaybeMessage<::Network::GetTuningSourcesInfo>(Arena*);
template<> ::Network::GetTuningSourcesInfoReply* Arena::CreateMaybeMessage<::Network::GetTuningSourcesInfoReply>(Arena*);
template<> ::Network::GetTuningSourcesStates* Arena::CreateMaybeMessage<::Network::GetTuningSourcesStates>(Arena*);
template<> ::Network::GetTuningSourcesStatesReply* Arena::CreateMaybeMessage<::Network::GetTuningSourcesStatesReply>(Arena*);
template<> ::Network::PacketSourceExit* Arena::CreateMaybeMessage<::Network::PacketSourceExit>(Arena*);
template<> ::Network::PacketSourceExitReply* Arena::CreateMaybeMessage<::Network::PacketSourceExitReply>(Arena*);
template<> ::Network::RtTrendsGetStateChangesReply* Arena::CreateMaybeMessage<::Network::RtTrendsGetStateChangesReply>(Arena*);
template<> ::Network::RtTrendsGetStateChangesRequest* Arena::CreateMaybeMessage<::Network::RtTrendsGetStateChangesRequest>(Arena*);
template<> ::Network::RtTrendsManagementReply* Arena::CreateMaybeMessage<::Network::RtTrendsManagementReply>(Arena*);
template<> ::Network::RtTrendsManagementRequest* Arena::CreateMaybeMessage<::Network::RtTrendsManagementRequest>(Arena*);
template<> ::Network::SaveAppSignalsStatesToArchiveReply* Arena::CreateMaybeMessage<::Network::SaveAppSignalsStatesToArchiveReply>(Arena*);
template<> ::Network::SaveAppSignalsStatesToArchiveRequest* Arena::CreateMaybeMessage<::Network::SaveAppSignalsStatesToArchiveRequest>(Arena*);
template<> ::Network::ServiceClientInfo* Arena::CreateMaybeMessage<::Network::ServiceClientInfo>(Arena*);
template<> ::Network::ServiceClients* Arena::CreateMaybeMessage<::Network::ServiceClients>(Arena*);
template<> ::Network::ServiceInfo* Arena::CreateMaybeMessage<::Network::ServiceInfo>(Arena*);
template<> ::Network::ServiceSettings* Arena::CreateMaybeMessage<::Network::ServiceSettings>(Arena*);
template<> ::Network::SessionParams* Arena::CreateMaybeMessage<::Network::SessionParams>(Arena*);
template<> ::Network::SignalsAssociatedToTuningSource* Arena::CreateMaybeMessage<::Network::SignalsAssociatedToTuningSource>(Arena*);
template<> ::Network::SoftwareInfo* Arena::CreateMaybeMessage<::Network::SoftwareInfo>(Arena*);
template<> ::Network::TuningSignalState* Arena::CreateMaybeMessage<::Network::TuningSignalState>(Arena*);
template<> ::Network::TuningSignalWriteResult* Arena::CreateMaybeMessage<::Network::TuningSignalWriteResult>(Arena*);
template<> ::Network::TuningSignalsApply* Arena::CreateMaybeMessage<::Network::TuningSignalsApply>(Arena*);
template<> ::Network::TuningSignalsApplyReply* Arena::CreateMaybeMessage<::Network::TuningSignalsApplyReply>(Arena*);
template<> ::Network::TuningSignalsRead* Arena::CreateMaybeMessage<::Network::TuningSignalsRead>(Arena*);
template<> ::Network::TuningSignalsReadReply* Arena::CreateMaybeMessage<::Network::TuningSignalsReadReply>(Arena*);
template<> ::Network::TuningSignalsWrite* Arena::CreateMaybeMessage<::Network::TuningSignalsWrite>(Arena*);
template<> ::Network::TuningSignalsWriteReply* Arena::CreateMaybeMessage<::Network::TuningSignalsWriteReply>(Arena*);
template<> ::Network::TuningSourceFilling* Arena::CreateMaybeMessage<::Network::TuningSourceFilling>(Arena*);
template<> ::Network::TuningSourceState* Arena::CreateMaybeMessage<::Network::TuningSourceState>(Arena*);
template<> ::Network::TuningWriteCommand* Arena::CreateMaybeMessage<::Network::TuningWriteCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Network {

// ===================================================================

class GetSignalListStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetSignalListStartRequest) */ {
 public:
  inline GetSignalListStartRequest() : GetSignalListStartRequest(nullptr) {}
  virtual ~GetSignalListStartRequest();
  explicit constexpr GetSignalListStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSignalListStartRequest(const GetSignalListStartRequest& from);
  GetSignalListStartRequest(GetSignalListStartRequest&& from) noexcept
    : GetSignalListStartRequest() {
    *this = ::std::move(from);
  }

  inline GetSignalListStartRequest& operator=(const GetSignalListStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignalListStartRequest& operator=(GetSignalListStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSignalListStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSignalListStartRequest* internal_default_instance() {
    return reinterpret_cast<const GetSignalListStartRequest*>(
               &_GetSignalListStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSignalListStartRequest& a, GetSignalListStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSignalListStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSignalListStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSignalListStartRequest* New() const final {
    return CreateMaybeMessage<GetSignalListStartRequest>(nullptr);
  }

  GetSignalListStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSignalListStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSignalListStartRequest& from);
  void MergeFrom(const GetSignalListStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSignalListStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetSignalListStartRequest";
  }
  protected:
  explicit GetSignalListStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.GetSignalListStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetSignalListStartReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetSignalListStartReply) */ {
 public:
  inline GetSignalListStartReply() : GetSignalListStartReply(nullptr) {}
  virtual ~GetSignalListStartReply();
  explicit constexpr GetSignalListStartReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSignalListStartReply(const GetSignalListStartReply& from);
  GetSignalListStartReply(GetSignalListStartReply&& from) noexcept
    : GetSignalListStartReply() {
    *this = ::std::move(from);
  }

  inline GetSignalListStartReply& operator=(const GetSignalListStartReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignalListStartReply& operator=(GetSignalListStartReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSignalListStartReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSignalListStartReply* internal_default_instance() {
    return reinterpret_cast<const GetSignalListStartReply*>(
               &_GetSignalListStartReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetSignalListStartReply& a, GetSignalListStartReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSignalListStartReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSignalListStartReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSignalListStartReply* New() const final {
    return CreateMaybeMessage<GetSignalListStartReply>(nullptr);
  }

  GetSignalListStartReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSignalListStartReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSignalListStartReply& from);
  void MergeFrom(const GetSignalListStartReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSignalListStartReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetSignalListStartReply";
  }
  protected:
  explicit GetSignalListStartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kTotalItemCountFieldNumber = 2,
    kPartCountFieldNumber = 3,
    kItemsPerPartFieldNumber = 4,
  };
  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 totalItemCount = 2;
  bool has_totalitemcount() const;
  private:
  bool _internal_has_totalitemcount() const;
  public:
  void clear_totalitemcount();
  ::PROTOBUF_NAMESPACE_ID::int32 totalitemcount() const;
  void set_totalitemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalitemcount() const;
  void _internal_set_totalitemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 partCount = 3;
  bool has_partcount() const;
  private:
  bool _internal_has_partcount() const;
  public:
  void clear_partcount();
  ::PROTOBUF_NAMESPACE_ID::int32 partcount() const;
  void set_partcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partcount() const;
  void _internal_set_partcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 itemsPerPart = 4;
  bool has_itemsperpart() const;
  private:
  bool _internal_has_itemsperpart() const;
  public:
  void clear_itemsperpart();
  ::PROTOBUF_NAMESPACE_ID::int32 itemsperpart() const;
  void set_itemsperpart(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itemsperpart() const;
  void _internal_set_itemsperpart(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetSignalListStartReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalitemcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 partcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 itemsperpart_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetSignalListNextRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetSignalListNextRequest) */ {
 public:
  inline GetSignalListNextRequest() : GetSignalListNextRequest(nullptr) {}
  virtual ~GetSignalListNextRequest();
  explicit constexpr GetSignalListNextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSignalListNextRequest(const GetSignalListNextRequest& from);
  GetSignalListNextRequest(GetSignalListNextRequest&& from) noexcept
    : GetSignalListNextRequest() {
    *this = ::std::move(from);
  }

  inline GetSignalListNextRequest& operator=(const GetSignalListNextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignalListNextRequest& operator=(GetSignalListNextRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSignalListNextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSignalListNextRequest* internal_default_instance() {
    return reinterpret_cast<const GetSignalListNextRequest*>(
               &_GetSignalListNextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetSignalListNextRequest& a, GetSignalListNextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSignalListNextRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSignalListNextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSignalListNextRequest* New() const final {
    return CreateMaybeMessage<GetSignalListNextRequest>(nullptr);
  }

  GetSignalListNextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSignalListNextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSignalListNextRequest& from);
  void MergeFrom(const GetSignalListNextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSignalListNextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetSignalListNextRequest";
  }
  protected:
  explicit GetSignalListNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartFieldNumber = 1,
  };
  // optional int32 part = 1;
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  ::PROTOBUF_NAMESPACE_ID::int32 part() const;
  void set_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_part() const;
  void _internal_set_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetSignalListNextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 part_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetSignalListNextReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetSignalListNextReply) */ {
 public:
  inline GetSignalListNextReply() : GetSignalListNextReply(nullptr) {}
  virtual ~GetSignalListNextReply();
  explicit constexpr GetSignalListNextReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSignalListNextReply(const GetSignalListNextReply& from);
  GetSignalListNextReply(GetSignalListNextReply&& from) noexcept
    : GetSignalListNextReply() {
    *this = ::std::move(from);
  }

  inline GetSignalListNextReply& operator=(const GetSignalListNextReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignalListNextReply& operator=(GetSignalListNextReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSignalListNextReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSignalListNextReply* internal_default_instance() {
    return reinterpret_cast<const GetSignalListNextReply*>(
               &_GetSignalListNextReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetSignalListNextReply& a, GetSignalListNextReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSignalListNextReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSignalListNextReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSignalListNextReply* New() const final {
    return CreateMaybeMessage<GetSignalListNextReply>(nullptr);
  }

  GetSignalListNextReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSignalListNextReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSignalListNextReply& from);
  void MergeFrom(const GetSignalListNextReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSignalListNextReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetSignalListNextReply";
  }
  protected:
  explicit GetSignalListNextReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalIdsFieldNumber = 3,
    kErrorFieldNumber = 1,
    kPartFieldNumber = 2,
  };
  // repeated string appSignalIds = 3;
  int appsignalids_size() const;
  private:
  int _internal_appsignalids_size() const;
  public:
  void clear_appsignalids();
  const std::string& appsignalids(int index) const;
  std::string* mutable_appsignalids(int index);
  void set_appsignalids(int index, const std::string& value);
  void set_appsignalids(int index, std::string&& value);
  void set_appsignalids(int index, const char* value);
  void set_appsignalids(int index, const char* value, size_t size);
  std::string* add_appsignalids();
  void add_appsignalids(const std::string& value);
  void add_appsignalids(std::string&& value);
  void add_appsignalids(const char* value);
  void add_appsignalids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& appsignalids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_appsignalids();
  private:
  const std::string& _internal_appsignalids(int index) const;
  std::string* _internal_add_appsignalids();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 part = 2;
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  ::PROTOBUF_NAMESPACE_ID::int32 part() const;
  void set_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_part() const;
  void _internal_set_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetSignalListNextReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> appsignalids_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 part_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalParamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalParamRequest) */ {
 public:
  inline GetAppSignalParamRequest() : GetAppSignalParamRequest(nullptr) {}
  virtual ~GetAppSignalParamRequest();
  explicit constexpr GetAppSignalParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalParamRequest(const GetAppSignalParamRequest& from);
  GetAppSignalParamRequest(GetAppSignalParamRequest&& from) noexcept
    : GetAppSignalParamRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalParamRequest& operator=(const GetAppSignalParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalParamRequest& operator=(GetAppSignalParamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalParamRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalParamRequest*>(
               &_GetAppSignalParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAppSignalParamRequest& a, GetAppSignalParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalParamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalParamRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalParamRequest>(nullptr);
  }

  GetAppSignalParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalParamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalParamRequest& from);
  void MergeFrom(const GetAppSignalParamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalParamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalParamRequest";
  }
  protected:
  explicit GetAppSignalParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashesFieldNumber = 1,
  };
  // repeated uint64 signalHashes = 1;
  int signalhashes_size() const;
  private:
  int _internal_signalhashes_size() const;
  public:
  void clear_signalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_signalhashes() const;
  void _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_signalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhashes(int index) const;
  void set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      signalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_signalhashes();

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > signalhashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalParamReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalParamReply) */ {
 public:
  inline GetAppSignalParamReply() : GetAppSignalParamReply(nullptr) {}
  virtual ~GetAppSignalParamReply();
  explicit constexpr GetAppSignalParamReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalParamReply(const GetAppSignalParamReply& from);
  GetAppSignalParamReply(GetAppSignalParamReply&& from) noexcept
    : GetAppSignalParamReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalParamReply& operator=(const GetAppSignalParamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalParamReply& operator=(GetAppSignalParamReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalParamReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalParamReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalParamReply*>(
               &_GetAppSignalParamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetAppSignalParamReply& a, GetAppSignalParamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalParamReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalParamReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalParamReply* New() const final {
    return CreateMaybeMessage<GetAppSignalParamReply>(nullptr);
  }

  GetAppSignalParamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalParamReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalParamReply& from);
  void MergeFrom(const GetAppSignalParamReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalParamReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalParamReply";
  }
  protected:
  explicit GetAppSignalParamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalsFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Proto.AppSignal appSignals = 2;
  int appsignals_size() const;
  private:
  int _internal_appsignals_size() const;
  public:
  void clear_appsignals();
  ::Proto::AppSignal* mutable_appsignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >*
      mutable_appsignals();
  private:
  const ::Proto::AppSignal& _internal_appsignals(int index) const;
  ::Proto::AppSignal* _internal_add_appsignals();
  public:
  const ::Proto::AppSignal& appsignals(int index) const;
  ::Proto::AppSignal* add_appsignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >&
      appsignals() const;

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalParamReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal > appsignals_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalRequest) */ {
 public:
  inline GetAppSignalRequest() : GetAppSignalRequest(nullptr) {}
  virtual ~GetAppSignalRequest();
  explicit constexpr GetAppSignalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalRequest(const GetAppSignalRequest& from);
  GetAppSignalRequest(GetAppSignalRequest&& from) noexcept
    : GetAppSignalRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalRequest& operator=(const GetAppSignalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalRequest& operator=(GetAppSignalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalRequest*>(
               &_GetAppSignalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAppSignalRequest& a, GetAppSignalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalRequest>(nullptr);
  }

  GetAppSignalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalRequest& from);
  void MergeFrom(const GetAppSignalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalRequest";
  }
  protected:
  explicit GetAppSignalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashesFieldNumber = 1,
  };
  // repeated uint64 signalHashes = 1;
  int signalhashes_size() const;
  private:
  int _internal_signalhashes_size() const;
  public:
  void clear_signalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_signalhashes() const;
  void _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_signalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhashes(int index) const;
  void set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      signalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_signalhashes();

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > signalhashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalReply) */ {
 public:
  inline GetAppSignalReply() : GetAppSignalReply(nullptr) {}
  virtual ~GetAppSignalReply();
  explicit constexpr GetAppSignalReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalReply(const GetAppSignalReply& from);
  GetAppSignalReply(GetAppSignalReply&& from) noexcept
    : GetAppSignalReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalReply& operator=(const GetAppSignalReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalReply& operator=(GetAppSignalReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalReply*>(
               &_GetAppSignalReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAppSignalReply& a, GetAppSignalReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalReply* New() const final {
    return CreateMaybeMessage<GetAppSignalReply>(nullptr);
  }

  GetAppSignalReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalReply& from);
  void MergeFrom(const GetAppSignalReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalReply";
  }
  protected:
  explicit GetAppSignalReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalsFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Proto.AppSignal appSignals = 2;
  int appsignals_size() const;
  private:
  int _internal_appsignals_size() const;
  public:
  void clear_appsignals();
  ::Proto::AppSignal* mutable_appsignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >*
      mutable_appsignals();
  private:
  const ::Proto::AppSignal& _internal_appsignals(int index) const;
  ::Proto::AppSignal* _internal_add_appsignals();
  public:
  const ::Proto::AppSignal& appsignals(int index) const;
  ::Proto::AppSignal* add_appsignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >&
      appsignals() const;

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal > appsignals_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStateRequest) */ {
 public:
  inline GetAppSignalStateRequest() : GetAppSignalStateRequest(nullptr) {}
  virtual ~GetAppSignalStateRequest();
  explicit constexpr GetAppSignalStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStateRequest(const GetAppSignalStateRequest& from);
  GetAppSignalStateRequest(GetAppSignalStateRequest&& from) noexcept
    : GetAppSignalStateRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStateRequest& operator=(const GetAppSignalStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStateRequest& operator=(GetAppSignalStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStateRequest*>(
               &_GetAppSignalStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetAppSignalStateRequest& a, GetAppSignalStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStateRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalStateRequest>(nullptr);
  }

  GetAppSignalStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStateRequest& from);
  void MergeFrom(const GetAppSignalStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStateRequest";
  }
  protected:
  explicit GetAppSignalStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashesFieldNumber = 1,
  };
  // repeated uint64 signalHashes = 1;
  int signalhashes_size() const;
  private:
  int _internal_signalhashes_size() const;
  public:
  void clear_signalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_signalhashes() const;
  void _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_signalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhashes(int index) const;
  void set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      signalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_signalhashes();

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > signalhashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStateReply) */ {
 public:
  inline GetAppSignalStateReply() : GetAppSignalStateReply(nullptr) {}
  virtual ~GetAppSignalStateReply();
  explicit constexpr GetAppSignalStateReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStateReply(const GetAppSignalStateReply& from);
  GetAppSignalStateReply(GetAppSignalStateReply&& from) noexcept
    : GetAppSignalStateReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStateReply& operator=(const GetAppSignalStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStateReply& operator=(GetAppSignalStateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStateReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStateReply*>(
               &_GetAppSignalStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetAppSignalStateReply& a, GetAppSignalStateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStateReply* New() const final {
    return CreateMaybeMessage<GetAppSignalStateReply>(nullptr);
  }

  GetAppSignalStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStateReply& from);
  void MergeFrom(const GetAppSignalStateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStateReply";
  }
  protected:
  explicit GetAppSignalStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalStatesFieldNumber = 4,
    kServerTimeUtcFieldNumber = 2,
    kServerTimeLocalFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // repeated .Proto.AppSignalState appSignalStates = 4;
  int appsignalstates_size() const;
  private:
  int _internal_appsignalstates_size() const;
  public:
  void clear_appsignalstates();
  ::Proto::AppSignalState* mutable_appsignalstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
      mutable_appsignalstates();
  private:
  const ::Proto::AppSignalState& _internal_appsignalstates(int index) const;
  ::Proto::AppSignalState* _internal_add_appsignalstates();
  public:
  const ::Proto::AppSignalState& appsignalstates(int index) const;
  ::Proto::AppSignalState* add_appsignalstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
      appsignalstates() const;

  // optional int64 serverTimeUtc = 2;
  bool has_servertimeutc() const;
  private:
  bool _internal_has_servertimeutc() const;
  public:
  void clear_servertimeutc();
  ::PROTOBUF_NAMESPACE_ID::int64 servertimeutc() const;
  void set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertimeutc() const;
  void _internal_set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 serverTimeLocal = 3;
  bool has_servertimelocal() const;
  private:
  bool _internal_has_servertimelocal() const;
  public:
  void clear_servertimelocal();
  ::PROTOBUF_NAMESPACE_ID::int64 servertimelocal() const;
  void set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertimelocal() const;
  void _internal_set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState > appsignalstates_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertimeutc_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertimelocal_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStateChangesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStateChangesRequest) */ {
 public:
  inline GetAppSignalStateChangesRequest() : GetAppSignalStateChangesRequest(nullptr) {}
  virtual ~GetAppSignalStateChangesRequest();
  explicit constexpr GetAppSignalStateChangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStateChangesRequest(const GetAppSignalStateChangesRequest& from);
  GetAppSignalStateChangesRequest(GetAppSignalStateChangesRequest&& from) noexcept
    : GetAppSignalStateChangesRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStateChangesRequest& operator=(const GetAppSignalStateChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStateChangesRequest& operator=(GetAppSignalStateChangesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStateChangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStateChangesRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStateChangesRequest*>(
               &_GetAppSignalStateChangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAppSignalStateChangesRequest& a, GetAppSignalStateChangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStateChangesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStateChangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStateChangesRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalStateChangesRequest>(nullptr);
  }

  GetAppSignalStateChangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStateChangesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStateChangesRequest& from);
  void MergeFrom(const GetAppSignalStateChangesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStateChangesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStateChangesRequest";
  }
  protected:
  explicit GetAppSignalStateChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStateChangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStateChangesReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStateChangesReply) */ {
 public:
  inline GetAppSignalStateChangesReply() : GetAppSignalStateChangesReply(nullptr) {}
  virtual ~GetAppSignalStateChangesReply();
  explicit constexpr GetAppSignalStateChangesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStateChangesReply(const GetAppSignalStateChangesReply& from);
  GetAppSignalStateChangesReply(GetAppSignalStateChangesReply&& from) noexcept
    : GetAppSignalStateChangesReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStateChangesReply& operator=(const GetAppSignalStateChangesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStateChangesReply& operator=(GetAppSignalStateChangesReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStateChangesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStateChangesReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStateChangesReply*>(
               &_GetAppSignalStateChangesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAppSignalStateChangesReply& a, GetAppSignalStateChangesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStateChangesReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStateChangesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStateChangesReply* New() const final {
    return CreateMaybeMessage<GetAppSignalStateChangesReply>(nullptr);
  }

  GetAppSignalStateChangesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStateChangesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStateChangesReply& from);
  void MergeFrom(const GetAppSignalStateChangesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStateChangesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStateChangesReply";
  }
  protected:
  explicit GetAppSignalStateChangesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalStatesFieldNumber = 5,
    kServerTimeUtcFieldNumber = 2,
    kErrorFieldNumber = 1,
    kPendingStatesCountFieldNumber = 4,
    kServerTimeLocalFieldNumber = 3,
  };
  // repeated .Proto.AppSignalState appSignalStates = 5;
  int appsignalstates_size() const;
  private:
  int _internal_appsignalstates_size() const;
  public:
  void clear_appsignalstates();
  ::Proto::AppSignalState* mutable_appsignalstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
      mutable_appsignalstates();
  private:
  const ::Proto::AppSignalState& _internal_appsignalstates(int index) const;
  ::Proto::AppSignalState* _internal_add_appsignalstates();
  public:
  const ::Proto::AppSignalState& appsignalstates(int index) const;
  ::Proto::AppSignalState* add_appsignalstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
      appsignalstates() const;

  // optional int64 serverTimeUtc = 2;
  bool has_servertimeutc() const;
  private:
  bool _internal_has_servertimeutc() const;
  public:
  void clear_servertimeutc();
  ::PROTOBUF_NAMESPACE_ID::int64 servertimeutc() const;
  void set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertimeutc() const;
  void _internal_set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pendingStatesCount = 4 [default = 0];
  bool has_pendingstatescount() const;
  private:
  bool _internal_has_pendingstatescount() const;
  public:
  void clear_pendingstatescount();
  ::PROTOBUF_NAMESPACE_ID::int32 pendingstatescount() const;
  void set_pendingstatescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pendingstatescount() const;
  void _internal_set_pendingstatescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 serverTimeLocal = 3;
  bool has_servertimelocal() const;
  private:
  bool _internal_has_servertimelocal() const;
  public:
  void clear_servertimelocal();
  ::PROTOBUF_NAMESPACE_ID::int64 servertimelocal() const;
  void set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertimelocal() const;
  void _internal_set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStateChangesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState > appsignalstates_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertimeutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 pendingstatescount_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertimelocal_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class DataSourceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.DataSourceInfo) */ {
 public:
  inline DataSourceInfo() : DataSourceInfo(nullptr) {}
  virtual ~DataSourceInfo();
  explicit constexpr DataSourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSourceInfo(const DataSourceInfo& from);
  DataSourceInfo(DataSourceInfo&& from) noexcept
    : DataSourceInfo() {
    *this = ::std::move(from);
  }

  inline DataSourceInfo& operator=(const DataSourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceInfo& operator=(DataSourceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSourceInfo* internal_default_instance() {
    return reinterpret_cast<const DataSourceInfo*>(
               &_DataSourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DataSourceInfo& a, DataSourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceInfo* New() const final {
    return CreateMaybeMessage<DataSourceInfo>(nullptr);
  }

  DataSourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSourceInfo& from);
  void MergeFrom(const DataSourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.DataSourceInfo";
  }
  protected:
  explicit DataSourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLmEquipmentIDFieldNumber = 2,
    kLmCaptionFieldNumber = 3,
    kLmIPFieldNumber = 5,
    kLmSubsystemIDFieldNumber = 8,
    kLmSubsystemChannelFieldNumber = 9,
    kLmAdapterIDFieldNumber = 12,
    kLmPresetNameFieldNumber = 17,
    kIdFieldNumber = 1,
    kLmDataTypeFieldNumber = 4,
    kLmPortFieldNumber = 6,
    kLmSubsystemKeyFieldNumber = 7,
    kLmNumberFieldNumber = 10,
    kLmModuleTypeFieldNumber = 11,
    kLmDataEnableFieldNumber = 13,
    kLmUniqueIDFieldNumber = 15,
    kLmDataIDFieldNumber = 14,
    kLmRupFramesQuantityFieldNumber = 16,
  };
  // optional string lmEquipmentID = 2;
  bool has_lmequipmentid() const;
  private:
  bool _internal_has_lmequipmentid() const;
  public:
  void clear_lmequipmentid();
  const std::string& lmequipmentid() const;
  void set_lmequipmentid(const std::string& value);
  void set_lmequipmentid(std::string&& value);
  void set_lmequipmentid(const char* value);
  void set_lmequipmentid(const char* value, size_t size);
  std::string* mutable_lmequipmentid();
  std::string* release_lmequipmentid();
  void set_allocated_lmequipmentid(std::string* lmequipmentid);
  private:
  const std::string& _internal_lmequipmentid() const;
  void _internal_set_lmequipmentid(const std::string& value);
  std::string* _internal_mutable_lmequipmentid();
  public:

  // optional string lmCaption = 3;
  bool has_lmcaption() const;
  private:
  bool _internal_has_lmcaption() const;
  public:
  void clear_lmcaption();
  const std::string& lmcaption() const;
  void set_lmcaption(const std::string& value);
  void set_lmcaption(std::string&& value);
  void set_lmcaption(const char* value);
  void set_lmcaption(const char* value, size_t size);
  std::string* mutable_lmcaption();
  std::string* release_lmcaption();
  void set_allocated_lmcaption(std::string* lmcaption);
  private:
  const std::string& _internal_lmcaption() const;
  void _internal_set_lmcaption(const std::string& value);
  std::string* _internal_mutable_lmcaption();
  public:

  // optional string lmIP = 5;
  bool has_lmip() const;
  private:
  bool _internal_has_lmip() const;
  public:
  void clear_lmip();
  const std::string& lmip() const;
  void set_lmip(const std::string& value);
  void set_lmip(std::string&& value);
  void set_lmip(const char* value);
  void set_lmip(const char* value, size_t size);
  std::string* mutable_lmip();
  std::string* release_lmip();
  void set_allocated_lmip(std::string* lmip);
  private:
  const std::string& _internal_lmip() const;
  void _internal_set_lmip(const std::string& value);
  std::string* _internal_mutable_lmip();
  public:

  // optional string lmSubsystemID = 8;
  bool has_lmsubsystemid() const;
  private:
  bool _internal_has_lmsubsystemid() const;
  public:
  void clear_lmsubsystemid();
  const std::string& lmsubsystemid() const;
  void set_lmsubsystemid(const std::string& value);
  void set_lmsubsystemid(std::string&& value);
  void set_lmsubsystemid(const char* value);
  void set_lmsubsystemid(const char* value, size_t size);
  std::string* mutable_lmsubsystemid();
  std::string* release_lmsubsystemid();
  void set_allocated_lmsubsystemid(std::string* lmsubsystemid);
  private:
  const std::string& _internal_lmsubsystemid() const;
  void _internal_set_lmsubsystemid(const std::string& value);
  std::string* _internal_mutable_lmsubsystemid();
  public:

  // optional string lmSubsystemChannel = 9;
  bool has_lmsubsystemchannel() const;
  private:
  bool _internal_has_lmsubsystemchannel() const;
  public:
  void clear_lmsubsystemchannel();
  const std::string& lmsubsystemchannel() const;
  void set_lmsubsystemchannel(const std::string& value);
  void set_lmsubsystemchannel(std::string&& value);
  void set_lmsubsystemchannel(const char* value);
  void set_lmsubsystemchannel(const char* value, size_t size);
  std::string* mutable_lmsubsystemchannel();
  std::string* release_lmsubsystemchannel();
  void set_allocated_lmsubsystemchannel(std::string* lmsubsystemchannel);
  private:
  const std::string& _internal_lmsubsystemchannel() const;
  void _internal_set_lmsubsystemchannel(const std::string& value);
  std::string* _internal_mutable_lmsubsystemchannel();
  public:

  // optional string lmAdapterID = 12;
  bool has_lmadapterid() const;
  private:
  bool _internal_has_lmadapterid() const;
  public:
  void clear_lmadapterid();
  const std::string& lmadapterid() const;
  void set_lmadapterid(const std::string& value);
  void set_lmadapterid(std::string&& value);
  void set_lmadapterid(const char* value);
  void set_lmadapterid(const char* value, size_t size);
  std::string* mutable_lmadapterid();
  std::string* release_lmadapterid();
  void set_allocated_lmadapterid(std::string* lmadapterid);
  private:
  const std::string& _internal_lmadapterid() const;
  void _internal_set_lmadapterid(const std::string& value);
  std::string* _internal_mutable_lmadapterid();
  public:

  // optional string lmPresetName = 17;
  bool has_lmpresetname() const;
  private:
  bool _internal_has_lmpresetname() const;
  public:
  void clear_lmpresetname();
  const std::string& lmpresetname() const;
  void set_lmpresetname(const std::string& value);
  void set_lmpresetname(std::string&& value);
  void set_lmpresetname(const char* value);
  void set_lmpresetname(const char* value, size_t size);
  std::string* mutable_lmpresetname();
  std::string* release_lmpresetname();
  void set_allocated_lmpresetname(std::string* lmpresetname);
  private:
  const std::string& _internal_lmpresetname() const;
  void _internal_set_lmpresetname(const std::string& value);
  std::string* _internal_mutable_lmpresetname();
  public:

  // optional uint64 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 lmDataType = 4 [default = 0];
  bool has_lmdatatype() const;
  private:
  bool _internal_has_lmdatatype() const;
  public:
  void clear_lmdatatype();
  ::PROTOBUF_NAMESPACE_ID::int32 lmdatatype() const;
  void set_lmdatatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmdatatype() const;
  void _internal_set_lmdatatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lmPort = 6 [default = 0];
  bool has_lmport() const;
  private:
  bool _internal_has_lmport() const;
  public:
  void clear_lmport();
  ::PROTOBUF_NAMESPACE_ID::int32 lmport() const;
  void set_lmport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmport() const;
  void _internal_set_lmport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lmSubsystemKey = 7 [default = 0];
  bool has_lmsubsystemkey() const;
  private:
  bool _internal_has_lmsubsystemkey() const;
  public:
  void clear_lmsubsystemkey();
  ::PROTOBUF_NAMESPACE_ID::int32 lmsubsystemkey() const;
  void set_lmsubsystemkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmsubsystemkey() const;
  void _internal_set_lmsubsystemkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lmNumber = 10 [default = 0];
  bool has_lmnumber() const;
  private:
  bool _internal_has_lmnumber() const;
  public:
  void clear_lmnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 lmnumber() const;
  void set_lmnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmnumber() const;
  void _internal_set_lmnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lmModuleType = 11 [default = 0];
  bool has_lmmoduletype() const;
  private:
  bool _internal_has_lmmoduletype() const;
  public:
  void clear_lmmoduletype();
  ::PROTOBUF_NAMESPACE_ID::int32 lmmoduletype() const;
  void set_lmmoduletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmmoduletype() const;
  void _internal_set_lmmoduletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool lmDataEnable = 13 [default = false];
  bool has_lmdataenable() const;
  private:
  bool _internal_has_lmdataenable() const;
  public:
  void clear_lmdataenable();
  bool lmdataenable() const;
  void set_lmdataenable(bool value);
  private:
  bool _internal_lmdataenable() const;
  void _internal_set_lmdataenable(bool value);
  public:

  // optional uint64 lmUniqueID = 15 [default = 0];
  bool has_lmuniqueid() const;
  private:
  bool _internal_has_lmuniqueid() const;
  public:
  void clear_lmuniqueid();
  ::PROTOBUF_NAMESPACE_ID::uint64 lmuniqueid() const;
  void set_lmuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lmuniqueid() const;
  void _internal_set_lmuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 lmDataID = 14 [default = 0];
  bool has_lmdataid() const;
  private:
  bool _internal_has_lmdataid() const;
  public:
  void clear_lmdataid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lmdataid() const;
  void set_lmdataid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lmdataid() const;
  void _internal_set_lmdataid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 lmRupFramesQuantity = 16 [default = 0];
  bool has_lmrupframesquantity() const;
  private:
  bool _internal_has_lmrupframesquantity() const;
  public:
  void clear_lmrupframesquantity();
  ::PROTOBUF_NAMESPACE_ID::int32 lmrupframesquantity() const;
  void set_lmrupframesquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lmrupframesquantity() const;
  void _internal_set_lmrupframesquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.DataSourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmequipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmcaption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmsubsystemid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmsubsystemchannel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmadapterid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmpresetname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmdatatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmport_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmsubsystemkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmmoduletype_;
  bool lmdataenable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lmuniqueid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lmdataid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lmrupframesquantity_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourcesInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetDataSourcesInfoRequest) */ {
 public:
  inline GetDataSourcesInfoRequest() : GetDataSourcesInfoRequest(nullptr) {}
  virtual ~GetDataSourcesInfoRequest();
  explicit constexpr GetDataSourcesInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataSourcesInfoRequest(const GetDataSourcesInfoRequest& from);
  GetDataSourcesInfoRequest(GetDataSourcesInfoRequest&& from) noexcept
    : GetDataSourcesInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetDataSourcesInfoRequest& operator=(const GetDataSourcesInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourcesInfoRequest& operator=(GetDataSourcesInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataSourcesInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataSourcesInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataSourcesInfoRequest*>(
               &_GetDataSourcesInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetDataSourcesInfoRequest& a, GetDataSourcesInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourcesInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourcesInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataSourcesInfoRequest* New() const final {
    return CreateMaybeMessage<GetDataSourcesInfoRequest>(nullptr);
  }

  GetDataSourcesInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataSourcesInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataSourcesInfoRequest& from);
  void MergeFrom(const GetDataSourcesInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourcesInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetDataSourcesInfoRequest";
  }
  protected:
  explicit GetDataSourcesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.GetDataSourcesInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourcesInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetDataSourcesInfoReply) */ {
 public:
  inline GetDataSourcesInfoReply() : GetDataSourcesInfoReply(nullptr) {}
  virtual ~GetDataSourcesInfoReply();
  explicit constexpr GetDataSourcesInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataSourcesInfoReply(const GetDataSourcesInfoReply& from);
  GetDataSourcesInfoReply(GetDataSourcesInfoReply&& from) noexcept
    : GetDataSourcesInfoReply() {
    *this = ::std::move(from);
  }

  inline GetDataSourcesInfoReply& operator=(const GetDataSourcesInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourcesInfoReply& operator=(GetDataSourcesInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataSourcesInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataSourcesInfoReply* internal_default_instance() {
    return reinterpret_cast<const GetDataSourcesInfoReply*>(
               &_GetDataSourcesInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetDataSourcesInfoReply& a, GetDataSourcesInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourcesInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourcesInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataSourcesInfoReply* New() const final {
    return CreateMaybeMessage<GetDataSourcesInfoReply>(nullptr);
  }

  GetDataSourcesInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataSourcesInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataSourcesInfoReply& from);
  void MergeFrom(const GetDataSourcesInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourcesInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetDataSourcesInfoReply";
  }
  protected:
  explicit GetDataSourcesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceInfoFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Network.DataSourceInfo dataSourceInfo = 2;
  int datasourceinfo_size() const;
  private:
  int _internal_datasourceinfo_size() const;
  public:
  void clear_datasourceinfo();
  ::Network::DataSourceInfo* mutable_datasourceinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >*
      mutable_datasourceinfo();
  private:
  const ::Network::DataSourceInfo& _internal_datasourceinfo(int index) const;
  ::Network::DataSourceInfo* _internal_add_datasourceinfo();
  public:
  const ::Network::DataSourceInfo& datasourceinfo(int index) const;
  ::Network::DataSourceInfo* add_datasourceinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >&
      datasourceinfo() const;

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetDataSourcesInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo > datasourceinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class AppDataReceiveState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.AppDataReceiveState) */ {
 public:
  inline AppDataReceiveState() : AppDataReceiveState(nullptr) {}
  virtual ~AppDataReceiveState();
  explicit constexpr AppDataReceiveState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppDataReceiveState(const AppDataReceiveState& from);
  AppDataReceiveState(AppDataReceiveState&& from) noexcept
    : AppDataReceiveState() {
    *this = ::std::move(from);
  }

  inline AppDataReceiveState& operator=(const AppDataReceiveState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDataReceiveState& operator=(AppDataReceiveState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDataReceiveState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppDataReceiveState* internal_default_instance() {
    return reinterpret_cast<const AppDataReceiveState*>(
               &_AppDataReceiveState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AppDataReceiveState& a, AppDataReceiveState& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDataReceiveState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppDataReceiveState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDataReceiveState* New() const final {
    return CreateMaybeMessage<AppDataReceiveState>(nullptr);
  }

  AppDataReceiveState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDataReceiveState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDataReceiveState& from);
  void MergeFrom(const AppDataReceiveState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDataReceiveState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.AppDataReceiveState";
  }
  protected:
  explicit AppDataReceiveState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivingRateFieldNumber = 1,
    kUdpReceivingRateFieldNumber = 2,
    kRupFramesCountFieldNumber = 4,
    kSimFramesCountFieldNumber = 5,
    kErrDatagramSizeFieldNumber = 6,
    kErrSimVersionFieldNumber = 7,
    kErrUnknownAppDataSourceIPFieldNumber = 8,
    kErrRupFrameCRCFieldNumber = 9,
    kErrNotExpectedSimPacketFieldNumber = 10,
    kRupFramesReceivingRateFieldNumber = 3,
  };
  // optional int32 receivingRate = 1 [default = 0];
  bool has_receivingrate() const;
  private:
  bool _internal_has_receivingrate() const;
  public:
  void clear_receivingrate();
  ::PROTOBUF_NAMESPACE_ID::int32 receivingrate() const;
  void set_receivingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receivingrate() const;
  void _internal_set_receivingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 udpReceivingRate = 2 [default = 0];
  bool has_udpreceivingrate() const;
  private:
  bool _internal_has_udpreceivingrate() const;
  public:
  void clear_udpreceivingrate();
  ::PROTOBUF_NAMESPACE_ID::int32 udpreceivingrate() const;
  void set_udpreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udpreceivingrate() const;
  void _internal_set_udpreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 rupFramesCount = 4 [default = 0];
  bool has_rupframescount() const;
  private:
  bool _internal_has_rupframescount() const;
  public:
  void clear_rupframescount();
  ::PROTOBUF_NAMESPACE_ID::int64 rupframescount() const;
  void set_rupframescount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rupframescount() const;
  void _internal_set_rupframescount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 simFramesCount = 5 [default = 0];
  bool has_simframescount() const;
  private:
  bool _internal_has_simframescount() const;
  public:
  void clear_simframescount();
  ::PROTOBUF_NAMESPACE_ID::int64 simframescount() const;
  void set_simframescount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_simframescount() const;
  void _internal_set_simframescount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errDatagramSize = 6 [default = 0];
  bool has_errdatagramsize() const;
  private:
  bool _internal_has_errdatagramsize() const;
  public:
  void clear_errdatagramsize();
  ::PROTOBUF_NAMESPACE_ID::int64 errdatagramsize() const;
  void set_errdatagramsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errdatagramsize() const;
  void _internal_set_errdatagramsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errSimVersion = 7 [default = 0];
  bool has_errsimversion() const;
  private:
  bool _internal_has_errsimversion() const;
  public:
  void clear_errsimversion();
  ::PROTOBUF_NAMESPACE_ID::int64 errsimversion() const;
  void set_errsimversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errsimversion() const;
  void _internal_set_errsimversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errUnknownAppDataSourceIP = 8 [default = 0];
  bool has_errunknownappdatasourceip() const;
  private:
  bool _internal_has_errunknownappdatasourceip() const;
  public:
  void clear_errunknownappdatasourceip();
  ::PROTOBUF_NAMESPACE_ID::int64 errunknownappdatasourceip() const;
  void set_errunknownappdatasourceip(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errunknownappdatasourceip() const;
  void _internal_set_errunknownappdatasourceip(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupFrameCRC = 9 [default = 0];
  bool has_errrupframecrc() const;
  private:
  bool _internal_has_errrupframecrc() const;
  public:
  void clear_errrupframecrc();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframecrc() const;
  void set_errrupframecrc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupframecrc() const;
  void _internal_set_errrupframecrc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errNotExpectedSimPacket = 10 [default = 0];
  bool has_errnotexpectedsimpacket() const;
  private:
  bool _internal_has_errnotexpectedsimpacket() const;
  public:
  void clear_errnotexpectedsimpacket();
  ::PROTOBUF_NAMESPACE_ID::int64 errnotexpectedsimpacket() const;
  void set_errnotexpectedsimpacket(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errnotexpectedsimpacket() const;
  void _internal_set_errnotexpectedsimpacket(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 rupFramesReceivingRate = 3 [default = 0];
  bool has_rupframesreceivingrate() const;
  private:
  bool _internal_has_rupframesreceivingrate() const;
  public:
  void clear_rupframesreceivingrate();
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesreceivingrate() const;
  void set_rupframesreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rupframesreceivingrate() const;
  void _internal_set_rupframesreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.AppDataReceiveState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 receivingrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 udpreceivingrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 rupframescount_;
  ::PROTOBUF_NAMESPACE_ID::int64 simframescount_;
  ::PROTOBUF_NAMESPACE_ID::int64 errdatagramsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errsimversion_;
  ::PROTOBUF_NAMESPACE_ID::int64 errunknownappdatasourceip_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframecrc_;
  ::PROTOBUF_NAMESPACE_ID::int64 errnotexpectedsimpacket_;
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesreceivingrate_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class AppDataSourceState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.AppDataSourceState) */ {
 public:
  inline AppDataSourceState() : AppDataSourceState(nullptr) {}
  virtual ~AppDataSourceState();
  explicit constexpr AppDataSourceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppDataSourceState(const AppDataSourceState& from);
  AppDataSourceState(AppDataSourceState&& from) noexcept
    : AppDataSourceState() {
    *this = ::std::move(from);
  }

  inline AppDataSourceState& operator=(const AppDataSourceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDataSourceState& operator=(AppDataSourceState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDataSourceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppDataSourceState* internal_default_instance() {
    return reinterpret_cast<const AppDataSourceState*>(
               &_AppDataSourceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AppDataSourceState& a, AppDataSourceState& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDataSourceState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppDataSourceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDataSourceState* New() const final {
    return CreateMaybeMessage<AppDataSourceState>(nullptr);
  }

  AppDataSourceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDataSourceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDataSourceState& from);
  void MergeFrom(const AppDataSourceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDataSourceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.AppDataSourceState";
  }
  protected:
  explicit AppDataSourceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLmEquipmentIDFieldNumber = 27,
    kIdFieldNumber = 1,
    kUptimeFieldNumber = 3,
    kReceivedDataIDFieldNumber = 4,
    kRupFramesQueueCurSizeFieldNumber = 5,
    kRupFramesQueueCurMaxSizeFieldNumber = 6,
    kDataReceivingRateFieldNumber = 7,
    kReceivedDataSizeFieldNumber = 8,
    kReceivedFramesCountFieldNumber = 9,
    kReceivedPacketCountFieldNumber = 10,
    kDataReceivesFieldNumber = 2,
    kDataProcessingEnabledFieldNumber = 12,
    kRupFrameNumeratorFieldNumber = 16,
    kLostPacketCountFieldNumber = 11,
    kProcessedPacketCountFieldNumber = 13,
    kLastPacketSystemTimeFieldNumber = 14,
    kRupFramePlantTimeFieldNumber = 15,
    kSignalStatesQueueCurSizeFieldNumber = 17,
    kSignalStatesQueueCurMaxSizeFieldNumber = 18,
    kErrorProtocolVersionFieldNumber = 20,
    kErrorFramesQuantityFieldNumber = 21,
    kErrorFrameNoFieldNumber = 22,
    kErrorDataIDFieldNumber = 23,
    kAcquiredSignalsCountFieldNumber = 19,
    kRupFramesQueueSizeFieldNumber = 28,
    kErrorFrameSizeFieldNumber = 24,
    kErrorDuplicatePlantTimeFieldNumber = 25,
    kErrorNonmonotonicPlantTimeFieldNumber = 26,
    kSignalStatesQueueSizeFieldNumber = 29,
    kStateFieldNumber = 30,
  };
  // optional string lmEquipmentID = 27;
  bool has_lmequipmentid() const;
  private:
  bool _internal_has_lmequipmentid() const;
  public:
  void clear_lmequipmentid();
  const std::string& lmequipmentid() const;
  void set_lmequipmentid(const std::string& value);
  void set_lmequipmentid(std::string&& value);
  void set_lmequipmentid(const char* value);
  void set_lmequipmentid(const char* value, size_t size);
  std::string* mutable_lmequipmentid();
  std::string* release_lmequipmentid();
  void set_allocated_lmequipmentid(std::string* lmequipmentid);
  private:
  const std::string& _internal_lmequipmentid() const;
  void _internal_set_lmequipmentid(const std::string& value);
  std::string* _internal_mutable_lmequipmentid();
  public:

  // optional uint64 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 uptime = 3 [default = 0];
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 receivedDataID = 4 [default = 0];
  bool has_receiveddataid() const;
  private:
  bool _internal_has_receiveddataid() const;
  public:
  void clear_receiveddataid();
  ::PROTOBUF_NAMESPACE_ID::uint64 receiveddataid() const;
  void set_receiveddataid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_receiveddataid() const;
  void _internal_set_receiveddataid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 rupFramesQueueCurSize = 5 [default = 0];
  bool has_rupframesqueuecursize() const;
  private:
  bool _internal_has_rupframesqueuecursize() const;
  public:
  void clear_rupframesqueuecursize();
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesqueuecursize() const;
  void set_rupframesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rupframesqueuecursize() const;
  void _internal_set_rupframesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rupFramesQueueCurMaxSize = 6 [default = 0];
  bool has_rupframesqueuecurmaxsize() const;
  private:
  bool _internal_has_rupframesqueuecurmaxsize() const;
  public:
  void clear_rupframesqueuecurmaxsize();
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesqueuecurmaxsize() const;
  void set_rupframesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rupframesqueuecurmaxsize() const;
  void _internal_set_rupframesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double dataReceivingRate = 7 [default = 0];
  bool has_datareceivingrate() const;
  private:
  bool _internal_has_datareceivingrate() const;
  public:
  void clear_datareceivingrate();
  double datareceivingrate() const;
  void set_datareceivingrate(double value);
  private:
  double _internal_datareceivingrate() const;
  void _internal_set_datareceivingrate(double value);
  public:

  // optional int64 receivedDataSize = 8 [default = 0];
  bool has_receiveddatasize() const;
  private:
  bool _internal_has_receiveddatasize() const;
  public:
  void clear_receiveddatasize();
  ::PROTOBUF_NAMESPACE_ID::int64 receiveddatasize() const;
  void set_receiveddatasize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiveddatasize() const;
  void _internal_set_receiveddatasize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 receivedFramesCount = 9 [default = 0];
  bool has_receivedframescount() const;
  private:
  bool _internal_has_receivedframescount() const;
  public:
  void clear_receivedframescount();
  ::PROTOBUF_NAMESPACE_ID::int64 receivedframescount() const;
  void set_receivedframescount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receivedframescount() const;
  void _internal_set_receivedframescount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 receivedPacketCount = 10 [default = 0];
  bool has_receivedpacketcount() const;
  private:
  bool _internal_has_receivedpacketcount() const;
  public:
  void clear_receivedpacketcount();
  ::PROTOBUF_NAMESPACE_ID::int64 receivedpacketcount() const;
  void set_receivedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receivedpacketcount() const;
  void _internal_set_receivedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool dataReceives = 2 [default = false];
  bool has_datareceives() const;
  private:
  bool _internal_has_datareceives() const;
  public:
  void clear_datareceives();
  bool datareceives() const;
  void set_datareceives(bool value);
  private:
  bool _internal_datareceives() const;
  void _internal_set_datareceives(bool value);
  public:

  // optional bool dataProcessingEnabled = 12 [default = false];
  bool has_dataprocessingenabled() const;
  private:
  bool _internal_has_dataprocessingenabled() const;
  public:
  void clear_dataprocessingenabled();
  bool dataprocessingenabled() const;
  void set_dataprocessingenabled(bool value);
  private:
  bool _internal_dataprocessingenabled() const;
  void _internal_set_dataprocessingenabled(bool value);
  public:

  // optional uint32 rupFrameNumerator = 16 [default = 0];
  bool has_rupframenumerator() const;
  private:
  bool _internal_has_rupframenumerator() const;
  public:
  void clear_rupframenumerator();
  ::PROTOBUF_NAMESPACE_ID::uint32 rupframenumerator() const;
  void set_rupframenumerator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rupframenumerator() const;
  void _internal_set_rupframenumerator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 lostPacketCount = 11 [default = 0];
  bool has_lostpacketcount() const;
  private:
  bool _internal_has_lostpacketcount() const;
  public:
  void clear_lostpacketcount();
  ::PROTOBUF_NAMESPACE_ID::int64 lostpacketcount() const;
  void set_lostpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lostpacketcount() const;
  void _internal_set_lostpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 processedPacketCount = 13 [default = 0];
  bool has_processedpacketcount() const;
  private:
  bool _internal_has_processedpacketcount() const;
  public:
  void clear_processedpacketcount();
  ::PROTOBUF_NAMESPACE_ID::int64 processedpacketcount() const;
  void set_processedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_processedpacketcount() const;
  void _internal_set_processedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 lastPacketSystemTime = 14 [default = 0];
  bool has_lastpacketsystemtime() const;
  private:
  bool _internal_has_lastpacketsystemtime() const;
  public:
  void clear_lastpacketsystemtime();
  ::PROTOBUF_NAMESPACE_ID::int64 lastpacketsystemtime() const;
  void set_lastpacketsystemtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastpacketsystemtime() const;
  void _internal_set_lastpacketsystemtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 rupFramePlantTime = 15 [default = 0];
  bool has_rupframeplanttime() const;
  private:
  bool _internal_has_rupframeplanttime() const;
  public:
  void clear_rupframeplanttime();
  ::PROTOBUF_NAMESPACE_ID::int64 rupframeplanttime() const;
  void set_rupframeplanttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rupframeplanttime() const;
  void _internal_set_rupframeplanttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 signalStatesQueueCurSize = 17 [default = 0];
  bool has_signalstatesqueuecursize() const;
  private:
  bool _internal_has_signalstatesqueuecursize() const;
  public:
  void clear_signalstatesqueuecursize();
  ::PROTOBUF_NAMESPACE_ID::int32 signalstatesqueuecursize() const;
  void set_signalstatesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalstatesqueuecursize() const;
  void _internal_set_signalstatesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 signalStatesQueueCurMaxSize = 18 [default = 0];
  bool has_signalstatesqueuecurmaxsize() const;
  private:
  bool _internal_has_signalstatesqueuecurmaxsize() const;
  public:
  void clear_signalstatesqueuecurmaxsize();
  ::PROTOBUF_NAMESPACE_ID::int32 signalstatesqueuecurmaxsize() const;
  void set_signalstatesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalstatesqueuecurmaxsize() const;
  void _internal_set_signalstatesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 errorProtocolVersion = 20 [default = 0];
  bool has_errorprotocolversion() const;
  private:
  bool _internal_has_errorprotocolversion() const;
  public:
  void clear_errorprotocolversion();
  ::PROTOBUF_NAMESPACE_ID::int64 errorprotocolversion() const;
  void set_errorprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorprotocolversion() const;
  void _internal_set_errorprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errorFramesQuantity = 21 [default = 0];
  bool has_errorframesquantity() const;
  private:
  bool _internal_has_errorframesquantity() const;
  public:
  void clear_errorframesquantity();
  ::PROTOBUF_NAMESPACE_ID::int64 errorframesquantity() const;
  void set_errorframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorframesquantity() const;
  void _internal_set_errorframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errorFrameNo = 22 [default = 0];
  bool has_errorframeno() const;
  private:
  bool _internal_has_errorframeno() const;
  public:
  void clear_errorframeno();
  ::PROTOBUF_NAMESPACE_ID::int64 errorframeno() const;
  void set_errorframeno(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorframeno() const;
  void _internal_set_errorframeno(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errorDataID = 23 [default = 0];
  bool has_errordataid() const;
  private:
  bool _internal_has_errordataid() const;
  public:
  void clear_errordataid();
  ::PROTOBUF_NAMESPACE_ID::int64 errordataid() const;
  void set_errordataid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errordataid() const;
  void _internal_set_errordataid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 acquiredSignalsCount = 19 [default = 0];
  bool has_acquiredsignalscount() const;
  private:
  bool _internal_has_acquiredsignalscount() const;
  public:
  void clear_acquiredsignalscount();
  ::PROTOBUF_NAMESPACE_ID::int32 acquiredsignalscount() const;
  void set_acquiredsignalscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acquiredsignalscount() const;
  void _internal_set_acquiredsignalscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rupFramesQueueSize = 28 [default = 0];
  bool has_rupframesqueuesize() const;
  private:
  bool _internal_has_rupframesqueuesize() const;
  public:
  void clear_rupframesqueuesize();
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesqueuesize() const;
  void set_rupframesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rupframesqueuesize() const;
  void _internal_set_rupframesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 errorFrameSize = 24 [default = 0];
  bool has_errorframesize() const;
  private:
  bool _internal_has_errorframesize() const;
  public:
  void clear_errorframesize();
  ::PROTOBUF_NAMESPACE_ID::int64 errorframesize() const;
  void set_errorframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorframesize() const;
  void _internal_set_errorframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errorDuplicatePlantTime = 25 [default = 0];
  bool has_errorduplicateplanttime() const;
  private:
  bool _internal_has_errorduplicateplanttime() const;
  public:
  void clear_errorduplicateplanttime();
  ::PROTOBUF_NAMESPACE_ID::int64 errorduplicateplanttime() const;
  void set_errorduplicateplanttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorduplicateplanttime() const;
  void _internal_set_errorduplicateplanttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
  bool has_errornonmonotonicplanttime() const;
  private:
  bool _internal_has_errornonmonotonicplanttime() const;
  public:
  void clear_errornonmonotonicplanttime();
  ::PROTOBUF_NAMESPACE_ID::int64 errornonmonotonicplanttime() const;
  void set_errornonmonotonicplanttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errornonmonotonicplanttime() const;
  void _internal_set_errornonmonotonicplanttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 signalStatesQueueSize = 29 [default = 0];
  bool has_signalstatesqueuesize() const;
  private:
  bool _internal_has_signalstatesqueuesize() const;
  public:
  void clear_signalstatesqueuesize();
  ::PROTOBUF_NAMESPACE_ID::int32 signalstatesqueuesize() const;
  void set_signalstatesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signalstatesqueuesize() const;
  void _internal_set_signalstatesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 state = 30 [default = 0];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.AppDataSourceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lmequipmentid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 receiveddataid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesqueuecursize_;
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesqueuecurmaxsize_;
  double datareceivingrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiveddatasize_;
  ::PROTOBUF_NAMESPACE_ID::int64 receivedframescount_;
  ::PROTOBUF_NAMESPACE_ID::int64 receivedpacketcount_;
  bool datareceives_;
  bool dataprocessingenabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rupframenumerator_;
  ::PROTOBUF_NAMESPACE_ID::int64 lostpacketcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 processedpacketcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpacketsystemtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 rupframeplanttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalstatesqueuecursize_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalstatesqueuecurmaxsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorprotocolversion_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorframesquantity_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorframeno_;
  ::PROTOBUF_NAMESPACE_ID::int64 errordataid_;
  ::PROTOBUF_NAMESPACE_ID::int32 acquiredsignalscount_;
  ::PROTOBUF_NAMESPACE_ID::int32 rupframesqueuesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorframesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorduplicateplanttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 errornonmonotonicplanttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 signalstatesqueuesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppDataSourcesStatesReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppDataSourcesStatesReply) */ {
 public:
  inline GetAppDataSourcesStatesReply() : GetAppDataSourcesStatesReply(nullptr) {}
  virtual ~GetAppDataSourcesStatesReply();
  explicit constexpr GetAppDataSourcesStatesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppDataSourcesStatesReply(const GetAppDataSourcesStatesReply& from);
  GetAppDataSourcesStatesReply(GetAppDataSourcesStatesReply&& from) noexcept
    : GetAppDataSourcesStatesReply() {
    *this = ::std::move(from);
  }

  inline GetAppDataSourcesStatesReply& operator=(const GetAppDataSourcesStatesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppDataSourcesStatesReply& operator=(GetAppDataSourcesStatesReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppDataSourcesStatesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppDataSourcesStatesReply* internal_default_instance() {
    return reinterpret_cast<const GetAppDataSourcesStatesReply*>(
               &_GetAppDataSourcesStatesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetAppDataSourcesStatesReply& a, GetAppDataSourcesStatesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppDataSourcesStatesReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppDataSourcesStatesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppDataSourcesStatesReply* New() const final {
    return CreateMaybeMessage<GetAppDataSourcesStatesReply>(nullptr);
  }

  GetAppDataSourcesStatesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppDataSourcesStatesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppDataSourcesStatesReply& from);
  void MergeFrom(const GetAppDataSourcesStatesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppDataSourcesStatesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppDataSourcesStatesReply";
  }
  protected:
  explicit GetAppDataSourcesStatesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDataSourcesStatesFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Network.AppDataSourceState appDataSourcesStates = 2;
  int appdatasourcesstates_size() const;
  private:
  int _internal_appdatasourcesstates_size() const;
  public:
  void clear_appdatasourcesstates();
  ::Network::AppDataSourceState* mutable_appdatasourcesstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::AppDataSourceState >*
      mutable_appdatasourcesstates();
  private:
  const ::Network::AppDataSourceState& _internal_appdatasourcesstates(int index) const;
  ::Network::AppDataSourceState* _internal_add_appdatasourcesstates();
  public:
  const ::Network::AppDataSourceState& appdatasourcesstates(int index) const;
  ::Network::AppDataSourceState* add_appdatasourcesstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::AppDataSourceState >&
      appdatasourcesstates() const;

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppDataSourcesStatesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::AppDataSourceState > appdatasourcesstates_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class AppDataServiceState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.AppDataServiceState) */ {
 public:
  inline AppDataServiceState() : AppDataServiceState(nullptr) {}
  virtual ~AppDataServiceState();
  explicit constexpr AppDataServiceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppDataServiceState(const AppDataServiceState& from);
  AppDataServiceState(AppDataServiceState&& from) noexcept
    : AppDataServiceState() {
    *this = ::std::move(from);
  }

  inline AppDataServiceState& operator=(const AppDataServiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDataServiceState& operator=(AppDataServiceState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDataServiceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppDataServiceState* internal_default_instance() {
    return reinterpret_cast<const AppDataServiceState*>(
               &_AppDataServiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AppDataServiceState& a, AppDataServiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDataServiceState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppDataServiceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDataServiceState* New() const final {
    return CreateMaybeMessage<AppDataServiceState>(nullptr);
  }

  AppDataServiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDataServiceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDataServiceState& from);
  void MergeFrom(const AppDataServiceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDataServiceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.AppDataServiceState";
  }
  protected:
  explicit AppDataServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDataReceiveStateFieldNumber = 7,
    kCfgServiceIpFieldNumber = 2,
    kCfgServiceIsConnectedFieldNumber = 1,
    kArchiveServiceIsConnectedFieldNumber = 4,
    kCfgServicePortFieldNumber = 3,
    kArchiveServiceIpFieldNumber = 5,
    kArchiveServicePortFieldNumber = 6,
  };
  // optional .Network.AppDataReceiveState appDataReceiveState = 7;
  bool has_appdatareceivestate() const;
  private:
  bool _internal_has_appdatareceivestate() const;
  public:
  void clear_appdatareceivestate();
  const ::Network::AppDataReceiveState& appdatareceivestate() const;
  ::Network::AppDataReceiveState* release_appdatareceivestate();
  ::Network::AppDataReceiveState* mutable_appdatareceivestate();
  void set_allocated_appdatareceivestate(::Network::AppDataReceiveState* appdatareceivestate);
  private:
  const ::Network::AppDataReceiveState& _internal_appdatareceivestate() const;
  ::Network::AppDataReceiveState* _internal_mutable_appdatareceivestate();
  public:
  void unsafe_arena_set_allocated_appdatareceivestate(
      ::Network::AppDataReceiveState* appdatareceivestate);
  ::Network::AppDataReceiveState* unsafe_arena_release_appdatareceivestate();

  // optional uint32 CfgServiceIp = 2 [default = 0];
  bool has_cfgserviceip() const;
  private:
  bool _internal_has_cfgserviceip() const;
  public:
  void clear_cfgserviceip();
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgserviceip() const;
  void set_cfgserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cfgserviceip() const;
  void _internal_set_cfgserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool CfgServiceIsConnected = 1 [default = false];
  bool has_cfgserviceisconnected() const;
  private:
  bool _internal_has_cfgserviceisconnected() const;
  public:
  void clear_cfgserviceisconnected();
  bool cfgserviceisconnected() const;
  void set_cfgserviceisconnected(bool value);
  private:
  bool _internal_cfgserviceisconnected() const;
  void _internal_set_cfgserviceisconnected(bool value);
  public:

  // required bool ArchiveServiceIsConnected = 4 [default = false];
  bool has_archiveserviceisconnected() const;
  private:
  bool _internal_has_archiveserviceisconnected() const;
  public:
  void clear_archiveserviceisconnected();
  bool archiveserviceisconnected() const;
  void set_archiveserviceisconnected(bool value);
  private:
  bool _internal_archiveserviceisconnected() const;
  void _internal_set_archiveserviceisconnected(bool value);
  public:

  // optional int32 CfgServicePort = 3 [default = 0];
  bool has_cfgserviceport() const;
  private:
  bool _internal_has_cfgserviceport() const;
  public:
  void clear_cfgserviceport();
  ::PROTOBUF_NAMESPACE_ID::int32 cfgserviceport() const;
  void set_cfgserviceport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cfgserviceport() const;
  void _internal_set_cfgserviceport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 ArchiveServiceIp = 5 [default = 0];
  bool has_archiveserviceip() const;
  private:
  bool _internal_has_archiveserviceip() const;
  public:
  void clear_archiveserviceip();
  ::PROTOBUF_NAMESPACE_ID::uint32 archiveserviceip() const;
  void set_archiveserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_archiveserviceip() const;
  void _internal_set_archiveserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 ArchiveServicePort = 6 [default = 0];
  bool has_archiveserviceport() const;
  private:
  bool _internal_has_archiveserviceport() const;
  public:
  void clear_archiveserviceport();
  ::PROTOBUF_NAMESPACE_ID::int32 archiveserviceport() const;
  void set_archiveserviceport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_archiveserviceport() const;
  void _internal_set_archiveserviceport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.AppDataServiceState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Network::AppDataReceiveState* appdatareceivestate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgserviceip_;
  bool cfgserviceisconnected_;
  bool archiveserviceisconnected_;
  ::PROTOBUF_NAMESPACE_ID::int32 cfgserviceport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 archiveserviceip_;
  ::PROTOBUF_NAMESPACE_ID::int32 archiveserviceport_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class SoftwareInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.SoftwareInfo) */ {
 public:
  inline SoftwareInfo() : SoftwareInfo(nullptr) {}
  virtual ~SoftwareInfo();
  explicit constexpr SoftwareInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoftwareInfo(const SoftwareInfo& from);
  SoftwareInfo(SoftwareInfo&& from) noexcept
    : SoftwareInfo() {
    *this = ::std::move(from);
  }

  inline SoftwareInfo& operator=(const SoftwareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareInfo& operator=(SoftwareInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftwareInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftwareInfo* internal_default_instance() {
    return reinterpret_cast<const SoftwareInfo*>(
               &_SoftwareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SoftwareInfo& a, SoftwareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftwareInfo* New() const final {
    return CreateMaybeMessage<SoftwareInfo>(nullptr);
  }

  SoftwareInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftwareInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftwareInfo& from);
  void MergeFrom(const SoftwareInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftwareInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.SoftwareInfo";
  }
  protected:
  explicit SoftwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentIdFieldNumber = 2,
    kBuildBranchFieldNumber = 6,
    kCommitSHAFieldNumber = 7,
    kUserNameFieldNumber = 8,
    kClientDescriptionFieldNumber = 11,
    kMajorVersionFieldNumber = 3,
    kMinorVersionFieldNumber = 4,
    kCommitNoFieldNumber = 5,
    kBuildNoFieldNumber = 9,
    kCrcFieldNumber = 10,
    kSoftwareTypeFieldNumber = 1,
  };
  // required string equipmentId = 2;
  bool has_equipmentid() const;
  private:
  bool _internal_has_equipmentid() const;
  public:
  void clear_equipmentid();
  const std::string& equipmentid() const;
  void set_equipmentid(const std::string& value);
  void set_equipmentid(std::string&& value);
  void set_equipmentid(const char* value);
  void set_equipmentid(const char* value, size_t size);
  std::string* mutable_equipmentid();
  std::string* release_equipmentid();
  void set_allocated_equipmentid(std::string* equipmentid);
  private:
  const std::string& _internal_equipmentid() const;
  void _internal_set_equipmentid(const std::string& value);
  std::string* _internal_mutable_equipmentid();
  public:

  // required string buildBranch = 6;
  bool has_buildbranch() const;
  private:
  bool _internal_has_buildbranch() const;
  public:
  void clear_buildbranch();
  const std::string& buildbranch() const;
  void set_buildbranch(const std::string& value);
  void set_buildbranch(std::string&& value);
  void set_buildbranch(const char* value);
  void set_buildbranch(const char* value, size_t size);
  std::string* mutable_buildbranch();
  std::string* release_buildbranch();
  void set_allocated_buildbranch(std::string* buildbranch);
  private:
  const std::string& _internal_buildbranch() const;
  void _internal_set_buildbranch(const std::string& value);
  std::string* _internal_mutable_buildbranch();
  public:

  // required string commitSHA = 7;
  bool has_commitsha() const;
  private:
  bool _internal_has_commitsha() const;
  public:
  void clear_commitsha();
  const std::string& commitsha() const;
  void set_commitsha(const std::string& value);
  void set_commitsha(std::string&& value);
  void set_commitsha(const char* value);
  void set_commitsha(const char* value, size_t size);
  std::string* mutable_commitsha();
  std::string* release_commitsha();
  void set_allocated_commitsha(std::string* commitsha);
  private:
  const std::string& _internal_commitsha() const;
  void _internal_set_commitsha(const std::string& value);
  std::string* _internal_mutable_commitsha();
  public:

  // required string userName = 8;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string clientDescription = 11;
  bool has_clientdescription() const;
  private:
  bool _internal_has_clientdescription() const;
  public:
  void clear_clientdescription();
  const std::string& clientdescription() const;
  void set_clientdescription(const std::string& value);
  void set_clientdescription(std::string&& value);
  void set_clientdescription(const char* value);
  void set_clientdescription(const char* value, size_t size);
  std::string* mutable_clientdescription();
  std::string* release_clientdescription();
  void set_allocated_clientdescription(std::string* clientdescription);
  private:
  const std::string& _internal_clientdescription() const;
  void _internal_set_clientdescription(const std::string& value);
  std::string* _internal_mutable_clientdescription();
  public:

  // required int32 majorVersion = 3 [default = 0];
  bool has_majorversion() const;
  private:
  bool _internal_has_majorversion() const;
  public:
  void clear_majorversion();
  ::PROTOBUF_NAMESPACE_ID::int32 majorversion() const;
  void set_majorversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_majorversion() const;
  void _internal_set_majorversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 minorVersion = 4 [default = 0];
  bool has_minorversion() const;
  private:
  bool _internal_has_minorversion() const;
  public:
  void clear_minorversion();
  ::PROTOBUF_NAMESPACE_ID::int32 minorversion() const;
  void set_minorversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minorversion() const;
  void _internal_set_minorversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 commitNo = 5 [default = 0];
  bool has_commitno() const;
  private:
  bool _internal_has_commitno() const;
  public:
  void clear_commitno();
  ::PROTOBUF_NAMESPACE_ID::int32 commitno() const;
  void set_commitno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commitno() const;
  void _internal_set_commitno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 buildNo = 9 [default = 0];
  bool has_buildno() const;
  private:
  bool _internal_has_buildno() const;
  public:
  void clear_buildno();
  ::PROTOBUF_NAMESPACE_ID::int32 buildno() const;
  void set_buildno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buildno() const;
  void _internal_set_buildno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 crc = 10 [default = 0];
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc() const;
  void _internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 softwareType = 1 [default = 8000];
  bool has_softwaretype() const;
  private:
  bool _internal_has_softwaretype() const;
  public:
  void clear_softwaretype();
  ::PROTOBUF_NAMESPACE_ID::int32 softwaretype() const;
  void set_softwaretype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_softwaretype() const;
  void _internal_set_softwaretype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.SoftwareInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildbranch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitsha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientdescription_;
  ::PROTOBUF_NAMESPACE_ID::int32 majorversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 minorversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 commitno_;
  ::PROTOBUF_NAMESPACE_ID::int32 buildno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  ::PROTOBUF_NAMESPACE_ID::int32 softwaretype_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetServiceInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetServiceInfoRequest) */ {
 public:
  inline GetServiceInfoRequest() : GetServiceInfoRequest(nullptr) {}
  virtual ~GetServiceInfoRequest();
  explicit constexpr GetServiceInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceInfoRequest(const GetServiceInfoRequest& from);
  GetServiceInfoRequest(GetServiceInfoRequest&& from) noexcept
    : GetServiceInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceInfoRequest& operator=(const GetServiceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceInfoRequest& operator=(GetServiceInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceInfoRequest*>(
               &_GetServiceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetServiceInfoRequest& a, GetServiceInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceInfoRequest* New() const final {
    return CreateMaybeMessage<GetServiceInfoRequest>(nullptr);
  }

  GetServiceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceInfoRequest& from);
  void MergeFrom(const GetServiceInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetServiceInfoRequest";
  }
  protected:
  explicit GetServiceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.GetServiceInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class SessionParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.SessionParams) */ {
 public:
  inline SessionParams() : SessionParams(nullptr) {}
  virtual ~SessionParams();
  explicit constexpr SessionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionParams(const SessionParams& from);
  SessionParams(SessionParams&& from) noexcept
    : SessionParams() {
    *this = ::std::move(from);
  }

  inline SessionParams& operator=(const SessionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionParams& operator=(SessionParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionParams* internal_default_instance() {
    return reinterpret_cast<const SessionParams*>(
               &_SessionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SessionParams& a, SessionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionParams* New() const final {
    return CreateMaybeMessage<SessionParams>(nullptr);
  }

  SessionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionParams& from);
  void MergeFrom(const SessionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.SessionParams";
  }
  protected:
  explicit SessionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentSettingsProfileFieldNumber = 1,
    kSoftwareRunModeFieldNumber = 2,
  };
  // optional string currentSettingsProfile = 1;
  bool has_currentsettingsprofile() const;
  private:
  bool _internal_has_currentsettingsprofile() const;
  public:
  void clear_currentsettingsprofile();
  const std::string& currentsettingsprofile() const;
  void set_currentsettingsprofile(const std::string& value);
  void set_currentsettingsprofile(std::string&& value);
  void set_currentsettingsprofile(const char* value);
  void set_currentsettingsprofile(const char* value, size_t size);
  std::string* mutable_currentsettingsprofile();
  std::string* release_currentsettingsprofile();
  void set_allocated_currentsettingsprofile(std::string* currentsettingsprofile);
  private:
  const std::string& _internal_currentsettingsprofile() const;
  void _internal_set_currentsettingsprofile(const std::string& value);
  std::string* _internal_mutable_currentsettingsprofile();
  public:

  // optional int32 softwareRunMode = 2 [default = 0];
  bool has_softwarerunmode() const;
  private:
  bool _internal_has_softwarerunmode() const;
  public:
  void clear_softwarerunmode();
  ::PROTOBUF_NAMESPACE_ID::int32 softwarerunmode() const;
  void set_softwarerunmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_softwarerunmode() const;
  void _internal_set_softwarerunmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.SessionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentsettingsprofile_;
  ::PROTOBUF_NAMESPACE_ID::int32 softwarerunmode_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ServiceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  virtual ~ServiceInfo();
  explicit constexpr ServiceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsXmlFieldNumber = 6,
    kSoftwareInfoFieldNumber = 1,
    kSessionParamsFieldNumber = 5,
    kUptimeFieldNumber = 2,
    kServiceUptimeFieldNumber = 4,
    kServiceStateFieldNumber = 3,
  };
  // optional string settingsXml = 6;
  bool has_settingsxml() const;
  private:
  bool _internal_has_settingsxml() const;
  public:
  void clear_settingsxml();
  const std::string& settingsxml() const;
  void set_settingsxml(const std::string& value);
  void set_settingsxml(std::string&& value);
  void set_settingsxml(const char* value);
  void set_settingsxml(const char* value, size_t size);
  std::string* mutable_settingsxml();
  std::string* release_settingsxml();
  void set_allocated_settingsxml(std::string* settingsxml);
  private:
  const std::string& _internal_settingsxml() const;
  void _internal_set_settingsxml(const std::string& value);
  std::string* _internal_mutable_settingsxml();
  public:

  // required .Network.SoftwareInfo softwareInfo = 1;
  bool has_softwareinfo() const;
  private:
  bool _internal_has_softwareinfo() const;
  public:
  void clear_softwareinfo();
  const ::Network::SoftwareInfo& softwareinfo() const;
  ::Network::SoftwareInfo* release_softwareinfo();
  ::Network::SoftwareInfo* mutable_softwareinfo();
  void set_allocated_softwareinfo(::Network::SoftwareInfo* softwareinfo);
  private:
  const ::Network::SoftwareInfo& _internal_softwareinfo() const;
  ::Network::SoftwareInfo* _internal_mutable_softwareinfo();
  public:
  void unsafe_arena_set_allocated_softwareinfo(
      ::Network::SoftwareInfo* softwareinfo);
  ::Network::SoftwareInfo* unsafe_arena_release_softwareinfo();

  // optional .Network.SessionParams sessionParams = 5;
  bool has_sessionparams() const;
  private:
  bool _internal_has_sessionparams() const;
  public:
  void clear_sessionparams();
  const ::Network::SessionParams& sessionparams() const;
  ::Network::SessionParams* release_sessionparams();
  ::Network::SessionParams* mutable_sessionparams();
  void set_allocated_sessionparams(::Network::SessionParams* sessionparams);
  private:
  const ::Network::SessionParams& _internal_sessionparams() const;
  ::Network::SessionParams* _internal_mutable_sessionparams();
  public:
  void unsafe_arena_set_allocated_sessionparams(
      ::Network::SessionParams* sessionparams);
  ::Network::SessionParams* unsafe_arena_release_sessionparams();

  // optional int64 uptime = 2 [default = 0];
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 serviceUptime = 4 [default = 0];
  bool has_serviceuptime() const;
  private:
  bool _internal_has_serviceuptime() const;
  public:
  void clear_serviceuptime();
  ::PROTOBUF_NAMESPACE_ID::int64 serviceuptime() const;
  void set_serviceuptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serviceuptime() const;
  void _internal_set_serviceuptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 serviceState = 3 [default = 0];
  bool has_servicestate() const;
  private:
  bool _internal_has_servicestate() const;
  public:
  void clear_servicestate();
  ::PROTOBUF_NAMESPACE_ID::int32 servicestate() const;
  void set_servicestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servicestate() const;
  void _internal_set_servicestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settingsxml_;
  ::Network::SoftwareInfo* softwareinfo_;
  ::Network::SessionParams* sessionparams_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 serviceuptime_;
  ::PROTOBUF_NAMESPACE_ID::int32 servicestate_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetServiceInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetServiceInfoReply) */ {
 public:
  inline GetServiceInfoReply() : GetServiceInfoReply(nullptr) {}
  virtual ~GetServiceInfoReply();
  explicit constexpr GetServiceInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceInfoReply(const GetServiceInfoReply& from);
  GetServiceInfoReply(GetServiceInfoReply&& from) noexcept
    : GetServiceInfoReply() {
    *this = ::std::move(from);
  }

  inline GetServiceInfoReply& operator=(const GetServiceInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceInfoReply& operator=(GetServiceInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceInfoReply* internal_default_instance() {
    return reinterpret_cast<const GetServiceInfoReply*>(
               &_GetServiceInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetServiceInfoReply& a, GetServiceInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceInfoReply* New() const final {
    return CreateMaybeMessage<GetServiceInfoReply>(nullptr);
  }

  GetServiceInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceInfoReply& from);
  void MergeFrom(const GetServiceInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetServiceInfoReply";
  }
  protected:
  explicit GetServiceInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // required .Network.ServiceInfo serviceInfo = 2;
  bool has_serviceinfo() const;
  private:
  bool _internal_has_serviceinfo() const;
  public:
  void clear_serviceinfo();
  const ::Network::ServiceInfo& serviceinfo() const;
  ::Network::ServiceInfo* release_serviceinfo();
  ::Network::ServiceInfo* mutable_serviceinfo();
  void set_allocated_serviceinfo(::Network::ServiceInfo* serviceinfo);
  private:
  const ::Network::ServiceInfo& _internal_serviceinfo() const;
  ::Network::ServiceInfo* _internal_mutable_serviceinfo();
  public:
  void unsafe_arena_set_allocated_serviceinfo(
      ::Network::ServiceInfo* serviceinfo);
  ::Network::ServiceInfo* unsafe_arena_release_serviceinfo();

  // required int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetServiceInfoReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Network::ServiceInfo* serviceinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationServiceState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ConfigurationServiceState) */ {
 public:
  inline ConfigurationServiceState() : ConfigurationServiceState(nullptr) {}
  virtual ~ConfigurationServiceState();
  explicit constexpr ConfigurationServiceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationServiceState(const ConfigurationServiceState& from);
  ConfigurationServiceState(ConfigurationServiceState&& from) noexcept
    : ConfigurationServiceState() {
    *this = ::std::move(from);
  }

  inline ConfigurationServiceState& operator=(const ConfigurationServiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationServiceState& operator=(ConfigurationServiceState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationServiceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationServiceState* internal_default_instance() {
    return reinterpret_cast<const ConfigurationServiceState*>(
               &_ConfigurationServiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ConfigurationServiceState& a, ConfigurationServiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationServiceState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationServiceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationServiceState* New() const final {
    return CreateMaybeMessage<ConfigurationServiceState>(nullptr);
  }

  ConfigurationServiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationServiceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationServiceState& from);
  void MergeFrom(const ConfigurationServiceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationServiceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ConfigurationServiceState";
  }
  protected:
  explicit ConfigurationServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentBuildDirectoryFieldNumber = 1,
    kCheckBuildAttemptQuantityFieldNumber = 2,
    kBuildCheckerStateFieldNumber = 3,
  };
  // required string currentBuildDirectory = 1;
  bool has_currentbuilddirectory() const;
  private:
  bool _internal_has_currentbuilddirectory() const;
  public:
  void clear_currentbuilddirectory();
  const std::string& currentbuilddirectory() const;
  void set_currentbuilddirectory(const std::string& value);
  void set_currentbuilddirectory(std::string&& value);
  void set_currentbuilddirectory(const char* value);
  void set_currentbuilddirectory(const char* value, size_t size);
  std::string* mutable_currentbuilddirectory();
  std::string* release_currentbuilddirectory();
  void set_allocated_currentbuilddirectory(std::string* currentbuilddirectory);
  private:
  const std::string& _internal_currentbuilddirectory() const;
  void _internal_set_currentbuilddirectory(const std::string& value);
  std::string* _internal_mutable_currentbuilddirectory();
  public:

  // required int32 checkBuildAttemptQuantity = 2;
  bool has_checkbuildattemptquantity() const;
  private:
  bool _internal_has_checkbuildattemptquantity() const;
  public:
  void clear_checkbuildattemptquantity();
  ::PROTOBUF_NAMESPACE_ID::int32 checkbuildattemptquantity() const;
  void set_checkbuildattemptquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkbuildattemptquantity() const;
  void _internal_set_checkbuildattemptquantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 buildCheckerState = 3;
  bool has_buildcheckerstate() const;
  private:
  bool _internal_has_buildcheckerstate() const;
  public:
  void clear_buildcheckerstate();
  ::PROTOBUF_NAMESPACE_ID::int32 buildcheckerstate() const;
  void set_buildcheckerstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buildcheckerstate() const;
  void _internal_set_buildcheckerstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.ConfigurationServiceState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentbuilddirectory_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkbuildattemptquantity_;
  ::PROTOBUF_NAMESPACE_ID::int32 buildcheckerstate_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ServiceClientInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ServiceClientInfo) */ {
 public:
  inline ServiceClientInfo() : ServiceClientInfo(nullptr) {}
  virtual ~ServiceClientInfo();
  explicit constexpr ServiceClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceClientInfo(const ServiceClientInfo& from);
  ServiceClientInfo(ServiceClientInfo&& from) noexcept
    : ServiceClientInfo() {
    *this = ::std::move(from);
  }

  inline ServiceClientInfo& operator=(const ServiceClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceClientInfo& operator=(ServiceClientInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceClientInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceClientInfo*>(
               &_ServiceClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ServiceClientInfo& a, ServiceClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceClientInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceClientInfo* New() const final {
    return CreateMaybeMessage<ServiceClientInfo>(nullptr);
  }

  ServiceClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceClientInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceClientInfo& from);
  void MergeFrom(const ServiceClientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ServiceClientInfo";
  }
  protected:
  explicit ServiceClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoftwareInfoFieldNumber = 11,
    kIpFieldNumber = 3,
    kIsActualFieldNumber = 6,
    kUptimeFieldNumber = 5,
    kReplyQuantityFieldNumber = 7,
  };
  // required .Network.SoftwareInfo softwareInfo = 11;
  bool has_softwareinfo() const;
  private:
  bool _internal_has_softwareinfo() const;
  public:
  void clear_softwareinfo();
  const ::Network::SoftwareInfo& softwareinfo() const;
  ::Network::SoftwareInfo* release_softwareinfo();
  ::Network::SoftwareInfo* mutable_softwareinfo();
  void set_allocated_softwareinfo(::Network::SoftwareInfo* softwareinfo);
  private:
  const ::Network::SoftwareInfo& _internal_softwareinfo() const;
  ::Network::SoftwareInfo* _internal_mutable_softwareinfo();
  public:
  void unsafe_arena_set_allocated_softwareinfo(
      ::Network::SoftwareInfo* softwareinfo);
  ::Network::SoftwareInfo* unsafe_arena_release_softwareinfo();

  // required int32 ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool isActual = 6;
  bool has_isactual() const;
  private:
  bool _internal_has_isactual() const;
  public:
  void clear_isactual();
  bool isactual() const;
  void set_isactual(bool value);
  private:
  bool _internal_isactual() const;
  void _internal_set_isactual(bool value);
  public:

  // required int64 uptime = 5;
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 replyQuantity = 7;
  bool has_replyquantity() const;
  private:
  bool _internal_has_replyquantity() const;
  public:
  void clear_replyquantity();
  ::PROTOBUF_NAMESPACE_ID::int64 replyquantity() const;
  void set_replyquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_replyquantity() const;
  void _internal_set_replyquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.ServiceClientInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Network::SoftwareInfo* softwareinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  bool isactual_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 replyquantity_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ServiceClients PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ServiceClients) */ {
 public:
  inline ServiceClients() : ServiceClients(nullptr) {}
  virtual ~ServiceClients();
  explicit constexpr ServiceClients(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceClients(const ServiceClients& from);
  ServiceClients(ServiceClients&& from) noexcept
    : ServiceClients() {
    *this = ::std::move(from);
  }

  inline ServiceClients& operator=(const ServiceClients& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceClients& operator=(ServiceClients&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceClients& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceClients* internal_default_instance() {
    return reinterpret_cast<const ServiceClients*>(
               &_ServiceClients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ServiceClients& a, ServiceClients& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceClients* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceClients* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceClients* New() const final {
    return CreateMaybeMessage<ServiceClients>(nullptr);
  }

  ServiceClients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceClients>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceClients& from);
  void MergeFrom(const ServiceClients& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceClients* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ServiceClients";
  }
  protected:
  explicit ServiceClients(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
  };
  // repeated .Network.ServiceClientInfo clients = 1;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::Network::ServiceClientInfo* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::ServiceClientInfo >*
      mutable_clients();
  private:
  const ::Network::ServiceClientInfo& _internal_clients(int index) const;
  ::Network::ServiceClientInfo* _internal_add_clients();
  public:
  const ::Network::ServiceClientInfo& clients(int index) const;
  ::Network::ServiceClientInfo* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::ServiceClientInfo >&
      clients() const;

  // @@protoc_insertion_point(class_scope:Network.ServiceClients)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::ServiceClientInfo > clients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class BuildInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.BuildInfo) */ {
 public:
  inline BuildInfo() : BuildInfo(nullptr) {}
  virtual ~BuildInfo();
  explicit constexpr BuildInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildInfo(const BuildInfo& from);
  BuildInfo(BuildInfo&& from) noexcept
    : BuildInfo() {
    *this = ::std::move(from);
  }

  inline BuildInfo& operator=(const BuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildInfo& operator=(BuildInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildInfo* internal_default_instance() {
    return reinterpret_cast<const BuildInfo*>(
               &_BuildInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BuildInfo& a, BuildInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildInfo* New() const final {
    return CreateMaybeMessage<BuildInfo>(nullptr);
  }

  BuildInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildInfo& from);
  void MergeFrom(const BuildInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.BuildInfo";
  }
  protected:
  explicit BuildInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kUserFieldNumber = 6,
    kWorkstationFieldNumber = 7,
    kDateFieldNumber = 4,
    kChangesetFieldNumber = 5,
    kIdFieldNumber = 2,
  };
  // required string project = 1;
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const std::string& project() const;
  void set_project(const std::string& value);
  void set_project(std::string&& value);
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  std::string* mutable_project();
  std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // required string user = 6;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // required string workstation = 7;
  bool has_workstation() const;
  private:
  bool _internal_has_workstation() const;
  public:
  void clear_workstation();
  const std::string& workstation() const;
  void set_workstation(const std::string& value);
  void set_workstation(std::string&& value);
  void set_workstation(const char* value);
  void set_workstation(const char* value, size_t size);
  std::string* mutable_workstation();
  std::string* release_workstation();
  void set_allocated_workstation(std::string* workstation);
  private:
  const std::string& _internal_workstation() const;
  void _internal_set_workstation(const std::string& value);
  std::string* _internal_mutable_workstation();
  public:

  // required int64 date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 changeset = 5 [default = 0];
  bool has_changeset() const;
  private:
  bool _internal_has_changeset() const;
  public:
  void clear_changeset();
  ::PROTOBUF_NAMESPACE_ID::int32 changeset() const;
  void set_changeset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changeset() const;
  void _internal_set_changeset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 id = 2 [default = -1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.BuildInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workstation_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  ::PROTOBUF_NAMESPACE_ID::int32 changeset_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationServiceSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ConfigurationServiceSettings) */ {
 public:
  inline ConfigurationServiceSettings() : ConfigurationServiceSettings(nullptr) {}
  virtual ~ConfigurationServiceSettings();
  explicit constexpr ConfigurationServiceSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationServiceSettings(const ConfigurationServiceSettings& from);
  ConfigurationServiceSettings(ConfigurationServiceSettings&& from) noexcept
    : ConfigurationServiceSettings() {
    *this = ::std::move(from);
  }

  inline ConfigurationServiceSettings& operator=(const ConfigurationServiceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationServiceSettings& operator=(ConfigurationServiceSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationServiceSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationServiceSettings* internal_default_instance() {
    return reinterpret_cast<const ConfigurationServiceSettings*>(
               &_ConfigurationServiceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ConfigurationServiceSettings& a, ConfigurationServiceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationServiceSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationServiceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationServiceSettings* New() const final {
    return CreateMaybeMessage<ConfigurationServiceSettings>(nullptr);
  }

  ConfigurationServiceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationServiceSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationServiceSettings& from);
  void MergeFrom(const ConfigurationServiceSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationServiceSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ConfigurationServiceSettings";
  }
  protected:
  explicit ConfigurationServiceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentIDFieldNumber = 1,
    kAutoloadBuildPathFieldNumber = 2,
    kWorkDirectoryFieldNumber = 3,
  };
  // required string equipmentID = 1;
  bool has_equipmentid() const;
  private:
  bool _internal_has_equipmentid() const;
  public:
  void clear_equipmentid();
  const std::string& equipmentid() const;
  void set_equipmentid(const std::string& value);
  void set_equipmentid(std::string&& value);
  void set_equipmentid(const char* value);
  void set_equipmentid(const char* value, size_t size);
  std::string* mutable_equipmentid();
  std::string* release_equipmentid();
  void set_allocated_equipmentid(std::string* equipmentid);
  private:
  const std::string& _internal_equipmentid() const;
  void _internal_set_equipmentid(const std::string& value);
  std::string* _internal_mutable_equipmentid();
  public:

  // required string autoloadBuildPath = 2;
  bool has_autoloadbuildpath() const;
  private:
  bool _internal_has_autoloadbuildpath() const;
  public:
  void clear_autoloadbuildpath();
  const std::string& autoloadbuildpath() const;
  void set_autoloadbuildpath(const std::string& value);
  void set_autoloadbuildpath(std::string&& value);
  void set_autoloadbuildpath(const char* value);
  void set_autoloadbuildpath(const char* value, size_t size);
  std::string* mutable_autoloadbuildpath();
  std::string* release_autoloadbuildpath();
  void set_allocated_autoloadbuildpath(std::string* autoloadbuildpath);
  private:
  const std::string& _internal_autoloadbuildpath() const;
  void _internal_set_autoloadbuildpath(const std::string& value);
  std::string* _internal_mutable_autoloadbuildpath();
  public:

  // required string workDirectory = 3;
  bool has_workdirectory() const;
  private:
  bool _internal_has_workdirectory() const;
  public:
  void clear_workdirectory();
  const std::string& workdirectory() const;
  void set_workdirectory(const std::string& value);
  void set_workdirectory(std::string&& value);
  void set_workdirectory(const char* value);
  void set_workdirectory(const char* value, size_t size);
  std::string* mutable_workdirectory();
  std::string* release_workdirectory();
  void set_allocated_workdirectory(std::string* workdirectory);
  private:
  const std::string& _internal_workdirectory() const;
  void _internal_set_workdirectory(const std::string& value);
  std::string* _internal_mutable_workdirectory();
  public:

  // @@protoc_insertion_point(class_scope:Network.ConfigurationServiceSettings)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr autoloadbuildpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workdirectory_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ServiceSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ServiceSettings) */ {
 public:
  inline ServiceSettings() : ServiceSettings(nullptr) {}
  virtual ~ServiceSettings();
  explicit constexpr ServiceSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceSettings(const ServiceSettings& from);
  ServiceSettings(ServiceSettings&& from) noexcept
    : ServiceSettings() {
    *this = ::std::move(from);
  }

  inline ServiceSettings& operator=(const ServiceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceSettings& operator=(ServiceSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceSettings* internal_default_instance() {
    return reinterpret_cast<const ServiceSettings*>(
               &_ServiceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ServiceSettings& a, ServiceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceSettings* New() const final {
    return CreateMaybeMessage<ServiceSettings>(nullptr);
  }

  ServiceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceSettings& from);
  void MergeFrom(const ServiceSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ServiceSettings";
  }
  protected:
  explicit ServiceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentIDFieldNumber = 1,
    kConfigIP1FieldNumber = 2,
    kConfigIP2FieldNumber = 3,
  };
  // required string equipmentID = 1;
  bool has_equipmentid() const;
  private:
  bool _internal_has_equipmentid() const;
  public:
  void clear_equipmentid();
  const std::string& equipmentid() const;
  void set_equipmentid(const std::string& value);
  void set_equipmentid(std::string&& value);
  void set_equipmentid(const char* value);
  void set_equipmentid(const char* value, size_t size);
  std::string* mutable_equipmentid();
  std::string* release_equipmentid();
  void set_allocated_equipmentid(std::string* equipmentid);
  private:
  const std::string& _internal_equipmentid() const;
  void _internal_set_equipmentid(const std::string& value);
  std::string* _internal_mutable_equipmentid();
  public:

  // required string configIP1 = 2;
  bool has_configip1() const;
  private:
  bool _internal_has_configip1() const;
  public:
  void clear_configip1();
  const std::string& configip1() const;
  void set_configip1(const std::string& value);
  void set_configip1(std::string&& value);
  void set_configip1(const char* value);
  void set_configip1(const char* value, size_t size);
  std::string* mutable_configip1();
  std::string* release_configip1();
  void set_allocated_configip1(std::string* configip1);
  private:
  const std::string& _internal_configip1() const;
  void _internal_set_configip1(const std::string& value);
  std::string* _internal_mutable_configip1();
  public:

  // required string configIP2 = 3;
  bool has_configip2() const;
  private:
  bool _internal_has_configip2() const;
  public:
  void clear_configip2();
  const std::string& configip2() const;
  void set_configip2(const std::string& value);
  void set_configip2(std::string&& value);
  void set_configip2(const char* value);
  void set_configip2(const char* value, size_t size);
  std::string* mutable_configip2();
  std::string* release_configip2();
  void set_allocated_configip2(std::string* configip2);
  private:
  const std::string& _internal_configip2() const;
  void _internal_set_configip2(const std::string& value);
  std::string* _internal_mutable_configip2();
  public:

  // @@protoc_insertion_point(class_scope:Network.ServiceSettings)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipmentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configip1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configip2_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetTuningSourcesInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetTuningSourcesInfo) */ {
 public:
  inline GetTuningSourcesInfo() : GetTuningSourcesInfo(nullptr) {}
  virtual ~GetTuningSourcesInfo();
  explicit constexpr GetTuningSourcesInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTuningSourcesInfo(const GetTuningSourcesInfo& from);
  GetTuningSourcesInfo(GetTuningSourcesInfo&& from) noexcept
    : GetTuningSourcesInfo() {
    *this = ::std::move(from);
  }

  inline GetTuningSourcesInfo& operator=(const GetTuningSourcesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTuningSourcesInfo& operator=(GetTuningSourcesInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTuningSourcesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTuningSourcesInfo* internal_default_instance() {
    return reinterpret_cast<const GetTuningSourcesInfo*>(
               &_GetTuningSourcesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetTuningSourcesInfo& a, GetTuningSourcesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTuningSourcesInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTuningSourcesInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTuningSourcesInfo* New() const final {
    return CreateMaybeMessage<GetTuningSourcesInfo>(nullptr);
  }

  GetTuningSourcesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTuningSourcesInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTuningSourcesInfo& from);
  void MergeFrom(const GetTuningSourcesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTuningSourcesInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetTuningSourcesInfo";
  }
  protected:
  explicit GetTuningSourcesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.GetTuningSourcesInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetTuningSourcesInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetTuningSourcesInfoReply) */ {
 public:
  inline GetTuningSourcesInfoReply() : GetTuningSourcesInfoReply(nullptr) {}
  virtual ~GetTuningSourcesInfoReply();
  explicit constexpr GetTuningSourcesInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTuningSourcesInfoReply(const GetTuningSourcesInfoReply& from);
  GetTuningSourcesInfoReply(GetTuningSourcesInfoReply&& from) noexcept
    : GetTuningSourcesInfoReply() {
    *this = ::std::move(from);
  }

  inline GetTuningSourcesInfoReply& operator=(const GetTuningSourcesInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTuningSourcesInfoReply& operator=(GetTuningSourcesInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTuningSourcesInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTuningSourcesInfoReply* internal_default_instance() {
    return reinterpret_cast<const GetTuningSourcesInfoReply*>(
               &_GetTuningSourcesInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetTuningSourcesInfoReply& a, GetTuningSourcesInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTuningSourcesInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTuningSourcesInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTuningSourcesInfoReply* New() const final {
    return CreateMaybeMessage<GetTuningSourcesInfoReply>(nullptr);
  }

  GetTuningSourcesInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTuningSourcesInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTuningSourcesInfoReply& from);
  void MergeFrom(const GetTuningSourcesInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTuningSourcesInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetTuningSourcesInfoReply";
  }
  protected:
  explicit GetTuningSourcesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuningSourceInfoFieldNumber = 2,
    kActiveClientIDFieldNumber = 4,
    kActiveClientIPFieldNumber = 5,
    kErrorFieldNumber = 1,
    kSingleLmControlModeFieldNumber = 3,
  };
  // repeated .Network.DataSourceInfo tuningSourceInfo = 2;
  int tuningsourceinfo_size() const;
  private:
  int _internal_tuningsourceinfo_size() const;
  public:
  void clear_tuningsourceinfo();
  ::Network::DataSourceInfo* mutable_tuningsourceinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >*
      mutable_tuningsourceinfo();
  private:
  const ::Network::DataSourceInfo& _internal_tuningsourceinfo(int index) const;
  ::Network::DataSourceInfo* _internal_add_tuningsourceinfo();
  public:
  const ::Network::DataSourceInfo& tuningsourceinfo(int index) const;
  ::Network::DataSourceInfo* add_tuningsourceinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >&
      tuningsourceinfo() const;

  // optional string activeClientID = 4;
  bool has_activeclientid() const;
  private:
  bool _internal_has_activeclientid() const;
  public:
  void clear_activeclientid();
  const std::string& activeclientid() const;
  void set_activeclientid(const std::string& value);
  void set_activeclientid(std::string&& value);
  void set_activeclientid(const char* value);
  void set_activeclientid(const char* value, size_t size);
  std::string* mutable_activeclientid();
  std::string* release_activeclientid();
  void set_allocated_activeclientid(std::string* activeclientid);
  private:
  const std::string& _internal_activeclientid() const;
  void _internal_set_activeclientid(const std::string& value);
  std::string* _internal_mutable_activeclientid();
  public:

  // optional string activeClientIP = 5;
  bool has_activeclientip() const;
  private:
  bool _internal_has_activeclientip() const;
  public:
  void clear_activeclientip();
  const std::string& activeclientip() const;
  void set_activeclientip(const std::string& value);
  void set_activeclientip(std::string&& value);
  void set_activeclientip(const char* value);
  void set_activeclientip(const char* value, size_t size);
  std::string* mutable_activeclientip();
  std::string* release_activeclientip();
  void set_allocated_activeclientip(std::string* activeclientip);
  private:
  const std::string& _internal_activeclientip() const;
  void _internal_set_activeclientip(const std::string& value);
  std::string* _internal_mutable_activeclientip();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool singleLmControlMode = 3 [default = true];
  bool has_singlelmcontrolmode() const;
  private:
  bool _internal_has_singlelmcontrolmode() const;
  public:
  void clear_singlelmcontrolmode();
  bool singlelmcontrolmode() const;
  void set_singlelmcontrolmode(bool value);
  private:
  bool _internal_singlelmcontrolmode() const;
  void _internal_set_singlelmcontrolmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetTuningSourcesInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo > tuningsourceinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activeclientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activeclientip_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  bool singlelmcontrolmode_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetTuningSourcesStates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetTuningSourcesStates) */ {
 public:
  inline GetTuningSourcesStates() : GetTuningSourcesStates(nullptr) {}
  virtual ~GetTuningSourcesStates();
  explicit constexpr GetTuningSourcesStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTuningSourcesStates(const GetTuningSourcesStates& from);
  GetTuningSourcesStates(GetTuningSourcesStates&& from) noexcept
    : GetTuningSourcesStates() {
    *this = ::std::move(from);
  }

  inline GetTuningSourcesStates& operator=(const GetTuningSourcesStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTuningSourcesStates& operator=(GetTuningSourcesStates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTuningSourcesStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTuningSourcesStates* internal_default_instance() {
    return reinterpret_cast<const GetTuningSourcesStates*>(
               &_GetTuningSourcesStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetTuningSourcesStates& a, GetTuningSourcesStates& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTuningSourcesStates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTuningSourcesStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTuningSourcesStates* New() const final {
    return CreateMaybeMessage<GetTuningSourcesStates>(nullptr);
  }

  GetTuningSourcesStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTuningSourcesStates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTuningSourcesStates& from);
  void MergeFrom(const GetTuningSourcesStates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTuningSourcesStates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetTuningSourcesStates";
  }
  protected:
  explicit GetTuningSourcesStates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.GetTuningSourcesStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class SignalsAssociatedToTuningSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.SignalsAssociatedToTuningSource) */ {
 public:
  inline SignalsAssociatedToTuningSource() : SignalsAssociatedToTuningSource(nullptr) {}
  virtual ~SignalsAssociatedToTuningSource();
  explicit constexpr SignalsAssociatedToTuningSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalsAssociatedToTuningSource(const SignalsAssociatedToTuningSource& from);
  SignalsAssociatedToTuningSource(SignalsAssociatedToTuningSource&& from) noexcept
    : SignalsAssociatedToTuningSource() {
    *this = ::std::move(from);
  }

  inline SignalsAssociatedToTuningSource& operator=(const SignalsAssociatedToTuningSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalsAssociatedToTuningSource& operator=(SignalsAssociatedToTuningSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalsAssociatedToTuningSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalsAssociatedToTuningSource* internal_default_instance() {
    return reinterpret_cast<const SignalsAssociatedToTuningSource*>(
               &_SignalsAssociatedToTuningSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SignalsAssociatedToTuningSource& a, SignalsAssociatedToTuningSource& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalsAssociatedToTuningSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalsAssociatedToTuningSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalsAssociatedToTuningSource* New() const final {
    return CreateMaybeMessage<SignalsAssociatedToTuningSource>(nullptr);
  }

  SignalsAssociatedToTuningSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalsAssociatedToTuningSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalsAssociatedToTuningSource& from);
  void MergeFrom(const SignalsAssociatedToTuningSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalsAssociatedToTuningSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.SignalsAssociatedToTuningSource";
  }
  protected:
  explicit SignalsAssociatedToTuningSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashFieldNumber = 2,
    kSourceIDFieldNumber = 1,
  };
  // repeated uint64 signalHash = 2;
  int signalhash_size() const;
  private:
  int _internal_signalhash_size() const;
  public:
  void clear_signalhash();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhash(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_signalhash() const;
  void _internal_add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_signalhash();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash(int index) const;
  void set_signalhash(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      signalhash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_signalhash();

  // required uint64 sourceID = 1;
  bool has_sourceid() const;
  private:
  bool _internal_has_sourceid() const;
  public:
  void clear_sourceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceid() const;
  void set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sourceid() const;
  void _internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.SignalsAssociatedToTuningSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > signalhash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceid_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSourceFilling PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSourceFilling) */ {
 public:
  inline TuningSourceFilling() : TuningSourceFilling(nullptr) {}
  virtual ~TuningSourceFilling();
  explicit constexpr TuningSourceFilling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSourceFilling(const TuningSourceFilling& from);
  TuningSourceFilling(TuningSourceFilling&& from) noexcept
    : TuningSourceFilling() {
    *this = ::std::move(from);
  }

  inline TuningSourceFilling& operator=(const TuningSourceFilling& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSourceFilling& operator=(TuningSourceFilling&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSourceFilling& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSourceFilling* internal_default_instance() {
    return reinterpret_cast<const TuningSourceFilling*>(
               &_TuningSourceFilling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TuningSourceFilling& a, TuningSourceFilling& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSourceFilling* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSourceFilling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSourceFilling* New() const final {
    return CreateMaybeMessage<TuningSourceFilling>(nullptr);
  }

  TuningSourceFilling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSourceFilling>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSourceFilling& from);
  void MergeFrom(const TuningSourceFilling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSourceFilling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSourceFilling";
  }
  protected:
  explicit TuningSourceFilling(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsPerSourceFieldNumber = 2,
    kSignalCountFieldNumber = 1,
  };
  // repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
  int signalspersource_size() const;
  private:
  int _internal_signalspersource_size() const;
  public:
  void clear_signalspersource();
  ::Network::SignalsAssociatedToTuningSource* mutable_signalspersource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::SignalsAssociatedToTuningSource >*
      mutable_signalspersource();
  private:
  const ::Network::SignalsAssociatedToTuningSource& _internal_signalspersource(int index) const;
  ::Network::SignalsAssociatedToTuningSource* _internal_add_signalspersource();
  public:
  const ::Network::SignalsAssociatedToTuningSource& signalspersource(int index) const;
  ::Network::SignalsAssociatedToTuningSource* add_signalspersource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::SignalsAssociatedToTuningSource >&
      signalspersource() const;

  // required uint64 signalCount = 1;
  bool has_signalcount() const;
  private:
  bool _internal_has_signalcount() const;
  public:
  void clear_signalcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 signalcount() const;
  void set_signalcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalcount() const;
  void _internal_set_signalcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSourceFilling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::SignalsAssociatedToTuningSource > signalspersource_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signalcount_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSourceState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSourceState) */ {
 public:
  inline TuningSourceState() : TuningSourceState(nullptr) {}
  virtual ~TuningSourceState();
  explicit constexpr TuningSourceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSourceState(const TuningSourceState& from);
  TuningSourceState(TuningSourceState&& from) noexcept
    : TuningSourceState() {
    *this = ::std::move(from);
  }

  inline TuningSourceState& operator=(const TuningSourceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSourceState& operator=(TuningSourceState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSourceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSourceState* internal_default_instance() {
    return reinterpret_cast<const TuningSourceState*>(
               &_TuningSourceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TuningSourceState& a, TuningSourceState& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSourceState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSourceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSourceState* New() const final {
    return CreateMaybeMessage<TuningSourceState>(nullptr);
  }

  TuningSourceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSourceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSourceState& from);
  void MergeFrom(const TuningSourceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSourceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSourceState";
  }
  protected:
  explicit TuningSourceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIDFieldNumber = 1,
    kRequestCountFieldNumber = 3,
    kReplyCountFieldNumber = 4,
    kErrUntimelyReplayFieldNumber = 6,
    kErrSentFieldNumber = 7,
    kErrPartialSentFieldNumber = 8,
    kErrReplySizeFieldNumber = 9,
    kErrNoReplyFieldNumber = 10,
    kErrRupProtocolVersionFieldNumber = 11,
    kErrRupFrameSizeFieldNumber = 12,
    kErrRupNonTuningDataFieldNumber = 13,
    kErrRupModuleTypeFieldNumber = 14,
    kErrRupFramesQuantityFieldNumber = 15,
    kErrRupFrameNumberFieldNumber = 16,
    kErrFotipProtocolVersionFieldNumber = 17,
    kErrFotipUniqueIDFieldNumber = 18,
    kErrFotipLmNumberFieldNumber = 19,
    kErrFotipSubsystemCodeFieldNumber = 20,
    kErrFotipOperationCodeFieldNumber = 21,
    kErrFotipFrameSizeFieldNumber = 22,
    kErrFotipRomSizeFieldNumber = 23,
    kErrFotipRomFrameSizeFieldNumber = 24,
    kFotipFlagBoundsCheckSuccessFieldNumber = 25,
    kFotipFlagWriteSuccessFieldNumber = 26,
    kFotipFlagDataTypeErrFieldNumber = 27,
    kCommandQueueSizeFieldNumber = 5,
    kIsReplyFieldNumber = 2,
    kControlIsActiveFieldNumber = 42,
    kSetSORFieldNumber = 43,
    kHasUnappliedParamsFieldNumber = 44,
    kFotipFlagOpCodeErrFieldNumber = 28,
    kFotipFlagStartAddrErrFieldNumber = 29,
    kFotipFlagRomSizeErrFieldNumber = 30,
    kFotipFlagRomFrameSizeErrFieldNumber = 31,
    kFotipFlagFrameSizeErrFieldNumber = 32,
    kFotipFlagProtocolVersionErrFieldNumber = 33,
    kFotipFlagSubsystemKeyErrFieldNumber = 34,
    kFotipFlagUniueIDErrFieldNumber = 35,
    kFotipFlagOffsetErrFieldNumber = 36,
    kFotipFlagApplySuccessFieldNumber = 37,
    kFotipFlagSetSORFieldNumber = 38,
    kErrAnalogLowBoundCheckFieldNumber = 39,
    kErrAnalogHighBoundCheckFieldNumber = 40,
    kErrRupCRCFieldNumber = 41,
    kFotipFlagWritingDisabledFieldNumber = 46,
    kErrTuningFrameUpdateFieldNumber = 47,
    kWritingDisabledFieldNumber = 45,
  };
  // optional uint64 sourceID = 1 [default = 0];
  bool has_sourceid() const;
  private:
  bool _internal_has_sourceid() const;
  public:
  void clear_sourceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceid() const;
  void set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sourceid() const;
  void _internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 requestCount = 3 [default = 0];
  bool has_requestcount() const;
  private:
  bool _internal_has_requestcount() const;
  public:
  void clear_requestcount();
  ::PROTOBUF_NAMESPACE_ID::int64 requestcount() const;
  void set_requestcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestcount() const;
  void _internal_set_requestcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 replyCount = 4 [default = 0];
  bool has_replycount() const;
  private:
  bool _internal_has_replycount() const;
  public:
  void clear_replycount();
  ::PROTOBUF_NAMESPACE_ID::int64 replycount() const;
  void set_replycount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_replycount() const;
  void _internal_set_replycount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errUntimelyReplay = 6 [default = 0];
  bool has_erruntimelyreplay() const;
  private:
  bool _internal_has_erruntimelyreplay() const;
  public:
  void clear_erruntimelyreplay();
  ::PROTOBUF_NAMESPACE_ID::int64 erruntimelyreplay() const;
  void set_erruntimelyreplay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_erruntimelyreplay() const;
  void _internal_set_erruntimelyreplay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errSent = 7 [default = 0];
  bool has_errsent() const;
  private:
  bool _internal_has_errsent() const;
  public:
  void clear_errsent();
  ::PROTOBUF_NAMESPACE_ID::int64 errsent() const;
  void set_errsent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errsent() const;
  void _internal_set_errsent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errPartialSent = 8 [default = 0];
  bool has_errpartialsent() const;
  private:
  bool _internal_has_errpartialsent() const;
  public:
  void clear_errpartialsent();
  ::PROTOBUF_NAMESPACE_ID::int64 errpartialsent() const;
  void set_errpartialsent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errpartialsent() const;
  void _internal_set_errpartialsent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errReplySize = 9 [default = 0];
  bool has_errreplysize() const;
  private:
  bool _internal_has_errreplysize() const;
  public:
  void clear_errreplysize();
  ::PROTOBUF_NAMESPACE_ID::int64 errreplysize() const;
  void set_errreplysize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errreplysize() const;
  void _internal_set_errreplysize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errNoReply = 10 [default = 0];
  bool has_errnoreply() const;
  private:
  bool _internal_has_errnoreply() const;
  public:
  void clear_errnoreply();
  ::PROTOBUF_NAMESPACE_ID::int64 errnoreply() const;
  void set_errnoreply(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errnoreply() const;
  void _internal_set_errnoreply(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupProtocolVersion = 11 [default = 0];
  bool has_errrupprotocolversion() const;
  private:
  bool _internal_has_errrupprotocolversion() const;
  public:
  void clear_errrupprotocolversion();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupprotocolversion() const;
  void set_errrupprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupprotocolversion() const;
  void _internal_set_errrupprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupFrameSize = 12 [default = 0];
  bool has_errrupframesize() const;
  private:
  bool _internal_has_errrupframesize() const;
  public:
  void clear_errrupframesize();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframesize() const;
  void set_errrupframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupframesize() const;
  void _internal_set_errrupframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupNonTuningData = 13 [default = 0];
  bool has_errrupnontuningdata() const;
  private:
  bool _internal_has_errrupnontuningdata() const;
  public:
  void clear_errrupnontuningdata();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupnontuningdata() const;
  void set_errrupnontuningdata(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupnontuningdata() const;
  void _internal_set_errrupnontuningdata(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupModuleType = 14 [default = 0];
  bool has_errrupmoduletype() const;
  private:
  bool _internal_has_errrupmoduletype() const;
  public:
  void clear_errrupmoduletype();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupmoduletype() const;
  void set_errrupmoduletype(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupmoduletype() const;
  void _internal_set_errrupmoduletype(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupFramesQuantity = 15 [default = 0];
  bool has_errrupframesquantity() const;
  private:
  bool _internal_has_errrupframesquantity() const;
  public:
  void clear_errrupframesquantity();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframesquantity() const;
  void set_errrupframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupframesquantity() const;
  void _internal_set_errrupframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupFrameNumber = 16 [default = 0];
  bool has_errrupframenumber() const;
  private:
  bool _internal_has_errrupframenumber() const;
  public:
  void clear_errrupframenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframenumber() const;
  void set_errrupframenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupframenumber() const;
  void _internal_set_errrupframenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipProtocolVersion = 17 [default = 0];
  bool has_errfotipprotocolversion() const;
  private:
  bool _internal_has_errfotipprotocolversion() const;
  public:
  void clear_errfotipprotocolversion();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipprotocolversion() const;
  void set_errfotipprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipprotocolversion() const;
  void _internal_set_errfotipprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipUniqueID = 18 [default = 0];
  bool has_errfotipuniqueid() const;
  private:
  bool _internal_has_errfotipuniqueid() const;
  public:
  void clear_errfotipuniqueid();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipuniqueid() const;
  void set_errfotipuniqueid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipuniqueid() const;
  void _internal_set_errfotipuniqueid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipLmNumber = 19 [default = 0];
  bool has_errfotiplmnumber() const;
  private:
  bool _internal_has_errfotiplmnumber() const;
  public:
  void clear_errfotiplmnumber();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotiplmnumber() const;
  void set_errfotiplmnumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotiplmnumber() const;
  void _internal_set_errfotiplmnumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipSubsystemCode = 20 [default = 0];
  bool has_errfotipsubsystemcode() const;
  private:
  bool _internal_has_errfotipsubsystemcode() const;
  public:
  void clear_errfotipsubsystemcode();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipsubsystemcode() const;
  void set_errfotipsubsystemcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipsubsystemcode() const;
  void _internal_set_errfotipsubsystemcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipOperationCode = 21 [default = 0];
  bool has_errfotipoperationcode() const;
  private:
  bool _internal_has_errfotipoperationcode() const;
  public:
  void clear_errfotipoperationcode();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipoperationcode() const;
  void set_errfotipoperationcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipoperationcode() const;
  void _internal_set_errfotipoperationcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipFrameSize = 22 [default = 0];
  bool has_errfotipframesize() const;
  private:
  bool _internal_has_errfotipframesize() const;
  public:
  void clear_errfotipframesize();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipframesize() const;
  void set_errfotipframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipframesize() const;
  void _internal_set_errfotipframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipRomSize = 23 [default = 0];
  bool has_errfotipromsize() const;
  private:
  bool _internal_has_errfotipromsize() const;
  public:
  void clear_errfotipromsize();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipromsize() const;
  void set_errfotipromsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipromsize() const;
  void _internal_set_errfotipromsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errFotipRomFrameSize = 24 [default = 0];
  bool has_errfotipromframesize() const;
  private:
  bool _internal_has_errfotipromframesize() const;
  public:
  void clear_errfotipromframesize();
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipromframesize() const;
  void set_errfotipromframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errfotipromframesize() const;
  void _internal_set_errfotipromframesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
  bool has_fotipflagboundschecksuccess() const;
  private:
  bool _internal_has_fotipflagboundschecksuccess() const;
  public:
  void clear_fotipflagboundschecksuccess();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagboundschecksuccess() const;
  void set_fotipflagboundschecksuccess(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagboundschecksuccess() const;
  void _internal_set_fotipflagboundschecksuccess(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagWriteSuccess = 26 [default = 0];
  bool has_fotipflagwritesuccess() const;
  private:
  bool _internal_has_fotipflagwritesuccess() const;
  public:
  void clear_fotipflagwritesuccess();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagwritesuccess() const;
  void set_fotipflagwritesuccess(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagwritesuccess() const;
  void _internal_set_fotipflagwritesuccess(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagDataTypeErr = 27 [default = 0];
  bool has_fotipflagdatatypeerr() const;
  private:
  bool _internal_has_fotipflagdatatypeerr() const;
  public:
  void clear_fotipflagdatatypeerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagdatatypeerr() const;
  void set_fotipflagdatatypeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagdatatypeerr() const;
  void _internal_set_fotipflagdatatypeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 commandQueueSize = 5 [default = 0];
  bool has_commandqueuesize() const;
  private:
  bool _internal_has_commandqueuesize() const;
  public:
  void clear_commandqueuesize();
  ::PROTOBUF_NAMESPACE_ID::int32 commandqueuesize() const;
  void set_commandqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commandqueuesize() const;
  void _internal_set_commandqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool isReply = 2 [default = false];
  bool has_isreply() const;
  private:
  bool _internal_has_isreply() const;
  public:
  void clear_isreply();
  bool isreply() const;
  void set_isreply(bool value);
  private:
  bool _internal_isreply() const;
  void _internal_set_isreply(bool value);
  public:

  // optional bool controlIsActive = 42 [default = false];
  bool has_controlisactive() const;
  private:
  bool _internal_has_controlisactive() const;
  public:
  void clear_controlisactive();
  bool controlisactive() const;
  void set_controlisactive(bool value);
  private:
  bool _internal_controlisactive() const;
  void _internal_set_controlisactive(bool value);
  public:

  // optional bool setSOR = 43 [default = false];
  bool has_setsor() const;
  private:
  bool _internal_has_setsor() const;
  public:
  void clear_setsor();
  bool setsor() const;
  void set_setsor(bool value);
  private:
  bool _internal_setsor() const;
  void _internal_set_setsor(bool value);
  public:

  // optional bool hasUnappliedParams = 44 [default = false];
  bool has_hasunappliedparams() const;
  private:
  bool _internal_has_hasunappliedparams() const;
  public:
  void clear_hasunappliedparams();
  bool hasunappliedparams() const;
  void set_hasunappliedparams(bool value);
  private:
  bool _internal_hasunappliedparams() const;
  void _internal_set_hasunappliedparams(bool value);
  public:

  // optional int64 fotipFlagOpCodeErr = 28 [default = 0];
  bool has_fotipflagopcodeerr() const;
  private:
  bool _internal_has_fotipflagopcodeerr() const;
  public:
  void clear_fotipflagopcodeerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagopcodeerr() const;
  void set_fotipflagopcodeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagopcodeerr() const;
  void _internal_set_fotipflagopcodeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagStartAddrErr = 29 [default = 0];
  bool has_fotipflagstartaddrerr() const;
  private:
  bool _internal_has_fotipflagstartaddrerr() const;
  public:
  void clear_fotipflagstartaddrerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagstartaddrerr() const;
  void set_fotipflagstartaddrerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagstartaddrerr() const;
  void _internal_set_fotipflagstartaddrerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagRomSizeErr = 30 [default = 0];
  bool has_fotipflagromsizeerr() const;
  private:
  bool _internal_has_fotipflagromsizeerr() const;
  public:
  void clear_fotipflagromsizeerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagromsizeerr() const;
  void set_fotipflagromsizeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagromsizeerr() const;
  void _internal_set_fotipflagromsizeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
  bool has_fotipflagromframesizeerr() const;
  private:
  bool _internal_has_fotipflagromframesizeerr() const;
  public:
  void clear_fotipflagromframesizeerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagromframesizeerr() const;
  void set_fotipflagromframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagromframesizeerr() const;
  void _internal_set_fotipflagromframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
  bool has_fotipflagframesizeerr() const;
  private:
  bool _internal_has_fotipflagframesizeerr() const;
  public:
  void clear_fotipflagframesizeerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagframesizeerr() const;
  void set_fotipflagframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagframesizeerr() const;
  void _internal_set_fotipflagframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
  bool has_fotipflagprotocolversionerr() const;
  private:
  bool _internal_has_fotipflagprotocolversionerr() const;
  public:
  void clear_fotipflagprotocolversionerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagprotocolversionerr() const;
  void set_fotipflagprotocolversionerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagprotocolversionerr() const;
  void _internal_set_fotipflagprotocolversionerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
  bool has_fotipflagsubsystemkeyerr() const;
  private:
  bool _internal_has_fotipflagsubsystemkeyerr() const;
  public:
  void clear_fotipflagsubsystemkeyerr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagsubsystemkeyerr() const;
  void set_fotipflagsubsystemkeyerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagsubsystemkeyerr() const;
  void _internal_set_fotipflagsubsystemkeyerr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagUniueIDErr = 35 [default = 0];
  bool has_fotipflaguniueiderr() const;
  private:
  bool _internal_has_fotipflaguniueiderr() const;
  public:
  void clear_fotipflaguniueiderr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflaguniueiderr() const;
  void set_fotipflaguniueiderr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflaguniueiderr() const;
  void _internal_set_fotipflaguniueiderr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagOffsetErr = 36 [default = 0];
  bool has_fotipflagoffseterr() const;
  private:
  bool _internal_has_fotipflagoffseterr() const;
  public:
  void clear_fotipflagoffseterr();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagoffseterr() const;
  void set_fotipflagoffseterr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagoffseterr() const;
  void _internal_set_fotipflagoffseterr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagApplySuccess = 37 [default = 0];
  bool has_fotipflagapplysuccess() const;
  private:
  bool _internal_has_fotipflagapplysuccess() const;
  public:
  void clear_fotipflagapplysuccess();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagapplysuccess() const;
  void set_fotipflagapplysuccess(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagapplysuccess() const;
  void _internal_set_fotipflagapplysuccess(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagSetSOR = 38 [default = 0];
  bool has_fotipflagsetsor() const;
  private:
  bool _internal_has_fotipflagsetsor() const;
  public:
  void clear_fotipflagsetsor();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagsetsor() const;
  void set_fotipflagsetsor(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagsetsor() const;
  void _internal_set_fotipflagsetsor(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errAnalogLowBoundCheck = 39 [default = 0];
  bool has_erranaloglowboundcheck() const;
  private:
  bool _internal_has_erranaloglowboundcheck() const;
  public:
  void clear_erranaloglowboundcheck();
  ::PROTOBUF_NAMESPACE_ID::int64 erranaloglowboundcheck() const;
  void set_erranaloglowboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_erranaloglowboundcheck() const;
  void _internal_set_erranaloglowboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errAnalogHighBoundCheck = 40 [default = 0];
  bool has_erranaloghighboundcheck() const;
  private:
  bool _internal_has_erranaloghighboundcheck() const;
  public:
  void clear_erranaloghighboundcheck();
  ::PROTOBUF_NAMESPACE_ID::int64 erranaloghighboundcheck() const;
  void set_erranaloghighboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_erranaloghighboundcheck() const;
  void _internal_set_erranaloghighboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errRupCRC = 41 [default = 0];
  bool has_errrupcrc() const;
  private:
  bool _internal_has_errrupcrc() const;
  public:
  void clear_errrupcrc();
  ::PROTOBUF_NAMESPACE_ID::int64 errrupcrc() const;
  void set_errrupcrc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errrupcrc() const;
  void _internal_set_errrupcrc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 fotipFlagWritingDisabled = 46 [default = 0];
  bool has_fotipflagwritingdisabled() const;
  private:
  bool _internal_has_fotipflagwritingdisabled() const;
  public:
  void clear_fotipflagwritingdisabled();
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagwritingdisabled() const;
  void set_fotipflagwritingdisabled(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fotipflagwritingdisabled() const;
  void _internal_set_fotipflagwritingdisabled(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 errTuningFrameUpdate = 47 [default = 0];
  bool has_errtuningframeupdate() const;
  private:
  bool _internal_has_errtuningframeupdate() const;
  public:
  void clear_errtuningframeupdate();
  ::PROTOBUF_NAMESPACE_ID::int64 errtuningframeupdate() const;
  void set_errtuningframeupdate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errtuningframeupdate() const;
  void _internal_set_errtuningframeupdate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool writingDisabled = 45 [default = false];
  bool has_writingdisabled() const;
  private:
  bool _internal_has_writingdisabled() const;
  public:
  void clear_writingdisabled();
  bool writingdisabled() const;
  void set_writingdisabled(bool value);
  private:
  bool _internal_writingdisabled() const;
  void _internal_set_writingdisabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSourceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceid_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 replycount_;
  ::PROTOBUF_NAMESPACE_ID::int64 erruntimelyreplay_;
  ::PROTOBUF_NAMESPACE_ID::int64 errsent_;
  ::PROTOBUF_NAMESPACE_ID::int64 errpartialsent_;
  ::PROTOBUF_NAMESPACE_ID::int64 errreplysize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errnoreply_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupprotocolversion_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupnontuningdata_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupmoduletype_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframesquantity_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupframenumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipprotocolversion_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipuniqueid_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotiplmnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipsubsystemcode_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipoperationcode_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipframesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipromsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 errfotipromframesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagboundschecksuccess_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagwritesuccess_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagdatatypeerr_;
  ::PROTOBUF_NAMESPACE_ID::int32 commandqueuesize_;
  bool isreply_;
  bool controlisactive_;
  bool setsor_;
  bool hasunappliedparams_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagopcodeerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagstartaddrerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagromsizeerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagromframesizeerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagframesizeerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagprotocolversionerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagsubsystemkeyerr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflaguniueiderr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagoffseterr_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagapplysuccess_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagsetsor_;
  ::PROTOBUF_NAMESPACE_ID::int64 erranaloglowboundcheck_;
  ::PROTOBUF_NAMESPACE_ID::int64 erranaloghighboundcheck_;
  ::PROTOBUF_NAMESPACE_ID::int64 errrupcrc_;
  ::PROTOBUF_NAMESPACE_ID::int64 fotipflagwritingdisabled_;
  ::PROTOBUF_NAMESPACE_ID::int64 errtuningframeupdate_;
  bool writingdisabled_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetTuningSourcesStatesReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetTuningSourcesStatesReply) */ {
 public:
  inline GetTuningSourcesStatesReply() : GetTuningSourcesStatesReply(nullptr) {}
  virtual ~GetTuningSourcesStatesReply();
  explicit constexpr GetTuningSourcesStatesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTuningSourcesStatesReply(const GetTuningSourcesStatesReply& from);
  GetTuningSourcesStatesReply(GetTuningSourcesStatesReply&& from) noexcept
    : GetTuningSourcesStatesReply() {
    *this = ::std::move(from);
  }

  inline GetTuningSourcesStatesReply& operator=(const GetTuningSourcesStatesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTuningSourcesStatesReply& operator=(GetTuningSourcesStatesReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTuningSourcesStatesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTuningSourcesStatesReply* internal_default_instance() {
    return reinterpret_cast<const GetTuningSourcesStatesReply*>(
               &_GetTuningSourcesStatesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetTuningSourcesStatesReply& a, GetTuningSourcesStatesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTuningSourcesStatesReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTuningSourcesStatesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTuningSourcesStatesReply* New() const final {
    return CreateMaybeMessage<GetTuningSourcesStatesReply>(nullptr);
  }

  GetTuningSourcesStatesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTuningSourcesStatesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTuningSourcesStatesReply& from);
  void MergeFrom(const GetTuningSourcesStatesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTuningSourcesStatesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetTuningSourcesStatesReply";
  }
  protected:
  explicit GetTuningSourcesStatesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuningSourcesStateFieldNumber = 2,
    kActiveClientIDFieldNumber = 4,
    kActiveClientIPFieldNumber = 5,
    kErrorFieldNumber = 1,
    kSingleLmControlModeFieldNumber = 3,
  };
  // repeated .Network.TuningSourceState tuningSourcesState = 2;
  int tuningsourcesstate_size() const;
  private:
  int _internal_tuningsourcesstate_size() const;
  public:
  void clear_tuningsourcesstate();
  ::Network::TuningSourceState* mutable_tuningsourcesstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSourceState >*
      mutable_tuningsourcesstate();
  private:
  const ::Network::TuningSourceState& _internal_tuningsourcesstate(int index) const;
  ::Network::TuningSourceState* _internal_add_tuningsourcesstate();
  public:
  const ::Network::TuningSourceState& tuningsourcesstate(int index) const;
  ::Network::TuningSourceState* add_tuningsourcesstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSourceState >&
      tuningsourcesstate() const;

  // optional string activeClientID = 4;
  bool has_activeclientid() const;
  private:
  bool _internal_has_activeclientid() const;
  public:
  void clear_activeclientid();
  const std::string& activeclientid() const;
  void set_activeclientid(const std::string& value);
  void set_activeclientid(std::string&& value);
  void set_activeclientid(const char* value);
  void set_activeclientid(const char* value, size_t size);
  std::string* mutable_activeclientid();
  std::string* release_activeclientid();
  void set_allocated_activeclientid(std::string* activeclientid);
  private:
  const std::string& _internal_activeclientid() const;
  void _internal_set_activeclientid(const std::string& value);
  std::string* _internal_mutable_activeclientid();
  public:

  // optional string activeClientIP = 5;
  bool has_activeclientip() const;
  private:
  bool _internal_has_activeclientip() const;
  public:
  void clear_activeclientip();
  const std::string& activeclientip() const;
  void set_activeclientip(const std::string& value);
  void set_activeclientip(std::string&& value);
  void set_activeclientip(const char* value);
  void set_activeclientip(const char* value, size_t size);
  std::string* mutable_activeclientip();
  std::string* release_activeclientip();
  void set_allocated_activeclientip(std::string* activeclientip);
  private:
  const std::string& _internal_activeclientip() const;
  void _internal_set_activeclientip(const std::string& value);
  std::string* _internal_mutable_activeclientip();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool singleLmControlMode = 3 [default = true];
  bool has_singlelmcontrolmode() const;
  private:
  bool _internal_has_singlelmcontrolmode() const;
  public:
  void clear_singlelmcontrolmode();
  bool singlelmcontrolmode() const;
  void set_singlelmcontrolmode(bool value);
  private:
  bool _internal_singlelmcontrolmode() const;
  void _internal_set_singlelmcontrolmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetTuningSourcesStatesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSourceState > tuningsourcesstate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activeclientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activeclientip_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  bool singlelmcontrolmode_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ChangeConrolledTuningSourceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ChangeConrolledTuningSourceRequest) */ {
 public:
  inline ChangeConrolledTuningSourceRequest() : ChangeConrolledTuningSourceRequest(nullptr) {}
  virtual ~ChangeConrolledTuningSourceRequest();
  explicit constexpr ChangeConrolledTuningSourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeConrolledTuningSourceRequest(const ChangeConrolledTuningSourceRequest& from);
  ChangeConrolledTuningSourceRequest(ChangeConrolledTuningSourceRequest&& from) noexcept
    : ChangeConrolledTuningSourceRequest() {
    *this = ::std::move(from);
  }

  inline ChangeConrolledTuningSourceRequest& operator=(const ChangeConrolledTuningSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeConrolledTuningSourceRequest& operator=(ChangeConrolledTuningSourceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeConrolledTuningSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeConrolledTuningSourceRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeConrolledTuningSourceRequest*>(
               &_ChangeConrolledTuningSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ChangeConrolledTuningSourceRequest& a, ChangeConrolledTuningSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeConrolledTuningSourceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeConrolledTuningSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeConrolledTuningSourceRequest* New() const final {
    return CreateMaybeMessage<ChangeConrolledTuningSourceRequest>(nullptr);
  }

  ChangeConrolledTuningSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeConrolledTuningSourceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeConrolledTuningSourceRequest& from);
  void MergeFrom(const ChangeConrolledTuningSourceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeConrolledTuningSourceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ChangeConrolledTuningSourceRequest";
  }
  protected:
  explicit ChangeConrolledTuningSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuningSourceEquipmentIDFieldNumber = 2,
    kTakeControlFieldNumber = 1,
    kActivateControlFieldNumber = 3,
  };
  // optional string tuningSourceEquipmentID = 2;
  bool has_tuningsourceequipmentid() const;
  private:
  bool _internal_has_tuningsourceequipmentid() const;
  public:
  void clear_tuningsourceequipmentid();
  const std::string& tuningsourceequipmentid() const;
  void set_tuningsourceequipmentid(const std::string& value);
  void set_tuningsourceequipmentid(std::string&& value);
  void set_tuningsourceequipmentid(const char* value);
  void set_tuningsourceequipmentid(const char* value, size_t size);
  std::string* mutable_tuningsourceequipmentid();
  std::string* release_tuningsourceequipmentid();
  void set_allocated_tuningsourceequipmentid(std::string* tuningsourceequipmentid);
  private:
  const std::string& _internal_tuningsourceequipmentid() const;
  void _internal_set_tuningsourceequipmentid(const std::string& value);
  std::string* _internal_mutable_tuningsourceequipmentid();
  public:

  // optional bool takeControl = 1;
  bool has_takecontrol() const;
  private:
  bool _internal_has_takecontrol() const;
  public:
  void clear_takecontrol();
  bool takecontrol() const;
  void set_takecontrol(bool value);
  private:
  bool _internal_takecontrol() const;
  void _internal_set_takecontrol(bool value);
  public:

  // optional bool activateControl = 3 [default = false];
  bool has_activatecontrol() const;
  private:
  bool _internal_has_activatecontrol() const;
  public:
  void clear_activatecontrol();
  bool activatecontrol() const;
  void set_activatecontrol(bool value);
  private:
  bool _internal_activatecontrol() const;
  void _internal_set_activatecontrol(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.ChangeConrolledTuningSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tuningsourceequipmentid_;
  bool takecontrol_;
  bool activatecontrol_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ChangeConrolledTuningSourceReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.ChangeConrolledTuningSourceReply) */ {
 public:
  inline ChangeConrolledTuningSourceReply() : ChangeConrolledTuningSourceReply(nullptr) {}
  virtual ~ChangeConrolledTuningSourceReply();
  explicit constexpr ChangeConrolledTuningSourceReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeConrolledTuningSourceReply(const ChangeConrolledTuningSourceReply& from);
  ChangeConrolledTuningSourceReply(ChangeConrolledTuningSourceReply&& from) noexcept
    : ChangeConrolledTuningSourceReply() {
    *this = ::std::move(from);
  }

  inline ChangeConrolledTuningSourceReply& operator=(const ChangeConrolledTuningSourceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeConrolledTuningSourceReply& operator=(ChangeConrolledTuningSourceReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeConrolledTuningSourceReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeConrolledTuningSourceReply* internal_default_instance() {
    return reinterpret_cast<const ChangeConrolledTuningSourceReply*>(
               &_ChangeConrolledTuningSourceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ChangeConrolledTuningSourceReply& a, ChangeConrolledTuningSourceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeConrolledTuningSourceReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeConrolledTuningSourceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeConrolledTuningSourceReply* New() const final {
    return CreateMaybeMessage<ChangeConrolledTuningSourceReply>(nullptr);
  }

  ChangeConrolledTuningSourceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeConrolledTuningSourceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeConrolledTuningSourceReply& from);
  void MergeFrom(const ChangeConrolledTuningSourceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeConrolledTuningSourceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.ChangeConrolledTuningSourceReply";
  }
  protected:
  explicit ChangeConrolledTuningSourceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlledTuningSourceEquipmentIDFieldNumber = 2,
    kErrorFieldNumber = 1,
    kControlIsActiveFieldNumber = 3,
  };
  // optional string controlledTuningSourceEquipmentID = 2;
  bool has_controlledtuningsourceequipmentid() const;
  private:
  bool _internal_has_controlledtuningsourceequipmentid() const;
  public:
  void clear_controlledtuningsourceequipmentid();
  const std::string& controlledtuningsourceequipmentid() const;
  void set_controlledtuningsourceequipmentid(const std::string& value);
  void set_controlledtuningsourceequipmentid(std::string&& value);
  void set_controlledtuningsourceequipmentid(const char* value);
  void set_controlledtuningsourceequipmentid(const char* value, size_t size);
  std::string* mutable_controlledtuningsourceequipmentid();
  std::string* release_controlledtuningsourceequipmentid();
  void set_allocated_controlledtuningsourceequipmentid(std::string* controlledtuningsourceequipmentid);
  private:
  const std::string& _internal_controlledtuningsourceequipmentid() const;
  void _internal_set_controlledtuningsourceequipmentid(const std::string& value);
  std::string* _internal_mutable_controlledtuningsourceequipmentid();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool controlIsActive = 3 [default = false];
  bool has_controlisactive() const;
  private:
  bool _internal_has_controlisactive() const;
  public:
  void clear_controlisactive();
  bool controlisactive() const;
  void set_controlisactive(bool value);
  private:
  bool _internal_controlisactive() const;
  void _internal_set_controlisactive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.ChangeConrolledTuningSourceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controlledtuningsourceequipmentid_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  bool controlisactive_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalsRead PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalsRead) */ {
 public:
  inline TuningSignalsRead() : TuningSignalsRead(nullptr) {}
  virtual ~TuningSignalsRead();
  explicit constexpr TuningSignalsRead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalsRead(const TuningSignalsRead& from);
  TuningSignalsRead(TuningSignalsRead&& from) noexcept
    : TuningSignalsRead() {
    *this = ::std::move(from);
  }

  inline TuningSignalsRead& operator=(const TuningSignalsRead& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalsRead& operator=(TuningSignalsRead&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalsRead& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalsRead* internal_default_instance() {
    return reinterpret_cast<const TuningSignalsRead*>(
               &_TuningSignalsRead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TuningSignalsRead& a, TuningSignalsRead& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalsRead* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalsRead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalsRead* New() const final {
    return CreateMaybeMessage<TuningSignalsRead>(nullptr);
  }

  TuningSignalsRead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalsRead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalsRead& from);
  void MergeFrom(const TuningSignalsRead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalsRead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalsRead";
  }
  protected:
  explicit TuningSignalsRead(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashFieldNumber = 2,
  };
  // repeated uint64 signalHash = 2;
  int signalhash_size() const;
  private:
  int _internal_signalhash_size() const;
  public:
  void clear_signalhash();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhash(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_signalhash() const;
  void _internal_add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_signalhash();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash(int index) const;
  void set_signalhash(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      signalhash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_signalhash();

  // @@protoc_insertion_point(class_scope:Network.TuningSignalsRead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > signalhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalState) */ {
 public:
  inline TuningSignalState() : TuningSignalState(nullptr) {}
  virtual ~TuningSignalState();
  explicit constexpr TuningSignalState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalState(const TuningSignalState& from);
  TuningSignalState(TuningSignalState&& from) noexcept
    : TuningSignalState() {
    *this = ::std::move(from);
  }

  inline TuningSignalState& operator=(const TuningSignalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalState& operator=(TuningSignalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalState* internal_default_instance() {
    return reinterpret_cast<const TuningSignalState*>(
               &_TuningSignalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TuningSignalState& a, TuningSignalState& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalState* New() const final {
    return CreateMaybeMessage<TuningSignalState>(nullptr);
  }

  TuningSignalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalState& from);
  void MergeFrom(const TuningSignalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalState";
  }
  protected:
  explicit TuningSignalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kReadLowBoundFieldNumber = 5,
    kReadHighBoundFieldNumber = 6,
    kSignalHashFieldNumber = 1,
    kErrorFieldNumber = 2,
    kWriteErrorCodeFieldNumber = 8,
    kWriteClientFieldNumber = 9,
    kSuccessfulReadTimeFieldNumber = 10,
    kWriteRequestTimeFieldNumber = 11,
    kValidFieldNumber = 3,
    kWriteInProgressFieldNumber = 7,
    kSetSORFieldNumber = 14,
    kWritingDisabledFieldNumber = 15,
    kTuningDefaultFieldNumber = 16,
    kSuccessfulWriteTimeFieldNumber = 12,
    kUnsuccessfulWriteTimeFieldNumber = 13,
  };
  // optional .Proto.TuningValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Proto::TuningValue& value() const;
  ::Proto::TuningValue* release_value();
  ::Proto::TuningValue* mutable_value();
  void set_allocated_value(::Proto::TuningValue* value);
  private:
  const ::Proto::TuningValue& _internal_value() const;
  ::Proto::TuningValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Proto::TuningValue* value);
  ::Proto::TuningValue* unsafe_arena_release_value();

  // optional .Proto.TuningValue readLowBound = 5;
  bool has_readlowbound() const;
  private:
  bool _internal_has_readlowbound() const;
  public:
  void clear_readlowbound();
  const ::Proto::TuningValue& readlowbound() const;
  ::Proto::TuningValue* release_readlowbound();
  ::Proto::TuningValue* mutable_readlowbound();
  void set_allocated_readlowbound(::Proto::TuningValue* readlowbound);
  private:
  const ::Proto::TuningValue& _internal_readlowbound() const;
  ::Proto::TuningValue* _internal_mutable_readlowbound();
  public:
  void unsafe_arena_set_allocated_readlowbound(
      ::Proto::TuningValue* readlowbound);
  ::Proto::TuningValue* unsafe_arena_release_readlowbound();

  // optional .Proto.TuningValue readHighBound = 6;
  bool has_readhighbound() const;
  private:
  bool _internal_has_readhighbound() const;
  public:
  void clear_readhighbound();
  const ::Proto::TuningValue& readhighbound() const;
  ::Proto::TuningValue* release_readhighbound();
  ::Proto::TuningValue* mutable_readhighbound();
  void set_allocated_readhighbound(::Proto::TuningValue* readhighbound);
  private:
  const ::Proto::TuningValue& _internal_readhighbound() const;
  ::Proto::TuningValue* _internal_mutable_readhighbound();
  public:
  void unsafe_arena_set_allocated_readhighbound(
      ::Proto::TuningValue* readhighbound);
  ::Proto::TuningValue* unsafe_arena_release_readhighbound();

  // optional fixed64 signalHash = 1 [default = 0];
  bool has_signalhash() const;
  private:
  bool _internal_has_signalhash() const;
  public:
  void clear_signalhash();
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash() const;
  void set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhash() const;
  void _internal_set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 error = 2 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 writeErrorCode = 8 [default = 0];
  bool has_writeerrorcode() const;
  private:
  bool _internal_has_writeerrorcode() const;
  public:
  void clear_writeerrorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 writeerrorcode() const;
  void set_writeerrorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_writeerrorcode() const;
  void _internal_set_writeerrorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 writeClient = 9 [default = 0];
  bool has_writeclient() const;
  private:
  bool _internal_has_writeclient() const;
  public:
  void clear_writeclient();
  ::PROTOBUF_NAMESPACE_ID::uint64 writeclient() const;
  void set_writeclient(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_writeclient() const;
  void _internal_set_writeclient(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional sfixed64 successfulReadTime = 10 [default = 0];
  bool has_successfulreadtime() const;
  private:
  bool _internal_has_successfulreadtime() const;
  public:
  void clear_successfulreadtime();
  ::PROTOBUF_NAMESPACE_ID::int64 successfulreadtime() const;
  void set_successfulreadtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_successfulreadtime() const;
  void _internal_set_successfulreadtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 writeRequestTime = 11 [default = 0];
  bool has_writerequesttime() const;
  private:
  bool _internal_has_writerequesttime() const;
  public:
  void clear_writerequesttime();
  ::PROTOBUF_NAMESPACE_ID::int64 writerequesttime() const;
  void set_writerequesttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_writerequesttime() const;
  void _internal_set_writerequesttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool valid = 3 [default = false];
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // optional bool writeInProgress = 7 [default = false];
  bool has_writeinprogress() const;
  private:
  bool _internal_has_writeinprogress() const;
  public:
  void clear_writeinprogress();
  bool writeinprogress() const;
  void set_writeinprogress(bool value);
  private:
  bool _internal_writeinprogress() const;
  void _internal_set_writeinprogress(bool value);
  public:

  // optional bool setSOR = 14 [default = false];
  bool has_setsor() const;
  private:
  bool _internal_has_setsor() const;
  public:
  void clear_setsor();
  bool setsor() const;
  void set_setsor(bool value);
  private:
  bool _internal_setsor() const;
  void _internal_set_setsor(bool value);
  public:

  // optional bool writingDisabled = 15 [default = false];
  bool has_writingdisabled() const;
  private:
  bool _internal_has_writingdisabled() const;
  public:
  void clear_writingdisabled();
  bool writingdisabled() const;
  void set_writingdisabled(bool value);
  private:
  bool _internal_writingdisabled() const;
  void _internal_set_writingdisabled(bool value);
  public:

  // optional bool tuningDefault = 16;
  bool has_tuningdefault() const;
  private:
  bool _internal_has_tuningdefault() const;
  public:
  void clear_tuningdefault();
  bool tuningdefault() const;
  void set_tuningdefault(bool value);
  private:
  bool _internal_tuningdefault() const;
  void _internal_set_tuningdefault(bool value);
  public:

  // optional sfixed64 successfulWriteTime = 12 [default = 0];
  bool has_successfulwritetime() const;
  private:
  bool _internal_has_successfulwritetime() const;
  public:
  void clear_successfulwritetime();
  ::PROTOBUF_NAMESPACE_ID::int64 successfulwritetime() const;
  void set_successfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_successfulwritetime() const;
  void _internal_set_successfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
  bool has_unsuccessfulwritetime() const;
  private:
  bool _internal_has_unsuccessfulwritetime() const;
  public:
  void clear_unsuccessfulwritetime();
  ::PROTOBUF_NAMESPACE_ID::int64 unsuccessfulwritetime() const;
  void set_unsuccessfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unsuccessfulwritetime() const;
  void _internal_set_unsuccessfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSignalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::TuningValue* value_;
  ::Proto::TuningValue* readlowbound_;
  ::Proto::TuningValue* readhighbound_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 writeerrorcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 writeclient_;
  ::PROTOBUF_NAMESPACE_ID::int64 successfulreadtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 writerequesttime_;
  bool valid_;
  bool writeinprogress_;
  bool setsor_;
  bool writingdisabled_;
  bool tuningdefault_;
  ::PROTOBUF_NAMESPACE_ID::int64 successfulwritetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 unsuccessfulwritetime_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalsReadReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalsReadReply) */ {
 public:
  inline TuningSignalsReadReply() : TuningSignalsReadReply(nullptr) {}
  virtual ~TuningSignalsReadReply();
  explicit constexpr TuningSignalsReadReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalsReadReply(const TuningSignalsReadReply& from);
  TuningSignalsReadReply(TuningSignalsReadReply&& from) noexcept
    : TuningSignalsReadReply() {
    *this = ::std::move(from);
  }

  inline TuningSignalsReadReply& operator=(const TuningSignalsReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalsReadReply& operator=(TuningSignalsReadReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalsReadReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalsReadReply* internal_default_instance() {
    return reinterpret_cast<const TuningSignalsReadReply*>(
               &_TuningSignalsReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TuningSignalsReadReply& a, TuningSignalsReadReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalsReadReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalsReadReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalsReadReply* New() const final {
    return CreateMaybeMessage<TuningSignalsReadReply>(nullptr);
  }

  TuningSignalsReadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalsReadReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalsReadReply& from);
  void MergeFrom(const TuningSignalsReadReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalsReadReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalsReadReply";
  }
  protected:
  explicit TuningSignalsReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuningSignalStateFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Network.TuningSignalState tuningSignalState = 2;
  int tuningsignalstate_size() const;
  private:
  int _internal_tuningsignalstate_size() const;
  public:
  void clear_tuningsignalstate();
  ::Network::TuningSignalState* mutable_tuningsignalstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalState >*
      mutable_tuningsignalstate();
  private:
  const ::Network::TuningSignalState& _internal_tuningsignalstate(int index) const;
  ::Network::TuningSignalState* _internal_add_tuningsignalstate();
  public:
  const ::Network::TuningSignalState& tuningsignalstate(int index) const;
  ::Network::TuningSignalState* add_tuningsignalstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalState >&
      tuningsignalstate() const;

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSignalsReadReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalState > tuningsignalstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningWriteCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningWriteCommand) */ {
 public:
  inline TuningWriteCommand() : TuningWriteCommand(nullptr) {}
  virtual ~TuningWriteCommand();
  explicit constexpr TuningWriteCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningWriteCommand(const TuningWriteCommand& from);
  TuningWriteCommand(TuningWriteCommand&& from) noexcept
    : TuningWriteCommand() {
    *this = ::std::move(from);
  }

  inline TuningWriteCommand& operator=(const TuningWriteCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningWriteCommand& operator=(TuningWriteCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningWriteCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningWriteCommand* internal_default_instance() {
    return reinterpret_cast<const TuningWriteCommand*>(
               &_TuningWriteCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TuningWriteCommand& a, TuningWriteCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningWriteCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningWriteCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningWriteCommand* New() const final {
    return CreateMaybeMessage<TuningWriteCommand>(nullptr);
  }

  TuningWriteCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningWriteCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningWriteCommand& from);
  void MergeFrom(const TuningWriteCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningWriteCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningWriteCommand";
  }
  protected:
  explicit TuningWriteCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kSignalHashFieldNumber = 1,
  };
  // optional .Proto.TuningValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Proto::TuningValue& value() const;
  ::Proto::TuningValue* release_value();
  ::Proto::TuningValue* mutable_value();
  void set_allocated_value(::Proto::TuningValue* value);
  private:
  const ::Proto::TuningValue& _internal_value() const;
  ::Proto::TuningValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Proto::TuningValue* value);
  ::Proto::TuningValue* unsafe_arena_release_value();

  // optional uint64 signalHash = 1 [default = 0];
  bool has_signalhash() const;
  private:
  bool _internal_has_signalhash() const;
  public:
  void clear_signalhash();
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash() const;
  void set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhash() const;
  void _internal_set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningWriteCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::TuningValue* value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalsWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalsWrite) */ {
 public:
  inline TuningSignalsWrite() : TuningSignalsWrite(nullptr) {}
  virtual ~TuningSignalsWrite();
  explicit constexpr TuningSignalsWrite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalsWrite(const TuningSignalsWrite& from);
  TuningSignalsWrite(TuningSignalsWrite&& from) noexcept
    : TuningSignalsWrite() {
    *this = ::std::move(from);
  }

  inline TuningSignalsWrite& operator=(const TuningSignalsWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalsWrite& operator=(TuningSignalsWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalsWrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalsWrite* internal_default_instance() {
    return reinterpret_cast<const TuningSignalsWrite*>(
               &_TuningSignalsWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TuningSignalsWrite& a, TuningSignalsWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalsWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalsWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalsWrite* New() const final {
    return CreateMaybeMessage<TuningSignalsWrite>(nullptr);
  }

  TuningSignalsWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalsWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalsWrite& from);
  void MergeFrom(const TuningSignalsWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalsWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalsWrite";
  }
  protected:
  explicit TuningSignalsWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 3,
    kAutoApplyFieldNumber = 2,
  };
  // repeated .Network.TuningWriteCommand commands = 3;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::Network::TuningWriteCommand* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningWriteCommand >*
      mutable_commands();
  private:
  const ::Network::TuningWriteCommand& _internal_commands(int index) const;
  ::Network::TuningWriteCommand* _internal_add_commands();
  public:
  const ::Network::TuningWriteCommand& commands(int index) const;
  ::Network::TuningWriteCommand* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningWriteCommand >&
      commands() const;

  // optional bool autoApply = 2 [default = false];
  bool has_autoapply() const;
  private:
  bool _internal_has_autoapply() const;
  public:
  void clear_autoapply();
  bool autoapply() const;
  void set_autoapply(bool value);
  private:
  bool _internal_autoapply() const;
  void _internal_set_autoapply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSignalsWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningWriteCommand > commands_;
  bool autoapply_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalWriteResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalWriteResult) */ {
 public:
  inline TuningSignalWriteResult() : TuningSignalWriteResult(nullptr) {}
  virtual ~TuningSignalWriteResult();
  explicit constexpr TuningSignalWriteResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalWriteResult(const TuningSignalWriteResult& from);
  TuningSignalWriteResult(TuningSignalWriteResult&& from) noexcept
    : TuningSignalWriteResult() {
    *this = ::std::move(from);
  }

  inline TuningSignalWriteResult& operator=(const TuningSignalWriteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalWriteResult& operator=(TuningSignalWriteResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalWriteResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalWriteResult* internal_default_instance() {
    return reinterpret_cast<const TuningSignalWriteResult*>(
               &_TuningSignalWriteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TuningSignalWriteResult& a, TuningSignalWriteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalWriteResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalWriteResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalWriteResult* New() const final {
    return CreateMaybeMessage<TuningSignalWriteResult>(nullptr);
  }

  TuningSignalWriteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalWriteResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalWriteResult& from);
  void MergeFrom(const TuningSignalWriteResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalWriteResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalWriteResult";
  }
  protected:
  explicit TuningSignalWriteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // optional uint64 signalHash = 1 [default = 0];
  bool has_signalhash() const;
  private:
  bool _internal_has_signalhash() const;
  public:
  void clear_signalhash();
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash() const;
  void set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhash() const;
  void _internal_set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 error = 2 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSignalWriteResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhash_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalsWriteReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalsWriteReply) */ {
 public:
  inline TuningSignalsWriteReply() : TuningSignalsWriteReply(nullptr) {}
  virtual ~TuningSignalsWriteReply();
  explicit constexpr TuningSignalsWriteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalsWriteReply(const TuningSignalsWriteReply& from);
  TuningSignalsWriteReply(TuningSignalsWriteReply&& from) noexcept
    : TuningSignalsWriteReply() {
    *this = ::std::move(from);
  }

  inline TuningSignalsWriteReply& operator=(const TuningSignalsWriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalsWriteReply& operator=(TuningSignalsWriteReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalsWriteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalsWriteReply* internal_default_instance() {
    return reinterpret_cast<const TuningSignalsWriteReply*>(
               &_TuningSignalsWriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TuningSignalsWriteReply& a, TuningSignalsWriteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalsWriteReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalsWriteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalsWriteReply* New() const final {
    return CreateMaybeMessage<TuningSignalsWriteReply>(nullptr);
  }

  TuningSignalsWriteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalsWriteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalsWriteReply& from);
  void MergeFrom(const TuningSignalsWriteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalsWriteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalsWriteReply";
  }
  protected:
  explicit TuningSignalsWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteResultFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Network.TuningSignalWriteResult writeResult = 2;
  int writeresult_size() const;
  private:
  int _internal_writeresult_size() const;
  public:
  void clear_writeresult();
  ::Network::TuningSignalWriteResult* mutable_writeresult(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalWriteResult >*
      mutable_writeresult();
  private:
  const ::Network::TuningSignalWriteResult& _internal_writeresult(int index) const;
  ::Network::TuningSignalWriteResult* _internal_add_writeresult();
  public:
  const ::Network::TuningSignalWriteResult& writeresult(int index) const;
  ::Network::TuningSignalWriteResult* add_writeresult();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalWriteResult >&
      writeresult() const;

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSignalsWriteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalWriteResult > writeresult_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalsApply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalsApply) */ {
 public:
  inline TuningSignalsApply() : TuningSignalsApply(nullptr) {}
  virtual ~TuningSignalsApply();
  explicit constexpr TuningSignalsApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalsApply(const TuningSignalsApply& from);
  TuningSignalsApply(TuningSignalsApply&& from) noexcept
    : TuningSignalsApply() {
    *this = ::std::move(from);
  }

  inline TuningSignalsApply& operator=(const TuningSignalsApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalsApply& operator=(TuningSignalsApply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalsApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalsApply* internal_default_instance() {
    return reinterpret_cast<const TuningSignalsApply*>(
               &_TuningSignalsApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TuningSignalsApply& a, TuningSignalsApply& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalsApply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalsApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalsApply* New() const final {
    return CreateMaybeMessage<TuningSignalsApply>(nullptr);
  }

  TuningSignalsApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalsApply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalsApply& from);
  void MergeFrom(const TuningSignalsApply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalsApply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalsApply";
  }
  protected:
  explicit TuningSignalsApply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.TuningSignalsApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class TuningSignalsApplyReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.TuningSignalsApplyReply) */ {
 public:
  inline TuningSignalsApplyReply() : TuningSignalsApplyReply(nullptr) {}
  virtual ~TuningSignalsApplyReply();
  explicit constexpr TuningSignalsApplyReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuningSignalsApplyReply(const TuningSignalsApplyReply& from);
  TuningSignalsApplyReply(TuningSignalsApplyReply&& from) noexcept
    : TuningSignalsApplyReply() {
    *this = ::std::move(from);
  }

  inline TuningSignalsApplyReply& operator=(const TuningSignalsApplyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningSignalsApplyReply& operator=(TuningSignalsApplyReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningSignalsApplyReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningSignalsApplyReply* internal_default_instance() {
    return reinterpret_cast<const TuningSignalsApplyReply*>(
               &_TuningSignalsApplyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TuningSignalsApplyReply& a, TuningSignalsApplyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningSignalsApplyReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningSignalsApplyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TuningSignalsApplyReply* New() const final {
    return CreateMaybeMessage<TuningSignalsApplyReply>(nullptr);
  }

  TuningSignalsApplyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningSignalsApplyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningSignalsApplyReply& from);
  void MergeFrom(const TuningSignalsApplyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningSignalsApplyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.TuningSignalsApplyReply";
  }
  protected:
  explicit TuningSignalsApplyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.TuningSignalsApplyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class DataSourceWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.DataSourceWrite) */ {
 public:
  inline DataSourceWrite() : DataSourceWrite(nullptr) {}
  virtual ~DataSourceWrite();
  explicit constexpr DataSourceWrite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSourceWrite(const DataSourceWrite& from);
  DataSourceWrite(DataSourceWrite&& from) noexcept
    : DataSourceWrite() {
    *this = ::std::move(from);
  }

  inline DataSourceWrite& operator=(const DataSourceWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceWrite& operator=(DataSourceWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSourceWrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSourceWrite* internal_default_instance() {
    return reinterpret_cast<const DataSourceWrite*>(
               &_DataSourceWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DataSourceWrite& a, DataSourceWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSourceWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceWrite* New() const final {
    return CreateMaybeMessage<DataSourceWrite>(nullptr);
  }

  DataSourceWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSourceWrite& from);
  void MergeFrom(const DataSourceWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.DataSourceWrite";
  }
  protected:
  explicit DataSourceWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceEquipmentIDFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional string sourceEquipmentID = 1;
  bool has_sourceequipmentid() const;
  private:
  bool _internal_has_sourceequipmentid() const;
  public:
  void clear_sourceequipmentid();
  const std::string& sourceequipmentid() const;
  void set_sourceequipmentid(const std::string& value);
  void set_sourceequipmentid(std::string&& value);
  void set_sourceequipmentid(const char* value);
  void set_sourceequipmentid(const char* value, size_t size);
  std::string* mutable_sourceequipmentid();
  std::string* release_sourceequipmentid();
  void set_allocated_sourceequipmentid(std::string* sourceequipmentid);
  private:
  const std::string& _internal_sourceequipmentid() const;
  void _internal_set_sourceequipmentid(const std::string& value);
  std::string* _internal_mutable_sourceequipmentid();
  public:

  // optional bool state = 2 [default = false];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.DataSourceWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceequipmentid_;
  bool state_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class DataSourceWriteReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.DataSourceWriteReply) */ {
 public:
  inline DataSourceWriteReply() : DataSourceWriteReply(nullptr) {}
  virtual ~DataSourceWriteReply();
  explicit constexpr DataSourceWriteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSourceWriteReply(const DataSourceWriteReply& from);
  DataSourceWriteReply(DataSourceWriteReply&& from) noexcept
    : DataSourceWriteReply() {
    *this = ::std::move(from);
  }

  inline DataSourceWriteReply& operator=(const DataSourceWriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceWriteReply& operator=(DataSourceWriteReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSourceWriteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSourceWriteReply* internal_default_instance() {
    return reinterpret_cast<const DataSourceWriteReply*>(
               &_DataSourceWriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DataSourceWriteReply& a, DataSourceWriteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceWriteReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSourceWriteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceWriteReply* New() const final {
    return CreateMaybeMessage<DataSourceWriteReply>(nullptr);
  }

  DataSourceWriteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceWriteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSourceWriteReply& from);
  void MergeFrom(const DataSourceWriteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceWriteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.DataSourceWriteReply";
  }
  protected:
  explicit DataSourceWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.DataSourceWriteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PacketSourceExit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.PacketSourceExit) */ {
 public:
  inline PacketSourceExit() : PacketSourceExit(nullptr) {}
  virtual ~PacketSourceExit();
  explicit constexpr PacketSourceExit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketSourceExit(const PacketSourceExit& from);
  PacketSourceExit(PacketSourceExit&& from) noexcept
    : PacketSourceExit() {
    *this = ::std::move(from);
  }

  inline PacketSourceExit& operator=(const PacketSourceExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketSourceExit& operator=(PacketSourceExit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketSourceExit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketSourceExit* internal_default_instance() {
    return reinterpret_cast<const PacketSourceExit*>(
               &_PacketSourceExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PacketSourceExit& a, PacketSourceExit& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketSourceExit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketSourceExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketSourceExit* New() const final {
    return CreateMaybeMessage<PacketSourceExit>(nullptr);
  }

  PacketSourceExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketSourceExit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketSourceExit& from);
  void MergeFrom(const PacketSourceExit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketSourceExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.PacketSourceExit";
  }
  protected:
  explicit PacketSourceExit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.PacketSourceExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PacketSourceExitReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.PacketSourceExitReply) */ {
 public:
  inline PacketSourceExitReply() : PacketSourceExitReply(nullptr) {}
  virtual ~PacketSourceExitReply();
  explicit constexpr PacketSourceExitReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketSourceExitReply(const PacketSourceExitReply& from);
  PacketSourceExitReply(PacketSourceExitReply&& from) noexcept
    : PacketSourceExitReply() {
    *this = ::std::move(from);
  }

  inline PacketSourceExitReply& operator=(const PacketSourceExitReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketSourceExitReply& operator=(PacketSourceExitReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketSourceExitReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketSourceExitReply* internal_default_instance() {
    return reinterpret_cast<const PacketSourceExitReply*>(
               &_PacketSourceExitReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PacketSourceExitReply& a, PacketSourceExitReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketSourceExitReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketSourceExitReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketSourceExitReply* New() const final {
    return CreateMaybeMessage<PacketSourceExitReply>(nullptr);
  }

  PacketSourceExitReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketSourceExitReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketSourceExitReply& from);
  void MergeFrom(const PacketSourceExitReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketSourceExitReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.PacketSourceExitReply";
  }
  protected:
  explicit PacketSourceExitReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.PacketSourceExitReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class SaveAppSignalsStatesToArchiveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.SaveAppSignalsStatesToArchiveRequest) */ {
 public:
  inline SaveAppSignalsStatesToArchiveRequest() : SaveAppSignalsStatesToArchiveRequest(nullptr) {}
  virtual ~SaveAppSignalsStatesToArchiveRequest();
  explicit constexpr SaveAppSignalsStatesToArchiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveAppSignalsStatesToArchiveRequest(const SaveAppSignalsStatesToArchiveRequest& from);
  SaveAppSignalsStatesToArchiveRequest(SaveAppSignalsStatesToArchiveRequest&& from) noexcept
    : SaveAppSignalsStatesToArchiveRequest() {
    *this = ::std::move(from);
  }

  inline SaveAppSignalsStatesToArchiveRequest& operator=(const SaveAppSignalsStatesToArchiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveAppSignalsStatesToArchiveRequest& operator=(SaveAppSignalsStatesToArchiveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveAppSignalsStatesToArchiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveAppSignalsStatesToArchiveRequest* internal_default_instance() {
    return reinterpret_cast<const SaveAppSignalsStatesToArchiveRequest*>(
               &_SaveAppSignalsStatesToArchiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SaveAppSignalsStatesToArchiveRequest& a, SaveAppSignalsStatesToArchiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveAppSignalsStatesToArchiveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveAppSignalsStatesToArchiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveAppSignalsStatesToArchiveRequest* New() const final {
    return CreateMaybeMessage<SaveAppSignalsStatesToArchiveRequest>(nullptr);
  }

  SaveAppSignalsStatesToArchiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveAppSignalsStatesToArchiveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveAppSignalsStatesToArchiveRequest& from);
  void MergeFrom(const SaveAppSignalsStatesToArchiveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveAppSignalsStatesToArchiveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.SaveAppSignalsStatesToArchiveRequest";
  }
  protected:
  explicit SaveAppSignalsStatesToArchiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalStatesFieldNumber = 2,
    kClientEquipmentIDFieldNumber = 1,
  };
  // repeated .Proto.AppSignalState appSignalStates = 2;
  int appsignalstates_size() const;
  private:
  int _internal_appsignalstates_size() const;
  public:
  void clear_appsignalstates();
  ::Proto::AppSignalState* mutable_appsignalstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
      mutable_appsignalstates();
  private:
  const ::Proto::AppSignalState& _internal_appsignalstates(int index) const;
  ::Proto::AppSignalState* _internal_add_appsignalstates();
  public:
  const ::Proto::AppSignalState& appsignalstates(int index) const;
  ::Proto::AppSignalState* add_appsignalstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
      appsignalstates() const;

  // optional string clientEquipmentID = 1;
  bool has_clientequipmentid() const;
  private:
  bool _internal_has_clientequipmentid() const;
  public:
  void clear_clientequipmentid();
  const std::string& clientequipmentid() const;
  void set_clientequipmentid(const std::string& value);
  void set_clientequipmentid(std::string&& value);
  void set_clientequipmentid(const char* value);
  void set_clientequipmentid(const char* value, size_t size);
  std::string* mutable_clientequipmentid();
  std::string* release_clientequipmentid();
  void set_allocated_clientequipmentid(std::string* clientequipmentid);
  private:
  const std::string& _internal_clientequipmentid() const;
  void _internal_set_clientequipmentid(const std::string& value);
  std::string* _internal_mutable_clientequipmentid();
  public:

  // @@protoc_insertion_point(class_scope:Network.SaveAppSignalsStatesToArchiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState > appsignalstates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientequipmentid_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class SaveAppSignalsStatesToArchiveReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.SaveAppSignalsStatesToArchiveReply) */ {
 public:
  inline SaveAppSignalsStatesToArchiveReply() : SaveAppSignalsStatesToArchiveReply(nullptr) {}
  virtual ~SaveAppSignalsStatesToArchiveReply();
  explicit constexpr SaveAppSignalsStatesToArchiveReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveAppSignalsStatesToArchiveReply(const SaveAppSignalsStatesToArchiveReply& from);
  SaveAppSignalsStatesToArchiveReply(SaveAppSignalsStatesToArchiveReply&& from) noexcept
    : SaveAppSignalsStatesToArchiveReply() {
    *this = ::std::move(from);
  }

  inline SaveAppSignalsStatesToArchiveReply& operator=(const SaveAppSignalsStatesToArchiveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveAppSignalsStatesToArchiveReply& operator=(SaveAppSignalsStatesToArchiveReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveAppSignalsStatesToArchiveReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveAppSignalsStatesToArchiveReply* internal_default_instance() {
    return reinterpret_cast<const SaveAppSignalsStatesToArchiveReply*>(
               &_SaveAppSignalsStatesToArchiveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SaveAppSignalsStatesToArchiveReply& a, SaveAppSignalsStatesToArchiveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveAppSignalsStatesToArchiveReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveAppSignalsStatesToArchiveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveAppSignalsStatesToArchiveReply* New() const final {
    return CreateMaybeMessage<SaveAppSignalsStatesToArchiveReply>(nullptr);
  }

  SaveAppSignalsStatesToArchiveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveAppSignalsStatesToArchiveReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveAppSignalsStatesToArchiveReply& from);
  void MergeFrom(const SaveAppSignalsStatesToArchiveReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveAppSignalsStatesToArchiveReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.SaveAppSignalsStatesToArchiveReply";
  }
  protected:
  explicit SaveAppSignalsStatesToArchiveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kArchErrorFieldNumber = 2,
  };
  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 archError = 2 [default = 100];
  bool has_archerror() const;
  private:
  bool _internal_has_archerror() const;
  public:
  void clear_archerror();
  ::PROTOBUF_NAMESPACE_ID::int32 archerror() const;
  void set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_archerror() const;
  void _internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.SaveAppSignalsStatesToArchiveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 archerror_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStatesFromArchiveStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStatesFromArchiveStartRequest) */ {
 public:
  inline GetAppSignalStatesFromArchiveStartRequest() : GetAppSignalStatesFromArchiveStartRequest(nullptr) {}
  virtual ~GetAppSignalStatesFromArchiveStartRequest();
  explicit constexpr GetAppSignalStatesFromArchiveStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStatesFromArchiveStartRequest(const GetAppSignalStatesFromArchiveStartRequest& from);
  GetAppSignalStatesFromArchiveStartRequest(GetAppSignalStatesFromArchiveStartRequest&& from) noexcept
    : GetAppSignalStatesFromArchiveStartRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStatesFromArchiveStartRequest& operator=(const GetAppSignalStatesFromArchiveStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStatesFromArchiveStartRequest& operator=(GetAppSignalStatesFromArchiveStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStatesFromArchiveStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStatesFromArchiveStartRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStatesFromArchiveStartRequest*>(
               &_GetAppSignalStatesFromArchiveStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetAppSignalStatesFromArchiveStartRequest& a, GetAppSignalStatesFromArchiveStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStatesFromArchiveStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStatesFromArchiveStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStatesFromArchiveStartRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveStartRequest>(nullptr);
  }

  GetAppSignalStatesFromArchiveStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStatesFromArchiveStartRequest& from);
  void MergeFrom(const GetAppSignalStatesFromArchiveStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStatesFromArchiveStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStatesFromArchiveStartRequest";
  }
  protected:
  explicit GetAppSignalStatesFromArchiveStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalHashesFieldNumber = 5,
    kClientEquipmentIDFieldNumber = 1,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kTimeTypeFieldNumber = 2,
    kRemovePeriodicFieldNumber = 6,
  };
  // repeated uint64 signalHashes = 5;
  int signalhashes_size() const;
  private:
  int _internal_signalhashes_size() const;
  public:
  void clear_signalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_signalhashes() const;
  void _internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_signalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 signalhashes(int index) const;
  void set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      signalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_signalhashes();

  // optional string clientEquipmentID = 1;
  bool has_clientequipmentid() const;
  private:
  bool _internal_has_clientequipmentid() const;
  public:
  void clear_clientequipmentid();
  const std::string& clientequipmentid() const;
  void set_clientequipmentid(const std::string& value);
  void set_clientequipmentid(std::string&& value);
  void set_clientequipmentid(const char* value);
  void set_clientequipmentid(const char* value, size_t size);
  std::string* mutable_clientequipmentid();
  std::string* release_clientequipmentid();
  void set_allocated_clientequipmentid(std::string* clientequipmentid);
  private:
  const std::string& _internal_clientequipmentid() const;
  void _internal_set_clientequipmentid(const std::string& value);
  std::string* _internal_mutable_clientequipmentid();
  public:

  // optional sfixed64 startTime = 3 [default = 0];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 endTime = 4 [default = 0];
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 timeType = 2 [default = 1];
  bool has_timetype() const;
  private:
  bool _internal_has_timetype() const;
  public:
  void clear_timetype();
  ::PROTOBUF_NAMESPACE_ID::int32 timetype() const;
  void set_timetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timetype() const;
  void _internal_set_timetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool removePeriodic = 6 [default = true];
  bool has_removeperiodic() const;
  private:
  bool _internal_has_removeperiodic() const;
  public:
  void clear_removeperiodic();
  bool removeperiodic() const;
  void set_removeperiodic(bool value);
  private:
  bool _internal_removeperiodic() const;
  void _internal_set_removeperiodic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStatesFromArchiveStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > signalhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientequipmentid_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 timetype_;
  bool removeperiodic_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStatesFromArchiveStartReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStatesFromArchiveStartReply) */ {
 public:
  inline GetAppSignalStatesFromArchiveStartReply() : GetAppSignalStatesFromArchiveStartReply(nullptr) {}
  virtual ~GetAppSignalStatesFromArchiveStartReply();
  explicit constexpr GetAppSignalStatesFromArchiveStartReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStatesFromArchiveStartReply(const GetAppSignalStatesFromArchiveStartReply& from);
  GetAppSignalStatesFromArchiveStartReply(GetAppSignalStatesFromArchiveStartReply&& from) noexcept
    : GetAppSignalStatesFromArchiveStartReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStatesFromArchiveStartReply& operator=(const GetAppSignalStatesFromArchiveStartReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStatesFromArchiveStartReply& operator=(GetAppSignalStatesFromArchiveStartReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStatesFromArchiveStartReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStatesFromArchiveStartReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStatesFromArchiveStartReply*>(
               &_GetAppSignalStatesFromArchiveStartReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetAppSignalStatesFromArchiveStartReply& a, GetAppSignalStatesFromArchiveStartReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStatesFromArchiveStartReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStatesFromArchiveStartReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStatesFromArchiveStartReply* New() const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveStartReply>(nullptr);
  }

  GetAppSignalStatesFromArchiveStartReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveStartReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStatesFromArchiveStartReply& from);
  void MergeFrom(const GetAppSignalStatesFromArchiveStartReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStatesFromArchiveStartReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStatesFromArchiveStartReply";
  }
  protected:
  explicit GetAppSignalStatesFromArchiveStartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorStringFieldNumber = 4,
    kErrorFieldNumber = 1,
    kRequestIDFieldNumber = 3,
    kArchErrorFieldNumber = 2,
  };
  // optional string errorString = 4;
  bool has_errorstring() const;
  private:
  bool _internal_has_errorstring() const;
  public:
  void clear_errorstring();
  const std::string& errorstring() const;
  void set_errorstring(const std::string& value);
  void set_errorstring(std::string&& value);
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  std::string* mutable_errorstring();
  std::string* release_errorstring();
  void set_allocated_errorstring(std::string* errorstring);
  private:
  const std::string& _internal_errorstring() const;
  void _internal_set_errorstring(const std::string& value);
  std::string* _internal_mutable_errorstring();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 requestID = 3 [default = 0];
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 archError = 2 [default = 100];
  bool has_archerror() const;
  private:
  bool _internal_has_archerror() const;
  public:
  void clear_archerror();
  ::PROTOBUF_NAMESPACE_ID::int32 archerror() const;
  void set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_archerror() const;
  void _internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStatesFromArchiveStartReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 archerror_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStatesFromArchiveNextRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStatesFromArchiveNextRequest) */ {
 public:
  inline GetAppSignalStatesFromArchiveNextRequest() : GetAppSignalStatesFromArchiveNextRequest(nullptr) {}
  virtual ~GetAppSignalStatesFromArchiveNextRequest();
  explicit constexpr GetAppSignalStatesFromArchiveNextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStatesFromArchiveNextRequest(const GetAppSignalStatesFromArchiveNextRequest& from);
  GetAppSignalStatesFromArchiveNextRequest(GetAppSignalStatesFromArchiveNextRequest&& from) noexcept
    : GetAppSignalStatesFromArchiveNextRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStatesFromArchiveNextRequest& operator=(const GetAppSignalStatesFromArchiveNextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStatesFromArchiveNextRequest& operator=(GetAppSignalStatesFromArchiveNextRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStatesFromArchiveNextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStatesFromArchiveNextRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStatesFromArchiveNextRequest*>(
               &_GetAppSignalStatesFromArchiveNextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetAppSignalStatesFromArchiveNextRequest& a, GetAppSignalStatesFromArchiveNextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStatesFromArchiveNextRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStatesFromArchiveNextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStatesFromArchiveNextRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveNextRequest>(nullptr);
  }

  GetAppSignalStatesFromArchiveNextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveNextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStatesFromArchiveNextRequest& from);
  void MergeFrom(const GetAppSignalStatesFromArchiveNextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStatesFromArchiveNextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStatesFromArchiveNextRequest";
  }
  protected:
  explicit GetAppSignalStatesFromArchiveNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIDFieldNumber = 1,
  };
  // optional uint32 requestID = 1 [default = 0];
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStatesFromArchiveNextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStatesFromArchiveNextReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStatesFromArchiveNextReply) */ {
 public:
  inline GetAppSignalStatesFromArchiveNextReply() : GetAppSignalStatesFromArchiveNextReply(nullptr) {}
  virtual ~GetAppSignalStatesFromArchiveNextReply();
  explicit constexpr GetAppSignalStatesFromArchiveNextReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStatesFromArchiveNextReply(const GetAppSignalStatesFromArchiveNextReply& from);
  GetAppSignalStatesFromArchiveNextReply(GetAppSignalStatesFromArchiveNextReply&& from) noexcept
    : GetAppSignalStatesFromArchiveNextReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStatesFromArchiveNextReply& operator=(const GetAppSignalStatesFromArchiveNextReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStatesFromArchiveNextReply& operator=(GetAppSignalStatesFromArchiveNextReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStatesFromArchiveNextReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStatesFromArchiveNextReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStatesFromArchiveNextReply*>(
               &_GetAppSignalStatesFromArchiveNextReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetAppSignalStatesFromArchiveNextReply& a, GetAppSignalStatesFromArchiveNextReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStatesFromArchiveNextReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStatesFromArchiveNextReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStatesFromArchiveNextReply* New() const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveNextReply>(nullptr);
  }

  GetAppSignalStatesFromArchiveNextReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveNextReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStatesFromArchiveNextReply& from);
  void MergeFrom(const GetAppSignalStatesFromArchiveNextReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStatesFromArchiveNextReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStatesFromArchiveNextReply";
  }
  protected:
  explicit GetAppSignalStatesFromArchiveNextReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSignalStatesFieldNumber = 9,
    kErrorStringFieldNumber = 10,
    kErrorFieldNumber = 1,
    kRequestIDFieldNumber = 3,
    kTotalStatesCountFieldNumber = 5,
    kSentStatesCountFieldNumber = 6,
    kDataReadyFieldNumber = 4,
    kIsLastPartFieldNumber = 8,
    kStatesInPartCountFieldNumber = 7,
    kArchErrorFieldNumber = 2,
  };
  // repeated .Proto.AppSignalState appSignalStates = 9;
  int appsignalstates_size() const;
  private:
  int _internal_appsignalstates_size() const;
  public:
  void clear_appsignalstates();
  ::Proto::AppSignalState* mutable_appsignalstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
      mutable_appsignalstates();
  private:
  const ::Proto::AppSignalState& _internal_appsignalstates(int index) const;
  ::Proto::AppSignalState* _internal_add_appsignalstates();
  public:
  const ::Proto::AppSignalState& appsignalstates(int index) const;
  ::Proto::AppSignalState* add_appsignalstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
      appsignalstates() const;

  // optional string errorString = 10;
  bool has_errorstring() const;
  private:
  bool _internal_has_errorstring() const;
  public:
  void clear_errorstring();
  const std::string& errorstring() const;
  void set_errorstring(const std::string& value);
  void set_errorstring(std::string&& value);
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  std::string* mutable_errorstring();
  std::string* release_errorstring();
  void set_allocated_errorstring(std::string* errorstring);
  private:
  const std::string& _internal_errorstring() const;
  void _internal_set_errorstring(const std::string& value);
  std::string* _internal_mutable_errorstring();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 requestID = 3 [default = 0];
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 totalStatesCount = 5 [default = 0];
  bool has_totalstatescount() const;
  private:
  bool _internal_has_totalstatescount() const;
  public:
  void clear_totalstatescount();
  ::PROTOBUF_NAMESPACE_ID::int32 totalstatescount() const;
  void set_totalstatescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalstatescount() const;
  void _internal_set_totalstatescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sentStatesCount = 6 [default = 0];
  bool has_sentstatescount() const;
  private:
  bool _internal_has_sentstatescount() const;
  public:
  void clear_sentstatescount();
  ::PROTOBUF_NAMESPACE_ID::int32 sentstatescount() const;
  void set_sentstatescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sentstatescount() const;
  void _internal_set_sentstatescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool dataReady = 4 [default = false];
  bool has_dataready() const;
  private:
  bool _internal_has_dataready() const;
  public:
  void clear_dataready();
  bool dataready() const;
  void set_dataready(bool value);
  private:
  bool _internal_dataready() const;
  void _internal_set_dataready(bool value);
  public:

  // optional bool isLastPart = 8 [default = false];
  bool has_islastpart() const;
  private:
  bool _internal_has_islastpart() const;
  public:
  void clear_islastpart();
  bool islastpart() const;
  void set_islastpart(bool value);
  private:
  bool _internal_islastpart() const;
  void _internal_set_islastpart(bool value);
  public:

  // optional int32 statesInPartCount = 7 [default = 0];
  bool has_statesinpartcount() const;
  private:
  bool _internal_has_statesinpartcount() const;
  public:
  void clear_statesinpartcount();
  ::PROTOBUF_NAMESPACE_ID::int32 statesinpartcount() const;
  void set_statesinpartcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statesinpartcount() const;
  void _internal_set_statesinpartcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 archError = 2 [default = 100];
  bool has_archerror() const;
  private:
  bool _internal_has_archerror() const;
  public:
  void clear_archerror();
  ::PROTOBUF_NAMESPACE_ID::int32 archerror() const;
  void set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_archerror() const;
  void _internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStatesFromArchiveNextReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState > appsignalstates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalstatescount_;
  ::PROTOBUF_NAMESPACE_ID::int32 sentstatescount_;
  bool dataready_;
  bool islastpart_;
  ::PROTOBUF_NAMESPACE_ID::int32 statesinpartcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 archerror_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStatesFromArchiveCancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStatesFromArchiveCancelRequest) */ {
 public:
  inline GetAppSignalStatesFromArchiveCancelRequest() : GetAppSignalStatesFromArchiveCancelRequest(nullptr) {}
  virtual ~GetAppSignalStatesFromArchiveCancelRequest();
  explicit constexpr GetAppSignalStatesFromArchiveCancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStatesFromArchiveCancelRequest(const GetAppSignalStatesFromArchiveCancelRequest& from);
  GetAppSignalStatesFromArchiveCancelRequest(GetAppSignalStatesFromArchiveCancelRequest&& from) noexcept
    : GetAppSignalStatesFromArchiveCancelRequest() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStatesFromArchiveCancelRequest& operator=(const GetAppSignalStatesFromArchiveCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStatesFromArchiveCancelRequest& operator=(GetAppSignalStatesFromArchiveCancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStatesFromArchiveCancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStatesFromArchiveCancelRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStatesFromArchiveCancelRequest*>(
               &_GetAppSignalStatesFromArchiveCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetAppSignalStatesFromArchiveCancelRequest& a, GetAppSignalStatesFromArchiveCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStatesFromArchiveCancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStatesFromArchiveCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStatesFromArchiveCancelRequest* New() const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveCancelRequest>(nullptr);
  }

  GetAppSignalStatesFromArchiveCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStatesFromArchiveCancelRequest& from);
  void MergeFrom(const GetAppSignalStatesFromArchiveCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStatesFromArchiveCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStatesFromArchiveCancelRequest";
  }
  protected:
  explicit GetAppSignalStatesFromArchiveCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIDFieldNumber = 1,
  };
  // optional uint32 requestID = 1 [default = 0];
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStatesFromArchiveCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetAppSignalStatesFromArchiveCancelReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetAppSignalStatesFromArchiveCancelReply) */ {
 public:
  inline GetAppSignalStatesFromArchiveCancelReply() : GetAppSignalStatesFromArchiveCancelReply(nullptr) {}
  virtual ~GetAppSignalStatesFromArchiveCancelReply();
  explicit constexpr GetAppSignalStatesFromArchiveCancelReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppSignalStatesFromArchiveCancelReply(const GetAppSignalStatesFromArchiveCancelReply& from);
  GetAppSignalStatesFromArchiveCancelReply(GetAppSignalStatesFromArchiveCancelReply&& from) noexcept
    : GetAppSignalStatesFromArchiveCancelReply() {
    *this = ::std::move(from);
  }

  inline GetAppSignalStatesFromArchiveCancelReply& operator=(const GetAppSignalStatesFromArchiveCancelReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppSignalStatesFromArchiveCancelReply& operator=(GetAppSignalStatesFromArchiveCancelReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppSignalStatesFromArchiveCancelReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppSignalStatesFromArchiveCancelReply* internal_default_instance() {
    return reinterpret_cast<const GetAppSignalStatesFromArchiveCancelReply*>(
               &_GetAppSignalStatesFromArchiveCancelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetAppSignalStatesFromArchiveCancelReply& a, GetAppSignalStatesFromArchiveCancelReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppSignalStatesFromArchiveCancelReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppSignalStatesFromArchiveCancelReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppSignalStatesFromArchiveCancelReply* New() const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveCancelReply>(nullptr);
  }

  GetAppSignalStatesFromArchiveCancelReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppSignalStatesFromArchiveCancelReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppSignalStatesFromArchiveCancelReply& from);
  void MergeFrom(const GetAppSignalStatesFromArchiveCancelReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppSignalStatesFromArchiveCancelReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetAppSignalStatesFromArchiveCancelReply";
  }
  protected:
  explicit GetAppSignalStatesFromArchiveCancelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorStringFieldNumber = 3,
    kErrorFieldNumber = 1,
    kArchErrorFieldNumber = 2,
  };
  // optional string errorString = 3;
  bool has_errorstring() const;
  private:
  bool _internal_has_errorstring() const;
  public:
  void clear_errorstring();
  const std::string& errorstring() const;
  void set_errorstring(const std::string& value);
  void set_errorstring(std::string&& value);
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  std::string* mutable_errorstring();
  std::string* release_errorstring();
  void set_allocated_errorstring(std::string* errorstring);
  private:
  const std::string& _internal_errorstring() const;
  void _internal_set_errorstring(const std::string& value);
  std::string* _internal_mutable_errorstring();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 archError = 2 [default = 100];
  bool has_archerror() const;
  private:
  bool _internal_has_archerror() const;
  public:
  void clear_archerror();
  ::PROTOBUF_NAMESPACE_ID::int32 archerror() const;
  void set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_archerror() const;
  void _internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetAppSignalStatesFromArchiveCancelReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 archerror_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class RtTrendsManagementRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.RtTrendsManagementRequest) */ {
 public:
  inline RtTrendsManagementRequest() : RtTrendsManagementRequest(nullptr) {}
  virtual ~RtTrendsManagementRequest();
  explicit constexpr RtTrendsManagementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtTrendsManagementRequest(const RtTrendsManagementRequest& from);
  RtTrendsManagementRequest(RtTrendsManagementRequest&& from) noexcept
    : RtTrendsManagementRequest() {
    *this = ::std::move(from);
  }

  inline RtTrendsManagementRequest& operator=(const RtTrendsManagementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtTrendsManagementRequest& operator=(RtTrendsManagementRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtTrendsManagementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtTrendsManagementRequest* internal_default_instance() {
    return reinterpret_cast<const RtTrendsManagementRequest*>(
               &_RtTrendsManagementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RtTrendsManagementRequest& a, RtTrendsManagementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RtTrendsManagementRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtTrendsManagementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtTrendsManagementRequest* New() const final {
    return CreateMaybeMessage<RtTrendsManagementRequest>(nullptr);
  }

  RtTrendsManagementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtTrendsManagementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtTrendsManagementRequest& from);
  void MergeFrom(const RtTrendsManagementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtTrendsManagementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.RtTrendsManagementRequest";
  }
  protected:
  explicit RtTrendsManagementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppendSignalHashesFieldNumber = 3,
    kDeleteSignalHashesFieldNumber = 4,
    kClientEquipmentIDFieldNumber = 1,
    kSamplePeriodFieldNumber = 2,
  };
  // repeated uint64 appendSignalHashes = 3;
  int appendsignalhashes_size() const;
  private:
  int _internal_appendsignalhashes_size() const;
  public:
  void clear_appendsignalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_appendsignalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_appendsignalhashes() const;
  void _internal_add_appendsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_appendsignalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 appendsignalhashes(int index) const;
  void set_appendsignalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_appendsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      appendsignalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_appendsignalhashes();

  // repeated uint64 deleteSignalHashes = 4;
  int deletesignalhashes_size() const;
  private:
  int _internal_deletesignalhashes_size() const;
  public:
  void clear_deletesignalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deletesignalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_deletesignalhashes() const;
  void _internal_add_deletesignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_deletesignalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 deletesignalhashes(int index) const;
  void set_deletesignalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_deletesignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      deletesignalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_deletesignalhashes();

  // optional string clientEquipmentID = 1;
  bool has_clientequipmentid() const;
  private:
  bool _internal_has_clientequipmentid() const;
  public:
  void clear_clientequipmentid();
  const std::string& clientequipmentid() const;
  void set_clientequipmentid(const std::string& value);
  void set_clientequipmentid(std::string&& value);
  void set_clientequipmentid(const char* value);
  void set_clientequipmentid(const char* value, size_t size);
  std::string* mutable_clientequipmentid();
  std::string* release_clientequipmentid();
  void set_allocated_clientequipmentid(std::string* clientequipmentid);
  private:
  const std::string& _internal_clientequipmentid() const;
  void _internal_set_clientequipmentid(const std::string& value);
  std::string* _internal_mutable_clientequipmentid();
  public:

  // optional int32 samplePeriod = 2;
  bool has_sampleperiod() const;
  private:
  bool _internal_has_sampleperiod() const;
  public:
  void clear_sampleperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 sampleperiod() const;
  void set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sampleperiod() const;
  void _internal_set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.RtTrendsManagementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > appendsignalhashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > deletesignalhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientequipmentid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sampleperiod_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class RtTrendsManagementReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.RtTrendsManagementReply) */ {
 public:
  inline RtTrendsManagementReply() : RtTrendsManagementReply(nullptr) {}
  virtual ~RtTrendsManagementReply();
  explicit constexpr RtTrendsManagementReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtTrendsManagementReply(const RtTrendsManagementReply& from);
  RtTrendsManagementReply(RtTrendsManagementReply&& from) noexcept
    : RtTrendsManagementReply() {
    *this = ::std::move(from);
  }

  inline RtTrendsManagementReply& operator=(const RtTrendsManagementReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtTrendsManagementReply& operator=(RtTrendsManagementReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtTrendsManagementReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtTrendsManagementReply* internal_default_instance() {
    return reinterpret_cast<const RtTrendsManagementReply*>(
               &_RtTrendsManagementReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RtTrendsManagementReply& a, RtTrendsManagementReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RtTrendsManagementReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtTrendsManagementReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtTrendsManagementReply* New() const final {
    return CreateMaybeMessage<RtTrendsManagementReply>(nullptr);
  }

  RtTrendsManagementReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtTrendsManagementReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtTrendsManagementReply& from);
  void MergeFrom(const RtTrendsManagementReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtTrendsManagementReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.RtTrendsManagementReply";
  }
  protected:
  explicit RtTrendsManagementReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedSignalHashesFieldNumber = 4,
    kErrorStringFieldNumber = 2,
    kErrorFieldNumber = 1,
    kSamplePeriodFieldNumber = 3,
  };
  // repeated uint64 trackedSignalHashes = 4;
  int trackedsignalhashes_size() const;
  private:
  int _internal_trackedsignalhashes_size() const;
  public:
  void clear_trackedsignalhashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trackedsignalhashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_trackedsignalhashes() const;
  void _internal_add_trackedsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_trackedsignalhashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 trackedsignalhashes(int index) const;
  void set_trackedsignalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_trackedsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      trackedsignalhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_trackedsignalhashes();

  // optional string errorString = 2;
  bool has_errorstring() const;
  private:
  bool _internal_has_errorstring() const;
  public:
  void clear_errorstring();
  const std::string& errorstring() const;
  void set_errorstring(const std::string& value);
  void set_errorstring(std::string&& value);
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  std::string* mutable_errorstring();
  std::string* release_errorstring();
  void set_allocated_errorstring(std::string* errorstring);
  private:
  const std::string& _internal_errorstring() const;
  void _internal_set_errorstring(const std::string& value);
  std::string* _internal_mutable_errorstring();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 samplePeriod = 3;
  bool has_sampleperiod() const;
  private:
  bool _internal_has_sampleperiod() const;
  public:
  void clear_sampleperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 sampleperiod() const;
  void set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sampleperiod() const;
  void _internal_set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.RtTrendsManagementReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > trackedsignalhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 sampleperiod_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class RtTrendsGetStateChangesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.RtTrendsGetStateChangesRequest) */ {
 public:
  inline RtTrendsGetStateChangesRequest() : RtTrendsGetStateChangesRequest(nullptr) {}
  virtual ~RtTrendsGetStateChangesRequest();
  explicit constexpr RtTrendsGetStateChangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtTrendsGetStateChangesRequest(const RtTrendsGetStateChangesRequest& from);
  RtTrendsGetStateChangesRequest(RtTrendsGetStateChangesRequest&& from) noexcept
    : RtTrendsGetStateChangesRequest() {
    *this = ::std::move(from);
  }

  inline RtTrendsGetStateChangesRequest& operator=(const RtTrendsGetStateChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtTrendsGetStateChangesRequest& operator=(RtTrendsGetStateChangesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtTrendsGetStateChangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtTrendsGetStateChangesRequest* internal_default_instance() {
    return reinterpret_cast<const RtTrendsGetStateChangesRequest*>(
               &_RtTrendsGetStateChangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RtTrendsGetStateChangesRequest& a, RtTrendsGetStateChangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RtTrendsGetStateChangesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtTrendsGetStateChangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtTrendsGetStateChangesRequest* New() const final {
    return CreateMaybeMessage<RtTrendsGetStateChangesRequest>(nullptr);
  }

  RtTrendsGetStateChangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtTrendsGetStateChangesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtTrendsGetStateChangesRequest& from);
  void MergeFrom(const RtTrendsGetStateChangesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtTrendsGetStateChangesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.RtTrendsGetStateChangesRequest";
  }
  protected:
  explicit RtTrendsGetStateChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Network.RtTrendsGetStateChangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class RtTrendsGetStateChangesReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.RtTrendsGetStateChangesReply) */ {
 public:
  inline RtTrendsGetStateChangesReply() : RtTrendsGetStateChangesReply(nullptr) {}
  virtual ~RtTrendsGetStateChangesReply();
  explicit constexpr RtTrendsGetStateChangesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtTrendsGetStateChangesReply(const RtTrendsGetStateChangesReply& from);
  RtTrendsGetStateChangesReply(RtTrendsGetStateChangesReply&& from) noexcept
    : RtTrendsGetStateChangesReply() {
    *this = ::std::move(from);
  }

  inline RtTrendsGetStateChangesReply& operator=(const RtTrendsGetStateChangesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtTrendsGetStateChangesReply& operator=(RtTrendsGetStateChangesReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtTrendsGetStateChangesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtTrendsGetStateChangesReply* internal_default_instance() {
    return reinterpret_cast<const RtTrendsGetStateChangesReply*>(
               &_RtTrendsGetStateChangesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RtTrendsGetStateChangesReply& a, RtTrendsGetStateChangesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RtTrendsGetStateChangesReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtTrendsGetStateChangesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtTrendsGetStateChangesReply* New() const final {
    return CreateMaybeMessage<RtTrendsGetStateChangesReply>(nullptr);
  }

  RtTrendsGetStateChangesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtTrendsGetStateChangesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtTrendsGetStateChangesReply& from);
  void MergeFrom(const RtTrendsGetStateChangesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtTrendsGetStateChangesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.RtTrendsGetStateChangesReply";
  }
  protected:
  explicit RtTrendsGetStateChangesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalStatesFieldNumber = 3,
    kErrorStringFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .Proto.AppSignalState signalStates = 3;
  int signalstates_size() const;
  private:
  int _internal_signalstates_size() const;
  public:
  void clear_signalstates();
  ::Proto::AppSignalState* mutable_signalstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
      mutable_signalstates();
  private:
  const ::Proto::AppSignalState& _internal_signalstates(int index) const;
  ::Proto::AppSignalState* _internal_add_signalstates();
  public:
  const ::Proto::AppSignalState& signalstates(int index) const;
  ::Proto::AppSignalState* add_signalstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
      signalstates() const;

  // optional string errorString = 2;
  bool has_errorstring() const;
  private:
  bool _internal_has_errorstring() const;
  public:
  void clear_errorstring();
  const std::string& errorstring() const;
  void set_errorstring(const std::string& value);
  void set_errorstring(std::string&& value);
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  std::string* mutable_errorstring();
  std::string* release_errorstring();
  void set_allocated_errorstring(std::string* errorstring);
  private:
  const std::string& _internal_errorstring() const;
  void _internal_set_errorstring(const std::string& value);
  std::string* _internal_mutable_errorstring();
  public:

  // optional int32 error = 1 [default = 0];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.RtTrendsGetStateChangesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState > signalstates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetFileReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Network.GetFileReply) */ {
 public:
  inline GetFileReply() : GetFileReply(nullptr) {}
  virtual ~GetFileReply();
  explicit constexpr GetFileReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFileReply(const GetFileReply& from);
  GetFileReply(GetFileReply&& from) noexcept
    : GetFileReply() {
    *this = ::std::move(from);
  }

  inline GetFileReply& operator=(const GetFileReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileReply& operator=(GetFileReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileReply* internal_default_instance() {
    return reinterpret_cast<const GetFileReply*>(
               &_GetFileReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetFileReply& a, GetFileReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileReply* New() const final {
    return CreateMaybeMessage<GetFileReply>(nullptr);
  }

  GetFileReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileReply& from);
  void MergeFrom(const GetFileReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Network.GetFileReply";
  }
  protected:
  explicit GetFileReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 6,
    kFilePartDataFieldNumber = 10,
    kFileSizeFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
    kTotalPartsFieldNumber = 3,
    kCurrentPartFieldNumber = 4,
    kCurrentPartSizeFieldNumber = 5,
  };
  // optional bytes md5 = 6;
  bool has_md5() const;
  private:
  bool _internal_has_md5() const;
  public:
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const void* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // optional bytes filePartData = 10;
  bool has_filepartdata() const;
  private:
  bool _internal_has_filepartdata() const;
  public:
  void clear_filepartdata();
  const std::string& filepartdata() const;
  void set_filepartdata(const std::string& value);
  void set_filepartdata(std::string&& value);
  void set_filepartdata(const char* value);
  void set_filepartdata(const void* value, size_t size);
  std::string* mutable_filepartdata();
  std::string* release_filepartdata();
  void set_allocated_filepartdata(std::string* filepartdata);
  private:
  const std::string& _internal_filepartdata() const;
  void _internal_set_filepartdata(const std::string& value);
  std::string* _internal_mutable_filepartdata();
  public:

  // optional int64 fileSize = 2 [default = 0];
  bool has_filesize() const;
  private:
  bool _internal_has_filesize() const;
  public:
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 errorCode = 1 [default = 0];
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 totalParts = 3 [default = 0];
  bool has_totalparts() const;
  private:
  bool _internal_has_totalparts() const;
  public:
  void clear_totalparts();
  ::PROTOBUF_NAMESPACE_ID::int32 totalparts() const;
  void set_totalparts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalparts() const;
  void _internal_set_totalparts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 currentPart = 4 [default = 0];
  bool has_currentpart() const;
  private:
  bool _internal_has_currentpart() const;
  public:
  void clear_currentpart();
  ::PROTOBUF_NAMESPACE_ID::int32 currentpart() const;
  void set_currentpart(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentpart() const;
  void _internal_set_currentpart(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 currentPartSize = 5 [default = 0];
  bool has_currentpartsize() const;
  private:
  bool _internal_has_currentpartsize() const;
  public:
  void clear_currentpartsize();
  ::PROTOBUF_NAMESPACE_ID::int32 currentpartsize() const;
  void set_currentpartsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentpartsize() const;
  void _internal_set_currentpartsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Network.GetFileReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepartdata_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalparts_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentpart_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentpartsize_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSignalListStartRequest

// -------------------------------------------------------------------

// GetSignalListStartReply

// optional int32 error = 1 [default = 0];
inline bool GetSignalListStartReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSignalListStartReply::has_error() const {
  return _internal_has_error();
}
inline void GetSignalListStartReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListStartReply.error)
  return _internal_error();
}
inline void GetSignalListStartReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void GetSignalListStartReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListStartReply.error)
}

// optional int32 totalItemCount = 2;
inline bool GetSignalListStartReply::_internal_has_totalitemcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSignalListStartReply::has_totalitemcount() const {
  return _internal_has_totalitemcount();
}
inline void GetSignalListStartReply::clear_totalitemcount() {
  totalitemcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::_internal_totalitemcount() const {
  return totalitemcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::totalitemcount() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListStartReply.totalItemCount)
  return _internal_totalitemcount();
}
inline void GetSignalListStartReply::_internal_set_totalitemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  totalitemcount_ = value;
}
inline void GetSignalListStartReply::set_totalitemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalitemcount(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListStartReply.totalItemCount)
}

// optional int32 partCount = 3;
inline bool GetSignalListStartReply::_internal_has_partcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetSignalListStartReply::has_partcount() const {
  return _internal_has_partcount();
}
inline void GetSignalListStartReply::clear_partcount() {
  partcount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::_internal_partcount() const {
  return partcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::partcount() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListStartReply.partCount)
  return _internal_partcount();
}
inline void GetSignalListStartReply::_internal_set_partcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  partcount_ = value;
}
inline void GetSignalListStartReply::set_partcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partcount(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListStartReply.partCount)
}

// optional int32 itemsPerPart = 4;
inline bool GetSignalListStartReply::_internal_has_itemsperpart() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetSignalListStartReply::has_itemsperpart() const {
  return _internal_has_itemsperpart();
}
inline void GetSignalListStartReply::clear_itemsperpart() {
  itemsperpart_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::_internal_itemsperpart() const {
  return itemsperpart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListStartReply::itemsperpart() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListStartReply.itemsPerPart)
  return _internal_itemsperpart();
}
inline void GetSignalListStartReply::_internal_set_itemsperpart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  itemsperpart_ = value;
}
inline void GetSignalListStartReply::set_itemsperpart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itemsperpart(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListStartReply.itemsPerPart)
}

// -------------------------------------------------------------------

// GetSignalListNextRequest

// optional int32 part = 1;
inline bool GetSignalListNextRequest::_internal_has_part() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSignalListNextRequest::has_part() const {
  return _internal_has_part();
}
inline void GetSignalListNextRequest::clear_part() {
  part_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListNextRequest::_internal_part() const {
  return part_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListNextRequest::part() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListNextRequest.part)
  return _internal_part();
}
inline void GetSignalListNextRequest::_internal_set_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  part_ = value;
}
inline void GetSignalListNextRequest::set_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListNextRequest.part)
}

// -------------------------------------------------------------------

// GetSignalListNextReply

// optional int32 error = 1 [default = 0];
inline bool GetSignalListNextReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSignalListNextReply::has_error() const {
  return _internal_has_error();
}
inline void GetSignalListNextReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListNextReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListNextReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListNextReply.error)
  return _internal_error();
}
inline void GetSignalListNextReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void GetSignalListNextReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListNextReply.error)
}

// optional int32 part = 2;
inline bool GetSignalListNextReply::_internal_has_part() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSignalListNextReply::has_part() const {
  return _internal_has_part();
}
inline void GetSignalListNextReply::clear_part() {
  part_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListNextReply::_internal_part() const {
  return part_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSignalListNextReply::part() const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListNextReply.part)
  return _internal_part();
}
inline void GetSignalListNextReply::_internal_set_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  part_ = value;
}
inline void GetSignalListNextReply::set_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:Network.GetSignalListNextReply.part)
}

// repeated string appSignalIds = 3;
inline int GetSignalListNextReply::_internal_appsignalids_size() const {
  return appsignalids_.size();
}
inline int GetSignalListNextReply::appsignalids_size() const {
  return _internal_appsignalids_size();
}
inline void GetSignalListNextReply::clear_appsignalids() {
  appsignalids_.Clear();
}
inline std::string* GetSignalListNextReply::add_appsignalids() {
  // @@protoc_insertion_point(field_add_mutable:Network.GetSignalListNextReply.appSignalIds)
  return _internal_add_appsignalids();
}
inline const std::string& GetSignalListNextReply::_internal_appsignalids(int index) const {
  return appsignalids_.Get(index);
}
inline const std::string& GetSignalListNextReply::appsignalids(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetSignalListNextReply.appSignalIds)
  return _internal_appsignalids(index);
}
inline std::string* GetSignalListNextReply::mutable_appsignalids(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetSignalListNextReply.appSignalIds)
  return appsignalids_.Mutable(index);
}
inline void GetSignalListNextReply::set_appsignalids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Network.GetSignalListNextReply.appSignalIds)
  appsignalids_.Mutable(index)->assign(value);
}
inline void GetSignalListNextReply::set_appsignalids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Network.GetSignalListNextReply.appSignalIds)
  appsignalids_.Mutable(index)->assign(std::move(value));
}
inline void GetSignalListNextReply::set_appsignalids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  appsignalids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Network.GetSignalListNextReply.appSignalIds)
}
inline void GetSignalListNextReply::set_appsignalids(int index, const char* value, size_t size) {
  appsignalids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Network.GetSignalListNextReply.appSignalIds)
}
inline std::string* GetSignalListNextReply::_internal_add_appsignalids() {
  return appsignalids_.Add();
}
inline void GetSignalListNextReply::add_appsignalids(const std::string& value) {
  appsignalids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Network.GetSignalListNextReply.appSignalIds)
}
inline void GetSignalListNextReply::add_appsignalids(std::string&& value) {
  appsignalids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Network.GetSignalListNextReply.appSignalIds)
}
inline void GetSignalListNextReply::add_appsignalids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  appsignalids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Network.GetSignalListNextReply.appSignalIds)
}
inline void GetSignalListNextReply::add_appsignalids(const char* value, size_t size) {
  appsignalids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Network.GetSignalListNextReply.appSignalIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSignalListNextReply::appsignalids() const {
  // @@protoc_insertion_point(field_list:Network.GetSignalListNextReply.appSignalIds)
  return appsignalids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSignalListNextReply::mutable_appsignalids() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetSignalListNextReply.appSignalIds)
  return &appsignalids_;
}

// -------------------------------------------------------------------

// GetAppSignalParamRequest

// repeated uint64 signalHashes = 1;
inline int GetAppSignalParamRequest::_internal_signalhashes_size() const {
  return signalhashes_.size();
}
inline int GetAppSignalParamRequest::signalhashes_size() const {
  return _internal_signalhashes_size();
}
inline void GetAppSignalParamRequest::clear_signalhashes() {
  signalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalParamRequest::_internal_signalhashes(int index) const {
  return signalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalParamRequest::signalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalParamRequest.signalHashes)
  return _internal_signalhashes(index);
}
inline void GetAppSignalParamRequest::set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalParamRequest.signalHashes)
}
inline void GetAppSignalParamRequest::_internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Add(value);
}
inline void GetAppSignalParamRequest::add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_signalhashes(value);
  // @@protoc_insertion_point(field_add:Network.GetAppSignalParamRequest.signalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalParamRequest::_internal_signalhashes() const {
  return signalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalParamRequest::signalhashes() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalParamRequest.signalHashes)
  return _internal_signalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalParamRequest::_internal_mutable_signalhashes() {
  return &signalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalParamRequest::mutable_signalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalParamRequest.signalHashes)
  return _internal_mutable_signalhashes();
}

// -------------------------------------------------------------------

// GetAppSignalParamReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalParamReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalParamReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalParamReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalParamReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalParamReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalParamReply.error)
  return _internal_error();
}
inline void GetAppSignalParamReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void GetAppSignalParamReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalParamReply.error)
}

// repeated .Proto.AppSignal appSignals = 2;
inline int GetAppSignalParamReply::_internal_appsignals_size() const {
  return appsignals_.size();
}
inline int GetAppSignalParamReply::appsignals_size() const {
  return _internal_appsignals_size();
}
inline ::Proto::AppSignal* GetAppSignalParamReply::mutable_appsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalParamReply.appSignals)
  return appsignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >*
GetAppSignalParamReply::mutable_appsignals() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalParamReply.appSignals)
  return &appsignals_;
}
inline const ::Proto::AppSignal& GetAppSignalParamReply::_internal_appsignals(int index) const {
  return appsignals_.Get(index);
}
inline const ::Proto::AppSignal& GetAppSignalParamReply::appsignals(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalParamReply.appSignals)
  return _internal_appsignals(index);
}
inline ::Proto::AppSignal* GetAppSignalParamReply::_internal_add_appsignals() {
  return appsignals_.Add();
}
inline ::Proto::AppSignal* GetAppSignalParamReply::add_appsignals() {
  // @@protoc_insertion_point(field_add:Network.GetAppSignalParamReply.appSignals)
  return _internal_add_appsignals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >&
GetAppSignalParamReply::appsignals() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalParamReply.appSignals)
  return appsignals_;
}

// -------------------------------------------------------------------

// GetAppSignalRequest

// repeated uint64 signalHashes = 1;
inline int GetAppSignalRequest::_internal_signalhashes_size() const {
  return signalhashes_.size();
}
inline int GetAppSignalRequest::signalhashes_size() const {
  return _internal_signalhashes_size();
}
inline void GetAppSignalRequest::clear_signalhashes() {
  signalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalRequest::_internal_signalhashes(int index) const {
  return signalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalRequest::signalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalRequest.signalHashes)
  return _internal_signalhashes(index);
}
inline void GetAppSignalRequest::set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalRequest.signalHashes)
}
inline void GetAppSignalRequest::_internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Add(value);
}
inline void GetAppSignalRequest::add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_signalhashes(value);
  // @@protoc_insertion_point(field_add:Network.GetAppSignalRequest.signalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalRequest::_internal_signalhashes() const {
  return signalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalRequest::signalhashes() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalRequest.signalHashes)
  return _internal_signalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalRequest::_internal_mutable_signalhashes() {
  return &signalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalRequest::mutable_signalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalRequest.signalHashes)
  return _internal_mutable_signalhashes();
}

// -------------------------------------------------------------------

// GetAppSignalReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalReply.error)
  return _internal_error();
}
inline void GetAppSignalReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void GetAppSignalReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalReply.error)
}

// repeated .Proto.AppSignal appSignals = 2;
inline int GetAppSignalReply::_internal_appsignals_size() const {
  return appsignals_.size();
}
inline int GetAppSignalReply::appsignals_size() const {
  return _internal_appsignals_size();
}
inline ::Proto::AppSignal* GetAppSignalReply::mutable_appsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalReply.appSignals)
  return appsignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >*
GetAppSignalReply::mutable_appsignals() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalReply.appSignals)
  return &appsignals_;
}
inline const ::Proto::AppSignal& GetAppSignalReply::_internal_appsignals(int index) const {
  return appsignals_.Get(index);
}
inline const ::Proto::AppSignal& GetAppSignalReply::appsignals(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalReply.appSignals)
  return _internal_appsignals(index);
}
inline ::Proto::AppSignal* GetAppSignalReply::_internal_add_appsignals() {
  return appsignals_.Add();
}
inline ::Proto::AppSignal* GetAppSignalReply::add_appsignals() {
  // @@protoc_insertion_point(field_add:Network.GetAppSignalReply.appSignals)
  return _internal_add_appsignals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignal >&
GetAppSignalReply::appsignals() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalReply.appSignals)
  return appsignals_;
}

// -------------------------------------------------------------------

// GetAppSignalStateRequest

// repeated uint64 signalHashes = 1;
inline int GetAppSignalStateRequest::_internal_signalhashes_size() const {
  return signalhashes_.size();
}
inline int GetAppSignalStateRequest::signalhashes_size() const {
  return _internal_signalhashes_size();
}
inline void GetAppSignalStateRequest::clear_signalhashes() {
  signalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalStateRequest::_internal_signalhashes(int index) const {
  return signalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalStateRequest::signalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateRequest.signalHashes)
  return _internal_signalhashes(index);
}
inline void GetAppSignalStateRequest::set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateRequest.signalHashes)
}
inline void GetAppSignalStateRequest::_internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Add(value);
}
inline void GetAppSignalStateRequest::add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_signalhashes(value);
  // @@protoc_insertion_point(field_add:Network.GetAppSignalStateRequest.signalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalStateRequest::_internal_signalhashes() const {
  return signalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalStateRequest::signalhashes() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalStateRequest.signalHashes)
  return _internal_signalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalStateRequest::_internal_mutable_signalhashes() {
  return &signalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalStateRequest::mutable_signalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalStateRequest.signalHashes)
  return _internal_mutable_signalhashes();
}

// -------------------------------------------------------------------

// GetAppSignalStateReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalStateReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAppSignalStateReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalStateReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStateReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStateReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateReply.error)
  return _internal_error();
}
inline void GetAppSignalStateReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  error_ = value;
}
inline void GetAppSignalStateReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateReply.error)
}

// optional int64 serverTimeUtc = 2;
inline bool GetAppSignalStateReply::_internal_has_servertimeutc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStateReply::has_servertimeutc() const {
  return _internal_has_servertimeutc();
}
inline void GetAppSignalStateReply::clear_servertimeutc() {
  servertimeutc_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateReply::_internal_servertimeutc() const {
  return servertimeutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateReply::servertimeutc() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateReply.serverTimeUtc)
  return _internal_servertimeutc();
}
inline void GetAppSignalStateReply::_internal_set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  servertimeutc_ = value;
}
inline void GetAppSignalStateReply::set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertimeutc(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateReply.serverTimeUtc)
}

// optional int64 serverTimeLocal = 3;
inline bool GetAppSignalStateReply::_internal_has_servertimelocal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAppSignalStateReply::has_servertimelocal() const {
  return _internal_has_servertimelocal();
}
inline void GetAppSignalStateReply::clear_servertimelocal() {
  servertimelocal_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateReply::_internal_servertimelocal() const {
  return servertimelocal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateReply::servertimelocal() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateReply.serverTimeLocal)
  return _internal_servertimelocal();
}
inline void GetAppSignalStateReply::_internal_set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  servertimelocal_ = value;
}
inline void GetAppSignalStateReply::set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertimelocal(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateReply.serverTimeLocal)
}

// repeated .Proto.AppSignalState appSignalStates = 4;
inline int GetAppSignalStateReply::_internal_appsignalstates_size() const {
  return appsignalstates_.size();
}
inline int GetAppSignalStateReply::appsignalstates_size() const {
  return _internal_appsignalstates_size();
}
inline ::Proto::AppSignalState* GetAppSignalStateReply::mutable_appsignalstates(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStateReply.appSignalStates)
  return appsignalstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
GetAppSignalStateReply::mutable_appsignalstates() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalStateReply.appSignalStates)
  return &appsignalstates_;
}
inline const ::Proto::AppSignalState& GetAppSignalStateReply::_internal_appsignalstates(int index) const {
  return appsignalstates_.Get(index);
}
inline const ::Proto::AppSignalState& GetAppSignalStateReply::appsignalstates(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateReply.appSignalStates)
  return _internal_appsignalstates(index);
}
inline ::Proto::AppSignalState* GetAppSignalStateReply::_internal_add_appsignalstates() {
  return appsignalstates_.Add();
}
inline ::Proto::AppSignalState* GetAppSignalStateReply::add_appsignalstates() {
  // @@protoc_insertion_point(field_add:Network.GetAppSignalStateReply.appSignalStates)
  return _internal_add_appsignalstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
GetAppSignalStateReply::appsignalstates() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalStateReply.appSignalStates)
  return appsignalstates_;
}

// -------------------------------------------------------------------

// GetAppSignalStateChangesRequest

// -------------------------------------------------------------------

// GetAppSignalStateChangesReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalStateChangesReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAppSignalStateChangesReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalStateChangesReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStateChangesReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStateChangesReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateChangesReply.error)
  return _internal_error();
}
inline void GetAppSignalStateChangesReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void GetAppSignalStateChangesReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateChangesReply.error)
}

// optional int64 serverTimeUtc = 2;
inline bool GetAppSignalStateChangesReply::_internal_has_servertimeutc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStateChangesReply::has_servertimeutc() const {
  return _internal_has_servertimeutc();
}
inline void GetAppSignalStateChangesReply::clear_servertimeutc() {
  servertimeutc_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateChangesReply::_internal_servertimeutc() const {
  return servertimeutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateChangesReply::servertimeutc() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateChangesReply.serverTimeUtc)
  return _internal_servertimeutc();
}
inline void GetAppSignalStateChangesReply::_internal_set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  servertimeutc_ = value;
}
inline void GetAppSignalStateChangesReply::set_servertimeutc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertimeutc(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateChangesReply.serverTimeUtc)
}

// optional int64 serverTimeLocal = 3;
inline bool GetAppSignalStateChangesReply::_internal_has_servertimelocal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAppSignalStateChangesReply::has_servertimelocal() const {
  return _internal_has_servertimelocal();
}
inline void GetAppSignalStateChangesReply::clear_servertimelocal() {
  servertimelocal_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateChangesReply::_internal_servertimelocal() const {
  return servertimelocal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStateChangesReply::servertimelocal() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateChangesReply.serverTimeLocal)
  return _internal_servertimelocal();
}
inline void GetAppSignalStateChangesReply::_internal_set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  servertimelocal_ = value;
}
inline void GetAppSignalStateChangesReply::set_servertimelocal(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertimelocal(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateChangesReply.serverTimeLocal)
}

// optional int32 pendingStatesCount = 4 [default = 0];
inline bool GetAppSignalStateChangesReply::_internal_has_pendingstatescount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAppSignalStateChangesReply::has_pendingstatescount() const {
  return _internal_has_pendingstatescount();
}
inline void GetAppSignalStateChangesReply::clear_pendingstatescount() {
  pendingstatescount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStateChangesReply::_internal_pendingstatescount() const {
  return pendingstatescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStateChangesReply::pendingstatescount() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateChangesReply.pendingStatesCount)
  return _internal_pendingstatescount();
}
inline void GetAppSignalStateChangesReply::_internal_set_pendingstatescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pendingstatescount_ = value;
}
inline void GetAppSignalStateChangesReply::set_pendingstatescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pendingstatescount(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStateChangesReply.pendingStatesCount)
}

// repeated .Proto.AppSignalState appSignalStates = 5;
inline int GetAppSignalStateChangesReply::_internal_appsignalstates_size() const {
  return appsignalstates_.size();
}
inline int GetAppSignalStateChangesReply::appsignalstates_size() const {
  return _internal_appsignalstates_size();
}
inline ::Proto::AppSignalState* GetAppSignalStateChangesReply::mutable_appsignalstates(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStateChangesReply.appSignalStates)
  return appsignalstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
GetAppSignalStateChangesReply::mutable_appsignalstates() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalStateChangesReply.appSignalStates)
  return &appsignalstates_;
}
inline const ::Proto::AppSignalState& GetAppSignalStateChangesReply::_internal_appsignalstates(int index) const {
  return appsignalstates_.Get(index);
}
inline const ::Proto::AppSignalState& GetAppSignalStateChangesReply::appsignalstates(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStateChangesReply.appSignalStates)
  return _internal_appsignalstates(index);
}
inline ::Proto::AppSignalState* GetAppSignalStateChangesReply::_internal_add_appsignalstates() {
  return appsignalstates_.Add();
}
inline ::Proto::AppSignalState* GetAppSignalStateChangesReply::add_appsignalstates() {
  // @@protoc_insertion_point(field_add:Network.GetAppSignalStateChangesReply.appSignalStates)
  return _internal_add_appsignalstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
GetAppSignalStateChangesReply::appsignalstates() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalStateChangesReply.appSignalStates)
  return appsignalstates_;
}

// -------------------------------------------------------------------

// DataSourceInfo

// optional uint64 id = 1 [default = 0];
inline bool DataSourceInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DataSourceInfo::has_id() const {
  return _internal_has_id();
}
inline void DataSourceInfo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSourceInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSourceInfo::id() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.id)
  return _internal_id();
}
inline void DataSourceInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void DataSourceInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.id)
}

// optional string lmEquipmentID = 2;
inline bool DataSourceInfo::_internal_has_lmequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmequipmentid() const {
  return _internal_has_lmequipmentid();
}
inline void DataSourceInfo::clear_lmequipmentid() {
  lmequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataSourceInfo::lmequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmEquipmentID)
  return _internal_lmequipmentid();
}
inline void DataSourceInfo::set_lmequipmentid(const std::string& value) {
  _internal_set_lmequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmEquipmentID)
}
inline std::string* DataSourceInfo::mutable_lmequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmEquipmentID)
  return _internal_mutable_lmequipmentid();
}
inline const std::string& DataSourceInfo::_internal_lmequipmentid() const {
  return lmequipmentid_.Get();
}
inline void DataSourceInfo::_internal_set_lmequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmEquipmentID)
}
inline void DataSourceInfo::set_lmequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmEquipmentID)
}
inline void DataSourceInfo::set_lmequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmEquipmentID)
}
inline std::string* DataSourceInfo::_internal_mutable_lmequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return lmequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmequipmentid() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmEquipmentID)
  if (!_internal_has_lmequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lmequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmequipmentid(std::string* lmequipmentid) {
  if (lmequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lmequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmEquipmentID)
}

// optional string lmCaption = 3;
inline bool DataSourceInfo::_internal_has_lmcaption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmcaption() const {
  return _internal_has_lmcaption();
}
inline void DataSourceInfo::clear_lmcaption() {
  lmcaption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataSourceInfo::lmcaption() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmCaption)
  return _internal_lmcaption();
}
inline void DataSourceInfo::set_lmcaption(const std::string& value) {
  _internal_set_lmcaption(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmCaption)
}
inline std::string* DataSourceInfo::mutable_lmcaption() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmCaption)
  return _internal_mutable_lmcaption();
}
inline const std::string& DataSourceInfo::_internal_lmcaption() const {
  return lmcaption_.Get();
}
inline void DataSourceInfo::_internal_set_lmcaption(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lmcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmcaption(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lmcaption_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmCaption)
}
inline void DataSourceInfo::set_lmcaption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lmcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmCaption)
}
inline void DataSourceInfo::set_lmcaption(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lmcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmCaption)
}
inline std::string* DataSourceInfo::_internal_mutable_lmcaption() {
  _has_bits_[0] |= 0x00000002u;
  return lmcaption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmcaption() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmCaption)
  if (!_internal_has_lmcaption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lmcaption_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmcaption(std::string* lmcaption) {
  if (lmcaption != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lmcaption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmcaption,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmCaption)
}

// optional int32 lmDataType = 4 [default = 0];
inline bool DataSourceInfo::_internal_has_lmdatatype() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmdatatype() const {
  return _internal_has_lmdatatype();
}
inline void DataSourceInfo::clear_lmdatatype() {
  lmdatatype_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::_internal_lmdatatype() const {
  return lmdatatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::lmdatatype() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmDataType)
  return _internal_lmdatatype();
}
inline void DataSourceInfo::_internal_set_lmdatatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  lmdatatype_ = value;
}
inline void DataSourceInfo::set_lmdatatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmdatatype(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmDataType)
}

// optional string lmIP = 5;
inline bool DataSourceInfo::_internal_has_lmip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmip() const {
  return _internal_has_lmip();
}
inline void DataSourceInfo::clear_lmip() {
  lmip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DataSourceInfo::lmip() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmIP)
  return _internal_lmip();
}
inline void DataSourceInfo::set_lmip(const std::string& value) {
  _internal_set_lmip(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmIP)
}
inline std::string* DataSourceInfo::mutable_lmip() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmIP)
  return _internal_mutable_lmip();
}
inline const std::string& DataSourceInfo::_internal_lmip() const {
  return lmip_.Get();
}
inline void DataSourceInfo::_internal_set_lmip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  lmip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmip(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  lmip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmIP)
}
inline void DataSourceInfo::set_lmip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  lmip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmIP)
}
inline void DataSourceInfo::set_lmip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  lmip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmIP)
}
inline std::string* DataSourceInfo::_internal_mutable_lmip() {
  _has_bits_[0] |= 0x00000004u;
  return lmip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmip() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmIP)
  if (!_internal_has_lmip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return lmip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmip(std::string* lmip) {
  if (lmip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lmip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmIP)
}

// optional int32 lmPort = 6 [default = 0];
inline bool DataSourceInfo::_internal_has_lmport() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmport() const {
  return _internal_has_lmport();
}
inline void DataSourceInfo::clear_lmport() {
  lmport_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::_internal_lmport() const {
  return lmport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::lmport() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmPort)
  return _internal_lmport();
}
inline void DataSourceInfo::_internal_set_lmport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  lmport_ = value;
}
inline void DataSourceInfo::set_lmport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmport(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmPort)
}

// optional int32 lmSubsystemKey = 7 [default = 0];
inline bool DataSourceInfo::_internal_has_lmsubsystemkey() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmsubsystemkey() const {
  return _internal_has_lmsubsystemkey();
}
inline void DataSourceInfo::clear_lmsubsystemkey() {
  lmsubsystemkey_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::_internal_lmsubsystemkey() const {
  return lmsubsystemkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::lmsubsystemkey() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmSubsystemKey)
  return _internal_lmsubsystemkey();
}
inline void DataSourceInfo::_internal_set_lmsubsystemkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  lmsubsystemkey_ = value;
}
inline void DataSourceInfo::set_lmsubsystemkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmsubsystemkey(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmSubsystemKey)
}

// optional string lmSubsystemID = 8;
inline bool DataSourceInfo::_internal_has_lmsubsystemid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmsubsystemid() const {
  return _internal_has_lmsubsystemid();
}
inline void DataSourceInfo::clear_lmsubsystemid() {
  lmsubsystemid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DataSourceInfo::lmsubsystemid() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmSubsystemID)
  return _internal_lmsubsystemid();
}
inline void DataSourceInfo::set_lmsubsystemid(const std::string& value) {
  _internal_set_lmsubsystemid(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmSubsystemID)
}
inline std::string* DataSourceInfo::mutable_lmsubsystemid() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmSubsystemID)
  return _internal_mutable_lmsubsystemid();
}
inline const std::string& DataSourceInfo::_internal_lmsubsystemid() const {
  return lmsubsystemid_.Get();
}
inline void DataSourceInfo::_internal_set_lmsubsystemid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  lmsubsystemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmsubsystemid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  lmsubsystemid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmSubsystemID)
}
inline void DataSourceInfo::set_lmsubsystemid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  lmsubsystemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmSubsystemID)
}
inline void DataSourceInfo::set_lmsubsystemid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  lmsubsystemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmSubsystemID)
}
inline std::string* DataSourceInfo::_internal_mutable_lmsubsystemid() {
  _has_bits_[0] |= 0x00000008u;
  return lmsubsystemid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmsubsystemid() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmSubsystemID)
  if (!_internal_has_lmsubsystemid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return lmsubsystemid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmsubsystemid(std::string* lmsubsystemid) {
  if (lmsubsystemid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lmsubsystemid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmsubsystemid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmSubsystemID)
}

// optional string lmSubsystemChannel = 9;
inline bool DataSourceInfo::_internal_has_lmsubsystemchannel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmsubsystemchannel() const {
  return _internal_has_lmsubsystemchannel();
}
inline void DataSourceInfo::clear_lmsubsystemchannel() {
  lmsubsystemchannel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DataSourceInfo::lmsubsystemchannel() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmSubsystemChannel)
  return _internal_lmsubsystemchannel();
}
inline void DataSourceInfo::set_lmsubsystemchannel(const std::string& value) {
  _internal_set_lmsubsystemchannel(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmSubsystemChannel)
}
inline std::string* DataSourceInfo::mutable_lmsubsystemchannel() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmSubsystemChannel)
  return _internal_mutable_lmsubsystemchannel();
}
inline const std::string& DataSourceInfo::_internal_lmsubsystemchannel() const {
  return lmsubsystemchannel_.Get();
}
inline void DataSourceInfo::_internal_set_lmsubsystemchannel(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  lmsubsystemchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmsubsystemchannel(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  lmsubsystemchannel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmSubsystemChannel)
}
inline void DataSourceInfo::set_lmsubsystemchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  lmsubsystemchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmSubsystemChannel)
}
inline void DataSourceInfo::set_lmsubsystemchannel(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  lmsubsystemchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmSubsystemChannel)
}
inline std::string* DataSourceInfo::_internal_mutable_lmsubsystemchannel() {
  _has_bits_[0] |= 0x00000010u;
  return lmsubsystemchannel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmsubsystemchannel() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmSubsystemChannel)
  if (!_internal_has_lmsubsystemchannel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return lmsubsystemchannel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmsubsystemchannel(std::string* lmsubsystemchannel) {
  if (lmsubsystemchannel != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lmsubsystemchannel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmsubsystemchannel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmSubsystemChannel)
}

// optional int32 lmNumber = 10 [default = 0];
inline bool DataSourceInfo::_internal_has_lmnumber() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmnumber() const {
  return _internal_has_lmnumber();
}
inline void DataSourceInfo::clear_lmnumber() {
  lmnumber_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::_internal_lmnumber() const {
  return lmnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::lmnumber() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmNumber)
  return _internal_lmnumber();
}
inline void DataSourceInfo::_internal_set_lmnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  lmnumber_ = value;
}
inline void DataSourceInfo::set_lmnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmnumber(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmNumber)
}

// optional int32 lmModuleType = 11 [default = 0];
inline bool DataSourceInfo::_internal_has_lmmoduletype() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmmoduletype() const {
  return _internal_has_lmmoduletype();
}
inline void DataSourceInfo::clear_lmmoduletype() {
  lmmoduletype_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::_internal_lmmoduletype() const {
  return lmmoduletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::lmmoduletype() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmModuleType)
  return _internal_lmmoduletype();
}
inline void DataSourceInfo::_internal_set_lmmoduletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  lmmoduletype_ = value;
}
inline void DataSourceInfo::set_lmmoduletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmmoduletype(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmModuleType)
}

// optional string lmAdapterID = 12;
inline bool DataSourceInfo::_internal_has_lmadapterid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmadapterid() const {
  return _internal_has_lmadapterid();
}
inline void DataSourceInfo::clear_lmadapterid() {
  lmadapterid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DataSourceInfo::lmadapterid() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmAdapterID)
  return _internal_lmadapterid();
}
inline void DataSourceInfo::set_lmadapterid(const std::string& value) {
  _internal_set_lmadapterid(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmAdapterID)
}
inline std::string* DataSourceInfo::mutable_lmadapterid() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmAdapterID)
  return _internal_mutable_lmadapterid();
}
inline const std::string& DataSourceInfo::_internal_lmadapterid() const {
  return lmadapterid_.Get();
}
inline void DataSourceInfo::_internal_set_lmadapterid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  lmadapterid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmadapterid(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  lmadapterid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmAdapterID)
}
inline void DataSourceInfo::set_lmadapterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  lmadapterid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmAdapterID)
}
inline void DataSourceInfo::set_lmadapterid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  lmadapterid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmAdapterID)
}
inline std::string* DataSourceInfo::_internal_mutable_lmadapterid() {
  _has_bits_[0] |= 0x00000020u;
  return lmadapterid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmadapterid() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmAdapterID)
  if (!_internal_has_lmadapterid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return lmadapterid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmadapterid(std::string* lmadapterid) {
  if (lmadapterid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lmadapterid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmadapterid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmAdapterID)
}

// optional bool lmDataEnable = 13 [default = false];
inline bool DataSourceInfo::_internal_has_lmdataenable() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmdataenable() const {
  return _internal_has_lmdataenable();
}
inline void DataSourceInfo::clear_lmdataenable() {
  lmdataenable_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool DataSourceInfo::_internal_lmdataenable() const {
  return lmdataenable_;
}
inline bool DataSourceInfo::lmdataenable() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmDataEnable)
  return _internal_lmdataenable();
}
inline void DataSourceInfo::_internal_set_lmdataenable(bool value) {
  _has_bits_[0] |= 0x00002000u;
  lmdataenable_ = value;
}
inline void DataSourceInfo::set_lmdataenable(bool value) {
  _internal_set_lmdataenable(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmDataEnable)
}

// optional uint32 lmDataID = 14 [default = 0];
inline bool DataSourceInfo::_internal_has_lmdataid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmdataid() const {
  return _internal_has_lmdataid();
}
inline void DataSourceInfo::clear_lmdataid() {
  lmdataid_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataSourceInfo::_internal_lmdataid() const {
  return lmdataid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataSourceInfo::lmdataid() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmDataID)
  return _internal_lmdataid();
}
inline void DataSourceInfo::_internal_set_lmdataid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  lmdataid_ = value;
}
inline void DataSourceInfo::set_lmdataid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lmdataid(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmDataID)
}

// optional uint64 lmUniqueID = 15 [default = 0];
inline bool DataSourceInfo::_internal_has_lmuniqueid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmuniqueid() const {
  return _internal_has_lmuniqueid();
}
inline void DataSourceInfo::clear_lmuniqueid() {
  lmuniqueid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSourceInfo::_internal_lmuniqueid() const {
  return lmuniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSourceInfo::lmuniqueid() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmUniqueID)
  return _internal_lmuniqueid();
}
inline void DataSourceInfo::_internal_set_lmuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  lmuniqueid_ = value;
}
inline void DataSourceInfo::set_lmuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lmuniqueid(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmUniqueID)
}

// optional int32 lmRupFramesQuantity = 16 [default = 0];
inline bool DataSourceInfo::_internal_has_lmrupframesquantity() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmrupframesquantity() const {
  return _internal_has_lmrupframesquantity();
}
inline void DataSourceInfo::clear_lmrupframesquantity() {
  lmrupframesquantity_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::_internal_lmrupframesquantity() const {
  return lmrupframesquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceInfo::lmrupframesquantity() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmRupFramesQuantity)
  return _internal_lmrupframesquantity();
}
inline void DataSourceInfo::_internal_set_lmrupframesquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  lmrupframesquantity_ = value;
}
inline void DataSourceInfo::set_lmrupframesquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lmrupframesquantity(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmRupFramesQuantity)
}

// optional string lmPresetName = 17;
inline bool DataSourceInfo::_internal_has_lmpresetname() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataSourceInfo::has_lmpresetname() const {
  return _internal_has_lmpresetname();
}
inline void DataSourceInfo::clear_lmpresetname() {
  lmpresetname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DataSourceInfo::lmpresetname() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceInfo.lmPresetName)
  return _internal_lmpresetname();
}
inline void DataSourceInfo::set_lmpresetname(const std::string& value) {
  _internal_set_lmpresetname(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceInfo.lmPresetName)
}
inline std::string* DataSourceInfo::mutable_lmpresetname() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceInfo.lmPresetName)
  return _internal_mutable_lmpresetname();
}
inline const std::string& DataSourceInfo::_internal_lmpresetname() const {
  return lmpresetname_.Get();
}
inline void DataSourceInfo::_internal_set_lmpresetname(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  lmpresetname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceInfo::set_lmpresetname(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  lmpresetname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceInfo.lmPresetName)
}
inline void DataSourceInfo::set_lmpresetname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  lmpresetname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceInfo.lmPresetName)
}
inline void DataSourceInfo::set_lmpresetname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  lmpresetname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceInfo.lmPresetName)
}
inline std::string* DataSourceInfo::_internal_mutable_lmpresetname() {
  _has_bits_[0] |= 0x00000040u;
  return lmpresetname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceInfo::release_lmpresetname() {
  // @@protoc_insertion_point(field_release:Network.DataSourceInfo.lmPresetName)
  if (!_internal_has_lmpresetname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return lmpresetname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceInfo::set_allocated_lmpresetname(std::string* lmpresetname) {
  if (lmpresetname != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  lmpresetname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmpresetname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceInfo.lmPresetName)
}

// -------------------------------------------------------------------

// GetDataSourcesInfoRequest

// -------------------------------------------------------------------

// GetDataSourcesInfoReply

// optional int32 error = 1 [default = 0];
inline bool GetDataSourcesInfoReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetDataSourcesInfoReply::has_error() const {
  return _internal_has_error();
}
inline void GetDataSourcesInfoReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDataSourcesInfoReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDataSourcesInfoReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetDataSourcesInfoReply.error)
  return _internal_error();
}
inline void GetDataSourcesInfoReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void GetDataSourcesInfoReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetDataSourcesInfoReply.error)
}

// repeated .Network.DataSourceInfo dataSourceInfo = 2;
inline int GetDataSourcesInfoReply::_internal_datasourceinfo_size() const {
  return datasourceinfo_.size();
}
inline int GetDataSourcesInfoReply::datasourceinfo_size() const {
  return _internal_datasourceinfo_size();
}
inline void GetDataSourcesInfoReply::clear_datasourceinfo() {
  datasourceinfo_.Clear();
}
inline ::Network::DataSourceInfo* GetDataSourcesInfoReply::mutable_datasourceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetDataSourcesInfoReply.dataSourceInfo)
  return datasourceinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >*
GetDataSourcesInfoReply::mutable_datasourceinfo() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetDataSourcesInfoReply.dataSourceInfo)
  return &datasourceinfo_;
}
inline const ::Network::DataSourceInfo& GetDataSourcesInfoReply::_internal_datasourceinfo(int index) const {
  return datasourceinfo_.Get(index);
}
inline const ::Network::DataSourceInfo& GetDataSourcesInfoReply::datasourceinfo(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetDataSourcesInfoReply.dataSourceInfo)
  return _internal_datasourceinfo(index);
}
inline ::Network::DataSourceInfo* GetDataSourcesInfoReply::_internal_add_datasourceinfo() {
  return datasourceinfo_.Add();
}
inline ::Network::DataSourceInfo* GetDataSourcesInfoReply::add_datasourceinfo() {
  // @@protoc_insertion_point(field_add:Network.GetDataSourcesInfoReply.dataSourceInfo)
  return _internal_add_datasourceinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >&
GetDataSourcesInfoReply::datasourceinfo() const {
  // @@protoc_insertion_point(field_list:Network.GetDataSourcesInfoReply.dataSourceInfo)
  return datasourceinfo_;
}

// -------------------------------------------------------------------

// AppDataReceiveState

// optional int32 receivingRate = 1 [default = 0];
inline bool AppDataReceiveState::_internal_has_receivingrate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_receivingrate() const {
  return _internal_has_receivingrate();
}
inline void AppDataReceiveState::clear_receivingrate() {
  receivingrate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataReceiveState::_internal_receivingrate() const {
  return receivingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataReceiveState::receivingrate() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.receivingRate)
  return _internal_receivingrate();
}
inline void AppDataReceiveState::_internal_set_receivingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  receivingrate_ = value;
}
inline void AppDataReceiveState::set_receivingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receivingrate(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.receivingRate)
}

// optional int32 udpReceivingRate = 2 [default = 0];
inline bool AppDataReceiveState::_internal_has_udpreceivingrate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_udpreceivingrate() const {
  return _internal_has_udpreceivingrate();
}
inline void AppDataReceiveState::clear_udpreceivingrate() {
  udpreceivingrate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataReceiveState::_internal_udpreceivingrate() const {
  return udpreceivingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataReceiveState::udpreceivingrate() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.udpReceivingRate)
  return _internal_udpreceivingrate();
}
inline void AppDataReceiveState::_internal_set_udpreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  udpreceivingrate_ = value;
}
inline void AppDataReceiveState::set_udpreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udpreceivingrate(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.udpReceivingRate)
}

// optional int32 rupFramesReceivingRate = 3 [default = 0];
inline bool AppDataReceiveState::_internal_has_rupframesreceivingrate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_rupframesreceivingrate() const {
  return _internal_has_rupframesreceivingrate();
}
inline void AppDataReceiveState::clear_rupframesreceivingrate() {
  rupframesreceivingrate_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataReceiveState::_internal_rupframesreceivingrate() const {
  return rupframesreceivingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataReceiveState::rupframesreceivingrate() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.rupFramesReceivingRate)
  return _internal_rupframesreceivingrate();
}
inline void AppDataReceiveState::_internal_set_rupframesreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  rupframesreceivingrate_ = value;
}
inline void AppDataReceiveState::set_rupframesreceivingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rupframesreceivingrate(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.rupFramesReceivingRate)
}

// optional int64 rupFramesCount = 4 [default = 0];
inline bool AppDataReceiveState::_internal_has_rupframescount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_rupframescount() const {
  return _internal_has_rupframescount();
}
inline void AppDataReceiveState::clear_rupframescount() {
  rupframescount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_rupframescount() const {
  return rupframescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::rupframescount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.rupFramesCount)
  return _internal_rupframescount();
}
inline void AppDataReceiveState::_internal_set_rupframescount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  rupframescount_ = value;
}
inline void AppDataReceiveState::set_rupframescount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rupframescount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.rupFramesCount)
}

// optional int64 simFramesCount = 5 [default = 0];
inline bool AppDataReceiveState::_internal_has_simframescount() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_simframescount() const {
  return _internal_has_simframescount();
}
inline void AppDataReceiveState::clear_simframescount() {
  simframescount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_simframescount() const {
  return simframescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::simframescount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.simFramesCount)
  return _internal_simframescount();
}
inline void AppDataReceiveState::_internal_set_simframescount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  simframescount_ = value;
}
inline void AppDataReceiveState::set_simframescount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_simframescount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.simFramesCount)
}

// optional int64 errDatagramSize = 6 [default = 0];
inline bool AppDataReceiveState::_internal_has_errdatagramsize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_errdatagramsize() const {
  return _internal_has_errdatagramsize();
}
inline void AppDataReceiveState::clear_errdatagramsize() {
  errdatagramsize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_errdatagramsize() const {
  return errdatagramsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::errdatagramsize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.errDatagramSize)
  return _internal_errdatagramsize();
}
inline void AppDataReceiveState::_internal_set_errdatagramsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  errdatagramsize_ = value;
}
inline void AppDataReceiveState::set_errdatagramsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errdatagramsize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.errDatagramSize)
}

// optional int64 errSimVersion = 7 [default = 0];
inline bool AppDataReceiveState::_internal_has_errsimversion() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_errsimversion() const {
  return _internal_has_errsimversion();
}
inline void AppDataReceiveState::clear_errsimversion() {
  errsimversion_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_errsimversion() const {
  return errsimversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::errsimversion() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.errSimVersion)
  return _internal_errsimversion();
}
inline void AppDataReceiveState::_internal_set_errsimversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  errsimversion_ = value;
}
inline void AppDataReceiveState::set_errsimversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errsimversion(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.errSimVersion)
}

// optional int64 errUnknownAppDataSourceIP = 8 [default = 0];
inline bool AppDataReceiveState::_internal_has_errunknownappdatasourceip() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_errunknownappdatasourceip() const {
  return _internal_has_errunknownappdatasourceip();
}
inline void AppDataReceiveState::clear_errunknownappdatasourceip() {
  errunknownappdatasourceip_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_errunknownappdatasourceip() const {
  return errunknownappdatasourceip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::errunknownappdatasourceip() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.errUnknownAppDataSourceIP)
  return _internal_errunknownappdatasourceip();
}
inline void AppDataReceiveState::_internal_set_errunknownappdatasourceip(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  errunknownappdatasourceip_ = value;
}
inline void AppDataReceiveState::set_errunknownappdatasourceip(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errunknownappdatasourceip(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.errUnknownAppDataSourceIP)
}

// optional int64 errRupFrameCRC = 9 [default = 0];
inline bool AppDataReceiveState::_internal_has_errrupframecrc() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_errrupframecrc() const {
  return _internal_has_errrupframecrc();
}
inline void AppDataReceiveState::clear_errrupframecrc() {
  errrupframecrc_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_errrupframecrc() const {
  return errrupframecrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::errrupframecrc() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.errRupFrameCRC)
  return _internal_errrupframecrc();
}
inline void AppDataReceiveState::_internal_set_errrupframecrc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  errrupframecrc_ = value;
}
inline void AppDataReceiveState::set_errrupframecrc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupframecrc(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.errRupFrameCRC)
}

// optional int64 errNotExpectedSimPacket = 10 [default = 0];
inline bool AppDataReceiveState::_internal_has_errnotexpectedsimpacket() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppDataReceiveState::has_errnotexpectedsimpacket() const {
  return _internal_has_errnotexpectedsimpacket();
}
inline void AppDataReceiveState::clear_errnotexpectedsimpacket() {
  errnotexpectedsimpacket_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::_internal_errnotexpectedsimpacket() const {
  return errnotexpectedsimpacket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataReceiveState::errnotexpectedsimpacket() const {
  // @@protoc_insertion_point(field_get:Network.AppDataReceiveState.errNotExpectedSimPacket)
  return _internal_errnotexpectedsimpacket();
}
inline void AppDataReceiveState::_internal_set_errnotexpectedsimpacket(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  errnotexpectedsimpacket_ = value;
}
inline void AppDataReceiveState::set_errnotexpectedsimpacket(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errnotexpectedsimpacket(value);
  // @@protoc_insertion_point(field_set:Network.AppDataReceiveState.errNotExpectedSimPacket)
}

// -------------------------------------------------------------------

// AppDataSourceState

// optional uint64 id = 1 [default = 0];
inline bool AppDataSourceState::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppDataSourceState::has_id() const {
  return _internal_has_id();
}
inline void AppDataSourceState::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppDataSourceState::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppDataSourceState::id() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.id)
  return _internal_id();
}
inline void AppDataSourceState::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AppDataSourceState::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.id)
}

// optional bool dataReceives = 2 [default = false];
inline bool AppDataSourceState::_internal_has_datareceives() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AppDataSourceState::has_datareceives() const {
  return _internal_has_datareceives();
}
inline void AppDataSourceState::clear_datareceives() {
  datareceives_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool AppDataSourceState::_internal_datareceives() const {
  return datareceives_;
}
inline bool AppDataSourceState::datareceives() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.dataReceives)
  return _internal_datareceives();
}
inline void AppDataSourceState::_internal_set_datareceives(bool value) {
  _has_bits_[0] |= 0x00000400u;
  datareceives_ = value;
}
inline void AppDataSourceState::set_datareceives(bool value) {
  _internal_set_datareceives(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.dataReceives)
}

// optional int64 uptime = 3 [default = 0];
inline bool AppDataSourceState::_internal_has_uptime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppDataSourceState::has_uptime() const {
  return _internal_has_uptime();
}
inline void AppDataSourceState::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::uptime() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.uptime)
  return _internal_uptime();
}
inline void AppDataSourceState::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  uptime_ = value;
}
inline void AppDataSourceState::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.uptime)
}

// optional uint64 receivedDataID = 4 [default = 0];
inline bool AppDataSourceState::_internal_has_receiveddataid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppDataSourceState::has_receiveddataid() const {
  return _internal_has_receiveddataid();
}
inline void AppDataSourceState::clear_receiveddataid() {
  receiveddataid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppDataSourceState::_internal_receiveddataid() const {
  return receiveddataid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppDataSourceState::receiveddataid() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.receivedDataID)
  return _internal_receiveddataid();
}
inline void AppDataSourceState::_internal_set_receiveddataid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  receiveddataid_ = value;
}
inline void AppDataSourceState::set_receiveddataid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_receiveddataid(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.receivedDataID)
}

// optional int32 rupFramesQueueCurSize = 5 [default = 0];
inline bool AppDataSourceState::_internal_has_rupframesqueuecursize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppDataSourceState::has_rupframesqueuecursize() const {
  return _internal_has_rupframesqueuecursize();
}
inline void AppDataSourceState::clear_rupframesqueuecursize() {
  rupframesqueuecursize_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_rupframesqueuecursize() const {
  return rupframesqueuecursize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::rupframesqueuecursize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.rupFramesQueueCurSize)
  return _internal_rupframesqueuecursize();
}
inline void AppDataSourceState::_internal_set_rupframesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rupframesqueuecursize_ = value;
}
inline void AppDataSourceState::set_rupframesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rupframesqueuecursize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.rupFramesQueueCurSize)
}

// optional int32 rupFramesQueueCurMaxSize = 6 [default = 0];
inline bool AppDataSourceState::_internal_has_rupframesqueuecurmaxsize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppDataSourceState::has_rupframesqueuecurmaxsize() const {
  return _internal_has_rupframesqueuecurmaxsize();
}
inline void AppDataSourceState::clear_rupframesqueuecurmaxsize() {
  rupframesqueuecurmaxsize_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_rupframesqueuecurmaxsize() const {
  return rupframesqueuecurmaxsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::rupframesqueuecurmaxsize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.rupFramesQueueCurMaxSize)
  return _internal_rupframesqueuecurmaxsize();
}
inline void AppDataSourceState::_internal_set_rupframesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  rupframesqueuecurmaxsize_ = value;
}
inline void AppDataSourceState::set_rupframesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rupframesqueuecurmaxsize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.rupFramesQueueCurMaxSize)
}

// optional double dataReceivingRate = 7 [default = 0];
inline bool AppDataSourceState::_internal_has_datareceivingrate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppDataSourceState::has_datareceivingrate() const {
  return _internal_has_datareceivingrate();
}
inline void AppDataSourceState::clear_datareceivingrate() {
  datareceivingrate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double AppDataSourceState::_internal_datareceivingrate() const {
  return datareceivingrate_;
}
inline double AppDataSourceState::datareceivingrate() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.dataReceivingRate)
  return _internal_datareceivingrate();
}
inline void AppDataSourceState::_internal_set_datareceivingrate(double value) {
  _has_bits_[0] |= 0x00000040u;
  datareceivingrate_ = value;
}
inline void AppDataSourceState::set_datareceivingrate(double value) {
  _internal_set_datareceivingrate(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.dataReceivingRate)
}

// optional int64 receivedDataSize = 8 [default = 0];
inline bool AppDataSourceState::_internal_has_receiveddatasize() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppDataSourceState::has_receiveddatasize() const {
  return _internal_has_receiveddatasize();
}
inline void AppDataSourceState::clear_receiveddatasize() {
  receiveddatasize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_receiveddatasize() const {
  return receiveddatasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::receiveddatasize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.receivedDataSize)
  return _internal_receiveddatasize();
}
inline void AppDataSourceState::_internal_set_receiveddatasize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  receiveddatasize_ = value;
}
inline void AppDataSourceState::set_receiveddatasize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiveddatasize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.receivedDataSize)
}

// optional int64 receivedFramesCount = 9 [default = 0];
inline bool AppDataSourceState::_internal_has_receivedframescount() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppDataSourceState::has_receivedframescount() const {
  return _internal_has_receivedframescount();
}
inline void AppDataSourceState::clear_receivedframescount() {
  receivedframescount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_receivedframescount() const {
  return receivedframescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::receivedframescount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.receivedFramesCount)
  return _internal_receivedframescount();
}
inline void AppDataSourceState::_internal_set_receivedframescount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  receivedframescount_ = value;
}
inline void AppDataSourceState::set_receivedframescount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receivedframescount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.receivedFramesCount)
}

// optional int64 receivedPacketCount = 10 [default = 0];
inline bool AppDataSourceState::_internal_has_receivedpacketcount() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AppDataSourceState::has_receivedpacketcount() const {
  return _internal_has_receivedpacketcount();
}
inline void AppDataSourceState::clear_receivedpacketcount() {
  receivedpacketcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_receivedpacketcount() const {
  return receivedpacketcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::receivedpacketcount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.receivedPacketCount)
  return _internal_receivedpacketcount();
}
inline void AppDataSourceState::_internal_set_receivedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  receivedpacketcount_ = value;
}
inline void AppDataSourceState::set_receivedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receivedpacketcount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.receivedPacketCount)
}

// optional int64 lostPacketCount = 11 [default = 0];
inline bool AppDataSourceState::_internal_has_lostpacketcount() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_lostpacketcount() const {
  return _internal_has_lostpacketcount();
}
inline void AppDataSourceState::clear_lostpacketcount() {
  lostpacketcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_lostpacketcount() const {
  return lostpacketcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::lostpacketcount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.lostPacketCount)
  return _internal_lostpacketcount();
}
inline void AppDataSourceState::_internal_set_lostpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  lostpacketcount_ = value;
}
inline void AppDataSourceState::set_lostpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lostpacketcount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.lostPacketCount)
}

// optional bool dataProcessingEnabled = 12 [default = false];
inline bool AppDataSourceState::_internal_has_dataprocessingenabled() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AppDataSourceState::has_dataprocessingenabled() const {
  return _internal_has_dataprocessingenabled();
}
inline void AppDataSourceState::clear_dataprocessingenabled() {
  dataprocessingenabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool AppDataSourceState::_internal_dataprocessingenabled() const {
  return dataprocessingenabled_;
}
inline bool AppDataSourceState::dataprocessingenabled() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.dataProcessingEnabled)
  return _internal_dataprocessingenabled();
}
inline void AppDataSourceState::_internal_set_dataprocessingenabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  dataprocessingenabled_ = value;
}
inline void AppDataSourceState::set_dataprocessingenabled(bool value) {
  _internal_set_dataprocessingenabled(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.dataProcessingEnabled)
}

// optional int64 processedPacketCount = 13 [default = 0];
inline bool AppDataSourceState::_internal_has_processedpacketcount() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_processedpacketcount() const {
  return _internal_has_processedpacketcount();
}
inline void AppDataSourceState::clear_processedpacketcount() {
  processedpacketcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_processedpacketcount() const {
  return processedpacketcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::processedpacketcount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.processedPacketCount)
  return _internal_processedpacketcount();
}
inline void AppDataSourceState::_internal_set_processedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  processedpacketcount_ = value;
}
inline void AppDataSourceState::set_processedpacketcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_processedpacketcount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.processedPacketCount)
}

// optional int64 lastPacketSystemTime = 14 [default = 0];
inline bool AppDataSourceState::_internal_has_lastpacketsystemtime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_lastpacketsystemtime() const {
  return _internal_has_lastpacketsystemtime();
}
inline void AppDataSourceState::clear_lastpacketsystemtime() {
  lastpacketsystemtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_lastpacketsystemtime() const {
  return lastpacketsystemtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::lastpacketsystemtime() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.lastPacketSystemTime)
  return _internal_lastpacketsystemtime();
}
inline void AppDataSourceState::_internal_set_lastpacketsystemtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  lastpacketsystemtime_ = value;
}
inline void AppDataSourceState::set_lastpacketsystemtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastpacketsystemtime(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.lastPacketSystemTime)
}

// optional int64 rupFramePlantTime = 15 [default = 0];
inline bool AppDataSourceState::_internal_has_rupframeplanttime() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_rupframeplanttime() const {
  return _internal_has_rupframeplanttime();
}
inline void AppDataSourceState::clear_rupframeplanttime() {
  rupframeplanttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_rupframeplanttime() const {
  return rupframeplanttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::rupframeplanttime() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.rupFramePlantTime)
  return _internal_rupframeplanttime();
}
inline void AppDataSourceState::_internal_set_rupframeplanttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  rupframeplanttime_ = value;
}
inline void AppDataSourceState::set_rupframeplanttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rupframeplanttime(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.rupFramePlantTime)
}

// optional uint32 rupFrameNumerator = 16 [default = 0];
inline bool AppDataSourceState::_internal_has_rupframenumerator() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_rupframenumerator() const {
  return _internal_has_rupframenumerator();
}
inline void AppDataSourceState::clear_rupframenumerator() {
  rupframenumerator_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppDataSourceState::_internal_rupframenumerator() const {
  return rupframenumerator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppDataSourceState::rupframenumerator() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.rupFrameNumerator)
  return _internal_rupframenumerator();
}
inline void AppDataSourceState::_internal_set_rupframenumerator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  rupframenumerator_ = value;
}
inline void AppDataSourceState::set_rupframenumerator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rupframenumerator(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.rupFrameNumerator)
}

// optional int32 signalStatesQueueCurSize = 17 [default = 0];
inline bool AppDataSourceState::_internal_has_signalstatesqueuecursize() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_signalstatesqueuecursize() const {
  return _internal_has_signalstatesqueuecursize();
}
inline void AppDataSourceState::clear_signalstatesqueuecursize() {
  signalstatesqueuecursize_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_signalstatesqueuecursize() const {
  return signalstatesqueuecursize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::signalstatesqueuecursize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.signalStatesQueueCurSize)
  return _internal_signalstatesqueuecursize();
}
inline void AppDataSourceState::_internal_set_signalstatesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  signalstatesqueuecursize_ = value;
}
inline void AppDataSourceState::set_signalstatesqueuecursize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalstatesqueuecursize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.signalStatesQueueCurSize)
}

// optional int32 signalStatesQueueCurMaxSize = 18 [default = 0];
inline bool AppDataSourceState::_internal_has_signalstatesqueuecurmaxsize() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_signalstatesqueuecurmaxsize() const {
  return _internal_has_signalstatesqueuecurmaxsize();
}
inline void AppDataSourceState::clear_signalstatesqueuecurmaxsize() {
  signalstatesqueuecurmaxsize_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_signalstatesqueuecurmaxsize() const {
  return signalstatesqueuecurmaxsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::signalstatesqueuecurmaxsize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.signalStatesQueueCurMaxSize)
  return _internal_signalstatesqueuecurmaxsize();
}
inline void AppDataSourceState::_internal_set_signalstatesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  signalstatesqueuecurmaxsize_ = value;
}
inline void AppDataSourceState::set_signalstatesqueuecurmaxsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalstatesqueuecurmaxsize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.signalStatesQueueCurMaxSize)
}

// optional int32 acquiredSignalsCount = 19 [default = 0];
inline bool AppDataSourceState::_internal_has_acquiredsignalscount() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_acquiredsignalscount() const {
  return _internal_has_acquiredsignalscount();
}
inline void AppDataSourceState::clear_acquiredsignalscount() {
  acquiredsignalscount_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_acquiredsignalscount() const {
  return acquiredsignalscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::acquiredsignalscount() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.acquiredSignalsCount)
  return _internal_acquiredsignalscount();
}
inline void AppDataSourceState::_internal_set_acquiredsignalscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  acquiredsignalscount_ = value;
}
inline void AppDataSourceState::set_acquiredsignalscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acquiredsignalscount(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.acquiredSignalsCount)
}

// optional int64 errorProtocolVersion = 20 [default = 0];
inline bool AppDataSourceState::_internal_has_errorprotocolversion() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errorprotocolversion() const {
  return _internal_has_errorprotocolversion();
}
inline void AppDataSourceState::clear_errorprotocolversion() {
  errorprotocolversion_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errorprotocolversion() const {
  return errorprotocolversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errorprotocolversion() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorProtocolVersion)
  return _internal_errorprotocolversion();
}
inline void AppDataSourceState::_internal_set_errorprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  errorprotocolversion_ = value;
}
inline void AppDataSourceState::set_errorprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorprotocolversion(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorProtocolVersion)
}

// optional int64 errorFramesQuantity = 21 [default = 0];
inline bool AppDataSourceState::_internal_has_errorframesquantity() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errorframesquantity() const {
  return _internal_has_errorframesquantity();
}
inline void AppDataSourceState::clear_errorframesquantity() {
  errorframesquantity_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errorframesquantity() const {
  return errorframesquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errorframesquantity() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorFramesQuantity)
  return _internal_errorframesquantity();
}
inline void AppDataSourceState::_internal_set_errorframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  errorframesquantity_ = value;
}
inline void AppDataSourceState::set_errorframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorframesquantity(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorFramesQuantity)
}

// optional int64 errorFrameNo = 22 [default = 0];
inline bool AppDataSourceState::_internal_has_errorframeno() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errorframeno() const {
  return _internal_has_errorframeno();
}
inline void AppDataSourceState::clear_errorframeno() {
  errorframeno_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errorframeno() const {
  return errorframeno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errorframeno() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorFrameNo)
  return _internal_errorframeno();
}
inline void AppDataSourceState::_internal_set_errorframeno(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00200000u;
  errorframeno_ = value;
}
inline void AppDataSourceState::set_errorframeno(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorframeno(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorFrameNo)
}

// optional int64 errorDataID = 23 [default = 0];
inline bool AppDataSourceState::_internal_has_errordataid() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errordataid() const {
  return _internal_has_errordataid();
}
inline void AppDataSourceState::clear_errordataid() {
  errordataid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errordataid() const {
  return errordataid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errordataid() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorDataID)
  return _internal_errordataid();
}
inline void AppDataSourceState::_internal_set_errordataid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  errordataid_ = value;
}
inline void AppDataSourceState::set_errordataid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errordataid(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorDataID)
}

// optional int64 errorFrameSize = 24 [default = 0];
inline bool AppDataSourceState::_internal_has_errorframesize() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errorframesize() const {
  return _internal_has_errorframesize();
}
inline void AppDataSourceState::clear_errorframesize() {
  errorframesize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errorframesize() const {
  return errorframesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errorframesize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorFrameSize)
  return _internal_errorframesize();
}
inline void AppDataSourceState::_internal_set_errorframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x02000000u;
  errorframesize_ = value;
}
inline void AppDataSourceState::set_errorframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorframesize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorFrameSize)
}

// optional int64 errorDuplicatePlantTime = 25 [default = 0];
inline bool AppDataSourceState::_internal_has_errorduplicateplanttime() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errorduplicateplanttime() const {
  return _internal_has_errorduplicateplanttime();
}
inline void AppDataSourceState::clear_errorduplicateplanttime() {
  errorduplicateplanttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errorduplicateplanttime() const {
  return errorduplicateplanttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errorduplicateplanttime() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorDuplicatePlantTime)
  return _internal_errorduplicateplanttime();
}
inline void AppDataSourceState::_internal_set_errorduplicateplanttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x04000000u;
  errorduplicateplanttime_ = value;
}
inline void AppDataSourceState::set_errorduplicateplanttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorduplicateplanttime(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorDuplicatePlantTime)
}

// optional int64 errorNonmonotonicPlantTime = 26 [default = 0];
inline bool AppDataSourceState::_internal_has_errornonmonotonicplanttime() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_errornonmonotonicplanttime() const {
  return _internal_has_errornonmonotonicplanttime();
}
inline void AppDataSourceState::clear_errornonmonotonicplanttime() {
  errornonmonotonicplanttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::_internal_errornonmonotonicplanttime() const {
  return errornonmonotonicplanttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppDataSourceState::errornonmonotonicplanttime() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.errorNonmonotonicPlantTime)
  return _internal_errornonmonotonicplanttime();
}
inline void AppDataSourceState::_internal_set_errornonmonotonicplanttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x08000000u;
  errornonmonotonicplanttime_ = value;
}
inline void AppDataSourceState::set_errornonmonotonicplanttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errornonmonotonicplanttime(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.errorNonmonotonicPlantTime)
}

// optional string lmEquipmentID = 27;
inline bool AppDataSourceState::_internal_has_lmequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppDataSourceState::has_lmequipmentid() const {
  return _internal_has_lmequipmentid();
}
inline void AppDataSourceState::clear_lmequipmentid() {
  lmequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppDataSourceState::lmequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.lmEquipmentID)
  return _internal_lmequipmentid();
}
inline void AppDataSourceState::set_lmequipmentid(const std::string& value) {
  _internal_set_lmequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.lmEquipmentID)
}
inline std::string* AppDataSourceState::mutable_lmequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.AppDataSourceState.lmEquipmentID)
  return _internal_mutable_lmequipmentid();
}
inline const std::string& AppDataSourceState::_internal_lmequipmentid() const {
  return lmequipmentid_.Get();
}
inline void AppDataSourceState::_internal_set_lmequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppDataSourceState::set_lmequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.AppDataSourceState.lmEquipmentID)
}
inline void AppDataSourceState::set_lmequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.AppDataSourceState.lmEquipmentID)
}
inline void AppDataSourceState::set_lmequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.AppDataSourceState.lmEquipmentID)
}
inline std::string* AppDataSourceState::_internal_mutable_lmequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return lmequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppDataSourceState::release_lmequipmentid() {
  // @@protoc_insertion_point(field_release:Network.AppDataSourceState.lmEquipmentID)
  if (!_internal_has_lmequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lmequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppDataSourceState::set_allocated_lmequipmentid(std::string* lmequipmentid) {
  if (lmequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lmequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lmequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.AppDataSourceState.lmEquipmentID)
}

// optional int32 rupFramesQueueSize = 28 [default = 0];
inline bool AppDataSourceState::_internal_has_rupframesqueuesize() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_rupframesqueuesize() const {
  return _internal_has_rupframesqueuesize();
}
inline void AppDataSourceState::clear_rupframesqueuesize() {
  rupframesqueuesize_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_rupframesqueuesize() const {
  return rupframesqueuesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::rupframesqueuesize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.rupFramesQueueSize)
  return _internal_rupframesqueuesize();
}
inline void AppDataSourceState::_internal_set_rupframesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  rupframesqueuesize_ = value;
}
inline void AppDataSourceState::set_rupframesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rupframesqueuesize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.rupFramesQueueSize)
}

// optional int32 signalStatesQueueSize = 29 [default = 0];
inline bool AppDataSourceState::_internal_has_signalstatesqueuesize() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_signalstatesqueuesize() const {
  return _internal_has_signalstatesqueuesize();
}
inline void AppDataSourceState::clear_signalstatesqueuesize() {
  signalstatesqueuesize_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_signalstatesqueuesize() const {
  return signalstatesqueuesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::signalstatesqueuesize() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.signalStatesQueueSize)
  return _internal_signalstatesqueuesize();
}
inline void AppDataSourceState::_internal_set_signalstatesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  signalstatesqueuesize_ = value;
}
inline void AppDataSourceState::set_signalstatesqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signalstatesqueuesize(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.signalStatesQueueSize)
}

// optional int32 state = 30 [default = 0];
inline bool AppDataSourceState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool AppDataSourceState::has_state() const {
  return _internal_has_state();
}
inline void AppDataSourceState::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataSourceState::state() const {
  // @@protoc_insertion_point(field_get:Network.AppDataSourceState.state)
  return _internal_state();
}
inline void AppDataSourceState::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  state_ = value;
}
inline void AppDataSourceState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Network.AppDataSourceState.state)
}

// -------------------------------------------------------------------

// GetAppDataSourcesStatesReply

// optional int32 error = 1 [default = 0];
inline bool GetAppDataSourcesStatesReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppDataSourcesStatesReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppDataSourcesStatesReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppDataSourcesStatesReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppDataSourcesStatesReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppDataSourcesStatesReply.error)
  return _internal_error();
}
inline void GetAppDataSourcesStatesReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void GetAppDataSourcesStatesReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppDataSourcesStatesReply.error)
}

// repeated .Network.AppDataSourceState appDataSourcesStates = 2;
inline int GetAppDataSourcesStatesReply::_internal_appdatasourcesstates_size() const {
  return appdatasourcesstates_.size();
}
inline int GetAppDataSourcesStatesReply::appdatasourcesstates_size() const {
  return _internal_appdatasourcesstates_size();
}
inline void GetAppDataSourcesStatesReply::clear_appdatasourcesstates() {
  appdatasourcesstates_.Clear();
}
inline ::Network::AppDataSourceState* GetAppDataSourcesStatesReply::mutable_appdatasourcesstates(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetAppDataSourcesStatesReply.appDataSourcesStates)
  return appdatasourcesstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::AppDataSourceState >*
GetAppDataSourcesStatesReply::mutable_appdatasourcesstates() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppDataSourcesStatesReply.appDataSourcesStates)
  return &appdatasourcesstates_;
}
inline const ::Network::AppDataSourceState& GetAppDataSourcesStatesReply::_internal_appdatasourcesstates(int index) const {
  return appdatasourcesstates_.Get(index);
}
inline const ::Network::AppDataSourceState& GetAppDataSourcesStatesReply::appdatasourcesstates(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppDataSourcesStatesReply.appDataSourcesStates)
  return _internal_appdatasourcesstates(index);
}
inline ::Network::AppDataSourceState* GetAppDataSourcesStatesReply::_internal_add_appdatasourcesstates() {
  return appdatasourcesstates_.Add();
}
inline ::Network::AppDataSourceState* GetAppDataSourcesStatesReply::add_appdatasourcesstates() {
  // @@protoc_insertion_point(field_add:Network.GetAppDataSourcesStatesReply.appDataSourcesStates)
  return _internal_add_appdatasourcesstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::AppDataSourceState >&
GetAppDataSourcesStatesReply::appdatasourcesstates() const {
  // @@protoc_insertion_point(field_list:Network.GetAppDataSourcesStatesReply.appDataSourcesStates)
  return appdatasourcesstates_;
}

// -------------------------------------------------------------------

// AppDataServiceState

// required bool CfgServiceIsConnected = 1 [default = false];
inline bool AppDataServiceState::_internal_has_cfgserviceisconnected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppDataServiceState::has_cfgserviceisconnected() const {
  return _internal_has_cfgserviceisconnected();
}
inline void AppDataServiceState::clear_cfgserviceisconnected() {
  cfgserviceisconnected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AppDataServiceState::_internal_cfgserviceisconnected() const {
  return cfgserviceisconnected_;
}
inline bool AppDataServiceState::cfgserviceisconnected() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.CfgServiceIsConnected)
  return _internal_cfgserviceisconnected();
}
inline void AppDataServiceState::_internal_set_cfgserviceisconnected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  cfgserviceisconnected_ = value;
}
inline void AppDataServiceState::set_cfgserviceisconnected(bool value) {
  _internal_set_cfgserviceisconnected(value);
  // @@protoc_insertion_point(field_set:Network.AppDataServiceState.CfgServiceIsConnected)
}

// optional uint32 CfgServiceIp = 2 [default = 0];
inline bool AppDataServiceState::_internal_has_cfgserviceip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppDataServiceState::has_cfgserviceip() const {
  return _internal_has_cfgserviceip();
}
inline void AppDataServiceState::clear_cfgserviceip() {
  cfgserviceip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppDataServiceState::_internal_cfgserviceip() const {
  return cfgserviceip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppDataServiceState::cfgserviceip() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.CfgServiceIp)
  return _internal_cfgserviceip();
}
inline void AppDataServiceState::_internal_set_cfgserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cfgserviceip_ = value;
}
inline void AppDataServiceState::set_cfgserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cfgserviceip(value);
  // @@protoc_insertion_point(field_set:Network.AppDataServiceState.CfgServiceIp)
}

// optional int32 CfgServicePort = 3 [default = 0];
inline bool AppDataServiceState::_internal_has_cfgserviceport() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppDataServiceState::has_cfgserviceport() const {
  return _internal_has_cfgserviceport();
}
inline void AppDataServiceState::clear_cfgserviceport() {
  cfgserviceport_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataServiceState::_internal_cfgserviceport() const {
  return cfgserviceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataServiceState::cfgserviceport() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.CfgServicePort)
  return _internal_cfgserviceport();
}
inline void AppDataServiceState::_internal_set_cfgserviceport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  cfgserviceport_ = value;
}
inline void AppDataServiceState::set_cfgserviceport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cfgserviceport(value);
  // @@protoc_insertion_point(field_set:Network.AppDataServiceState.CfgServicePort)
}

// required bool ArchiveServiceIsConnected = 4 [default = false];
inline bool AppDataServiceState::_internal_has_archiveserviceisconnected() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppDataServiceState::has_archiveserviceisconnected() const {
  return _internal_has_archiveserviceisconnected();
}
inline void AppDataServiceState::clear_archiveserviceisconnected() {
  archiveserviceisconnected_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AppDataServiceState::_internal_archiveserviceisconnected() const {
  return archiveserviceisconnected_;
}
inline bool AppDataServiceState::archiveserviceisconnected() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.ArchiveServiceIsConnected)
  return _internal_archiveserviceisconnected();
}
inline void AppDataServiceState::_internal_set_archiveserviceisconnected(bool value) {
  _has_bits_[0] |= 0x00000008u;
  archiveserviceisconnected_ = value;
}
inline void AppDataServiceState::set_archiveserviceisconnected(bool value) {
  _internal_set_archiveserviceisconnected(value);
  // @@protoc_insertion_point(field_set:Network.AppDataServiceState.ArchiveServiceIsConnected)
}

// optional uint32 ArchiveServiceIp = 5 [default = 0];
inline bool AppDataServiceState::_internal_has_archiveserviceip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppDataServiceState::has_archiveserviceip() const {
  return _internal_has_archiveserviceip();
}
inline void AppDataServiceState::clear_archiveserviceip() {
  archiveserviceip_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppDataServiceState::_internal_archiveserviceip() const {
  return archiveserviceip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppDataServiceState::archiveserviceip() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.ArchiveServiceIp)
  return _internal_archiveserviceip();
}
inline void AppDataServiceState::_internal_set_archiveserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  archiveserviceip_ = value;
}
inline void AppDataServiceState::set_archiveserviceip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_archiveserviceip(value);
  // @@protoc_insertion_point(field_set:Network.AppDataServiceState.ArchiveServiceIp)
}

// optional int32 ArchiveServicePort = 6 [default = 0];
inline bool AppDataServiceState::_internal_has_archiveserviceport() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppDataServiceState::has_archiveserviceport() const {
  return _internal_has_archiveserviceport();
}
inline void AppDataServiceState::clear_archiveserviceport() {
  archiveserviceport_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataServiceState::_internal_archiveserviceport() const {
  return archiveserviceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppDataServiceState::archiveserviceport() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.ArchiveServicePort)
  return _internal_archiveserviceport();
}
inline void AppDataServiceState::_internal_set_archiveserviceport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  archiveserviceport_ = value;
}
inline void AppDataServiceState::set_archiveserviceport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_archiveserviceport(value);
  // @@protoc_insertion_point(field_set:Network.AppDataServiceState.ArchiveServicePort)
}

// optional .Network.AppDataReceiveState appDataReceiveState = 7;
inline bool AppDataServiceState::_internal_has_appdatareceivestate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || appdatareceivestate_ != nullptr);
  return value;
}
inline bool AppDataServiceState::has_appdatareceivestate() const {
  return _internal_has_appdatareceivestate();
}
inline void AppDataServiceState::clear_appdatareceivestate() {
  if (appdatareceivestate_ != nullptr) appdatareceivestate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Network::AppDataReceiveState& AppDataServiceState::_internal_appdatareceivestate() const {
  const ::Network::AppDataReceiveState* p = appdatareceivestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::Network::AppDataReceiveState&>(
      ::Network::_AppDataReceiveState_default_instance_);
}
inline const ::Network::AppDataReceiveState& AppDataServiceState::appdatareceivestate() const {
  // @@protoc_insertion_point(field_get:Network.AppDataServiceState.appDataReceiveState)
  return _internal_appdatareceivestate();
}
inline void AppDataServiceState::unsafe_arena_set_allocated_appdatareceivestate(
    ::Network::AppDataReceiveState* appdatareceivestate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appdatareceivestate_);
  }
  appdatareceivestate_ = appdatareceivestate;
  if (appdatareceivestate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.AppDataServiceState.appDataReceiveState)
}
inline ::Network::AppDataReceiveState* AppDataServiceState::release_appdatareceivestate() {
  _has_bits_[0] &= ~0x00000001u;
  ::Network::AppDataReceiveState* temp = appdatareceivestate_;
  appdatareceivestate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Network::AppDataReceiveState* AppDataServiceState::unsafe_arena_release_appdatareceivestate() {
  // @@protoc_insertion_point(field_release:Network.AppDataServiceState.appDataReceiveState)
  _has_bits_[0] &= ~0x00000001u;
  ::Network::AppDataReceiveState* temp = appdatareceivestate_;
  appdatareceivestate_ = nullptr;
  return temp;
}
inline ::Network::AppDataReceiveState* AppDataServiceState::_internal_mutable_appdatareceivestate() {
  _has_bits_[0] |= 0x00000001u;
  if (appdatareceivestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Network::AppDataReceiveState>(GetArena());
    appdatareceivestate_ = p;
  }
  return appdatareceivestate_;
}
inline ::Network::AppDataReceiveState* AppDataServiceState::mutable_appdatareceivestate() {
  // @@protoc_insertion_point(field_mutable:Network.AppDataServiceState.appDataReceiveState)
  return _internal_mutable_appdatareceivestate();
}
inline void AppDataServiceState::set_allocated_appdatareceivestate(::Network::AppDataReceiveState* appdatareceivestate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appdatareceivestate_;
  }
  if (appdatareceivestate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appdatareceivestate);
    if (message_arena != submessage_arena) {
      appdatareceivestate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appdatareceivestate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appdatareceivestate_ = appdatareceivestate;
  // @@protoc_insertion_point(field_set_allocated:Network.AppDataServiceState.appDataReceiveState)
}

// -------------------------------------------------------------------

// SoftwareInfo

// required int32 softwareType = 1 [default = 8000];
inline bool SoftwareInfo::_internal_has_softwaretype() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SoftwareInfo::has_softwaretype() const {
  return _internal_has_softwaretype();
}
inline void SoftwareInfo::clear_softwaretype() {
  softwaretype_ = 8000;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::_internal_softwaretype() const {
  return softwaretype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::softwaretype() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.softwareType)
  return _internal_softwaretype();
}
inline void SoftwareInfo::_internal_set_softwaretype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  softwaretype_ = value;
}
inline void SoftwareInfo::set_softwaretype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_softwaretype(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.softwareType)
}

// required string equipmentId = 2;
inline bool SoftwareInfo::_internal_has_equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SoftwareInfo::has_equipmentid() const {
  return _internal_has_equipmentid();
}
inline void SoftwareInfo::clear_equipmentid() {
  equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SoftwareInfo::equipmentid() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.equipmentId)
  return _internal_equipmentid();
}
inline void SoftwareInfo::set_equipmentid(const std::string& value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.equipmentId)
}
inline std::string* SoftwareInfo::mutable_equipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.SoftwareInfo.equipmentId)
  return _internal_mutable_equipmentid();
}
inline const std::string& SoftwareInfo::_internal_equipmentid() const {
  return equipmentid_.Get();
}
inline void SoftwareInfo::_internal_set_equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SoftwareInfo::set_equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SoftwareInfo.equipmentId)
}
inline void SoftwareInfo::set_equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SoftwareInfo.equipmentId)
}
inline void SoftwareInfo::set_equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SoftwareInfo.equipmentId)
}
inline std::string* SoftwareInfo::_internal_mutable_equipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SoftwareInfo::release_equipmentid() {
  // @@protoc_insertion_point(field_release:Network.SoftwareInfo.equipmentId)
  if (!_internal_has_equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_equipmentid(std::string* equipmentid) {
  if (equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SoftwareInfo.equipmentId)
}

// required int32 majorVersion = 3 [default = 0];
inline bool SoftwareInfo::_internal_has_majorversion() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SoftwareInfo::has_majorversion() const {
  return _internal_has_majorversion();
}
inline void SoftwareInfo::clear_majorversion() {
  majorversion_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::_internal_majorversion() const {
  return majorversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::majorversion() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.majorVersion)
  return _internal_majorversion();
}
inline void SoftwareInfo::_internal_set_majorversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  majorversion_ = value;
}
inline void SoftwareInfo::set_majorversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_majorversion(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.majorVersion)
}

// required int32 minorVersion = 4 [default = 0];
inline bool SoftwareInfo::_internal_has_minorversion() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SoftwareInfo::has_minorversion() const {
  return _internal_has_minorversion();
}
inline void SoftwareInfo::clear_minorversion() {
  minorversion_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::_internal_minorversion() const {
  return minorversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::minorversion() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.minorVersion)
  return _internal_minorversion();
}
inline void SoftwareInfo::_internal_set_minorversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  minorversion_ = value;
}
inline void SoftwareInfo::set_minorversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minorversion(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.minorVersion)
}

// required int32 commitNo = 5 [default = 0];
inline bool SoftwareInfo::_internal_has_commitno() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SoftwareInfo::has_commitno() const {
  return _internal_has_commitno();
}
inline void SoftwareInfo::clear_commitno() {
  commitno_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::_internal_commitno() const {
  return commitno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::commitno() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.commitNo)
  return _internal_commitno();
}
inline void SoftwareInfo::_internal_set_commitno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  commitno_ = value;
}
inline void SoftwareInfo::set_commitno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commitno(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.commitNo)
}

// required string buildBranch = 6;
inline bool SoftwareInfo::_internal_has_buildbranch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SoftwareInfo::has_buildbranch() const {
  return _internal_has_buildbranch();
}
inline void SoftwareInfo::clear_buildbranch() {
  buildbranch_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SoftwareInfo::buildbranch() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.buildBranch)
  return _internal_buildbranch();
}
inline void SoftwareInfo::set_buildbranch(const std::string& value) {
  _internal_set_buildbranch(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.buildBranch)
}
inline std::string* SoftwareInfo::mutable_buildbranch() {
  // @@protoc_insertion_point(field_mutable:Network.SoftwareInfo.buildBranch)
  return _internal_mutable_buildbranch();
}
inline const std::string& SoftwareInfo::_internal_buildbranch() const {
  return buildbranch_.Get();
}
inline void SoftwareInfo::_internal_set_buildbranch(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  buildbranch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SoftwareInfo::set_buildbranch(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  buildbranch_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SoftwareInfo.buildBranch)
}
inline void SoftwareInfo::set_buildbranch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  buildbranch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SoftwareInfo.buildBranch)
}
inline void SoftwareInfo::set_buildbranch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  buildbranch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SoftwareInfo.buildBranch)
}
inline std::string* SoftwareInfo::_internal_mutable_buildbranch() {
  _has_bits_[0] |= 0x00000002u;
  return buildbranch_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SoftwareInfo::release_buildbranch() {
  // @@protoc_insertion_point(field_release:Network.SoftwareInfo.buildBranch)
  if (!_internal_has_buildbranch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return buildbranch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_buildbranch(std::string* buildbranch) {
  if (buildbranch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  buildbranch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buildbranch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SoftwareInfo.buildBranch)
}

// required string commitSHA = 7;
inline bool SoftwareInfo::_internal_has_commitsha() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SoftwareInfo::has_commitsha() const {
  return _internal_has_commitsha();
}
inline void SoftwareInfo::clear_commitsha() {
  commitsha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SoftwareInfo::commitsha() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.commitSHA)
  return _internal_commitsha();
}
inline void SoftwareInfo::set_commitsha(const std::string& value) {
  _internal_set_commitsha(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.commitSHA)
}
inline std::string* SoftwareInfo::mutable_commitsha() {
  // @@protoc_insertion_point(field_mutable:Network.SoftwareInfo.commitSHA)
  return _internal_mutable_commitsha();
}
inline const std::string& SoftwareInfo::_internal_commitsha() const {
  return commitsha_.Get();
}
inline void SoftwareInfo::_internal_set_commitsha(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  commitsha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SoftwareInfo::set_commitsha(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  commitsha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SoftwareInfo.commitSHA)
}
inline void SoftwareInfo::set_commitsha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  commitsha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SoftwareInfo.commitSHA)
}
inline void SoftwareInfo::set_commitsha(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  commitsha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SoftwareInfo.commitSHA)
}
inline std::string* SoftwareInfo::_internal_mutable_commitsha() {
  _has_bits_[0] |= 0x00000004u;
  return commitsha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SoftwareInfo::release_commitsha() {
  // @@protoc_insertion_point(field_release:Network.SoftwareInfo.commitSHA)
  if (!_internal_has_commitsha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return commitsha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_commitsha(std::string* commitsha) {
  if (commitsha != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  commitsha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commitsha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SoftwareInfo.commitSHA)
}

// required string userName = 8;
inline bool SoftwareInfo::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SoftwareInfo::has_username() const {
  return _internal_has_username();
}
inline void SoftwareInfo::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SoftwareInfo::username() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.userName)
  return _internal_username();
}
inline void SoftwareInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.userName)
}
inline std::string* SoftwareInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:Network.SoftwareInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& SoftwareInfo::_internal_username() const {
  return username_.Get();
}
inline void SoftwareInfo::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SoftwareInfo::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SoftwareInfo.userName)
}
inline void SoftwareInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SoftwareInfo.userName)
}
inline void SoftwareInfo::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SoftwareInfo.userName)
}
inline std::string* SoftwareInfo::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000008u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SoftwareInfo::release_username() {
  // @@protoc_insertion_point(field_release:Network.SoftwareInfo.userName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SoftwareInfo.userName)
}

// required int32 buildNo = 9 [default = 0];
inline bool SoftwareInfo::_internal_has_buildno() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SoftwareInfo::has_buildno() const {
  return _internal_has_buildno();
}
inline void SoftwareInfo::clear_buildno() {
  buildno_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::_internal_buildno() const {
  return buildno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareInfo::buildno() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.buildNo)
  return _internal_buildno();
}
inline void SoftwareInfo::_internal_set_buildno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  buildno_ = value;
}
inline void SoftwareInfo::set_buildno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buildno(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.buildNo)
}

// required uint32 crc = 10 [default = 0];
inline bool SoftwareInfo::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SoftwareInfo::has_crc() const {
  return _internal_has_crc();
}
inline void SoftwareInfo::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo::_internal_crc() const {
  return crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo::crc() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.crc)
  return _internal_crc();
}
inline void SoftwareInfo::_internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  crc_ = value;
}
inline void SoftwareInfo::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.crc)
}

// optional string clientDescription = 11;
inline bool SoftwareInfo::_internal_has_clientdescription() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SoftwareInfo::has_clientdescription() const {
  return _internal_has_clientdescription();
}
inline void SoftwareInfo::clear_clientdescription() {
  clientdescription_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SoftwareInfo::clientdescription() const {
  // @@protoc_insertion_point(field_get:Network.SoftwareInfo.clientDescription)
  return _internal_clientdescription();
}
inline void SoftwareInfo::set_clientdescription(const std::string& value) {
  _internal_set_clientdescription(value);
  // @@protoc_insertion_point(field_set:Network.SoftwareInfo.clientDescription)
}
inline std::string* SoftwareInfo::mutable_clientdescription() {
  // @@protoc_insertion_point(field_mutable:Network.SoftwareInfo.clientDescription)
  return _internal_mutable_clientdescription();
}
inline const std::string& SoftwareInfo::_internal_clientdescription() const {
  return clientdescription_.Get();
}
inline void SoftwareInfo::_internal_set_clientdescription(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  clientdescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SoftwareInfo::set_clientdescription(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  clientdescription_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SoftwareInfo.clientDescription)
}
inline void SoftwareInfo::set_clientdescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  clientdescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SoftwareInfo.clientDescription)
}
inline void SoftwareInfo::set_clientdescription(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  clientdescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SoftwareInfo.clientDescription)
}
inline std::string* SoftwareInfo::_internal_mutable_clientdescription() {
  _has_bits_[0] |= 0x00000010u;
  return clientdescription_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SoftwareInfo::release_clientdescription() {
  // @@protoc_insertion_point(field_release:Network.SoftwareInfo.clientDescription)
  if (!_internal_has_clientdescription()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return clientdescription_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_clientdescription(std::string* clientdescription) {
  if (clientdescription != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  clientdescription_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientdescription,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SoftwareInfo.clientDescription)
}

// -------------------------------------------------------------------

// GetServiceInfoRequest

// -------------------------------------------------------------------

// SessionParams

// optional string currentSettingsProfile = 1;
inline bool SessionParams::_internal_has_currentsettingsprofile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionParams::has_currentsettingsprofile() const {
  return _internal_has_currentsettingsprofile();
}
inline void SessionParams::clear_currentsettingsprofile() {
  currentsettingsprofile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionParams::currentsettingsprofile() const {
  // @@protoc_insertion_point(field_get:Network.SessionParams.currentSettingsProfile)
  return _internal_currentsettingsprofile();
}
inline void SessionParams::set_currentsettingsprofile(const std::string& value) {
  _internal_set_currentsettingsprofile(value);
  // @@protoc_insertion_point(field_set:Network.SessionParams.currentSettingsProfile)
}
inline std::string* SessionParams::mutable_currentsettingsprofile() {
  // @@protoc_insertion_point(field_mutable:Network.SessionParams.currentSettingsProfile)
  return _internal_mutable_currentsettingsprofile();
}
inline const std::string& SessionParams::_internal_currentsettingsprofile() const {
  return currentsettingsprofile_.Get();
}
inline void SessionParams::_internal_set_currentsettingsprofile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currentsettingsprofile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionParams::set_currentsettingsprofile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  currentsettingsprofile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SessionParams.currentSettingsProfile)
}
inline void SessionParams::set_currentsettingsprofile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  currentsettingsprofile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SessionParams.currentSettingsProfile)
}
inline void SessionParams::set_currentsettingsprofile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  currentsettingsprofile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SessionParams.currentSettingsProfile)
}
inline std::string* SessionParams::_internal_mutable_currentsettingsprofile() {
  _has_bits_[0] |= 0x00000001u;
  return currentsettingsprofile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionParams::release_currentsettingsprofile() {
  // @@protoc_insertion_point(field_release:Network.SessionParams.currentSettingsProfile)
  if (!_internal_has_currentsettingsprofile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return currentsettingsprofile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionParams::set_allocated_currentsettingsprofile(std::string* currentsettingsprofile) {
  if (currentsettingsprofile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currentsettingsprofile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentsettingsprofile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SessionParams.currentSettingsProfile)
}

// optional int32 softwareRunMode = 2 [default = 0];
inline bool SessionParams::_internal_has_softwarerunmode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SessionParams::has_softwarerunmode() const {
  return _internal_has_softwarerunmode();
}
inline void SessionParams::clear_softwarerunmode() {
  softwarerunmode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionParams::_internal_softwarerunmode() const {
  return softwarerunmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionParams::softwarerunmode() const {
  // @@protoc_insertion_point(field_get:Network.SessionParams.softwareRunMode)
  return _internal_softwarerunmode();
}
inline void SessionParams::_internal_set_softwarerunmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  softwarerunmode_ = value;
}
inline void SessionParams::set_softwarerunmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_softwarerunmode(value);
  // @@protoc_insertion_point(field_set:Network.SessionParams.softwareRunMode)
}

// -------------------------------------------------------------------

// ServiceInfo

// required .Network.SoftwareInfo softwareInfo = 1;
inline bool ServiceInfo::_internal_has_softwareinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || softwareinfo_ != nullptr);
  return value;
}
inline bool ServiceInfo::has_softwareinfo() const {
  return _internal_has_softwareinfo();
}
inline void ServiceInfo::clear_softwareinfo() {
  if (softwareinfo_ != nullptr) softwareinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Network::SoftwareInfo& ServiceInfo::_internal_softwareinfo() const {
  const ::Network::SoftwareInfo* p = softwareinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Network::SoftwareInfo&>(
      ::Network::_SoftwareInfo_default_instance_);
}
inline const ::Network::SoftwareInfo& ServiceInfo::softwareinfo() const {
  // @@protoc_insertion_point(field_get:Network.ServiceInfo.softwareInfo)
  return _internal_softwareinfo();
}
inline void ServiceInfo::unsafe_arena_set_allocated_softwareinfo(
    ::Network::SoftwareInfo* softwareinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softwareinfo_);
  }
  softwareinfo_ = softwareinfo;
  if (softwareinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.ServiceInfo.softwareInfo)
}
inline ::Network::SoftwareInfo* ServiceInfo::release_softwareinfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::Network::SoftwareInfo* temp = softwareinfo_;
  softwareinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Network::SoftwareInfo* ServiceInfo::unsafe_arena_release_softwareinfo() {
  // @@protoc_insertion_point(field_release:Network.ServiceInfo.softwareInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::Network::SoftwareInfo* temp = softwareinfo_;
  softwareinfo_ = nullptr;
  return temp;
}
inline ::Network::SoftwareInfo* ServiceInfo::_internal_mutable_softwareinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (softwareinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Network::SoftwareInfo>(GetArena());
    softwareinfo_ = p;
  }
  return softwareinfo_;
}
inline ::Network::SoftwareInfo* ServiceInfo::mutable_softwareinfo() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceInfo.softwareInfo)
  return _internal_mutable_softwareinfo();
}
inline void ServiceInfo::set_allocated_softwareinfo(::Network::SoftwareInfo* softwareinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete softwareinfo_;
  }
  if (softwareinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softwareinfo);
    if (message_arena != submessage_arena) {
      softwareinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softwareinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  softwareinfo_ = softwareinfo;
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceInfo.softwareInfo)
}

// optional int64 uptime = 2 [default = 0];
inline bool ServiceInfo::_internal_has_uptime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServiceInfo::has_uptime() const {
  return _internal_has_uptime();
}
inline void ServiceInfo::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInfo::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInfo::uptime() const {
  // @@protoc_insertion_point(field_get:Network.ServiceInfo.uptime)
  return _internal_uptime();
}
inline void ServiceInfo::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  uptime_ = value;
}
inline void ServiceInfo::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:Network.ServiceInfo.uptime)
}

// optional int32 serviceState = 3 [default = 0];
inline bool ServiceInfo::_internal_has_servicestate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServiceInfo::has_servicestate() const {
  return _internal_has_servicestate();
}
inline void ServiceInfo::clear_servicestate() {
  servicestate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::_internal_servicestate() const {
  return servicestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::servicestate() const {
  // @@protoc_insertion_point(field_get:Network.ServiceInfo.serviceState)
  return _internal_servicestate();
}
inline void ServiceInfo::_internal_set_servicestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  servicestate_ = value;
}
inline void ServiceInfo::set_servicestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servicestate(value);
  // @@protoc_insertion_point(field_set:Network.ServiceInfo.serviceState)
}

// optional int64 serviceUptime = 4 [default = 0];
inline bool ServiceInfo::_internal_has_serviceuptime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServiceInfo::has_serviceuptime() const {
  return _internal_has_serviceuptime();
}
inline void ServiceInfo::clear_serviceuptime() {
  serviceuptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInfo::_internal_serviceuptime() const {
  return serviceuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInfo::serviceuptime() const {
  // @@protoc_insertion_point(field_get:Network.ServiceInfo.serviceUptime)
  return _internal_serviceuptime();
}
inline void ServiceInfo::_internal_set_serviceuptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  serviceuptime_ = value;
}
inline void ServiceInfo::set_serviceuptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serviceuptime(value);
  // @@protoc_insertion_point(field_set:Network.ServiceInfo.serviceUptime)
}

// optional .Network.SessionParams sessionParams = 5;
inline bool ServiceInfo::_internal_has_sessionparams() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sessionparams_ != nullptr);
  return value;
}
inline bool ServiceInfo::has_sessionparams() const {
  return _internal_has_sessionparams();
}
inline void ServiceInfo::clear_sessionparams() {
  if (sessionparams_ != nullptr) sessionparams_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Network::SessionParams& ServiceInfo::_internal_sessionparams() const {
  const ::Network::SessionParams* p = sessionparams_;
  return p != nullptr ? *p : reinterpret_cast<const ::Network::SessionParams&>(
      ::Network::_SessionParams_default_instance_);
}
inline const ::Network::SessionParams& ServiceInfo::sessionparams() const {
  // @@protoc_insertion_point(field_get:Network.ServiceInfo.sessionParams)
  return _internal_sessionparams();
}
inline void ServiceInfo::unsafe_arena_set_allocated_sessionparams(
    ::Network::SessionParams* sessionparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sessionparams_);
  }
  sessionparams_ = sessionparams;
  if (sessionparams) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.ServiceInfo.sessionParams)
}
inline ::Network::SessionParams* ServiceInfo::release_sessionparams() {
  _has_bits_[0] &= ~0x00000004u;
  ::Network::SessionParams* temp = sessionparams_;
  sessionparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Network::SessionParams* ServiceInfo::unsafe_arena_release_sessionparams() {
  // @@protoc_insertion_point(field_release:Network.ServiceInfo.sessionParams)
  _has_bits_[0] &= ~0x00000004u;
  ::Network::SessionParams* temp = sessionparams_;
  sessionparams_ = nullptr;
  return temp;
}
inline ::Network::SessionParams* ServiceInfo::_internal_mutable_sessionparams() {
  _has_bits_[0] |= 0x00000004u;
  if (sessionparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::Network::SessionParams>(GetArena());
    sessionparams_ = p;
  }
  return sessionparams_;
}
inline ::Network::SessionParams* ServiceInfo::mutable_sessionparams() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceInfo.sessionParams)
  return _internal_mutable_sessionparams();
}
inline void ServiceInfo::set_allocated_sessionparams(::Network::SessionParams* sessionparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sessionparams_;
  }
  if (sessionparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sessionparams);
    if (message_arena != submessage_arena) {
      sessionparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sessionparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sessionparams_ = sessionparams;
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceInfo.sessionParams)
}

// optional string settingsXml = 6;
inline bool ServiceInfo::_internal_has_settingsxml() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceInfo::has_settingsxml() const {
  return _internal_has_settingsxml();
}
inline void ServiceInfo::clear_settingsxml() {
  settingsxml_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceInfo::settingsxml() const {
  // @@protoc_insertion_point(field_get:Network.ServiceInfo.settingsXml)
  return _internal_settingsxml();
}
inline void ServiceInfo::set_settingsxml(const std::string& value) {
  _internal_set_settingsxml(value);
  // @@protoc_insertion_point(field_set:Network.ServiceInfo.settingsXml)
}
inline std::string* ServiceInfo::mutable_settingsxml() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceInfo.settingsXml)
  return _internal_mutable_settingsxml();
}
inline const std::string& ServiceInfo::_internal_settingsxml() const {
  return settingsxml_.Get();
}
inline void ServiceInfo::_internal_set_settingsxml(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  settingsxml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_settingsxml(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  settingsxml_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ServiceInfo.settingsXml)
}
inline void ServiceInfo::set_settingsxml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  settingsxml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ServiceInfo.settingsXml)
}
inline void ServiceInfo::set_settingsxml(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  settingsxml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ServiceInfo.settingsXml)
}
inline std::string* ServiceInfo::_internal_mutable_settingsxml() {
  _has_bits_[0] |= 0x00000001u;
  return settingsxml_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_settingsxml() {
  // @@protoc_insertion_point(field_release:Network.ServiceInfo.settingsXml)
  if (!_internal_has_settingsxml()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return settingsxml_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_settingsxml(std::string* settingsxml) {
  if (settingsxml != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settingsxml_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settingsxml,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceInfo.settingsXml)
}

// -------------------------------------------------------------------

// GetServiceInfoReply

// required int32 error = 1 [default = 0];
inline bool GetServiceInfoReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetServiceInfoReply::has_error() const {
  return _internal_has_error();
}
inline void GetServiceInfoReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceInfoReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceInfoReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetServiceInfoReply.error)
  return _internal_error();
}
inline void GetServiceInfoReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void GetServiceInfoReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetServiceInfoReply.error)
}

// required .Network.ServiceInfo serviceInfo = 2;
inline bool GetServiceInfoReply::_internal_has_serviceinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || serviceinfo_ != nullptr);
  return value;
}
inline bool GetServiceInfoReply::has_serviceinfo() const {
  return _internal_has_serviceinfo();
}
inline void GetServiceInfoReply::clear_serviceinfo() {
  if (serviceinfo_ != nullptr) serviceinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Network::ServiceInfo& GetServiceInfoReply::_internal_serviceinfo() const {
  const ::Network::ServiceInfo* p = serviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Network::ServiceInfo&>(
      ::Network::_ServiceInfo_default_instance_);
}
inline const ::Network::ServiceInfo& GetServiceInfoReply::serviceinfo() const {
  // @@protoc_insertion_point(field_get:Network.GetServiceInfoReply.serviceInfo)
  return _internal_serviceinfo();
}
inline void GetServiceInfoReply::unsafe_arena_set_allocated_serviceinfo(
    ::Network::ServiceInfo* serviceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serviceinfo_);
  }
  serviceinfo_ = serviceinfo;
  if (serviceinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.GetServiceInfoReply.serviceInfo)
}
inline ::Network::ServiceInfo* GetServiceInfoReply::release_serviceinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::Network::ServiceInfo* temp = serviceinfo_;
  serviceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Network::ServiceInfo* GetServiceInfoReply::unsafe_arena_release_serviceinfo() {
  // @@protoc_insertion_point(field_release:Network.GetServiceInfoReply.serviceInfo)
  _has_bits_[0] &= ~0x00000001u;
  ::Network::ServiceInfo* temp = serviceinfo_;
  serviceinfo_ = nullptr;
  return temp;
}
inline ::Network::ServiceInfo* GetServiceInfoReply::_internal_mutable_serviceinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (serviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Network::ServiceInfo>(GetArena());
    serviceinfo_ = p;
  }
  return serviceinfo_;
}
inline ::Network::ServiceInfo* GetServiceInfoReply::mutable_serviceinfo() {
  // @@protoc_insertion_point(field_mutable:Network.GetServiceInfoReply.serviceInfo)
  return _internal_mutable_serviceinfo();
}
inline void GetServiceInfoReply::set_allocated_serviceinfo(::Network::ServiceInfo* serviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete serviceinfo_;
  }
  if (serviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(serviceinfo);
    if (message_arena != submessage_arena) {
      serviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serviceinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serviceinfo_ = serviceinfo;
  // @@protoc_insertion_point(field_set_allocated:Network.GetServiceInfoReply.serviceInfo)
}

// -------------------------------------------------------------------

// ConfigurationServiceState

// required string currentBuildDirectory = 1;
inline bool ConfigurationServiceState::_internal_has_currentbuilddirectory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigurationServiceState::has_currentbuilddirectory() const {
  return _internal_has_currentbuilddirectory();
}
inline void ConfigurationServiceState::clear_currentbuilddirectory() {
  currentbuilddirectory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigurationServiceState::currentbuilddirectory() const {
  // @@protoc_insertion_point(field_get:Network.ConfigurationServiceState.currentBuildDirectory)
  return _internal_currentbuilddirectory();
}
inline void ConfigurationServiceState::set_currentbuilddirectory(const std::string& value) {
  _internal_set_currentbuilddirectory(value);
  // @@protoc_insertion_point(field_set:Network.ConfigurationServiceState.currentBuildDirectory)
}
inline std::string* ConfigurationServiceState::mutable_currentbuilddirectory() {
  // @@protoc_insertion_point(field_mutable:Network.ConfigurationServiceState.currentBuildDirectory)
  return _internal_mutable_currentbuilddirectory();
}
inline const std::string& ConfigurationServiceState::_internal_currentbuilddirectory() const {
  return currentbuilddirectory_.Get();
}
inline void ConfigurationServiceState::_internal_set_currentbuilddirectory(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currentbuilddirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationServiceState::set_currentbuilddirectory(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  currentbuilddirectory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ConfigurationServiceState.currentBuildDirectory)
}
inline void ConfigurationServiceState::set_currentbuilddirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  currentbuilddirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ConfigurationServiceState.currentBuildDirectory)
}
inline void ConfigurationServiceState::set_currentbuilddirectory(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  currentbuilddirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ConfigurationServiceState.currentBuildDirectory)
}
inline std::string* ConfigurationServiceState::_internal_mutable_currentbuilddirectory() {
  _has_bits_[0] |= 0x00000001u;
  return currentbuilddirectory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationServiceState::release_currentbuilddirectory() {
  // @@protoc_insertion_point(field_release:Network.ConfigurationServiceState.currentBuildDirectory)
  if (!_internal_has_currentbuilddirectory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return currentbuilddirectory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationServiceState::set_allocated_currentbuilddirectory(std::string* currentbuilddirectory) {
  if (currentbuilddirectory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currentbuilddirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentbuilddirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ConfigurationServiceState.currentBuildDirectory)
}

// required int32 checkBuildAttemptQuantity = 2;
inline bool ConfigurationServiceState::_internal_has_checkbuildattemptquantity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigurationServiceState::has_checkbuildattemptquantity() const {
  return _internal_has_checkbuildattemptquantity();
}
inline void ConfigurationServiceState::clear_checkbuildattemptquantity() {
  checkbuildattemptquantity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationServiceState::_internal_checkbuildattemptquantity() const {
  return checkbuildattemptquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationServiceState::checkbuildattemptquantity() const {
  // @@protoc_insertion_point(field_get:Network.ConfigurationServiceState.checkBuildAttemptQuantity)
  return _internal_checkbuildattemptquantity();
}
inline void ConfigurationServiceState::_internal_set_checkbuildattemptquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  checkbuildattemptquantity_ = value;
}
inline void ConfigurationServiceState::set_checkbuildattemptquantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkbuildattemptquantity(value);
  // @@protoc_insertion_point(field_set:Network.ConfigurationServiceState.checkBuildAttemptQuantity)
}

// required int32 buildCheckerState = 3;
inline bool ConfigurationServiceState::_internal_has_buildcheckerstate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigurationServiceState::has_buildcheckerstate() const {
  return _internal_has_buildcheckerstate();
}
inline void ConfigurationServiceState::clear_buildcheckerstate() {
  buildcheckerstate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationServiceState::_internal_buildcheckerstate() const {
  return buildcheckerstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationServiceState::buildcheckerstate() const {
  // @@protoc_insertion_point(field_get:Network.ConfigurationServiceState.buildCheckerState)
  return _internal_buildcheckerstate();
}
inline void ConfigurationServiceState::_internal_set_buildcheckerstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  buildcheckerstate_ = value;
}
inline void ConfigurationServiceState::set_buildcheckerstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buildcheckerstate(value);
  // @@protoc_insertion_point(field_set:Network.ConfigurationServiceState.buildCheckerState)
}

// -------------------------------------------------------------------

// ServiceClientInfo

// required int32 ip = 3;
inline bool ServiceClientInfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceClientInfo::has_ip() const {
  return _internal_has_ip();
}
inline void ServiceClientInfo::clear_ip() {
  ip_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceClientInfo::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceClientInfo::ip() const {
  // @@protoc_insertion_point(field_get:Network.ServiceClientInfo.ip)
  return _internal_ip();
}
inline void ServiceClientInfo::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
}
inline void ServiceClientInfo::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Network.ServiceClientInfo.ip)
}

// required int64 uptime = 5;
inline bool ServiceClientInfo::_internal_has_uptime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServiceClientInfo::has_uptime() const {
  return _internal_has_uptime();
}
inline void ServiceClientInfo::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceClientInfo::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceClientInfo::uptime() const {
  // @@protoc_insertion_point(field_get:Network.ServiceClientInfo.uptime)
  return _internal_uptime();
}
inline void ServiceClientInfo::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  uptime_ = value;
}
inline void ServiceClientInfo::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:Network.ServiceClientInfo.uptime)
}

// required bool isActual = 6;
inline bool ServiceClientInfo::_internal_has_isactual() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceClientInfo::has_isactual() const {
  return _internal_has_isactual();
}
inline void ServiceClientInfo::clear_isactual() {
  isactual_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ServiceClientInfo::_internal_isactual() const {
  return isactual_;
}
inline bool ServiceClientInfo::isactual() const {
  // @@protoc_insertion_point(field_get:Network.ServiceClientInfo.isActual)
  return _internal_isactual();
}
inline void ServiceClientInfo::_internal_set_isactual(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isactual_ = value;
}
inline void ServiceClientInfo::set_isactual(bool value) {
  _internal_set_isactual(value);
  // @@protoc_insertion_point(field_set:Network.ServiceClientInfo.isActual)
}

// required int64 replyQuantity = 7;
inline bool ServiceClientInfo::_internal_has_replyquantity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServiceClientInfo::has_replyquantity() const {
  return _internal_has_replyquantity();
}
inline void ServiceClientInfo::clear_replyquantity() {
  replyquantity_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceClientInfo::_internal_replyquantity() const {
  return replyquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceClientInfo::replyquantity() const {
  // @@protoc_insertion_point(field_get:Network.ServiceClientInfo.replyQuantity)
  return _internal_replyquantity();
}
inline void ServiceClientInfo::_internal_set_replyquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  replyquantity_ = value;
}
inline void ServiceClientInfo::set_replyquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_replyquantity(value);
  // @@protoc_insertion_point(field_set:Network.ServiceClientInfo.replyQuantity)
}

// required .Network.SoftwareInfo softwareInfo = 11;
inline bool ServiceClientInfo::_internal_has_softwareinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || softwareinfo_ != nullptr);
  return value;
}
inline bool ServiceClientInfo::has_softwareinfo() const {
  return _internal_has_softwareinfo();
}
inline void ServiceClientInfo::clear_softwareinfo() {
  if (softwareinfo_ != nullptr) softwareinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Network::SoftwareInfo& ServiceClientInfo::_internal_softwareinfo() const {
  const ::Network::SoftwareInfo* p = softwareinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Network::SoftwareInfo&>(
      ::Network::_SoftwareInfo_default_instance_);
}
inline const ::Network::SoftwareInfo& ServiceClientInfo::softwareinfo() const {
  // @@protoc_insertion_point(field_get:Network.ServiceClientInfo.softwareInfo)
  return _internal_softwareinfo();
}
inline void ServiceClientInfo::unsafe_arena_set_allocated_softwareinfo(
    ::Network::SoftwareInfo* softwareinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softwareinfo_);
  }
  softwareinfo_ = softwareinfo;
  if (softwareinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.ServiceClientInfo.softwareInfo)
}
inline ::Network::SoftwareInfo* ServiceClientInfo::release_softwareinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::Network::SoftwareInfo* temp = softwareinfo_;
  softwareinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Network::SoftwareInfo* ServiceClientInfo::unsafe_arena_release_softwareinfo() {
  // @@protoc_insertion_point(field_release:Network.ServiceClientInfo.softwareInfo)
  _has_bits_[0] &= ~0x00000001u;
  ::Network::SoftwareInfo* temp = softwareinfo_;
  softwareinfo_ = nullptr;
  return temp;
}
inline ::Network::SoftwareInfo* ServiceClientInfo::_internal_mutable_softwareinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (softwareinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Network::SoftwareInfo>(GetArena());
    softwareinfo_ = p;
  }
  return softwareinfo_;
}
inline ::Network::SoftwareInfo* ServiceClientInfo::mutable_softwareinfo() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceClientInfo.softwareInfo)
  return _internal_mutable_softwareinfo();
}
inline void ServiceClientInfo::set_allocated_softwareinfo(::Network::SoftwareInfo* softwareinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete softwareinfo_;
  }
  if (softwareinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softwareinfo);
    if (message_arena != submessage_arena) {
      softwareinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softwareinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  softwareinfo_ = softwareinfo;
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceClientInfo.softwareInfo)
}

// -------------------------------------------------------------------

// ServiceClients

// repeated .Network.ServiceClientInfo clients = 1;
inline int ServiceClients::_internal_clients_size() const {
  return clients_.size();
}
inline int ServiceClients::clients_size() const {
  return _internal_clients_size();
}
inline void ServiceClients::clear_clients() {
  clients_.Clear();
}
inline ::Network::ServiceClientInfo* ServiceClients::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:Network.ServiceClients.clients)
  return clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::ServiceClientInfo >*
ServiceClients::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:Network.ServiceClients.clients)
  return &clients_;
}
inline const ::Network::ServiceClientInfo& ServiceClients::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const ::Network::ServiceClientInfo& ServiceClients::clients(int index) const {
  // @@protoc_insertion_point(field_get:Network.ServiceClients.clients)
  return _internal_clients(index);
}
inline ::Network::ServiceClientInfo* ServiceClients::_internal_add_clients() {
  return clients_.Add();
}
inline ::Network::ServiceClientInfo* ServiceClients::add_clients() {
  // @@protoc_insertion_point(field_add:Network.ServiceClients.clients)
  return _internal_add_clients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::ServiceClientInfo >&
ServiceClients::clients() const {
  // @@protoc_insertion_point(field_list:Network.ServiceClients.clients)
  return clients_;
}

// -------------------------------------------------------------------

// BuildInfo

// required string project = 1;
inline bool BuildInfo::_internal_has_project() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildInfo::has_project() const {
  return _internal_has_project();
}
inline void BuildInfo::clear_project() {
  project_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildInfo::project() const {
  // @@protoc_insertion_point(field_get:Network.BuildInfo.project)
  return _internal_project();
}
inline void BuildInfo::set_project(const std::string& value) {
  _internal_set_project(value);
  // @@protoc_insertion_point(field_set:Network.BuildInfo.project)
}
inline std::string* BuildInfo::mutable_project() {
  // @@protoc_insertion_point(field_mutable:Network.BuildInfo.project)
  return _internal_mutable_project();
}
inline const std::string& BuildInfo::_internal_project() const {
  return project_.Get();
}
inline void BuildInfo::_internal_set_project(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuildInfo::set_project(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  project_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.BuildInfo.project)
}
inline void BuildInfo::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.BuildInfo.project)
}
inline void BuildInfo::set_project(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.BuildInfo.project)
}
inline std::string* BuildInfo::_internal_mutable_project() {
  _has_bits_[0] |= 0x00000001u;
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuildInfo::release_project() {
  // @@protoc_insertion_point(field_release:Network.BuildInfo.project)
  if (!_internal_has_project()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return project_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildInfo::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.BuildInfo.project)
}

// required int32 id = 2 [default = -1];
inline bool BuildInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BuildInfo::has_id() const {
  return _internal_has_id();
}
inline void BuildInfo::clear_id() {
  id_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildInfo::id() const {
  // @@protoc_insertion_point(field_get:Network.BuildInfo.id)
  return _internal_id();
}
inline void BuildInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void BuildInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Network.BuildInfo.id)
}

// required int64 date = 4;
inline bool BuildInfo::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuildInfo::has_date() const {
  return _internal_has_date();
}
inline void BuildInfo::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BuildInfo::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BuildInfo::date() const {
  // @@protoc_insertion_point(field_get:Network.BuildInfo.date)
  return _internal_date();
}
inline void BuildInfo::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  date_ = value;
}
inline void BuildInfo::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Network.BuildInfo.date)
}

// required int32 changeset = 5 [default = 0];
inline bool BuildInfo::_internal_has_changeset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuildInfo::has_changeset() const {
  return _internal_has_changeset();
}
inline void BuildInfo::clear_changeset() {
  changeset_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildInfo::_internal_changeset() const {
  return changeset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildInfo::changeset() const {
  // @@protoc_insertion_point(field_get:Network.BuildInfo.changeset)
  return _internal_changeset();
}
inline void BuildInfo::_internal_set_changeset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  changeset_ = value;
}
inline void BuildInfo::set_changeset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changeset(value);
  // @@protoc_insertion_point(field_set:Network.BuildInfo.changeset)
}

// required string user = 6;
inline bool BuildInfo::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuildInfo::has_user() const {
  return _internal_has_user();
}
inline void BuildInfo::clear_user() {
  user_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuildInfo::user() const {
  // @@protoc_insertion_point(field_get:Network.BuildInfo.user)
  return _internal_user();
}
inline void BuildInfo::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Network.BuildInfo.user)
}
inline std::string* BuildInfo::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Network.BuildInfo.user)
  return _internal_mutable_user();
}
inline const std::string& BuildInfo::_internal_user() const {
  return user_.Get();
}
inline void BuildInfo::_internal_set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuildInfo::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.BuildInfo.user)
}
inline void BuildInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.BuildInfo.user)
}
inline void BuildInfo::set_user(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.BuildInfo.user)
}
inline std::string* BuildInfo::_internal_mutable_user() {
  _has_bits_[0] |= 0x00000002u;
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuildInfo::release_user() {
  // @@protoc_insertion_point(field_release:Network.BuildInfo.user)
  if (!_internal_has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildInfo::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.BuildInfo.user)
}

// required string workstation = 7;
inline bool BuildInfo::_internal_has_workstation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuildInfo::has_workstation() const {
  return _internal_has_workstation();
}
inline void BuildInfo::clear_workstation() {
  workstation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BuildInfo::workstation() const {
  // @@protoc_insertion_point(field_get:Network.BuildInfo.workstation)
  return _internal_workstation();
}
inline void BuildInfo::set_workstation(const std::string& value) {
  _internal_set_workstation(value);
  // @@protoc_insertion_point(field_set:Network.BuildInfo.workstation)
}
inline std::string* BuildInfo::mutable_workstation() {
  // @@protoc_insertion_point(field_mutable:Network.BuildInfo.workstation)
  return _internal_mutable_workstation();
}
inline const std::string& BuildInfo::_internal_workstation() const {
  return workstation_.Get();
}
inline void BuildInfo::_internal_set_workstation(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  workstation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuildInfo::set_workstation(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  workstation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.BuildInfo.workstation)
}
inline void BuildInfo::set_workstation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  workstation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.BuildInfo.workstation)
}
inline void BuildInfo::set_workstation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  workstation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.BuildInfo.workstation)
}
inline std::string* BuildInfo::_internal_mutable_workstation() {
  _has_bits_[0] |= 0x00000004u;
  return workstation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuildInfo::release_workstation() {
  // @@protoc_insertion_point(field_release:Network.BuildInfo.workstation)
  if (!_internal_has_workstation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return workstation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildInfo::set_allocated_workstation(std::string* workstation) {
  if (workstation != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  workstation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workstation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.BuildInfo.workstation)
}

// -------------------------------------------------------------------

// ConfigurationServiceSettings

// required string equipmentID = 1;
inline bool ConfigurationServiceSettings::_internal_has_equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigurationServiceSettings::has_equipmentid() const {
  return _internal_has_equipmentid();
}
inline void ConfigurationServiceSettings::clear_equipmentid() {
  equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigurationServiceSettings::equipmentid() const {
  // @@protoc_insertion_point(field_get:Network.ConfigurationServiceSettings.equipmentID)
  return _internal_equipmentid();
}
inline void ConfigurationServiceSettings::set_equipmentid(const std::string& value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:Network.ConfigurationServiceSettings.equipmentID)
}
inline std::string* ConfigurationServiceSettings::mutable_equipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.ConfigurationServiceSettings.equipmentID)
  return _internal_mutable_equipmentid();
}
inline const std::string& ConfigurationServiceSettings::_internal_equipmentid() const {
  return equipmentid_.Get();
}
inline void ConfigurationServiceSettings::_internal_set_equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationServiceSettings::set_equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ConfigurationServiceSettings.equipmentID)
}
inline void ConfigurationServiceSettings::set_equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ConfigurationServiceSettings.equipmentID)
}
inline void ConfigurationServiceSettings::set_equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ConfigurationServiceSettings.equipmentID)
}
inline std::string* ConfigurationServiceSettings::_internal_mutable_equipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationServiceSettings::release_equipmentid() {
  // @@protoc_insertion_point(field_release:Network.ConfigurationServiceSettings.equipmentID)
  if (!_internal_has_equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationServiceSettings::set_allocated_equipmentid(std::string* equipmentid) {
  if (equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ConfigurationServiceSettings.equipmentID)
}

// required string autoloadBuildPath = 2;
inline bool ConfigurationServiceSettings::_internal_has_autoloadbuildpath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigurationServiceSettings::has_autoloadbuildpath() const {
  return _internal_has_autoloadbuildpath();
}
inline void ConfigurationServiceSettings::clear_autoloadbuildpath() {
  autoloadbuildpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConfigurationServiceSettings::autoloadbuildpath() const {
  // @@protoc_insertion_point(field_get:Network.ConfigurationServiceSettings.autoloadBuildPath)
  return _internal_autoloadbuildpath();
}
inline void ConfigurationServiceSettings::set_autoloadbuildpath(const std::string& value) {
  _internal_set_autoloadbuildpath(value);
  // @@protoc_insertion_point(field_set:Network.ConfigurationServiceSettings.autoloadBuildPath)
}
inline std::string* ConfigurationServiceSettings::mutable_autoloadbuildpath() {
  // @@protoc_insertion_point(field_mutable:Network.ConfigurationServiceSettings.autoloadBuildPath)
  return _internal_mutable_autoloadbuildpath();
}
inline const std::string& ConfigurationServiceSettings::_internal_autoloadbuildpath() const {
  return autoloadbuildpath_.Get();
}
inline void ConfigurationServiceSettings::_internal_set_autoloadbuildpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  autoloadbuildpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationServiceSettings::set_autoloadbuildpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  autoloadbuildpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ConfigurationServiceSettings.autoloadBuildPath)
}
inline void ConfigurationServiceSettings::set_autoloadbuildpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  autoloadbuildpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ConfigurationServiceSettings.autoloadBuildPath)
}
inline void ConfigurationServiceSettings::set_autoloadbuildpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  autoloadbuildpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ConfigurationServiceSettings.autoloadBuildPath)
}
inline std::string* ConfigurationServiceSettings::_internal_mutable_autoloadbuildpath() {
  _has_bits_[0] |= 0x00000002u;
  return autoloadbuildpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationServiceSettings::release_autoloadbuildpath() {
  // @@protoc_insertion_point(field_release:Network.ConfigurationServiceSettings.autoloadBuildPath)
  if (!_internal_has_autoloadbuildpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return autoloadbuildpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationServiceSettings::set_allocated_autoloadbuildpath(std::string* autoloadbuildpath) {
  if (autoloadbuildpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  autoloadbuildpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), autoloadbuildpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ConfigurationServiceSettings.autoloadBuildPath)
}

// required string workDirectory = 3;
inline bool ConfigurationServiceSettings::_internal_has_workdirectory() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigurationServiceSettings::has_workdirectory() const {
  return _internal_has_workdirectory();
}
inline void ConfigurationServiceSettings::clear_workdirectory() {
  workdirectory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConfigurationServiceSettings::workdirectory() const {
  // @@protoc_insertion_point(field_get:Network.ConfigurationServiceSettings.workDirectory)
  return _internal_workdirectory();
}
inline void ConfigurationServiceSettings::set_workdirectory(const std::string& value) {
  _internal_set_workdirectory(value);
  // @@protoc_insertion_point(field_set:Network.ConfigurationServiceSettings.workDirectory)
}
inline std::string* ConfigurationServiceSettings::mutable_workdirectory() {
  // @@protoc_insertion_point(field_mutable:Network.ConfigurationServiceSettings.workDirectory)
  return _internal_mutable_workdirectory();
}
inline const std::string& ConfigurationServiceSettings::_internal_workdirectory() const {
  return workdirectory_.Get();
}
inline void ConfigurationServiceSettings::_internal_set_workdirectory(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationServiceSettings::set_workdirectory(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  workdirectory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ConfigurationServiceSettings.workDirectory)
}
inline void ConfigurationServiceSettings::set_workdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ConfigurationServiceSettings.workDirectory)
}
inline void ConfigurationServiceSettings::set_workdirectory(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ConfigurationServiceSettings.workDirectory)
}
inline std::string* ConfigurationServiceSettings::_internal_mutable_workdirectory() {
  _has_bits_[0] |= 0x00000004u;
  return workdirectory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationServiceSettings::release_workdirectory() {
  // @@protoc_insertion_point(field_release:Network.ConfigurationServiceSettings.workDirectory)
  if (!_internal_has_workdirectory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return workdirectory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationServiceSettings::set_allocated_workdirectory(std::string* workdirectory) {
  if (workdirectory != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  workdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ConfigurationServiceSettings.workDirectory)
}

// -------------------------------------------------------------------

// ServiceSettings

// required string equipmentID = 1;
inline bool ServiceSettings::_internal_has_equipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceSettings::has_equipmentid() const {
  return _internal_has_equipmentid();
}
inline void ServiceSettings::clear_equipmentid() {
  equipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceSettings::equipmentid() const {
  // @@protoc_insertion_point(field_get:Network.ServiceSettings.equipmentID)
  return _internal_equipmentid();
}
inline void ServiceSettings::set_equipmentid(const std::string& value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:Network.ServiceSettings.equipmentID)
}
inline std::string* ServiceSettings::mutable_equipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceSettings.equipmentID)
  return _internal_mutable_equipmentid();
}
inline const std::string& ServiceSettings::_internal_equipmentid() const {
  return equipmentid_.Get();
}
inline void ServiceSettings::_internal_set_equipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceSettings::set_equipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ServiceSettings.equipmentID)
}
inline void ServiceSettings::set_equipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ServiceSettings.equipmentID)
}
inline void ServiceSettings::set_equipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ServiceSettings.equipmentID)
}
inline std::string* ServiceSettings::_internal_mutable_equipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return equipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceSettings::release_equipmentid() {
  // @@protoc_insertion_point(field_release:Network.ServiceSettings.equipmentID)
  if (!_internal_has_equipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return equipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceSettings::set_allocated_equipmentid(std::string* equipmentid) {
  if (equipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  equipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceSettings.equipmentID)
}

// required string configIP1 = 2;
inline bool ServiceSettings::_internal_has_configip1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceSettings::has_configip1() const {
  return _internal_has_configip1();
}
inline void ServiceSettings::clear_configip1() {
  configip1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceSettings::configip1() const {
  // @@protoc_insertion_point(field_get:Network.ServiceSettings.configIP1)
  return _internal_configip1();
}
inline void ServiceSettings::set_configip1(const std::string& value) {
  _internal_set_configip1(value);
  // @@protoc_insertion_point(field_set:Network.ServiceSettings.configIP1)
}
inline std::string* ServiceSettings::mutable_configip1() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceSettings.configIP1)
  return _internal_mutable_configip1();
}
inline const std::string& ServiceSettings::_internal_configip1() const {
  return configip1_.Get();
}
inline void ServiceSettings::_internal_set_configip1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  configip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceSettings::set_configip1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  configip1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ServiceSettings.configIP1)
}
inline void ServiceSettings::set_configip1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  configip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ServiceSettings.configIP1)
}
inline void ServiceSettings::set_configip1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  configip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ServiceSettings.configIP1)
}
inline std::string* ServiceSettings::_internal_mutable_configip1() {
  _has_bits_[0] |= 0x00000002u;
  return configip1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceSettings::release_configip1() {
  // @@protoc_insertion_point(field_release:Network.ServiceSettings.configIP1)
  if (!_internal_has_configip1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return configip1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceSettings::set_allocated_configip1(std::string* configip1) {
  if (configip1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  configip1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configip1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceSettings.configIP1)
}

// required string configIP2 = 3;
inline bool ServiceSettings::_internal_has_configip2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceSettings::has_configip2() const {
  return _internal_has_configip2();
}
inline void ServiceSettings::clear_configip2() {
  configip2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServiceSettings::configip2() const {
  // @@protoc_insertion_point(field_get:Network.ServiceSettings.configIP2)
  return _internal_configip2();
}
inline void ServiceSettings::set_configip2(const std::string& value) {
  _internal_set_configip2(value);
  // @@protoc_insertion_point(field_set:Network.ServiceSettings.configIP2)
}
inline std::string* ServiceSettings::mutable_configip2() {
  // @@protoc_insertion_point(field_mutable:Network.ServiceSettings.configIP2)
  return _internal_mutable_configip2();
}
inline const std::string& ServiceSettings::_internal_configip2() const {
  return configip2_.Get();
}
inline void ServiceSettings::_internal_set_configip2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  configip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceSettings::set_configip2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  configip2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ServiceSettings.configIP2)
}
inline void ServiceSettings::set_configip2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  configip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ServiceSettings.configIP2)
}
inline void ServiceSettings::set_configip2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  configip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ServiceSettings.configIP2)
}
inline std::string* ServiceSettings::_internal_mutable_configip2() {
  _has_bits_[0] |= 0x00000004u;
  return configip2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceSettings::release_configip2() {
  // @@protoc_insertion_point(field_release:Network.ServiceSettings.configIP2)
  if (!_internal_has_configip2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return configip2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceSettings::set_allocated_configip2(std::string* configip2) {
  if (configip2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  configip2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configip2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ServiceSettings.configIP2)
}

// -------------------------------------------------------------------

// GetTuningSourcesInfo

// -------------------------------------------------------------------

// GetTuningSourcesInfoReply

// optional int32 error = 1 [default = 0];
inline bool GetTuningSourcesInfoReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetTuningSourcesInfoReply::has_error() const {
  return _internal_has_error();
}
inline void GetTuningSourcesInfoReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTuningSourcesInfoReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTuningSourcesInfoReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesInfoReply.error)
  return _internal_error();
}
inline void GetTuningSourcesInfoReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  error_ = value;
}
inline void GetTuningSourcesInfoReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesInfoReply.error)
}

// repeated .Network.DataSourceInfo tuningSourceInfo = 2;
inline int GetTuningSourcesInfoReply::_internal_tuningsourceinfo_size() const {
  return tuningsourceinfo_.size();
}
inline int GetTuningSourcesInfoReply::tuningsourceinfo_size() const {
  return _internal_tuningsourceinfo_size();
}
inline void GetTuningSourcesInfoReply::clear_tuningsourceinfo() {
  tuningsourceinfo_.Clear();
}
inline ::Network::DataSourceInfo* GetTuningSourcesInfoReply::mutable_tuningsourceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetTuningSourcesInfoReply.tuningSourceInfo)
  return tuningsourceinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >*
GetTuningSourcesInfoReply::mutable_tuningsourceinfo() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetTuningSourcesInfoReply.tuningSourceInfo)
  return &tuningsourceinfo_;
}
inline const ::Network::DataSourceInfo& GetTuningSourcesInfoReply::_internal_tuningsourceinfo(int index) const {
  return tuningsourceinfo_.Get(index);
}
inline const ::Network::DataSourceInfo& GetTuningSourcesInfoReply::tuningsourceinfo(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesInfoReply.tuningSourceInfo)
  return _internal_tuningsourceinfo(index);
}
inline ::Network::DataSourceInfo* GetTuningSourcesInfoReply::_internal_add_tuningsourceinfo() {
  return tuningsourceinfo_.Add();
}
inline ::Network::DataSourceInfo* GetTuningSourcesInfoReply::add_tuningsourceinfo() {
  // @@protoc_insertion_point(field_add:Network.GetTuningSourcesInfoReply.tuningSourceInfo)
  return _internal_add_tuningsourceinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::DataSourceInfo >&
GetTuningSourcesInfoReply::tuningsourceinfo() const {
  // @@protoc_insertion_point(field_list:Network.GetTuningSourcesInfoReply.tuningSourceInfo)
  return tuningsourceinfo_;
}

// optional bool singleLmControlMode = 3 [default = true];
inline bool GetTuningSourcesInfoReply::_internal_has_singlelmcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetTuningSourcesInfoReply::has_singlelmcontrolmode() const {
  return _internal_has_singlelmcontrolmode();
}
inline void GetTuningSourcesInfoReply::clear_singlelmcontrolmode() {
  singlelmcontrolmode_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GetTuningSourcesInfoReply::_internal_singlelmcontrolmode() const {
  return singlelmcontrolmode_;
}
inline bool GetTuningSourcesInfoReply::singlelmcontrolmode() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesInfoReply.singleLmControlMode)
  return _internal_singlelmcontrolmode();
}
inline void GetTuningSourcesInfoReply::_internal_set_singlelmcontrolmode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  singlelmcontrolmode_ = value;
}
inline void GetTuningSourcesInfoReply::set_singlelmcontrolmode(bool value) {
  _internal_set_singlelmcontrolmode(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesInfoReply.singleLmControlMode)
}

// optional string activeClientID = 4;
inline bool GetTuningSourcesInfoReply::_internal_has_activeclientid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTuningSourcesInfoReply::has_activeclientid() const {
  return _internal_has_activeclientid();
}
inline void GetTuningSourcesInfoReply::clear_activeclientid() {
  activeclientid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTuningSourcesInfoReply::activeclientid() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesInfoReply.activeClientID)
  return _internal_activeclientid();
}
inline void GetTuningSourcesInfoReply::set_activeclientid(const std::string& value) {
  _internal_set_activeclientid(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesInfoReply.activeClientID)
}
inline std::string* GetTuningSourcesInfoReply::mutable_activeclientid() {
  // @@protoc_insertion_point(field_mutable:Network.GetTuningSourcesInfoReply.activeClientID)
  return _internal_mutable_activeclientid();
}
inline const std::string& GetTuningSourcesInfoReply::_internal_activeclientid() const {
  return activeclientid_.Get();
}
inline void GetTuningSourcesInfoReply::_internal_set_activeclientid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTuningSourcesInfoReply::set_activeclientid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetTuningSourcesInfoReply.activeClientID)
}
inline void GetTuningSourcesInfoReply::set_activeclientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetTuningSourcesInfoReply.activeClientID)
}
inline void GetTuningSourcesInfoReply::set_activeclientid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetTuningSourcesInfoReply.activeClientID)
}
inline std::string* GetTuningSourcesInfoReply::_internal_mutable_activeclientid() {
  _has_bits_[0] |= 0x00000001u;
  return activeclientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTuningSourcesInfoReply::release_activeclientid() {
  // @@protoc_insertion_point(field_release:Network.GetTuningSourcesInfoReply.activeClientID)
  if (!_internal_has_activeclientid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activeclientid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTuningSourcesInfoReply::set_allocated_activeclientid(std::string* activeclientid) {
  if (activeclientid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activeclientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activeclientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetTuningSourcesInfoReply.activeClientID)
}

// optional string activeClientIP = 5;
inline bool GetTuningSourcesInfoReply::_internal_has_activeclientip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetTuningSourcesInfoReply::has_activeclientip() const {
  return _internal_has_activeclientip();
}
inline void GetTuningSourcesInfoReply::clear_activeclientip() {
  activeclientip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetTuningSourcesInfoReply::activeclientip() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesInfoReply.activeClientIP)
  return _internal_activeclientip();
}
inline void GetTuningSourcesInfoReply::set_activeclientip(const std::string& value) {
  _internal_set_activeclientip(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesInfoReply.activeClientIP)
}
inline std::string* GetTuningSourcesInfoReply::mutable_activeclientip() {
  // @@protoc_insertion_point(field_mutable:Network.GetTuningSourcesInfoReply.activeClientIP)
  return _internal_mutable_activeclientip();
}
inline const std::string& GetTuningSourcesInfoReply::_internal_activeclientip() const {
  return activeclientip_.Get();
}
inline void GetTuningSourcesInfoReply::_internal_set_activeclientip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTuningSourcesInfoReply::set_activeclientip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetTuningSourcesInfoReply.activeClientIP)
}
inline void GetTuningSourcesInfoReply::set_activeclientip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetTuningSourcesInfoReply.activeClientIP)
}
inline void GetTuningSourcesInfoReply::set_activeclientip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetTuningSourcesInfoReply.activeClientIP)
}
inline std::string* GetTuningSourcesInfoReply::_internal_mutable_activeclientip() {
  _has_bits_[0] |= 0x00000002u;
  return activeclientip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTuningSourcesInfoReply::release_activeclientip() {
  // @@protoc_insertion_point(field_release:Network.GetTuningSourcesInfoReply.activeClientIP)
  if (!_internal_has_activeclientip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return activeclientip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTuningSourcesInfoReply::set_allocated_activeclientip(std::string* activeclientip) {
  if (activeclientip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activeclientip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activeclientip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetTuningSourcesInfoReply.activeClientIP)
}

// -------------------------------------------------------------------

// GetTuningSourcesStates

// -------------------------------------------------------------------

// SignalsAssociatedToTuningSource

// required uint64 sourceID = 1;
inline bool SignalsAssociatedToTuningSource::_internal_has_sourceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalsAssociatedToTuningSource::has_sourceid() const {
  return _internal_has_sourceid();
}
inline void SignalsAssociatedToTuningSource::clear_sourceid() {
  sourceid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalsAssociatedToTuningSource::_internal_sourceid() const {
  return sourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalsAssociatedToTuningSource::sourceid() const {
  // @@protoc_insertion_point(field_get:Network.SignalsAssociatedToTuningSource.sourceID)
  return _internal_sourceid();
}
inline void SignalsAssociatedToTuningSource::_internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_ = value;
}
inline void SignalsAssociatedToTuningSource::set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:Network.SignalsAssociatedToTuningSource.sourceID)
}

// repeated uint64 signalHash = 2;
inline int SignalsAssociatedToTuningSource::_internal_signalhash_size() const {
  return signalhash_.size();
}
inline int SignalsAssociatedToTuningSource::signalhash_size() const {
  return _internal_signalhash_size();
}
inline void SignalsAssociatedToTuningSource::clear_signalhash() {
  signalhash_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalsAssociatedToTuningSource::_internal_signalhash(int index) const {
  return signalhash_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalsAssociatedToTuningSource::signalhash(int index) const {
  // @@protoc_insertion_point(field_get:Network.SignalsAssociatedToTuningSource.signalHash)
  return _internal_signalhash(index);
}
inline void SignalsAssociatedToTuningSource::set_signalhash(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhash_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.SignalsAssociatedToTuningSource.signalHash)
}
inline void SignalsAssociatedToTuningSource::_internal_add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhash_.Add(value);
}
inline void SignalsAssociatedToTuningSource::add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_signalhash(value);
  // @@protoc_insertion_point(field_add:Network.SignalsAssociatedToTuningSource.signalHash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SignalsAssociatedToTuningSource::_internal_signalhash() const {
  return signalhash_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SignalsAssociatedToTuningSource::signalhash() const {
  // @@protoc_insertion_point(field_list:Network.SignalsAssociatedToTuningSource.signalHash)
  return _internal_signalhash();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SignalsAssociatedToTuningSource::_internal_mutable_signalhash() {
  return &signalhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SignalsAssociatedToTuningSource::mutable_signalhash() {
  // @@protoc_insertion_point(field_mutable_list:Network.SignalsAssociatedToTuningSource.signalHash)
  return _internal_mutable_signalhash();
}

// -------------------------------------------------------------------

// TuningSourceFilling

// required uint64 signalCount = 1;
inline bool TuningSourceFilling::_internal_has_signalcount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSourceFilling::has_signalcount() const {
  return _internal_has_signalcount();
}
inline void TuningSourceFilling::clear_signalcount() {
  signalcount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSourceFilling::_internal_signalcount() const {
  return signalcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSourceFilling::signalcount() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceFilling.signalCount)
  return _internal_signalcount();
}
inline void TuningSourceFilling::_internal_set_signalcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  signalcount_ = value;
}
inline void TuningSourceFilling::set_signalcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signalcount(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceFilling.signalCount)
}

// repeated .Network.SignalsAssociatedToTuningSource signalsPerSource = 2;
inline int TuningSourceFilling::_internal_signalspersource_size() const {
  return signalspersource_.size();
}
inline int TuningSourceFilling::signalspersource_size() const {
  return _internal_signalspersource_size();
}
inline void TuningSourceFilling::clear_signalspersource() {
  signalspersource_.Clear();
}
inline ::Network::SignalsAssociatedToTuningSource* TuningSourceFilling::mutable_signalspersource(int index) {
  // @@protoc_insertion_point(field_mutable:Network.TuningSourceFilling.signalsPerSource)
  return signalspersource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::SignalsAssociatedToTuningSource >*
TuningSourceFilling::mutable_signalspersource() {
  // @@protoc_insertion_point(field_mutable_list:Network.TuningSourceFilling.signalsPerSource)
  return &signalspersource_;
}
inline const ::Network::SignalsAssociatedToTuningSource& TuningSourceFilling::_internal_signalspersource(int index) const {
  return signalspersource_.Get(index);
}
inline const ::Network::SignalsAssociatedToTuningSource& TuningSourceFilling::signalspersource(int index) const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceFilling.signalsPerSource)
  return _internal_signalspersource(index);
}
inline ::Network::SignalsAssociatedToTuningSource* TuningSourceFilling::_internal_add_signalspersource() {
  return signalspersource_.Add();
}
inline ::Network::SignalsAssociatedToTuningSource* TuningSourceFilling::add_signalspersource() {
  // @@protoc_insertion_point(field_add:Network.TuningSourceFilling.signalsPerSource)
  return _internal_add_signalspersource();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::SignalsAssociatedToTuningSource >&
TuningSourceFilling::signalspersource() const {
  // @@protoc_insertion_point(field_list:Network.TuningSourceFilling.signalsPerSource)
  return signalspersource_;
}

// -------------------------------------------------------------------

// TuningSourceState

// optional uint64 sourceID = 1 [default = 0];
inline bool TuningSourceState::_internal_has_sourceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSourceState::has_sourceid() const {
  return _internal_has_sourceid();
}
inline void TuningSourceState::clear_sourceid() {
  sourceid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSourceState::_internal_sourceid() const {
  return sourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSourceState::sourceid() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.sourceID)
  return _internal_sourceid();
}
inline void TuningSourceState::_internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_ = value;
}
inline void TuningSourceState::set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.sourceID)
}

// optional bool isReply = 2 [default = false];
inline bool TuningSourceState::_internal_has_isreply() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_isreply() const {
  return _internal_has_isreply();
}
inline void TuningSourceState::clear_isreply() {
  isreply_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool TuningSourceState::_internal_isreply() const {
  return isreply_;
}
inline bool TuningSourceState::isreply() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.isReply)
  return _internal_isreply();
}
inline void TuningSourceState::_internal_set_isreply(bool value) {
  _has_bits_[0] |= 0x04000000u;
  isreply_ = value;
}
inline void TuningSourceState::set_isreply(bool value) {
  _internal_set_isreply(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.isReply)
}

// optional int64 requestCount = 3 [default = 0];
inline bool TuningSourceState::_internal_has_requestcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TuningSourceState::has_requestcount() const {
  return _internal_has_requestcount();
}
inline void TuningSourceState::clear_requestcount() {
  requestcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_requestcount() const {
  return requestcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::requestcount() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.requestCount)
  return _internal_requestcount();
}
inline void TuningSourceState::_internal_set_requestcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  requestcount_ = value;
}
inline void TuningSourceState::set_requestcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestcount(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.requestCount)
}

// optional int64 replyCount = 4 [default = 0];
inline bool TuningSourceState::_internal_has_replycount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TuningSourceState::has_replycount() const {
  return _internal_has_replycount();
}
inline void TuningSourceState::clear_replycount() {
  replycount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_replycount() const {
  return replycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::replycount() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.replyCount)
  return _internal_replycount();
}
inline void TuningSourceState::_internal_set_replycount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  replycount_ = value;
}
inline void TuningSourceState::set_replycount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_replycount(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.replyCount)
}

// optional int32 commandQueueSize = 5 [default = 0];
inline bool TuningSourceState::_internal_has_commandqueuesize() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_commandqueuesize() const {
  return _internal_has_commandqueuesize();
}
inline void TuningSourceState::clear_commandqueuesize() {
  commandqueuesize_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSourceState::_internal_commandqueuesize() const {
  return commandqueuesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSourceState::commandqueuesize() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.commandQueueSize)
  return _internal_commandqueuesize();
}
inline void TuningSourceState::_internal_set_commandqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  commandqueuesize_ = value;
}
inline void TuningSourceState::set_commandqueuesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commandqueuesize(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.commandQueueSize)
}

// optional int64 errUntimelyReplay = 6 [default = 0];
inline bool TuningSourceState::_internal_has_erruntimelyreplay() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TuningSourceState::has_erruntimelyreplay() const {
  return _internal_has_erruntimelyreplay();
}
inline void TuningSourceState::clear_erruntimelyreplay() {
  erruntimelyreplay_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_erruntimelyreplay() const {
  return erruntimelyreplay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::erruntimelyreplay() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errUntimelyReplay)
  return _internal_erruntimelyreplay();
}
inline void TuningSourceState::_internal_set_erruntimelyreplay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  erruntimelyreplay_ = value;
}
inline void TuningSourceState::set_erruntimelyreplay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_erruntimelyreplay(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errUntimelyReplay)
}

// optional int64 errSent = 7 [default = 0];
inline bool TuningSourceState::_internal_has_errsent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TuningSourceState::has_errsent() const {
  return _internal_has_errsent();
}
inline void TuningSourceState::clear_errsent() {
  errsent_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errsent() const {
  return errsent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errsent() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errSent)
  return _internal_errsent();
}
inline void TuningSourceState::_internal_set_errsent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  errsent_ = value;
}
inline void TuningSourceState::set_errsent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errsent(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errSent)
}

// optional int64 errPartialSent = 8 [default = 0];
inline bool TuningSourceState::_internal_has_errpartialsent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TuningSourceState::has_errpartialsent() const {
  return _internal_has_errpartialsent();
}
inline void TuningSourceState::clear_errpartialsent() {
  errpartialsent_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errpartialsent() const {
  return errpartialsent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errpartialsent() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errPartialSent)
  return _internal_errpartialsent();
}
inline void TuningSourceState::_internal_set_errpartialsent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  errpartialsent_ = value;
}
inline void TuningSourceState::set_errpartialsent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errpartialsent(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errPartialSent)
}

// optional int64 errReplySize = 9 [default = 0];
inline bool TuningSourceState::_internal_has_errreplysize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TuningSourceState::has_errreplysize() const {
  return _internal_has_errreplysize();
}
inline void TuningSourceState::clear_errreplysize() {
  errreplysize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errreplysize() const {
  return errreplysize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errreplysize() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errReplySize)
  return _internal_errreplysize();
}
inline void TuningSourceState::_internal_set_errreplysize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  errreplysize_ = value;
}
inline void TuningSourceState::set_errreplysize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errreplysize(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errReplySize)
}

// optional int64 errNoReply = 10 [default = 0];
inline bool TuningSourceState::_internal_has_errnoreply() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TuningSourceState::has_errnoreply() const {
  return _internal_has_errnoreply();
}
inline void TuningSourceState::clear_errnoreply() {
  errnoreply_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errnoreply() const {
  return errnoreply_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errnoreply() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errNoReply)
  return _internal_errnoreply();
}
inline void TuningSourceState::_internal_set_errnoreply(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  errnoreply_ = value;
}
inline void TuningSourceState::set_errnoreply(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errnoreply(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errNoReply)
}

// optional int64 errRupProtocolVersion = 11 [default = 0];
inline bool TuningSourceState::_internal_has_errrupprotocolversion() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupprotocolversion() const {
  return _internal_has_errrupprotocolversion();
}
inline void TuningSourceState::clear_errrupprotocolversion() {
  errrupprotocolversion_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupprotocolversion() const {
  return errrupprotocolversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupprotocolversion() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupProtocolVersion)
  return _internal_errrupprotocolversion();
}
inline void TuningSourceState::_internal_set_errrupprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  errrupprotocolversion_ = value;
}
inline void TuningSourceState::set_errrupprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupprotocolversion(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupProtocolVersion)
}

// optional int64 errRupFrameSize = 12 [default = 0];
inline bool TuningSourceState::_internal_has_errrupframesize() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupframesize() const {
  return _internal_has_errrupframesize();
}
inline void TuningSourceState::clear_errrupframesize() {
  errrupframesize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupframesize() const {
  return errrupframesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupframesize() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupFrameSize)
  return _internal_errrupframesize();
}
inline void TuningSourceState::_internal_set_errrupframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  errrupframesize_ = value;
}
inline void TuningSourceState::set_errrupframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupframesize(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupFrameSize)
}

// optional int64 errRupNonTuningData = 13 [default = 0];
inline bool TuningSourceState::_internal_has_errrupnontuningdata() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupnontuningdata() const {
  return _internal_has_errrupnontuningdata();
}
inline void TuningSourceState::clear_errrupnontuningdata() {
  errrupnontuningdata_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupnontuningdata() const {
  return errrupnontuningdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupnontuningdata() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupNonTuningData)
  return _internal_errrupnontuningdata();
}
inline void TuningSourceState::_internal_set_errrupnontuningdata(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  errrupnontuningdata_ = value;
}
inline void TuningSourceState::set_errrupnontuningdata(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupnontuningdata(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupNonTuningData)
}

// optional int64 errRupModuleType = 14 [default = 0];
inline bool TuningSourceState::_internal_has_errrupmoduletype() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupmoduletype() const {
  return _internal_has_errrupmoduletype();
}
inline void TuningSourceState::clear_errrupmoduletype() {
  errrupmoduletype_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupmoduletype() const {
  return errrupmoduletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupmoduletype() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupModuleType)
  return _internal_errrupmoduletype();
}
inline void TuningSourceState::_internal_set_errrupmoduletype(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  errrupmoduletype_ = value;
}
inline void TuningSourceState::set_errrupmoduletype(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupmoduletype(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupModuleType)
}

// optional int64 errRupFramesQuantity = 15 [default = 0];
inline bool TuningSourceState::_internal_has_errrupframesquantity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupframesquantity() const {
  return _internal_has_errrupframesquantity();
}
inline void TuningSourceState::clear_errrupframesquantity() {
  errrupframesquantity_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupframesquantity() const {
  return errrupframesquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupframesquantity() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupFramesQuantity)
  return _internal_errrupframesquantity();
}
inline void TuningSourceState::_internal_set_errrupframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  errrupframesquantity_ = value;
}
inline void TuningSourceState::set_errrupframesquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupframesquantity(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupFramesQuantity)
}

// optional int64 errRupFrameNumber = 16 [default = 0];
inline bool TuningSourceState::_internal_has_errrupframenumber() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupframenumber() const {
  return _internal_has_errrupframenumber();
}
inline void TuningSourceState::clear_errrupframenumber() {
  errrupframenumber_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupframenumber() const {
  return errrupframenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupframenumber() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupFrameNumber)
  return _internal_errrupframenumber();
}
inline void TuningSourceState::_internal_set_errrupframenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  errrupframenumber_ = value;
}
inline void TuningSourceState::set_errrupframenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupframenumber(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupFrameNumber)
}

// optional int64 errFotipProtocolVersion = 17 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipprotocolversion() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipprotocolversion() const {
  return _internal_has_errfotipprotocolversion();
}
inline void TuningSourceState::clear_errfotipprotocolversion() {
  errfotipprotocolversion_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipprotocolversion() const {
  return errfotipprotocolversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipprotocolversion() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipProtocolVersion)
  return _internal_errfotipprotocolversion();
}
inline void TuningSourceState::_internal_set_errfotipprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  errfotipprotocolversion_ = value;
}
inline void TuningSourceState::set_errfotipprotocolversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipprotocolversion(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipProtocolVersion)
}

// optional int64 errFotipUniqueID = 18 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipuniqueid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipuniqueid() const {
  return _internal_has_errfotipuniqueid();
}
inline void TuningSourceState::clear_errfotipuniqueid() {
  errfotipuniqueid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipuniqueid() const {
  return errfotipuniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipuniqueid() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipUniqueID)
  return _internal_errfotipuniqueid();
}
inline void TuningSourceState::_internal_set_errfotipuniqueid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  errfotipuniqueid_ = value;
}
inline void TuningSourceState::set_errfotipuniqueid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipuniqueid(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipUniqueID)
}

// optional int64 errFotipLmNumber = 19 [default = 0];
inline bool TuningSourceState::_internal_has_errfotiplmnumber() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotiplmnumber() const {
  return _internal_has_errfotiplmnumber();
}
inline void TuningSourceState::clear_errfotiplmnumber() {
  errfotiplmnumber_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotiplmnumber() const {
  return errfotiplmnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotiplmnumber() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipLmNumber)
  return _internal_errfotiplmnumber();
}
inline void TuningSourceState::_internal_set_errfotiplmnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  errfotiplmnumber_ = value;
}
inline void TuningSourceState::set_errfotiplmnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotiplmnumber(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipLmNumber)
}

// optional int64 errFotipSubsystemCode = 20 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipsubsystemcode() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipsubsystemcode() const {
  return _internal_has_errfotipsubsystemcode();
}
inline void TuningSourceState::clear_errfotipsubsystemcode() {
  errfotipsubsystemcode_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipsubsystemcode() const {
  return errfotipsubsystemcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipsubsystemcode() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipSubsystemCode)
  return _internal_errfotipsubsystemcode();
}
inline void TuningSourceState::_internal_set_errfotipsubsystemcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  errfotipsubsystemcode_ = value;
}
inline void TuningSourceState::set_errfotipsubsystemcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipsubsystemcode(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipSubsystemCode)
}

// optional int64 errFotipOperationCode = 21 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipoperationcode() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipoperationcode() const {
  return _internal_has_errfotipoperationcode();
}
inline void TuningSourceState::clear_errfotipoperationcode() {
  errfotipoperationcode_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipoperationcode() const {
  return errfotipoperationcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipoperationcode() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipOperationCode)
  return _internal_errfotipoperationcode();
}
inline void TuningSourceState::_internal_set_errfotipoperationcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  errfotipoperationcode_ = value;
}
inline void TuningSourceState::set_errfotipoperationcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipoperationcode(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipOperationCode)
}

// optional int64 errFotipFrameSize = 22 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipframesize() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipframesize() const {
  return _internal_has_errfotipframesize();
}
inline void TuningSourceState::clear_errfotipframesize() {
  errfotipframesize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipframesize() const {
  return errfotipframesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipframesize() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipFrameSize)
  return _internal_errfotipframesize();
}
inline void TuningSourceState::_internal_set_errfotipframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  errfotipframesize_ = value;
}
inline void TuningSourceState::set_errfotipframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipframesize(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipFrameSize)
}

// optional int64 errFotipRomSize = 23 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipromsize() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipromsize() const {
  return _internal_has_errfotipromsize();
}
inline void TuningSourceState::clear_errfotipromsize() {
  errfotipromsize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipromsize() const {
  return errfotipromsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipromsize() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipRomSize)
  return _internal_errfotipromsize();
}
inline void TuningSourceState::_internal_set_errfotipromsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  errfotipromsize_ = value;
}
inline void TuningSourceState::set_errfotipromsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipromsize(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipRomSize)
}

// optional int64 errFotipRomFrameSize = 24 [default = 0];
inline bool TuningSourceState::_internal_has_errfotipromframesize() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errfotipromframesize() const {
  return _internal_has_errfotipromframesize();
}
inline void TuningSourceState::clear_errfotipromframesize() {
  errfotipromframesize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errfotipromframesize() const {
  return errfotipromframesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errfotipromframesize() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errFotipRomFrameSize)
  return _internal_errfotipromframesize();
}
inline void TuningSourceState::_internal_set_errfotipromframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00200000u;
  errfotipromframesize_ = value;
}
inline void TuningSourceState::set_errfotipromframesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errfotipromframesize(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errFotipRomFrameSize)
}

// optional int64 fotipFlagBoundsCheckSuccess = 25 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagboundschecksuccess() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagboundschecksuccess() const {
  return _internal_has_fotipflagboundschecksuccess();
}
inline void TuningSourceState::clear_fotipflagboundschecksuccess() {
  fotipflagboundschecksuccess_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagboundschecksuccess() const {
  return fotipflagboundschecksuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagboundschecksuccess() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagBoundsCheckSuccess)
  return _internal_fotipflagboundschecksuccess();
}
inline void TuningSourceState::_internal_set_fotipflagboundschecksuccess(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  fotipflagboundschecksuccess_ = value;
}
inline void TuningSourceState::set_fotipflagboundschecksuccess(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagboundschecksuccess(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagBoundsCheckSuccess)
}

// optional int64 fotipFlagWriteSuccess = 26 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagwritesuccess() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagwritesuccess() const {
  return _internal_has_fotipflagwritesuccess();
}
inline void TuningSourceState::clear_fotipflagwritesuccess() {
  fotipflagwritesuccess_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagwritesuccess() const {
  return fotipflagwritesuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagwritesuccess() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagWriteSuccess)
  return _internal_fotipflagwritesuccess();
}
inline void TuningSourceState::_internal_set_fotipflagwritesuccess(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00800000u;
  fotipflagwritesuccess_ = value;
}
inline void TuningSourceState::set_fotipflagwritesuccess(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagwritesuccess(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagWriteSuccess)
}

// optional int64 fotipFlagDataTypeErr = 27 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagdatatypeerr() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagdatatypeerr() const {
  return _internal_has_fotipflagdatatypeerr();
}
inline void TuningSourceState::clear_fotipflagdatatypeerr() {
  fotipflagdatatypeerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagdatatypeerr() const {
  return fotipflagdatatypeerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagdatatypeerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagDataTypeErr)
  return _internal_fotipflagdatatypeerr();
}
inline void TuningSourceState::_internal_set_fotipflagdatatypeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x01000000u;
  fotipflagdatatypeerr_ = value;
}
inline void TuningSourceState::set_fotipflagdatatypeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagdatatypeerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagDataTypeErr)
}

// optional int64 fotipFlagOpCodeErr = 28 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagopcodeerr() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagopcodeerr() const {
  return _internal_has_fotipflagopcodeerr();
}
inline void TuningSourceState::clear_fotipflagopcodeerr() {
  fotipflagopcodeerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagopcodeerr() const {
  return fotipflagopcodeerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagopcodeerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagOpCodeErr)
  return _internal_fotipflagopcodeerr();
}
inline void TuningSourceState::_internal_set_fotipflagopcodeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x40000000u;
  fotipflagopcodeerr_ = value;
}
inline void TuningSourceState::set_fotipflagopcodeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagopcodeerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagOpCodeErr)
}

// optional int64 fotipFlagStartAddrErr = 29 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagstartaddrerr() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagstartaddrerr() const {
  return _internal_has_fotipflagstartaddrerr();
}
inline void TuningSourceState::clear_fotipflagstartaddrerr() {
  fotipflagstartaddrerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagstartaddrerr() const {
  return fotipflagstartaddrerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagstartaddrerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagStartAddrErr)
  return _internal_fotipflagstartaddrerr();
}
inline void TuningSourceState::_internal_set_fotipflagstartaddrerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x80000000u;
  fotipflagstartaddrerr_ = value;
}
inline void TuningSourceState::set_fotipflagstartaddrerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagstartaddrerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagStartAddrErr)
}

// optional int64 fotipFlagRomSizeErr = 30 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagromsizeerr() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagromsizeerr() const {
  return _internal_has_fotipflagromsizeerr();
}
inline void TuningSourceState::clear_fotipflagromsizeerr() {
  fotipflagromsizeerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagromsizeerr() const {
  return fotipflagromsizeerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagromsizeerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagRomSizeErr)
  return _internal_fotipflagromsizeerr();
}
inline void TuningSourceState::_internal_set_fotipflagromsizeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000001u;
  fotipflagromsizeerr_ = value;
}
inline void TuningSourceState::set_fotipflagromsizeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagromsizeerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagRomSizeErr)
}

// optional int64 fotipFlagRomFrameSizeErr = 31 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagromframesizeerr() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagromframesizeerr() const {
  return _internal_has_fotipflagromframesizeerr();
}
inline void TuningSourceState::clear_fotipflagromframesizeerr() {
  fotipflagromframesizeerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagromframesizeerr() const {
  return fotipflagromframesizeerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagromframesizeerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagRomFrameSizeErr)
  return _internal_fotipflagromframesizeerr();
}
inline void TuningSourceState::_internal_set_fotipflagromframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000002u;
  fotipflagromframesizeerr_ = value;
}
inline void TuningSourceState::set_fotipflagromframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagromframesizeerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagRomFrameSizeErr)
}

// optional int64 fotipFlagFrameSizeErr = 32 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagframesizeerr() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagframesizeerr() const {
  return _internal_has_fotipflagframesizeerr();
}
inline void TuningSourceState::clear_fotipflagframesizeerr() {
  fotipflagframesizeerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagframesizeerr() const {
  return fotipflagframesizeerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagframesizeerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagFrameSizeErr)
  return _internal_fotipflagframesizeerr();
}
inline void TuningSourceState::_internal_set_fotipflagframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000004u;
  fotipflagframesizeerr_ = value;
}
inline void TuningSourceState::set_fotipflagframesizeerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagframesizeerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagFrameSizeErr)
}

// optional int64 fotipFlagProtocolVersionErr = 33 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagprotocolversionerr() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagprotocolversionerr() const {
  return _internal_has_fotipflagprotocolversionerr();
}
inline void TuningSourceState::clear_fotipflagprotocolversionerr() {
  fotipflagprotocolversionerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagprotocolversionerr() const {
  return fotipflagprotocolversionerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagprotocolversionerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagProtocolVersionErr)
  return _internal_fotipflagprotocolversionerr();
}
inline void TuningSourceState::_internal_set_fotipflagprotocolversionerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000008u;
  fotipflagprotocolversionerr_ = value;
}
inline void TuningSourceState::set_fotipflagprotocolversionerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagprotocolversionerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagProtocolVersionErr)
}

// optional int64 fotipFlagSubsystemKeyErr = 34 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagsubsystemkeyerr() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagsubsystemkeyerr() const {
  return _internal_has_fotipflagsubsystemkeyerr();
}
inline void TuningSourceState::clear_fotipflagsubsystemkeyerr() {
  fotipflagsubsystemkeyerr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagsubsystemkeyerr() const {
  return fotipflagsubsystemkeyerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagsubsystemkeyerr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagSubsystemKeyErr)
  return _internal_fotipflagsubsystemkeyerr();
}
inline void TuningSourceState::_internal_set_fotipflagsubsystemkeyerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000010u;
  fotipflagsubsystemkeyerr_ = value;
}
inline void TuningSourceState::set_fotipflagsubsystemkeyerr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagsubsystemkeyerr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagSubsystemKeyErr)
}

// optional int64 fotipFlagUniueIDErr = 35 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflaguniueiderr() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflaguniueiderr() const {
  return _internal_has_fotipflaguniueiderr();
}
inline void TuningSourceState::clear_fotipflaguniueiderr() {
  fotipflaguniueiderr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflaguniueiderr() const {
  return fotipflaguniueiderr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflaguniueiderr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagUniueIDErr)
  return _internal_fotipflaguniueiderr();
}
inline void TuningSourceState::_internal_set_fotipflaguniueiderr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000020u;
  fotipflaguniueiderr_ = value;
}
inline void TuningSourceState::set_fotipflaguniueiderr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflaguniueiderr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagUniueIDErr)
}

// optional int64 fotipFlagOffsetErr = 36 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagoffseterr() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagoffseterr() const {
  return _internal_has_fotipflagoffseterr();
}
inline void TuningSourceState::clear_fotipflagoffseterr() {
  fotipflagoffseterr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagoffseterr() const {
  return fotipflagoffseterr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagoffseterr() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagOffsetErr)
  return _internal_fotipflagoffseterr();
}
inline void TuningSourceState::_internal_set_fotipflagoffseterr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000040u;
  fotipflagoffseterr_ = value;
}
inline void TuningSourceState::set_fotipflagoffseterr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagoffseterr(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagOffsetErr)
}

// optional int64 fotipFlagApplySuccess = 37 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagapplysuccess() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagapplysuccess() const {
  return _internal_has_fotipflagapplysuccess();
}
inline void TuningSourceState::clear_fotipflagapplysuccess() {
  fotipflagapplysuccess_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagapplysuccess() const {
  return fotipflagapplysuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagapplysuccess() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagApplySuccess)
  return _internal_fotipflagapplysuccess();
}
inline void TuningSourceState::_internal_set_fotipflagapplysuccess(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000080u;
  fotipflagapplysuccess_ = value;
}
inline void TuningSourceState::set_fotipflagapplysuccess(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagapplysuccess(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagApplySuccess)
}

// optional int64 fotipFlagSetSOR = 38 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagsetsor() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagsetsor() const {
  return _internal_has_fotipflagsetsor();
}
inline void TuningSourceState::clear_fotipflagsetsor() {
  fotipflagsetsor_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagsetsor() const {
  return fotipflagsetsor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagsetsor() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagSetSOR)
  return _internal_fotipflagsetsor();
}
inline void TuningSourceState::_internal_set_fotipflagsetsor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000100u;
  fotipflagsetsor_ = value;
}
inline void TuningSourceState::set_fotipflagsetsor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagsetsor(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagSetSOR)
}

// optional int64 errAnalogLowBoundCheck = 39 [default = 0];
inline bool TuningSourceState::_internal_has_erranaloglowboundcheck() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool TuningSourceState::has_erranaloglowboundcheck() const {
  return _internal_has_erranaloglowboundcheck();
}
inline void TuningSourceState::clear_erranaloglowboundcheck() {
  erranaloglowboundcheck_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_erranaloglowboundcheck() const {
  return erranaloglowboundcheck_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::erranaloglowboundcheck() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errAnalogLowBoundCheck)
  return _internal_erranaloglowboundcheck();
}
inline void TuningSourceState::_internal_set_erranaloglowboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000200u;
  erranaloglowboundcheck_ = value;
}
inline void TuningSourceState::set_erranaloglowboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_erranaloglowboundcheck(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errAnalogLowBoundCheck)
}

// optional int64 errAnalogHighBoundCheck = 40 [default = 0];
inline bool TuningSourceState::_internal_has_erranaloghighboundcheck() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool TuningSourceState::has_erranaloghighboundcheck() const {
  return _internal_has_erranaloghighboundcheck();
}
inline void TuningSourceState::clear_erranaloghighboundcheck() {
  erranaloghighboundcheck_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_erranaloghighboundcheck() const {
  return erranaloghighboundcheck_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::erranaloghighboundcheck() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errAnalogHighBoundCheck)
  return _internal_erranaloghighboundcheck();
}
inline void TuningSourceState::_internal_set_erranaloghighboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000400u;
  erranaloghighboundcheck_ = value;
}
inline void TuningSourceState::set_erranaloghighboundcheck(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_erranaloghighboundcheck(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errAnalogHighBoundCheck)
}

// optional int64 errRupCRC = 41 [default = 0];
inline bool TuningSourceState::_internal_has_errrupcrc() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool TuningSourceState::has_errrupcrc() const {
  return _internal_has_errrupcrc();
}
inline void TuningSourceState::clear_errrupcrc() {
  errrupcrc_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errrupcrc() const {
  return errrupcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errrupcrc() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errRupCRC)
  return _internal_errrupcrc();
}
inline void TuningSourceState::_internal_set_errrupcrc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000800u;
  errrupcrc_ = value;
}
inline void TuningSourceState::set_errrupcrc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errrupcrc(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errRupCRC)
}

// optional bool controlIsActive = 42 [default = false];
inline bool TuningSourceState::_internal_has_controlisactive() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_controlisactive() const {
  return _internal_has_controlisactive();
}
inline void TuningSourceState::clear_controlisactive() {
  controlisactive_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool TuningSourceState::_internal_controlisactive() const {
  return controlisactive_;
}
inline bool TuningSourceState::controlisactive() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.controlIsActive)
  return _internal_controlisactive();
}
inline void TuningSourceState::_internal_set_controlisactive(bool value) {
  _has_bits_[0] |= 0x08000000u;
  controlisactive_ = value;
}
inline void TuningSourceState::set_controlisactive(bool value) {
  _internal_set_controlisactive(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.controlIsActive)
}

// optional bool setSOR = 43 [default = false];
inline bool TuningSourceState::_internal_has_setsor() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_setsor() const {
  return _internal_has_setsor();
}
inline void TuningSourceState::clear_setsor() {
  setsor_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool TuningSourceState::_internal_setsor() const {
  return setsor_;
}
inline bool TuningSourceState::setsor() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.setSOR)
  return _internal_setsor();
}
inline void TuningSourceState::_internal_set_setsor(bool value) {
  _has_bits_[0] |= 0x10000000u;
  setsor_ = value;
}
inline void TuningSourceState::set_setsor(bool value) {
  _internal_set_setsor(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.setSOR)
}

// optional bool hasUnappliedParams = 44 [default = false];
inline bool TuningSourceState::_internal_has_hasunappliedparams() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TuningSourceState::has_hasunappliedparams() const {
  return _internal_has_hasunappliedparams();
}
inline void TuningSourceState::clear_hasunappliedparams() {
  hasunappliedparams_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool TuningSourceState::_internal_hasunappliedparams() const {
  return hasunappliedparams_;
}
inline bool TuningSourceState::hasunappliedparams() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.hasUnappliedParams)
  return _internal_hasunappliedparams();
}
inline void TuningSourceState::_internal_set_hasunappliedparams(bool value) {
  _has_bits_[0] |= 0x20000000u;
  hasunappliedparams_ = value;
}
inline void TuningSourceState::set_hasunappliedparams(bool value) {
  _internal_set_hasunappliedparams(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.hasUnappliedParams)
}

// optional bool writingDisabled = 45 [default = false];
inline bool TuningSourceState::_internal_has_writingdisabled() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool TuningSourceState::has_writingdisabled() const {
  return _internal_has_writingdisabled();
}
inline void TuningSourceState::clear_writingdisabled() {
  writingdisabled_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool TuningSourceState::_internal_writingdisabled() const {
  return writingdisabled_;
}
inline bool TuningSourceState::writingdisabled() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.writingDisabled)
  return _internal_writingdisabled();
}
inline void TuningSourceState::_internal_set_writingdisabled(bool value) {
  _has_bits_[1] |= 0x00004000u;
  writingdisabled_ = value;
}
inline void TuningSourceState::set_writingdisabled(bool value) {
  _internal_set_writingdisabled(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.writingDisabled)
}

// optional int64 fotipFlagWritingDisabled = 46 [default = 0];
inline bool TuningSourceState::_internal_has_fotipflagwritingdisabled() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool TuningSourceState::has_fotipflagwritingdisabled() const {
  return _internal_has_fotipflagwritingdisabled();
}
inline void TuningSourceState::clear_fotipflagwritingdisabled() {
  fotipflagwritingdisabled_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_fotipflagwritingdisabled() const {
  return fotipflagwritingdisabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::fotipflagwritingdisabled() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.fotipFlagWritingDisabled)
  return _internal_fotipflagwritingdisabled();
}
inline void TuningSourceState::_internal_set_fotipflagwritingdisabled(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00001000u;
  fotipflagwritingdisabled_ = value;
}
inline void TuningSourceState::set_fotipflagwritingdisabled(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fotipflagwritingdisabled(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.fotipFlagWritingDisabled)
}

// optional int64 errTuningFrameUpdate = 47 [default = 0];
inline bool TuningSourceState::_internal_has_errtuningframeupdate() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool TuningSourceState::has_errtuningframeupdate() const {
  return _internal_has_errtuningframeupdate();
}
inline void TuningSourceState::clear_errtuningframeupdate() {
  errtuningframeupdate_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::_internal_errtuningframeupdate() const {
  return errtuningframeupdate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSourceState::errtuningframeupdate() const {
  // @@protoc_insertion_point(field_get:Network.TuningSourceState.errTuningFrameUpdate)
  return _internal_errtuningframeupdate();
}
inline void TuningSourceState::_internal_set_errtuningframeupdate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00002000u;
  errtuningframeupdate_ = value;
}
inline void TuningSourceState::set_errtuningframeupdate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errtuningframeupdate(value);
  // @@protoc_insertion_point(field_set:Network.TuningSourceState.errTuningFrameUpdate)
}

// -------------------------------------------------------------------

// GetTuningSourcesStatesReply

// optional int32 error = 1 [default = 0];
inline bool GetTuningSourcesStatesReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetTuningSourcesStatesReply::has_error() const {
  return _internal_has_error();
}
inline void GetTuningSourcesStatesReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTuningSourcesStatesReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTuningSourcesStatesReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesStatesReply.error)
  return _internal_error();
}
inline void GetTuningSourcesStatesReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  error_ = value;
}
inline void GetTuningSourcesStatesReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesStatesReply.error)
}

// repeated .Network.TuningSourceState tuningSourcesState = 2;
inline int GetTuningSourcesStatesReply::_internal_tuningsourcesstate_size() const {
  return tuningsourcesstate_.size();
}
inline int GetTuningSourcesStatesReply::tuningsourcesstate_size() const {
  return _internal_tuningsourcesstate_size();
}
inline void GetTuningSourcesStatesReply::clear_tuningsourcesstate() {
  tuningsourcesstate_.Clear();
}
inline ::Network::TuningSourceState* GetTuningSourcesStatesReply::mutable_tuningsourcesstate(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetTuningSourcesStatesReply.tuningSourcesState)
  return tuningsourcesstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSourceState >*
GetTuningSourcesStatesReply::mutable_tuningsourcesstate() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetTuningSourcesStatesReply.tuningSourcesState)
  return &tuningsourcesstate_;
}
inline const ::Network::TuningSourceState& GetTuningSourcesStatesReply::_internal_tuningsourcesstate(int index) const {
  return tuningsourcesstate_.Get(index);
}
inline const ::Network::TuningSourceState& GetTuningSourcesStatesReply::tuningsourcesstate(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesStatesReply.tuningSourcesState)
  return _internal_tuningsourcesstate(index);
}
inline ::Network::TuningSourceState* GetTuningSourcesStatesReply::_internal_add_tuningsourcesstate() {
  return tuningsourcesstate_.Add();
}
inline ::Network::TuningSourceState* GetTuningSourcesStatesReply::add_tuningsourcesstate() {
  // @@protoc_insertion_point(field_add:Network.GetTuningSourcesStatesReply.tuningSourcesState)
  return _internal_add_tuningsourcesstate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSourceState >&
GetTuningSourcesStatesReply::tuningsourcesstate() const {
  // @@protoc_insertion_point(field_list:Network.GetTuningSourcesStatesReply.tuningSourcesState)
  return tuningsourcesstate_;
}

// optional bool singleLmControlMode = 3 [default = true];
inline bool GetTuningSourcesStatesReply::_internal_has_singlelmcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetTuningSourcesStatesReply::has_singlelmcontrolmode() const {
  return _internal_has_singlelmcontrolmode();
}
inline void GetTuningSourcesStatesReply::clear_singlelmcontrolmode() {
  singlelmcontrolmode_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GetTuningSourcesStatesReply::_internal_singlelmcontrolmode() const {
  return singlelmcontrolmode_;
}
inline bool GetTuningSourcesStatesReply::singlelmcontrolmode() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesStatesReply.singleLmControlMode)
  return _internal_singlelmcontrolmode();
}
inline void GetTuningSourcesStatesReply::_internal_set_singlelmcontrolmode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  singlelmcontrolmode_ = value;
}
inline void GetTuningSourcesStatesReply::set_singlelmcontrolmode(bool value) {
  _internal_set_singlelmcontrolmode(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesStatesReply.singleLmControlMode)
}

// optional string activeClientID = 4;
inline bool GetTuningSourcesStatesReply::_internal_has_activeclientid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTuningSourcesStatesReply::has_activeclientid() const {
  return _internal_has_activeclientid();
}
inline void GetTuningSourcesStatesReply::clear_activeclientid() {
  activeclientid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTuningSourcesStatesReply::activeclientid() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesStatesReply.activeClientID)
  return _internal_activeclientid();
}
inline void GetTuningSourcesStatesReply::set_activeclientid(const std::string& value) {
  _internal_set_activeclientid(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesStatesReply.activeClientID)
}
inline std::string* GetTuningSourcesStatesReply::mutable_activeclientid() {
  // @@protoc_insertion_point(field_mutable:Network.GetTuningSourcesStatesReply.activeClientID)
  return _internal_mutable_activeclientid();
}
inline const std::string& GetTuningSourcesStatesReply::_internal_activeclientid() const {
  return activeclientid_.Get();
}
inline void GetTuningSourcesStatesReply::_internal_set_activeclientid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTuningSourcesStatesReply::set_activeclientid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetTuningSourcesStatesReply.activeClientID)
}
inline void GetTuningSourcesStatesReply::set_activeclientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetTuningSourcesStatesReply.activeClientID)
}
inline void GetTuningSourcesStatesReply::set_activeclientid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetTuningSourcesStatesReply.activeClientID)
}
inline std::string* GetTuningSourcesStatesReply::_internal_mutable_activeclientid() {
  _has_bits_[0] |= 0x00000001u;
  return activeclientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTuningSourcesStatesReply::release_activeclientid() {
  // @@protoc_insertion_point(field_release:Network.GetTuningSourcesStatesReply.activeClientID)
  if (!_internal_has_activeclientid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activeclientid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTuningSourcesStatesReply::set_allocated_activeclientid(std::string* activeclientid) {
  if (activeclientid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activeclientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activeclientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetTuningSourcesStatesReply.activeClientID)
}

// optional string activeClientIP = 5;
inline bool GetTuningSourcesStatesReply::_internal_has_activeclientip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetTuningSourcesStatesReply::has_activeclientip() const {
  return _internal_has_activeclientip();
}
inline void GetTuningSourcesStatesReply::clear_activeclientip() {
  activeclientip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetTuningSourcesStatesReply::activeclientip() const {
  // @@protoc_insertion_point(field_get:Network.GetTuningSourcesStatesReply.activeClientIP)
  return _internal_activeclientip();
}
inline void GetTuningSourcesStatesReply::set_activeclientip(const std::string& value) {
  _internal_set_activeclientip(value);
  // @@protoc_insertion_point(field_set:Network.GetTuningSourcesStatesReply.activeClientIP)
}
inline std::string* GetTuningSourcesStatesReply::mutable_activeclientip() {
  // @@protoc_insertion_point(field_mutable:Network.GetTuningSourcesStatesReply.activeClientIP)
  return _internal_mutable_activeclientip();
}
inline const std::string& GetTuningSourcesStatesReply::_internal_activeclientip() const {
  return activeclientip_.Get();
}
inline void GetTuningSourcesStatesReply::_internal_set_activeclientip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTuningSourcesStatesReply::set_activeclientip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetTuningSourcesStatesReply.activeClientIP)
}
inline void GetTuningSourcesStatesReply::set_activeclientip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetTuningSourcesStatesReply.activeClientIP)
}
inline void GetTuningSourcesStatesReply::set_activeclientip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  activeclientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetTuningSourcesStatesReply.activeClientIP)
}
inline std::string* GetTuningSourcesStatesReply::_internal_mutable_activeclientip() {
  _has_bits_[0] |= 0x00000002u;
  return activeclientip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTuningSourcesStatesReply::release_activeclientip() {
  // @@protoc_insertion_point(field_release:Network.GetTuningSourcesStatesReply.activeClientIP)
  if (!_internal_has_activeclientip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return activeclientip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTuningSourcesStatesReply::set_allocated_activeclientip(std::string* activeclientip) {
  if (activeclientip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activeclientip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activeclientip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetTuningSourcesStatesReply.activeClientIP)
}

// -------------------------------------------------------------------

// ChangeConrolledTuningSourceRequest

// optional bool takeControl = 1;
inline bool ChangeConrolledTuningSourceRequest::_internal_has_takecontrol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeConrolledTuningSourceRequest::has_takecontrol() const {
  return _internal_has_takecontrol();
}
inline void ChangeConrolledTuningSourceRequest::clear_takecontrol() {
  takecontrol_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ChangeConrolledTuningSourceRequest::_internal_takecontrol() const {
  return takecontrol_;
}
inline bool ChangeConrolledTuningSourceRequest::takecontrol() const {
  // @@protoc_insertion_point(field_get:Network.ChangeConrolledTuningSourceRequest.takeControl)
  return _internal_takecontrol();
}
inline void ChangeConrolledTuningSourceRequest::_internal_set_takecontrol(bool value) {
  _has_bits_[0] |= 0x00000002u;
  takecontrol_ = value;
}
inline void ChangeConrolledTuningSourceRequest::set_takecontrol(bool value) {
  _internal_set_takecontrol(value);
  // @@protoc_insertion_point(field_set:Network.ChangeConrolledTuningSourceRequest.takeControl)
}

// optional string tuningSourceEquipmentID = 2;
inline bool ChangeConrolledTuningSourceRequest::_internal_has_tuningsourceequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeConrolledTuningSourceRequest::has_tuningsourceequipmentid() const {
  return _internal_has_tuningsourceequipmentid();
}
inline void ChangeConrolledTuningSourceRequest::clear_tuningsourceequipmentid() {
  tuningsourceequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeConrolledTuningSourceRequest::tuningsourceequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
  return _internal_tuningsourceequipmentid();
}
inline void ChangeConrolledTuningSourceRequest::set_tuningsourceequipmentid(const std::string& value) {
  _internal_set_tuningsourceequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
}
inline std::string* ChangeConrolledTuningSourceRequest::mutable_tuningsourceequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
  return _internal_mutable_tuningsourceequipmentid();
}
inline const std::string& ChangeConrolledTuningSourceRequest::_internal_tuningsourceequipmentid() const {
  return tuningsourceequipmentid_.Get();
}
inline void ChangeConrolledTuningSourceRequest::_internal_set_tuningsourceequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangeConrolledTuningSourceRequest::set_tuningsourceequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tuningsourceequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
}
inline void ChangeConrolledTuningSourceRequest::set_tuningsourceequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
}
inline void ChangeConrolledTuningSourceRequest::set_tuningsourceequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
}
inline std::string* ChangeConrolledTuningSourceRequest::_internal_mutable_tuningsourceequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return tuningsourceequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeConrolledTuningSourceRequest::release_tuningsourceequipmentid() {
  // @@protoc_insertion_point(field_release:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
  if (!_internal_has_tuningsourceequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tuningsourceequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeConrolledTuningSourceRequest::set_allocated_tuningsourceequipmentid(std::string* tuningsourceequipmentid) {
  if (tuningsourceequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tuningsourceequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tuningsourceequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ChangeConrolledTuningSourceRequest.tuningSourceEquipmentID)
}

// optional bool activateControl = 3 [default = false];
inline bool ChangeConrolledTuningSourceRequest::_internal_has_activatecontrol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChangeConrolledTuningSourceRequest::has_activatecontrol() const {
  return _internal_has_activatecontrol();
}
inline void ChangeConrolledTuningSourceRequest::clear_activatecontrol() {
  activatecontrol_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChangeConrolledTuningSourceRequest::_internal_activatecontrol() const {
  return activatecontrol_;
}
inline bool ChangeConrolledTuningSourceRequest::activatecontrol() const {
  // @@protoc_insertion_point(field_get:Network.ChangeConrolledTuningSourceRequest.activateControl)
  return _internal_activatecontrol();
}
inline void ChangeConrolledTuningSourceRequest::_internal_set_activatecontrol(bool value) {
  _has_bits_[0] |= 0x00000004u;
  activatecontrol_ = value;
}
inline void ChangeConrolledTuningSourceRequest::set_activatecontrol(bool value) {
  _internal_set_activatecontrol(value);
  // @@protoc_insertion_point(field_set:Network.ChangeConrolledTuningSourceRequest.activateControl)
}

// -------------------------------------------------------------------

// ChangeConrolledTuningSourceReply

// optional int32 error = 1 [default = 0];
inline bool ChangeConrolledTuningSourceReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeConrolledTuningSourceReply::has_error() const {
  return _internal_has_error();
}
inline void ChangeConrolledTuningSourceReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeConrolledTuningSourceReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeConrolledTuningSourceReply::error() const {
  // @@protoc_insertion_point(field_get:Network.ChangeConrolledTuningSourceReply.error)
  return _internal_error();
}
inline void ChangeConrolledTuningSourceReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void ChangeConrolledTuningSourceReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.ChangeConrolledTuningSourceReply.error)
}

// optional string controlledTuningSourceEquipmentID = 2;
inline bool ChangeConrolledTuningSourceReply::_internal_has_controlledtuningsourceequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeConrolledTuningSourceReply::has_controlledtuningsourceequipmentid() const {
  return _internal_has_controlledtuningsourceequipmentid();
}
inline void ChangeConrolledTuningSourceReply::clear_controlledtuningsourceequipmentid() {
  controlledtuningsourceequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeConrolledTuningSourceReply::controlledtuningsourceequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
  return _internal_controlledtuningsourceequipmentid();
}
inline void ChangeConrolledTuningSourceReply::set_controlledtuningsourceequipmentid(const std::string& value) {
  _internal_set_controlledtuningsourceequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
}
inline std::string* ChangeConrolledTuningSourceReply::mutable_controlledtuningsourceequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
  return _internal_mutable_controlledtuningsourceequipmentid();
}
inline const std::string& ChangeConrolledTuningSourceReply::_internal_controlledtuningsourceequipmentid() const {
  return controlledtuningsourceequipmentid_.Get();
}
inline void ChangeConrolledTuningSourceReply::_internal_set_controlledtuningsourceequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  controlledtuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangeConrolledTuningSourceReply::set_controlledtuningsourceequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  controlledtuningsourceequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
}
inline void ChangeConrolledTuningSourceReply::set_controlledtuningsourceequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  controlledtuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
}
inline void ChangeConrolledTuningSourceReply::set_controlledtuningsourceequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  controlledtuningsourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
}
inline std::string* ChangeConrolledTuningSourceReply::_internal_mutable_controlledtuningsourceequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return controlledtuningsourceequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeConrolledTuningSourceReply::release_controlledtuningsourceequipmentid() {
  // @@protoc_insertion_point(field_release:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
  if (!_internal_has_controlledtuningsourceequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return controlledtuningsourceequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeConrolledTuningSourceReply::set_allocated_controlledtuningsourceequipmentid(std::string* controlledtuningsourceequipmentid) {
  if (controlledtuningsourceequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  controlledtuningsourceequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controlledtuningsourceequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.ChangeConrolledTuningSourceReply.controlledTuningSourceEquipmentID)
}

// optional bool controlIsActive = 3 [default = false];
inline bool ChangeConrolledTuningSourceReply::_internal_has_controlisactive() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChangeConrolledTuningSourceReply::has_controlisactive() const {
  return _internal_has_controlisactive();
}
inline void ChangeConrolledTuningSourceReply::clear_controlisactive() {
  controlisactive_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChangeConrolledTuningSourceReply::_internal_controlisactive() const {
  return controlisactive_;
}
inline bool ChangeConrolledTuningSourceReply::controlisactive() const {
  // @@protoc_insertion_point(field_get:Network.ChangeConrolledTuningSourceReply.controlIsActive)
  return _internal_controlisactive();
}
inline void ChangeConrolledTuningSourceReply::_internal_set_controlisactive(bool value) {
  _has_bits_[0] |= 0x00000004u;
  controlisactive_ = value;
}
inline void ChangeConrolledTuningSourceReply::set_controlisactive(bool value) {
  _internal_set_controlisactive(value);
  // @@protoc_insertion_point(field_set:Network.ChangeConrolledTuningSourceReply.controlIsActive)
}

// -------------------------------------------------------------------

// TuningSignalsRead

// repeated uint64 signalHash = 2;
inline int TuningSignalsRead::_internal_signalhash_size() const {
  return signalhash_.size();
}
inline int TuningSignalsRead::signalhash_size() const {
  return _internal_signalhash_size();
}
inline void TuningSignalsRead::clear_signalhash() {
  signalhash_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalsRead::_internal_signalhash(int index) const {
  return signalhash_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalsRead::signalhash(int index) const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsRead.signalHash)
  return _internal_signalhash(index);
}
inline void TuningSignalsRead::set_signalhash(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhash_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalsRead.signalHash)
}
inline void TuningSignalsRead::_internal_add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhash_.Add(value);
}
inline void TuningSignalsRead::add_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_signalhash(value);
  // @@protoc_insertion_point(field_add:Network.TuningSignalsRead.signalHash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TuningSignalsRead::_internal_signalhash() const {
  return signalhash_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TuningSignalsRead::signalhash() const {
  // @@protoc_insertion_point(field_list:Network.TuningSignalsRead.signalHash)
  return _internal_signalhash();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TuningSignalsRead::_internal_mutable_signalhash() {
  return &signalhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TuningSignalsRead::mutable_signalhash() {
  // @@protoc_insertion_point(field_mutable_list:Network.TuningSignalsRead.signalHash)
  return _internal_mutable_signalhash();
}

// -------------------------------------------------------------------

// TuningSignalState

// optional fixed64 signalHash = 1 [default = 0];
inline bool TuningSignalState::_internal_has_signalhash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TuningSignalState::has_signalhash() const {
  return _internal_has_signalhash();
}
inline void TuningSignalState::clear_signalhash() {
  signalhash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalState::_internal_signalhash() const {
  return signalhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalState::signalhash() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.signalHash)
  return _internal_signalhash();
}
inline void TuningSignalState::_internal_set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  signalhash_ = value;
}
inline void TuningSignalState::set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signalhash(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.signalHash)
}

// optional int32 error = 2 [default = 0];
inline bool TuningSignalState::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TuningSignalState::has_error() const {
  return _internal_has_error();
}
inline void TuningSignalState::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalState::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalState::error() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.error)
  return _internal_error();
}
inline void TuningSignalState::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  error_ = value;
}
inline void TuningSignalState::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.error)
}

// optional bool valid = 3 [default = false];
inline bool TuningSignalState::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TuningSignalState::has_valid() const {
  return _internal_has_valid();
}
inline void TuningSignalState::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TuningSignalState::_internal_valid() const {
  return valid_;
}
inline bool TuningSignalState::valid() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.valid)
  return _internal_valid();
}
inline void TuningSignalState::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000200u;
  valid_ = value;
}
inline void TuningSignalState::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.valid)
}

// optional .Proto.TuningValue value = 4;
inline bool TuningSignalState::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool TuningSignalState::has_value() const {
  return _internal_has_value();
}
inline const ::Proto::TuningValue& TuningSignalState::_internal_value() const {
  const ::Proto::TuningValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& TuningSignalState::value() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.value)
  return _internal_value();
}
inline void TuningSignalState::unsafe_arena_set_allocated_value(
    ::Proto::TuningValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.TuningSignalState.value)
}
inline ::Proto::TuningValue* TuningSignalState::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TuningValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* TuningSignalState::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Network.TuningSignalState.value)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TuningValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* TuningSignalState::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::Proto::TuningValue* TuningSignalState::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Network.TuningSignalState.value)
  return _internal_mutable_value();
}
inline void TuningSignalState::set_allocated_value(::Proto::TuningValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Network.TuningSignalState.value)
}

// optional .Proto.TuningValue readLowBound = 5;
inline bool TuningSignalState::_internal_has_readlowbound() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || readlowbound_ != nullptr);
  return value;
}
inline bool TuningSignalState::has_readlowbound() const {
  return _internal_has_readlowbound();
}
inline const ::Proto::TuningValue& TuningSignalState::_internal_readlowbound() const {
  const ::Proto::TuningValue* p = readlowbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& TuningSignalState::readlowbound() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.readLowBound)
  return _internal_readlowbound();
}
inline void TuningSignalState::unsafe_arena_set_allocated_readlowbound(
    ::Proto::TuningValue* readlowbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readlowbound_);
  }
  readlowbound_ = readlowbound;
  if (readlowbound) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.TuningSignalState.readLowBound)
}
inline ::Proto::TuningValue* TuningSignalState::release_readlowbound() {
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::TuningValue* temp = readlowbound_;
  readlowbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* TuningSignalState::unsafe_arena_release_readlowbound() {
  // @@protoc_insertion_point(field_release:Network.TuningSignalState.readLowBound)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::TuningValue* temp = readlowbound_;
  readlowbound_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* TuningSignalState::_internal_mutable_readlowbound() {
  _has_bits_[0] |= 0x00000002u;
  if (readlowbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    readlowbound_ = p;
  }
  return readlowbound_;
}
inline ::Proto::TuningValue* TuningSignalState::mutable_readlowbound() {
  // @@protoc_insertion_point(field_mutable:Network.TuningSignalState.readLowBound)
  return _internal_mutable_readlowbound();
}
inline void TuningSignalState::set_allocated_readlowbound(::Proto::TuningValue* readlowbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readlowbound_);
  }
  if (readlowbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readlowbound)->GetArena();
    if (message_arena != submessage_arena) {
      readlowbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readlowbound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  readlowbound_ = readlowbound;
  // @@protoc_insertion_point(field_set_allocated:Network.TuningSignalState.readLowBound)
}

// optional .Proto.TuningValue readHighBound = 6;
inline bool TuningSignalState::_internal_has_readhighbound() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || readhighbound_ != nullptr);
  return value;
}
inline bool TuningSignalState::has_readhighbound() const {
  return _internal_has_readhighbound();
}
inline const ::Proto::TuningValue& TuningSignalState::_internal_readhighbound() const {
  const ::Proto::TuningValue* p = readhighbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& TuningSignalState::readhighbound() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.readHighBound)
  return _internal_readhighbound();
}
inline void TuningSignalState::unsafe_arena_set_allocated_readhighbound(
    ::Proto::TuningValue* readhighbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readhighbound_);
  }
  readhighbound_ = readhighbound;
  if (readhighbound) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.TuningSignalState.readHighBound)
}
inline ::Proto::TuningValue* TuningSignalState::release_readhighbound() {
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::TuningValue* temp = readhighbound_;
  readhighbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* TuningSignalState::unsafe_arena_release_readhighbound() {
  // @@protoc_insertion_point(field_release:Network.TuningSignalState.readHighBound)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::TuningValue* temp = readhighbound_;
  readhighbound_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* TuningSignalState::_internal_mutable_readhighbound() {
  _has_bits_[0] |= 0x00000004u;
  if (readhighbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    readhighbound_ = p;
  }
  return readhighbound_;
}
inline ::Proto::TuningValue* TuningSignalState::mutable_readhighbound() {
  // @@protoc_insertion_point(field_mutable:Network.TuningSignalState.readHighBound)
  return _internal_mutable_readhighbound();
}
inline void TuningSignalState::set_allocated_readhighbound(::Proto::TuningValue* readhighbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readhighbound_);
  }
  if (readhighbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readhighbound)->GetArena();
    if (message_arena != submessage_arena) {
      readhighbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readhighbound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  readhighbound_ = readhighbound;
  // @@protoc_insertion_point(field_set_allocated:Network.TuningSignalState.readHighBound)
}

// optional bool writeInProgress = 7 [default = false];
inline bool TuningSignalState::_internal_has_writeinprogress() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TuningSignalState::has_writeinprogress() const {
  return _internal_has_writeinprogress();
}
inline void TuningSignalState::clear_writeinprogress() {
  writeinprogress_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TuningSignalState::_internal_writeinprogress() const {
  return writeinprogress_;
}
inline bool TuningSignalState::writeinprogress() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.writeInProgress)
  return _internal_writeinprogress();
}
inline void TuningSignalState::_internal_set_writeinprogress(bool value) {
  _has_bits_[0] |= 0x00000400u;
  writeinprogress_ = value;
}
inline void TuningSignalState::set_writeinprogress(bool value) {
  _internal_set_writeinprogress(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.writeInProgress)
}

// optional int32 writeErrorCode = 8 [default = 0];
inline bool TuningSignalState::_internal_has_writeerrorcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TuningSignalState::has_writeerrorcode() const {
  return _internal_has_writeerrorcode();
}
inline void TuningSignalState::clear_writeerrorcode() {
  writeerrorcode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalState::_internal_writeerrorcode() const {
  return writeerrorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalState::writeerrorcode() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.writeErrorCode)
  return _internal_writeerrorcode();
}
inline void TuningSignalState::_internal_set_writeerrorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  writeerrorcode_ = value;
}
inline void TuningSignalState::set_writeerrorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_writeerrorcode(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.writeErrorCode)
}

// optional fixed64 writeClient = 9 [default = 0];
inline bool TuningSignalState::_internal_has_writeclient() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TuningSignalState::has_writeclient() const {
  return _internal_has_writeclient();
}
inline void TuningSignalState::clear_writeclient() {
  writeclient_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalState::_internal_writeclient() const {
  return writeclient_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalState::writeclient() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.writeClient)
  return _internal_writeclient();
}
inline void TuningSignalState::_internal_set_writeclient(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  writeclient_ = value;
}
inline void TuningSignalState::set_writeclient(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_writeclient(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.writeClient)
}

// optional sfixed64 successfulReadTime = 10 [default = 0];
inline bool TuningSignalState::_internal_has_successfulreadtime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TuningSignalState::has_successfulreadtime() const {
  return _internal_has_successfulreadtime();
}
inline void TuningSignalState::clear_successfulreadtime() {
  successfulreadtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::_internal_successfulreadtime() const {
  return successfulreadtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::successfulreadtime() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.successfulReadTime)
  return _internal_successfulreadtime();
}
inline void TuningSignalState::_internal_set_successfulreadtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  successfulreadtime_ = value;
}
inline void TuningSignalState::set_successfulreadtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_successfulreadtime(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.successfulReadTime)
}

// optional sfixed64 writeRequestTime = 11 [default = 0];
inline bool TuningSignalState::_internal_has_writerequesttime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TuningSignalState::has_writerequesttime() const {
  return _internal_has_writerequesttime();
}
inline void TuningSignalState::clear_writerequesttime() {
  writerequesttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::_internal_writerequesttime() const {
  return writerequesttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::writerequesttime() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.writeRequestTime)
  return _internal_writerequesttime();
}
inline void TuningSignalState::_internal_set_writerequesttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  writerequesttime_ = value;
}
inline void TuningSignalState::set_writerequesttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_writerequesttime(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.writeRequestTime)
}

// optional sfixed64 successfulWriteTime = 12 [default = 0];
inline bool TuningSignalState::_internal_has_successfulwritetime() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TuningSignalState::has_successfulwritetime() const {
  return _internal_has_successfulwritetime();
}
inline void TuningSignalState::clear_successfulwritetime() {
  successfulwritetime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::_internal_successfulwritetime() const {
  return successfulwritetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::successfulwritetime() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.successfulWriteTime)
  return _internal_successfulwritetime();
}
inline void TuningSignalState::_internal_set_successfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  successfulwritetime_ = value;
}
inline void TuningSignalState::set_successfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_successfulwritetime(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.successfulWriteTime)
}

// optional sfixed64 unsuccessfulWriteTime = 13 [default = 0];
inline bool TuningSignalState::_internal_has_unsuccessfulwritetime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TuningSignalState::has_unsuccessfulwritetime() const {
  return _internal_has_unsuccessfulwritetime();
}
inline void TuningSignalState::clear_unsuccessfulwritetime() {
  unsuccessfulwritetime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::_internal_unsuccessfulwritetime() const {
  return unsuccessfulwritetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TuningSignalState::unsuccessfulwritetime() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.unsuccessfulWriteTime)
  return _internal_unsuccessfulwritetime();
}
inline void TuningSignalState::_internal_set_unsuccessfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  unsuccessfulwritetime_ = value;
}
inline void TuningSignalState::set_unsuccessfulwritetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unsuccessfulwritetime(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.unsuccessfulWriteTime)
}

// optional bool setSOR = 14 [default = false];
inline bool TuningSignalState::_internal_has_setsor() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TuningSignalState::has_setsor() const {
  return _internal_has_setsor();
}
inline void TuningSignalState::clear_setsor() {
  setsor_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TuningSignalState::_internal_setsor() const {
  return setsor_;
}
inline bool TuningSignalState::setsor() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.setSOR)
  return _internal_setsor();
}
inline void TuningSignalState::_internal_set_setsor(bool value) {
  _has_bits_[0] |= 0x00000800u;
  setsor_ = value;
}
inline void TuningSignalState::set_setsor(bool value) {
  _internal_set_setsor(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.setSOR)
}

// optional bool writingDisabled = 15 [default = false];
inline bool TuningSignalState::_internal_has_writingdisabled() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TuningSignalState::has_writingdisabled() const {
  return _internal_has_writingdisabled();
}
inline void TuningSignalState::clear_writingdisabled() {
  writingdisabled_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TuningSignalState::_internal_writingdisabled() const {
  return writingdisabled_;
}
inline bool TuningSignalState::writingdisabled() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.writingDisabled)
  return _internal_writingdisabled();
}
inline void TuningSignalState::_internal_set_writingdisabled(bool value) {
  _has_bits_[0] |= 0x00001000u;
  writingdisabled_ = value;
}
inline void TuningSignalState::set_writingdisabled(bool value) {
  _internal_set_writingdisabled(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.writingDisabled)
}

// optional bool tuningDefault = 16;
inline bool TuningSignalState::_internal_has_tuningdefault() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TuningSignalState::has_tuningdefault() const {
  return _internal_has_tuningdefault();
}
inline void TuningSignalState::clear_tuningdefault() {
  tuningdefault_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TuningSignalState::_internal_tuningdefault() const {
  return tuningdefault_;
}
inline bool TuningSignalState::tuningdefault() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalState.tuningDefault)
  return _internal_tuningdefault();
}
inline void TuningSignalState::_internal_set_tuningdefault(bool value) {
  _has_bits_[0] |= 0x00002000u;
  tuningdefault_ = value;
}
inline void TuningSignalState::set_tuningdefault(bool value) {
  _internal_set_tuningdefault(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalState.tuningDefault)
}

// -------------------------------------------------------------------

// TuningSignalsReadReply

// optional int32 error = 1 [default = 0];
inline bool TuningSignalsReadReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSignalsReadReply::has_error() const {
  return _internal_has_error();
}
inline void TuningSignalsReadReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalsReadReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalsReadReply::error() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsReadReply.error)
  return _internal_error();
}
inline void TuningSignalsReadReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void TuningSignalsReadReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalsReadReply.error)
}

// repeated .Network.TuningSignalState tuningSignalState = 2;
inline int TuningSignalsReadReply::_internal_tuningsignalstate_size() const {
  return tuningsignalstate_.size();
}
inline int TuningSignalsReadReply::tuningsignalstate_size() const {
  return _internal_tuningsignalstate_size();
}
inline void TuningSignalsReadReply::clear_tuningsignalstate() {
  tuningsignalstate_.Clear();
}
inline ::Network::TuningSignalState* TuningSignalsReadReply::mutable_tuningsignalstate(int index) {
  // @@protoc_insertion_point(field_mutable:Network.TuningSignalsReadReply.tuningSignalState)
  return tuningsignalstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalState >*
TuningSignalsReadReply::mutable_tuningsignalstate() {
  // @@protoc_insertion_point(field_mutable_list:Network.TuningSignalsReadReply.tuningSignalState)
  return &tuningsignalstate_;
}
inline const ::Network::TuningSignalState& TuningSignalsReadReply::_internal_tuningsignalstate(int index) const {
  return tuningsignalstate_.Get(index);
}
inline const ::Network::TuningSignalState& TuningSignalsReadReply::tuningsignalstate(int index) const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsReadReply.tuningSignalState)
  return _internal_tuningsignalstate(index);
}
inline ::Network::TuningSignalState* TuningSignalsReadReply::_internal_add_tuningsignalstate() {
  return tuningsignalstate_.Add();
}
inline ::Network::TuningSignalState* TuningSignalsReadReply::add_tuningsignalstate() {
  // @@protoc_insertion_point(field_add:Network.TuningSignalsReadReply.tuningSignalState)
  return _internal_add_tuningsignalstate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalState >&
TuningSignalsReadReply::tuningsignalstate() const {
  // @@protoc_insertion_point(field_list:Network.TuningSignalsReadReply.tuningSignalState)
  return tuningsignalstate_;
}

// -------------------------------------------------------------------

// TuningWriteCommand

// optional uint64 signalHash = 1 [default = 0];
inline bool TuningWriteCommand::_internal_has_signalhash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TuningWriteCommand::has_signalhash() const {
  return _internal_has_signalhash();
}
inline void TuningWriteCommand::clear_signalhash() {
  signalhash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningWriteCommand::_internal_signalhash() const {
  return signalhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningWriteCommand::signalhash() const {
  // @@protoc_insertion_point(field_get:Network.TuningWriteCommand.signalHash)
  return _internal_signalhash();
}
inline void TuningWriteCommand::_internal_set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  signalhash_ = value;
}
inline void TuningWriteCommand::set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signalhash(value);
  // @@protoc_insertion_point(field_set:Network.TuningWriteCommand.signalHash)
}

// optional .Proto.TuningValue value = 2;
inline bool TuningWriteCommand::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool TuningWriteCommand::has_value() const {
  return _internal_has_value();
}
inline const ::Proto::TuningValue& TuningWriteCommand::_internal_value() const {
  const ::Proto::TuningValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::TuningValue&>(
      ::Proto::_TuningValue_default_instance_);
}
inline const ::Proto::TuningValue& TuningWriteCommand::value() const {
  // @@protoc_insertion_point(field_get:Network.TuningWriteCommand.value)
  return _internal_value();
}
inline void TuningWriteCommand::unsafe_arena_set_allocated_value(
    ::Proto::TuningValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Network.TuningWriteCommand.value)
}
inline ::Proto::TuningValue* TuningWriteCommand::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TuningValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::TuningValue* TuningWriteCommand::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Network.TuningWriteCommand.value)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TuningValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::Proto::TuningValue* TuningWriteCommand::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TuningValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::Proto::TuningValue* TuningWriteCommand::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Network.TuningWriteCommand.value)
  return _internal_mutable_value();
}
inline void TuningWriteCommand::set_allocated_value(::Proto::TuningValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Network.TuningWriteCommand.value)
}

// -------------------------------------------------------------------

// TuningSignalsWrite

// optional bool autoApply = 2 [default = false];
inline bool TuningSignalsWrite::_internal_has_autoapply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSignalsWrite::has_autoapply() const {
  return _internal_has_autoapply();
}
inline void TuningSignalsWrite::clear_autoapply() {
  autoapply_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TuningSignalsWrite::_internal_autoapply() const {
  return autoapply_;
}
inline bool TuningSignalsWrite::autoapply() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsWrite.autoApply)
  return _internal_autoapply();
}
inline void TuningSignalsWrite::_internal_set_autoapply(bool value) {
  _has_bits_[0] |= 0x00000001u;
  autoapply_ = value;
}
inline void TuningSignalsWrite::set_autoapply(bool value) {
  _internal_set_autoapply(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalsWrite.autoApply)
}

// repeated .Network.TuningWriteCommand commands = 3;
inline int TuningSignalsWrite::_internal_commands_size() const {
  return commands_.size();
}
inline int TuningSignalsWrite::commands_size() const {
  return _internal_commands_size();
}
inline void TuningSignalsWrite::clear_commands() {
  commands_.Clear();
}
inline ::Network::TuningWriteCommand* TuningSignalsWrite::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:Network.TuningSignalsWrite.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningWriteCommand >*
TuningSignalsWrite::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:Network.TuningSignalsWrite.commands)
  return &commands_;
}
inline const ::Network::TuningWriteCommand& TuningSignalsWrite::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::Network::TuningWriteCommand& TuningSignalsWrite::commands(int index) const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsWrite.commands)
  return _internal_commands(index);
}
inline ::Network::TuningWriteCommand* TuningSignalsWrite::_internal_add_commands() {
  return commands_.Add();
}
inline ::Network::TuningWriteCommand* TuningSignalsWrite::add_commands() {
  // @@protoc_insertion_point(field_add:Network.TuningSignalsWrite.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningWriteCommand >&
TuningSignalsWrite::commands() const {
  // @@protoc_insertion_point(field_list:Network.TuningSignalsWrite.commands)
  return commands_;
}

// -------------------------------------------------------------------

// TuningSignalWriteResult

// optional uint64 signalHash = 1 [default = 0];
inline bool TuningSignalWriteResult::_internal_has_signalhash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSignalWriteResult::has_signalhash() const {
  return _internal_has_signalhash();
}
inline void TuningSignalWriteResult::clear_signalhash() {
  signalhash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalWriteResult::_internal_signalhash() const {
  return signalhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TuningSignalWriteResult::signalhash() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalWriteResult.signalHash)
  return _internal_signalhash();
}
inline void TuningSignalWriteResult::_internal_set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  signalhash_ = value;
}
inline void TuningSignalWriteResult::set_signalhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signalhash(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalWriteResult.signalHash)
}

// optional int32 error = 2 [default = 0];
inline bool TuningSignalWriteResult::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TuningSignalWriteResult::has_error() const {
  return _internal_has_error();
}
inline void TuningSignalWriteResult::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalWriteResult::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalWriteResult::error() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalWriteResult.error)
  return _internal_error();
}
inline void TuningSignalWriteResult::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void TuningSignalWriteResult::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalWriteResult.error)
}

// -------------------------------------------------------------------

// TuningSignalsWriteReply

// optional int32 error = 1 [default = 0];
inline bool TuningSignalsWriteReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSignalsWriteReply::has_error() const {
  return _internal_has_error();
}
inline void TuningSignalsWriteReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalsWriteReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalsWriteReply::error() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsWriteReply.error)
  return _internal_error();
}
inline void TuningSignalsWriteReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void TuningSignalsWriteReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalsWriteReply.error)
}

// repeated .Network.TuningSignalWriteResult writeResult = 2;
inline int TuningSignalsWriteReply::_internal_writeresult_size() const {
  return writeresult_.size();
}
inline int TuningSignalsWriteReply::writeresult_size() const {
  return _internal_writeresult_size();
}
inline void TuningSignalsWriteReply::clear_writeresult() {
  writeresult_.Clear();
}
inline ::Network::TuningSignalWriteResult* TuningSignalsWriteReply::mutable_writeresult(int index) {
  // @@protoc_insertion_point(field_mutable:Network.TuningSignalsWriteReply.writeResult)
  return writeresult_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalWriteResult >*
TuningSignalsWriteReply::mutable_writeresult() {
  // @@protoc_insertion_point(field_mutable_list:Network.TuningSignalsWriteReply.writeResult)
  return &writeresult_;
}
inline const ::Network::TuningSignalWriteResult& TuningSignalsWriteReply::_internal_writeresult(int index) const {
  return writeresult_.Get(index);
}
inline const ::Network::TuningSignalWriteResult& TuningSignalsWriteReply::writeresult(int index) const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsWriteReply.writeResult)
  return _internal_writeresult(index);
}
inline ::Network::TuningSignalWriteResult* TuningSignalsWriteReply::_internal_add_writeresult() {
  return writeresult_.Add();
}
inline ::Network::TuningSignalWriteResult* TuningSignalsWriteReply::add_writeresult() {
  // @@protoc_insertion_point(field_add:Network.TuningSignalsWriteReply.writeResult)
  return _internal_add_writeresult();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Network::TuningSignalWriteResult >&
TuningSignalsWriteReply::writeresult() const {
  // @@protoc_insertion_point(field_list:Network.TuningSignalsWriteReply.writeResult)
  return writeresult_;
}

// -------------------------------------------------------------------

// TuningSignalsApply

// -------------------------------------------------------------------

// TuningSignalsApplyReply

// optional int32 error = 1 [default = 0];
inline bool TuningSignalsApplyReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TuningSignalsApplyReply::has_error() const {
  return _internal_has_error();
}
inline void TuningSignalsApplyReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalsApplyReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TuningSignalsApplyReply::error() const {
  // @@protoc_insertion_point(field_get:Network.TuningSignalsApplyReply.error)
  return _internal_error();
}
inline void TuningSignalsApplyReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void TuningSignalsApplyReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.TuningSignalsApplyReply.error)
}

// -------------------------------------------------------------------

// DataSourceWrite

// optional string sourceEquipmentID = 1;
inline bool DataSourceWrite::_internal_has_sourceequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataSourceWrite::has_sourceequipmentid() const {
  return _internal_has_sourceequipmentid();
}
inline void DataSourceWrite::clear_sourceequipmentid() {
  sourceequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataSourceWrite::sourceequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceWrite.sourceEquipmentID)
  return _internal_sourceequipmentid();
}
inline void DataSourceWrite::set_sourceequipmentid(const std::string& value) {
  _internal_set_sourceequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceWrite.sourceEquipmentID)
}
inline std::string* DataSourceWrite::mutable_sourceequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.DataSourceWrite.sourceEquipmentID)
  return _internal_mutable_sourceequipmentid();
}
inline const std::string& DataSourceWrite::_internal_sourceequipmentid() const {
  return sourceequipmentid_.Get();
}
inline void DataSourceWrite::_internal_set_sourceequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataSourceWrite::set_sourceequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.DataSourceWrite.sourceEquipmentID)
}
inline void DataSourceWrite::set_sourceequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.DataSourceWrite.sourceEquipmentID)
}
inline void DataSourceWrite::set_sourceequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sourceequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.DataSourceWrite.sourceEquipmentID)
}
inline std::string* DataSourceWrite::_internal_mutable_sourceequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return sourceequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataSourceWrite::release_sourceequipmentid() {
  // @@protoc_insertion_point(field_release:Network.DataSourceWrite.sourceEquipmentID)
  if (!_internal_has_sourceequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sourceequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceWrite::set_allocated_sourceequipmentid(std::string* sourceequipmentid) {
  if (sourceequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.DataSourceWrite.sourceEquipmentID)
}

// optional bool state = 2 [default = false];
inline bool DataSourceWrite::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataSourceWrite::has_state() const {
  return _internal_has_state();
}
inline void DataSourceWrite::clear_state() {
  state_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DataSourceWrite::_internal_state() const {
  return state_;
}
inline bool DataSourceWrite::state() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceWrite.state)
  return _internal_state();
}
inline void DataSourceWrite::_internal_set_state(bool value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void DataSourceWrite::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceWrite.state)
}

// -------------------------------------------------------------------

// DataSourceWriteReply

// optional int32 error = 1 [default = 0];
inline bool DataSourceWriteReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataSourceWriteReply::has_error() const {
  return _internal_has_error();
}
inline void DataSourceWriteReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceWriteReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataSourceWriteReply::error() const {
  // @@protoc_insertion_point(field_get:Network.DataSourceWriteReply.error)
  return _internal_error();
}
inline void DataSourceWriteReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void DataSourceWriteReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.DataSourceWriteReply.error)
}

// -------------------------------------------------------------------

// PacketSourceExit

// -------------------------------------------------------------------

// PacketSourceExitReply

// optional int32 error = 1 [default = 0];
inline bool PacketSourceExitReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PacketSourceExitReply::has_error() const {
  return _internal_has_error();
}
inline void PacketSourceExitReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PacketSourceExitReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PacketSourceExitReply::error() const {
  // @@protoc_insertion_point(field_get:Network.PacketSourceExitReply.error)
  return _internal_error();
}
inline void PacketSourceExitReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void PacketSourceExitReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.PacketSourceExitReply.error)
}

// -------------------------------------------------------------------

// SaveAppSignalsStatesToArchiveRequest

// optional string clientEquipmentID = 1;
inline bool SaveAppSignalsStatesToArchiveRequest::_internal_has_clientequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SaveAppSignalsStatesToArchiveRequest::has_clientequipmentid() const {
  return _internal_has_clientequipmentid();
}
inline void SaveAppSignalsStatesToArchiveRequest::clear_clientequipmentid() {
  clientequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SaveAppSignalsStatesToArchiveRequest::clientequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
  return _internal_clientequipmentid();
}
inline void SaveAppSignalsStatesToArchiveRequest::set_clientequipmentid(const std::string& value) {
  _internal_set_clientequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
}
inline std::string* SaveAppSignalsStatesToArchiveRequest::mutable_clientequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
  return _internal_mutable_clientequipmentid();
}
inline const std::string& SaveAppSignalsStatesToArchiveRequest::_internal_clientequipmentid() const {
  return clientequipmentid_.Get();
}
inline void SaveAppSignalsStatesToArchiveRequest::_internal_set_clientequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SaveAppSignalsStatesToArchiveRequest::set_clientequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
}
inline void SaveAppSignalsStatesToArchiveRequest::set_clientequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
}
inline void SaveAppSignalsStatesToArchiveRequest::set_clientequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
}
inline std::string* SaveAppSignalsStatesToArchiveRequest::_internal_mutable_clientequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return clientequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SaveAppSignalsStatesToArchiveRequest::release_clientequipmentid() {
  // @@protoc_insertion_point(field_release:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
  if (!_internal_has_clientequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveAppSignalsStatesToArchiveRequest::set_allocated_clientequipmentid(std::string* clientequipmentid) {
  if (clientequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.SaveAppSignalsStatesToArchiveRequest.clientEquipmentID)
}

// repeated .Proto.AppSignalState appSignalStates = 2;
inline int SaveAppSignalsStatesToArchiveRequest::_internal_appsignalstates_size() const {
  return appsignalstates_.size();
}
inline int SaveAppSignalsStatesToArchiveRequest::appsignalstates_size() const {
  return _internal_appsignalstates_size();
}
inline ::Proto::AppSignalState* SaveAppSignalsStatesToArchiveRequest::mutable_appsignalstates(int index) {
  // @@protoc_insertion_point(field_mutable:Network.SaveAppSignalsStatesToArchiveRequest.appSignalStates)
  return appsignalstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
SaveAppSignalsStatesToArchiveRequest::mutable_appsignalstates() {
  // @@protoc_insertion_point(field_mutable_list:Network.SaveAppSignalsStatesToArchiveRequest.appSignalStates)
  return &appsignalstates_;
}
inline const ::Proto::AppSignalState& SaveAppSignalsStatesToArchiveRequest::_internal_appsignalstates(int index) const {
  return appsignalstates_.Get(index);
}
inline const ::Proto::AppSignalState& SaveAppSignalsStatesToArchiveRequest::appsignalstates(int index) const {
  // @@protoc_insertion_point(field_get:Network.SaveAppSignalsStatesToArchiveRequest.appSignalStates)
  return _internal_appsignalstates(index);
}
inline ::Proto::AppSignalState* SaveAppSignalsStatesToArchiveRequest::_internal_add_appsignalstates() {
  return appsignalstates_.Add();
}
inline ::Proto::AppSignalState* SaveAppSignalsStatesToArchiveRequest::add_appsignalstates() {
  // @@protoc_insertion_point(field_add:Network.SaveAppSignalsStatesToArchiveRequest.appSignalStates)
  return _internal_add_appsignalstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
SaveAppSignalsStatesToArchiveRequest::appsignalstates() const {
  // @@protoc_insertion_point(field_list:Network.SaveAppSignalsStatesToArchiveRequest.appSignalStates)
  return appsignalstates_;
}

// -------------------------------------------------------------------

// SaveAppSignalsStatesToArchiveReply

// optional int32 error = 1 [default = 0];
inline bool SaveAppSignalsStatesToArchiveReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SaveAppSignalsStatesToArchiveReply::has_error() const {
  return _internal_has_error();
}
inline void SaveAppSignalsStatesToArchiveReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveAppSignalsStatesToArchiveReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveAppSignalsStatesToArchiveReply::error() const {
  // @@protoc_insertion_point(field_get:Network.SaveAppSignalsStatesToArchiveReply.error)
  return _internal_error();
}
inline void SaveAppSignalsStatesToArchiveReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void SaveAppSignalsStatesToArchiveReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.SaveAppSignalsStatesToArchiveReply.error)
}

// optional int32 archError = 2 [default = 100];
inline bool SaveAppSignalsStatesToArchiveReply::_internal_has_archerror() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SaveAppSignalsStatesToArchiveReply::has_archerror() const {
  return _internal_has_archerror();
}
inline void SaveAppSignalsStatesToArchiveReply::clear_archerror() {
  archerror_ = 100;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveAppSignalsStatesToArchiveReply::_internal_archerror() const {
  return archerror_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveAppSignalsStatesToArchiveReply::archerror() const {
  // @@protoc_insertion_point(field_get:Network.SaveAppSignalsStatesToArchiveReply.archError)
  return _internal_archerror();
}
inline void SaveAppSignalsStatesToArchiveReply::_internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  archerror_ = value;
}
inline void SaveAppSignalsStatesToArchiveReply::set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_archerror(value);
  // @@protoc_insertion_point(field_set:Network.SaveAppSignalsStatesToArchiveReply.archError)
}

// -------------------------------------------------------------------

// GetAppSignalStatesFromArchiveStartRequest

// optional string clientEquipmentID = 1;
inline bool GetAppSignalStatesFromArchiveStartRequest::_internal_has_clientequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::has_clientequipmentid() const {
  return _internal_has_clientequipmentid();
}
inline void GetAppSignalStatesFromArchiveStartRequest::clear_clientequipmentid() {
  clientequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAppSignalStatesFromArchiveStartRequest::clientequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
  return _internal_clientequipmentid();
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_clientequipmentid(const std::string& value) {
  _internal_set_clientequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
}
inline std::string* GetAppSignalStatesFromArchiveStartRequest::mutable_clientequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
  return _internal_mutable_clientequipmentid();
}
inline const std::string& GetAppSignalStatesFromArchiveStartRequest::_internal_clientequipmentid() const {
  return clientequipmentid_.Get();
}
inline void GetAppSignalStatesFromArchiveStartRequest::_internal_set_clientequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_clientequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_clientequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_clientequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
}
inline std::string* GetAppSignalStatesFromArchiveStartRequest::_internal_mutable_clientequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return clientequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAppSignalStatesFromArchiveStartRequest::release_clientequipmentid() {
  // @@protoc_insertion_point(field_release:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
  if (!_internal_has_clientequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_allocated_clientequipmentid(std::string* clientequipmentid) {
  if (clientequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetAppSignalStatesFromArchiveStartRequest.clientEquipmentID)
}

// optional int32 timeType = 2 [default = 1];
inline bool GetAppSignalStatesFromArchiveStartRequest::_internal_has_timetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::has_timetype() const {
  return _internal_has_timetype();
}
inline void GetAppSignalStatesFromArchiveStartRequest::clear_timetype() {
  timetype_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveStartRequest::_internal_timetype() const {
  return timetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveStartRequest::timetype() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartRequest.timeType)
  return _internal_timetype();
}
inline void GetAppSignalStatesFromArchiveStartRequest::_internal_set_timetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  timetype_ = value;
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_timetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timetype(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartRequest.timeType)
}

// optional sfixed64 startTime = 3 [default = 0];
inline bool GetAppSignalStatesFromArchiveStartRequest::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::has_starttime() const {
  return _internal_has_starttime();
}
inline void GetAppSignalStatesFromArchiveStartRequest::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStatesFromArchiveStartRequest::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStatesFromArchiveStartRequest::starttime() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartRequest.startTime)
  return _internal_starttime();
}
inline void GetAppSignalStatesFromArchiveStartRequest::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartRequest.startTime)
}

// optional sfixed64 endTime = 4 [default = 0];
inline bool GetAppSignalStatesFromArchiveStartRequest::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::has_endtime() const {
  return _internal_has_endtime();
}
inline void GetAppSignalStatesFromArchiveStartRequest::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStatesFromArchiveStartRequest::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAppSignalStatesFromArchiveStartRequest::endtime() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartRequest.endTime)
  return _internal_endtime();
}
inline void GetAppSignalStatesFromArchiveStartRequest::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartRequest.endTime)
}

// repeated uint64 signalHashes = 5;
inline int GetAppSignalStatesFromArchiveStartRequest::_internal_signalhashes_size() const {
  return signalhashes_.size();
}
inline int GetAppSignalStatesFromArchiveStartRequest::signalhashes_size() const {
  return _internal_signalhashes_size();
}
inline void GetAppSignalStatesFromArchiveStartRequest::clear_signalhashes() {
  signalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalStatesFromArchiveStartRequest::_internal_signalhashes(int index) const {
  return signalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAppSignalStatesFromArchiveStartRequest::signalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartRequest.signalHashes)
  return _internal_signalhashes(index);
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_signalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartRequest.signalHashes)
}
inline void GetAppSignalStatesFromArchiveStartRequest::_internal_add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  signalhashes_.Add(value);
}
inline void GetAppSignalStatesFromArchiveStartRequest::add_signalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_signalhashes(value);
  // @@protoc_insertion_point(field_add:Network.GetAppSignalStatesFromArchiveStartRequest.signalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalStatesFromArchiveStartRequest::_internal_signalhashes() const {
  return signalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetAppSignalStatesFromArchiveStartRequest::signalhashes() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalStatesFromArchiveStartRequest.signalHashes)
  return _internal_signalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalStatesFromArchiveStartRequest::_internal_mutable_signalhashes() {
  return &signalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetAppSignalStatesFromArchiveStartRequest::mutable_signalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalStatesFromArchiveStartRequest.signalHashes)
  return _internal_mutable_signalhashes();
}

// optional bool removePeriodic = 6 [default = true];
inline bool GetAppSignalStatesFromArchiveStartRequest::_internal_has_removeperiodic() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::has_removeperiodic() const {
  return _internal_has_removeperiodic();
}
inline void GetAppSignalStatesFromArchiveStartRequest::clear_removeperiodic() {
  removeperiodic_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::_internal_removeperiodic() const {
  return removeperiodic_;
}
inline bool GetAppSignalStatesFromArchiveStartRequest::removeperiodic() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartRequest.removePeriodic)
  return _internal_removeperiodic();
}
inline void GetAppSignalStatesFromArchiveStartRequest::_internal_set_removeperiodic(bool value) {
  _has_bits_[0] |= 0x00000010u;
  removeperiodic_ = value;
}
inline void GetAppSignalStatesFromArchiveStartRequest::set_removeperiodic(bool value) {
  _internal_set_removeperiodic(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartRequest.removePeriodic)
}

// -------------------------------------------------------------------

// GetAppSignalStatesFromArchiveStartReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalStatesFromArchiveStartReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalStatesFromArchiveStartReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveStartReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveStartReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartReply.error)
  return _internal_error();
}
inline void GetAppSignalStatesFromArchiveStartReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void GetAppSignalStatesFromArchiveStartReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartReply.error)
}

// optional int32 archError = 2 [default = 100];
inline bool GetAppSignalStatesFromArchiveStartReply::_internal_has_archerror() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartReply::has_archerror() const {
  return _internal_has_archerror();
}
inline void GetAppSignalStatesFromArchiveStartReply::clear_archerror() {
  archerror_ = 100;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveStartReply::_internal_archerror() const {
  return archerror_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveStartReply::archerror() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartReply.archError)
  return _internal_archerror();
}
inline void GetAppSignalStatesFromArchiveStartReply::_internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  archerror_ = value;
}
inline void GetAppSignalStatesFromArchiveStartReply::set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_archerror(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartReply.archError)
}

// optional string errorString = 4;
inline bool GetAppSignalStatesFromArchiveStartReply::_internal_has_errorstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartReply::has_errorstring() const {
  return _internal_has_errorstring();
}
inline void GetAppSignalStatesFromArchiveStartReply::clear_errorstring() {
  errorstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAppSignalStatesFromArchiveStartReply::errorstring() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
  return _internal_errorstring();
}
inline void GetAppSignalStatesFromArchiveStartReply::set_errorstring(const std::string& value) {
  _internal_set_errorstring(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
}
inline std::string* GetAppSignalStatesFromArchiveStartReply::mutable_errorstring() {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
  return _internal_mutable_errorstring();
}
inline const std::string& GetAppSignalStatesFromArchiveStartReply::_internal_errorstring() const {
  return errorstring_.Get();
}
inline void GetAppSignalStatesFromArchiveStartReply::_internal_set_errorstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAppSignalStatesFromArchiveStartReply::set_errorstring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
}
inline void GetAppSignalStatesFromArchiveStartReply::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
}
inline void GetAppSignalStatesFromArchiveStartReply::set_errorstring(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
}
inline std::string* GetAppSignalStatesFromArchiveStartReply::_internal_mutable_errorstring() {
  _has_bits_[0] |= 0x00000001u;
  return errorstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAppSignalStatesFromArchiveStartReply::release_errorstring() {
  // @@protoc_insertion_point(field_release:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
  if (!_internal_has_errorstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errorstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAppSignalStatesFromArchiveStartReply::set_allocated_errorstring(std::string* errorstring) {
  if (errorstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errorstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetAppSignalStatesFromArchiveStartReply.errorString)
}

// optional uint32 requestID = 3 [default = 0];
inline bool GetAppSignalStatesFromArchiveStartReply::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveStartReply::has_requestid() const {
  return _internal_has_requestid();
}
inline void GetAppSignalStatesFromArchiveStartReply::clear_requestid() {
  requestid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveStartReply::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveStartReply::requestid() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveStartReply.requestID)
  return _internal_requestid();
}
inline void GetAppSignalStatesFromArchiveStartReply::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void GetAppSignalStatesFromArchiveStartReply::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveStartReply.requestID)
}

// -------------------------------------------------------------------

// GetAppSignalStatesFromArchiveNextRequest

// optional uint32 requestID = 1 [default = 0];
inline bool GetAppSignalStatesFromArchiveNextRequest::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextRequest::has_requestid() const {
  return _internal_has_requestid();
}
inline void GetAppSignalStatesFromArchiveNextRequest::clear_requestid() {
  requestid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveNextRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveNextRequest::requestid() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextRequest.requestID)
  return _internal_requestid();
}
inline void GetAppSignalStatesFromArchiveNextRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void GetAppSignalStatesFromArchiveNextRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextRequest.requestID)
}

// -------------------------------------------------------------------

// GetAppSignalStatesFromArchiveNextReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.error)
  return _internal_error();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.error)
}

// optional int32 archError = 2 [default = 100];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_archerror() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_archerror() const {
  return _internal_has_archerror();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_archerror() {
  archerror_ = 100;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::_internal_archerror() const {
  return archerror_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::archerror() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.archError)
  return _internal_archerror();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  archerror_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_archerror(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.archError)
}

// optional uint32 requestID = 3 [default = 0];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_requestid() const {
  return _internal_has_requestid();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_requestid() {
  requestid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveNextReply::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveNextReply::requestid() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.requestID)
  return _internal_requestid();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.requestID)
}

// optional string errorString = 10;
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_errorstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_errorstring() const {
  return _internal_has_errorstring();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_errorstring() {
  errorstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAppSignalStatesFromArchiveNextReply::errorstring() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
  return _internal_errorstring();
}
inline void GetAppSignalStatesFromArchiveNextReply::set_errorstring(const std::string& value) {
  _internal_set_errorstring(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
}
inline std::string* GetAppSignalStatesFromArchiveNextReply::mutable_errorstring() {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
  return _internal_mutable_errorstring();
}
inline const std::string& GetAppSignalStatesFromArchiveNextReply::_internal_errorstring() const {
  return errorstring_.Get();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_errorstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAppSignalStatesFromArchiveNextReply::set_errorstring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
}
inline void GetAppSignalStatesFromArchiveNextReply::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
}
inline void GetAppSignalStatesFromArchiveNextReply::set_errorstring(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
}
inline std::string* GetAppSignalStatesFromArchiveNextReply::_internal_mutable_errorstring() {
  _has_bits_[0] |= 0x00000001u;
  return errorstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAppSignalStatesFromArchiveNextReply::release_errorstring() {
  // @@protoc_insertion_point(field_release:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
  if (!_internal_has_errorstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errorstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAppSignalStatesFromArchiveNextReply::set_allocated_errorstring(std::string* errorstring) {
  if (errorstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errorstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetAppSignalStatesFromArchiveNextReply.errorString)
}

// optional bool dataReady = 4 [default = false];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_dataready() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_dataready() const {
  return _internal_has_dataready();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_dataready() {
  dataready_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_dataready() const {
  return dataready_;
}
inline bool GetAppSignalStatesFromArchiveNextReply::dataready() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.dataReady)
  return _internal_dataready();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_dataready(bool value) {
  _has_bits_[0] |= 0x00000020u;
  dataready_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_dataready(bool value) {
  _internal_set_dataready(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.dataReady)
}

// optional int32 totalStatesCount = 5 [default = 0];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_totalstatescount() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_totalstatescount() const {
  return _internal_has_totalstatescount();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_totalstatescount() {
  totalstatescount_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::_internal_totalstatescount() const {
  return totalstatescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::totalstatescount() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.totalStatesCount)
  return _internal_totalstatescount();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_totalstatescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  totalstatescount_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_totalstatescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalstatescount(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.totalStatesCount)
}

// optional int32 sentStatesCount = 6 [default = 0];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_sentstatescount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_sentstatescount() const {
  return _internal_has_sentstatescount();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_sentstatescount() {
  sentstatescount_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::_internal_sentstatescount() const {
  return sentstatescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::sentstatescount() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.sentStatesCount)
  return _internal_sentstatescount();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_sentstatescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sentstatescount_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_sentstatescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sentstatescount(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.sentStatesCount)
}

// optional int32 statesInPartCount = 7 [default = 0];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_statesinpartcount() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_statesinpartcount() const {
  return _internal_has_statesinpartcount();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_statesinpartcount() {
  statesinpartcount_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::_internal_statesinpartcount() const {
  return statesinpartcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveNextReply::statesinpartcount() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.statesInPartCount)
  return _internal_statesinpartcount();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_statesinpartcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  statesinpartcount_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_statesinpartcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statesinpartcount(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.statesInPartCount)
}

// optional bool isLastPart = 8 [default = false];
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_has_islastpart() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveNextReply::has_islastpart() const {
  return _internal_has_islastpart();
}
inline void GetAppSignalStatesFromArchiveNextReply::clear_islastpart() {
  islastpart_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool GetAppSignalStatesFromArchiveNextReply::_internal_islastpart() const {
  return islastpart_;
}
inline bool GetAppSignalStatesFromArchiveNextReply::islastpart() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.isLastPart)
  return _internal_islastpart();
}
inline void GetAppSignalStatesFromArchiveNextReply::_internal_set_islastpart(bool value) {
  _has_bits_[0] |= 0x00000040u;
  islastpart_ = value;
}
inline void GetAppSignalStatesFromArchiveNextReply::set_islastpart(bool value) {
  _internal_set_islastpart(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveNextReply.isLastPart)
}

// repeated .Proto.AppSignalState appSignalStates = 9;
inline int GetAppSignalStatesFromArchiveNextReply::_internal_appsignalstates_size() const {
  return appsignalstates_.size();
}
inline int GetAppSignalStatesFromArchiveNextReply::appsignalstates_size() const {
  return _internal_appsignalstates_size();
}
inline ::Proto::AppSignalState* GetAppSignalStatesFromArchiveNextReply::mutable_appsignalstates(int index) {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStatesFromArchiveNextReply.appSignalStates)
  return appsignalstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
GetAppSignalStatesFromArchiveNextReply::mutable_appsignalstates() {
  // @@protoc_insertion_point(field_mutable_list:Network.GetAppSignalStatesFromArchiveNextReply.appSignalStates)
  return &appsignalstates_;
}
inline const ::Proto::AppSignalState& GetAppSignalStatesFromArchiveNextReply::_internal_appsignalstates(int index) const {
  return appsignalstates_.Get(index);
}
inline const ::Proto::AppSignalState& GetAppSignalStatesFromArchiveNextReply::appsignalstates(int index) const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveNextReply.appSignalStates)
  return _internal_appsignalstates(index);
}
inline ::Proto::AppSignalState* GetAppSignalStatesFromArchiveNextReply::_internal_add_appsignalstates() {
  return appsignalstates_.Add();
}
inline ::Proto::AppSignalState* GetAppSignalStatesFromArchiveNextReply::add_appsignalstates() {
  // @@protoc_insertion_point(field_add:Network.GetAppSignalStatesFromArchiveNextReply.appSignalStates)
  return _internal_add_appsignalstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
GetAppSignalStatesFromArchiveNextReply::appsignalstates() const {
  // @@protoc_insertion_point(field_list:Network.GetAppSignalStatesFromArchiveNextReply.appSignalStates)
  return appsignalstates_;
}

// -------------------------------------------------------------------

// GetAppSignalStatesFromArchiveCancelRequest

// optional uint32 requestID = 1 [default = 0];
inline bool GetAppSignalStatesFromArchiveCancelRequest::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveCancelRequest::has_requestid() const {
  return _internal_has_requestid();
}
inline void GetAppSignalStatesFromArchiveCancelRequest::clear_requestid() {
  requestid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveCancelRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAppSignalStatesFromArchiveCancelRequest::requestid() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveCancelRequest.requestID)
  return _internal_requestid();
}
inline void GetAppSignalStatesFromArchiveCancelRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void GetAppSignalStatesFromArchiveCancelRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveCancelRequest.requestID)
}

// -------------------------------------------------------------------

// GetAppSignalStatesFromArchiveCancelReply

// optional int32 error = 1 [default = 0];
inline bool GetAppSignalStatesFromArchiveCancelReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveCancelReply::has_error() const {
  return _internal_has_error();
}
inline void GetAppSignalStatesFromArchiveCancelReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveCancelReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveCancelReply::error() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveCancelReply.error)
  return _internal_error();
}
inline void GetAppSignalStatesFromArchiveCancelReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveCancelReply.error)
}

// optional int32 archError = 2 [default = 100];
inline bool GetAppSignalStatesFromArchiveCancelReply::_internal_has_archerror() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveCancelReply::has_archerror() const {
  return _internal_has_archerror();
}
inline void GetAppSignalStatesFromArchiveCancelReply::clear_archerror() {
  archerror_ = 100;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveCancelReply::_internal_archerror() const {
  return archerror_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAppSignalStatesFromArchiveCancelReply::archerror() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveCancelReply.archError)
  return _internal_archerror();
}
inline void GetAppSignalStatesFromArchiveCancelReply::_internal_set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  archerror_ = value;
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_archerror(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_archerror(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveCancelReply.archError)
}

// optional string errorString = 3;
inline bool GetAppSignalStatesFromArchiveCancelReply::_internal_has_errorstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAppSignalStatesFromArchiveCancelReply::has_errorstring() const {
  return _internal_has_errorstring();
}
inline void GetAppSignalStatesFromArchiveCancelReply::clear_errorstring() {
  errorstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAppSignalStatesFromArchiveCancelReply::errorstring() const {
  // @@protoc_insertion_point(field_get:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
  return _internal_errorstring();
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_errorstring(const std::string& value) {
  _internal_set_errorstring(value);
  // @@protoc_insertion_point(field_set:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
}
inline std::string* GetAppSignalStatesFromArchiveCancelReply::mutable_errorstring() {
  // @@protoc_insertion_point(field_mutable:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
  return _internal_mutable_errorstring();
}
inline const std::string& GetAppSignalStatesFromArchiveCancelReply::_internal_errorstring() const {
  return errorstring_.Get();
}
inline void GetAppSignalStatesFromArchiveCancelReply::_internal_set_errorstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_errorstring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_errorstring(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
}
inline std::string* GetAppSignalStatesFromArchiveCancelReply::_internal_mutable_errorstring() {
  _has_bits_[0] |= 0x00000001u;
  return errorstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAppSignalStatesFromArchiveCancelReply::release_errorstring() {
  // @@protoc_insertion_point(field_release:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
  if (!_internal_has_errorstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errorstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAppSignalStatesFromArchiveCancelReply::set_allocated_errorstring(std::string* errorstring) {
  if (errorstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errorstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetAppSignalStatesFromArchiveCancelReply.errorString)
}

// -------------------------------------------------------------------

// RtTrendsManagementRequest

// optional string clientEquipmentID = 1;
inline bool RtTrendsManagementRequest::_internal_has_clientequipmentid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtTrendsManagementRequest::has_clientequipmentid() const {
  return _internal_has_clientequipmentid();
}
inline void RtTrendsManagementRequest::clear_clientequipmentid() {
  clientequipmentid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtTrendsManagementRequest::clientequipmentid() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementRequest.clientEquipmentID)
  return _internal_clientequipmentid();
}
inline void RtTrendsManagementRequest::set_clientequipmentid(const std::string& value) {
  _internal_set_clientequipmentid(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementRequest.clientEquipmentID)
}
inline std::string* RtTrendsManagementRequest::mutable_clientequipmentid() {
  // @@protoc_insertion_point(field_mutable:Network.RtTrendsManagementRequest.clientEquipmentID)
  return _internal_mutable_clientequipmentid();
}
inline const std::string& RtTrendsManagementRequest::_internal_clientequipmentid() const {
  return clientequipmentid_.Get();
}
inline void RtTrendsManagementRequest::_internal_set_clientequipmentid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RtTrendsManagementRequest::set_clientequipmentid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.RtTrendsManagementRequest.clientEquipmentID)
}
inline void RtTrendsManagementRequest::set_clientequipmentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.RtTrendsManagementRequest.clientEquipmentID)
}
inline void RtTrendsManagementRequest::set_clientequipmentid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.RtTrendsManagementRequest.clientEquipmentID)
}
inline std::string* RtTrendsManagementRequest::_internal_mutable_clientequipmentid() {
  _has_bits_[0] |= 0x00000001u;
  return clientequipmentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RtTrendsManagementRequest::release_clientequipmentid() {
  // @@protoc_insertion_point(field_release:Network.RtTrendsManagementRequest.clientEquipmentID)
  if (!_internal_has_clientequipmentid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientequipmentid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtTrendsManagementRequest::set_allocated_clientequipmentid(std::string* clientequipmentid) {
  if (clientequipmentid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientequipmentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientequipmentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.RtTrendsManagementRequest.clientEquipmentID)
}

// optional int32 samplePeriod = 2;
inline bool RtTrendsManagementRequest::_internal_has_sampleperiod() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RtTrendsManagementRequest::has_sampleperiod() const {
  return _internal_has_sampleperiod();
}
inline void RtTrendsManagementRequest::clear_sampleperiod() {
  sampleperiod_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsManagementRequest::_internal_sampleperiod() const {
  return sampleperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsManagementRequest::sampleperiod() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementRequest.samplePeriod)
  return _internal_sampleperiod();
}
inline void RtTrendsManagementRequest::_internal_set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sampleperiod_ = value;
}
inline void RtTrendsManagementRequest::set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sampleperiod(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementRequest.samplePeriod)
}

// repeated uint64 appendSignalHashes = 3;
inline int RtTrendsManagementRequest::_internal_appendsignalhashes_size() const {
  return appendsignalhashes_.size();
}
inline int RtTrendsManagementRequest::appendsignalhashes_size() const {
  return _internal_appendsignalhashes_size();
}
inline void RtTrendsManagementRequest::clear_appendsignalhashes() {
  appendsignalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RtTrendsManagementRequest::_internal_appendsignalhashes(int index) const {
  return appendsignalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RtTrendsManagementRequest::appendsignalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementRequest.appendSignalHashes)
  return _internal_appendsignalhashes(index);
}
inline void RtTrendsManagementRequest::set_appendsignalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  appendsignalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementRequest.appendSignalHashes)
}
inline void RtTrendsManagementRequest::_internal_add_appendsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  appendsignalhashes_.Add(value);
}
inline void RtTrendsManagementRequest::add_appendsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_appendsignalhashes(value);
  // @@protoc_insertion_point(field_add:Network.RtTrendsManagementRequest.appendSignalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RtTrendsManagementRequest::_internal_appendsignalhashes() const {
  return appendsignalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RtTrendsManagementRequest::appendsignalhashes() const {
  // @@protoc_insertion_point(field_list:Network.RtTrendsManagementRequest.appendSignalHashes)
  return _internal_appendsignalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RtTrendsManagementRequest::_internal_mutable_appendsignalhashes() {
  return &appendsignalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RtTrendsManagementRequest::mutable_appendsignalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.RtTrendsManagementRequest.appendSignalHashes)
  return _internal_mutable_appendsignalhashes();
}

// repeated uint64 deleteSignalHashes = 4;
inline int RtTrendsManagementRequest::_internal_deletesignalhashes_size() const {
  return deletesignalhashes_.size();
}
inline int RtTrendsManagementRequest::deletesignalhashes_size() const {
  return _internal_deletesignalhashes_size();
}
inline void RtTrendsManagementRequest::clear_deletesignalhashes() {
  deletesignalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RtTrendsManagementRequest::_internal_deletesignalhashes(int index) const {
  return deletesignalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RtTrendsManagementRequest::deletesignalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementRequest.deleteSignalHashes)
  return _internal_deletesignalhashes(index);
}
inline void RtTrendsManagementRequest::set_deletesignalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  deletesignalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementRequest.deleteSignalHashes)
}
inline void RtTrendsManagementRequest::_internal_add_deletesignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  deletesignalhashes_.Add(value);
}
inline void RtTrendsManagementRequest::add_deletesignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_deletesignalhashes(value);
  // @@protoc_insertion_point(field_add:Network.RtTrendsManagementRequest.deleteSignalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RtTrendsManagementRequest::_internal_deletesignalhashes() const {
  return deletesignalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RtTrendsManagementRequest::deletesignalhashes() const {
  // @@protoc_insertion_point(field_list:Network.RtTrendsManagementRequest.deleteSignalHashes)
  return _internal_deletesignalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RtTrendsManagementRequest::_internal_mutable_deletesignalhashes() {
  return &deletesignalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RtTrendsManagementRequest::mutable_deletesignalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.RtTrendsManagementRequest.deleteSignalHashes)
  return _internal_mutable_deletesignalhashes();
}

// -------------------------------------------------------------------

// RtTrendsManagementReply

// optional int32 error = 1 [default = 0];
inline bool RtTrendsManagementReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RtTrendsManagementReply::has_error() const {
  return _internal_has_error();
}
inline void RtTrendsManagementReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsManagementReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsManagementReply::error() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementReply.error)
  return _internal_error();
}
inline void RtTrendsManagementReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void RtTrendsManagementReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementReply.error)
}

// optional string errorString = 2;
inline bool RtTrendsManagementReply::_internal_has_errorstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtTrendsManagementReply::has_errorstring() const {
  return _internal_has_errorstring();
}
inline void RtTrendsManagementReply::clear_errorstring() {
  errorstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtTrendsManagementReply::errorstring() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementReply.errorString)
  return _internal_errorstring();
}
inline void RtTrendsManagementReply::set_errorstring(const std::string& value) {
  _internal_set_errorstring(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementReply.errorString)
}
inline std::string* RtTrendsManagementReply::mutable_errorstring() {
  // @@protoc_insertion_point(field_mutable:Network.RtTrendsManagementReply.errorString)
  return _internal_mutable_errorstring();
}
inline const std::string& RtTrendsManagementReply::_internal_errorstring() const {
  return errorstring_.Get();
}
inline void RtTrendsManagementReply::_internal_set_errorstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RtTrendsManagementReply::set_errorstring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.RtTrendsManagementReply.errorString)
}
inline void RtTrendsManagementReply::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.RtTrendsManagementReply.errorString)
}
inline void RtTrendsManagementReply::set_errorstring(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.RtTrendsManagementReply.errorString)
}
inline std::string* RtTrendsManagementReply::_internal_mutable_errorstring() {
  _has_bits_[0] |= 0x00000001u;
  return errorstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RtTrendsManagementReply::release_errorstring() {
  // @@protoc_insertion_point(field_release:Network.RtTrendsManagementReply.errorString)
  if (!_internal_has_errorstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errorstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtTrendsManagementReply::set_allocated_errorstring(std::string* errorstring) {
  if (errorstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errorstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.RtTrendsManagementReply.errorString)
}

// optional int32 samplePeriod = 3;
inline bool RtTrendsManagementReply::_internal_has_sampleperiod() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RtTrendsManagementReply::has_sampleperiod() const {
  return _internal_has_sampleperiod();
}
inline void RtTrendsManagementReply::clear_sampleperiod() {
  sampleperiod_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsManagementReply::_internal_sampleperiod() const {
  return sampleperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsManagementReply::sampleperiod() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementReply.samplePeriod)
  return _internal_sampleperiod();
}
inline void RtTrendsManagementReply::_internal_set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sampleperiod_ = value;
}
inline void RtTrendsManagementReply::set_sampleperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sampleperiod(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementReply.samplePeriod)
}

// repeated uint64 trackedSignalHashes = 4;
inline int RtTrendsManagementReply::_internal_trackedsignalhashes_size() const {
  return trackedsignalhashes_.size();
}
inline int RtTrendsManagementReply::trackedsignalhashes_size() const {
  return _internal_trackedsignalhashes_size();
}
inline void RtTrendsManagementReply::clear_trackedsignalhashes() {
  trackedsignalhashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RtTrendsManagementReply::_internal_trackedsignalhashes(int index) const {
  return trackedsignalhashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RtTrendsManagementReply::trackedsignalhashes(int index) const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsManagementReply.trackedSignalHashes)
  return _internal_trackedsignalhashes(index);
}
inline void RtTrendsManagementReply::set_trackedsignalhashes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  trackedsignalhashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsManagementReply.trackedSignalHashes)
}
inline void RtTrendsManagementReply::_internal_add_trackedsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  trackedsignalhashes_.Add(value);
}
inline void RtTrendsManagementReply::add_trackedsignalhashes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_trackedsignalhashes(value);
  // @@protoc_insertion_point(field_add:Network.RtTrendsManagementReply.trackedSignalHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RtTrendsManagementReply::_internal_trackedsignalhashes() const {
  return trackedsignalhashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RtTrendsManagementReply::trackedsignalhashes() const {
  // @@protoc_insertion_point(field_list:Network.RtTrendsManagementReply.trackedSignalHashes)
  return _internal_trackedsignalhashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RtTrendsManagementReply::_internal_mutable_trackedsignalhashes() {
  return &trackedsignalhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RtTrendsManagementReply::mutable_trackedsignalhashes() {
  // @@protoc_insertion_point(field_mutable_list:Network.RtTrendsManagementReply.trackedSignalHashes)
  return _internal_mutable_trackedsignalhashes();
}

// -------------------------------------------------------------------

// RtTrendsGetStateChangesRequest

// -------------------------------------------------------------------

// RtTrendsGetStateChangesReply

// optional int32 error = 1 [default = 0];
inline bool RtTrendsGetStateChangesReply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RtTrendsGetStateChangesReply::has_error() const {
  return _internal_has_error();
}
inline void RtTrendsGetStateChangesReply::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsGetStateChangesReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtTrendsGetStateChangesReply::error() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsGetStateChangesReply.error)
  return _internal_error();
}
inline void RtTrendsGetStateChangesReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void RtTrendsGetStateChangesReply::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsGetStateChangesReply.error)
}

// optional string errorString = 2;
inline bool RtTrendsGetStateChangesReply::_internal_has_errorstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtTrendsGetStateChangesReply::has_errorstring() const {
  return _internal_has_errorstring();
}
inline void RtTrendsGetStateChangesReply::clear_errorstring() {
  errorstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtTrendsGetStateChangesReply::errorstring() const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsGetStateChangesReply.errorString)
  return _internal_errorstring();
}
inline void RtTrendsGetStateChangesReply::set_errorstring(const std::string& value) {
  _internal_set_errorstring(value);
  // @@protoc_insertion_point(field_set:Network.RtTrendsGetStateChangesReply.errorString)
}
inline std::string* RtTrendsGetStateChangesReply::mutable_errorstring() {
  // @@protoc_insertion_point(field_mutable:Network.RtTrendsGetStateChangesReply.errorString)
  return _internal_mutable_errorstring();
}
inline const std::string& RtTrendsGetStateChangesReply::_internal_errorstring() const {
  return errorstring_.Get();
}
inline void RtTrendsGetStateChangesReply::_internal_set_errorstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RtTrendsGetStateChangesReply::set_errorstring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.RtTrendsGetStateChangesReply.errorString)
}
inline void RtTrendsGetStateChangesReply::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.RtTrendsGetStateChangesReply.errorString)
}
inline void RtTrendsGetStateChangesReply::set_errorstring(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.RtTrendsGetStateChangesReply.errorString)
}
inline std::string* RtTrendsGetStateChangesReply::_internal_mutable_errorstring() {
  _has_bits_[0] |= 0x00000001u;
  return errorstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RtTrendsGetStateChangesReply::release_errorstring() {
  // @@protoc_insertion_point(field_release:Network.RtTrendsGetStateChangesReply.errorString)
  if (!_internal_has_errorstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errorstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtTrendsGetStateChangesReply::set_allocated_errorstring(std::string* errorstring) {
  if (errorstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errorstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.RtTrendsGetStateChangesReply.errorString)
}

// repeated .Proto.AppSignalState signalStates = 3;
inline int RtTrendsGetStateChangesReply::_internal_signalstates_size() const {
  return signalstates_.size();
}
inline int RtTrendsGetStateChangesReply::signalstates_size() const {
  return _internal_signalstates_size();
}
inline ::Proto::AppSignalState* RtTrendsGetStateChangesReply::mutable_signalstates(int index) {
  // @@protoc_insertion_point(field_mutable:Network.RtTrendsGetStateChangesReply.signalStates)
  return signalstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >*
RtTrendsGetStateChangesReply::mutable_signalstates() {
  // @@protoc_insertion_point(field_mutable_list:Network.RtTrendsGetStateChangesReply.signalStates)
  return &signalstates_;
}
inline const ::Proto::AppSignalState& RtTrendsGetStateChangesReply::_internal_signalstates(int index) const {
  return signalstates_.Get(index);
}
inline const ::Proto::AppSignalState& RtTrendsGetStateChangesReply::signalstates(int index) const {
  // @@protoc_insertion_point(field_get:Network.RtTrendsGetStateChangesReply.signalStates)
  return _internal_signalstates(index);
}
inline ::Proto::AppSignalState* RtTrendsGetStateChangesReply::_internal_add_signalstates() {
  return signalstates_.Add();
}
inline ::Proto::AppSignalState* RtTrendsGetStateChangesReply::add_signalstates() {
  // @@protoc_insertion_point(field_add:Network.RtTrendsGetStateChangesReply.signalStates)
  return _internal_add_signalstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppSignalState >&
RtTrendsGetStateChangesReply::signalstates() const {
  // @@protoc_insertion_point(field_list:Network.RtTrendsGetStateChangesReply.signalStates)
  return signalstates_;
}

// -------------------------------------------------------------------

// GetFileReply

// required int32 errorCode = 1 [default = 0];
inline bool GetFileReply::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetFileReply::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void GetFileReply::clear_errorcode() {
  errorcode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::errorcode() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.errorCode)
  return _internal_errorcode();
}
inline void GetFileReply::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  errorcode_ = value;
}
inline void GetFileReply::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.errorCode)
}

// optional int64 fileSize = 2 [default = 0];
inline bool GetFileReply::_internal_has_filesize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetFileReply::has_filesize() const {
  return _internal_has_filesize();
}
inline void GetFileReply::clear_filesize() {
  filesize_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFileReply::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFileReply::filesize() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.fileSize)
  return _internal_filesize();
}
inline void GetFileReply::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  filesize_ = value;
}
inline void GetFileReply::set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.fileSize)
}

// optional int32 totalParts = 3 [default = 0];
inline bool GetFileReply::_internal_has_totalparts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetFileReply::has_totalparts() const {
  return _internal_has_totalparts();
}
inline void GetFileReply::clear_totalparts() {
  totalparts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::_internal_totalparts() const {
  return totalparts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::totalparts() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.totalParts)
  return _internal_totalparts();
}
inline void GetFileReply::_internal_set_totalparts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  totalparts_ = value;
}
inline void GetFileReply::set_totalparts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalparts(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.totalParts)
}

// optional int32 currentPart = 4 [default = 0];
inline bool GetFileReply::_internal_has_currentpart() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetFileReply::has_currentpart() const {
  return _internal_has_currentpart();
}
inline void GetFileReply::clear_currentpart() {
  currentpart_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::_internal_currentpart() const {
  return currentpart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::currentpart() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.currentPart)
  return _internal_currentpart();
}
inline void GetFileReply::_internal_set_currentpart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  currentpart_ = value;
}
inline void GetFileReply::set_currentpart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentpart(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.currentPart)
}

// optional int32 currentPartSize = 5 [default = 0];
inline bool GetFileReply::_internal_has_currentpartsize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GetFileReply::has_currentpartsize() const {
  return _internal_has_currentpartsize();
}
inline void GetFileReply::clear_currentpartsize() {
  currentpartsize_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::_internal_currentpartsize() const {
  return currentpartsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileReply::currentpartsize() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.currentPartSize)
  return _internal_currentpartsize();
}
inline void GetFileReply::_internal_set_currentpartsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  currentpartsize_ = value;
}
inline void GetFileReply::set_currentpartsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentpartsize(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.currentPartSize)
}

// optional bytes md5 = 6;
inline bool GetFileReply::_internal_has_md5() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetFileReply::has_md5() const {
  return _internal_has_md5();
}
inline void GetFileReply::clear_md5() {
  md5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileReply::md5() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.md5)
  return _internal_md5();
}
inline void GetFileReply::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.md5)
}
inline std::string* GetFileReply::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:Network.GetFileReply.md5)
  return _internal_mutable_md5();
}
inline const std::string& GetFileReply::_internal_md5() const {
  return md5_.Get();
}
inline void GetFileReply::_internal_set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetFileReply::set_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetFileReply.md5)
}
inline void GetFileReply::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetFileReply.md5)
}
inline void GetFileReply::set_md5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetFileReply.md5)
}
inline std::string* GetFileReply::_internal_mutable_md5() {
  _has_bits_[0] |= 0x00000001u;
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetFileReply::release_md5() {
  // @@protoc_insertion_point(field_release:Network.GetFileReply.md5)
  if (!_internal_has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return md5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFileReply::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetFileReply.md5)
}

// optional bytes filePartData = 10;
inline bool GetFileReply::_internal_has_filepartdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetFileReply::has_filepartdata() const {
  return _internal_has_filepartdata();
}
inline void GetFileReply::clear_filepartdata() {
  filepartdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFileReply::filepartdata() const {
  // @@protoc_insertion_point(field_get:Network.GetFileReply.filePartData)
  return _internal_filepartdata();
}
inline void GetFileReply::set_filepartdata(const std::string& value) {
  _internal_set_filepartdata(value);
  // @@protoc_insertion_point(field_set:Network.GetFileReply.filePartData)
}
inline std::string* GetFileReply::mutable_filepartdata() {
  // @@protoc_insertion_point(field_mutable:Network.GetFileReply.filePartData)
  return _internal_mutable_filepartdata();
}
inline const std::string& GetFileReply::_internal_filepartdata() const {
  return filepartdata_.Get();
}
inline void GetFileReply::_internal_set_filepartdata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filepartdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetFileReply::set_filepartdata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filepartdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Network.GetFileReply.filePartData)
}
inline void GetFileReply::set_filepartdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filepartdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Network.GetFileReply.filePartData)
}
inline void GetFileReply::set_filepartdata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filepartdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Network.GetFileReply.filePartData)
}
inline std::string* GetFileReply::_internal_mutable_filepartdata() {
  _has_bits_[0] |= 0x00000002u;
  return filepartdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetFileReply::release_filepartdata() {
  // @@protoc_insertion_point(field_release:Network.GetFileReply.filePartData)
  if (!_internal_has_filepartdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filepartdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFileReply::set_allocated_filepartdata(std::string* filepartdata) {
  if (filepartdata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filepartdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepartdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Network.GetFileReply.filePartData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#ifdef _MSC_VER
#pragma warning(pop)
#endif