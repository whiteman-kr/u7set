// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* qvariant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qvariant_reflection_ = NULL;
const ::google::protobuf::Descriptor* wstring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wstring_reflection_ = NULL;
const ::google::protobuf::Descriptor* FontParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbElementCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbElementCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbElementXml_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbElementXml_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Schema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schema_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosRectImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosRectImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosLineImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosLineImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosConnectionImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosConnectionImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblConnectionPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblConnectionPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItemRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItemRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItemLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItemLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemAfb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemAfb_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceRoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceRack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceRack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceChassis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceChassis_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceController_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceController_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Workstation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Workstation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Software_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Software_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleConfigurationValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleConfigurationValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SchemaUnit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionDirrection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FblSignalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FblDataFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialization_2eproto() {
  protobuf_AddDesc_serialization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialization.proto");
  GOOGLE_CHECK(file != NULL);
  Uuid_descriptor_ = file->message_type(0);
  static const int Uuid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, uuid_),
  };
  Uuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uuid_descriptor_,
      Uuid::default_instance_,
      Uuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uuid));
  qvariant_descriptor_ = file->message_type(1);
  static const int qvariant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, uintvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, doublevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, boolvalue_),
  };
  qvariant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qvariant_descriptor_,
      qvariant::default_instance_,
      qvariant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qvariant));
  wstring_descriptor_ = file->message_type(2);
  static const int wstring_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, text_),
  };
  wstring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wstring_descriptor_,
      wstring::default_instance_,
      wstring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wstring));
  FontParam_descriptor_ = file->message_type(3);
  static const int FontParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, italic_),
  };
  FontParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontParam_descriptor_,
      FontParam::default_instance_,
      FontParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontParam));
  SchemaPoint_descriptor_ = file->message_type(4);
  static const int SchemaPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, y_),
  };
  SchemaPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaPoint_descriptor_,
      SchemaPoint::default_instance_,
      SchemaPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaPoint));
  Envelope_descriptor_ = file->message_type(5);
  static const int Envelope_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, classnamehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schemaitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, deviceobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schemalayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, fblelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, configuration_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  Configuration_descriptor_ = file->message_type(6);
  static const int Configuration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, globals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, schemasids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, schemas_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  AfbElementCollection_descriptor_ = file->message_type(7);
  static const int AfbElementCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, elements_),
  };
  AfbElementCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbElementCollection_descriptor_,
      AfbElementCollection::default_instance_,
      AfbElementCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbElementCollection));
  AfbElementXml_descriptor_ = file->message_type(8);
  static const int AfbElementXml_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, data_),
  };
  AfbElementXml_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbElementXml_descriptor_,
      AfbElementXml::default_instance_,
      AfbElementXml_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbElementXml));
  FblElement_descriptor_ = file->message_type(9);
  static const int FblElement_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, hasram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, requiredstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, description_),
  };
  FblElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblElement_descriptor_,
      FblElement::default_instance_,
      FblElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblElement));
  AfbSignal_descriptor_ = file->message_type(10);
  static const int AfbSignal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, operandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, opname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, dataformat_),
  };
  AfbSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbSignal_descriptor_,
      AfbSignal::default_instance_,
      AfbSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbSignal));
  AfbParam_descriptor_ = file->message_type(11);
  static const int AfbParam_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, operandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, instantiator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, changedscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, defaultvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, lowlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, highlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, opname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, dataformat_),
  };
  AfbParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbParam_descriptor_,
      AfbParam::default_instance_,
      AfbParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbParam));
  Schema_descriptor_ = file->message_type(12);
  static const int Schema_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, schemaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, excludefrombuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, afbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, logic_schema_),
  };
  Schema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schema_descriptor_,
      Schema::default_instance_,
      Schema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schema));
  LogicSchema_descriptor_ = file->message_type(13);
  static const int LogicSchema_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, equipmentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, counter_),
  };
  LogicSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicSchema_descriptor_,
      LogicSchema::default_instance_,
      LogicSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicSchema));
  SchemaLayer_descriptor_ = file->message_type(14);
  static const int SchemaLayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, compile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, items_),
  };
  SchemaLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaLayer_descriptor_,
      SchemaLayer::default_instance_,
      SchemaLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaLayer));
  SchemaItem_descriptor_ = file->message_type(15);
  static const int SchemaItem_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, isstatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, itemunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, acceptclick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, clickscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, posrectimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, poslineimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, posconnectionimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, fblitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, fblitemrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, fblitemline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, inputsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, outputsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, afb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, constitem_),
  };
  SchemaItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItem_descriptor_,
      SchemaItem::default_instance_,
      SchemaItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItem));
  PosRectImpl_descriptor_ = file->message_type(16);
  static const int PosRectImpl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, leftdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, topdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, widthdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, heightdocpt_),
  };
  PosRectImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosRectImpl_descriptor_,
      PosRectImpl::default_instance_,
      PosRectImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosRectImpl));
  PosLineImpl_descriptor_ = file->message_type(17);
  static const int PosLineImpl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, startxdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, startydocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, endxdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, endydocpt_),
  };
  PosLineImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosLineImpl_descriptor_,
      PosLineImpl::default_instance_,
      PosLineImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosLineImpl));
  PosConnectionImpl_descriptor_ = file->message_type(18);
  static const int PosConnectionImpl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, points_),
  };
  PosConnectionImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosConnectionImpl_descriptor_,
      PosConnectionImpl::default_instance_,
      PosConnectionImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosConnectionImpl));
  SchemaItemRect_descriptor_ = file->message_type(19);
  static const int SchemaItemRect_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, drawrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, horzalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, vertalign_),
  };
  SchemaItemRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemRect_descriptor_,
      SchemaItemRect::default_instance_,
      SchemaItemRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemRect));
  SchemaItemLine_descriptor_ = file->message_type(20);
  static const int SchemaItemLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, linecolor_),
  };
  SchemaItemLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLine_descriptor_,
      SchemaItemLine::default_instance_,
      SchemaItemLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLine));
  SchemaItemPath_descriptor_ = file->message_type(21);
  static const int SchemaItemPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, linecolor_),
  };
  SchemaItemPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemPath_descriptor_,
      SchemaItemPath::default_instance_,
      SchemaItemPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemPath));
  FblConnectionPoint_descriptor_ = file->message_type(22);
  static const int FblConnectionPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, dirrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, operandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, caption_),
  };
  FblConnectionPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblConnectionPoint_descriptor_,
      FblConnectionPoint::default_instance_,
      FblConnectionPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblConnectionPoint));
  FblItem_descriptor_ = file->message_type(23);
  static const int FblItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, points_),
  };
  FblItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItem_descriptor_,
      FblItem::default_instance_,
      FblItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItem));
  FblItemRect_descriptor_ = file->message_type(24);
  static const int FblItemRect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, font_),
  };
  FblItemRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItemRect_descriptor_,
      FblItemRect::default_instance_,
      FblItemRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItemRect));
  FblItemLine_descriptor_ = file->message_type(25);
  static const int FblItemLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, linecolor_),
  };
  FblItemLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItemLine_descriptor_,
      FblItemLine::default_instance_,
      FblItemLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItemLine));
  SchemaItemSignal_descriptor_ = file->message_type(26);
  static const int SchemaItemSignal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, appsignalids_),
  };
  SchemaItemSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemSignal_descriptor_,
      SchemaItemSignal::default_instance_,
      SchemaItemSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemSignal));
  SchemaItemInput_descriptor_ = file->message_type(27);
  static const int SchemaItemInput_offsets_[1] = {
  };
  SchemaItemInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemInput_descriptor_,
      SchemaItemInput::default_instance_,
      SchemaItemInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemInput));
  SchemaItemOutput_descriptor_ = file->message_type(28);
  static const int SchemaItemOutput_offsets_[1] = {
  };
  SchemaItemOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemOutput_descriptor_,
      SchemaItemOutput::default_instance_,
      SchemaItemOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemOutput));
  SchemaItemLink_descriptor_ = file->message_type(29);
  static const int SchemaItemLink_offsets_[1] = {
  };
  SchemaItemLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLink_descriptor_,
      SchemaItemLink::default_instance_,
      SchemaItemLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLink));
  SchemaItemAfb_descriptor_ = file->message_type(30);
  static const int SchemaItemAfb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, afbstrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, precision_),
  };
  SchemaItemAfb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemAfb_descriptor_,
      SchemaItemAfb::default_instance_,
      SchemaItemAfb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemAfb));
  SchemaItemConst_descriptor_ = file->message_type(31);
  static const int SchemaItemConst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, floatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, precision_),
  };
  SchemaItemConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemConst_descriptor_,
      SchemaItemConst::default_instance_,
      SchemaItemConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemConst));
  DeviceObject_descriptor_ = file->message_type(32);
  static const int DeviceObject_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, childrestriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, specific_properties_struct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetobjectuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, rack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, chassis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, workstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, software_),
  };
  DeviceObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceObject_descriptor_,
      DeviceObject::default_instance_,
      DeviceObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceObject));
  DeviceRoot_descriptor_ = file->message_type(33);
  static const int DeviceRoot_offsets_[1] = {
  };
  DeviceRoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceRoot_descriptor_,
      DeviceRoot::default_instance_,
      DeviceRoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceRoot));
  DeviceSystem_descriptor_ = file->message_type(34);
  static const int DeviceSystem_offsets_[1] = {
  };
  DeviceSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSystem_descriptor_,
      DeviceSystem::default_instance_,
      DeviceSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSystem));
  DeviceRack_descriptor_ = file->message_type(35);
  static const int DeviceRack_offsets_[1] = {
  };
  DeviceRack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceRack_descriptor_,
      DeviceRack::default_instance_,
      DeviceRack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceRack));
  DeviceChassis_descriptor_ = file->message_type(36);
  static const int DeviceChassis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, type_),
  };
  DeviceChassis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceChassis_descriptor_,
      DeviceChassis::default_instance_,
      DeviceChassis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceChassis));
  DeviceModule_descriptor_ = file->message_type(37);
  static const int DeviceModule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, type_),
  };
  DeviceModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceModule_descriptor_,
      DeviceModule::default_instance_,
      DeviceModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceModule));
  DeviceController_descriptor_ = file->message_type(38);
  static const int DeviceController_offsets_[1] = {
  };
  DeviceController_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceController_descriptor_,
      DeviceController::default_instance_,
      DeviceController_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceController, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceController, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceController));
  DeviceSignal_descriptor_ = file->message_type(39);
  static const int DeviceSignal_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, obsoletetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, byteorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, validityoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, validitybit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, valueoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, valuebit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, function_),
  };
  DeviceSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSignal_descriptor_,
      DeviceSignal::default_instance_,
      DeviceSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSignal));
  Workstation_descriptor_ = file->message_type(40);
  static const int Workstation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workstation, type_),
  };
  Workstation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Workstation_descriptor_,
      Workstation::default_instance_,
      Workstation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workstation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workstation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Workstation));
  Software_descriptor_ = file->message_type(41);
  static const int Software_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, type_),
  };
  Software_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Software_descriptor_,
      Software::default_instance_,
      Software_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Software));
  ModuleConfiguration_descriptor_ = file->message_type(42);
  static const int ModuleConfiguration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, struct_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, name_),
  };
  ModuleConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleConfiguration_descriptor_,
      ModuleConfiguration::default_instance_,
      ModuleConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleConfiguration));
  ModuleConfigurationValue_descriptor_ = file->message_type(43);
  static const int ModuleConfigurationValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, value_),
  };
  ModuleConfigurationValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleConfigurationValue_descriptor_,
      ModuleConfigurationValue::default_instance_,
      ModuleConfigurationValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleConfigurationValue));
  Property_descriptor_ = file->message_type(44);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  SchemaUnit_descriptor_ = file->enum_type(0);
  ConnectionDirrection_descriptor_ = file->enum_type(1);
  FblSignalType_descriptor_ = file->enum_type(2);
  FblDataFormat_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uuid_descriptor_, &Uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qvariant_descriptor_, &qvariant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wstring_descriptor_, &wstring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontParam_descriptor_, &FontParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaPoint_descriptor_, &SchemaPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbElementCollection_descriptor_, &AfbElementCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbElementXml_descriptor_, &AfbElementXml::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblElement_descriptor_, &FblElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbSignal_descriptor_, &AfbSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbParam_descriptor_, &AfbParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schema_descriptor_, &Schema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicSchema_descriptor_, &LogicSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaLayer_descriptor_, &SchemaLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItem_descriptor_, &SchemaItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosRectImpl_descriptor_, &PosRectImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosLineImpl_descriptor_, &PosLineImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosConnectionImpl_descriptor_, &PosConnectionImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemRect_descriptor_, &SchemaItemRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLine_descriptor_, &SchemaItemLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemPath_descriptor_, &SchemaItemPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblConnectionPoint_descriptor_, &FblConnectionPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItem_descriptor_, &FblItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItemRect_descriptor_, &FblItemRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItemLine_descriptor_, &FblItemLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemSignal_descriptor_, &SchemaItemSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemInput_descriptor_, &SchemaItemInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemOutput_descriptor_, &SchemaItemOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLink_descriptor_, &SchemaItemLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemAfb_descriptor_, &SchemaItemAfb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemConst_descriptor_, &SchemaItemConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceObject_descriptor_, &DeviceObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceRoot_descriptor_, &DeviceRoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSystem_descriptor_, &DeviceSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceRack_descriptor_, &DeviceRack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceChassis_descriptor_, &DeviceChassis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceModule_descriptor_, &DeviceModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceController_descriptor_, &DeviceController::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSignal_descriptor_, &DeviceSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Workstation_descriptor_, &Workstation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Software_descriptor_, &Software::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleConfiguration_descriptor_, &ModuleConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleConfigurationValue_descriptor_, &ModuleConfigurationValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialization_2eproto() {
  delete Uuid::default_instance_;
  delete Uuid_reflection_;
  delete qvariant::default_instance_;
  delete qvariant_reflection_;
  delete wstring::default_instance_;
  delete wstring_reflection_;
  delete FontParam::default_instance_;
  delete FontParam_reflection_;
  delete SchemaPoint::default_instance_;
  delete SchemaPoint_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete AfbElementCollection::default_instance_;
  delete AfbElementCollection_reflection_;
  delete AfbElementXml::default_instance_;
  delete AfbElementXml_reflection_;
  delete FblElement::default_instance_;
  delete FblElement_reflection_;
  delete AfbSignal::default_instance_;
  delete AfbSignal_reflection_;
  delete AfbParam::default_instance_;
  delete AfbParam_reflection_;
  delete Schema::default_instance_;
  delete Schema_reflection_;
  delete LogicSchema::default_instance_;
  delete LogicSchema_reflection_;
  delete SchemaLayer::default_instance_;
  delete SchemaLayer_reflection_;
  delete SchemaItem::default_instance_;
  delete SchemaItem_reflection_;
  delete PosRectImpl::default_instance_;
  delete PosRectImpl_reflection_;
  delete PosLineImpl::default_instance_;
  delete PosLineImpl_reflection_;
  delete PosConnectionImpl::default_instance_;
  delete PosConnectionImpl_reflection_;
  delete SchemaItemRect::default_instance_;
  delete SchemaItemRect_reflection_;
  delete SchemaItemLine::default_instance_;
  delete SchemaItemLine_reflection_;
  delete SchemaItemPath::default_instance_;
  delete SchemaItemPath_reflection_;
  delete FblConnectionPoint::default_instance_;
  delete FblConnectionPoint_reflection_;
  delete FblItem::default_instance_;
  delete FblItem_reflection_;
  delete FblItemRect::default_instance_;
  delete FblItemRect_reflection_;
  delete FblItemLine::default_instance_;
  delete FblItemLine_reflection_;
  delete SchemaItemSignal::default_instance_;
  delete SchemaItemSignal_reflection_;
  delete SchemaItemInput::default_instance_;
  delete SchemaItemInput_reflection_;
  delete SchemaItemOutput::default_instance_;
  delete SchemaItemOutput_reflection_;
  delete SchemaItemLink::default_instance_;
  delete SchemaItemLink_reflection_;
  delete SchemaItemAfb::default_instance_;
  delete SchemaItemAfb_reflection_;
  delete SchemaItemConst::default_instance_;
  delete SchemaItemConst_reflection_;
  delete DeviceObject::default_instance_;
  delete DeviceObject_reflection_;
  delete DeviceRoot::default_instance_;
  delete DeviceRoot_reflection_;
  delete DeviceSystem::default_instance_;
  delete DeviceSystem_reflection_;
  delete DeviceRack::default_instance_;
  delete DeviceRack_reflection_;
  delete DeviceChassis::default_instance_;
  delete DeviceChassis_reflection_;
  delete DeviceModule::default_instance_;
  delete DeviceModule_reflection_;
  delete DeviceController::default_instance_;
  delete DeviceController_reflection_;
  delete DeviceSignal::default_instance_;
  delete DeviceSignal_reflection_;
  delete Workstation::default_instance_;
  delete Workstation_reflection_;
  delete Software::default_instance_;
  delete Software_reflection_;
  delete ModuleConfiguration::default_instance_;
  delete ModuleConfiguration_reflection_;
  delete ModuleConfigurationValue::default_instance_;
  delete ModuleConfigurationValue_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
}

void protobuf_AddDesc_serialization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023serialization.proto\022\005Proto\"\024\n\004Uuid\022\014\n\004"
    "uuid\030\001 \002(\014\"u\n\010qvariant\022\014\n\004type\030\001 \002(\005\022\023\n\010"
    "intValue\030\002 \001(\005:\0010\022\024\n\tuintValue\030\003 \001(\r:\0010\022"
    "\026\n\013doubleValue\030\004 \001(\001:\0010\022\030\n\tboolValue\030\005 \001"
    "(\010:\005false\"\027\n\007wstring\022\014\n\004text\030\001 \002(\014\"U\n\tFo"
    "ntParam\022\034\n\004name\030\001 \002(\0132\016.Proto.wstring\022\014\n"
    "\004size\030\002 \002(\001\022\014\n\004bold\030\003 \002(\010\022\016\n\006italic\030\004 \002("
    "\010\"#\n\013SchemaPoint\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"\217"
    "\002\n\010Envelope\022\025\n\rclassnamehash\030\001 \002(\r\022%\n\nsc"
    "hemaitem\030\006 \001(\0132\021.Proto.SchemaItem\022)\n\014dev"
    "iceobject\030\007 \001(\0132\023.Proto.DeviceObject\022\035\n\006"
    "schema\030d \001(\0132\r.Proto.Schema\022\'\n\013schemalay"
    "er\030e \001(\0132\022.Proto.SchemaLayer\022%\n\nfbleleme"
    "nt\030f \001(\0132\021.Proto.FblElement\022+\n\rconfigura"
    "tion\030g \001(\0132\024.Proto.Configuration\"\361\001\n\rCon"
    "figuration\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022\035\n"
    "\005strID\030\002 \002(\0132\016.Proto.wstring\022\037\n\007caption\030"
    "\003 \002(\0132\016.Proto.wstring\022!\n\tvariables\030\004 \002(\013"
    "2\016.Proto.wstring\022\037\n\007globals\030\005 \002(\0132\016.Prot"
    "o.wstring\022\037\n\nschemasIDs\030d \003(\0132\013.Proto.Uu"
    "id\022 \n\007schemas\030e \003(\0132\017.Proto.Envelope\">\n\024"
    "AfbElementCollection\022&\n\010elements\030\001 \003(\0132\024"
    ".Proto.AfbElementXml\"\035\n\rAfbElementXml\022\014\n"
    "\004data\030\001 \002(\014\"\233\002\n\nFblElement\022\035\n\005strID\030\002 \002("
    "\0132\016.Proto.wstring\022\037\n\007caption\030\003 \002(\0132\016.Pro"
    "to.wstring\022\016\n\006opcode\030\004 \002(\r\022\025\n\006hasRam\030\005 \001"
    "(\010:\005false\022\033\n\rrequiredStart\030\006 \001(\010:\004true\022 "
    "\n\006inputs\030\013 \003(\0132\020.Proto.AfbSignal\022!\n\007outp"
    "uts\030\014 \003(\0132\020.Proto.AfbSignal\022\037\n\006params\030\r "
    "\003(\0132\017.Proto.AfbParam\022#\n\013description\030\016 \001("
    "\0132\016.Proto.wstring\"\304\001\n\tAfbSignal\022\037\n\007capti"
    "on\030\001 \002(\0132\016.Proto.wstring\022\"\n\004type\030\002 \002(\0162\024"
    ".Proto.FblSignalType\022\027\n\014operandIndex\030\003 \001"
    "(\005:\0010\022\017\n\004size\030\004 \001(\005:\0010\022\036\n\006opName\030\005 \001(\0132\016"
    ".Proto.wstring\022(\n\ndataFormat\030\006 \001(\0162\024.Pro"
    "to.FblDataFormat\"\273\003\n\010AfbParam\022\037\n\007caption"
    "\030\001 \002(\0132\016.Proto.wstring\022\017\n\007visible\030\007 \002(\010\022"
    "\027\n\014operandIndex\030\010 \001(\005:\0010\022\017\n\004size\030\t \001(\005:\001"
    "0\022\033\n\014instantiator\030\n \001(\010:\005false\022\023\n\004user\030\013"
    " \001(\010:\005false\022%\n\rchangedScript\030\014 \001(\0132\016.Pro"
    "to.wstring\022\036\n\005value\030\r \001(\0132\017.Proto.qvaria"
    "nt\022%\n\014defaultvalue\030\016 \001(\0132\017.Proto.qvarian"
    "t\022!\n\010lowlimit\030\017 \001(\0132\017.Proto.qvariant\022\"\n\t"
    "highlimit\030\020 \001(\0132\017.Proto.qvariant\022\036\n\006opNa"
    "me\030\021 \001(\0132\016.Proto.wstring\022\"\n\004type\030\022 \001(\0162\024"
    ".Proto.FblSignalType\022(\n\ndataFormat\030\023 \001(\016"
    "2\024.Proto.FblDataFormat\"\276\002\n\006Schema\022\031\n\004uui"
    "d\030\001 \002(\0132\013.Proto.Uuid\022 \n\010schemaID\030\002 \002(\0132\016"
    ".Proto.wstring\022\037\n\007caption\030\003 \002(\0132\016.Proto."
    "wstring\022\r\n\005width\030\004 \002(\001\022\016\n\006height\030\005 \002(\001\022\037"
    "\n\004unit\030\006 \002(\0162\021.Proto.SchemaUnit\022\037\n\020exclu"
    "deFromBuild\030\007 \001(\010:\005false\022\037\n\006layers\030d \003(\013"
    "2\017.Proto.Envelope\022)\n\004afbs\030e \002(\0132\033.Proto."
    "AfbElementCollection\022)\n\014logic_schema\030\310\001 "
    "\001(\0132\022.Proto.LogicSchema\"G\n\013LogicSchema\022$"
    "\n\014equipmentids\030\001 \003(\0132\016.Proto.wstring\022\022\n\007"
    "counter\030\002 \001(\005:\0010\"\224\001\n\013SchemaLayer\022\031\n\004uuid"
    "\030\001 \002(\0132\013.Proto.Uuid\022\034\n\004name\030\002 \002(\0132\016.Prot"
    "o.wstring\022\017\n\007compile\030\003 \002(\010\022\014\n\004show\030\004 \002(\010"
    "\022\r\n\005print\030\005 \002(\010\022\036\n\005items\030\017 \003(\0132\017.Proto.E"
    "nvelope\"\224\006\n\nSchemaItem\022\031\n\004uuid\030\001 \002(\0132\013.P"
    "roto.Uuid\022\020\n\010isStatic\030\002 \002(\010\022\020\n\010isLocked\030"
    "\003 \002(\010\022#\n\010itemUnit\030\004 \002(\0162\021.Proto.SchemaUn"
    "it\022\032\n\013acceptClick\030\005 \001(\010:\005false\022#\n\013clickS"
    "cript\030\006 \001(\0132\016.Proto.wstring\022\'\n\013PosRectIm"
    "pl\030\n \001(\0132\022.Proto.PosRectImpl\022\'\n\013PosLineI"
    "mpl\030\013 \001(\0132\022.Proto.PosLineImpl\0223\n\021PosConn"
    "ectionImpl\030\014 \001(\0132\030.Proto.PosConnectionIm"
    "pl\022\037\n\007FblItem\030j \001(\0132\016.Proto.FblItem\022\'\n\013F"
    "blItemRect\030k \001(\0132\022.Proto.FblItemRect\022\'\n\013"
    "FblItemLine\030l \001(\0132\022.Proto.FblItemLine\022#\n"
    "\004Rect\030t \001(\0132\025.Proto.SchemaItemRect\022#\n\004Li"
    "ne\030u \001(\0132\025.Proto.SchemaItemLine\022#\n\004Path\030"
    "v \001(\0132\025.Proto.SchemaItemPath\022\'\n\006Signal\030|"
    " \001(\0132\027.Proto.SchemaItemSignal\022+\n\013InputSi"
    "gnal\030} \001(\0132\026.Proto.SchemaItemInput\022-\n\014Ou"
    "tputSignal\030~ \001(\0132\027.Proto.SchemaItemOutpu"
    "t\022#\n\004Link\030\177 \001(\0132\025.Proto.SchemaItemLink\022\""
    "\n\003Afb\030\200\001 \001(\0132\024.Proto.SchemaItemAfb\022*\n\tCo"
    "nstItem\030\201\001 \001(\0132\026.Proto.SchemaItemConst\"["
    "\n\013PosRectImpl\022\021\n\tleftDocPt\030\001 \002(\001\022\020\n\010topD"
    "ocPt\030\002 \002(\001\022\022\n\nwidthDocPt\030\003 \002(\001\022\023\n\013height"
    "DocPt\030\004 \002(\001\"]\n\013PosLineImpl\022\023\n\013startXDocP"
    "t\030\001 \002(\001\022\023\n\013startYDocPt\030\002 \002(\001\022\021\n\tendXDocP"
    "t\030\003 \002(\001\022\021\n\tendYDocPt\030\004 \002(\001\"7\n\021PosConnect"
    "ionImpl\022\"\n\006points\030\001 \003(\0132\022.Proto.SchemaPo"
    "int\"\353\001\n\016SchemaItemRect\022\016\n\006weight\030\001 \002(\001\022\021"
    "\n\tlineColor\030\002 \002(\r\022\021\n\tfillColor\030\003 \002(\r\022\034\n\004"
    "text\030\004 \002(\0132\016.Proto.wstring\022\021\n\ttextColor\030"
    "\005 \002(\r\022\036\n\004font\030\006 \002(\0132\020.Proto.FontParam\022\014\n"
    "\004fill\030\007 \002(\010\022\026\n\010drawrect\030\010 \001(\010:\004true\022\024\n\th"
    "orzAlign\030\t \001(\005:\0014\022\026\n\tvertAlign\030\n \001(\005:\00312"
    "8\"3\n\016SchemaItemLine\022\016\n\006weight\030\001 \002(\001\022\021\n\tl"
    "ineColor\030\002 \002(\r\"3\n\016SchemaItemPath\022\016\n\006weig"
    "ht\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\"\260\001\n\022FblConne"
    "ctionPoint\022!\n\005point\030\001 \001(\0132\022.Proto.Schema"
    "Point\022/\n\ndirrection\030\002 \001(\0162\033.Proto.Connec"
    "tionDirrection\022\031\n\004uuid\030\003 \001(\0132\013.Proto.Uui"
    "d\022\030\n\014operandIndex\030\004 \001(\005:\002-1\022\021\n\007caption\030\005"
    " \001(\t:\000\"4\n\007FblItem\022)\n\006points\030\001 \003(\0132\031.Prot"
    "o.FblConnectionPoint\"v\n\013FblItemRect\022\016\n\006w"
    "eight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\022\021\n\tfillCo"
    "lor\030\003 \002(\r\022\021\n\ttextColor\030\004 \002(\r\022\036\n\004font\030\005 \002"
    "(\0132\020.Proto.FontParam\"0\n\013FblItemLine\022\016\n\006w"
    "eight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\"8\n\020Schema"
    "ItemSignal\022$\n\014appSignalIDs\030\001 \003(\0132\016.Proto"
    ".wstring\"\021\n\017SchemaItemInput\"\022\n\020SchemaIte"
    "mOutput\"\020\n\016SchemaItemLink\"h\n\rSchemaItemA"
    "fb\022\037\n\006params\030\002 \003(\0132\017.Proto.AfbParam\022 \n\010a"
    "fbStrid\030\003 \001(\0132\016.Proto.wstring\022\024\n\tprecisi"
    "on\030\004 \001(\005:\0012\"d\n\017SchemaItemConst\022\017\n\004type\030\001"
    " \001(\005:\0010\022\023\n\010intValue\030\002 \001(\005:\0010\022\025\n\nfloatVal"
    "ue\030\003 \001(\001:\0010\022\024\n\tprecision\030\004 \001(\005:\0012\"\302\005\n\014De"
    "viceObject\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022#\n"
    "\013equipmentId\030\002 \002(\0132\016.Proto.wstring\022\037\n\007ca"
    "ption\030\003 \002(\0132\016.Proto.wstring\022(\n\020childRest"
    "riction\030\004 \001(\0132\016.Proto.wstring\022\020\n\005place\030\005"
    " \001(\005:\0010\022\"\n\032specific_properties_struct\030\006 "
    "\001(\t\022#\n\nproperties\030\007 \003(\0132\017.Proto.Property"
    "\022\025\n\006preset\030  \001(\010:\005false\022\031\n\npresetRoot\030! "
    "\001(\010:\005false\022\"\n\npresetName\030\" \001(\0132\016.Proto.w"
    "string\022%\n\020presetObjectUuid\030# \001(\0132\013.Proto"
    ".Uuid\022\037\n\004Root\030d \001(\0132\021.Proto.DeviceRoot\022#"
    "\n\006System\030e \001(\0132\023.Proto.DeviceSystem\022\037\n\004R"
    "ack\030f \001(\0132\021.Proto.DeviceRack\022%\n\007Chassis\030"
    "g \001(\0132\024.Proto.DeviceChassis\022#\n\006Module\030h "
    "\001(\0132\023.Proto.DeviceModule\022+\n\nController\030i"
    " \001(\0132\027.Proto.DeviceController\022#\n\006Signal\030"
    "j \001(\0132\023.Proto.DeviceSignal\022\'\n\013Workstatio"
    "n\030k \001(\0132\022.Proto.Workstation\022!\n\010Software\030"
    "l \001(\0132\017.Proto.Software\"\014\n\nDeviceRoot\"\016\n\014"
    "DeviceSystem\"\014\n\nDeviceRack\" \n\rDeviceChas"
    "sis\022\017\n\004type\030\001 \001(\005:\0010\"\037\n\014DeviceModule\022\017\n\004"
    "type\030\001 \001(\005:\0010\"\022\n\020DeviceController\"\347\001\n\014De"
    "viceSignal\022\027\n\014obsoletetype\030\001 \001(\005:\0010\022\024\n\tb"
    "yteOrder\030\002 \001(\005:\0010\022\021\n\006format\030\003 \001(\005:\0010\022\017\n\004"
    "size\030\004 \001(\005:\0010\022\031\n\016validityOffset\030\005 \001(\005:\0010"
    "\022\026\n\013validityBit\030\006 \001(\005:\0010\022\026\n\013valueOffset\030"
    "\007 \001(\005:\0010\022\023\n\010valueBit\030\010 \001(\005:\0010\022\017\n\004type\030\t "
    "\001(\005:\0010\022\023\n\010function\030\n \001(\005:\0010\"\036\n\013Workstati"
    "on\022\017\n\004type\030\001 \001(\005:\0010\"\033\n\010Software\022\017\n\004type\030"
    "\001 \001(\005:\0010\"r\n\023ModuleConfiguration\022\032\n\022struc"
    "t_description\030\001 \001(\t\022/\n\006values\030\002 \003(\0132\037.Pr"
    "oto.ModuleConfigurationValue\022\016\n\004name\030\003 \001"
    "(\t:\000\"7\n\030ModuleConfigurationValue\022\014\n\004name"
    "\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\'\n\010Property\022\014\n\004nam"
    "e\030\001 \002(\t\022\r\n\005value\030\002 \002(\t*3\n\nSchemaUnit\022\013\n\007"
    "Display\020\000\022\016\n\nMillimeter\020\001\022\010\n\004Inch\020\002*-\n\024C"
    "onnectionDirrection\022\t\n\005Input\020\000\022\n\n\006Output"
    "\020\001*)\n\rFblSignalType\022\n\n\006Analog\020\000\022\014\n\010Discr"
    "ete\020\001*:\n\rFblDataFormat\022\017\n\013UnsignedInt\020\000\022"
    "\r\n\tSignedInt\020\001\022\t\n\005Float\020\002", 6065);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialization.proto", &protobuf_RegisterTypes);
  Uuid::default_instance_ = new Uuid();
  qvariant::default_instance_ = new qvariant();
  wstring::default_instance_ = new wstring();
  FontParam::default_instance_ = new FontParam();
  SchemaPoint::default_instance_ = new SchemaPoint();
  Envelope::default_instance_ = new Envelope();
  Configuration::default_instance_ = new Configuration();
  AfbElementCollection::default_instance_ = new AfbElementCollection();
  AfbElementXml::default_instance_ = new AfbElementXml();
  FblElement::default_instance_ = new FblElement();
  AfbSignal::default_instance_ = new AfbSignal();
  AfbParam::default_instance_ = new AfbParam();
  Schema::default_instance_ = new Schema();
  LogicSchema::default_instance_ = new LogicSchema();
  SchemaLayer::default_instance_ = new SchemaLayer();
  SchemaItem::default_instance_ = new SchemaItem();
  PosRectImpl::default_instance_ = new PosRectImpl();
  PosLineImpl::default_instance_ = new PosLineImpl();
  PosConnectionImpl::default_instance_ = new PosConnectionImpl();
  SchemaItemRect::default_instance_ = new SchemaItemRect();
  SchemaItemLine::default_instance_ = new SchemaItemLine();
  SchemaItemPath::default_instance_ = new SchemaItemPath();
  FblConnectionPoint::default_instance_ = new FblConnectionPoint();
  FblItem::default_instance_ = new FblItem();
  FblItemRect::default_instance_ = new FblItemRect();
  FblItemLine::default_instance_ = new FblItemLine();
  SchemaItemSignal::default_instance_ = new SchemaItemSignal();
  SchemaItemInput::default_instance_ = new SchemaItemInput();
  SchemaItemOutput::default_instance_ = new SchemaItemOutput();
  SchemaItemLink::default_instance_ = new SchemaItemLink();
  SchemaItemAfb::default_instance_ = new SchemaItemAfb();
  SchemaItemConst::default_instance_ = new SchemaItemConst();
  DeviceObject::default_instance_ = new DeviceObject();
  DeviceRoot::default_instance_ = new DeviceRoot();
  DeviceSystem::default_instance_ = new DeviceSystem();
  DeviceRack::default_instance_ = new DeviceRack();
  DeviceChassis::default_instance_ = new DeviceChassis();
  DeviceModule::default_instance_ = new DeviceModule();
  DeviceController::default_instance_ = new DeviceController();
  DeviceSignal::default_instance_ = new DeviceSignal();
  Workstation::default_instance_ = new Workstation();
  Software::default_instance_ = new Software();
  ModuleConfiguration::default_instance_ = new ModuleConfiguration();
  ModuleConfigurationValue::default_instance_ = new ModuleConfigurationValue();
  Property::default_instance_ = new Property();
  Uuid::default_instance_->InitAsDefaultInstance();
  qvariant::default_instance_->InitAsDefaultInstance();
  wstring::default_instance_->InitAsDefaultInstance();
  FontParam::default_instance_->InitAsDefaultInstance();
  SchemaPoint::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  AfbElementCollection::default_instance_->InitAsDefaultInstance();
  AfbElementXml::default_instance_->InitAsDefaultInstance();
  FblElement::default_instance_->InitAsDefaultInstance();
  AfbSignal::default_instance_->InitAsDefaultInstance();
  AfbParam::default_instance_->InitAsDefaultInstance();
  Schema::default_instance_->InitAsDefaultInstance();
  LogicSchema::default_instance_->InitAsDefaultInstance();
  SchemaLayer::default_instance_->InitAsDefaultInstance();
  SchemaItem::default_instance_->InitAsDefaultInstance();
  PosRectImpl::default_instance_->InitAsDefaultInstance();
  PosLineImpl::default_instance_->InitAsDefaultInstance();
  PosConnectionImpl::default_instance_->InitAsDefaultInstance();
  SchemaItemRect::default_instance_->InitAsDefaultInstance();
  SchemaItemLine::default_instance_->InitAsDefaultInstance();
  SchemaItemPath::default_instance_->InitAsDefaultInstance();
  FblConnectionPoint::default_instance_->InitAsDefaultInstance();
  FblItem::default_instance_->InitAsDefaultInstance();
  FblItemRect::default_instance_->InitAsDefaultInstance();
  FblItemLine::default_instance_->InitAsDefaultInstance();
  SchemaItemSignal::default_instance_->InitAsDefaultInstance();
  SchemaItemInput::default_instance_->InitAsDefaultInstance();
  SchemaItemOutput::default_instance_->InitAsDefaultInstance();
  SchemaItemLink::default_instance_->InitAsDefaultInstance();
  SchemaItemAfb::default_instance_->InitAsDefaultInstance();
  SchemaItemConst::default_instance_->InitAsDefaultInstance();
  DeviceObject::default_instance_->InitAsDefaultInstance();
  DeviceRoot::default_instance_->InitAsDefaultInstance();
  DeviceSystem::default_instance_->InitAsDefaultInstance();
  DeviceRack::default_instance_->InitAsDefaultInstance();
  DeviceChassis::default_instance_->InitAsDefaultInstance();
  DeviceModule::default_instance_->InitAsDefaultInstance();
  DeviceController::default_instance_->InitAsDefaultInstance();
  DeviceSignal::default_instance_->InitAsDefaultInstance();
  Workstation::default_instance_->InitAsDefaultInstance();
  Software::default_instance_->InitAsDefaultInstance();
  ModuleConfiguration::default_instance_->InitAsDefaultInstance();
  ModuleConfigurationValue::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialization_2eproto {
  StaticDescriptorInitializer_serialization_2eproto() {
    protobuf_AddDesc_serialization_2eproto();
  }
} static_descriptor_initializer_serialization_2eproto_;
const ::google::protobuf::EnumDescriptor* SchemaUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaUnit_descriptor_;
}
bool SchemaUnit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionDirrection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionDirrection_descriptor_;
}
bool ConnectionDirrection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FblSignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblSignalType_descriptor_;
}
bool FblSignalType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FblDataFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblDataFormat_descriptor_;
}
bool FblDataFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Uuid::kUuidFieldNumber;
#endif  // !_MSC_VER

Uuid::Uuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Uuid::InitAsDefaultInstance() {
}

Uuid::Uuid(const Uuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Uuid::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uuid::~Uuid() {
  SharedDtor();
}

void Uuid::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void Uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uuid_descriptor_;
}

const Uuid& Uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Uuid* Uuid::default_instance_ = NULL;

Uuid* Uuid::New() const {
  return new Uuid;
}

void Uuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Uuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Uuid::Swap(Uuid* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uuid_descriptor_;
  metadata.reflection = Uuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qvariant::kTypeFieldNumber;
const int qvariant::kIntValueFieldNumber;
const int qvariant::kUintValueFieldNumber;
const int qvariant::kDoubleValueFieldNumber;
const int qvariant::kBoolValueFieldNumber;
#endif  // !_MSC_VER

qvariant::qvariant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qvariant::InitAsDefaultInstance() {
}

qvariant::qvariant(const qvariant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qvariant::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  intvalue_ = 0;
  uintvalue_ = 0u;
  doublevalue_ = 0;
  boolvalue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qvariant::~qvariant() {
  SharedDtor();
}

void qvariant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qvariant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qvariant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qvariant_descriptor_;
}

const qvariant& qvariant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

qvariant* qvariant::default_instance_ = NULL;

qvariant* qvariant::New() const {
  return new qvariant;
}

void qvariant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    intvalue_ = 0;
    uintvalue_ = 0u;
    doublevalue_ = 0;
    boolvalue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qvariant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intValue;
        break;
      }

      // optional int32 intValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uintValue;
        break;
      }

      // optional uint32 uintValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uintValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uintvalue_)));
          set_has_uintvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_doubleValue;
        break;
      }

      // optional double doubleValue = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doublevalue_)));
          set_has_doublevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boolValue;
        break;
      }

      // optional bool boolValue = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qvariant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intvalue(), output);
  }

  // optional uint32 uintValue = 3 [default = 0];
  if (has_uintvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uintvalue(), output);
  }

  // optional double doubleValue = 4 [default = 0];
  if (has_doublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->doublevalue(), output);
  }

  // optional bool boolValue = 5 [default = false];
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->boolvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qvariant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intvalue(), target);
  }

  // optional uint32 uintValue = 3 [default = 0];
  if (has_uintvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uintvalue(), target);
  }

  // optional double doubleValue = 4 [default = 0];
  if (has_doublevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->doublevalue(), target);
  }

  // optional bool boolValue = 5 [default = false];
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->boolvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qvariant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 intValue = 2 [default = 0];
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intvalue());
    }

    // optional uint32 uintValue = 3 [default = 0];
    if (has_uintvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uintvalue());
    }

    // optional double doubleValue = 4 [default = 0];
    if (has_doublevalue()) {
      total_size += 1 + 8;
    }

    // optional bool boolValue = 5 [default = false];
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qvariant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qvariant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qvariant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qvariant::MergeFrom(const qvariant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_uintvalue()) {
      set_uintvalue(from.uintvalue());
    }
    if (from.has_doublevalue()) {
      set_doublevalue(from.doublevalue());
    }
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qvariant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qvariant::CopyFrom(const qvariant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qvariant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qvariant::Swap(qvariant* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(uintvalue_, other->uintvalue_);
    std::swap(doublevalue_, other->doublevalue_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qvariant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qvariant_descriptor_;
  metadata.reflection = qvariant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wstring::kTextFieldNumber;
#endif  // !_MSC_VER

wstring::wstring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wstring::InitAsDefaultInstance() {
}

wstring::wstring(const wstring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wstring::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wstring::~wstring() {
  SharedDtor();
}

void wstring::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void wstring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wstring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wstring_descriptor_;
}

const wstring& wstring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

wstring* wstring::default_instance_ = NULL;

wstring* wstring::New() const {
  return new wstring;
}

void wstring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wstring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wstring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wstring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes text = 1;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wstring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wstring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wstring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wstring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wstring::MergeFrom(const wstring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wstring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wstring::CopyFrom(const wstring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wstring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void wstring::Swap(wstring* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wstring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wstring_descriptor_;
  metadata.reflection = wstring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FontParam::kNameFieldNumber;
const int FontParam::kSizeFieldNumber;
const int FontParam::kBoldFieldNumber;
const int FontParam::kItalicFieldNumber;
#endif  // !_MSC_VER

FontParam::FontParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontParam::InitAsDefaultInstance() {
  name_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FontParam::FontParam(const FontParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontParam::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  size_ = 0;
  bold_ = false;
  italic_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontParam::~FontParam() {
  SharedDtor();
}

void FontParam::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void FontParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontParam_descriptor_;
}

const FontParam& FontParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FontParam* FontParam::default_instance_ = NULL;

FontParam* FontParam::New() const {
  return new FontParam;
}

void FontParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::Proto::wstring::Clear();
    }
    size_ = 0;
    bold_ = false;
    italic_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_size;
        break;
      }

      // required double size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bold;
        break;
      }

      // required bool bold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_italic;
        break;
      }

      // required bool italic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }

  // required double size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->size(), output);
  }

  // required bool bold = 3;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bold(), output);
  }

  // required bool italic = 4;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->italic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }

  // required double size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->size(), target);
  }

  // required bool bold = 3;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bold(), target);
  }

  // required bool italic = 4;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->italic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

    // required double size = 2;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // required bool bold = 3;
    if (has_bold()) {
      total_size += 1 + 1;
    }

    // required bool italic = 4;
    if (has_italic()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontParam::MergeFrom(const FontParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::Proto::wstring::MergeFrom(from.name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontParam::CopyFrom(const FontParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  return true;
}

void FontParam::Swap(FontParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(size_, other->size_);
    std::swap(bold_, other->bold_);
    std::swap(italic_, other->italic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontParam_descriptor_;
  metadata.reflection = FontParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaPoint::kXFieldNumber;
const int SchemaPoint::kYFieldNumber;
#endif  // !_MSC_VER

SchemaPoint::SchemaPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaPoint::InitAsDefaultInstance() {
}

SchemaPoint::SchemaPoint(const SchemaPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaPoint::~SchemaPoint() {
  SharedDtor();
}

void SchemaPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaPoint_descriptor_;
}

const SchemaPoint& SchemaPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaPoint* SchemaPoint::default_instance_ = NULL;

SchemaPoint* SchemaPoint::New() const {
  return new SchemaPoint;
}

void SchemaPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaPoint::MergeFrom(const SchemaPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaPoint::CopyFrom(const SchemaPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaPoint::Swap(SchemaPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaPoint_descriptor_;
  metadata.reflection = SchemaPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Envelope::kClassnamehashFieldNumber;
const int Envelope::kSchemaitemFieldNumber;
const int Envelope::kDeviceobjectFieldNumber;
const int Envelope::kSchemaFieldNumber;
const int Envelope::kSchemalayerFieldNumber;
const int Envelope::kFblelementFieldNumber;
const int Envelope::kConfigurationFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  schemaitem_ = const_cast< ::Proto::SchemaItem*>(&::Proto::SchemaItem::default_instance());
  deviceobject_ = const_cast< ::Proto::DeviceObject*>(&::Proto::DeviceObject::default_instance());
  schema_ = const_cast< ::Proto::Schema*>(&::Proto::Schema::default_instance());
  schemalayer_ = const_cast< ::Proto::SchemaLayer*>(&::Proto::SchemaLayer::default_instance());
  fblelement_ = const_cast< ::Proto::FblElement*>(&::Proto::FblElement::default_instance());
  configuration_ = const_cast< ::Proto::Configuration*>(&::Proto::Configuration::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  classnamehash_ = 0u;
  schemaitem_ = NULL;
  deviceobject_ = NULL;
  schema_ = NULL;
  schemalayer_ = NULL;
  fblelement_ = NULL;
  configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete schemaitem_;
    delete deviceobject_;
    delete schema_;
    delete schemalayer_;
    delete fblelement_;
    delete configuration_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    classnamehash_ = 0u;
    if (has_schemaitem()) {
      if (schemaitem_ != NULL) schemaitem_->::Proto::SchemaItem::Clear();
    }
    if (has_deviceobject()) {
      if (deviceobject_ != NULL) deviceobject_->::Proto::DeviceObject::Clear();
    }
    if (has_schema()) {
      if (schema_ != NULL) schema_->::Proto::Schema::Clear();
    }
    if (has_schemalayer()) {
      if (schemalayer_ != NULL) schemalayer_->::Proto::SchemaLayer::Clear();
    }
    if (has_fblelement()) {
      if (fblelement_ != NULL) fblelement_->::Proto::FblElement::Clear();
    }
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::Proto::Configuration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 classnamehash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classnamehash_)));
          set_has_classnamehash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_schemaitem;
        break;
      }

      // optional .Proto.SchemaItem schemaitem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemaitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceobject;
        break;
      }

      // optional .Proto.DeviceObject deviceobject = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_schema;
        break;
      }

      // optional .Proto.Schema schema = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_schemalayer;
        break;
      }

      // optional .Proto.SchemaLayer schemalayer = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemalayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemalayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_fblelement;
        break;
      }

      // optional .Proto.FblElement fblelement = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fblelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblelement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_configuration;
        break;
      }

      // optional .Proto.Configuration configuration = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 classnamehash = 1;
  if (has_classnamehash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->classnamehash(), output);
  }

  // optional .Proto.SchemaItem schemaitem = 6;
  if (has_schemaitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->schemaitem(), output);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (has_deviceobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deviceobject(), output);
  }

  // optional .Proto.Schema schema = 100;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->schema(), output);
  }

  // optional .Proto.SchemaLayer schemalayer = 101;
  if (has_schemalayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->schemalayer(), output);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (has_fblelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->fblelement(), output);
  }

  // optional .Proto.Configuration configuration = 103;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 classnamehash = 1;
  if (has_classnamehash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->classnamehash(), target);
  }

  // optional .Proto.SchemaItem schemaitem = 6;
  if (has_schemaitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->schemaitem(), target);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (has_deviceobject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deviceobject(), target);
  }

  // optional .Proto.Schema schema = 100;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->schema(), target);
  }

  // optional .Proto.SchemaLayer schemalayer = 101;
  if (has_schemalayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->schemalayer(), target);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (has_fblelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->fblelement(), target);
  }

  // optional .Proto.Configuration configuration = 103;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 classnamehash = 1;
    if (has_classnamehash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classnamehash());
    }

    // optional .Proto.SchemaItem schemaitem = 6;
    if (has_schemaitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemaitem());
    }

    // optional .Proto.DeviceObject deviceobject = 7;
    if (has_deviceobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceobject());
    }

    // optional .Proto.Schema schema = 100;
    if (has_schema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

    // optional .Proto.SchemaLayer schemalayer = 101;
    if (has_schemalayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemalayer());
    }

    // optional .Proto.FblElement fblelement = 102;
    if (has_fblelement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblelement());
    }

    // optional .Proto.Configuration configuration = 103;
    if (has_configuration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classnamehash()) {
      set_classnamehash(from.classnamehash());
    }
    if (from.has_schemaitem()) {
      mutable_schemaitem()->::Proto::SchemaItem::MergeFrom(from.schemaitem());
    }
    if (from.has_deviceobject()) {
      mutable_deviceobject()->::Proto::DeviceObject::MergeFrom(from.deviceobject());
    }
    if (from.has_schema()) {
      mutable_schema()->::Proto::Schema::MergeFrom(from.schema());
    }
    if (from.has_schemalayer()) {
      mutable_schemalayer()->::Proto::SchemaLayer::MergeFrom(from.schemalayer());
    }
    if (from.has_fblelement()) {
      mutable_fblelement()->::Proto::FblElement::MergeFrom(from.fblelement());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::Proto::Configuration::MergeFrom(from.configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schemaitem()) {
    if (!this->schemaitem().IsInitialized()) return false;
  }
  if (has_deviceobject()) {
    if (!this->deviceobject().IsInitialized()) return false;
  }
  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  if (has_schemalayer()) {
    if (!this->schemalayer().IsInitialized()) return false;
  }
  if (has_fblelement()) {
    if (!this->fblelement().IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(classnamehash_, other->classnamehash_);
    std::swap(schemaitem_, other->schemaitem_);
    std::swap(deviceobject_, other->deviceobject_);
    std::swap(schema_, other->schema_);
    std::swap(schemalayer_, other->schemalayer_);
    std::swap(fblelement_, other->fblelement_);
    std::swap(configuration_, other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kUuidFieldNumber;
const int Configuration::kStrIDFieldNumber;
const int Configuration::kCaptionFieldNumber;
const int Configuration::kVariablesFieldNumber;
const int Configuration::kGlobalsFieldNumber;
const int Configuration::kSchemasIDsFieldNumber;
const int Configuration::kSchemasFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  variables_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  globals_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  strid_ = NULL;
  caption_ = NULL;
  variables_ = NULL;
  globals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete strid_;
    delete caption_;
    delete variables_;
    delete globals_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    if (has_variables()) {
      if (variables_ != NULL) variables_->::Proto::wstring::Clear();
    }
    if (has_globals()) {
      if (globals_ != NULL) globals_->::Proto::wstring::Clear();
    }
  }
  schemasids_.Clear();
  schemas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strID;
        break;
      }

      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variables;
        break;
      }

      // required .Proto.wstring variables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globals;
        break;
      }

      // required .Proto.wstring globals = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_schemasIDs;
        break;
      }

      // repeated .Proto.Uuid schemasIDs = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemasIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemasids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_schemasIDs;
        if (input->ExpectTag(810)) goto parse_schemas;
        break;
      }

      // repeated .Proto.Envelope schemas = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_schemas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required .Proto.wstring variables = 4;
  if (has_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variables(), output);
  }

  // required .Proto.wstring globals = 5;
  if (has_globals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->globals(), output);
  }

  // repeated .Proto.Uuid schemasIDs = 100;
  for (int i = 0; i < this->schemasids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->schemasids(i), output);
  }

  // repeated .Proto.Envelope schemas = 101;
  for (int i = 0; i < this->schemas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->schemas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required .Proto.wstring variables = 4;
  if (has_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variables(), target);
  }

  // required .Proto.wstring globals = 5;
  if (has_globals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->globals(), target);
  }

  // repeated .Proto.Uuid schemasIDs = 100;
  for (int i = 0; i < this->schemasids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->schemasids(i), target);
  }

  // repeated .Proto.Envelope schemas = 101;
  for (int i = 0; i < this->schemas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->schemas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.wstring variables = 4;
    if (has_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variables());
    }

    // required .Proto.wstring globals = 5;
    if (has_globals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globals());
    }

  }
  // repeated .Proto.Uuid schemasIDs = 100;
  total_size += 2 * this->schemasids_size();
  for (int i = 0; i < this->schemasids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemasids(i));
  }

  // repeated .Proto.Envelope schemas = 101;
  total_size += 2 * this->schemas_size();
  for (int i = 0; i < this->schemas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  schemasids_.MergeFrom(from.schemasids_);
  schemas_.MergeFrom(from.schemas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_variables()) {
      mutable_variables()->::Proto::wstring::MergeFrom(from.variables());
    }
    if (from.has_globals()) {
      mutable_globals()->::Proto::wstring::MergeFrom(from.globals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_variables()) {
    if (!this->variables().IsInitialized()) return false;
  }
  if (has_globals()) {
    if (!this->globals().IsInitialized()) return false;
  }
  for (int i = 0; i < schemasids_size(); i++) {
    if (!this->schemasids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < schemas_size(); i++) {
    if (!this->schemas(i).IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(variables_, other->variables_);
    std::swap(globals_, other->globals_);
    schemasids_.Swap(&other->schemasids_);
    schemas_.Swap(&other->schemas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbElementCollection::kElementsFieldNumber;
#endif  // !_MSC_VER

AfbElementCollection::AfbElementCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbElementCollection::InitAsDefaultInstance() {
}

AfbElementCollection::AfbElementCollection(const AfbElementCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbElementCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbElementCollection::~AfbElementCollection() {
  SharedDtor();
}

void AfbElementCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AfbElementCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbElementCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbElementCollection_descriptor_;
}

const AfbElementCollection& AfbElementCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbElementCollection* AfbElementCollection::default_instance_ = NULL;

AfbElementCollection* AfbElementCollection::New() const {
  return new AfbElementCollection;
}

void AfbElementCollection::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbElementCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AfbElementXml elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbElementCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.AfbElementXml elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbElementCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.AfbElementXml elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbElementCollection::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.AfbElementXml elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbElementCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbElementCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbElementCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbElementCollection::MergeFrom(const AfbElementCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbElementCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementCollection::CopyFrom(const AfbElementCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementCollection::IsInitialized() const {

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void AfbElementCollection::Swap(AfbElementCollection* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbElementCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbElementCollection_descriptor_;
  metadata.reflection = AfbElementCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbElementXml::kDataFieldNumber;
#endif  // !_MSC_VER

AfbElementXml::AfbElementXml()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbElementXml::InitAsDefaultInstance() {
}

AfbElementXml::AfbElementXml(const AfbElementXml& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbElementXml::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbElementXml::~AfbElementXml() {
  SharedDtor();
}

void AfbElementXml::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AfbElementXml::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbElementXml::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbElementXml_descriptor_;
}

const AfbElementXml& AfbElementXml::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbElementXml* AfbElementXml::default_instance_ = NULL;

AfbElementXml* AfbElementXml::New() const {
  return new AfbElementXml;
}

void AfbElementXml::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbElementXml::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbElementXml::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbElementXml::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbElementXml::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbElementXml::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbElementXml* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbElementXml*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbElementXml::MergeFrom(const AfbElementXml& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbElementXml::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementXml::CopyFrom(const AfbElementXml& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementXml::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AfbElementXml::Swap(AfbElementXml* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbElementXml::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbElementXml_descriptor_;
  metadata.reflection = AfbElementXml_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblElement::kStrIDFieldNumber;
const int FblElement::kCaptionFieldNumber;
const int FblElement::kOpcodeFieldNumber;
const int FblElement::kHasRamFieldNumber;
const int FblElement::kRequiredStartFieldNumber;
const int FblElement::kInputsFieldNumber;
const int FblElement::kOutputsFieldNumber;
const int FblElement::kParamsFieldNumber;
const int FblElement::kDescriptionFieldNumber;
#endif  // !_MSC_VER

FblElement::FblElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblElement::InitAsDefaultInstance() {
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  description_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FblElement::FblElement(const FblElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblElement::SharedCtor() {
  _cached_size_ = 0;
  strid_ = NULL;
  caption_ = NULL;
  opcode_ = 0u;
  hasram_ = false;
  requiredstart_ = true;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblElement::~FblElement() {
  SharedDtor();
}

void FblElement::SharedDtor() {
  if (this != default_instance_) {
    delete strid_;
    delete caption_;
    delete description_;
  }
}

void FblElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblElement_descriptor_;
}

const FblElement& FblElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblElement* FblElement::default_instance_ = NULL;

FblElement* FblElement::New() const {
  return new FblElement;
}

void FblElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    opcode_ = 0u;
    hasram_ = false;
    requiredstart_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::Proto::wstring::Clear();
    }
  }
  inputs_.Clear();
  outputs_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opcode;
        break;
      }

      // required uint32 opcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasRam;
        break;
      }

      // optional bool hasRam = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasRam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasram_)));
          set_has_hasram();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requiredStart;
        break;
      }

      // optional bool requiredStart = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requiredstart_)));
          set_has_requiredstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inputs;
        break;
      }

      // repeated .Proto.AfbSignal inputs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inputs;
        if (input->ExpectTag(98)) goto parse_outputs;
        break;
      }

      // repeated .Proto.AfbSignal outputs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_outputs;
        if (input->ExpectTag(106)) goto parse_params;
        break;
      }

      // repeated .Proto.AfbParam params = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_params;
        if (input->ExpectTag(114)) goto parse_description;
        break;
      }

      // optional .Proto.wstring description = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required uint32 opcode = 4;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opcode(), output);
  }

  // optional bool hasRam = 5 [default = false];
  if (has_hasram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasram(), output);
  }

  // optional bool requiredStart = 6 [default = true];
  if (has_requiredstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requiredstart(), output);
  }

  // repeated .Proto.AfbSignal inputs = 11;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->inputs(i), output);
  }

  // repeated .Proto.AfbSignal outputs = 12;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->outputs(i), output);
  }

  // repeated .Proto.AfbParam params = 13;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->params(i), output);
  }

  // optional .Proto.wstring description = 14;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required uint32 opcode = 4;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opcode(), target);
  }

  // optional bool hasRam = 5 [default = false];
  if (has_hasram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasram(), target);
  }

  // optional bool requiredStart = 6 [default = true];
  if (has_requiredstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requiredstart(), target);
  }

  // repeated .Proto.AfbSignal inputs = 11;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->inputs(i), target);
  }

  // repeated .Proto.AfbSignal outputs = 12;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->outputs(i), target);
  }

  // repeated .Proto.AfbParam params = 13;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->params(i), target);
  }

  // optional .Proto.wstring description = 14;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required uint32 opcode = 4;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }

    // optional bool hasRam = 5 [default = false];
    if (has_hasram()) {
      total_size += 1 + 1;
    }

    // optional bool requiredStart = 6 [default = true];
    if (has_requiredstart()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.wstring description = 14;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

  }
  // repeated .Proto.AfbSignal inputs = 11;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .Proto.AfbSignal outputs = 12;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  // repeated .Proto.AfbParam params = 13;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblElement::MergeFrom(const FblElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_hasram()) {
      set_hasram(from.hasram());
    }
    if (from.has_requiredstart()) {
      set_requiredstart(from.requiredstart());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      mutable_description()->::Proto::wstring::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblElement::CopyFrom(const FblElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  for (int i = 0; i < inputs_size(); i++) {
    if (!this->inputs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < outputs_size(); i++) {
    if (!this->outputs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

void FblElement::Swap(FblElement* other) {
  if (other != this) {
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(opcode_, other->opcode_);
    std::swap(hasram_, other->hasram_);
    std::swap(requiredstart_, other->requiredstart_);
    inputs_.Swap(&other->inputs_);
    outputs_.Swap(&other->outputs_);
    params_.Swap(&other->params_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblElement_descriptor_;
  metadata.reflection = FblElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbSignal::kCaptionFieldNumber;
const int AfbSignal::kTypeFieldNumber;
const int AfbSignal::kOperandIndexFieldNumber;
const int AfbSignal::kSizeFieldNumber;
const int AfbSignal::kOpNameFieldNumber;
const int AfbSignal::kDataFormatFieldNumber;
#endif  // !_MSC_VER

AfbSignal::AfbSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbSignal::InitAsDefaultInstance() {
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  opname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

AfbSignal::AfbSignal(const AfbSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbSignal::SharedCtor() {
  _cached_size_ = 0;
  caption_ = NULL;
  type_ = 0;
  operandindex_ = 0;
  size_ = 0;
  opname_ = NULL;
  dataformat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbSignal::~AfbSignal() {
  SharedDtor();
}

void AfbSignal::SharedDtor() {
  if (this != default_instance_) {
    delete caption_;
    delete opname_;
  }
}

void AfbSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbSignal_descriptor_;
}

const AfbSignal& AfbSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbSignal* AfbSignal::default_instance_ = NULL;

AfbSignal* AfbSignal::New() const {
  return new AfbSignal;
}

void AfbSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    type_ = 0;
    operandindex_ = 0;
    size_ = 0;
    if (has_opname()) {
      if (opname_ != NULL) opname_->::Proto::wstring::Clear();
    }
    dataformat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Proto.FblSignalType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblSignalType_IsValid(value)) {
            set_type(static_cast< ::Proto::FblSignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operandIndex;
        break;
      }

      // optional int32 operandIndex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operandIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operandindex_)));
          set_has_operandindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_opName;
        break;
      }

      // optional .Proto.wstring opName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dataFormat;
        break;
      }

      // optional .Proto.FblDataFormat dataFormat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblDataFormat_IsValid(value)) {
            set_dataformat(static_cast< ::Proto::FblDataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caption(), output);
  }

  // required .Proto.FblSignalType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 operandIndex = 3 [default = 0];
  if (has_operandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operandindex(), output);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional .Proto.wstring opName = 5;
  if (has_opname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->opname(), output);
  }

  // optional .Proto.FblDataFormat dataFormat = 6;
  if (has_dataformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->dataformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caption(), target);
  }

  // required .Proto.FblSignalType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 operandIndex = 3 [default = 0];
  if (has_operandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operandindex(), target);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional .Proto.wstring opName = 5;
  if (has_opname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->opname(), target);
  }

  // optional .Proto.FblDataFormat dataFormat = 6;
  if (has_dataformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->dataformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.FblSignalType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 operandIndex = 3 [default = 0];
    if (has_operandindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operandindex());
    }

    // optional int32 size = 4 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional .Proto.wstring opName = 5;
    if (has_opname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opname());
    }

    // optional .Proto.FblDataFormat dataFormat = 6;
    if (has_dataformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbSignal::MergeFrom(const AfbSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operandindex()) {
      set_operandindex(from.operandindex());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_opname()) {
      mutable_opname()->::Proto::wstring::MergeFrom(from.opname());
    }
    if (from.has_dataformat()) {
      set_dataformat(from.dataformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbSignal::CopyFrom(const AfbSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_opname()) {
    if (!this->opname().IsInitialized()) return false;
  }
  return true;
}

void AfbSignal::Swap(AfbSignal* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(type_, other->type_);
    std::swap(operandindex_, other->operandindex_);
    std::swap(size_, other->size_);
    std::swap(opname_, other->opname_);
    std::swap(dataformat_, other->dataformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbSignal_descriptor_;
  metadata.reflection = AfbSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbParam::kCaptionFieldNumber;
const int AfbParam::kVisibleFieldNumber;
const int AfbParam::kOperandIndexFieldNumber;
const int AfbParam::kSizeFieldNumber;
const int AfbParam::kInstantiatorFieldNumber;
const int AfbParam::kUserFieldNumber;
const int AfbParam::kChangedScriptFieldNumber;
const int AfbParam::kValueFieldNumber;
const int AfbParam::kDefaultvalueFieldNumber;
const int AfbParam::kLowlimitFieldNumber;
const int AfbParam::kHighlimitFieldNumber;
const int AfbParam::kOpNameFieldNumber;
const int AfbParam::kTypeFieldNumber;
const int AfbParam::kDataFormatFieldNumber;
#endif  // !_MSC_VER

AfbParam::AfbParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbParam::InitAsDefaultInstance() {
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  changedscript_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  value_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  defaultvalue_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  lowlimit_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  highlimit_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  opname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

AfbParam::AfbParam(const AfbParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbParam::SharedCtor() {
  _cached_size_ = 0;
  caption_ = NULL;
  visible_ = false;
  operandindex_ = 0;
  size_ = 0;
  instantiator_ = false;
  user_ = false;
  changedscript_ = NULL;
  value_ = NULL;
  defaultvalue_ = NULL;
  lowlimit_ = NULL;
  highlimit_ = NULL;
  opname_ = NULL;
  type_ = 0;
  dataformat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbParam::~AfbParam() {
  SharedDtor();
}

void AfbParam::SharedDtor() {
  if (this != default_instance_) {
    delete caption_;
    delete changedscript_;
    delete value_;
    delete defaultvalue_;
    delete lowlimit_;
    delete highlimit_;
    delete opname_;
  }
}

void AfbParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbParam_descriptor_;
}

const AfbParam& AfbParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbParam* AfbParam::default_instance_ = NULL;

AfbParam* AfbParam::New() const {
  return new AfbParam;
}

void AfbParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    visible_ = false;
    operandindex_ = 0;
    size_ = 0;
    instantiator_ = false;
    user_ = false;
    if (has_changedscript()) {
      if (changedscript_ != NULL) changedscript_->::Proto::wstring::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Proto::qvariant::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_defaultvalue()) {
      if (defaultvalue_ != NULL) defaultvalue_->::Proto::qvariant::Clear();
    }
    if (has_lowlimit()) {
      if (lowlimit_ != NULL) lowlimit_->::Proto::qvariant::Clear();
    }
    if (has_highlimit()) {
      if (highlimit_ != NULL) highlimit_->::Proto::qvariant::Clear();
    }
    if (has_opname()) {
      if (opname_ != NULL) opname_->::Proto::wstring::Clear();
    }
    type_ = 0;
    dataformat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_visible;
        break;
      }

      // required bool visible = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_operandIndex;
        break;
      }

      // optional int32 operandIndex = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operandIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operandindex_)));
          set_has_operandindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional int32 size = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_instantiator;
        break;
      }

      // optional bool instantiator = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instantiator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &instantiator_)));
          set_has_instantiator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_user;
        break;
      }

      // optional bool user = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_)));
          set_has_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_changedScript;
        break;
      }

      // optional .Proto.wstring changedScript = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changedScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changedscript()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_value;
        break;
      }

      // optional .Proto.qvariant value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_defaultvalue;
        break;
      }

      // optional .Proto.qvariant defaultvalue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_lowlimit;
        break;
      }

      // optional .Proto.qvariant lowlimit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lowlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowlimit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_highlimit;
        break;
      }

      // optional .Proto.qvariant highlimit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highlimit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_opName;
        break;
      }

      // optional .Proto.wstring opName = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_type;
        break;
      }

      // optional .Proto.FblSignalType type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblSignalType_IsValid(value)) {
            set_type(static_cast< ::Proto::FblSignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dataFormat;
        break;
      }

      // optional .Proto.FblDataFormat dataFormat = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblDataFormat_IsValid(value)) {
            set_dataformat(static_cast< ::Proto::FblDataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caption(), output);
  }

  // required bool visible = 7;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->visible(), output);
  }

  // optional int32 operandIndex = 8 [default = 0];
  if (has_operandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->operandindex(), output);
  }

  // optional int32 size = 9 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->size(), output);
  }

  // optional bool instantiator = 10 [default = false];
  if (has_instantiator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->instantiator(), output);
  }

  // optional bool user = 11 [default = false];
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->user(), output);
  }

  // optional .Proto.wstring changedScript = 12;
  if (has_changedscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->changedscript(), output);
  }

  // optional .Proto.qvariant value = 13;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->value(), output);
  }

  // optional .Proto.qvariant defaultvalue = 14;
  if (has_defaultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->defaultvalue(), output);
  }

  // optional .Proto.qvariant lowlimit = 15;
  if (has_lowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->lowlimit(), output);
  }

  // optional .Proto.qvariant highlimit = 16;
  if (has_highlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->highlimit(), output);
  }

  // optional .Proto.wstring opName = 17;
  if (has_opname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->opname(), output);
  }

  // optional .Proto.FblSignalType type = 18;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->type(), output);
  }

  // optional .Proto.FblDataFormat dataFormat = 19;
  if (has_dataformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->dataformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caption(), target);
  }

  // required bool visible = 7;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->visible(), target);
  }

  // optional int32 operandIndex = 8 [default = 0];
  if (has_operandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->operandindex(), target);
  }

  // optional int32 size = 9 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->size(), target);
  }

  // optional bool instantiator = 10 [default = false];
  if (has_instantiator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->instantiator(), target);
  }

  // optional bool user = 11 [default = false];
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->user(), target);
  }

  // optional .Proto.wstring changedScript = 12;
  if (has_changedscript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->changedscript(), target);
  }

  // optional .Proto.qvariant value = 13;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->value(), target);
  }

  // optional .Proto.qvariant defaultvalue = 14;
  if (has_defaultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->defaultvalue(), target);
  }

  // optional .Proto.qvariant lowlimit = 15;
  if (has_lowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->lowlimit(), target);
  }

  // optional .Proto.qvariant highlimit = 16;
  if (has_highlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->highlimit(), target);
  }

  // optional .Proto.wstring opName = 17;
  if (has_opname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->opname(), target);
  }

  // optional .Proto.FblSignalType type = 18;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->type(), target);
  }

  // optional .Proto.FblDataFormat dataFormat = 19;
  if (has_dataformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->dataformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required bool visible = 7;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 operandIndex = 8 [default = 0];
    if (has_operandindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operandindex());
    }

    // optional int32 size = 9 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bool instantiator = 10 [default = false];
    if (has_instantiator()) {
      total_size += 1 + 1;
    }

    // optional bool user = 11 [default = false];
    if (has_user()) {
      total_size += 1 + 1;
    }

    // optional .Proto.wstring changedScript = 12;
    if (has_changedscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changedscript());
    }

    // optional .Proto.qvariant value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.qvariant defaultvalue = 14;
    if (has_defaultvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defaultvalue());
    }

    // optional .Proto.qvariant lowlimit = 15;
    if (has_lowlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lowlimit());
    }

    // optional .Proto.qvariant highlimit = 16;
    if (has_highlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highlimit());
    }

    // optional .Proto.wstring opName = 17;
    if (has_opname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opname());
    }

    // optional .Proto.FblSignalType type = 18;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Proto.FblDataFormat dataFormat = 19;
    if (has_dataformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbParam::MergeFrom(const AfbParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_operandindex()) {
      set_operandindex(from.operandindex());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_instantiator()) {
      set_instantiator(from.instantiator());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_changedscript()) {
      mutable_changedscript()->::Proto::wstring::MergeFrom(from.changedscript());
    }
    if (from.has_value()) {
      mutable_value()->::Proto::qvariant::MergeFrom(from.value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defaultvalue()) {
      mutable_defaultvalue()->::Proto::qvariant::MergeFrom(from.defaultvalue());
    }
    if (from.has_lowlimit()) {
      mutable_lowlimit()->::Proto::qvariant::MergeFrom(from.lowlimit());
    }
    if (from.has_highlimit()) {
      mutable_highlimit()->::Proto::qvariant::MergeFrom(from.highlimit());
    }
    if (from.has_opname()) {
      mutable_opname()->::Proto::wstring::MergeFrom(from.opname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dataformat()) {
      set_dataformat(from.dataformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbParam::CopyFrom(const AfbParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_changedscript()) {
    if (!this->changedscript().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  if (has_defaultvalue()) {
    if (!this->defaultvalue().IsInitialized()) return false;
  }
  if (has_lowlimit()) {
    if (!this->lowlimit().IsInitialized()) return false;
  }
  if (has_highlimit()) {
    if (!this->highlimit().IsInitialized()) return false;
  }
  if (has_opname()) {
    if (!this->opname().IsInitialized()) return false;
  }
  return true;
}

void AfbParam::Swap(AfbParam* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(visible_, other->visible_);
    std::swap(operandindex_, other->operandindex_);
    std::swap(size_, other->size_);
    std::swap(instantiator_, other->instantiator_);
    std::swap(user_, other->user_);
    std::swap(changedscript_, other->changedscript_);
    std::swap(value_, other->value_);
    std::swap(defaultvalue_, other->defaultvalue_);
    std::swap(lowlimit_, other->lowlimit_);
    std::swap(highlimit_, other->highlimit_);
    std::swap(opname_, other->opname_);
    std::swap(type_, other->type_);
    std::swap(dataformat_, other->dataformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbParam_descriptor_;
  metadata.reflection = AfbParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Schema::kUuidFieldNumber;
const int Schema::kSchemaIDFieldNumber;
const int Schema::kCaptionFieldNumber;
const int Schema::kWidthFieldNumber;
const int Schema::kHeightFieldNumber;
const int Schema::kUnitFieldNumber;
const int Schema::kExcludeFromBuildFieldNumber;
const int Schema::kLayersFieldNumber;
const int Schema::kAfbsFieldNumber;
const int Schema::kLogicSchemaFieldNumber;
#endif  // !_MSC_VER

Schema::Schema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Schema::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  schemaid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  afbs_ = const_cast< ::Proto::AfbElementCollection*>(&::Proto::AfbElementCollection::default_instance());
  logic_schema_ = const_cast< ::Proto::LogicSchema*>(&::Proto::LogicSchema::default_instance());
}

Schema::Schema(const Schema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Schema::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  schemaid_ = NULL;
  caption_ = NULL;
  width_ = 0;
  height_ = 0;
  unit_ = 0;
  excludefrombuild_ = false;
  afbs_ = NULL;
  logic_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schema::~Schema() {
  SharedDtor();
}

void Schema::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete schemaid_;
    delete caption_;
    delete afbs_;
    delete logic_schema_;
  }
}

void Schema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schema_descriptor_;
}

const Schema& Schema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Schema* Schema::default_instance_ = NULL;

Schema* Schema::New() const {
  return new Schema;
}

void Schema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_schemaid()) {
      if (schemaid_ != NULL) schemaid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    width_ = 0;
    height_ = 0;
    unit_ = 0;
    excludefrombuild_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_afbs()) {
      if (afbs_ != NULL) afbs_->::Proto::AfbElementCollection::Clear();
    }
    if (has_logic_schema()) {
      if (logic_schema_ != NULL) logic_schema_->::Proto::LogicSchema::Clear();
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schemaID;
        break;
      }

      // required .Proto.wstring schemaID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_width;
        break;
      }

      // required double width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // required double height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unit;
        break;
      }

      // required .Proto.SchemaUnit unit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::SchemaUnit_IsValid(value)) {
            set_unit(static_cast< ::Proto::SchemaUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_excludeFromBuild;
        break;
      }

      // optional bool excludeFromBuild = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludeFromBuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excludefrombuild_)));
          set_has_excludefrombuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_layers;
        break;
      }

      // repeated .Proto.Envelope layers = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_layers;
        if (input->ExpectTag(810)) goto parse_afbs;
        break;
      }

      // required .Proto.AfbElementCollection afbs = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_logic_schema;
        break;
      }

      // optional .Proto.LogicSchema logic_schema = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logic_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring schemaID = 2;
  if (has_schemaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schemaid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required double width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->width(), output);
  }

  // required double height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // required .Proto.SchemaUnit unit = 6;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->unit(), output);
  }

  // optional bool excludeFromBuild = 7 [default = false];
  if (has_excludefrombuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->excludefrombuild(), output);
  }

  // repeated .Proto.Envelope layers = 100;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layers(i), output);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (has_afbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->afbs(), output);
  }

  // optional .Proto.LogicSchema logic_schema = 200;
  if (has_logic_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->logic_schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Schema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring schemaID = 2;
  if (has_schemaid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schemaid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required double width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->width(), target);
  }

  // required double height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // required .Proto.SchemaUnit unit = 6;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->unit(), target);
  }

  // optional bool excludeFromBuild = 7 [default = false];
  if (has_excludefrombuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->excludefrombuild(), target);
  }

  // repeated .Proto.Envelope layers = 100;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->layers(i), target);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (has_afbs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->afbs(), target);
  }

  // optional .Proto.LogicSchema logic_schema = 200;
  if (has_logic_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->logic_schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Schema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring schemaID = 2;
    if (has_schemaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemaid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required double width = 4;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required double height = 5;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required .Proto.SchemaUnit unit = 6;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

    // optional bool excludeFromBuild = 7 [default = false];
    if (has_excludefrombuild()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Proto.AfbElementCollection afbs = 101;
    if (has_afbs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbs());
    }

    // optional .Proto.LogicSchema logic_schema = 200;
    if (has_logic_schema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logic_schema());
    }

  }
  // repeated .Proto.Envelope layers = 100;
  total_size += 2 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_schemaid()) {
      mutable_schemaid()->::Proto::wstring::MergeFrom(from.schemaid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_excludefrombuild()) {
      set_excludefrombuild(from.excludefrombuild());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_afbs()) {
      mutable_afbs()->::Proto::AfbElementCollection::MergeFrom(from.afbs());
    }
    if (from.has_logic_schema()) {
      mutable_logic_schema()->::Proto::LogicSchema::MergeFrom(from.logic_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_schemaid()) {
    if (!this->schemaid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  if (has_afbs()) {
    if (!this->afbs().IsInitialized()) return false;
  }
  if (has_logic_schema()) {
    if (!this->logic_schema().IsInitialized()) return false;
  }
  return true;
}

void Schema::Swap(Schema* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(schemaid_, other->schemaid_);
    std::swap(caption_, other->caption_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(unit_, other->unit_);
    std::swap(excludefrombuild_, other->excludefrombuild_);
    layers_.Swap(&other->layers_);
    std::swap(afbs_, other->afbs_);
    std::swap(logic_schema_, other->logic_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schema_descriptor_;
  metadata.reflection = Schema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicSchema::kEquipmentidsFieldNumber;
const int LogicSchema::kCounterFieldNumber;
#endif  // !_MSC_VER

LogicSchema::LogicSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicSchema::InitAsDefaultInstance() {
}

LogicSchema::LogicSchema(const LogicSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicSchema::SharedCtor() {
  _cached_size_ = 0;
  counter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicSchema::~LogicSchema() {
  SharedDtor();
}

void LogicSchema::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicSchema_descriptor_;
}

const LogicSchema& LogicSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

LogicSchema* LogicSchema::default_instance_ = NULL;

LogicSchema* LogicSchema::New() const {
  return new LogicSchema;
}

void LogicSchema::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    counter_ = 0;
  }
  equipmentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.wstring equipmentids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmentids;
        if (input->ExpectTag(16)) goto parse_counter;
        break;
      }

      // optional int32 counter = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.wstring equipmentids = 1;
  for (int i = 0; i < this->equipmentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmentids(i), output);
  }

  // optional int32 counter = 2 [default = 0];
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.wstring equipmentids = 1;
  for (int i = 0; i < this->equipmentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmentids(i), target);
  }

  // optional int32 counter = 2 [default = 0];
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 counter = 2 [default = 0];
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter());
    }

  }
  // repeated .Proto.wstring equipmentids = 1;
  total_size += 1 * this->equipmentids_size();
  for (int i = 0; i < this->equipmentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicSchema::MergeFrom(const LogicSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentids_.MergeFrom(from.equipmentids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_counter()) {
      set_counter(from.counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicSchema::CopyFrom(const LogicSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicSchema::IsInitialized() const {

  for (int i = 0; i < equipmentids_size(); i++) {
    if (!this->equipmentids(i).IsInitialized()) return false;
  }
  return true;
}

void LogicSchema::Swap(LogicSchema* other) {
  if (other != this) {
    equipmentids_.Swap(&other->equipmentids_);
    std::swap(counter_, other->counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicSchema_descriptor_;
  metadata.reflection = LogicSchema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaLayer::kUuidFieldNumber;
const int SchemaLayer::kNameFieldNumber;
const int SchemaLayer::kCompileFieldNumber;
const int SchemaLayer::kShowFieldNumber;
const int SchemaLayer::kPrintFieldNumber;
const int SchemaLayer::kItemsFieldNumber;
#endif  // !_MSC_VER

SchemaLayer::SchemaLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaLayer::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  name_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

SchemaLayer::SchemaLayer(const SchemaLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaLayer::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  name_ = NULL;
  compile_ = false;
  show_ = false;
  print_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaLayer::~SchemaLayer() {
  SharedDtor();
}

void SchemaLayer::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete name_;
  }
}

void SchemaLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaLayer_descriptor_;
}

const SchemaLayer& SchemaLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaLayer* SchemaLayer::default_instance_ = NULL;

SchemaLayer* SchemaLayer::New() const {
  return new SchemaLayer;
}

void SchemaLayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_name()) {
      if (name_ != NULL) name_->::Proto::wstring::Clear();
    }
    compile_ = false;
    show_ = false;
    print_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required .Proto.wstring name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compile;
        break;
      }

      // required bool compile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compile_)));
          set_has_compile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show;
        break;
      }

      // required bool show = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_print;
        break;
      }

      // required bool print = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_)));
          set_has_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        break;
      }

      // repeated .Proto.Envelope items = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name(), output);
  }

  // required bool compile = 3;
  if (has_compile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compile(), output);
  }

  // required bool show = 4;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show(), output);
  }

  // required bool print = 5;
  if (has_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->print(), output);
  }

  // repeated .Proto.Envelope items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name(), target);
  }

  // required bool compile = 3;
  if (has_compile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compile(), target);
  }

  // required bool show = 4;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show(), target);
  }

  // required bool print = 5;
  if (has_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->print(), target);
  }

  // repeated .Proto.Envelope items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

    // required bool compile = 3;
    if (has_compile()) {
      total_size += 1 + 1;
    }

    // required bool show = 4;
    if (has_show()) {
      total_size += 1 + 1;
    }

    // required bool print = 5;
    if (has_print()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Proto.Envelope items = 15;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaLayer::MergeFrom(const SchemaLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_name()) {
      mutable_name()->::Proto::wstring::MergeFrom(from.name());
    }
    if (from.has_compile()) {
      set_compile(from.compile());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_print()) {
      set_print(from.print());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaLayer::CopyFrom(const SchemaLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaLayer::Swap(SchemaLayer* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(name_, other->name_);
    std::swap(compile_, other->compile_);
    std::swap(show_, other->show_);
    std::swap(print_, other->print_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaLayer_descriptor_;
  metadata.reflection = SchemaLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItem::kUuidFieldNumber;
const int SchemaItem::kIsStaticFieldNumber;
const int SchemaItem::kIsLockedFieldNumber;
const int SchemaItem::kItemUnitFieldNumber;
const int SchemaItem::kAcceptClickFieldNumber;
const int SchemaItem::kClickScriptFieldNumber;
const int SchemaItem::kPosRectImplFieldNumber;
const int SchemaItem::kPosLineImplFieldNumber;
const int SchemaItem::kPosConnectionImplFieldNumber;
const int SchemaItem::kFblItemFieldNumber;
const int SchemaItem::kFblItemRectFieldNumber;
const int SchemaItem::kFblItemLineFieldNumber;
const int SchemaItem::kRectFieldNumber;
const int SchemaItem::kLineFieldNumber;
const int SchemaItem::kPathFieldNumber;
const int SchemaItem::kSignalFieldNumber;
const int SchemaItem::kInputSignalFieldNumber;
const int SchemaItem::kOutputSignalFieldNumber;
const int SchemaItem::kLinkFieldNumber;
const int SchemaItem::kAfbFieldNumber;
const int SchemaItem::kConstItemFieldNumber;
#endif  // !_MSC_VER

SchemaItem::SchemaItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItem::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  clickscript_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  posrectimpl_ = const_cast< ::Proto::PosRectImpl*>(&::Proto::PosRectImpl::default_instance());
  poslineimpl_ = const_cast< ::Proto::PosLineImpl*>(&::Proto::PosLineImpl::default_instance());
  posconnectionimpl_ = const_cast< ::Proto::PosConnectionImpl*>(&::Proto::PosConnectionImpl::default_instance());
  fblitem_ = const_cast< ::Proto::FblItem*>(&::Proto::FblItem::default_instance());
  fblitemrect_ = const_cast< ::Proto::FblItemRect*>(&::Proto::FblItemRect::default_instance());
  fblitemline_ = const_cast< ::Proto::FblItemLine*>(&::Proto::FblItemLine::default_instance());
  rect_ = const_cast< ::Proto::SchemaItemRect*>(&::Proto::SchemaItemRect::default_instance());
  line_ = const_cast< ::Proto::SchemaItemLine*>(&::Proto::SchemaItemLine::default_instance());
  path_ = const_cast< ::Proto::SchemaItemPath*>(&::Proto::SchemaItemPath::default_instance());
  signal_ = const_cast< ::Proto::SchemaItemSignal*>(&::Proto::SchemaItemSignal::default_instance());
  inputsignal_ = const_cast< ::Proto::SchemaItemInput*>(&::Proto::SchemaItemInput::default_instance());
  outputsignal_ = const_cast< ::Proto::SchemaItemOutput*>(&::Proto::SchemaItemOutput::default_instance());
  link_ = const_cast< ::Proto::SchemaItemLink*>(&::Proto::SchemaItemLink::default_instance());
  afb_ = const_cast< ::Proto::SchemaItemAfb*>(&::Proto::SchemaItemAfb::default_instance());
  constitem_ = const_cast< ::Proto::SchemaItemConst*>(&::Proto::SchemaItemConst::default_instance());
}

SchemaItem::SchemaItem(const SchemaItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  isstatic_ = false;
  islocked_ = false;
  itemunit_ = 0;
  acceptclick_ = false;
  clickscript_ = NULL;
  posrectimpl_ = NULL;
  poslineimpl_ = NULL;
  posconnectionimpl_ = NULL;
  fblitem_ = NULL;
  fblitemrect_ = NULL;
  fblitemline_ = NULL;
  rect_ = NULL;
  line_ = NULL;
  path_ = NULL;
  signal_ = NULL;
  inputsignal_ = NULL;
  outputsignal_ = NULL;
  link_ = NULL;
  afb_ = NULL;
  constitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItem::~SchemaItem() {
  SharedDtor();
}

void SchemaItem::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete clickscript_;
    delete posrectimpl_;
    delete poslineimpl_;
    delete posconnectionimpl_;
    delete fblitem_;
    delete fblitemrect_;
    delete fblitemline_;
    delete rect_;
    delete line_;
    delete path_;
    delete signal_;
    delete inputsignal_;
    delete outputsignal_;
    delete link_;
    delete afb_;
    delete constitem_;
  }
}

void SchemaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItem_descriptor_;
}

const SchemaItem& SchemaItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItem* SchemaItem::default_instance_ = NULL;

SchemaItem* SchemaItem::New() const {
  return new SchemaItem;
}

void SchemaItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    isstatic_ = false;
    islocked_ = false;
    itemunit_ = 0;
    acceptclick_ = false;
    if (has_clickscript()) {
      if (clickscript_ != NULL) clickscript_->::Proto::wstring::Clear();
    }
    if (has_posrectimpl()) {
      if (posrectimpl_ != NULL) posrectimpl_->::Proto::PosRectImpl::Clear();
    }
    if (has_poslineimpl()) {
      if (poslineimpl_ != NULL) poslineimpl_->::Proto::PosLineImpl::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_posconnectionimpl()) {
      if (posconnectionimpl_ != NULL) posconnectionimpl_->::Proto::PosConnectionImpl::Clear();
    }
    if (has_fblitem()) {
      if (fblitem_ != NULL) fblitem_->::Proto::FblItem::Clear();
    }
    if (has_fblitemrect()) {
      if (fblitemrect_ != NULL) fblitemrect_->::Proto::FblItemRect::Clear();
    }
    if (has_fblitemline()) {
      if (fblitemline_ != NULL) fblitemline_->::Proto::FblItemLine::Clear();
    }
    if (has_rect()) {
      if (rect_ != NULL) rect_->::Proto::SchemaItemRect::Clear();
    }
    if (has_line()) {
      if (line_ != NULL) line_->::Proto::SchemaItemLine::Clear();
    }
    if (has_path()) {
      if (path_ != NULL) path_->::Proto::SchemaItemPath::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::Proto::SchemaItemSignal::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_inputsignal()) {
      if (inputsignal_ != NULL) inputsignal_->::Proto::SchemaItemInput::Clear();
    }
    if (has_outputsignal()) {
      if (outputsignal_ != NULL) outputsignal_->::Proto::SchemaItemOutput::Clear();
    }
    if (has_link()) {
      if (link_ != NULL) link_->::Proto::SchemaItemLink::Clear();
    }
    if (has_afb()) {
      if (afb_ != NULL) afb_->::Proto::SchemaItemAfb::Clear();
    }
    if (has_constitem()) {
      if (constitem_ != NULL) constitem_->::Proto::SchemaItemConst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isStatic;
        break;
      }

      // required bool isStatic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstatic_)));
          set_has_isstatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isLocked;
        break;
      }

      // required bool isLocked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemUnit;
        break;
      }

      // required .Proto.SchemaUnit itemUnit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemUnit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::SchemaUnit_IsValid(value)) {
            set_itemunit(static_cast< ::Proto::SchemaUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_acceptClick;
        break;
      }

      // optional bool acceptClick = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptClick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceptclick_)));
          set_has_acceptclick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clickScript;
        break;
      }

      // optional .Proto.wstring clickScript = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clickScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clickscript()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_PosRectImpl;
        break;
      }

      // optional .Proto.PosRectImpl PosRectImpl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosRectImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posrectimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PosLineImpl;
        break;
      }

      // optional .Proto.PosLineImpl PosLineImpl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosLineImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poslineimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_PosConnectionImpl;
        break;
      }

      // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosConnectionImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posconnectionimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_FblItem;
        break;
      }

      // optional .Proto.FblItem FblItem = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_FblItemRect;
        break;
      }

      // optional .Proto.FblItemRect FblItemRect = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItemRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitemrect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_FblItemLine;
        break;
      }

      // optional .Proto.FblItemLine FblItemLine = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItemLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitemline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(930)) goto parse_Rect;
        break;
      }

      // optional .Proto.SchemaItemRect Rect = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_Line;
        break;
      }

      // optional .Proto.SchemaItemLine Line = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(946)) goto parse_Path;
        break;
      }

      // optional .Proto.SchemaItemPath Path = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(994)) goto parse_Signal;
        break;
      }

      // optional .Proto.SchemaItemSignal Signal = 124;
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1002)) goto parse_InputSignal;
        break;
      }

      // optional .Proto.SchemaItemInput InputSignal = 125;
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InputSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inputsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1010)) goto parse_OutputSignal;
        break;
      }

      // optional .Proto.SchemaItemOutput OutputSignal = 126;
      case 126: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OutputSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outputsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1018)) goto parse_Link;
        break;
      }

      // optional .Proto.SchemaItemLink Link = 127;
      case 127: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1026)) goto parse_Afb;
        break;
      }

      // optional .Proto.SchemaItemAfb Afb = 128;
      case 128: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Afb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_ConstItem;
        break;
      }

      // optional .Proto.SchemaItemConst ConstItem = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required bool isStatic = 2;
  if (has_isstatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstatic(), output);
  }

  // required bool isLocked = 3;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islocked(), output);
  }

  // required .Proto.SchemaUnit itemUnit = 4;
  if (has_itemunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->itemunit(), output);
  }

  // optional bool acceptClick = 5 [default = false];
  if (has_acceptclick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->acceptclick(), output);
  }

  // optional .Proto.wstring clickScript = 6;
  if (has_clickscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->clickscript(), output);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (has_posrectimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->posrectimpl(), output);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (has_poslineimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->poslineimpl(), output);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (has_posconnectionimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->posconnectionimpl(), output);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (has_fblitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->fblitem(), output);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (has_fblitemrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->fblitemrect(), output);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (has_fblitemline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->fblitemline(), output);
  }

  // optional .Proto.SchemaItemRect Rect = 116;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->rect(), output);
  }

  // optional .Proto.SchemaItemLine Line = 117;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->line(), output);
  }

  // optional .Proto.SchemaItemPath Path = 118;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, this->path(), output);
  }

  // optional .Proto.SchemaItemSignal Signal = 124;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, this->signal(), output);
  }

  // optional .Proto.SchemaItemInput InputSignal = 125;
  if (has_inputsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, this->inputsignal(), output);
  }

  // optional .Proto.SchemaItemOutput OutputSignal = 126;
  if (has_outputsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, this->outputsignal(), output);
  }

  // optional .Proto.SchemaItemLink Link = 127;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, this->link(), output);
  }

  // optional .Proto.SchemaItemAfb Afb = 128;
  if (has_afb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, this->afb(), output);
  }

  // optional .Proto.SchemaItemConst ConstItem = 129;
  if (has_constitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, this->constitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required bool isStatic = 2;
  if (has_isstatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstatic(), target);
  }

  // required bool isLocked = 3;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islocked(), target);
  }

  // required .Proto.SchemaUnit itemUnit = 4;
  if (has_itemunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->itemunit(), target);
  }

  // optional bool acceptClick = 5 [default = false];
  if (has_acceptclick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->acceptclick(), target);
  }

  // optional .Proto.wstring clickScript = 6;
  if (has_clickscript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->clickscript(), target);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (has_posrectimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->posrectimpl(), target);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (has_poslineimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->poslineimpl(), target);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (has_posconnectionimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->posconnectionimpl(), target);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (has_fblitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->fblitem(), target);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (has_fblitemrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->fblitemrect(), target);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (has_fblitemline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->fblitemline(), target);
  }

  // optional .Proto.SchemaItemRect Rect = 116;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->rect(), target);
  }

  // optional .Proto.SchemaItemLine Line = 117;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->line(), target);
  }

  // optional .Proto.SchemaItemPath Path = 118;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->path(), target);
  }

  // optional .Proto.SchemaItemSignal Signal = 124;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, this->signal(), target);
  }

  // optional .Proto.SchemaItemInput InputSignal = 125;
  if (has_inputsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        125, this->inputsignal(), target);
  }

  // optional .Proto.SchemaItemOutput OutputSignal = 126;
  if (has_outputsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        126, this->outputsignal(), target);
  }

  // optional .Proto.SchemaItemLink Link = 127;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        127, this->link(), target);
  }

  // optional .Proto.SchemaItemAfb Afb = 128;
  if (has_afb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, this->afb(), target);
  }

  // optional .Proto.SchemaItemConst ConstItem = 129;
  if (has_constitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        129, this->constitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required bool isStatic = 2;
    if (has_isstatic()) {
      total_size += 1 + 1;
    }

    // required bool isLocked = 3;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required .Proto.SchemaUnit itemUnit = 4;
    if (has_itemunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemunit());
    }

    // optional bool acceptClick = 5 [default = false];
    if (has_acceptclick()) {
      total_size += 1 + 1;
    }

    // optional .Proto.wstring clickScript = 6;
    if (has_clickscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clickscript());
    }

    // optional .Proto.PosRectImpl PosRectImpl = 10;
    if (has_posrectimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posrectimpl());
    }

    // optional .Proto.PosLineImpl PosLineImpl = 11;
    if (has_poslineimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poslineimpl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
    if (has_posconnectionimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posconnectionimpl());
    }

    // optional .Proto.FblItem FblItem = 106;
    if (has_fblitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitem());
    }

    // optional .Proto.FblItemRect FblItemRect = 107;
    if (has_fblitemrect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitemrect());
    }

    // optional .Proto.FblItemLine FblItemLine = 108;
    if (has_fblitemline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitemline());
    }

    // optional .Proto.SchemaItemRect Rect = 116;
    if (has_rect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // optional .Proto.SchemaItemLine Line = 117;
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional .Proto.SchemaItemPath Path = 118;
    if (has_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

    // optional .Proto.SchemaItemSignal Signal = 124;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Proto.SchemaItemInput InputSignal = 125;
    if (has_inputsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputsignal());
    }

    // optional .Proto.SchemaItemOutput OutputSignal = 126;
    if (has_outputsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputsignal());
    }

    // optional .Proto.SchemaItemLink Link = 127;
    if (has_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link());
    }

    // optional .Proto.SchemaItemAfb Afb = 128;
    if (has_afb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afb());
    }

    // optional .Proto.SchemaItemConst ConstItem = 129;
    if (has_constitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItem::MergeFrom(const SchemaItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_isstatic()) {
      set_isstatic(from.isstatic());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_itemunit()) {
      set_itemunit(from.itemunit());
    }
    if (from.has_acceptclick()) {
      set_acceptclick(from.acceptclick());
    }
    if (from.has_clickscript()) {
      mutable_clickscript()->::Proto::wstring::MergeFrom(from.clickscript());
    }
    if (from.has_posrectimpl()) {
      mutable_posrectimpl()->::Proto::PosRectImpl::MergeFrom(from.posrectimpl());
    }
    if (from.has_poslineimpl()) {
      mutable_poslineimpl()->::Proto::PosLineImpl::MergeFrom(from.poslineimpl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posconnectionimpl()) {
      mutable_posconnectionimpl()->::Proto::PosConnectionImpl::MergeFrom(from.posconnectionimpl());
    }
    if (from.has_fblitem()) {
      mutable_fblitem()->::Proto::FblItem::MergeFrom(from.fblitem());
    }
    if (from.has_fblitemrect()) {
      mutable_fblitemrect()->::Proto::FblItemRect::MergeFrom(from.fblitemrect());
    }
    if (from.has_fblitemline()) {
      mutable_fblitemline()->::Proto::FblItemLine::MergeFrom(from.fblitemline());
    }
    if (from.has_rect()) {
      mutable_rect()->::Proto::SchemaItemRect::MergeFrom(from.rect());
    }
    if (from.has_line()) {
      mutable_line()->::Proto::SchemaItemLine::MergeFrom(from.line());
    }
    if (from.has_path()) {
      mutable_path()->::Proto::SchemaItemPath::MergeFrom(from.path());
    }
    if (from.has_signal()) {
      mutable_signal()->::Proto::SchemaItemSignal::MergeFrom(from.signal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inputsignal()) {
      mutable_inputsignal()->::Proto::SchemaItemInput::MergeFrom(from.inputsignal());
    }
    if (from.has_outputsignal()) {
      mutable_outputsignal()->::Proto::SchemaItemOutput::MergeFrom(from.outputsignal());
    }
    if (from.has_link()) {
      mutable_link()->::Proto::SchemaItemLink::MergeFrom(from.link());
    }
    if (from.has_afb()) {
      mutable_afb()->::Proto::SchemaItemAfb::MergeFrom(from.afb());
    }
    if (from.has_constitem()) {
      mutable_constitem()->::Proto::SchemaItemConst::MergeFrom(from.constitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItem::CopyFrom(const SchemaItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_clickscript()) {
    if (!this->clickscript().IsInitialized()) return false;
  }
  if (has_posrectimpl()) {
    if (!this->posrectimpl().IsInitialized()) return false;
  }
  if (has_poslineimpl()) {
    if (!this->poslineimpl().IsInitialized()) return false;
  }
  if (has_posconnectionimpl()) {
    if (!this->posconnectionimpl().IsInitialized()) return false;
  }
  if (has_fblitem()) {
    if (!this->fblitem().IsInitialized()) return false;
  }
  if (has_fblitemrect()) {
    if (!this->fblitemrect().IsInitialized()) return false;
  }
  if (has_fblitemline()) {
    if (!this->fblitemline().IsInitialized()) return false;
  }
  if (has_rect()) {
    if (!this->rect().IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal().IsInitialized()) return false;
  }
  if (has_afb()) {
    if (!this->afb().IsInitialized()) return false;
  }
  return true;
}

void SchemaItem::Swap(SchemaItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(isstatic_, other->isstatic_);
    std::swap(islocked_, other->islocked_);
    std::swap(itemunit_, other->itemunit_);
    std::swap(acceptclick_, other->acceptclick_);
    std::swap(clickscript_, other->clickscript_);
    std::swap(posrectimpl_, other->posrectimpl_);
    std::swap(poslineimpl_, other->poslineimpl_);
    std::swap(posconnectionimpl_, other->posconnectionimpl_);
    std::swap(fblitem_, other->fblitem_);
    std::swap(fblitemrect_, other->fblitemrect_);
    std::swap(fblitemline_, other->fblitemline_);
    std::swap(rect_, other->rect_);
    std::swap(line_, other->line_);
    std::swap(path_, other->path_);
    std::swap(signal_, other->signal_);
    std::swap(inputsignal_, other->inputsignal_);
    std::swap(outputsignal_, other->outputsignal_);
    std::swap(link_, other->link_);
    std::swap(afb_, other->afb_);
    std::swap(constitem_, other->constitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItem_descriptor_;
  metadata.reflection = SchemaItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosRectImpl::kLeftDocPtFieldNumber;
const int PosRectImpl::kTopDocPtFieldNumber;
const int PosRectImpl::kWidthDocPtFieldNumber;
const int PosRectImpl::kHeightDocPtFieldNumber;
#endif  // !_MSC_VER

PosRectImpl::PosRectImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosRectImpl::InitAsDefaultInstance() {
}

PosRectImpl::PosRectImpl(const PosRectImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosRectImpl::SharedCtor() {
  _cached_size_ = 0;
  leftdocpt_ = 0;
  topdocpt_ = 0;
  widthdocpt_ = 0;
  heightdocpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosRectImpl::~PosRectImpl() {
  SharedDtor();
}

void PosRectImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosRectImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosRectImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosRectImpl_descriptor_;
}

const PosRectImpl& PosRectImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosRectImpl* PosRectImpl::default_instance_ = NULL;

PosRectImpl* PosRectImpl::New() const {
  return new PosRectImpl;
}

void PosRectImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftdocpt_ = 0;
    topdocpt_ = 0;
    widthdocpt_ = 0;
    heightdocpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosRectImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double leftDocPt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftdocpt_)));
          set_has_leftdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_topDocPt;
        break;
      }

      // required double topDocPt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_topDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topdocpt_)));
          set_has_topdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_widthDocPt;
        break;
      }

      // required double widthDocPt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_widthDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthdocpt_)));
          set_has_widthdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_heightDocPt;
        break;
      }

      // required double heightDocPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heightDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heightdocpt_)));
          set_has_heightdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosRectImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double leftDocPt = 1;
  if (has_leftdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->leftdocpt(), output);
  }

  // required double topDocPt = 2;
  if (has_topdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->topdocpt(), output);
  }

  // required double widthDocPt = 3;
  if (has_widthdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->widthdocpt(), output);
  }

  // required double heightDocPt = 4;
  if (has_heightdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heightdocpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosRectImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double leftDocPt = 1;
  if (has_leftdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->leftdocpt(), target);
  }

  // required double topDocPt = 2;
  if (has_topdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->topdocpt(), target);
  }

  // required double widthDocPt = 3;
  if (has_widthdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->widthdocpt(), target);
  }

  // required double heightDocPt = 4;
  if (has_heightdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heightdocpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosRectImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double leftDocPt = 1;
    if (has_leftdocpt()) {
      total_size += 1 + 8;
    }

    // required double topDocPt = 2;
    if (has_topdocpt()) {
      total_size += 1 + 8;
    }

    // required double widthDocPt = 3;
    if (has_widthdocpt()) {
      total_size += 1 + 8;
    }

    // required double heightDocPt = 4;
    if (has_heightdocpt()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosRectImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosRectImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosRectImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosRectImpl::MergeFrom(const PosRectImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftdocpt()) {
      set_leftdocpt(from.leftdocpt());
    }
    if (from.has_topdocpt()) {
      set_topdocpt(from.topdocpt());
    }
    if (from.has_widthdocpt()) {
      set_widthdocpt(from.widthdocpt());
    }
    if (from.has_heightdocpt()) {
      set_heightdocpt(from.heightdocpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosRectImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosRectImpl::CopyFrom(const PosRectImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosRectImpl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PosRectImpl::Swap(PosRectImpl* other) {
  if (other != this) {
    std::swap(leftdocpt_, other->leftdocpt_);
    std::swap(topdocpt_, other->topdocpt_);
    std::swap(widthdocpt_, other->widthdocpt_);
    std::swap(heightdocpt_, other->heightdocpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosRectImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosRectImpl_descriptor_;
  metadata.reflection = PosRectImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosLineImpl::kStartXDocPtFieldNumber;
const int PosLineImpl::kStartYDocPtFieldNumber;
const int PosLineImpl::kEndXDocPtFieldNumber;
const int PosLineImpl::kEndYDocPtFieldNumber;
#endif  // !_MSC_VER

PosLineImpl::PosLineImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosLineImpl::InitAsDefaultInstance() {
}

PosLineImpl::PosLineImpl(const PosLineImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosLineImpl::SharedCtor() {
  _cached_size_ = 0;
  startxdocpt_ = 0;
  startydocpt_ = 0;
  endxdocpt_ = 0;
  endydocpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosLineImpl::~PosLineImpl() {
  SharedDtor();
}

void PosLineImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosLineImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosLineImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosLineImpl_descriptor_;
}

const PosLineImpl& PosLineImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosLineImpl* PosLineImpl::default_instance_ = NULL;

PosLineImpl* PosLineImpl::New() const {
  return new PosLineImpl;
}

void PosLineImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startxdocpt_ = 0;
    startydocpt_ = 0;
    endxdocpt_ = 0;
    endydocpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosLineImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double startXDocPt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startxdocpt_)));
          set_has_startxdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_startYDocPt;
        break;
      }

      // required double startYDocPt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startYDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startydocpt_)));
          set_has_startydocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_endXDocPt;
        break;
      }

      // required double endXDocPt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endXDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endxdocpt_)));
          set_has_endxdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_endYDocPt;
        break;
      }

      // required double endYDocPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endYDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endydocpt_)));
          set_has_endydocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosLineImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double startXDocPt = 1;
  if (has_startxdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->startxdocpt(), output);
  }

  // required double startYDocPt = 2;
  if (has_startydocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->startydocpt(), output);
  }

  // required double endXDocPt = 3;
  if (has_endxdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->endxdocpt(), output);
  }

  // required double endYDocPt = 4;
  if (has_endydocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->endydocpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosLineImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double startXDocPt = 1;
  if (has_startxdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->startxdocpt(), target);
  }

  // required double startYDocPt = 2;
  if (has_startydocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->startydocpt(), target);
  }

  // required double endXDocPt = 3;
  if (has_endxdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->endxdocpt(), target);
  }

  // required double endYDocPt = 4;
  if (has_endydocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->endydocpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosLineImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double startXDocPt = 1;
    if (has_startxdocpt()) {
      total_size += 1 + 8;
    }

    // required double startYDocPt = 2;
    if (has_startydocpt()) {
      total_size += 1 + 8;
    }

    // required double endXDocPt = 3;
    if (has_endxdocpt()) {
      total_size += 1 + 8;
    }

    // required double endYDocPt = 4;
    if (has_endydocpt()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosLineImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosLineImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosLineImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosLineImpl::MergeFrom(const PosLineImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startxdocpt()) {
      set_startxdocpt(from.startxdocpt());
    }
    if (from.has_startydocpt()) {
      set_startydocpt(from.startydocpt());
    }
    if (from.has_endxdocpt()) {
      set_endxdocpt(from.endxdocpt());
    }
    if (from.has_endydocpt()) {
      set_endydocpt(from.endydocpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosLineImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosLineImpl::CopyFrom(const PosLineImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosLineImpl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PosLineImpl::Swap(PosLineImpl* other) {
  if (other != this) {
    std::swap(startxdocpt_, other->startxdocpt_);
    std::swap(startydocpt_, other->startydocpt_);
    std::swap(endxdocpt_, other->endxdocpt_);
    std::swap(endydocpt_, other->endydocpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosLineImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosLineImpl_descriptor_;
  metadata.reflection = PosLineImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosConnectionImpl::kPointsFieldNumber;
#endif  // !_MSC_VER

PosConnectionImpl::PosConnectionImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosConnectionImpl::InitAsDefaultInstance() {
}

PosConnectionImpl::PosConnectionImpl(const PosConnectionImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosConnectionImpl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosConnectionImpl::~PosConnectionImpl() {
  SharedDtor();
}

void PosConnectionImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosConnectionImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosConnectionImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosConnectionImpl_descriptor_;
}

const PosConnectionImpl& PosConnectionImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosConnectionImpl* PosConnectionImpl::default_instance_ = NULL;

PosConnectionImpl* PosConnectionImpl::New() const {
  return new PosConnectionImpl;
}

void PosConnectionImpl::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosConnectionImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.SchemaPoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosConnectionImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.SchemaPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosConnectionImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.SchemaPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosConnectionImpl::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.SchemaPoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosConnectionImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosConnectionImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosConnectionImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosConnectionImpl::MergeFrom(const PosConnectionImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosConnectionImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosConnectionImpl::CopyFrom(const PosConnectionImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosConnectionImpl::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void PosConnectionImpl::Swap(PosConnectionImpl* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosConnectionImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosConnectionImpl_descriptor_;
  metadata.reflection = PosConnectionImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemRect::kWeightFieldNumber;
const int SchemaItemRect::kLineColorFieldNumber;
const int SchemaItemRect::kFillColorFieldNumber;
const int SchemaItemRect::kTextFieldNumber;
const int SchemaItemRect::kTextColorFieldNumber;
const int SchemaItemRect::kFontFieldNumber;
const int SchemaItemRect::kFillFieldNumber;
const int SchemaItemRect::kDrawrectFieldNumber;
const int SchemaItemRect::kHorzAlignFieldNumber;
const int SchemaItemRect::kVertAlignFieldNumber;
#endif  // !_MSC_VER

SchemaItemRect::SchemaItemRect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemRect::InitAsDefaultInstance() {
  text_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

SchemaItemRect::SchemaItemRect(const SchemaItemRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemRect::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  text_ = NULL;
  textcolor_ = 0u;
  font_ = NULL;
  fill_ = false;
  drawrect_ = true;
  horzalign_ = 4;
  vertalign_ = 128;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemRect::~SchemaItemRect() {
  SharedDtor();
}

void SchemaItemRect::SharedDtor() {
  if (this != default_instance_) {
    delete text_;
    delete font_;
  }
}

void SchemaItemRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemRect_descriptor_;
}

const SchemaItemRect& SchemaItemRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemRect* SchemaItemRect::default_instance_ = NULL;

SchemaItemRect* SchemaItemRect::New() const {
  return new SchemaItemRect;
}

void SchemaItemRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    if (has_text()) {
      if (text_ != NULL) text_->::Proto::wstring::Clear();
    }
    textcolor_ = 0u;
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
    fill_ = false;
    drawrect_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    horzalign_ = 4;
    vertalign_ = 128;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillColor;
        break;
      }

      // required uint32 fillColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // required .Proto.wstring text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_textColor;
        break;
      }

      // required uint32 textColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_font;
        break;
      }

      // required .Proto.FontParam font = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fill;
        break;
      }

      // required bool fill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_drawrect;
        break;
      }

      // optional bool drawrect = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawrect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawrect_)));
          set_has_drawrect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_horzAlign;
        break;
      }

      // optional int32 horzAlign = 9 [default = 4];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horzAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horzalign_)));
          set_has_horzalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vertAlign;
        break;
      }

      // optional int32 vertAlign = 10 [default = 128];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertalign_)));
          set_has_vertalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fillcolor(), output);
  }

  // required .Proto.wstring text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text(), output);
  }

  // required uint32 textColor = 5;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->textcolor(), output);
  }

  // required .Proto.FontParam font = 6;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->font(), output);
  }

  // required bool fill = 7;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fill(), output);
  }

  // optional bool drawrect = 8 [default = true];
  if (has_drawrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->drawrect(), output);
  }

  // optional int32 horzAlign = 9 [default = 4];
  if (has_horzalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->horzalign(), output);
  }

  // optional int32 vertAlign = 10 [default = 128];
  if (has_vertalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vertalign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fillcolor(), target);
  }

  // required .Proto.wstring text = 4;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text(), target);
  }

  // required uint32 textColor = 5;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->textcolor(), target);
  }

  // required .Proto.FontParam font = 6;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->font(), target);
  }

  // required bool fill = 7;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fill(), target);
  }

  // optional bool drawrect = 8 [default = true];
  if (has_drawrect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->drawrect(), target);
  }

  // optional int32 horzAlign = 9 [default = 4];
  if (has_horzalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->horzalign(), target);
  }

  // optional int32 vertAlign = 10 [default = 128];
  if (has_vertalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vertalign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // required uint32 fillColor = 3;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // required .Proto.wstring text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // required uint32 textColor = 5;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // required .Proto.FontParam font = 6;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

    // required bool fill = 7;
    if (has_fill()) {
      total_size += 1 + 1;
    }

    // optional bool drawrect = 8 [default = true];
    if (has_drawrect()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 horzAlign = 9 [default = 4];
    if (has_horzalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horzalign());
    }

    // optional int32 vertAlign = 10 [default = 128];
    if (has_vertalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertalign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemRect::MergeFrom(const SchemaItemRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_text()) {
      mutable_text()->::Proto::wstring::MergeFrom(from.text());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
    if (from.has_drawrect()) {
      set_drawrect(from.drawrect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_horzalign()) {
      set_horzalign(from.horzalign());
    }
    if (from.has_vertalign()) {
      set_vertalign(from.vertalign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemRect::CopyFrom(const SchemaItemRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void SchemaItemRect::Swap(SchemaItemRect* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(text_, other->text_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(font_, other->font_);
    std::swap(fill_, other->fill_);
    std::swap(drawrect_, other->drawrect_);
    std::swap(horzalign_, other->horzalign_);
    std::swap(vertalign_, other->vertalign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemRect_descriptor_;
  metadata.reflection = SchemaItemRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemLine::kWeightFieldNumber;
const int SchemaItemLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

SchemaItemLine::SchemaItemLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLine::InitAsDefaultInstance() {
}

SchemaItemLine::SchemaItemLine(const SchemaItemLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLine::~SchemaItemLine() {
  SharedDtor();
}

void SchemaItemLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLine_descriptor_;
}

const SchemaItemLine& SchemaItemLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLine* SchemaItemLine::default_instance_ = NULL;

SchemaItemLine* SchemaItemLine::New() const {
  return new SchemaItemLine;
}

void SchemaItemLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLine::MergeFrom(const SchemaItemLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLine::CopyFrom(const SchemaItemLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaItemLine::Swap(SchemaItemLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLine_descriptor_;
  metadata.reflection = SchemaItemLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemPath::kWeightFieldNumber;
const int SchemaItemPath::kLineColorFieldNumber;
#endif  // !_MSC_VER

SchemaItemPath::SchemaItemPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemPath::InitAsDefaultInstance() {
}

SchemaItemPath::SchemaItemPath(const SchemaItemPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemPath::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemPath::~SchemaItemPath() {
  SharedDtor();
}

void SchemaItemPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemPath_descriptor_;
}

const SchemaItemPath& SchemaItemPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemPath* SchemaItemPath::default_instance_ = NULL;

SchemaItemPath* SchemaItemPath::New() const {
  return new SchemaItemPath;
}

void SchemaItemPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemPath::MergeFrom(const SchemaItemPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemPath::CopyFrom(const SchemaItemPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaItemPath::Swap(SchemaItemPath* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemPath_descriptor_;
  metadata.reflection = SchemaItemPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblConnectionPoint::kPointFieldNumber;
const int FblConnectionPoint::kDirrectionFieldNumber;
const int FblConnectionPoint::kUuidFieldNumber;
const int FblConnectionPoint::kOperandIndexFieldNumber;
const int FblConnectionPoint::kCaptionFieldNumber;
#endif  // !_MSC_VER

FblConnectionPoint::FblConnectionPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblConnectionPoint::InitAsDefaultInstance() {
  point_ = const_cast< ::Proto::SchemaPoint*>(&::Proto::SchemaPoint::default_instance());
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
}

FblConnectionPoint::FblConnectionPoint(const FblConnectionPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblConnectionPoint::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  dirrection_ = 0;
  uuid_ = NULL;
  operandindex_ = -1;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblConnectionPoint::~FblConnectionPoint() {
  SharedDtor();
}

void FblConnectionPoint::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (this != default_instance_) {
    delete point_;
    delete uuid_;
  }
}

void FblConnectionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblConnectionPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblConnectionPoint_descriptor_;
}

const FblConnectionPoint& FblConnectionPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblConnectionPoint* FblConnectionPoint::default_instance_ = NULL;

FblConnectionPoint* FblConnectionPoint::New() const {
  return new FblConnectionPoint;
}

void FblConnectionPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::Proto::SchemaPoint::Clear();
    }
    dirrection_ = 0;
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    operandindex_ = -1;
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblConnectionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.SchemaPoint point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dirrection;
        break;
      }

      // optional .Proto.ConnectionDirrection dirrection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirrection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::ConnectionDirrection_IsValid(value)) {
            set_dirrection(static_cast< ::Proto::ConnectionDirrection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional .Proto.Uuid uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operandIndex;
        break;
      }

      // optional int32 operandIndex = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operandIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operandindex_)));
          set_has_operandindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_caption;
        break;
      }

      // optional string caption = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblConnectionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Proto.SchemaPoint point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  // optional .Proto.ConnectionDirrection dirrection = 2;
  if (has_dirrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dirrection(), output);
  }

  // optional .Proto.Uuid uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->uuid(), output);
  }

  // optional int32 operandIndex = 4 [default = -1];
  if (has_operandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operandindex(), output);
  }

  // optional string caption = 5 [default = ""];
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->caption(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblConnectionPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Proto.SchemaPoint point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  // optional .Proto.ConnectionDirrection dirrection = 2;
  if (has_dirrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dirrection(), target);
  }

  // optional .Proto.Uuid uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->uuid(), target);
  }

  // optional int32 operandIndex = 4 [default = -1];
  if (has_operandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operandindex(), target);
  }

  // optional string caption = 5 [default = ""];
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->caption(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblConnectionPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Proto.SchemaPoint point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // optional .Proto.ConnectionDirrection dirrection = 2;
    if (has_dirrection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dirrection());
    }

    // optional .Proto.Uuid uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // optional int32 operandIndex = 4 [default = -1];
    if (has_operandindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operandindex());
    }

    // optional string caption = 5 [default = ""];
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblConnectionPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblConnectionPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblConnectionPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblConnectionPoint::MergeFrom(const FblConnectionPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::Proto::SchemaPoint::MergeFrom(from.point());
    }
    if (from.has_dirrection()) {
      set_dirrection(from.dirrection());
    }
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_operandindex()) {
      set_operandindex(from.operandindex());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblConnectionPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblConnectionPoint::CopyFrom(const FblConnectionPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblConnectionPoint::IsInitialized() const {

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  return true;
}

void FblConnectionPoint::Swap(FblConnectionPoint* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(dirrection_, other->dirrection_);
    std::swap(uuid_, other->uuid_);
    std::swap(operandindex_, other->operandindex_);
    std::swap(caption_, other->caption_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblConnectionPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblConnectionPoint_descriptor_;
  metadata.reflection = FblConnectionPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItem::kPointsFieldNumber;
#endif  // !_MSC_VER

FblItem::FblItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItem::InitAsDefaultInstance() {
}

FblItem::FblItem(const FblItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItem::~FblItem() {
  SharedDtor();
}

void FblItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItem_descriptor_;
}

const FblItem& FblItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItem* FblItem::default_instance_ = NULL;

FblItem* FblItem::New() const {
  return new FblItem;
}

void FblItem::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.FblConnectionPoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.FblConnectionPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.FblConnectionPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItem::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.FblConnectionPoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItem::MergeFrom(const FblItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItem::CopyFrom(const FblItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItem::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void FblItem::Swap(FblItem* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItem_descriptor_;
  metadata.reflection = FblItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItemRect::kWeightFieldNumber;
const int FblItemRect::kLineColorFieldNumber;
const int FblItemRect::kFillColorFieldNumber;
const int FblItemRect::kTextColorFieldNumber;
const int FblItemRect::kFontFieldNumber;
#endif  // !_MSC_VER

FblItemRect::FblItemRect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItemRect::InitAsDefaultInstance() {
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

FblItemRect::FblItemRect(const FblItemRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItemRect::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  textcolor_ = 0u;
  font_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItemRect::~FblItemRect() {
  SharedDtor();
}

void FblItemRect::SharedDtor() {
  if (this != default_instance_) {
    delete font_;
  }
}

void FblItemRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItemRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItemRect_descriptor_;
}

const FblItemRect& FblItemRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItemRect* FblItemRect::default_instance_ = NULL;

FblItemRect* FblItemRect::New() const {
  return new FblItemRect;
}

void FblItemRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    textcolor_ = 0u;
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItemRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillColor;
        break;
      }

      // required uint32 fillColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_textColor;
        break;
      }

      // required uint32 textColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_font;
        break;
      }

      // required .Proto.FontParam font = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItemRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fillcolor(), output);
  }

  // required uint32 textColor = 4;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->textcolor(), output);
  }

  // required .Proto.FontParam font = 5;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->font(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItemRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fillcolor(), target);
  }

  // required uint32 textColor = 4;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->textcolor(), target);
  }

  // required .Proto.FontParam font = 5;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->font(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItemRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // required uint32 fillColor = 3;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // required uint32 textColor = 4;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // required .Proto.FontParam font = 5;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItemRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItemRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItemRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItemRect::MergeFrom(const FblItemRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItemRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemRect::CopyFrom(const FblItemRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void FblItemRect::Swap(FblItemRect* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(font_, other->font_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItemRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItemRect_descriptor_;
  metadata.reflection = FblItemRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItemLine::kWeightFieldNumber;
const int FblItemLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

FblItemLine::FblItemLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItemLine::InitAsDefaultInstance() {
}

FblItemLine::FblItemLine(const FblItemLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItemLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItemLine::~FblItemLine() {
  SharedDtor();
}

void FblItemLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblItemLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItemLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItemLine_descriptor_;
}

const FblItemLine& FblItemLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItemLine* FblItemLine::default_instance_ = NULL;

FblItemLine* FblItemLine::New() const {
  return new FblItemLine;
}

void FblItemLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItemLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItemLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItemLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItemLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItemLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItemLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItemLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItemLine::MergeFrom(const FblItemLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItemLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemLine::CopyFrom(const FblItemLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FblItemLine::Swap(FblItemLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItemLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItemLine_descriptor_;
  metadata.reflection = FblItemLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemSignal::kAppSignalIDsFieldNumber;
#endif  // !_MSC_VER

SchemaItemSignal::SchemaItemSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemSignal::InitAsDefaultInstance() {
}

SchemaItemSignal::SchemaItemSignal(const SchemaItemSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemSignal::~SchemaItemSignal() {
  SharedDtor();
}

void SchemaItemSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemSignal_descriptor_;
}

const SchemaItemSignal& SchemaItemSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemSignal* SchemaItemSignal::default_instance_ = NULL;

SchemaItemSignal* SchemaItemSignal::New() const {
  return new SchemaItemSignal;
}

void SchemaItemSignal::Clear() {
  appsignalids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.wstring appSignalIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_appSignalIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.wstring appSignalIDs = 1;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->appsignalids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.wstring appSignalIDs = 1;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->appsignalids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemSignal::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.wstring appSignalIDs = 1;
  total_size += 1 * this->appsignalids_size();
  for (int i = 0; i < this->appsignalids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemSignal::MergeFrom(const SchemaItemSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalids_.MergeFrom(from.appsignalids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemSignal::CopyFrom(const SchemaItemSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemSignal::IsInitialized() const {

  for (int i = 0; i < appsignalids_size(); i++) {
    if (!this->appsignalids(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaItemSignal::Swap(SchemaItemSignal* other) {
  if (other != this) {
    appsignalids_.Swap(&other->appsignalids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemSignal_descriptor_;
  metadata.reflection = SchemaItemSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemInput::SchemaItemInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemInput::InitAsDefaultInstance() {
}

SchemaItemInput::SchemaItemInput(const SchemaItemInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemInput::~SchemaItemInput() {
  SharedDtor();
}

void SchemaItemInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemInput_descriptor_;
}

const SchemaItemInput& SchemaItemInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemInput* SchemaItemInput::default_instance_ = NULL;

SchemaItemInput* SchemaItemInput::New() const {
  return new SchemaItemInput;
}

void SchemaItemInput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemInput::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemInput::MergeFrom(const SchemaItemInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemInput::CopyFrom(const SchemaItemInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemInput::IsInitialized() const {

  return true;
}

void SchemaItemInput::Swap(SchemaItemInput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemInput_descriptor_;
  metadata.reflection = SchemaItemInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemOutput::SchemaItemOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemOutput::InitAsDefaultInstance() {
}

SchemaItemOutput::SchemaItemOutput(const SchemaItemOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemOutput::~SchemaItemOutput() {
  SharedDtor();
}

void SchemaItemOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemOutput_descriptor_;
}

const SchemaItemOutput& SchemaItemOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemOutput* SchemaItemOutput::default_instance_ = NULL;

SchemaItemOutput* SchemaItemOutput::New() const {
  return new SchemaItemOutput;
}

void SchemaItemOutput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemOutput::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemOutput::MergeFrom(const SchemaItemOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemOutput::CopyFrom(const SchemaItemOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemOutput::IsInitialized() const {

  return true;
}

void SchemaItemOutput::Swap(SchemaItemOutput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemOutput_descriptor_;
  metadata.reflection = SchemaItemOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemLink::SchemaItemLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLink::InitAsDefaultInstance() {
}

SchemaItemLink::SchemaItemLink(const SchemaItemLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLink::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLink::~SchemaItemLink() {
  SharedDtor();
}

void SchemaItemLink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLink_descriptor_;
}

const SchemaItemLink& SchemaItemLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLink* SchemaItemLink::default_instance_ = NULL;

SchemaItemLink* SchemaItemLink::New() const {
  return new SchemaItemLink;
}

void SchemaItemLink::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLink::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLink::MergeFrom(const SchemaItemLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLink::CopyFrom(const SchemaItemLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLink::IsInitialized() const {

  return true;
}

void SchemaItemLink::Swap(SchemaItemLink* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLink_descriptor_;
  metadata.reflection = SchemaItemLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemAfb::kParamsFieldNumber;
const int SchemaItemAfb::kAfbStridFieldNumber;
const int SchemaItemAfb::kPrecisionFieldNumber;
#endif  // !_MSC_VER

SchemaItemAfb::SchemaItemAfb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemAfb::InitAsDefaultInstance() {
  afbstrid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

SchemaItemAfb::SchemaItemAfb(const SchemaItemAfb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemAfb::SharedCtor() {
  _cached_size_ = 0;
  afbstrid_ = NULL;
  precision_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemAfb::~SchemaItemAfb() {
  SharedDtor();
}

void SchemaItemAfb::SharedDtor() {
  if (this != default_instance_) {
    delete afbstrid_;
  }
}

void SchemaItemAfb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemAfb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemAfb_descriptor_;
}

const SchemaItemAfb& SchemaItemAfb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemAfb* SchemaItemAfb::default_instance_ = NULL;

SchemaItemAfb* SchemaItemAfb::New() const {
  return new SchemaItemAfb;
}

void SchemaItemAfb::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_afbstrid()) {
      if (afbstrid_ != NULL) afbstrid_->::Proto::wstring::Clear();
    }
    precision_ = 2;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemAfb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AfbParam params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectTag(26)) goto parse_afbStrid;
        break;
      }

      // optional .Proto.wstring afbStrid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afbStrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbstrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_precision;
        break;
      }

      // optional int32 precision = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemAfb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.AfbParam params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->params(i), output);
  }

  // optional .Proto.wstring afbStrid = 3;
  if (has_afbstrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->afbstrid(), output);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->precision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemAfb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.AfbParam params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->params(i), target);
  }

  // optional .Proto.wstring afbStrid = 3;
  if (has_afbstrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->afbstrid(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->precision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemAfb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Proto.wstring afbStrid = 3;
    if (has_afbstrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbstrid());
    }

    // optional int32 precision = 4 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

  }
  // repeated .Proto.AfbParam params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemAfb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemAfb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemAfb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemAfb::MergeFrom(const SchemaItemAfb& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_afbstrid()) {
      mutable_afbstrid()->::Proto::wstring::MergeFrom(from.afbstrid());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemAfb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemAfb::CopyFrom(const SchemaItemAfb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemAfb::IsInitialized() const {

  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  if (has_afbstrid()) {
    if (!this->afbstrid().IsInitialized()) return false;
  }
  return true;
}

void SchemaItemAfb::Swap(SchemaItemAfb* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(afbstrid_, other->afbstrid_);
    std::swap(precision_, other->precision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemAfb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemAfb_descriptor_;
  metadata.reflection = SchemaItemAfb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemConst::kTypeFieldNumber;
const int SchemaItemConst::kIntValueFieldNumber;
const int SchemaItemConst::kFloatValueFieldNumber;
const int SchemaItemConst::kPrecisionFieldNumber;
#endif  // !_MSC_VER

SchemaItemConst::SchemaItemConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemConst::InitAsDefaultInstance() {
}

SchemaItemConst::SchemaItemConst(const SchemaItemConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemConst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  intvalue_ = 0;
  floatvalue_ = 0;
  precision_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemConst::~SchemaItemConst() {
  SharedDtor();
}

void SchemaItemConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemConst_descriptor_;
}

const SchemaItemConst& SchemaItemConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemConst* SchemaItemConst::default_instance_ = NULL;

SchemaItemConst* SchemaItemConst::New() const {
  return new SchemaItemConst;
}

void SchemaItemConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    intvalue_ = 0;
    floatvalue_ = 0;
    precision_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intValue;
        break;
      }

      // optional int32 intValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_floatValue;
        break;
      }

      // optional double floatValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_floatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &floatvalue_)));
          set_has_floatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_precision;
        break;
      }

      // optional int32 precision = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intvalue(), output);
  }

  // optional double floatValue = 3 [default = 0];
  if (has_floatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->floatvalue(), output);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->precision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intvalue(), target);
  }

  // optional double floatValue = 3 [default = 0];
  if (has_floatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->floatvalue(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->precision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 intValue = 2 [default = 0];
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intvalue());
    }

    // optional double floatValue = 3 [default = 0];
    if (has_floatvalue()) {
      total_size += 1 + 8;
    }

    // optional int32 precision = 4 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemConst::MergeFrom(const SchemaItemConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_floatvalue()) {
      set_floatvalue(from.floatvalue());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemConst::CopyFrom(const SchemaItemConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemConst::IsInitialized() const {

  return true;
}

void SchemaItemConst::Swap(SchemaItemConst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(floatvalue_, other->floatvalue_);
    std::swap(precision_, other->precision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemConst_descriptor_;
  metadata.reflection = SchemaItemConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceObject::kUuidFieldNumber;
const int DeviceObject::kEquipmentIdFieldNumber;
const int DeviceObject::kCaptionFieldNumber;
const int DeviceObject::kChildRestrictionFieldNumber;
const int DeviceObject::kPlaceFieldNumber;
const int DeviceObject::kSpecificPropertiesStructFieldNumber;
const int DeviceObject::kPropertiesFieldNumber;
const int DeviceObject::kPresetFieldNumber;
const int DeviceObject::kPresetRootFieldNumber;
const int DeviceObject::kPresetNameFieldNumber;
const int DeviceObject::kPresetObjectUuidFieldNumber;
const int DeviceObject::kRootFieldNumber;
const int DeviceObject::kSystemFieldNumber;
const int DeviceObject::kRackFieldNumber;
const int DeviceObject::kChassisFieldNumber;
const int DeviceObject::kModuleFieldNumber;
const int DeviceObject::kControllerFieldNumber;
const int DeviceObject::kSignalFieldNumber;
const int DeviceObject::kWorkstationFieldNumber;
const int DeviceObject::kSoftwareFieldNumber;
#endif  // !_MSC_VER

DeviceObject::DeviceObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceObject::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  equipmentid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  childrestriction_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  presetname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  presetobjectuuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  root_ = const_cast< ::Proto::DeviceRoot*>(&::Proto::DeviceRoot::default_instance());
  system_ = const_cast< ::Proto::DeviceSystem*>(&::Proto::DeviceSystem::default_instance());
  rack_ = const_cast< ::Proto::DeviceRack*>(&::Proto::DeviceRack::default_instance());
  chassis_ = const_cast< ::Proto::DeviceChassis*>(&::Proto::DeviceChassis::default_instance());
  module_ = const_cast< ::Proto::DeviceModule*>(&::Proto::DeviceModule::default_instance());
  controller_ = const_cast< ::Proto::DeviceController*>(&::Proto::DeviceController::default_instance());
  signal_ = const_cast< ::Proto::DeviceSignal*>(&::Proto::DeviceSignal::default_instance());
  workstation_ = const_cast< ::Proto::Workstation*>(&::Proto::Workstation::default_instance());
  software_ = const_cast< ::Proto::Software*>(&::Proto::Software::default_instance());
}

DeviceObject::DeviceObject(const DeviceObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceObject::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  equipmentid_ = NULL;
  caption_ = NULL;
  childrestriction_ = NULL;
  place_ = 0;
  specific_properties_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preset_ = false;
  presetroot_ = false;
  presetname_ = NULL;
  presetobjectuuid_ = NULL;
  root_ = NULL;
  system_ = NULL;
  rack_ = NULL;
  chassis_ = NULL;
  module_ = NULL;
  controller_ = NULL;
  signal_ = NULL;
  workstation_ = NULL;
  software_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceObject::~DeviceObject() {
  SharedDtor();
}

void DeviceObject::SharedDtor() {
  if (specific_properties_struct_ != &::google::protobuf::internal::kEmptyString) {
    delete specific_properties_struct_;
  }
  if (this != default_instance_) {
    delete uuid_;
    delete equipmentid_;
    delete caption_;
    delete childrestriction_;
    delete presetname_;
    delete presetobjectuuid_;
    delete root_;
    delete system_;
    delete rack_;
    delete chassis_;
    delete module_;
    delete controller_;
    delete signal_;
    delete workstation_;
    delete software_;
  }
}

void DeviceObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceObject_descriptor_;
}

const DeviceObject& DeviceObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceObject* DeviceObject::default_instance_ = NULL;

DeviceObject* DeviceObject::New() const {
  return new DeviceObject;
}

void DeviceObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_equipmentid()) {
      if (equipmentid_ != NULL) equipmentid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    if (has_childrestriction()) {
      if (childrestriction_ != NULL) childrestriction_->::Proto::wstring::Clear();
    }
    place_ = 0;
    if (has_specific_properties_struct()) {
      if (specific_properties_struct_ != &::google::protobuf::internal::kEmptyString) {
        specific_properties_struct_->clear();
      }
    }
    preset_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    presetroot_ = false;
    if (has_presetname()) {
      if (presetname_ != NULL) presetname_->::Proto::wstring::Clear();
    }
    if (has_presetobjectuuid()) {
      if (presetobjectuuid_ != NULL) presetobjectuuid_->::Proto::Uuid::Clear();
    }
    if (has_root()) {
      if (root_ != NULL) root_->::Proto::DeviceRoot::Clear();
    }
    if (has_system()) {
      if (system_ != NULL) system_->::Proto::DeviceSystem::Clear();
    }
    if (has_rack()) {
      if (rack_ != NULL) rack_->::Proto::DeviceRack::Clear();
    }
    if (has_chassis()) {
      if (chassis_ != NULL) chassis_->::Proto::DeviceChassis::Clear();
    }
    if (has_module()) {
      if (module_ != NULL) module_->::Proto::DeviceModule::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_controller()) {
      if (controller_ != NULL) controller_->::Proto::DeviceController::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::Proto::DeviceSignal::Clear();
    }
    if (has_workstation()) {
      if (workstation_ != NULL) workstation_->::Proto::Workstation::Clear();
    }
    if (has_software()) {
      if (software_ != NULL) software_->::Proto::Software::Clear();
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipmentId;
        break;
      }

      // required .Proto.wstring equipmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_childRestriction;
        break;
      }

      // optional .Proto.wstring childRestriction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childRestriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_childrestriction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional int32 place = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_specific_properties_struct;
        break;
      }

      // optional string specific_properties_struct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specific_properties_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specific_properties_struct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specific_properties_struct().data(), this->specific_properties_struct().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_properties;
        break;
      }

      // repeated .Proto.Property properties = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_properties;
        if (input->ExpectTag(256)) goto parse_preset;
        break;
      }

      // optional bool preset = 32 [default = false];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preset_)));
          set_has_preset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_presetRoot;
        break;
      }

      // optional bool presetRoot = 33 [default = false];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presetRoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presetroot_)));
          set_has_presetroot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_presetName;
        break;
      }

      // optional .Proto.wstring presetName = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_presetObjectUuid;
        break;
      }

      // optional .Proto.Uuid presetObjectUuid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presetObjectUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presetobjectuuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_Root;
        break;
      }

      // optional .Proto.DeviceRoot Root = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_System;
        break;
      }

      // optional .Proto.DeviceSystem System = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_System:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_Rack;
        break;
      }

      // optional .Proto.DeviceRack Rack = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_Chassis;
        break;
      }

      // optional .Proto.DeviceChassis Chassis = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chassis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_Module;
        break;
      }

      // optional .Proto.DeviceModule Module = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_Controller;
        break;
      }

      // optional .Proto.DeviceController Controller = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Controller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_Signal;
        break;
      }

      // optional .Proto.DeviceSignal Signal = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_Workstation;
        break;
      }

      // optional .Proto.Workstation Workstation = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Workstation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_workstation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_Software;
        break;
      }

      // optional .Proto.Software Software = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_software()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipmentid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (has_childrestriction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->childrestriction(), output);
  }

  // optional int32 place = 5 [default = 0];
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->place(), output);
  }

  // optional string specific_properties_struct = 6;
  if (has_specific_properties_struct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specific_properties_struct().data(), this->specific_properties_struct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->specific_properties_struct(), output);
  }

  // repeated .Proto.Property properties = 7;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->properties(i), output);
  }

  // optional bool preset = 32 [default = false];
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->preset(), output);
  }

  // optional bool presetRoot = 33 [default = false];
  if (has_presetroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->presetroot(), output);
  }

  // optional .Proto.wstring presetName = 34;
  if (has_presetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->presetname(), output);
  }

  // optional .Proto.Uuid presetObjectUuid = 35;
  if (has_presetobjectuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->presetobjectuuid(), output);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->root(), output);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->system(), output);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (has_rack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->rack(), output);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (has_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->chassis(), output);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->module(), output);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->controller(), output);
  }

  // optional .Proto.DeviceSignal Signal = 106;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->signal(), output);
  }

  // optional .Proto.Workstation Workstation = 107;
  if (has_workstation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->workstation(), output);
  }

  // optional .Proto.Software Software = 108;
  if (has_software()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->software(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring equipmentId = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipmentid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (has_childrestriction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->childrestriction(), target);
  }

  // optional int32 place = 5 [default = 0];
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->place(), target);
  }

  // optional string specific_properties_struct = 6;
  if (has_specific_properties_struct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specific_properties_struct().data(), this->specific_properties_struct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->specific_properties_struct(), target);
  }

  // repeated .Proto.Property properties = 7;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->properties(i), target);
  }

  // optional bool preset = 32 [default = false];
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->preset(), target);
  }

  // optional bool presetRoot = 33 [default = false];
  if (has_presetroot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->presetroot(), target);
  }

  // optional .Proto.wstring presetName = 34;
  if (has_presetname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->presetname(), target);
  }

  // optional .Proto.Uuid presetObjectUuid = 35;
  if (has_presetobjectuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->presetobjectuuid(), target);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->root(), target);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->system(), target);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (has_rack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->rack(), target);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (has_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->chassis(), target);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->module(), target);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->controller(), target);
  }

  // optional .Proto.DeviceSignal Signal = 106;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->signal(), target);
  }

  // optional .Proto.Workstation Workstation = 107;
  if (has_workstation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->workstation(), target);
  }

  // optional .Proto.Software Software = 108;
  if (has_software()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->software(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // optional .Proto.wstring childRestriction = 4;
    if (has_childrestriction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->childrestriction());
    }

    // optional int32 place = 5 [default = 0];
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

    // optional string specific_properties_struct = 6;
    if (has_specific_properties_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specific_properties_struct());
    }

    // optional bool preset = 32 [default = false];
    if (has_preset()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool presetRoot = 33 [default = false];
    if (has_presetroot()) {
      total_size += 2 + 1;
    }

    // optional .Proto.wstring presetName = 34;
    if (has_presetname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presetname());
    }

    // optional .Proto.Uuid presetObjectUuid = 35;
    if (has_presetobjectuuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presetobjectuuid());
    }

    // optional .Proto.DeviceRoot Root = 100;
    if (has_root()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root());
    }

    // optional .Proto.DeviceSystem System = 101;
    if (has_system()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
    }

    // optional .Proto.DeviceRack Rack = 102;
    if (has_rack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rack());
    }

    // optional .Proto.DeviceChassis Chassis = 103;
    if (has_chassis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chassis());
    }

    // optional .Proto.DeviceModule Module = 104;
    if (has_module()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Proto.DeviceController Controller = 105;
    if (has_controller()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller());
    }

    // optional .Proto.DeviceSignal Signal = 106;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .Proto.Workstation Workstation = 107;
    if (has_workstation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workstation());
    }

    // optional .Proto.Software Software = 108;
    if (has_software()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->software());
    }

  }
  // repeated .Proto.Property properties = 7;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceObject::MergeFrom(const DeviceObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_equipmentid()) {
      mutable_equipmentid()->::Proto::wstring::MergeFrom(from.equipmentid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_childrestriction()) {
      mutable_childrestriction()->::Proto::wstring::MergeFrom(from.childrestriction());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_specific_properties_struct()) {
      set_specific_properties_struct(from.specific_properties_struct());
    }
    if (from.has_preset()) {
      set_preset(from.preset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_presetroot()) {
      set_presetroot(from.presetroot());
    }
    if (from.has_presetname()) {
      mutable_presetname()->::Proto::wstring::MergeFrom(from.presetname());
    }
    if (from.has_presetobjectuuid()) {
      mutable_presetobjectuuid()->::Proto::Uuid::MergeFrom(from.presetobjectuuid());
    }
    if (from.has_root()) {
      mutable_root()->::Proto::DeviceRoot::MergeFrom(from.root());
    }
    if (from.has_system()) {
      mutable_system()->::Proto::DeviceSystem::MergeFrom(from.system());
    }
    if (from.has_rack()) {
      mutable_rack()->::Proto::DeviceRack::MergeFrom(from.rack());
    }
    if (from.has_chassis()) {
      mutable_chassis()->::Proto::DeviceChassis::MergeFrom(from.chassis());
    }
    if (from.has_module()) {
      mutable_module()->::Proto::DeviceModule::MergeFrom(from.module());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_controller()) {
      mutable_controller()->::Proto::DeviceController::MergeFrom(from.controller());
    }
    if (from.has_signal()) {
      mutable_signal()->::Proto::DeviceSignal::MergeFrom(from.signal());
    }
    if (from.has_workstation()) {
      mutable_workstation()->::Proto::Workstation::MergeFrom(from.workstation());
    }
    if (from.has_software()) {
      mutable_software()->::Proto::Software::MergeFrom(from.software());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceObject::CopyFrom(const DeviceObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_equipmentid()) {
    if (!this->equipmentid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_childrestriction()) {
    if (!this->childrestriction().IsInitialized()) return false;
  }
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  if (has_presetname()) {
    if (!this->presetname().IsInitialized()) return false;
  }
  if (has_presetobjectuuid()) {
    if (!this->presetobjectuuid().IsInitialized()) return false;
  }
  return true;
}

void DeviceObject::Swap(DeviceObject* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(caption_, other->caption_);
    std::swap(childrestriction_, other->childrestriction_);
    std::swap(place_, other->place_);
    std::swap(specific_properties_struct_, other->specific_properties_struct_);
    properties_.Swap(&other->properties_);
    std::swap(preset_, other->preset_);
    std::swap(presetroot_, other->presetroot_);
    std::swap(presetname_, other->presetname_);
    std::swap(presetobjectuuid_, other->presetobjectuuid_);
    std::swap(root_, other->root_);
    std::swap(system_, other->system_);
    std::swap(rack_, other->rack_);
    std::swap(chassis_, other->chassis_);
    std::swap(module_, other->module_);
    std::swap(controller_, other->controller_);
    std::swap(signal_, other->signal_);
    std::swap(workstation_, other->workstation_);
    std::swap(software_, other->software_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceObject_descriptor_;
  metadata.reflection = DeviceObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceRoot::DeviceRoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceRoot::InitAsDefaultInstance() {
}

DeviceRoot::DeviceRoot(const DeviceRoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceRoot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRoot::~DeviceRoot() {
  SharedDtor();
}

void DeviceRoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceRoot_descriptor_;
}

const DeviceRoot& DeviceRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceRoot* DeviceRoot::default_instance_ = NULL;

DeviceRoot* DeviceRoot::New() const {
  return new DeviceRoot;
}

void DeviceRoot::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceRoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceRoot::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceRoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceRoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceRoot::MergeFrom(const DeviceRoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceRoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRoot::CopyFrom(const DeviceRoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRoot::IsInitialized() const {

  return true;
}

void DeviceRoot::Swap(DeviceRoot* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceRoot_descriptor_;
  metadata.reflection = DeviceRoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceSystem::DeviceSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceSystem::InitAsDefaultInstance() {
}

DeviceSystem::DeviceSystem(const DeviceSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSystem::~DeviceSystem() {
  SharedDtor();
}

void DeviceSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSystem_descriptor_;
}

const DeviceSystem& DeviceSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceSystem* DeviceSystem::default_instance_ = NULL;

DeviceSystem* DeviceSystem::New() const {
  return new DeviceSystem;
}

void DeviceSystem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceSystem::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSystem::MergeFrom(const DeviceSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSystem::CopyFrom(const DeviceSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSystem::IsInitialized() const {

  return true;
}

void DeviceSystem::Swap(DeviceSystem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSystem_descriptor_;
  metadata.reflection = DeviceSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceRack::DeviceRack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceRack::InitAsDefaultInstance() {
}

DeviceRack::DeviceRack(const DeviceRack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceRack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRack::~DeviceRack() {
  SharedDtor();
}

void DeviceRack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceRack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceRack_descriptor_;
}

const DeviceRack& DeviceRack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceRack* DeviceRack::default_instance_ = NULL;

DeviceRack* DeviceRack::New() const {
  return new DeviceRack;
}

void DeviceRack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceRack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceRack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceRack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceRack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceRack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceRack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceRack::MergeFrom(const DeviceRack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceRack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRack::CopyFrom(const DeviceRack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRack::IsInitialized() const {

  return true;
}

void DeviceRack::Swap(DeviceRack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceRack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceRack_descriptor_;
  metadata.reflection = DeviceRack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceChassis::kTypeFieldNumber;
#endif  // !_MSC_VER

DeviceChassis::DeviceChassis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceChassis::InitAsDefaultInstance() {
}

DeviceChassis::DeviceChassis(const DeviceChassis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceChassis::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceChassis::~DeviceChassis() {
  SharedDtor();
}

void DeviceChassis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceChassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceChassis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceChassis_descriptor_;
}

const DeviceChassis& DeviceChassis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceChassis* DeviceChassis::default_instance_ = NULL;

DeviceChassis* DeviceChassis::New() const {
  return new DeviceChassis;
}

void DeviceChassis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceChassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceChassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceChassis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceChassis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceChassis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceChassis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceChassis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceChassis::MergeFrom(const DeviceChassis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceChassis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceChassis::CopyFrom(const DeviceChassis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceChassis::IsInitialized() const {

  return true;
}

void DeviceChassis::Swap(DeviceChassis* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceChassis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceChassis_descriptor_;
  metadata.reflection = DeviceChassis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceModule::kTypeFieldNumber;
#endif  // !_MSC_VER

DeviceModule::DeviceModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceModule::InitAsDefaultInstance() {
}

DeviceModule::DeviceModule(const DeviceModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceModule::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceModule::~DeviceModule() {
  SharedDtor();
}

void DeviceModule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceModule_descriptor_;
}

const DeviceModule& DeviceModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceModule* DeviceModule::default_instance_ = NULL;

DeviceModule* DeviceModule::New() const {
  return new DeviceModule;
}

void DeviceModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceModule::MergeFrom(const DeviceModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceModule::CopyFrom(const DeviceModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceModule::IsInitialized() const {

  return true;
}

void DeviceModule::Swap(DeviceModule* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceModule_descriptor_;
  metadata.reflection = DeviceModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceController::DeviceController()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceController::InitAsDefaultInstance() {
}

DeviceController::DeviceController(const DeviceController& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceController::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceController::~DeviceController() {
  SharedDtor();
}

void DeviceController::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceController::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceController::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceController_descriptor_;
}

const DeviceController& DeviceController::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceController* DeviceController::default_instance_ = NULL;

DeviceController* DeviceController::New() const {
  return new DeviceController;
}

void DeviceController::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceController::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceController::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceController::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceController* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceController*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceController::MergeFrom(const DeviceController& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceController::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceController::CopyFrom(const DeviceController& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceController::IsInitialized() const {

  return true;
}

void DeviceController::Swap(DeviceController* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceController::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceController_descriptor_;
  metadata.reflection = DeviceController_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceSignal::kObsoletetypeFieldNumber;
const int DeviceSignal::kByteOrderFieldNumber;
const int DeviceSignal::kFormatFieldNumber;
const int DeviceSignal::kSizeFieldNumber;
const int DeviceSignal::kValidityOffsetFieldNumber;
const int DeviceSignal::kValidityBitFieldNumber;
const int DeviceSignal::kValueOffsetFieldNumber;
const int DeviceSignal::kValueBitFieldNumber;
const int DeviceSignal::kTypeFieldNumber;
const int DeviceSignal::kFunctionFieldNumber;
#endif  // !_MSC_VER

DeviceSignal::DeviceSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceSignal::InitAsDefaultInstance() {
}

DeviceSignal::DeviceSignal(const DeviceSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceSignal::SharedCtor() {
  _cached_size_ = 0;
  obsoletetype_ = 0;
  byteorder_ = 0;
  format_ = 0;
  size_ = 0;
  validityoffset_ = 0;
  validitybit_ = 0;
  valueoffset_ = 0;
  valuebit_ = 0;
  type_ = 0;
  function_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSignal::~DeviceSignal() {
  SharedDtor();
}

void DeviceSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSignal_descriptor_;
}

const DeviceSignal& DeviceSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceSignal* DeviceSignal::default_instance_ = NULL;

DeviceSignal* DeviceSignal::New() const {
  return new DeviceSignal;
}

void DeviceSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obsoletetype_ = 0;
    byteorder_ = 0;
    format_ = 0;
    size_ = 0;
    validityoffset_ = 0;
    validitybit_ = 0;
    valueoffset_ = 0;
    valuebit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0;
    function_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obsoletetype = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsoletetype_)));
          set_has_obsoletetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byteOrder;
        break;
      }

      // optional int32 byteOrder = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byteOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byteorder_)));
          set_has_byteorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format;
        break;
      }

      // optional int32 format = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_validityOffset;
        break;
      }

      // optional int32 validityOffset = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validityOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validityoffset_)));
          set_has_validityoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_validityBit;
        break;
      }

      // optional int32 validityBit = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validityBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validitybit_)));
          set_has_validitybit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_valueOffset;
        break;
      }

      // optional int32 valueOffset = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueoffset_)));
          set_has_valueoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_valueBit;
        break;
      }

      // optional int32 valueBit = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuebit_)));
          set_has_valuebit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional int32 type = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_function;
        break;
      }

      // optional int32 function = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &function_)));
          set_has_function();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obsoletetype = 1 [default = 0];
  if (has_obsoletetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obsoletetype(), output);
  }

  // optional int32 byteOrder = 2 [default = 0];
  if (has_byteorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byteorder(), output);
  }

  // optional int32 format = 3 [default = 0];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->format(), output);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional int32 validityOffset = 5 [default = 0];
  if (has_validityoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->validityoffset(), output);
  }

  // optional int32 validityBit = 6 [default = 0];
  if (has_validitybit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->validitybit(), output);
  }

  // optional int32 valueOffset = 7 [default = 0];
  if (has_valueoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->valueoffset(), output);
  }

  // optional int32 valueBit = 8 [default = 0];
  if (has_valuebit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->valuebit(), output);
  }

  // optional int32 type = 9 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // optional int32 function = 10 [default = 0];
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obsoletetype = 1 [default = 0];
  if (has_obsoletetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obsoletetype(), target);
  }

  // optional int32 byteOrder = 2 [default = 0];
  if (has_byteorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->byteorder(), target);
  }

  // optional int32 format = 3 [default = 0];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->format(), target);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional int32 validityOffset = 5 [default = 0];
  if (has_validityoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->validityoffset(), target);
  }

  // optional int32 validityBit = 6 [default = 0];
  if (has_validitybit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->validitybit(), target);
  }

  // optional int32 valueOffset = 7 [default = 0];
  if (has_valueoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->valueoffset(), target);
  }

  // optional int32 valueBit = 8 [default = 0];
  if (has_valuebit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->valuebit(), target);
  }

  // optional int32 type = 9 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // optional int32 function = 10 [default = 0];
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obsoletetype = 1 [default = 0];
    if (has_obsoletetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obsoletetype());
    }

    // optional int32 byteOrder = 2 [default = 0];
    if (has_byteorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byteorder());
    }

    // optional int32 format = 3 [default = 0];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->format());
    }

    // optional int32 size = 4 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 validityOffset = 5 [default = 0];
    if (has_validityoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validityoffset());
    }

    // optional int32 validityBit = 6 [default = 0];
    if (has_validitybit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validitybit());
    }

    // optional int32 valueOffset = 7 [default = 0];
    if (has_valueoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueoffset());
    }

    // optional int32 valueBit = 8 [default = 0];
    if (has_valuebit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuebit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 type = 9 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 function = 10 [default = 0];
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->function());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSignal::MergeFrom(const DeviceSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obsoletetype()) {
      set_obsoletetype(from.obsoletetype());
    }
    if (from.has_byteorder()) {
      set_byteorder(from.byteorder());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_validityoffset()) {
      set_validityoffset(from.validityoffset());
    }
    if (from.has_validitybit()) {
      set_validitybit(from.validitybit());
    }
    if (from.has_valueoffset()) {
      set_valueoffset(from.valueoffset());
    }
    if (from.has_valuebit()) {
      set_valuebit(from.valuebit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSignal::CopyFrom(const DeviceSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSignal::IsInitialized() const {

  return true;
}

void DeviceSignal::Swap(DeviceSignal* other) {
  if (other != this) {
    std::swap(obsoletetype_, other->obsoletetype_);
    std::swap(byteorder_, other->byteorder_);
    std::swap(format_, other->format_);
    std::swap(size_, other->size_);
    std::swap(validityoffset_, other->validityoffset_);
    std::swap(validitybit_, other->validitybit_);
    std::swap(valueoffset_, other->valueoffset_);
    std::swap(valuebit_, other->valuebit_);
    std::swap(type_, other->type_);
    std::swap(function_, other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSignal_descriptor_;
  metadata.reflection = DeviceSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Workstation::kTypeFieldNumber;
#endif  // !_MSC_VER

Workstation::Workstation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Workstation::InitAsDefaultInstance() {
}

Workstation::Workstation(const Workstation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Workstation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Workstation::~Workstation() {
  SharedDtor();
}

void Workstation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Workstation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Workstation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Workstation_descriptor_;
}

const Workstation& Workstation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Workstation* Workstation::default_instance_ = NULL;

Workstation* Workstation::New() const {
  return new Workstation;
}

void Workstation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Workstation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Workstation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Workstation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Workstation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Workstation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Workstation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Workstation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Workstation::MergeFrom(const Workstation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Workstation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workstation::CopyFrom(const Workstation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workstation::IsInitialized() const {

  return true;
}

void Workstation::Swap(Workstation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Workstation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Workstation_descriptor_;
  metadata.reflection = Workstation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Software::kTypeFieldNumber;
#endif  // !_MSC_VER

Software::Software()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Software::InitAsDefaultInstance() {
}

Software::Software(const Software& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Software::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Software::~Software() {
  SharedDtor();
}

void Software::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Software::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Software::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Software_descriptor_;
}

const Software& Software::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Software* Software::default_instance_ = NULL;

Software* Software::New() const {
  return new Software;
}

void Software::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Software::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Software::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Software::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Software::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Software::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Software* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Software*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Software::MergeFrom(const Software& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Software::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Software::CopyFrom(const Software& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {

  return true;
}

void Software::Swap(Software* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Software::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Software_descriptor_;
  metadata.reflection = Software_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleConfiguration::kStructDescriptionFieldNumber;
const int ModuleConfiguration::kValuesFieldNumber;
const int ModuleConfiguration::kNameFieldNumber;
#endif  // !_MSC_VER

ModuleConfiguration::ModuleConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleConfiguration::InitAsDefaultInstance() {
}

ModuleConfiguration::ModuleConfiguration(const ModuleConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleConfiguration::SharedCtor() {
  _cached_size_ = 0;
  struct_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleConfiguration::~ModuleConfiguration() {
  SharedDtor();
}

void ModuleConfiguration::SharedDtor() {
  if (struct_description_ != &::google::protobuf::internal::kEmptyString) {
    delete struct_description_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModuleConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleConfiguration_descriptor_;
}

const ModuleConfiguration& ModuleConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ModuleConfiguration* ModuleConfiguration::default_instance_ = NULL;

ModuleConfiguration* ModuleConfiguration::New() const {
  return new ModuleConfiguration;
}

void ModuleConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_struct_description()) {
      if (struct_description_ != &::google::protobuf::internal::kEmptyString) {
        struct_description_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string struct_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_struct_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->struct_description().data(), this->struct_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .Proto.ModuleConfigurationValue values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string struct_description = 1;
  if (has_struct_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struct_description().data(), this->struct_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->struct_description(), output);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string struct_description = 1;
  if (has_struct_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struct_description().data(), this->struct_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->struct_description(), target);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string struct_description = 1;
    if (has_struct_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struct_description());
    }

    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Proto.ModuleConfigurationValue values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleConfiguration::MergeFrom(const ModuleConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_struct_description()) {
      set_struct_description(from.struct_description());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfiguration::CopyFrom(const ModuleConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfiguration::IsInitialized() const {

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void ModuleConfiguration::Swap(ModuleConfiguration* other) {
  if (other != this) {
    std::swap(struct_description_, other->struct_description_);
    values_.Swap(&other->values_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleConfiguration_descriptor_;
  metadata.reflection = ModuleConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleConfigurationValue::kNameFieldNumber;
const int ModuleConfigurationValue::kValueFieldNumber;
#endif  // !_MSC_VER

ModuleConfigurationValue::ModuleConfigurationValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleConfigurationValue::InitAsDefaultInstance() {
}

ModuleConfigurationValue::ModuleConfigurationValue(const ModuleConfigurationValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleConfigurationValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleConfigurationValue::~ModuleConfigurationValue() {
  SharedDtor();
}

void ModuleConfigurationValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ModuleConfigurationValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleConfigurationValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleConfigurationValue_descriptor_;
}

const ModuleConfigurationValue& ModuleConfigurationValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ModuleConfigurationValue* ModuleConfigurationValue::default_instance_ = NULL;

ModuleConfigurationValue* ModuleConfigurationValue::New() const {
  return new ModuleConfigurationValue;
}

void ModuleConfigurationValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleConfigurationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleConfigurationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleConfigurationValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleConfigurationValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleConfigurationValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleConfigurationValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleConfigurationValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleConfigurationValue::MergeFrom(const ModuleConfigurationValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleConfigurationValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfigurationValue::CopyFrom(const ModuleConfigurationValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfigurationValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModuleConfigurationValue::Swap(ModuleConfigurationValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleConfigurationValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleConfigurationValue_descriptor_;
  metadata.reflection = ModuleConfigurationValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kNameFieldNumber;
const int Property::kValueFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  SharedDtor();
}

void Property::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)
