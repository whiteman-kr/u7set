// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* wstring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wstring_reflection_ = NULL;
const ::google::protobuf::Descriptor* FontParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbElementCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbElementCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbElementXml_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbElementXml_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblElementSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblElementSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblElementParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblElementParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblParamValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblParamValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicScheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicScheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosRectImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosRectImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosLineImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosLineImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosConnectionImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosConnectionImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemConnectionLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemConnectionLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblConnectionPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblConnectionPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItemRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItemRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItemLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItemLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemInputSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemInputSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemOutputSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemOutputSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemFblElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemFblElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceRoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceRack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceRack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceChassis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceChassis_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceController_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceController_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceDiagSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceDiagSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleConfigurationValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleConfigurationValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SchemeUnit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionDirrection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FblSignalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FblParamType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialization_2eproto() {
  protobuf_AddDesc_serialization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialization.proto");
  GOOGLE_CHECK(file != NULL);
  Uuid_descriptor_ = file->message_type(0);
  static const int Uuid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, uuid_),
  };
  Uuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uuid_descriptor_,
      Uuid::default_instance_,
      Uuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uuid));
  wstring_descriptor_ = file->message_type(1);
  static const int wstring_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, text_),
  };
  wstring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wstring_descriptor_,
      wstring::default_instance_,
      wstring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wstring));
  FontParam_descriptor_ = file->message_type(2);
  static const int FontParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, italic_),
  };
  FontParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontParam_descriptor_,
      FontParam::default_instance_,
      FontParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontParam));
  VideoItemPoint_descriptor_ = file->message_type(3);
  static const int VideoItemPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemPoint, y_),
  };
  VideoItemPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemPoint_descriptor_,
      VideoItemPoint::default_instance_,
      VideoItemPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemPoint));
  Envelope_descriptor_ = file->message_type(4);
  static const int Envelope_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, classnamehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, videoitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, deviceobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, videoframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, videolayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, fblelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, configuration_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  Configuration_descriptor_ = file->message_type(5);
  static const int Configuration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, globals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, videoframesids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, videoframes_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  AfbElementCollection_descriptor_ = file->message_type(6);
  static const int AfbElementCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, elements_),
  };
  AfbElementCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbElementCollection_descriptor_,
      AfbElementCollection::default_instance_,
      AfbElementCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbElementCollection));
  AfbElementXml_descriptor_ = file->message_type(7);
  static const int AfbElementXml_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, data_),
  };
  AfbElementXml_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbElementXml_descriptor_,
      AfbElementXml::default_instance_,
      AfbElementXml_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbElementXml));
  FblElement_descriptor_ = file->message_type(8);
  static const int FblElement_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, inputsignals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, outputsignals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, params_),
  };
  FblElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblElement_descriptor_,
      FblElement::default_instance_,
      FblElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblElement));
  FblElementSignal_descriptor_ = file->message_type(9);
  static const int FblElementSignal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementSignal, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementSignal, type_),
  };
  FblElementSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblElementSignal_descriptor_,
      FblElementSignal::default_instance_,
      FblElementSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblElementSignal));
  FblElementParam_descriptor_ = file->message_type(10);
  static const int FblElementParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, defaultvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, lowlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, highlimit_),
  };
  FblElementParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblElementParam_descriptor_,
      FblElementParam::default_instance_,
      FblElementParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElementParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblElementParam));
  FblParamValue_descriptor_ = file->message_type(11);
  static const int FblParamValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblParamValue, integralvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblParamValue, floatingpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblParamValue, discrete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblParamValue, type_),
  };
  FblParamValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblParamValue_descriptor_,
      FblParamValue::default_instance_,
      FblParamValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblParamValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblParamValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblParamValue));
  VideoFrame_descriptor_ = file->message_type(12);
  static const int VideoFrame_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, afbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, logics_scheme_),
  };
  VideoFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoFrame_descriptor_,
      VideoFrame::default_instance_,
      VideoFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoFrame));
  LogicScheme_descriptor_ = file->message_type(13);
  static const int LogicScheme_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicScheme, hardware_strids_),
  };
  LogicScheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicScheme_descriptor_,
      LogicScheme::default_instance_,
      LogicScheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicScheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicScheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicScheme));
  VideoLayer_descriptor_ = file->message_type(14);
  static const int VideoLayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, compile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, items_),
  };
  VideoLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoLayer_descriptor_,
      VideoLayer::default_instance_,
      VideoLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoLayer));
  VideoItem_descriptor_ = file->message_type(15);
  static const int VideoItem_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, isstatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, itemunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, acceptclick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, clickscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, posrectimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, poslineimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, posconnectionimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, fblitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, fblitemrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, fblitemline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, connectionline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, inputsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, outputsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, videoitemfblelement_),
  };
  VideoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItem_descriptor_,
      VideoItem::default_instance_,
      VideoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItem));
  PosRectImpl_descriptor_ = file->message_type(16);
  static const int PosRectImpl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, leftdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, topdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, widthdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, heightdocpt_),
  };
  PosRectImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosRectImpl_descriptor_,
      PosRectImpl::default_instance_,
      PosRectImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosRectImpl));
  PosLineImpl_descriptor_ = file->message_type(17);
  static const int PosLineImpl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, startxdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, startydocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, endxdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, endydocpt_),
  };
  PosLineImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosLineImpl_descriptor_,
      PosLineImpl::default_instance_,
      PosLineImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosLineImpl));
  PosConnectionImpl_descriptor_ = file->message_type(18);
  static const int PosConnectionImpl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, points_),
  };
  PosConnectionImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosConnectionImpl_descriptor_,
      PosConnectionImpl::default_instance_,
      PosConnectionImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosConnectionImpl));
  VideoItemRect_descriptor_ = file->message_type(19);
  static const int VideoItemRect_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, drawrect_),
  };
  VideoItemRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemRect_descriptor_,
      VideoItemRect::default_instance_,
      VideoItemRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemRect));
  VideoItemLine_descriptor_ = file->message_type(20);
  static const int VideoItemLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemLine, linecolor_),
  };
  VideoItemLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemLine_descriptor_,
      VideoItemLine::default_instance_,
      VideoItemLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemLine));
  VideoItemConnectionLine_descriptor_ = file->message_type(21);
  static const int VideoItemConnectionLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemConnectionLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemConnectionLine, linecolor_),
  };
  VideoItemConnectionLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemConnectionLine_descriptor_,
      VideoItemConnectionLine::default_instance_,
      VideoItemConnectionLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemConnectionLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemConnectionLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemConnectionLine));
  FblConnectionPoint_descriptor_ = file->message_type(22);
  static const int FblConnectionPoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, dirrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, signaluuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, signalstrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, signalcaption_),
  };
  FblConnectionPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblConnectionPoint_descriptor_,
      FblConnectionPoint::default_instance_,
      FblConnectionPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblConnectionPoint));
  FblItem_descriptor_ = file->message_type(23);
  static const int FblItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, points_),
  };
  FblItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItem_descriptor_,
      FblItem::default_instance_,
      FblItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItem));
  FblItemRect_descriptor_ = file->message_type(24);
  static const int FblItemRect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, font_),
  };
  FblItemRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItemRect_descriptor_,
      FblItemRect::default_instance_,
      FblItemRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItemRect));
  FblItemLine_descriptor_ = file->message_type(25);
  static const int FblItemLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, linecolor_),
  };
  FblItemLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItemLine_descriptor_,
      FblItemLine::default_instance_,
      FblItemLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItemLine));
  VideoItemSignal_descriptor_ = file->message_type(26);
  static const int VideoItemSignal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemSignal, signalstrids_),
  };
  VideoItemSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemSignal_descriptor_,
      VideoItemSignal::default_instance_,
      VideoItemSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemSignal));
  VideoItemInputSignal_descriptor_ = file->message_type(27);
  static const int VideoItemInputSignal_offsets_[1] = {
  };
  VideoItemInputSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemInputSignal_descriptor_,
      VideoItemInputSignal::default_instance_,
      VideoItemInputSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemInputSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemInputSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemInputSignal));
  VideoItemOutputSignal_descriptor_ = file->message_type(28);
  static const int VideoItemOutputSignal_offsets_[1] = {
  };
  VideoItemOutputSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemOutputSignal_descriptor_,
      VideoItemOutputSignal::default_instance_,
      VideoItemOutputSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemOutputSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemOutputSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemOutputSignal));
  VideoItemLink_descriptor_ = file->message_type(29);
  static const int VideoItemLink_offsets_[1] = {
  };
  VideoItemLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemLink_descriptor_,
      VideoItemLink::default_instance_,
      VideoItemLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemLink));
  VideoItemFblElement_descriptor_ = file->message_type(30);
  static const int VideoItemFblElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFblElement, afbguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFblElement, params_),
  };
  VideoItemFblElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemFblElement_descriptor_,
      VideoItemFblElement::default_instance_,
      VideoItemFblElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFblElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFblElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemFblElement));
  DeviceObject_descriptor_ = file->message_type(31);
  static const int DeviceObject_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, childrestriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, rack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, chassis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, diagsignal_),
  };
  DeviceObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceObject_descriptor_,
      DeviceObject::default_instance_,
      DeviceObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceObject));
  DeviceRoot_descriptor_ = file->message_type(32);
  static const int DeviceRoot_offsets_[1] = {
  };
  DeviceRoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceRoot_descriptor_,
      DeviceRoot::default_instance_,
      DeviceRoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceRoot));
  DeviceSystem_descriptor_ = file->message_type(33);
  static const int DeviceSystem_offsets_[1] = {
  };
  DeviceSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSystem_descriptor_,
      DeviceSystem::default_instance_,
      DeviceSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSystem));
  DeviceRack_descriptor_ = file->message_type(34);
  static const int DeviceRack_offsets_[1] = {
  };
  DeviceRack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceRack_descriptor_,
      DeviceRack::default_instance_,
      DeviceRack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceRack));
  DeviceChassis_descriptor_ = file->message_type(35);
  static const int DeviceChassis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, type_),
  };
  DeviceChassis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceChassis_descriptor_,
      DeviceChassis::default_instance_,
      DeviceChassis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceChassis));
  DeviceModule_descriptor_ = file->message_type(36);
  static const int DeviceModule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, module_configuration_),
  };
  DeviceModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceModule_descriptor_,
      DeviceModule::default_instance_,
      DeviceModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceModule));
  DeviceController_descriptor_ = file->message_type(37);
  static const int DeviceController_offsets_[1] = {
  };
  DeviceController_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceController_descriptor_,
      DeviceController::default_instance_,
      DeviceController_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceController, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceController, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceController));
  DeviceDiagSignal_descriptor_ = file->message_type(38);
  static const int DeviceDiagSignal_offsets_[1] = {
  };
  DeviceDiagSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceDiagSignal_descriptor_,
      DeviceDiagSignal::default_instance_,
      DeviceDiagSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDiagSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDiagSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceDiagSignal));
  ModuleConfiguration_descriptor_ = file->message_type(39);
  static const int ModuleConfiguration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, struct_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, name_),
  };
  ModuleConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleConfiguration_descriptor_,
      ModuleConfiguration::default_instance_,
      ModuleConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleConfiguration));
  ModuleConfigurationValue_descriptor_ = file->message_type(40);
  static const int ModuleConfigurationValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, value_),
  };
  ModuleConfigurationValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleConfigurationValue_descriptor_,
      ModuleConfigurationValue::default_instance_,
      ModuleConfigurationValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleConfigurationValue));
  SchemeUnit_descriptor_ = file->enum_type(0);
  ConnectionDirrection_descriptor_ = file->enum_type(1);
  FblSignalType_descriptor_ = file->enum_type(2);
  FblParamType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uuid_descriptor_, &Uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wstring_descriptor_, &wstring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontParam_descriptor_, &FontParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemPoint_descriptor_, &VideoItemPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbElementCollection_descriptor_, &AfbElementCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbElementXml_descriptor_, &AfbElementXml::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblElement_descriptor_, &FblElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblElementSignal_descriptor_, &FblElementSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblElementParam_descriptor_, &FblElementParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblParamValue_descriptor_, &FblParamValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoFrame_descriptor_, &VideoFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicScheme_descriptor_, &LogicScheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoLayer_descriptor_, &VideoLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItem_descriptor_, &VideoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosRectImpl_descriptor_, &PosRectImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosLineImpl_descriptor_, &PosLineImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosConnectionImpl_descriptor_, &PosConnectionImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemRect_descriptor_, &VideoItemRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemLine_descriptor_, &VideoItemLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemConnectionLine_descriptor_, &VideoItemConnectionLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblConnectionPoint_descriptor_, &FblConnectionPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItem_descriptor_, &FblItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItemRect_descriptor_, &FblItemRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItemLine_descriptor_, &FblItemLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemSignal_descriptor_, &VideoItemSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemInputSignal_descriptor_, &VideoItemInputSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemOutputSignal_descriptor_, &VideoItemOutputSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemLink_descriptor_, &VideoItemLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemFblElement_descriptor_, &VideoItemFblElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceObject_descriptor_, &DeviceObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceRoot_descriptor_, &DeviceRoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSystem_descriptor_, &DeviceSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceRack_descriptor_, &DeviceRack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceChassis_descriptor_, &DeviceChassis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceModule_descriptor_, &DeviceModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceController_descriptor_, &DeviceController::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceDiagSignal_descriptor_, &DeviceDiagSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleConfiguration_descriptor_, &ModuleConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleConfigurationValue_descriptor_, &ModuleConfigurationValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialization_2eproto() {
  delete Uuid::default_instance_;
  delete Uuid_reflection_;
  delete wstring::default_instance_;
  delete wstring_reflection_;
  delete FontParam::default_instance_;
  delete FontParam_reflection_;
  delete VideoItemPoint::default_instance_;
  delete VideoItemPoint_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete AfbElementCollection::default_instance_;
  delete AfbElementCollection_reflection_;
  delete AfbElementXml::default_instance_;
  delete AfbElementXml_reflection_;
  delete FblElement::default_instance_;
  delete FblElement_reflection_;
  delete FblElementSignal::default_instance_;
  delete FblElementSignal_reflection_;
  delete FblElementParam::default_instance_;
  delete FblElementParam_reflection_;
  delete FblParamValue::default_instance_;
  delete FblParamValue_reflection_;
  delete VideoFrame::default_instance_;
  delete VideoFrame_reflection_;
  delete LogicScheme::default_instance_;
  delete LogicScheme_reflection_;
  delete VideoLayer::default_instance_;
  delete VideoLayer_reflection_;
  delete VideoItem::default_instance_;
  delete VideoItem_reflection_;
  delete PosRectImpl::default_instance_;
  delete PosRectImpl_reflection_;
  delete PosLineImpl::default_instance_;
  delete PosLineImpl_reflection_;
  delete PosConnectionImpl::default_instance_;
  delete PosConnectionImpl_reflection_;
  delete VideoItemRect::default_instance_;
  delete VideoItemRect_reflection_;
  delete VideoItemLine::default_instance_;
  delete VideoItemLine_reflection_;
  delete VideoItemConnectionLine::default_instance_;
  delete VideoItemConnectionLine_reflection_;
  delete FblConnectionPoint::default_instance_;
  delete FblConnectionPoint_reflection_;
  delete FblItem::default_instance_;
  delete FblItem_reflection_;
  delete FblItemRect::default_instance_;
  delete FblItemRect_reflection_;
  delete FblItemLine::default_instance_;
  delete FblItemLine_reflection_;
  delete VideoItemSignal::default_instance_;
  delete VideoItemSignal_reflection_;
  delete VideoItemInputSignal::default_instance_;
  delete VideoItemInputSignal_reflection_;
  delete VideoItemOutputSignal::default_instance_;
  delete VideoItemOutputSignal_reflection_;
  delete VideoItemLink::default_instance_;
  delete VideoItemLink_reflection_;
  delete VideoItemFblElement::default_instance_;
  delete VideoItemFblElement_reflection_;
  delete DeviceObject::default_instance_;
  delete DeviceObject_reflection_;
  delete DeviceRoot::default_instance_;
  delete DeviceRoot_reflection_;
  delete DeviceSystem::default_instance_;
  delete DeviceSystem_reflection_;
  delete DeviceRack::default_instance_;
  delete DeviceRack_reflection_;
  delete DeviceChassis::default_instance_;
  delete DeviceChassis_reflection_;
  delete DeviceModule::default_instance_;
  delete DeviceModule_reflection_;
  delete DeviceController::default_instance_;
  delete DeviceController_reflection_;
  delete DeviceDiagSignal::default_instance_;
  delete DeviceDiagSignal_reflection_;
  delete ModuleConfiguration::default_instance_;
  delete ModuleConfiguration_reflection_;
  delete ModuleConfigurationValue::default_instance_;
  delete ModuleConfigurationValue_reflection_;
}

void protobuf_AddDesc_serialization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023serialization.proto\022\005Proto\"\024\n\004Uuid\022\014\n\004"
    "uuid\030\001 \002(\014\"\027\n\007wstring\022\014\n\004text\030\001 \002(\014\"U\n\tF"
    "ontParam\022\034\n\004name\030\001 \002(\0132\016.Proto.wstring\022\014"
    "\n\004size\030\002 \002(\001\022\014\n\004bold\030\003 \002(\010\022\016\n\006italic\030\004 \002"
    "(\010\"&\n\016VideoItemPoint\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002"
    "(\001\"\223\002\n\010Envelope\022\025\n\rclassnamehash\030\001 \002(\r\022#"
    "\n\tvideoitem\030\006 \001(\0132\020.Proto.VideoItem\022)\n\014d"
    "eviceobject\030\007 \001(\0132\023.Proto.DeviceObject\022%"
    "\n\nvideoframe\030d \001(\0132\021.Proto.VideoFrame\022%\n"
    "\nvideolayer\030e \001(\0132\021.Proto.VideoLayer\022%\n\n"
    "fblelement\030f \001(\0132\021.Proto.FblElement\022+\n\rc"
    "onfiguration\030g \001(\0132\024.Proto.Configuration"
    "\"\371\001\n\rConfiguration\022\031\n\004uuid\030\001 \002(\0132\013.Proto"
    ".Uuid\022\035\n\005strID\030\002 \002(\0132\016.Proto.wstring\022\037\n\007"
    "caption\030\003 \002(\0132\016.Proto.wstring\022!\n\tvariabl"
    "es\030\004 \002(\0132\016.Proto.wstring\022\037\n\007globals\030\005 \002("
    "\0132\016.Proto.wstring\022#\n\016videoFramesIDs\030d \003("
    "\0132\013.Proto.Uuid\022$\n\013videoFrames\030e \003(\0132\017.Pr"
    "oto.Envelope\">\n\024AfbElementCollection\022&\n\010"
    "elements\030\001 \003(\0132\024.Proto.AfbElementXml\"\035\n\r"
    "AfbElementXml\022\014\n\004data\030\001 \002(\014\"\376\001\n\nFblEleme"
    "nt\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022\035\n\005strID\030\002"
    " \002(\0132\016.Proto.wstring\022\037\n\007caption\030\003 \002(\0132\016."
    "Proto.wstring\022\016\n\006opcode\030\004 \002(\r\022-\n\014inputSi"
    "gnals\030\013 \003(\0132\027.Proto.FblElementSignal\022.\n\r"
    "outputSignals\030\014 \003(\0132\027.Proto.FblElementSi"
    "gnal\022&\n\006params\030\r \003(\0132\026.Proto.FblElementP"
    "aram\"W\n\020FblElementSignal\022\037\n\007caption\030\001 \002("
    "\0132\016.Proto.wstring\022\"\n\004type\030\002 \002(\0162\024.Proto."
    "FblSignalType\"\367\001\n\017FblElementParam\022\037\n\007cap"
    "tion\030\001 \002(\0132\016.Proto.wstring\022!\n\004type\030\002 \002(\016"
    "2\023.Proto.FblParamType\022#\n\005value\030\003 \002(\0132\024.P"
    "roto.FblParamValue\022*\n\014defaultvalue\030\004 \002(\013"
    "2\024.Proto.FblParamValue\022&\n\010lowlimit\030\005 \002(\013"
    "2\024.Proto.FblParamValue\022\'\n\thighlimit\030\006 \002("
    "\0132\024.Proto.FblParamValue\"]\n\rFblParamValue"
    "\022\025\n\rintegralvalue\030\001 \002(\005\022\025\n\rfloatingpoint"
    "\030\002 \002(\001\022\020\n\010discrete\030\003 \002(\010\022\014\n\004type\030\004 \002(\005\"\237"
    "\002\n\nVideoFrame\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid"
    "\022\035\n\005strID\030\002 \002(\0132\016.Proto.wstring\022\037\n\007capti"
    "on\030\003 \002(\0132\016.Proto.wstring\022\r\n\005width\030\004 \002(\001\022"
    "\016\n\006height\030\005 \002(\001\022\037\n\004unit\030\006 \002(\0162\021.Proto.Sc"
    "hemeUnit\022\037\n\006layers\030d \003(\0132\017.Proto.Envelop"
    "e\022)\n\004afbs\030e \002(\0132\033.Proto.AfbElementCollec"
    "tion\022*\n\rlogics_scheme\030\310\001 \001(\0132\022.Proto.Log"
    "icScheme\"6\n\013LogicScheme\022\'\n\017hardware_stri"
    "ds\030\001 \003(\0132\016.Proto.wstring\"\223\001\n\nVideoLayer\022"
    "\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022\034\n\004name\030\002 \002(\013"
    "2\016.Proto.wstring\022\017\n\007compile\030\003 \002(\010\022\014\n\004sho"
    "w\030\004 \002(\010\022\r\n\005print\030\005 \002(\010\022\036\n\005items\030\017 \003(\0132\017."
    "Proto.Envelope\"\226\006\n\tVideoItem\022\031\n\004uuid\030\001 \002"
    "(\0132\013.Proto.Uuid\022\020\n\010isStatic\030\002 \002(\010\022\020\n\010isL"
    "ocked\030\003 \002(\010\022#\n\010itemUnit\030\004 \002(\0162\021.Proto.Sc"
    "hemeUnit\022\032\n\013acceptClick\030\005 \001(\010:\005false\022#\n\013"
    "clickScript\030\006 \001(\0132\016.Proto.wstring\022\'\n\013Pos"
    "RectImpl\030\n \001(\0132\022.Proto.PosRectImpl\022\'\n\013Po"
    "sLineImpl\030\013 \001(\0132\022.Proto.PosLineImpl\0223\n\021P"
    "osConnectionImpl\030\014 \001(\0132\030.Proto.PosConnec"
    "tionImpl\022\037\n\007FblItem\030j \001(\0132\016.Proto.FblIte"
    "m\022\'\n\013FblItemRect\030k \001(\0132\022.Proto.FblItemRe"
    "ct\022\'\n\013FblItemLine\030l \001(\0132\022.Proto.FblItemL"
    "ine\022\"\n\004Rect\030t \001(\0132\024.Proto.VideoItemRect\022"
    "\"\n\004Line\030u \001(\0132\024.Proto.VideoItemLine\0226\n\016C"
    "onnectionLine\030v \001(\0132\036.Proto.VideoItemCon"
    "nectionLine\022&\n\006Signal\030| \001(\0132\026.Proto.Vide"
    "oItemSignal\0220\n\013InputSignal\030} \001(\0132\033.Proto"
    ".VideoItemInputSignal\0222\n\014OutputSignal\030~ "
    "\001(\0132\034.Proto.VideoItemOutputSignal\022\"\n\004Lin"
    "k\030\177 \001(\0132\024.Proto.VideoItemLink\0228\n\023VideoIt"
    "emFblElement\030\200\001 \001(\0132\032.Proto.VideoItemFbl"
    "Element\"[\n\013PosRectImpl\022\021\n\tleftDocPt\030\001 \002("
    "\001\022\020\n\010topDocPt\030\002 \002(\001\022\022\n\nwidthDocPt\030\003 \002(\001\022"
    "\023\n\013heightDocPt\030\004 \002(\001\"]\n\013PosLineImpl\022\023\n\013s"
    "tartXDocPt\030\001 \002(\001\022\023\n\013startYDocPt\030\002 \002(\001\022\021\n"
    "\tendXDocPt\030\003 \002(\001\022\021\n\tendYDocPt\030\004 \002(\001\":\n\021P"
    "osConnectionImpl\022%\n\006points\030\001 \003(\0132\025.Proto"
    ".VideoItemPoint\"\274\001\n\rVideoItemRect\022\016\n\006wei"
    "ght\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\022\021\n\tfillColo"
    "r\030\003 \002(\r\022\034\n\004text\030\004 \002(\0132\016.Proto.wstring\022\021\n"
    "\ttextColor\030\005 \002(\r\022\036\n\004font\030\006 \002(\0132\020.Proto.F"
    "ontParam\022\014\n\004fill\030\007 \002(\010\022\026\n\010drawrect\030\010 \001(\010"
    ":\004true\"2\n\rVideoItemLine\022\016\n\006weight\030\001 \002(\001\022"
    "\021\n\tlineColor\030\002 \002(\r\"<\n\027VideoItemConnectio"
    "nLine\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r"
    "\"\363\001\n\022FblConnectionPoint\022$\n\005point\030\001 \002(\0132\025"
    ".Proto.VideoItemPoint\022/\n\ndirrection\030\002 \002("
    "\0162\033.Proto.ConnectionDirrection\022\031\n\004uuid\030\003"
    " \002(\0132\013.Proto.Uuid\022\037\n\nsignalUuid\030\n \001(\0132\013."
    "Proto.Uuid\022#\n\013signalStrID\030\013 \001(\0132\016.Proto."
    "wstring\022%\n\rsignalCaption\030\014 \001(\0132\016.Proto.w"
    "string\"4\n\007FblItem\022)\n\006points\030\001 \003(\0132\031.Prot"
    "o.FblConnectionPoint\"v\n\013FblItemRect\022\016\n\006w"
    "eight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\022\021\n\tfillCo"
    "lor\030\003 \002(\r\022\021\n\ttextColor\030\004 \002(\r\022\036\n\004font\030\005 \002"
    "(\0132\020.Proto.FontParam\"0\n\013FblItemLine\022\016\n\006w"
    "eight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\"7\n\017VideoI"
    "temSignal\022$\n\014signalStrIDs\030\001 \003(\0132\016.Proto."
    "wstring\"\026\n\024VideoItemInputSignal\"\027\n\025Video"
    "ItemOutputSignal\"\017\n\rVideoItemLink\"[\n\023Vid"
    "eoItemFblElement\022\034\n\007afbGuid\030\001 \002(\0132\013.Prot"
    "o.Uuid\022&\n\006params\030\002 \003(\0132\026.Proto.FblElemen"
    "tParam\"\210\004\n\014DeviceObject\022\031\n\004uuid\030\001 \002(\0132\013."
    "Proto.Uuid\022\035\n\005strId\030\002 \002(\0132\016.Proto.wstrin"
    "g\022\037\n\007caption\030\003 \002(\0132\016.Proto.wstring\022(\n\020ch"
    "ildRestriction\030\004 \001(\0132\016.Proto.wstring\022\020\n\005"
    "place\030\005 \001(\005:\0010\022\025\n\006preset\030  \001(\010:\005false\022\031\n"
    "\npresetRoot\030! \001(\010:\005false\022\"\n\npresetName\030\""
    " \001(\0132\016.Proto.wstring\022\037\n\004Root\030d \001(\0132\021.Pro"
    "to.DeviceRoot\022#\n\006System\030e \001(\0132\023.Proto.De"
    "viceSystem\022\037\n\004Rack\030f \001(\0132\021.Proto.DeviceR"
    "ack\022%\n\007Chassis\030g \001(\0132\024.Proto.DeviceChass"
    "is\022#\n\006Module\030h \001(\0132\023.Proto.DeviceModule\022"
    "+\n\nController\030i \001(\0132\027.Proto.DeviceContro"
    "ller\022+\n\nDiagSignal\030j \001(\0132\027.Proto.DeviceD"
    "iagSignal\"\014\n\nDeviceRoot\"\016\n\014DeviceSystem\""
    "\014\n\nDeviceRack\" \n\rDeviceChassis\022\017\n\004type\030\001"
    " \001(\005:\0010\"Y\n\014DeviceModule\022\017\n\004type\030\001 \001(\005:\0010"
    "\0228\n\024module_configuration\030\003 \001(\0132\032.Proto.M"
    "oduleConfiguration\"\022\n\020DeviceController\"\022"
    "\n\020DeviceDiagSignal\"p\n\023ModuleConfiguratio"
    "n\022\032\n\022struct_description\030\001 \001(\t\022/\n\006values\030"
    "\002 \003(\0132\037.Proto.ModuleConfigurationValue\022\014"
    "\n\004name\030\003 \001(\t\"7\n\030ModuleConfigurationValue"
    "\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t*3\n\nSchemeU"
    "nit\022\013\n\007Display\020\000\022\016\n\nMillimeter\020\001\022\010\n\004Inch"
    "\020\002*-\n\024ConnectionDirrection\022\t\n\005Input\020\000\022\n\n"
    "\006Output\020\001*)\n\rFblSignalType\022\n\n\006Analog\020\000\022\014"
    "\n\010Discrete\020\001*N\n\014FblParamType\022\022\n\016AnalogIn"
    "tegral\020\000\022\027\n\023AnalogFloatingPoint\020\001\022\021\n\rDis"
    "creteValue\020\002", 5172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialization.proto", &protobuf_RegisterTypes);
  Uuid::default_instance_ = new Uuid();
  wstring::default_instance_ = new wstring();
  FontParam::default_instance_ = new FontParam();
  VideoItemPoint::default_instance_ = new VideoItemPoint();
  Envelope::default_instance_ = new Envelope();
  Configuration::default_instance_ = new Configuration();
  AfbElementCollection::default_instance_ = new AfbElementCollection();
  AfbElementXml::default_instance_ = new AfbElementXml();
  FblElement::default_instance_ = new FblElement();
  FblElementSignal::default_instance_ = new FblElementSignal();
  FblElementParam::default_instance_ = new FblElementParam();
  FblParamValue::default_instance_ = new FblParamValue();
  VideoFrame::default_instance_ = new VideoFrame();
  LogicScheme::default_instance_ = new LogicScheme();
  VideoLayer::default_instance_ = new VideoLayer();
  VideoItem::default_instance_ = new VideoItem();
  PosRectImpl::default_instance_ = new PosRectImpl();
  PosLineImpl::default_instance_ = new PosLineImpl();
  PosConnectionImpl::default_instance_ = new PosConnectionImpl();
  VideoItemRect::default_instance_ = new VideoItemRect();
  VideoItemLine::default_instance_ = new VideoItemLine();
  VideoItemConnectionLine::default_instance_ = new VideoItemConnectionLine();
  FblConnectionPoint::default_instance_ = new FblConnectionPoint();
  FblItem::default_instance_ = new FblItem();
  FblItemRect::default_instance_ = new FblItemRect();
  FblItemLine::default_instance_ = new FblItemLine();
  VideoItemSignal::default_instance_ = new VideoItemSignal();
  VideoItemInputSignal::default_instance_ = new VideoItemInputSignal();
  VideoItemOutputSignal::default_instance_ = new VideoItemOutputSignal();
  VideoItemLink::default_instance_ = new VideoItemLink();
  VideoItemFblElement::default_instance_ = new VideoItemFblElement();
  DeviceObject::default_instance_ = new DeviceObject();
  DeviceRoot::default_instance_ = new DeviceRoot();
  DeviceSystem::default_instance_ = new DeviceSystem();
  DeviceRack::default_instance_ = new DeviceRack();
  DeviceChassis::default_instance_ = new DeviceChassis();
  DeviceModule::default_instance_ = new DeviceModule();
  DeviceController::default_instance_ = new DeviceController();
  DeviceDiagSignal::default_instance_ = new DeviceDiagSignal();
  ModuleConfiguration::default_instance_ = new ModuleConfiguration();
  ModuleConfigurationValue::default_instance_ = new ModuleConfigurationValue();
  Uuid::default_instance_->InitAsDefaultInstance();
  wstring::default_instance_->InitAsDefaultInstance();
  FontParam::default_instance_->InitAsDefaultInstance();
  VideoItemPoint::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  AfbElementCollection::default_instance_->InitAsDefaultInstance();
  AfbElementXml::default_instance_->InitAsDefaultInstance();
  FblElement::default_instance_->InitAsDefaultInstance();
  FblElementSignal::default_instance_->InitAsDefaultInstance();
  FblElementParam::default_instance_->InitAsDefaultInstance();
  FblParamValue::default_instance_->InitAsDefaultInstance();
  VideoFrame::default_instance_->InitAsDefaultInstance();
  LogicScheme::default_instance_->InitAsDefaultInstance();
  VideoLayer::default_instance_->InitAsDefaultInstance();
  VideoItem::default_instance_->InitAsDefaultInstance();
  PosRectImpl::default_instance_->InitAsDefaultInstance();
  PosLineImpl::default_instance_->InitAsDefaultInstance();
  PosConnectionImpl::default_instance_->InitAsDefaultInstance();
  VideoItemRect::default_instance_->InitAsDefaultInstance();
  VideoItemLine::default_instance_->InitAsDefaultInstance();
  VideoItemConnectionLine::default_instance_->InitAsDefaultInstance();
  FblConnectionPoint::default_instance_->InitAsDefaultInstance();
  FblItem::default_instance_->InitAsDefaultInstance();
  FblItemRect::default_instance_->InitAsDefaultInstance();
  FblItemLine::default_instance_->InitAsDefaultInstance();
  VideoItemSignal::default_instance_->InitAsDefaultInstance();
  VideoItemInputSignal::default_instance_->InitAsDefaultInstance();
  VideoItemOutputSignal::default_instance_->InitAsDefaultInstance();
  VideoItemLink::default_instance_->InitAsDefaultInstance();
  VideoItemFblElement::default_instance_->InitAsDefaultInstance();
  DeviceObject::default_instance_->InitAsDefaultInstance();
  DeviceRoot::default_instance_->InitAsDefaultInstance();
  DeviceSystem::default_instance_->InitAsDefaultInstance();
  DeviceRack::default_instance_->InitAsDefaultInstance();
  DeviceChassis::default_instance_->InitAsDefaultInstance();
  DeviceModule::default_instance_->InitAsDefaultInstance();
  DeviceController::default_instance_->InitAsDefaultInstance();
  DeviceDiagSignal::default_instance_->InitAsDefaultInstance();
  ModuleConfiguration::default_instance_->InitAsDefaultInstance();
  ModuleConfigurationValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialization_2eproto {
  StaticDescriptorInitializer_serialization_2eproto() {
    protobuf_AddDesc_serialization_2eproto();
  }
} static_descriptor_initializer_serialization_2eproto_;
const ::google::protobuf::EnumDescriptor* SchemeUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemeUnit_descriptor_;
}
bool SchemeUnit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionDirrection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionDirrection_descriptor_;
}
bool ConnectionDirrection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FblSignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblSignalType_descriptor_;
}
bool FblSignalType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FblParamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblParamType_descriptor_;
}
bool FblParamType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Uuid::kUuidFieldNumber;
#endif  // !_MSC_VER

Uuid::Uuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Uuid::InitAsDefaultInstance() {
}

Uuid::Uuid(const Uuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Uuid::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uuid::~Uuid() {
  SharedDtor();
}

void Uuid::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void Uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uuid_descriptor_;
}

const Uuid& Uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Uuid* Uuid::default_instance_ = NULL;

Uuid* Uuid::New() const {
  return new Uuid;
}

void Uuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Uuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Uuid::Swap(Uuid* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uuid_descriptor_;
  metadata.reflection = Uuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wstring::kTextFieldNumber;
#endif  // !_MSC_VER

wstring::wstring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wstring::InitAsDefaultInstance() {
}

wstring::wstring(const wstring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wstring::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wstring::~wstring() {
  SharedDtor();
}

void wstring::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void wstring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wstring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wstring_descriptor_;
}

const wstring& wstring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

wstring* wstring::default_instance_ = NULL;

wstring* wstring::New() const {
  return new wstring;
}

void wstring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wstring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wstring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wstring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes text = 1;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wstring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wstring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wstring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wstring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wstring::MergeFrom(const wstring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wstring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wstring::CopyFrom(const wstring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wstring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void wstring::Swap(wstring* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wstring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wstring_descriptor_;
  metadata.reflection = wstring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FontParam::kNameFieldNumber;
const int FontParam::kSizeFieldNumber;
const int FontParam::kBoldFieldNumber;
const int FontParam::kItalicFieldNumber;
#endif  // !_MSC_VER

FontParam::FontParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontParam::InitAsDefaultInstance() {
  name_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FontParam::FontParam(const FontParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontParam::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  size_ = 0;
  bold_ = false;
  italic_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontParam::~FontParam() {
  SharedDtor();
}

void FontParam::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void FontParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontParam_descriptor_;
}

const FontParam& FontParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FontParam* FontParam::default_instance_ = NULL;

FontParam* FontParam::New() const {
  return new FontParam;
}

void FontParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::Proto::wstring::Clear();
    }
    size_ = 0;
    bold_ = false;
    italic_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_size;
        break;
      }

      // required double size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bold;
        break;
      }

      // required bool bold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_italic;
        break;
      }

      // required bool italic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }

  // required double size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->size(), output);
  }

  // required bool bold = 3;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bold(), output);
  }

  // required bool italic = 4;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->italic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }

  // required double size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->size(), target);
  }

  // required bool bold = 3;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bold(), target);
  }

  // required bool italic = 4;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->italic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

    // required double size = 2;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // required bool bold = 3;
    if (has_bold()) {
      total_size += 1 + 1;
    }

    // required bool italic = 4;
    if (has_italic()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontParam::MergeFrom(const FontParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::Proto::wstring::MergeFrom(from.name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontParam::CopyFrom(const FontParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  return true;
}

void FontParam::Swap(FontParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(size_, other->size_);
    std::swap(bold_, other->bold_);
    std::swap(italic_, other->italic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontParam_descriptor_;
  metadata.reflection = FontParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemPoint::kXFieldNumber;
const int VideoItemPoint::kYFieldNumber;
#endif  // !_MSC_VER

VideoItemPoint::VideoItemPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemPoint::InitAsDefaultInstance() {
}

VideoItemPoint::VideoItemPoint(const VideoItemPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemPoint::~VideoItemPoint() {
  SharedDtor();
}

void VideoItemPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemPoint_descriptor_;
}

const VideoItemPoint& VideoItemPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemPoint* VideoItemPoint::default_instance_ = NULL;

VideoItemPoint* VideoItemPoint::New() const {
  return new VideoItemPoint;
}

void VideoItemPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemPoint::MergeFrom(const VideoItemPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemPoint::CopyFrom(const VideoItemPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoItemPoint::Swap(VideoItemPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemPoint_descriptor_;
  metadata.reflection = VideoItemPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Envelope::kClassnamehashFieldNumber;
const int Envelope::kVideoitemFieldNumber;
const int Envelope::kDeviceobjectFieldNumber;
const int Envelope::kVideoframeFieldNumber;
const int Envelope::kVideolayerFieldNumber;
const int Envelope::kFblelementFieldNumber;
const int Envelope::kConfigurationFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  videoitem_ = const_cast< ::Proto::VideoItem*>(&::Proto::VideoItem::default_instance());
  deviceobject_ = const_cast< ::Proto::DeviceObject*>(&::Proto::DeviceObject::default_instance());
  videoframe_ = const_cast< ::Proto::VideoFrame*>(&::Proto::VideoFrame::default_instance());
  videolayer_ = const_cast< ::Proto::VideoLayer*>(&::Proto::VideoLayer::default_instance());
  fblelement_ = const_cast< ::Proto::FblElement*>(&::Proto::FblElement::default_instance());
  configuration_ = const_cast< ::Proto::Configuration*>(&::Proto::Configuration::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  classnamehash_ = 0u;
  videoitem_ = NULL;
  deviceobject_ = NULL;
  videoframe_ = NULL;
  videolayer_ = NULL;
  fblelement_ = NULL;
  configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete videoitem_;
    delete deviceobject_;
    delete videoframe_;
    delete videolayer_;
    delete fblelement_;
    delete configuration_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    classnamehash_ = 0u;
    if (has_videoitem()) {
      if (videoitem_ != NULL) videoitem_->::Proto::VideoItem::Clear();
    }
    if (has_deviceobject()) {
      if (deviceobject_ != NULL) deviceobject_->::Proto::DeviceObject::Clear();
    }
    if (has_videoframe()) {
      if (videoframe_ != NULL) videoframe_->::Proto::VideoFrame::Clear();
    }
    if (has_videolayer()) {
      if (videolayer_ != NULL) videolayer_->::Proto::VideoLayer::Clear();
    }
    if (has_fblelement()) {
      if (fblelement_ != NULL) fblelement_->::Proto::FblElement::Clear();
    }
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::Proto::Configuration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 classnamehash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classnamehash_)));
          set_has_classnamehash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_videoitem;
        break;
      }

      // optional .Proto.VideoItem videoitem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceobject;
        break;
      }

      // optional .Proto.DeviceObject deviceobject = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_videoframe;
        break;
      }

      // optional .Proto.VideoFrame videoframe = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoframe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_videolayer;
        break;
      }

      // optional .Proto.VideoLayer videolayer = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videolayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videolayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_fblelement;
        break;
      }

      // optional .Proto.FblElement fblelement = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fblelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblelement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_configuration;
        break;
      }

      // optional .Proto.Configuration configuration = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 classnamehash = 1;
  if (has_classnamehash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->classnamehash(), output);
  }

  // optional .Proto.VideoItem videoitem = 6;
  if (has_videoitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->videoitem(), output);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (has_deviceobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deviceobject(), output);
  }

  // optional .Proto.VideoFrame videoframe = 100;
  if (has_videoframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->videoframe(), output);
  }

  // optional .Proto.VideoLayer videolayer = 101;
  if (has_videolayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->videolayer(), output);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (has_fblelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->fblelement(), output);
  }

  // optional .Proto.Configuration configuration = 103;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 classnamehash = 1;
  if (has_classnamehash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->classnamehash(), target);
  }

  // optional .Proto.VideoItem videoitem = 6;
  if (has_videoitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->videoitem(), target);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (has_deviceobject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deviceobject(), target);
  }

  // optional .Proto.VideoFrame videoframe = 100;
  if (has_videoframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->videoframe(), target);
  }

  // optional .Proto.VideoLayer videolayer = 101;
  if (has_videolayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->videolayer(), target);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (has_fblelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->fblelement(), target);
  }

  // optional .Proto.Configuration configuration = 103;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 classnamehash = 1;
    if (has_classnamehash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classnamehash());
    }

    // optional .Proto.VideoItem videoitem = 6;
    if (has_videoitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videoitem());
    }

    // optional .Proto.DeviceObject deviceobject = 7;
    if (has_deviceobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceobject());
    }

    // optional .Proto.VideoFrame videoframe = 100;
    if (has_videoframe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videoframe());
    }

    // optional .Proto.VideoLayer videolayer = 101;
    if (has_videolayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videolayer());
    }

    // optional .Proto.FblElement fblelement = 102;
    if (has_fblelement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblelement());
    }

    // optional .Proto.Configuration configuration = 103;
    if (has_configuration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classnamehash()) {
      set_classnamehash(from.classnamehash());
    }
    if (from.has_videoitem()) {
      mutable_videoitem()->::Proto::VideoItem::MergeFrom(from.videoitem());
    }
    if (from.has_deviceobject()) {
      mutable_deviceobject()->::Proto::DeviceObject::MergeFrom(from.deviceobject());
    }
    if (from.has_videoframe()) {
      mutable_videoframe()->::Proto::VideoFrame::MergeFrom(from.videoframe());
    }
    if (from.has_videolayer()) {
      mutable_videolayer()->::Proto::VideoLayer::MergeFrom(from.videolayer());
    }
    if (from.has_fblelement()) {
      mutable_fblelement()->::Proto::FblElement::MergeFrom(from.fblelement());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::Proto::Configuration::MergeFrom(from.configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_videoitem()) {
    if (!this->videoitem().IsInitialized()) return false;
  }
  if (has_deviceobject()) {
    if (!this->deviceobject().IsInitialized()) return false;
  }
  if (has_videoframe()) {
    if (!this->videoframe().IsInitialized()) return false;
  }
  if (has_videolayer()) {
    if (!this->videolayer().IsInitialized()) return false;
  }
  if (has_fblelement()) {
    if (!this->fblelement().IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(classnamehash_, other->classnamehash_);
    std::swap(videoitem_, other->videoitem_);
    std::swap(deviceobject_, other->deviceobject_);
    std::swap(videoframe_, other->videoframe_);
    std::swap(videolayer_, other->videolayer_);
    std::swap(fblelement_, other->fblelement_);
    std::swap(configuration_, other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kUuidFieldNumber;
const int Configuration::kStrIDFieldNumber;
const int Configuration::kCaptionFieldNumber;
const int Configuration::kVariablesFieldNumber;
const int Configuration::kGlobalsFieldNumber;
const int Configuration::kVideoFramesIDsFieldNumber;
const int Configuration::kVideoFramesFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  variables_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  globals_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  strid_ = NULL;
  caption_ = NULL;
  variables_ = NULL;
  globals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete strid_;
    delete caption_;
    delete variables_;
    delete globals_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    if (has_variables()) {
      if (variables_ != NULL) variables_->::Proto::wstring::Clear();
    }
    if (has_globals()) {
      if (globals_ != NULL) globals_->::Proto::wstring::Clear();
    }
  }
  videoframesids_.Clear();
  videoframes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strID;
        break;
      }

      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variables;
        break;
      }

      // required .Proto.wstring variables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globals;
        break;
      }

      // required .Proto.wstring globals = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_videoFramesIDs;
        break;
      }

      // repeated .Proto.Uuid videoFramesIDs = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoFramesIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videoframesids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_videoFramesIDs;
        if (input->ExpectTag(810)) goto parse_videoFrames;
        break;
      }

      // repeated .Proto.Envelope videoFrames = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoFrames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videoframes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_videoFrames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required .Proto.wstring variables = 4;
  if (has_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variables(), output);
  }

  // required .Proto.wstring globals = 5;
  if (has_globals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->globals(), output);
  }

  // repeated .Proto.Uuid videoFramesIDs = 100;
  for (int i = 0; i < this->videoframesids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->videoframesids(i), output);
  }

  // repeated .Proto.Envelope videoFrames = 101;
  for (int i = 0; i < this->videoframes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->videoframes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required .Proto.wstring variables = 4;
  if (has_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variables(), target);
  }

  // required .Proto.wstring globals = 5;
  if (has_globals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->globals(), target);
  }

  // repeated .Proto.Uuid videoFramesIDs = 100;
  for (int i = 0; i < this->videoframesids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->videoframesids(i), target);
  }

  // repeated .Proto.Envelope videoFrames = 101;
  for (int i = 0; i < this->videoframes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->videoframes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.wstring variables = 4;
    if (has_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variables());
    }

    // required .Proto.wstring globals = 5;
    if (has_globals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globals());
    }

  }
  // repeated .Proto.Uuid videoFramesIDs = 100;
  total_size += 2 * this->videoframesids_size();
  for (int i = 0; i < this->videoframesids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videoframesids(i));
  }

  // repeated .Proto.Envelope videoFrames = 101;
  total_size += 2 * this->videoframes_size();
  for (int i = 0; i < this->videoframes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videoframes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  videoframesids_.MergeFrom(from.videoframesids_);
  videoframes_.MergeFrom(from.videoframes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_variables()) {
      mutable_variables()->::Proto::wstring::MergeFrom(from.variables());
    }
    if (from.has_globals()) {
      mutable_globals()->::Proto::wstring::MergeFrom(from.globals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_variables()) {
    if (!this->variables().IsInitialized()) return false;
  }
  if (has_globals()) {
    if (!this->globals().IsInitialized()) return false;
  }
  for (int i = 0; i < videoframesids_size(); i++) {
    if (!this->videoframesids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < videoframes_size(); i++) {
    if (!this->videoframes(i).IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(variables_, other->variables_);
    std::swap(globals_, other->globals_);
    videoframesids_.Swap(&other->videoframesids_);
    videoframes_.Swap(&other->videoframes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbElementCollection::kElementsFieldNumber;
#endif  // !_MSC_VER

AfbElementCollection::AfbElementCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbElementCollection::InitAsDefaultInstance() {
}

AfbElementCollection::AfbElementCollection(const AfbElementCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbElementCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbElementCollection::~AfbElementCollection() {
  SharedDtor();
}

void AfbElementCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AfbElementCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbElementCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbElementCollection_descriptor_;
}

const AfbElementCollection& AfbElementCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbElementCollection* AfbElementCollection::default_instance_ = NULL;

AfbElementCollection* AfbElementCollection::New() const {
  return new AfbElementCollection;
}

void AfbElementCollection::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbElementCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AfbElementXml elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbElementCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.AfbElementXml elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbElementCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.AfbElementXml elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbElementCollection::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.AfbElementXml elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbElementCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbElementCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbElementCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbElementCollection::MergeFrom(const AfbElementCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbElementCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementCollection::CopyFrom(const AfbElementCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementCollection::IsInitialized() const {

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void AfbElementCollection::Swap(AfbElementCollection* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbElementCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbElementCollection_descriptor_;
  metadata.reflection = AfbElementCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbElementXml::kDataFieldNumber;
#endif  // !_MSC_VER

AfbElementXml::AfbElementXml()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbElementXml::InitAsDefaultInstance() {
}

AfbElementXml::AfbElementXml(const AfbElementXml& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbElementXml::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbElementXml::~AfbElementXml() {
  SharedDtor();
}

void AfbElementXml::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AfbElementXml::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbElementXml::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbElementXml_descriptor_;
}

const AfbElementXml& AfbElementXml::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbElementXml* AfbElementXml::default_instance_ = NULL;

AfbElementXml* AfbElementXml::New() const {
  return new AfbElementXml;
}

void AfbElementXml::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbElementXml::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbElementXml::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbElementXml::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbElementXml::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbElementXml::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbElementXml* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbElementXml*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbElementXml::MergeFrom(const AfbElementXml& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbElementXml::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementXml::CopyFrom(const AfbElementXml& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementXml::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AfbElementXml::Swap(AfbElementXml* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbElementXml::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbElementXml_descriptor_;
  metadata.reflection = AfbElementXml_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblElement::kUuidFieldNumber;
const int FblElement::kStrIDFieldNumber;
const int FblElement::kCaptionFieldNumber;
const int FblElement::kOpcodeFieldNumber;
const int FblElement::kInputSignalsFieldNumber;
const int FblElement::kOutputSignalsFieldNumber;
const int FblElement::kParamsFieldNumber;
#endif  // !_MSC_VER

FblElement::FblElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblElement::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FblElement::FblElement(const FblElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblElement::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  strid_ = NULL;
  caption_ = NULL;
  opcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblElement::~FblElement() {
  SharedDtor();
}

void FblElement::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete strid_;
    delete caption_;
  }
}

void FblElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblElement_descriptor_;
}

const FblElement& FblElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblElement* FblElement::default_instance_ = NULL;

FblElement* FblElement::New() const {
  return new FblElement;
}

void FblElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    opcode_ = 0u;
  }
  inputsignals_.Clear();
  outputsignals_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strID;
        break;
      }

      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opcode;
        break;
      }

      // required uint32 opcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inputSignals;
        break;
      }

      // repeated .Proto.FblElementSignal inputSignals = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputsignals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inputSignals;
        if (input->ExpectTag(98)) goto parse_outputSignals;
        break;
      }

      // repeated .Proto.FblElementSignal outputSignals = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputsignals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_outputSignals;
        if (input->ExpectTag(106)) goto parse_params;
        break;
      }

      // repeated .Proto.FblElementParam params = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required uint32 opcode = 4;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opcode(), output);
  }

  // repeated .Proto.FblElementSignal inputSignals = 11;
  for (int i = 0; i < this->inputsignals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->inputsignals(i), output);
  }

  // repeated .Proto.FblElementSignal outputSignals = 12;
  for (int i = 0; i < this->outputsignals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->outputsignals(i), output);
  }

  // repeated .Proto.FblElementParam params = 13;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required uint32 opcode = 4;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opcode(), target);
  }

  // repeated .Proto.FblElementSignal inputSignals = 11;
  for (int i = 0; i < this->inputsignals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->inputsignals(i), target);
  }

  // repeated .Proto.FblElementSignal outputSignals = 12;
  for (int i = 0; i < this->outputsignals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->outputsignals(i), target);
  }

  // repeated .Proto.FblElementParam params = 13;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required uint32 opcode = 4;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }

  }
  // repeated .Proto.FblElementSignal inputSignals = 11;
  total_size += 1 * this->inputsignals_size();
  for (int i = 0; i < this->inputsignals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputsignals(i));
  }

  // repeated .Proto.FblElementSignal outputSignals = 12;
  total_size += 1 * this->outputsignals_size();
  for (int i = 0; i < this->outputsignals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputsignals(i));
  }

  // repeated .Proto.FblElementParam params = 13;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblElement::MergeFrom(const FblElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputsignals_.MergeFrom(from.inputsignals_);
  outputsignals_.MergeFrom(from.outputsignals_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblElement::CopyFrom(const FblElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  for (int i = 0; i < inputsignals_size(); i++) {
    if (!this->inputsignals(i).IsInitialized()) return false;
  }
  for (int i = 0; i < outputsignals_size(); i++) {
    if (!this->outputsignals(i).IsInitialized()) return false;
  }
  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void FblElement::Swap(FblElement* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(opcode_, other->opcode_);
    inputsignals_.Swap(&other->inputsignals_);
    outputsignals_.Swap(&other->outputsignals_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblElement_descriptor_;
  metadata.reflection = FblElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblElementSignal::kCaptionFieldNumber;
const int FblElementSignal::kTypeFieldNumber;
#endif  // !_MSC_VER

FblElementSignal::FblElementSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblElementSignal::InitAsDefaultInstance() {
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FblElementSignal::FblElementSignal(const FblElementSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblElementSignal::SharedCtor() {
  _cached_size_ = 0;
  caption_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblElementSignal::~FblElementSignal() {
  SharedDtor();
}

void FblElementSignal::SharedDtor() {
  if (this != default_instance_) {
    delete caption_;
  }
}

void FblElementSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblElementSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblElementSignal_descriptor_;
}

const FblElementSignal& FblElementSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblElementSignal* FblElementSignal::default_instance_ = NULL;

FblElementSignal* FblElementSignal::New() const {
  return new FblElementSignal;
}

void FblElementSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblElementSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Proto.FblSignalType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblSignalType_IsValid(value)) {
            set_type(static_cast< ::Proto::FblSignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblElementSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caption(), output);
  }

  // required .Proto.FblSignalType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblElementSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caption(), target);
  }

  // required .Proto.FblSignalType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblElementSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.FblSignalType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblElementSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblElementSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblElementSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblElementSignal::MergeFrom(const FblElementSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblElementSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblElementSignal::CopyFrom(const FblElementSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblElementSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  return true;
}

void FblElementSignal::Swap(FblElementSignal* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblElementSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblElementSignal_descriptor_;
  metadata.reflection = FblElementSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblElementParam::kCaptionFieldNumber;
const int FblElementParam::kTypeFieldNumber;
const int FblElementParam::kValueFieldNumber;
const int FblElementParam::kDefaultvalueFieldNumber;
const int FblElementParam::kLowlimitFieldNumber;
const int FblElementParam::kHighlimitFieldNumber;
#endif  // !_MSC_VER

FblElementParam::FblElementParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblElementParam::InitAsDefaultInstance() {
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  value_ = const_cast< ::Proto::FblParamValue*>(&::Proto::FblParamValue::default_instance());
  defaultvalue_ = const_cast< ::Proto::FblParamValue*>(&::Proto::FblParamValue::default_instance());
  lowlimit_ = const_cast< ::Proto::FblParamValue*>(&::Proto::FblParamValue::default_instance());
  highlimit_ = const_cast< ::Proto::FblParamValue*>(&::Proto::FblParamValue::default_instance());
}

FblElementParam::FblElementParam(const FblElementParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblElementParam::SharedCtor() {
  _cached_size_ = 0;
  caption_ = NULL;
  type_ = 0;
  value_ = NULL;
  defaultvalue_ = NULL;
  lowlimit_ = NULL;
  highlimit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblElementParam::~FblElementParam() {
  SharedDtor();
}

void FblElementParam::SharedDtor() {
  if (this != default_instance_) {
    delete caption_;
    delete value_;
    delete defaultvalue_;
    delete lowlimit_;
    delete highlimit_;
  }
}

void FblElementParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblElementParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblElementParam_descriptor_;
}

const FblElementParam& FblElementParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblElementParam* FblElementParam::default_instance_ = NULL;

FblElementParam* FblElementParam::New() const {
  return new FblElementParam;
}

void FblElementParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    type_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::Proto::FblParamValue::Clear();
    }
    if (has_defaultvalue()) {
      if (defaultvalue_ != NULL) defaultvalue_->::Proto::FblParamValue::Clear();
    }
    if (has_lowlimit()) {
      if (lowlimit_ != NULL) lowlimit_->::Proto::FblParamValue::Clear();
    }
    if (has_highlimit()) {
      if (highlimit_ != NULL) highlimit_->::Proto::FblParamValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblElementParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Proto.FblParamType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblParamType_IsValid(value)) {
            set_type(static_cast< ::Proto::FblParamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required .Proto.FblParamValue value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defaultvalue;
        break;
      }

      // required .Proto.FblParamValue defaultvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lowlimit;
        break;
      }

      // required .Proto.FblParamValue lowlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lowlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowlimit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_highlimit;
        break;
      }

      // required .Proto.FblParamValue highlimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highlimit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblElementParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caption(), output);
  }

  // required .Proto.FblParamType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .Proto.FblParamValue value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }

  // required .Proto.FblParamValue defaultvalue = 4;
  if (has_defaultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defaultvalue(), output);
  }

  // required .Proto.FblParamValue lowlimit = 5;
  if (has_lowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lowlimit(), output);
  }

  // required .Proto.FblParamValue highlimit = 6;
  if (has_highlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->highlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblElementParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caption(), target);
  }

  // required .Proto.FblParamType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .Proto.FblParamValue value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }

  // required .Proto.FblParamValue defaultvalue = 4;
  if (has_defaultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defaultvalue(), target);
  }

  // required .Proto.FblParamValue lowlimit = 5;
  if (has_lowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lowlimit(), target);
  }

  // required .Proto.FblParamValue highlimit = 6;
  if (has_highlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->highlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblElementParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.FblParamType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Proto.FblParamValue value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

    // required .Proto.FblParamValue defaultvalue = 4;
    if (has_defaultvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defaultvalue());
    }

    // required .Proto.FblParamValue lowlimit = 5;
    if (has_lowlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lowlimit());
    }

    // required .Proto.FblParamValue highlimit = 6;
    if (has_highlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highlimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblElementParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblElementParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblElementParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblElementParam::MergeFrom(const FblElementParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      mutable_value()->::Proto::FblParamValue::MergeFrom(from.value());
    }
    if (from.has_defaultvalue()) {
      mutable_defaultvalue()->::Proto::FblParamValue::MergeFrom(from.defaultvalue());
    }
    if (from.has_lowlimit()) {
      mutable_lowlimit()->::Proto::FblParamValue::MergeFrom(from.lowlimit());
    }
    if (from.has_highlimit()) {
      mutable_highlimit()->::Proto::FblParamValue::MergeFrom(from.highlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblElementParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblElementParam::CopyFrom(const FblElementParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblElementParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  if (has_defaultvalue()) {
    if (!this->defaultvalue().IsInitialized()) return false;
  }
  if (has_lowlimit()) {
    if (!this->lowlimit().IsInitialized()) return false;
  }
  if (has_highlimit()) {
    if (!this->highlimit().IsInitialized()) return false;
  }
  return true;
}

void FblElementParam::Swap(FblElementParam* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(defaultvalue_, other->defaultvalue_);
    std::swap(lowlimit_, other->lowlimit_);
    std::swap(highlimit_, other->highlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblElementParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblElementParam_descriptor_;
  metadata.reflection = FblElementParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblParamValue::kIntegralvalueFieldNumber;
const int FblParamValue::kFloatingpointFieldNumber;
const int FblParamValue::kDiscreteFieldNumber;
const int FblParamValue::kTypeFieldNumber;
#endif  // !_MSC_VER

FblParamValue::FblParamValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblParamValue::InitAsDefaultInstance() {
}

FblParamValue::FblParamValue(const FblParamValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblParamValue::SharedCtor() {
  _cached_size_ = 0;
  integralvalue_ = 0;
  floatingpoint_ = 0;
  discrete_ = false;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblParamValue::~FblParamValue() {
  SharedDtor();
}

void FblParamValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblParamValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblParamValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblParamValue_descriptor_;
}

const FblParamValue& FblParamValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblParamValue* FblParamValue::default_instance_ = NULL;

FblParamValue* FblParamValue::New() const {
  return new FblParamValue;
}

void FblParamValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    integralvalue_ = 0;
    floatingpoint_ = 0;
    discrete_ = false;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblParamValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 integralvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integralvalue_)));
          set_has_integralvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_floatingpoint;
        break;
      }

      // required double floatingpoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_floatingpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &floatingpoint_)));
          set_has_floatingpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_discrete;
        break;
      }

      // required bool discrete = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discrete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discrete_)));
          set_has_discrete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblParamValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 integralvalue = 1;
  if (has_integralvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->integralvalue(), output);
  }

  // required double floatingpoint = 2;
  if (has_floatingpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->floatingpoint(), output);
  }

  // required bool discrete = 3;
  if (has_discrete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->discrete(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblParamValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 integralvalue = 1;
  if (has_integralvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->integralvalue(), target);
  }

  // required double floatingpoint = 2;
  if (has_floatingpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->floatingpoint(), target);
  }

  // required bool discrete = 3;
  if (has_discrete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->discrete(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblParamValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 integralvalue = 1;
    if (has_integralvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integralvalue());
    }

    // required double floatingpoint = 2;
    if (has_floatingpoint()) {
      total_size += 1 + 8;
    }

    // required bool discrete = 3;
    if (has_discrete()) {
      total_size += 1 + 1;
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblParamValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblParamValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblParamValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblParamValue::MergeFrom(const FblParamValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integralvalue()) {
      set_integralvalue(from.integralvalue());
    }
    if (from.has_floatingpoint()) {
      set_floatingpoint(from.floatingpoint());
    }
    if (from.has_discrete()) {
      set_discrete(from.discrete());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblParamValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblParamValue::CopyFrom(const FblParamValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblParamValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FblParamValue::Swap(FblParamValue* other) {
  if (other != this) {
    std::swap(integralvalue_, other->integralvalue_);
    std::swap(floatingpoint_, other->floatingpoint_);
    std::swap(discrete_, other->discrete_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblParamValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblParamValue_descriptor_;
  metadata.reflection = FblParamValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoFrame::kUuidFieldNumber;
const int VideoFrame::kStrIDFieldNumber;
const int VideoFrame::kCaptionFieldNumber;
const int VideoFrame::kWidthFieldNumber;
const int VideoFrame::kHeightFieldNumber;
const int VideoFrame::kUnitFieldNumber;
const int VideoFrame::kLayersFieldNumber;
const int VideoFrame::kAfbsFieldNumber;
const int VideoFrame::kLogicsSchemeFieldNumber;
#endif  // !_MSC_VER

VideoFrame::VideoFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoFrame::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  afbs_ = const_cast< ::Proto::AfbElementCollection*>(&::Proto::AfbElementCollection::default_instance());
  logics_scheme_ = const_cast< ::Proto::LogicScheme*>(&::Proto::LogicScheme::default_instance());
}

VideoFrame::VideoFrame(const VideoFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoFrame::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  strid_ = NULL;
  caption_ = NULL;
  width_ = 0;
  height_ = 0;
  unit_ = 0;
  afbs_ = NULL;
  logics_scheme_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoFrame::~VideoFrame() {
  SharedDtor();
}

void VideoFrame::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete strid_;
    delete caption_;
    delete afbs_;
    delete logics_scheme_;
  }
}

void VideoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoFrame_descriptor_;
}

const VideoFrame& VideoFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoFrame* VideoFrame::default_instance_ = NULL;

VideoFrame* VideoFrame::New() const {
  return new VideoFrame;
}

void VideoFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    width_ = 0;
    height_ = 0;
    unit_ = 0;
    if (has_afbs()) {
      if (afbs_ != NULL) afbs_->::Proto::AfbElementCollection::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_logics_scheme()) {
      if (logics_scheme_ != NULL) logics_scheme_->::Proto::LogicScheme::Clear();
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strID;
        break;
      }

      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_width;
        break;
      }

      // required double width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // required double height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unit;
        break;
      }

      // required .Proto.SchemeUnit unit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::SchemeUnit_IsValid(value)) {
            set_unit(static_cast< ::Proto::SchemeUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_layers;
        break;
      }

      // repeated .Proto.Envelope layers = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_layers;
        if (input->ExpectTag(810)) goto parse_afbs;
        break;
      }

      // required .Proto.AfbElementCollection afbs = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_logics_scheme;
        break;
      }

      // optional .Proto.LogicScheme logics_scheme = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logics_scheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logics_scheme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required double width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->width(), output);
  }

  // required double height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // required .Proto.SchemeUnit unit = 6;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->unit(), output);
  }

  // repeated .Proto.Envelope layers = 100;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layers(i), output);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (has_afbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->afbs(), output);
  }

  // optional .Proto.LogicScheme logics_scheme = 200;
  if (has_logics_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->logics_scheme(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required double width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->width(), target);
  }

  // required double height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // required .Proto.SchemeUnit unit = 6;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->unit(), target);
  }

  // repeated .Proto.Envelope layers = 100;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->layers(i), target);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (has_afbs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->afbs(), target);
  }

  // optional .Proto.LogicScheme logics_scheme = 200;
  if (has_logics_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->logics_scheme(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required double width = 4;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required double height = 5;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required .Proto.SchemeUnit unit = 6;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

    // required .Proto.AfbElementCollection afbs = 101;
    if (has_afbs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbs());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.LogicScheme logics_scheme = 200;
    if (has_logics_scheme()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logics_scheme());
    }

  }
  // repeated .Proto.Envelope layers = 100;
  total_size += 2 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_afbs()) {
      mutable_afbs()->::Proto::AfbElementCollection::MergeFrom(from.afbs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logics_scheme()) {
      mutable_logics_scheme()->::Proto::LogicScheme::MergeFrom(from.logics_scheme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  if (has_afbs()) {
    if (!this->afbs().IsInitialized()) return false;
  }
  if (has_logics_scheme()) {
    if (!this->logics_scheme().IsInitialized()) return false;
  }
  return true;
}

void VideoFrame::Swap(VideoFrame* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(unit_, other->unit_);
    layers_.Swap(&other->layers_);
    std::swap(afbs_, other->afbs_);
    std::swap(logics_scheme_, other->logics_scheme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoFrame_descriptor_;
  metadata.reflection = VideoFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicScheme::kHardwareStridsFieldNumber;
#endif  // !_MSC_VER

LogicScheme::LogicScheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicScheme::InitAsDefaultInstance() {
}

LogicScheme::LogicScheme(const LogicScheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicScheme::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicScheme::~LogicScheme() {
  SharedDtor();
}

void LogicScheme::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicScheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicScheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicScheme_descriptor_;
}

const LogicScheme& LogicScheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

LogicScheme* LogicScheme::default_instance_ = NULL;

LogicScheme* LogicScheme::New() const {
  return new LogicScheme;
}

void LogicScheme::Clear() {
  hardware_strids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicScheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.wstring hardware_strids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardware_strids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hardware_strids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hardware_strids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicScheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.wstring hardware_strids = 1;
  for (int i = 0; i < this->hardware_strids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hardware_strids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicScheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.wstring hardware_strids = 1;
  for (int i = 0; i < this->hardware_strids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hardware_strids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicScheme::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.wstring hardware_strids = 1;
  total_size += 1 * this->hardware_strids_size();
  for (int i = 0; i < this->hardware_strids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hardware_strids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicScheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicScheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicScheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicScheme::MergeFrom(const LogicScheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  hardware_strids_.MergeFrom(from.hardware_strids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicScheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicScheme::CopyFrom(const LogicScheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicScheme::IsInitialized() const {

  for (int i = 0; i < hardware_strids_size(); i++) {
    if (!this->hardware_strids(i).IsInitialized()) return false;
  }
  return true;
}

void LogicScheme::Swap(LogicScheme* other) {
  if (other != this) {
    hardware_strids_.Swap(&other->hardware_strids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicScheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicScheme_descriptor_;
  metadata.reflection = LogicScheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoLayer::kUuidFieldNumber;
const int VideoLayer::kNameFieldNumber;
const int VideoLayer::kCompileFieldNumber;
const int VideoLayer::kShowFieldNumber;
const int VideoLayer::kPrintFieldNumber;
const int VideoLayer::kItemsFieldNumber;
#endif  // !_MSC_VER

VideoLayer::VideoLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoLayer::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  name_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

VideoLayer::VideoLayer(const VideoLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoLayer::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  name_ = NULL;
  compile_ = false;
  show_ = false;
  print_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoLayer::~VideoLayer() {
  SharedDtor();
}

void VideoLayer::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete name_;
  }
}

void VideoLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoLayer_descriptor_;
}

const VideoLayer& VideoLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoLayer* VideoLayer::default_instance_ = NULL;

VideoLayer* VideoLayer::New() const {
  return new VideoLayer;
}

void VideoLayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_name()) {
      if (name_ != NULL) name_->::Proto::wstring::Clear();
    }
    compile_ = false;
    show_ = false;
    print_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required .Proto.wstring name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compile;
        break;
      }

      // required bool compile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compile_)));
          set_has_compile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show;
        break;
      }

      // required bool show = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_print;
        break;
      }

      // required bool print = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_)));
          set_has_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        break;
      }

      // repeated .Proto.Envelope items = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name(), output);
  }

  // required bool compile = 3;
  if (has_compile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compile(), output);
  }

  // required bool show = 4;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show(), output);
  }

  // required bool print = 5;
  if (has_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->print(), output);
  }

  // repeated .Proto.Envelope items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name(), target);
  }

  // required bool compile = 3;
  if (has_compile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compile(), target);
  }

  // required bool show = 4;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show(), target);
  }

  // required bool print = 5;
  if (has_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->print(), target);
  }

  // repeated .Proto.Envelope items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

    // required bool compile = 3;
    if (has_compile()) {
      total_size += 1 + 1;
    }

    // required bool show = 4;
    if (has_show()) {
      total_size += 1 + 1;
    }

    // required bool print = 5;
    if (has_print()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Proto.Envelope items = 15;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoLayer::MergeFrom(const VideoLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_name()) {
      mutable_name()->::Proto::wstring::MergeFrom(from.name());
    }
    if (from.has_compile()) {
      set_compile(from.compile());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_print()) {
      set_print(from.print());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoLayer::CopyFrom(const VideoLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void VideoLayer::Swap(VideoLayer* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(name_, other->name_);
    std::swap(compile_, other->compile_);
    std::swap(show_, other->show_);
    std::swap(print_, other->print_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoLayer_descriptor_;
  metadata.reflection = VideoLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItem::kUuidFieldNumber;
const int VideoItem::kIsStaticFieldNumber;
const int VideoItem::kIsLockedFieldNumber;
const int VideoItem::kItemUnitFieldNumber;
const int VideoItem::kAcceptClickFieldNumber;
const int VideoItem::kClickScriptFieldNumber;
const int VideoItem::kPosRectImplFieldNumber;
const int VideoItem::kPosLineImplFieldNumber;
const int VideoItem::kPosConnectionImplFieldNumber;
const int VideoItem::kFblItemFieldNumber;
const int VideoItem::kFblItemRectFieldNumber;
const int VideoItem::kFblItemLineFieldNumber;
const int VideoItem::kRectFieldNumber;
const int VideoItem::kLineFieldNumber;
const int VideoItem::kConnectionLineFieldNumber;
const int VideoItem::kSignalFieldNumber;
const int VideoItem::kInputSignalFieldNumber;
const int VideoItem::kOutputSignalFieldNumber;
const int VideoItem::kLinkFieldNumber;
const int VideoItem::kVideoItemFblElementFieldNumber;
#endif  // !_MSC_VER

VideoItem::VideoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItem::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  clickscript_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  posrectimpl_ = const_cast< ::Proto::PosRectImpl*>(&::Proto::PosRectImpl::default_instance());
  poslineimpl_ = const_cast< ::Proto::PosLineImpl*>(&::Proto::PosLineImpl::default_instance());
  posconnectionimpl_ = const_cast< ::Proto::PosConnectionImpl*>(&::Proto::PosConnectionImpl::default_instance());
  fblitem_ = const_cast< ::Proto::FblItem*>(&::Proto::FblItem::default_instance());
  fblitemrect_ = const_cast< ::Proto::FblItemRect*>(&::Proto::FblItemRect::default_instance());
  fblitemline_ = const_cast< ::Proto::FblItemLine*>(&::Proto::FblItemLine::default_instance());
  rect_ = const_cast< ::Proto::VideoItemRect*>(&::Proto::VideoItemRect::default_instance());
  line_ = const_cast< ::Proto::VideoItemLine*>(&::Proto::VideoItemLine::default_instance());
  connectionline_ = const_cast< ::Proto::VideoItemConnectionLine*>(&::Proto::VideoItemConnectionLine::default_instance());
  signal_ = const_cast< ::Proto::VideoItemSignal*>(&::Proto::VideoItemSignal::default_instance());
  inputsignal_ = const_cast< ::Proto::VideoItemInputSignal*>(&::Proto::VideoItemInputSignal::default_instance());
  outputsignal_ = const_cast< ::Proto::VideoItemOutputSignal*>(&::Proto::VideoItemOutputSignal::default_instance());
  link_ = const_cast< ::Proto::VideoItemLink*>(&::Proto::VideoItemLink::default_instance());
  videoitemfblelement_ = const_cast< ::Proto::VideoItemFblElement*>(&::Proto::VideoItemFblElement::default_instance());
}

VideoItem::VideoItem(const VideoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  isstatic_ = false;
  islocked_ = false;
  itemunit_ = 0;
  acceptclick_ = false;
  clickscript_ = NULL;
  posrectimpl_ = NULL;
  poslineimpl_ = NULL;
  posconnectionimpl_ = NULL;
  fblitem_ = NULL;
  fblitemrect_ = NULL;
  fblitemline_ = NULL;
  rect_ = NULL;
  line_ = NULL;
  connectionline_ = NULL;
  signal_ = NULL;
  inputsignal_ = NULL;
  outputsignal_ = NULL;
  link_ = NULL;
  videoitemfblelement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItem::~VideoItem() {
  SharedDtor();
}

void VideoItem::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete clickscript_;
    delete posrectimpl_;
    delete poslineimpl_;
    delete posconnectionimpl_;
    delete fblitem_;
    delete fblitemrect_;
    delete fblitemline_;
    delete rect_;
    delete line_;
    delete connectionline_;
    delete signal_;
    delete inputsignal_;
    delete outputsignal_;
    delete link_;
    delete videoitemfblelement_;
  }
}

void VideoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItem_descriptor_;
}

const VideoItem& VideoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItem* VideoItem::default_instance_ = NULL;

VideoItem* VideoItem::New() const {
  return new VideoItem;
}

void VideoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    isstatic_ = false;
    islocked_ = false;
    itemunit_ = 0;
    acceptclick_ = false;
    if (has_clickscript()) {
      if (clickscript_ != NULL) clickscript_->::Proto::wstring::Clear();
    }
    if (has_posrectimpl()) {
      if (posrectimpl_ != NULL) posrectimpl_->::Proto::PosRectImpl::Clear();
    }
    if (has_poslineimpl()) {
      if (poslineimpl_ != NULL) poslineimpl_->::Proto::PosLineImpl::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_posconnectionimpl()) {
      if (posconnectionimpl_ != NULL) posconnectionimpl_->::Proto::PosConnectionImpl::Clear();
    }
    if (has_fblitem()) {
      if (fblitem_ != NULL) fblitem_->::Proto::FblItem::Clear();
    }
    if (has_fblitemrect()) {
      if (fblitemrect_ != NULL) fblitemrect_->::Proto::FblItemRect::Clear();
    }
    if (has_fblitemline()) {
      if (fblitemline_ != NULL) fblitemline_->::Proto::FblItemLine::Clear();
    }
    if (has_rect()) {
      if (rect_ != NULL) rect_->::Proto::VideoItemRect::Clear();
    }
    if (has_line()) {
      if (line_ != NULL) line_->::Proto::VideoItemLine::Clear();
    }
    if (has_connectionline()) {
      if (connectionline_ != NULL) connectionline_->::Proto::VideoItemConnectionLine::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::Proto::VideoItemSignal::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_inputsignal()) {
      if (inputsignal_ != NULL) inputsignal_->::Proto::VideoItemInputSignal::Clear();
    }
    if (has_outputsignal()) {
      if (outputsignal_ != NULL) outputsignal_->::Proto::VideoItemOutputSignal::Clear();
    }
    if (has_link()) {
      if (link_ != NULL) link_->::Proto::VideoItemLink::Clear();
    }
    if (has_videoitemfblelement()) {
      if (videoitemfblelement_ != NULL) videoitemfblelement_->::Proto::VideoItemFblElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isStatic;
        break;
      }

      // required bool isStatic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstatic_)));
          set_has_isstatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isLocked;
        break;
      }

      // required bool isLocked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemUnit;
        break;
      }

      // required .Proto.SchemeUnit itemUnit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemUnit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::SchemeUnit_IsValid(value)) {
            set_itemunit(static_cast< ::Proto::SchemeUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_acceptClick;
        break;
      }

      // optional bool acceptClick = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptClick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceptclick_)));
          set_has_acceptclick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clickScript;
        break;
      }

      // optional .Proto.wstring clickScript = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clickScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clickscript()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_PosRectImpl;
        break;
      }

      // optional .Proto.PosRectImpl PosRectImpl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosRectImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posrectimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PosLineImpl;
        break;
      }

      // optional .Proto.PosLineImpl PosLineImpl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosLineImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poslineimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_PosConnectionImpl;
        break;
      }

      // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosConnectionImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posconnectionimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_FblItem;
        break;
      }

      // optional .Proto.FblItem FblItem = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_FblItemRect;
        break;
      }

      // optional .Proto.FblItemRect FblItemRect = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItemRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitemrect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_FblItemLine;
        break;
      }

      // optional .Proto.FblItemLine FblItemLine = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItemLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitemline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(930)) goto parse_Rect;
        break;
      }

      // optional .Proto.VideoItemRect Rect = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_Line;
        break;
      }

      // optional .Proto.VideoItemLine Line = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(946)) goto parse_ConnectionLine;
        break;
      }

      // optional .Proto.VideoItemConnectionLine ConnectionLine = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectionline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(994)) goto parse_Signal;
        break;
      }

      // optional .Proto.VideoItemSignal Signal = 124;
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1002)) goto parse_InputSignal;
        break;
      }

      // optional .Proto.VideoItemInputSignal InputSignal = 125;
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InputSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inputsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1010)) goto parse_OutputSignal;
        break;
      }

      // optional .Proto.VideoItemOutputSignal OutputSignal = 126;
      case 126: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OutputSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outputsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1018)) goto parse_Link;
        break;
      }

      // optional .Proto.VideoItemLink Link = 127;
      case 127: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1026)) goto parse_VideoItemFblElement;
        break;
      }

      // optional .Proto.VideoItemFblElement VideoItemFblElement = 128;
      case 128: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VideoItemFblElement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoitemfblelement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required bool isStatic = 2;
  if (has_isstatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstatic(), output);
  }

  // required bool isLocked = 3;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islocked(), output);
  }

  // required .Proto.SchemeUnit itemUnit = 4;
  if (has_itemunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->itemunit(), output);
  }

  // optional bool acceptClick = 5 [default = false];
  if (has_acceptclick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->acceptclick(), output);
  }

  // optional .Proto.wstring clickScript = 6;
  if (has_clickscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->clickscript(), output);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (has_posrectimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->posrectimpl(), output);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (has_poslineimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->poslineimpl(), output);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (has_posconnectionimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->posconnectionimpl(), output);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (has_fblitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->fblitem(), output);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (has_fblitemrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->fblitemrect(), output);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (has_fblitemline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->fblitemline(), output);
  }

  // optional .Proto.VideoItemRect Rect = 116;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->rect(), output);
  }

  // optional .Proto.VideoItemLine Line = 117;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->line(), output);
  }

  // optional .Proto.VideoItemConnectionLine ConnectionLine = 118;
  if (has_connectionline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, this->connectionline(), output);
  }

  // optional .Proto.VideoItemSignal Signal = 124;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, this->signal(), output);
  }

  // optional .Proto.VideoItemInputSignal InputSignal = 125;
  if (has_inputsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, this->inputsignal(), output);
  }

  // optional .Proto.VideoItemOutputSignal OutputSignal = 126;
  if (has_outputsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, this->outputsignal(), output);
  }

  // optional .Proto.VideoItemLink Link = 127;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, this->link(), output);
  }

  // optional .Proto.VideoItemFblElement VideoItemFblElement = 128;
  if (has_videoitemfblelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, this->videoitemfblelement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required bool isStatic = 2;
  if (has_isstatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstatic(), target);
  }

  // required bool isLocked = 3;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islocked(), target);
  }

  // required .Proto.SchemeUnit itemUnit = 4;
  if (has_itemunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->itemunit(), target);
  }

  // optional bool acceptClick = 5 [default = false];
  if (has_acceptclick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->acceptclick(), target);
  }

  // optional .Proto.wstring clickScript = 6;
  if (has_clickscript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->clickscript(), target);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (has_posrectimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->posrectimpl(), target);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (has_poslineimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->poslineimpl(), target);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (has_posconnectionimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->posconnectionimpl(), target);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (has_fblitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->fblitem(), target);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (has_fblitemrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->fblitemrect(), target);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (has_fblitemline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->fblitemline(), target);
  }

  // optional .Proto.VideoItemRect Rect = 116;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->rect(), target);
  }

  // optional .Proto.VideoItemLine Line = 117;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->line(), target);
  }

  // optional .Proto.VideoItemConnectionLine ConnectionLine = 118;
  if (has_connectionline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->connectionline(), target);
  }

  // optional .Proto.VideoItemSignal Signal = 124;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, this->signal(), target);
  }

  // optional .Proto.VideoItemInputSignal InputSignal = 125;
  if (has_inputsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        125, this->inputsignal(), target);
  }

  // optional .Proto.VideoItemOutputSignal OutputSignal = 126;
  if (has_outputsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        126, this->outputsignal(), target);
  }

  // optional .Proto.VideoItemLink Link = 127;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        127, this->link(), target);
  }

  // optional .Proto.VideoItemFblElement VideoItemFblElement = 128;
  if (has_videoitemfblelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, this->videoitemfblelement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required bool isStatic = 2;
    if (has_isstatic()) {
      total_size += 1 + 1;
    }

    // required bool isLocked = 3;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required .Proto.SchemeUnit itemUnit = 4;
    if (has_itemunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemunit());
    }

    // optional bool acceptClick = 5 [default = false];
    if (has_acceptclick()) {
      total_size += 1 + 1;
    }

    // optional .Proto.wstring clickScript = 6;
    if (has_clickscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clickscript());
    }

    // optional .Proto.PosRectImpl PosRectImpl = 10;
    if (has_posrectimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posrectimpl());
    }

    // optional .Proto.PosLineImpl PosLineImpl = 11;
    if (has_poslineimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poslineimpl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
    if (has_posconnectionimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posconnectionimpl());
    }

    // optional .Proto.FblItem FblItem = 106;
    if (has_fblitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitem());
    }

    // optional .Proto.FblItemRect FblItemRect = 107;
    if (has_fblitemrect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitemrect());
    }

    // optional .Proto.FblItemLine FblItemLine = 108;
    if (has_fblitemline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitemline());
    }

    // optional .Proto.VideoItemRect Rect = 116;
    if (has_rect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // optional .Proto.VideoItemLine Line = 117;
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional .Proto.VideoItemConnectionLine ConnectionLine = 118;
    if (has_connectionline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectionline());
    }

    // optional .Proto.VideoItemSignal Signal = 124;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Proto.VideoItemInputSignal InputSignal = 125;
    if (has_inputsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputsignal());
    }

    // optional .Proto.VideoItemOutputSignal OutputSignal = 126;
    if (has_outputsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputsignal());
    }

    // optional .Proto.VideoItemLink Link = 127;
    if (has_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link());
    }

    // optional .Proto.VideoItemFblElement VideoItemFblElement = 128;
    if (has_videoitemfblelement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videoitemfblelement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItem::MergeFrom(const VideoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_isstatic()) {
      set_isstatic(from.isstatic());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_itemunit()) {
      set_itemunit(from.itemunit());
    }
    if (from.has_acceptclick()) {
      set_acceptclick(from.acceptclick());
    }
    if (from.has_clickscript()) {
      mutable_clickscript()->::Proto::wstring::MergeFrom(from.clickscript());
    }
    if (from.has_posrectimpl()) {
      mutable_posrectimpl()->::Proto::PosRectImpl::MergeFrom(from.posrectimpl());
    }
    if (from.has_poslineimpl()) {
      mutable_poslineimpl()->::Proto::PosLineImpl::MergeFrom(from.poslineimpl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posconnectionimpl()) {
      mutable_posconnectionimpl()->::Proto::PosConnectionImpl::MergeFrom(from.posconnectionimpl());
    }
    if (from.has_fblitem()) {
      mutable_fblitem()->::Proto::FblItem::MergeFrom(from.fblitem());
    }
    if (from.has_fblitemrect()) {
      mutable_fblitemrect()->::Proto::FblItemRect::MergeFrom(from.fblitemrect());
    }
    if (from.has_fblitemline()) {
      mutable_fblitemline()->::Proto::FblItemLine::MergeFrom(from.fblitemline());
    }
    if (from.has_rect()) {
      mutable_rect()->::Proto::VideoItemRect::MergeFrom(from.rect());
    }
    if (from.has_line()) {
      mutable_line()->::Proto::VideoItemLine::MergeFrom(from.line());
    }
    if (from.has_connectionline()) {
      mutable_connectionline()->::Proto::VideoItemConnectionLine::MergeFrom(from.connectionline());
    }
    if (from.has_signal()) {
      mutable_signal()->::Proto::VideoItemSignal::MergeFrom(from.signal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inputsignal()) {
      mutable_inputsignal()->::Proto::VideoItemInputSignal::MergeFrom(from.inputsignal());
    }
    if (from.has_outputsignal()) {
      mutable_outputsignal()->::Proto::VideoItemOutputSignal::MergeFrom(from.outputsignal());
    }
    if (from.has_link()) {
      mutable_link()->::Proto::VideoItemLink::MergeFrom(from.link());
    }
    if (from.has_videoitemfblelement()) {
      mutable_videoitemfblelement()->::Proto::VideoItemFblElement::MergeFrom(from.videoitemfblelement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItem::CopyFrom(const VideoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_clickscript()) {
    if (!this->clickscript().IsInitialized()) return false;
  }
  if (has_posrectimpl()) {
    if (!this->posrectimpl().IsInitialized()) return false;
  }
  if (has_poslineimpl()) {
    if (!this->poslineimpl().IsInitialized()) return false;
  }
  if (has_posconnectionimpl()) {
    if (!this->posconnectionimpl().IsInitialized()) return false;
  }
  if (has_fblitem()) {
    if (!this->fblitem().IsInitialized()) return false;
  }
  if (has_fblitemrect()) {
    if (!this->fblitemrect().IsInitialized()) return false;
  }
  if (has_fblitemline()) {
    if (!this->fblitemline().IsInitialized()) return false;
  }
  if (has_rect()) {
    if (!this->rect().IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  if (has_connectionline()) {
    if (!this->connectionline().IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal().IsInitialized()) return false;
  }
  if (has_videoitemfblelement()) {
    if (!this->videoitemfblelement().IsInitialized()) return false;
  }
  return true;
}

void VideoItem::Swap(VideoItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(isstatic_, other->isstatic_);
    std::swap(islocked_, other->islocked_);
    std::swap(itemunit_, other->itemunit_);
    std::swap(acceptclick_, other->acceptclick_);
    std::swap(clickscript_, other->clickscript_);
    std::swap(posrectimpl_, other->posrectimpl_);
    std::swap(poslineimpl_, other->poslineimpl_);
    std::swap(posconnectionimpl_, other->posconnectionimpl_);
    std::swap(fblitem_, other->fblitem_);
    std::swap(fblitemrect_, other->fblitemrect_);
    std::swap(fblitemline_, other->fblitemline_);
    std::swap(rect_, other->rect_);
    std::swap(line_, other->line_);
    std::swap(connectionline_, other->connectionline_);
    std::swap(signal_, other->signal_);
    std::swap(inputsignal_, other->inputsignal_);
    std::swap(outputsignal_, other->outputsignal_);
    std::swap(link_, other->link_);
    std::swap(videoitemfblelement_, other->videoitemfblelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItem_descriptor_;
  metadata.reflection = VideoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosRectImpl::kLeftDocPtFieldNumber;
const int PosRectImpl::kTopDocPtFieldNumber;
const int PosRectImpl::kWidthDocPtFieldNumber;
const int PosRectImpl::kHeightDocPtFieldNumber;
#endif  // !_MSC_VER

PosRectImpl::PosRectImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosRectImpl::InitAsDefaultInstance() {
}

PosRectImpl::PosRectImpl(const PosRectImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosRectImpl::SharedCtor() {
  _cached_size_ = 0;
  leftdocpt_ = 0;
  topdocpt_ = 0;
  widthdocpt_ = 0;
  heightdocpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosRectImpl::~PosRectImpl() {
  SharedDtor();
}

void PosRectImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosRectImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosRectImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosRectImpl_descriptor_;
}

const PosRectImpl& PosRectImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosRectImpl* PosRectImpl::default_instance_ = NULL;

PosRectImpl* PosRectImpl::New() const {
  return new PosRectImpl;
}

void PosRectImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftdocpt_ = 0;
    topdocpt_ = 0;
    widthdocpt_ = 0;
    heightdocpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosRectImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double leftDocPt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftdocpt_)));
          set_has_leftdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_topDocPt;
        break;
      }

      // required double topDocPt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_topDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topdocpt_)));
          set_has_topdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_widthDocPt;
        break;
      }

      // required double widthDocPt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_widthDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthdocpt_)));
          set_has_widthdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_heightDocPt;
        break;
      }

      // required double heightDocPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heightDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heightdocpt_)));
          set_has_heightdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosRectImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double leftDocPt = 1;
  if (has_leftdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->leftdocpt(), output);
  }

  // required double topDocPt = 2;
  if (has_topdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->topdocpt(), output);
  }

  // required double widthDocPt = 3;
  if (has_widthdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->widthdocpt(), output);
  }

  // required double heightDocPt = 4;
  if (has_heightdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heightdocpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosRectImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double leftDocPt = 1;
  if (has_leftdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->leftdocpt(), target);
  }

  // required double topDocPt = 2;
  if (has_topdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->topdocpt(), target);
  }

  // required double widthDocPt = 3;
  if (has_widthdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->widthdocpt(), target);
  }

  // required double heightDocPt = 4;
  if (has_heightdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heightdocpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosRectImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double leftDocPt = 1;
    if (has_leftdocpt()) {
      total_size += 1 + 8;
    }

    // required double topDocPt = 2;
    if (has_topdocpt()) {
      total_size += 1 + 8;
    }

    // required double widthDocPt = 3;
    if (has_widthdocpt()) {
      total_size += 1 + 8;
    }

    // required double heightDocPt = 4;
    if (has_heightdocpt()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosRectImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosRectImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosRectImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosRectImpl::MergeFrom(const PosRectImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftdocpt()) {
      set_leftdocpt(from.leftdocpt());
    }
    if (from.has_topdocpt()) {
      set_topdocpt(from.topdocpt());
    }
    if (from.has_widthdocpt()) {
      set_widthdocpt(from.widthdocpt());
    }
    if (from.has_heightdocpt()) {
      set_heightdocpt(from.heightdocpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosRectImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosRectImpl::CopyFrom(const PosRectImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosRectImpl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PosRectImpl::Swap(PosRectImpl* other) {
  if (other != this) {
    std::swap(leftdocpt_, other->leftdocpt_);
    std::swap(topdocpt_, other->topdocpt_);
    std::swap(widthdocpt_, other->widthdocpt_);
    std::swap(heightdocpt_, other->heightdocpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosRectImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosRectImpl_descriptor_;
  metadata.reflection = PosRectImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosLineImpl::kStartXDocPtFieldNumber;
const int PosLineImpl::kStartYDocPtFieldNumber;
const int PosLineImpl::kEndXDocPtFieldNumber;
const int PosLineImpl::kEndYDocPtFieldNumber;
#endif  // !_MSC_VER

PosLineImpl::PosLineImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosLineImpl::InitAsDefaultInstance() {
}

PosLineImpl::PosLineImpl(const PosLineImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosLineImpl::SharedCtor() {
  _cached_size_ = 0;
  startxdocpt_ = 0;
  startydocpt_ = 0;
  endxdocpt_ = 0;
  endydocpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosLineImpl::~PosLineImpl() {
  SharedDtor();
}

void PosLineImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosLineImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosLineImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosLineImpl_descriptor_;
}

const PosLineImpl& PosLineImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosLineImpl* PosLineImpl::default_instance_ = NULL;

PosLineImpl* PosLineImpl::New() const {
  return new PosLineImpl;
}

void PosLineImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startxdocpt_ = 0;
    startydocpt_ = 0;
    endxdocpt_ = 0;
    endydocpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosLineImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double startXDocPt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startxdocpt_)));
          set_has_startxdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_startYDocPt;
        break;
      }

      // required double startYDocPt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startYDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startydocpt_)));
          set_has_startydocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_endXDocPt;
        break;
      }

      // required double endXDocPt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endXDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endxdocpt_)));
          set_has_endxdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_endYDocPt;
        break;
      }

      // required double endYDocPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endYDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endydocpt_)));
          set_has_endydocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosLineImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double startXDocPt = 1;
  if (has_startxdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->startxdocpt(), output);
  }

  // required double startYDocPt = 2;
  if (has_startydocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->startydocpt(), output);
  }

  // required double endXDocPt = 3;
  if (has_endxdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->endxdocpt(), output);
  }

  // required double endYDocPt = 4;
  if (has_endydocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->endydocpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosLineImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double startXDocPt = 1;
  if (has_startxdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->startxdocpt(), target);
  }

  // required double startYDocPt = 2;
  if (has_startydocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->startydocpt(), target);
  }

  // required double endXDocPt = 3;
  if (has_endxdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->endxdocpt(), target);
  }

  // required double endYDocPt = 4;
  if (has_endydocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->endydocpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosLineImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double startXDocPt = 1;
    if (has_startxdocpt()) {
      total_size += 1 + 8;
    }

    // required double startYDocPt = 2;
    if (has_startydocpt()) {
      total_size += 1 + 8;
    }

    // required double endXDocPt = 3;
    if (has_endxdocpt()) {
      total_size += 1 + 8;
    }

    // required double endYDocPt = 4;
    if (has_endydocpt()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosLineImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosLineImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosLineImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosLineImpl::MergeFrom(const PosLineImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startxdocpt()) {
      set_startxdocpt(from.startxdocpt());
    }
    if (from.has_startydocpt()) {
      set_startydocpt(from.startydocpt());
    }
    if (from.has_endxdocpt()) {
      set_endxdocpt(from.endxdocpt());
    }
    if (from.has_endydocpt()) {
      set_endydocpt(from.endydocpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosLineImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosLineImpl::CopyFrom(const PosLineImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosLineImpl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PosLineImpl::Swap(PosLineImpl* other) {
  if (other != this) {
    std::swap(startxdocpt_, other->startxdocpt_);
    std::swap(startydocpt_, other->startydocpt_);
    std::swap(endxdocpt_, other->endxdocpt_);
    std::swap(endydocpt_, other->endydocpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosLineImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosLineImpl_descriptor_;
  metadata.reflection = PosLineImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosConnectionImpl::kPointsFieldNumber;
#endif  // !_MSC_VER

PosConnectionImpl::PosConnectionImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosConnectionImpl::InitAsDefaultInstance() {
}

PosConnectionImpl::PosConnectionImpl(const PosConnectionImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosConnectionImpl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosConnectionImpl::~PosConnectionImpl() {
  SharedDtor();
}

void PosConnectionImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosConnectionImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosConnectionImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosConnectionImpl_descriptor_;
}

const PosConnectionImpl& PosConnectionImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosConnectionImpl* PosConnectionImpl::default_instance_ = NULL;

PosConnectionImpl* PosConnectionImpl::New() const {
  return new PosConnectionImpl;
}

void PosConnectionImpl::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosConnectionImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.VideoItemPoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosConnectionImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.VideoItemPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosConnectionImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.VideoItemPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosConnectionImpl::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.VideoItemPoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosConnectionImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosConnectionImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosConnectionImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosConnectionImpl::MergeFrom(const PosConnectionImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosConnectionImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosConnectionImpl::CopyFrom(const PosConnectionImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosConnectionImpl::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void PosConnectionImpl::Swap(PosConnectionImpl* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosConnectionImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosConnectionImpl_descriptor_;
  metadata.reflection = PosConnectionImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemRect::kWeightFieldNumber;
const int VideoItemRect::kLineColorFieldNumber;
const int VideoItemRect::kFillColorFieldNumber;
const int VideoItemRect::kTextFieldNumber;
const int VideoItemRect::kTextColorFieldNumber;
const int VideoItemRect::kFontFieldNumber;
const int VideoItemRect::kFillFieldNumber;
const int VideoItemRect::kDrawrectFieldNumber;
#endif  // !_MSC_VER

VideoItemRect::VideoItemRect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemRect::InitAsDefaultInstance() {
  text_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

VideoItemRect::VideoItemRect(const VideoItemRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemRect::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  text_ = NULL;
  textcolor_ = 0u;
  font_ = NULL;
  fill_ = false;
  drawrect_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemRect::~VideoItemRect() {
  SharedDtor();
}

void VideoItemRect::SharedDtor() {
  if (this != default_instance_) {
    delete text_;
    delete font_;
  }
}

void VideoItemRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemRect_descriptor_;
}

const VideoItemRect& VideoItemRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemRect* VideoItemRect::default_instance_ = NULL;

VideoItemRect* VideoItemRect::New() const {
  return new VideoItemRect;
}

void VideoItemRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    if (has_text()) {
      if (text_ != NULL) text_->::Proto::wstring::Clear();
    }
    textcolor_ = 0u;
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
    fill_ = false;
    drawrect_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillColor;
        break;
      }

      // required uint32 fillColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // required .Proto.wstring text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_textColor;
        break;
      }

      // required uint32 textColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_font;
        break;
      }

      // required .Proto.FontParam font = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fill;
        break;
      }

      // required bool fill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_drawrect;
        break;
      }

      // optional bool drawrect = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawrect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawrect_)));
          set_has_drawrect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fillcolor(), output);
  }

  // required .Proto.wstring text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text(), output);
  }

  // required uint32 textColor = 5;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->textcolor(), output);
  }

  // required .Proto.FontParam font = 6;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->font(), output);
  }

  // required bool fill = 7;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fill(), output);
  }

  // optional bool drawrect = 8 [default = true];
  if (has_drawrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->drawrect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fillcolor(), target);
  }

  // required .Proto.wstring text = 4;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text(), target);
  }

  // required uint32 textColor = 5;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->textcolor(), target);
  }

  // required .Proto.FontParam font = 6;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->font(), target);
  }

  // required bool fill = 7;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fill(), target);
  }

  // optional bool drawrect = 8 [default = true];
  if (has_drawrect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->drawrect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // required uint32 fillColor = 3;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // required .Proto.wstring text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // required uint32 textColor = 5;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // required .Proto.FontParam font = 6;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

    // required bool fill = 7;
    if (has_fill()) {
      total_size += 1 + 1;
    }

    // optional bool drawrect = 8 [default = true];
    if (has_drawrect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemRect::MergeFrom(const VideoItemRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_text()) {
      mutable_text()->::Proto::wstring::MergeFrom(from.text());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
    if (from.has_drawrect()) {
      set_drawrect(from.drawrect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemRect::CopyFrom(const VideoItemRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void VideoItemRect::Swap(VideoItemRect* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(text_, other->text_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(font_, other->font_);
    std::swap(fill_, other->fill_);
    std::swap(drawrect_, other->drawrect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemRect_descriptor_;
  metadata.reflection = VideoItemRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemLine::kWeightFieldNumber;
const int VideoItemLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

VideoItemLine::VideoItemLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemLine::InitAsDefaultInstance() {
}

VideoItemLine::VideoItemLine(const VideoItemLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemLine::~VideoItemLine() {
  SharedDtor();
}

void VideoItemLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemLine_descriptor_;
}

const VideoItemLine& VideoItemLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemLine* VideoItemLine::default_instance_ = NULL;

VideoItemLine* VideoItemLine::New() const {
  return new VideoItemLine;
}

void VideoItemLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemLine::MergeFrom(const VideoItemLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemLine::CopyFrom(const VideoItemLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoItemLine::Swap(VideoItemLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemLine_descriptor_;
  metadata.reflection = VideoItemLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemConnectionLine::kWeightFieldNumber;
const int VideoItemConnectionLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

VideoItemConnectionLine::VideoItemConnectionLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemConnectionLine::InitAsDefaultInstance() {
}

VideoItemConnectionLine::VideoItemConnectionLine(const VideoItemConnectionLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemConnectionLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemConnectionLine::~VideoItemConnectionLine() {
  SharedDtor();
}

void VideoItemConnectionLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemConnectionLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemConnectionLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemConnectionLine_descriptor_;
}

const VideoItemConnectionLine& VideoItemConnectionLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemConnectionLine* VideoItemConnectionLine::default_instance_ = NULL;

VideoItemConnectionLine* VideoItemConnectionLine::New() const {
  return new VideoItemConnectionLine;
}

void VideoItemConnectionLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemConnectionLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemConnectionLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemConnectionLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemConnectionLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemConnectionLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemConnectionLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemConnectionLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemConnectionLine::MergeFrom(const VideoItemConnectionLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemConnectionLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemConnectionLine::CopyFrom(const VideoItemConnectionLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemConnectionLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoItemConnectionLine::Swap(VideoItemConnectionLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemConnectionLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemConnectionLine_descriptor_;
  metadata.reflection = VideoItemConnectionLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblConnectionPoint::kPointFieldNumber;
const int FblConnectionPoint::kDirrectionFieldNumber;
const int FblConnectionPoint::kUuidFieldNumber;
const int FblConnectionPoint::kSignalUuidFieldNumber;
const int FblConnectionPoint::kSignalStrIDFieldNumber;
const int FblConnectionPoint::kSignalCaptionFieldNumber;
#endif  // !_MSC_VER

FblConnectionPoint::FblConnectionPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblConnectionPoint::InitAsDefaultInstance() {
  point_ = const_cast< ::Proto::VideoItemPoint*>(&::Proto::VideoItemPoint::default_instance());
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  signaluuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  signalstrid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  signalcaption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FblConnectionPoint::FblConnectionPoint(const FblConnectionPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblConnectionPoint::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  dirrection_ = 0;
  uuid_ = NULL;
  signaluuid_ = NULL;
  signalstrid_ = NULL;
  signalcaption_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblConnectionPoint::~FblConnectionPoint() {
  SharedDtor();
}

void FblConnectionPoint::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
    delete uuid_;
    delete signaluuid_;
    delete signalstrid_;
    delete signalcaption_;
  }
}

void FblConnectionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblConnectionPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblConnectionPoint_descriptor_;
}

const FblConnectionPoint& FblConnectionPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblConnectionPoint* FblConnectionPoint::default_instance_ = NULL;

FblConnectionPoint* FblConnectionPoint::New() const {
  return new FblConnectionPoint;
}

void FblConnectionPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::Proto::VideoItemPoint::Clear();
    }
    dirrection_ = 0;
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_signaluuid()) {
      if (signaluuid_ != NULL) signaluuid_->::Proto::Uuid::Clear();
    }
    if (has_signalstrid()) {
      if (signalstrid_ != NULL) signalstrid_->::Proto::wstring::Clear();
    }
    if (has_signalcaption()) {
      if (signalcaption_ != NULL) signalcaption_->::Proto::wstring::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblConnectionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.VideoItemPoint point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dirrection;
        break;
      }

      // required .Proto.ConnectionDirrection dirrection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirrection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::ConnectionDirrection_IsValid(value)) {
            set_dirrection(static_cast< ::Proto::ConnectionDirrection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // required .Proto.Uuid uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_signalUuid;
        break;
      }

      // optional .Proto.Uuid signalUuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signaluuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_signalStrID;
        break;
      }

      // optional .Proto.wstring signalStrID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalStrID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signalstrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_signalCaption;
        break;
      }

      // optional .Proto.wstring signalCaption = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalCaption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signalcaption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblConnectionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.VideoItemPoint point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  // required .Proto.ConnectionDirrection dirrection = 2;
  if (has_dirrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dirrection(), output);
  }

  // required .Proto.Uuid uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->uuid(), output);
  }

  // optional .Proto.Uuid signalUuid = 10;
  if (has_signaluuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->signaluuid(), output);
  }

  // optional .Proto.wstring signalStrID = 11;
  if (has_signalstrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->signalstrid(), output);
  }

  // optional .Proto.wstring signalCaption = 12;
  if (has_signalcaption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->signalcaption(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblConnectionPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.VideoItemPoint point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  // required .Proto.ConnectionDirrection dirrection = 2;
  if (has_dirrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dirrection(), target);
  }

  // required .Proto.Uuid uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->uuid(), target);
  }

  // optional .Proto.Uuid signalUuid = 10;
  if (has_signaluuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->signaluuid(), target);
  }

  // optional .Proto.wstring signalStrID = 11;
  if (has_signalstrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->signalstrid(), target);
  }

  // optional .Proto.wstring signalCaption = 12;
  if (has_signalcaption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->signalcaption(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblConnectionPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.VideoItemPoint point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required .Proto.ConnectionDirrection dirrection = 2;
    if (has_dirrection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dirrection());
    }

    // required .Proto.Uuid uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // optional .Proto.Uuid signalUuid = 10;
    if (has_signaluuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signaluuid());
    }

    // optional .Proto.wstring signalStrID = 11;
    if (has_signalstrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signalstrid());
    }

    // optional .Proto.wstring signalCaption = 12;
    if (has_signalcaption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signalcaption());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblConnectionPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblConnectionPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblConnectionPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblConnectionPoint::MergeFrom(const FblConnectionPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::Proto::VideoItemPoint::MergeFrom(from.point());
    }
    if (from.has_dirrection()) {
      set_dirrection(from.dirrection());
    }
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_signaluuid()) {
      mutable_signaluuid()->::Proto::Uuid::MergeFrom(from.signaluuid());
    }
    if (from.has_signalstrid()) {
      mutable_signalstrid()->::Proto::wstring::MergeFrom(from.signalstrid());
    }
    if (from.has_signalcaption()) {
      mutable_signalcaption()->::Proto::wstring::MergeFrom(from.signalcaption());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblConnectionPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblConnectionPoint::CopyFrom(const FblConnectionPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblConnectionPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_signaluuid()) {
    if (!this->signaluuid().IsInitialized()) return false;
  }
  if (has_signalstrid()) {
    if (!this->signalstrid().IsInitialized()) return false;
  }
  if (has_signalcaption()) {
    if (!this->signalcaption().IsInitialized()) return false;
  }
  return true;
}

void FblConnectionPoint::Swap(FblConnectionPoint* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(dirrection_, other->dirrection_);
    std::swap(uuid_, other->uuid_);
    std::swap(signaluuid_, other->signaluuid_);
    std::swap(signalstrid_, other->signalstrid_);
    std::swap(signalcaption_, other->signalcaption_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblConnectionPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblConnectionPoint_descriptor_;
  metadata.reflection = FblConnectionPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItem::kPointsFieldNumber;
#endif  // !_MSC_VER

FblItem::FblItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItem::InitAsDefaultInstance() {
}

FblItem::FblItem(const FblItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItem::~FblItem() {
  SharedDtor();
}

void FblItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItem_descriptor_;
}

const FblItem& FblItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItem* FblItem::default_instance_ = NULL;

FblItem* FblItem::New() const {
  return new FblItem;
}

void FblItem::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.FblConnectionPoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.FblConnectionPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.FblConnectionPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItem::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.FblConnectionPoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItem::MergeFrom(const FblItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItem::CopyFrom(const FblItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItem::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void FblItem::Swap(FblItem* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItem_descriptor_;
  metadata.reflection = FblItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItemRect::kWeightFieldNumber;
const int FblItemRect::kLineColorFieldNumber;
const int FblItemRect::kFillColorFieldNumber;
const int FblItemRect::kTextColorFieldNumber;
const int FblItemRect::kFontFieldNumber;
#endif  // !_MSC_VER

FblItemRect::FblItemRect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItemRect::InitAsDefaultInstance() {
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

FblItemRect::FblItemRect(const FblItemRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItemRect::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  textcolor_ = 0u;
  font_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItemRect::~FblItemRect() {
  SharedDtor();
}

void FblItemRect::SharedDtor() {
  if (this != default_instance_) {
    delete font_;
  }
}

void FblItemRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItemRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItemRect_descriptor_;
}

const FblItemRect& FblItemRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItemRect* FblItemRect::default_instance_ = NULL;

FblItemRect* FblItemRect::New() const {
  return new FblItemRect;
}

void FblItemRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    textcolor_ = 0u;
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItemRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillColor;
        break;
      }

      // required uint32 fillColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_textColor;
        break;
      }

      // required uint32 textColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_font;
        break;
      }

      // required .Proto.FontParam font = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItemRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fillcolor(), output);
  }

  // required uint32 textColor = 4;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->textcolor(), output);
  }

  // required .Proto.FontParam font = 5;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->font(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItemRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fillcolor(), target);
  }

  // required uint32 textColor = 4;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->textcolor(), target);
  }

  // required .Proto.FontParam font = 5;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->font(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItemRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // required uint32 fillColor = 3;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // required uint32 textColor = 4;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // required .Proto.FontParam font = 5;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItemRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItemRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItemRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItemRect::MergeFrom(const FblItemRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItemRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemRect::CopyFrom(const FblItemRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void FblItemRect::Swap(FblItemRect* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(font_, other->font_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItemRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItemRect_descriptor_;
  metadata.reflection = FblItemRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItemLine::kWeightFieldNumber;
const int FblItemLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

FblItemLine::FblItemLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItemLine::InitAsDefaultInstance() {
}

FblItemLine::FblItemLine(const FblItemLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItemLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItemLine::~FblItemLine() {
  SharedDtor();
}

void FblItemLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblItemLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItemLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItemLine_descriptor_;
}

const FblItemLine& FblItemLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItemLine* FblItemLine::default_instance_ = NULL;

FblItemLine* FblItemLine::New() const {
  return new FblItemLine;
}

void FblItemLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItemLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItemLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItemLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItemLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItemLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItemLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItemLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItemLine::MergeFrom(const FblItemLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItemLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemLine::CopyFrom(const FblItemLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FblItemLine::Swap(FblItemLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItemLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItemLine_descriptor_;
  metadata.reflection = FblItemLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemSignal::kSignalStrIDsFieldNumber;
#endif  // !_MSC_VER

VideoItemSignal::VideoItemSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemSignal::InitAsDefaultInstance() {
}

VideoItemSignal::VideoItemSignal(const VideoItemSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemSignal::~VideoItemSignal() {
  SharedDtor();
}

void VideoItemSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemSignal_descriptor_;
}

const VideoItemSignal& VideoItemSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemSignal* VideoItemSignal::default_instance_ = NULL;

VideoItemSignal* VideoItemSignal::New() const {
  return new VideoItemSignal;
}

void VideoItemSignal::Clear() {
  signalstrids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.wstring signalStrIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalStrIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signalstrids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_signalStrIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.wstring signalStrIDs = 1;
  for (int i = 0; i < this->signalstrids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signalstrids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.wstring signalStrIDs = 1;
  for (int i = 0; i < this->signalstrids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signalstrids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemSignal::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.wstring signalStrIDs = 1;
  total_size += 1 * this->signalstrids_size();
  for (int i = 0; i < this->signalstrids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signalstrids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemSignal::MergeFrom(const VideoItemSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalstrids_.MergeFrom(from.signalstrids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemSignal::CopyFrom(const VideoItemSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemSignal::IsInitialized() const {

  for (int i = 0; i < signalstrids_size(); i++) {
    if (!this->signalstrids(i).IsInitialized()) return false;
  }
  return true;
}

void VideoItemSignal::Swap(VideoItemSignal* other) {
  if (other != this) {
    signalstrids_.Swap(&other->signalstrids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemSignal_descriptor_;
  metadata.reflection = VideoItemSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VideoItemInputSignal::VideoItemInputSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemInputSignal::InitAsDefaultInstance() {
}

VideoItemInputSignal::VideoItemInputSignal(const VideoItemInputSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemInputSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemInputSignal::~VideoItemInputSignal() {
  SharedDtor();
}

void VideoItemInputSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemInputSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemInputSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemInputSignal_descriptor_;
}

const VideoItemInputSignal& VideoItemInputSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemInputSignal* VideoItemInputSignal::default_instance_ = NULL;

VideoItemInputSignal* VideoItemInputSignal::New() const {
  return new VideoItemInputSignal;
}

void VideoItemInputSignal::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemInputSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VideoItemInputSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemInputSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemInputSignal::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemInputSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemInputSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemInputSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemInputSignal::MergeFrom(const VideoItemInputSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemInputSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemInputSignal::CopyFrom(const VideoItemInputSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemInputSignal::IsInitialized() const {

  return true;
}

void VideoItemInputSignal::Swap(VideoItemInputSignal* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemInputSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemInputSignal_descriptor_;
  metadata.reflection = VideoItemInputSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VideoItemOutputSignal::VideoItemOutputSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemOutputSignal::InitAsDefaultInstance() {
}

VideoItemOutputSignal::VideoItemOutputSignal(const VideoItemOutputSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemOutputSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemOutputSignal::~VideoItemOutputSignal() {
  SharedDtor();
}

void VideoItemOutputSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemOutputSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemOutputSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemOutputSignal_descriptor_;
}

const VideoItemOutputSignal& VideoItemOutputSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemOutputSignal* VideoItemOutputSignal::default_instance_ = NULL;

VideoItemOutputSignal* VideoItemOutputSignal::New() const {
  return new VideoItemOutputSignal;
}

void VideoItemOutputSignal::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemOutputSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VideoItemOutputSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemOutputSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemOutputSignal::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemOutputSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemOutputSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemOutputSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemOutputSignal::MergeFrom(const VideoItemOutputSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemOutputSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemOutputSignal::CopyFrom(const VideoItemOutputSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemOutputSignal::IsInitialized() const {

  return true;
}

void VideoItemOutputSignal::Swap(VideoItemOutputSignal* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemOutputSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemOutputSignal_descriptor_;
  metadata.reflection = VideoItemOutputSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VideoItemLink::VideoItemLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemLink::InitAsDefaultInstance() {
}

VideoItemLink::VideoItemLink(const VideoItemLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemLink::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemLink::~VideoItemLink() {
  SharedDtor();
}

void VideoItemLink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoItemLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemLink_descriptor_;
}

const VideoItemLink& VideoItemLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemLink* VideoItemLink::default_instance_ = NULL;

VideoItemLink* VideoItemLink::New() const {
  return new VideoItemLink;
}

void VideoItemLink::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VideoItemLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemLink::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemLink::MergeFrom(const VideoItemLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemLink::CopyFrom(const VideoItemLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemLink::IsInitialized() const {

  return true;
}

void VideoItemLink::Swap(VideoItemLink* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemLink_descriptor_;
  metadata.reflection = VideoItemLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemFblElement::kAfbGuidFieldNumber;
const int VideoItemFblElement::kParamsFieldNumber;
#endif  // !_MSC_VER

VideoItemFblElement::VideoItemFblElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemFblElement::InitAsDefaultInstance() {
  afbguid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
}

VideoItemFblElement::VideoItemFblElement(const VideoItemFblElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemFblElement::SharedCtor() {
  _cached_size_ = 0;
  afbguid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemFblElement::~VideoItemFblElement() {
  SharedDtor();
}

void VideoItemFblElement::SharedDtor() {
  if (this != default_instance_) {
    delete afbguid_;
  }
}

void VideoItemFblElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemFblElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemFblElement_descriptor_;
}

const VideoItemFblElement& VideoItemFblElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

VideoItemFblElement* VideoItemFblElement::default_instance_ = NULL;

VideoItemFblElement* VideoItemFblElement::New() const {
  return new VideoItemFblElement;
}

void VideoItemFblElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_afbguid()) {
      if (afbguid_ != NULL) afbguid_->::Proto::Uuid::Clear();
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemFblElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid afbGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbguid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // repeated .Proto.FblElementParam params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemFblElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid afbGuid = 1;
  if (has_afbguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->afbguid(), output);
  }

  // repeated .Proto.FblElementParam params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemFblElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid afbGuid = 1;
  if (has_afbguid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->afbguid(), target);
  }

  // repeated .Proto.FblElementParam params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemFblElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid afbGuid = 1;
    if (has_afbguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbguid());
    }

  }
  // repeated .Proto.FblElementParam params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemFblElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemFblElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemFblElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemFblElement::MergeFrom(const VideoItemFblElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_afbguid()) {
      mutable_afbguid()->::Proto::Uuid::MergeFrom(from.afbguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemFblElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemFblElement::CopyFrom(const VideoItemFblElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemFblElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_afbguid()) {
    if (!this->afbguid().IsInitialized()) return false;
  }
  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void VideoItemFblElement::Swap(VideoItemFblElement* other) {
  if (other != this) {
    std::swap(afbguid_, other->afbguid_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemFblElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemFblElement_descriptor_;
  metadata.reflection = VideoItemFblElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceObject::kUuidFieldNumber;
const int DeviceObject::kStrIdFieldNumber;
const int DeviceObject::kCaptionFieldNumber;
const int DeviceObject::kChildRestrictionFieldNumber;
const int DeviceObject::kPlaceFieldNumber;
const int DeviceObject::kPresetFieldNumber;
const int DeviceObject::kPresetRootFieldNumber;
const int DeviceObject::kPresetNameFieldNumber;
const int DeviceObject::kRootFieldNumber;
const int DeviceObject::kSystemFieldNumber;
const int DeviceObject::kRackFieldNumber;
const int DeviceObject::kChassisFieldNumber;
const int DeviceObject::kModuleFieldNumber;
const int DeviceObject::kControllerFieldNumber;
const int DeviceObject::kDiagSignalFieldNumber;
#endif  // !_MSC_VER

DeviceObject::DeviceObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceObject::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  childrestriction_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  presetname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  root_ = const_cast< ::Proto::DeviceRoot*>(&::Proto::DeviceRoot::default_instance());
  system_ = const_cast< ::Proto::DeviceSystem*>(&::Proto::DeviceSystem::default_instance());
  rack_ = const_cast< ::Proto::DeviceRack*>(&::Proto::DeviceRack::default_instance());
  chassis_ = const_cast< ::Proto::DeviceChassis*>(&::Proto::DeviceChassis::default_instance());
  module_ = const_cast< ::Proto::DeviceModule*>(&::Proto::DeviceModule::default_instance());
  controller_ = const_cast< ::Proto::DeviceController*>(&::Proto::DeviceController::default_instance());
  diagsignal_ = const_cast< ::Proto::DeviceDiagSignal*>(&::Proto::DeviceDiagSignal::default_instance());
}

DeviceObject::DeviceObject(const DeviceObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceObject::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  strid_ = NULL;
  caption_ = NULL;
  childrestriction_ = NULL;
  place_ = 0;
  preset_ = false;
  presetroot_ = false;
  presetname_ = NULL;
  root_ = NULL;
  system_ = NULL;
  rack_ = NULL;
  chassis_ = NULL;
  module_ = NULL;
  controller_ = NULL;
  diagsignal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceObject::~DeviceObject() {
  SharedDtor();
}

void DeviceObject::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete strid_;
    delete caption_;
    delete childrestriction_;
    delete presetname_;
    delete root_;
    delete system_;
    delete rack_;
    delete chassis_;
    delete module_;
    delete controller_;
    delete diagsignal_;
  }
}

void DeviceObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceObject_descriptor_;
}

const DeviceObject& DeviceObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceObject* DeviceObject::default_instance_ = NULL;

DeviceObject* DeviceObject::New() const {
  return new DeviceObject;
}

void DeviceObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    if (has_childrestriction()) {
      if (childrestriction_ != NULL) childrestriction_->::Proto::wstring::Clear();
    }
    place_ = 0;
    preset_ = false;
    presetroot_ = false;
    if (has_presetname()) {
      if (presetname_ != NULL) presetname_->::Proto::wstring::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_root()) {
      if (root_ != NULL) root_->::Proto::DeviceRoot::Clear();
    }
    if (has_system()) {
      if (system_ != NULL) system_->::Proto::DeviceSystem::Clear();
    }
    if (has_rack()) {
      if (rack_ != NULL) rack_->::Proto::DeviceRack::Clear();
    }
    if (has_chassis()) {
      if (chassis_ != NULL) chassis_->::Proto::DeviceChassis::Clear();
    }
    if (has_module()) {
      if (module_ != NULL) module_->::Proto::DeviceModule::Clear();
    }
    if (has_controller()) {
      if (controller_ != NULL) controller_->::Proto::DeviceController::Clear();
    }
    if (has_diagsignal()) {
      if (diagsignal_ != NULL) diagsignal_->::Proto::DeviceDiagSignal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strId;
        break;
      }

      // required .Proto.wstring strId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_childRestriction;
        break;
      }

      // optional .Proto.wstring childRestriction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childRestriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_childrestriction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional int32 place = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_preset;
        break;
      }

      // optional bool preset = 32 [default = false];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preset_)));
          set_has_preset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_presetRoot;
        break;
      }

      // optional bool presetRoot = 33 [default = false];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presetRoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presetroot_)));
          set_has_presetroot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_presetName;
        break;
      }

      // optional .Proto.wstring presetName = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_Root;
        break;
      }

      // optional .Proto.DeviceRoot Root = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_System;
        break;
      }

      // optional .Proto.DeviceSystem System = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_System:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_Rack;
        break;
      }

      // optional .Proto.DeviceRack Rack = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_Chassis;
        break;
      }

      // optional .Proto.DeviceChassis Chassis = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chassis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_Module;
        break;
      }

      // optional .Proto.DeviceModule Module = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_Controller;
        break;
      }

      // optional .Proto.DeviceController Controller = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Controller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_DiagSignal;
        break;
      }

      // optional .Proto.DeviceDiagSignal DiagSignal = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DiagSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diagsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring strId = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (has_childrestriction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->childrestriction(), output);
  }

  // optional int32 place = 5 [default = 0];
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->place(), output);
  }

  // optional bool preset = 32 [default = false];
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->preset(), output);
  }

  // optional bool presetRoot = 33 [default = false];
  if (has_presetroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->presetroot(), output);
  }

  // optional .Proto.wstring presetName = 34;
  if (has_presetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->presetname(), output);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->root(), output);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->system(), output);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (has_rack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->rack(), output);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (has_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->chassis(), output);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->module(), output);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->controller(), output);
  }

  // optional .Proto.DeviceDiagSignal DiagSignal = 106;
  if (has_diagsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->diagsignal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring strId = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (has_childrestriction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->childrestriction(), target);
  }

  // optional int32 place = 5 [default = 0];
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->place(), target);
  }

  // optional bool preset = 32 [default = false];
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->preset(), target);
  }

  // optional bool presetRoot = 33 [default = false];
  if (has_presetroot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->presetroot(), target);
  }

  // optional .Proto.wstring presetName = 34;
  if (has_presetname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->presetname(), target);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->root(), target);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->system(), target);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (has_rack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->rack(), target);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (has_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->chassis(), target);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->module(), target);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->controller(), target);
  }

  // optional .Proto.DeviceDiagSignal DiagSignal = 106;
  if (has_diagsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->diagsignal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring strId = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // optional .Proto.wstring childRestriction = 4;
    if (has_childrestriction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->childrestriction());
    }

    // optional int32 place = 5 [default = 0];
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

    // optional bool preset = 32 [default = false];
    if (has_preset()) {
      total_size += 2 + 1;
    }

    // optional bool presetRoot = 33 [default = false];
    if (has_presetroot()) {
      total_size += 2 + 1;
    }

    // optional .Proto.wstring presetName = 34;
    if (has_presetname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presetname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.DeviceRoot Root = 100;
    if (has_root()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root());
    }

    // optional .Proto.DeviceSystem System = 101;
    if (has_system()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
    }

    // optional .Proto.DeviceRack Rack = 102;
    if (has_rack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rack());
    }

    // optional .Proto.DeviceChassis Chassis = 103;
    if (has_chassis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chassis());
    }

    // optional .Proto.DeviceModule Module = 104;
    if (has_module()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module());
    }

    // optional .Proto.DeviceController Controller = 105;
    if (has_controller()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller());
    }

    // optional .Proto.DeviceDiagSignal DiagSignal = 106;
    if (has_diagsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diagsignal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceObject::MergeFrom(const DeviceObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_childrestriction()) {
      mutable_childrestriction()->::Proto::wstring::MergeFrom(from.childrestriction());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_preset()) {
      set_preset(from.preset());
    }
    if (from.has_presetroot()) {
      set_presetroot(from.presetroot());
    }
    if (from.has_presetname()) {
      mutable_presetname()->::Proto::wstring::MergeFrom(from.presetname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_root()) {
      mutable_root()->::Proto::DeviceRoot::MergeFrom(from.root());
    }
    if (from.has_system()) {
      mutable_system()->::Proto::DeviceSystem::MergeFrom(from.system());
    }
    if (from.has_rack()) {
      mutable_rack()->::Proto::DeviceRack::MergeFrom(from.rack());
    }
    if (from.has_chassis()) {
      mutable_chassis()->::Proto::DeviceChassis::MergeFrom(from.chassis());
    }
    if (from.has_module()) {
      mutable_module()->::Proto::DeviceModule::MergeFrom(from.module());
    }
    if (from.has_controller()) {
      mutable_controller()->::Proto::DeviceController::MergeFrom(from.controller());
    }
    if (from.has_diagsignal()) {
      mutable_diagsignal()->::Proto::DeviceDiagSignal::MergeFrom(from.diagsignal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceObject::CopyFrom(const DeviceObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_childrestriction()) {
    if (!this->childrestriction().IsInitialized()) return false;
  }
  if (has_presetname()) {
    if (!this->presetname().IsInitialized()) return false;
  }
  if (has_module()) {
    if (!this->module().IsInitialized()) return false;
  }
  return true;
}

void DeviceObject::Swap(DeviceObject* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(childrestriction_, other->childrestriction_);
    std::swap(place_, other->place_);
    std::swap(preset_, other->preset_);
    std::swap(presetroot_, other->presetroot_);
    std::swap(presetname_, other->presetname_);
    std::swap(root_, other->root_);
    std::swap(system_, other->system_);
    std::swap(rack_, other->rack_);
    std::swap(chassis_, other->chassis_);
    std::swap(module_, other->module_);
    std::swap(controller_, other->controller_);
    std::swap(diagsignal_, other->diagsignal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceObject_descriptor_;
  metadata.reflection = DeviceObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceRoot::DeviceRoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceRoot::InitAsDefaultInstance() {
}

DeviceRoot::DeviceRoot(const DeviceRoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceRoot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRoot::~DeviceRoot() {
  SharedDtor();
}

void DeviceRoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceRoot_descriptor_;
}

const DeviceRoot& DeviceRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceRoot* DeviceRoot::default_instance_ = NULL;

DeviceRoot* DeviceRoot::New() const {
  return new DeviceRoot;
}

void DeviceRoot::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceRoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceRoot::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceRoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceRoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceRoot::MergeFrom(const DeviceRoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceRoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRoot::CopyFrom(const DeviceRoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRoot::IsInitialized() const {

  return true;
}

void DeviceRoot::Swap(DeviceRoot* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceRoot_descriptor_;
  metadata.reflection = DeviceRoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceSystem::DeviceSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceSystem::InitAsDefaultInstance() {
}

DeviceSystem::DeviceSystem(const DeviceSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSystem::~DeviceSystem() {
  SharedDtor();
}

void DeviceSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSystem_descriptor_;
}

const DeviceSystem& DeviceSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceSystem* DeviceSystem::default_instance_ = NULL;

DeviceSystem* DeviceSystem::New() const {
  return new DeviceSystem;
}

void DeviceSystem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceSystem::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSystem::MergeFrom(const DeviceSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSystem::CopyFrom(const DeviceSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSystem::IsInitialized() const {

  return true;
}

void DeviceSystem::Swap(DeviceSystem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSystem_descriptor_;
  metadata.reflection = DeviceSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceRack::DeviceRack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceRack::InitAsDefaultInstance() {
}

DeviceRack::DeviceRack(const DeviceRack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceRack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRack::~DeviceRack() {
  SharedDtor();
}

void DeviceRack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceRack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceRack_descriptor_;
}

const DeviceRack& DeviceRack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceRack* DeviceRack::default_instance_ = NULL;

DeviceRack* DeviceRack::New() const {
  return new DeviceRack;
}

void DeviceRack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceRack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceRack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceRack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceRack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceRack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceRack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceRack::MergeFrom(const DeviceRack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceRack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRack::CopyFrom(const DeviceRack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRack::IsInitialized() const {

  return true;
}

void DeviceRack::Swap(DeviceRack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceRack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceRack_descriptor_;
  metadata.reflection = DeviceRack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceChassis::kTypeFieldNumber;
#endif  // !_MSC_VER

DeviceChassis::DeviceChassis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceChassis::InitAsDefaultInstance() {
}

DeviceChassis::DeviceChassis(const DeviceChassis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceChassis::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceChassis::~DeviceChassis() {
  SharedDtor();
}

void DeviceChassis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceChassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceChassis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceChassis_descriptor_;
}

const DeviceChassis& DeviceChassis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceChassis* DeviceChassis::default_instance_ = NULL;

DeviceChassis* DeviceChassis::New() const {
  return new DeviceChassis;
}

void DeviceChassis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceChassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceChassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceChassis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceChassis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceChassis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceChassis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceChassis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceChassis::MergeFrom(const DeviceChassis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceChassis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceChassis::CopyFrom(const DeviceChassis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceChassis::IsInitialized() const {

  return true;
}

void DeviceChassis::Swap(DeviceChassis* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceChassis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceChassis_descriptor_;
  metadata.reflection = DeviceChassis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceModule::kTypeFieldNumber;
const int DeviceModule::kModuleConfigurationFieldNumber;
#endif  // !_MSC_VER

DeviceModule::DeviceModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceModule::InitAsDefaultInstance() {
  module_configuration_ = const_cast< ::Proto::ModuleConfiguration*>(&::Proto::ModuleConfiguration::default_instance());
}

DeviceModule::DeviceModule(const DeviceModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceModule::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  module_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceModule::~DeviceModule() {
  SharedDtor();
}

void DeviceModule::SharedDtor() {
  if (this != default_instance_) {
    delete module_configuration_;
  }
}

void DeviceModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceModule_descriptor_;
}

const DeviceModule& DeviceModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceModule* DeviceModule::default_instance_ = NULL;

DeviceModule* DeviceModule::New() const {
  return new DeviceModule;
}

void DeviceModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_module_configuration()) {
      if (module_configuration_ != NULL) module_configuration_->::Proto::ModuleConfiguration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_configuration;
        break;
      }

      // optional .Proto.ModuleConfiguration module_configuration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .Proto.ModuleConfiguration module_configuration = 3;
  if (has_module_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->module_configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .Proto.ModuleConfiguration module_configuration = 3;
  if (has_module_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->module_configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .Proto.ModuleConfiguration module_configuration = 3;
    if (has_module_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module_configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceModule::MergeFrom(const DeviceModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_module_configuration()) {
      mutable_module_configuration()->::Proto::ModuleConfiguration::MergeFrom(from.module_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceModule::CopyFrom(const DeviceModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceModule::IsInitialized() const {

  if (has_module_configuration()) {
    if (!this->module_configuration().IsInitialized()) return false;
  }
  return true;
}

void DeviceModule::Swap(DeviceModule* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(module_configuration_, other->module_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceModule_descriptor_;
  metadata.reflection = DeviceModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceController::DeviceController()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceController::InitAsDefaultInstance() {
}

DeviceController::DeviceController(const DeviceController& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceController::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceController::~DeviceController() {
  SharedDtor();
}

void DeviceController::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceController::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceController::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceController_descriptor_;
}

const DeviceController& DeviceController::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceController* DeviceController::default_instance_ = NULL;

DeviceController* DeviceController::New() const {
  return new DeviceController;
}

void DeviceController::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceController::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceController::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceController::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceController* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceController*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceController::MergeFrom(const DeviceController& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceController::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceController::CopyFrom(const DeviceController& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceController::IsInitialized() const {

  return true;
}

void DeviceController::Swap(DeviceController* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceController::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceController_descriptor_;
  metadata.reflection = DeviceController_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceDiagSignal::DeviceDiagSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceDiagSignal::InitAsDefaultInstance() {
}

DeviceDiagSignal::DeviceDiagSignal(const DeviceDiagSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceDiagSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceDiagSignal::~DeviceDiagSignal() {
  SharedDtor();
}

void DeviceDiagSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceDiagSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceDiagSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceDiagSignal_descriptor_;
}

const DeviceDiagSignal& DeviceDiagSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceDiagSignal* DeviceDiagSignal::default_instance_ = NULL;

DeviceDiagSignal* DeviceDiagSignal::New() const {
  return new DeviceDiagSignal;
}

void DeviceDiagSignal::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceDiagSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceDiagSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceDiagSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceDiagSignal::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceDiagSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceDiagSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceDiagSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceDiagSignal::MergeFrom(const DeviceDiagSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceDiagSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDiagSignal::CopyFrom(const DeviceDiagSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDiagSignal::IsInitialized() const {

  return true;
}

void DeviceDiagSignal::Swap(DeviceDiagSignal* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceDiagSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceDiagSignal_descriptor_;
  metadata.reflection = DeviceDiagSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleConfiguration::kStructDescriptionFieldNumber;
const int ModuleConfiguration::kValuesFieldNumber;
const int ModuleConfiguration::kNameFieldNumber;
#endif  // !_MSC_VER

ModuleConfiguration::ModuleConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleConfiguration::InitAsDefaultInstance() {
}

ModuleConfiguration::ModuleConfiguration(const ModuleConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleConfiguration::SharedCtor() {
  _cached_size_ = 0;
  struct_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleConfiguration::~ModuleConfiguration() {
  SharedDtor();
}

void ModuleConfiguration::SharedDtor() {
  if (struct_description_ != &::google::protobuf::internal::kEmptyString) {
    delete struct_description_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModuleConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleConfiguration_descriptor_;
}

const ModuleConfiguration& ModuleConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ModuleConfiguration* ModuleConfiguration::default_instance_ = NULL;

ModuleConfiguration* ModuleConfiguration::New() const {
  return new ModuleConfiguration;
}

void ModuleConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_struct_description()) {
      if (struct_description_ != &::google::protobuf::internal::kEmptyString) {
        struct_description_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string struct_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_struct_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->struct_description().data(), this->struct_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .Proto.ModuleConfigurationValue values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string struct_description = 1;
  if (has_struct_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struct_description().data(), this->struct_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->struct_description(), output);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string struct_description = 1;
  if (has_struct_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struct_description().data(), this->struct_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->struct_description(), target);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string struct_description = 1;
    if (has_struct_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struct_description());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Proto.ModuleConfigurationValue values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleConfiguration::MergeFrom(const ModuleConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_struct_description()) {
      set_struct_description(from.struct_description());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfiguration::CopyFrom(const ModuleConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfiguration::IsInitialized() const {

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void ModuleConfiguration::Swap(ModuleConfiguration* other) {
  if (other != this) {
    std::swap(struct_description_, other->struct_description_);
    values_.Swap(&other->values_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleConfiguration_descriptor_;
  metadata.reflection = ModuleConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleConfigurationValue::kNameFieldNumber;
const int ModuleConfigurationValue::kValueFieldNumber;
#endif  // !_MSC_VER

ModuleConfigurationValue::ModuleConfigurationValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleConfigurationValue::InitAsDefaultInstance() {
}

ModuleConfigurationValue::ModuleConfigurationValue(const ModuleConfigurationValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleConfigurationValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleConfigurationValue::~ModuleConfigurationValue() {
  SharedDtor();
}

void ModuleConfigurationValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ModuleConfigurationValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleConfigurationValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleConfigurationValue_descriptor_;
}

const ModuleConfigurationValue& ModuleConfigurationValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ModuleConfigurationValue* ModuleConfigurationValue::default_instance_ = NULL;

ModuleConfigurationValue* ModuleConfigurationValue::New() const {
  return new ModuleConfigurationValue;
}

void ModuleConfigurationValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleConfigurationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleConfigurationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleConfigurationValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleConfigurationValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleConfigurationValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleConfigurationValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleConfigurationValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleConfigurationValue::MergeFrom(const ModuleConfigurationValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleConfigurationValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfigurationValue::CopyFrom(const ModuleConfigurationValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfigurationValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModuleConfigurationValue::Swap(ModuleConfigurationValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleConfigurationValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleConfigurationValue_descriptor_;
  metadata.reflection = ModuleConfigurationValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)
