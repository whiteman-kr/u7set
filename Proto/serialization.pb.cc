#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 4127)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4996)
#pragma warning(disable : 6011)
#pragma warning(disable : 6326)
#pragma warning(disable : 6385)
#pragma warning(disable : 6387)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#include "serialization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Proto {
constexpr Uuid::Uuid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UuidDefaultTypeInternal {
  constexpr UuidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidDefaultTypeInternal() {}
  union {
    Uuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidDefaultTypeInternal _Uuid_default_instance_;
constexpr qvariant::qvariant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , intvalue_(0)
  , doublevalue_(0)
  , uintvalue_(0u)
  , boolvalue_(false)
  , floatvalue_(0){}
struct qvariantDefaultTypeInternal {
  constexpr qvariantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~qvariantDefaultTypeInternal() {}
  union {
    qvariant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT qvariantDefaultTypeInternal _qvariant_default_instance_;
constexpr wstring::wstring(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct wstringDefaultTypeInternal {
  constexpr wstringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~wstringDefaultTypeInternal() {}
  union {
    wstring _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT wstringDefaultTypeInternal _wstring_default_instance_;
constexpr FontParam::FontParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_obsolete_(nullptr)
  , size_(0)
  , bold_(false)
  , italic_(false){}
struct FontParamDefaultTypeInternal {
  constexpr FontParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FontParamDefaultTypeInternal() {}
  union {
    FontParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FontParamDefaultTypeInternal _FontParam_default_instance_;
constexpr SchemaPoint::SchemaPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct SchemaPointDefaultTypeInternal {
  constexpr SchemaPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaPointDefaultTypeInternal() {}
  union {
    SchemaPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaPointDefaultTypeInternal _SchemaPoint_default_instance_;
constexpr ImageItem::ImageItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imageid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imagedata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , svgdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allowscale_(true)
  , keepaspectratio_(true){}
struct ImageItemDefaultTypeInternal {
  constexpr ImageItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageItemDefaultTypeInternal() {}
  union {
    ImageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageItemDefaultTypeInternal _ImageItem_default_instance_;
constexpr AfbParamValue::AfbParamValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr)
  , version_(0)
  , type_(0)
  , dataformat_(0)
  , size_(0){}
struct AfbParamValueDefaultTypeInternal {
  constexpr AfbParamValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AfbParamValueDefaultTypeInternal() {}
  union {
    AfbParamValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AfbParamValueDefaultTypeInternal _AfbParamValue_default_instance_;
constexpr Envelope::Envelope(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compressedobject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schemaitem_(nullptr)
  , deviceobject_(nullptr)
  , schema_(nullptr)
  , schemalayer_(nullptr)
  , fblelement_(nullptr)
  , configuration_(nullptr)
  , connection_(nullptr)
  , schemadetailsset_(nullptr)
  , bus_(nullptr)
  , classnamehash_(0u){}
struct EnvelopeDefaultTypeInternal {
  constexpr EnvelopeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvelopeDefaultTypeInternal() {}
  union {
    Envelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvelopeDefaultTypeInternal _Envelope_default_instance_;
constexpr EnvelopeSet::EnvelopeSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct EnvelopeSetDefaultTypeInternal {
  constexpr EnvelopeSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvelopeSetDefaultTypeInternal() {}
  union {
    EnvelopeSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvelopeSetDefaultTypeInternal _EnvelopeSet_default_instance_;
constexpr EnvelopeSetShortDescription::EnvelopeSetShortDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classnamehash_()
  , devicetype_()
  , projectdbversion_(0u)
  , equipmenteditor_(false)
  , preseteditor_(false)
  , presetroot_(false){}
struct EnvelopeSetShortDescriptionDefaultTypeInternal {
  constexpr EnvelopeSetShortDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvelopeSetShortDescriptionDefaultTypeInternal() {}
  union {
    EnvelopeSetShortDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvelopeSetShortDescriptionDefaultTypeInternal _EnvelopeSetShortDescription_default_instance_;
constexpr ExportedDevicePreset::ExportedDevicePreset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(nullptr)
  , items_(nullptr){}
struct ExportedDevicePresetDefaultTypeInternal {
  constexpr ExportedDevicePresetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedDevicePresetDefaultTypeInternal() {}
  union {
    ExportedDevicePreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedDevicePresetDefaultTypeInternal _ExportedDevicePreset_default_instance_;
constexpr Configuration::Configuration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schemasids_()
  , schemas_()
  , uuid_(nullptr)
  , strid_(nullptr)
  , caption_(nullptr)
  , variables_(nullptr)
  , globals_(nullptr){}
struct ConfigurationDefaultTypeInternal {
  constexpr ConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {
    Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationDefaultTypeInternal _Configuration_default_instance_;
constexpr AfbElementCollection::AfbElementCollection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_(){}
struct AfbElementCollectionDefaultTypeInternal {
  constexpr AfbElementCollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AfbElementCollectionDefaultTypeInternal() {}
  union {
    AfbElementCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AfbElementCollectionDefaultTypeInternal _AfbElementCollection_default_instance_;
constexpr AfbElementXml::AfbElementXml(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AfbElementXmlDefaultTypeInternal {
  constexpr AfbElementXmlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AfbElementXmlDefaultTypeInternal() {}
  union {
    AfbElementXml _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AfbElementXmlDefaultTypeInternal _AfbElementXml_default_instance_;
constexpr FblElement::FblElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , outputs_()
  , params_()
  , strid_(nullptr)
  , caption_(nullptr)
  , description_(nullptr)
  , opcode_(0u)
  , hasram_(false)
  , requiredstart_(true){}
struct FblElementDefaultTypeInternal {
  constexpr FblElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FblElementDefaultTypeInternal() {}
  union {
    FblElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FblElementDefaultTypeInternal _FblElement_default_instance_;
constexpr AfbSignal::AfbSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caption_(nullptr)
  , opname_(nullptr)
  , type_(0)

  , operandindex_(0)
  , size_(0)
  , dataformat_(0)
{}
struct AfbSignalDefaultTypeInternal {
  constexpr AfbSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AfbSignalDefaultTypeInternal() {}
  union {
    AfbSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AfbSignalDefaultTypeInternal _AfbSignal_default_instance_;
constexpr AfbParam::AfbParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caption_(nullptr)
  , changedscript_(nullptr)
  , value_(nullptr)
  , defaultvalue_(nullptr)
  , lowlimit_(nullptr)
  , highlimit_(nullptr)
  , opname_(nullptr)
  , operandindex_(0)
  , size_(0)
  , visible_(false)
  , instantiator_(false)
  , user_(false)
  , type_(0)

  , dataformat_(0)
{}
struct AfbParamDefaultTypeInternal {
  constexpr AfbParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AfbParamDefaultTypeInternal() {}
  union {
    AfbParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AfbParamDefaultTypeInternal _AfbParam_default_instance_;
constexpr Schema::Schema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , tags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , joinleftschemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jointopschemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , joinrightschemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , joinbottomschemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(nullptr)
  , schemaid_(nullptr)
  , caption_(nullptr)
  , afbs_(nullptr)
  , logic_schema_(nullptr)
  , ufb_schema_(nullptr)
  , width_(0)
  , height_(0)
  , unit_(0)

  , backgroundcolor_(0u)
  , excludefrombuild_(false)
  , joinhorzpriority_(false){}
struct SchemaDefaultTypeInternal {
  constexpr SchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaDefaultTypeInternal() {}
  union {
    Schema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaDefaultTypeInternal _Schema_default_instance_;
constexpr LogicSchema::LogicSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equipmentids_()
  , lmdescriptionfile_(nullptr)
  , counter_(0){}
struct LogicSchemaDefaultTypeInternal {
  constexpr LogicSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicSchemaDefaultTypeInternal() {}
  union {
    LogicSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicSchemaDefaultTypeInternal _LogicSchema_default_instance_;
constexpr UfbSchema::UfbSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmdescriptionfile_(nullptr)
  , specific_properties_struct_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(1){}
struct UfbSchemaDefaultTypeInternal {
  constexpr UfbSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UfbSchemaDefaultTypeInternal() {}
  union {
    UfbSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UfbSchemaDefaultTypeInternal _UfbSchema_default_instance_;
constexpr SchemaLayer::SchemaLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , uuid_(nullptr)
  , name_(nullptr)
  , compile_(false)
  , show_(false)
  , print_(false){}
struct SchemaLayerDefaultTypeInternal {
  constexpr SchemaLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaLayerDefaultTypeInternal() {}
  union {
    SchemaLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaLayerDefaultTypeInternal _SchemaLayer_default_instance_;
constexpr SchemaItem::SchemaItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clickscript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , objectname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predrawscript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(nullptr)
  , posrectimpl_(nullptr)
  , poslineimpl_(nullptr)
  , posconnectionimpl_(nullptr)
  , fblitem_(nullptr)
  , fblitemrect_(nullptr)
  , fblitemline_(nullptr)
  , rect_(nullptr)
  , line_(nullptr)
  , path_(nullptr)
  , image_(nullptr)
  , frame_(nullptr)
  , indicator_(nullptr)
  , signal_(nullptr)
  , inputsignal_(nullptr)
  , outputsignal_(nullptr)
  , link_(nullptr)
  , afb_(nullptr)
  , constitem_(nullptr)
  , connectionitem_(nullptr)
  , transmitteritem_(nullptr)
  , receiveritem_(nullptr)
  , inoutsignal_(nullptr)
  , ufb_(nullptr)
  , terminator_(nullptr)
  , value_(nullptr)
  , imagevalue_(nullptr)
  , busitem_(nullptr)
  , buscomposer_(nullptr)
  , busextractor_(nullptr)
  , loopbackitem_(nullptr)
  , loopbacksource_(nullptr)
  , loopbacktarget_(nullptr)
  , control_(nullptr)
  , pushbutton_(nullptr)
  , lineedit_(nullptr)
  , itemunit_(0)

  , isstatic_(false)
  , islocked_(false)
  , acceptclick_(false)
  , iscommented_(false)
  , labelpos_(2){}
struct SchemaItemDefaultTypeInternal {
  constexpr SchemaItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemDefaultTypeInternal() {}
  union {
    SchemaItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemDefaultTypeInternal _SchemaItem_default_instance_;
constexpr PosRectImpl::PosRectImpl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leftdocpt_(0)
  , topdocpt_(0)
  , widthdocpt_(0)
  , heightdocpt_(0){}
struct PosRectImplDefaultTypeInternal {
  constexpr PosRectImplDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosRectImplDefaultTypeInternal() {}
  union {
    PosRectImpl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosRectImplDefaultTypeInternal _PosRectImpl_default_instance_;
constexpr PosLineImpl::PosLineImpl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startxdocpt_(0)
  , startydocpt_(0)
  , endxdocpt_(0)
  , endydocpt_(0){}
struct PosLineImplDefaultTypeInternal {
  constexpr PosLineImplDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosLineImplDefaultTypeInternal() {}
  union {
    PosLineImpl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosLineImplDefaultTypeInternal _PosLineImpl_default_instance_;
constexpr PosConnectionImpl::PosConnectionImpl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct PosConnectionImplDefaultTypeInternal {
  constexpr PosConnectionImplDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosConnectionImplDefaultTypeInternal() {}
  union {
    PosConnectionImpl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosConnectionImplDefaultTypeInternal _PosConnectionImpl_default_instance_;
constexpr SchemaItemRect::SchemaItemRect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(nullptr)
  , font_(nullptr)
  , weight_(0)
  , linecolor_(0u)
  , fillcolor_(0u)
  , textcolor_(0u)
  , fill_(false)
  , wordwrap_(false)
  , drawrect_(true)
  , horzalign_(4)
  , vertalign_(128)
  , linestyle_(1){}
struct SchemaItemRectDefaultTypeInternal {
  constexpr SchemaItemRectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemRectDefaultTypeInternal() {}
  union {
    SchemaItemRect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemRectDefaultTypeInternal _SchemaItemRect_default_instance_;
constexpr SchemaItemLine::SchemaItemLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_(0)
  , linecolor_(0u)
  , linecapstart_(0)
  , linecapend_(0)
  , linestyle_(1)
  , linestylecap_(16)
  , linecapfactor_(2){}
struct SchemaItemLineDefaultTypeInternal {
  constexpr SchemaItemLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemLineDefaultTypeInternal() {}
  union {
    SchemaItemLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemLineDefaultTypeInternal _SchemaItemLine_default_instance_;
constexpr SchemaItemPath::SchemaItemPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_(0)
  , linecolor_(0u)
  , linecapstart_(0)
  , linecapend_(0)
  , linestyle_(1)
  , linestylecap_(16)
  , linecapfactor_(2){}
struct SchemaItemPathDefaultTypeInternal {
  constexpr SchemaItemPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemPathDefaultTypeInternal() {}
  union {
    SchemaItemPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemPathDefaultTypeInternal _SchemaItemPath_default_instance_;
constexpr SchemaItemImage::SchemaItemImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr){}
struct SchemaItemImageDefaultTypeInternal {
  constexpr SchemaItemImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemImageDefaultTypeInternal() {}
  union {
    SchemaItemImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemImageDefaultTypeInternal _SchemaItemImage_default_instance_;
constexpr SchemaItemFrame::SchemaItemFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schemaid_(nullptr)
  , allowscale_(true)
  , keepaspectratio_(true){}
struct SchemaItemFrameDefaultTypeInternal {
  constexpr SchemaItemFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemFrameDefaultTypeInternal() {}
  union {
    SchemaItemFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemFrameDefaultTypeInternal _SchemaItemFrame_default_instance_;
constexpr VFrameSetPoint::VFrameSetPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputappsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(0u)
  , colorsource_(0){}
struct VFrameSetPointDefaultTypeInternal {
  constexpr VFrameSetPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VFrameSetPointDefaultTypeInternal() {}
  union {
    VFrameSetPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VFrameSetPointDefaultTypeInternal _VFrameSetPoint_default_instance_;
constexpr IndicatorHistogramVert::IndicatorHistogramVert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customsetpoints_()
  , startvalue_(0)
  , endvalue_(0)
  , barwidth_(0)
  , leftmargin_(0)
  , topmargin_(0)
  , scaletype_(0)
  , rightmargin_(0)
  , bottommargin_(0)
  , drawgridforallbars_(false)
  , drawgridvalueforallbars_(false)
  , drawsetpoints_(0)
  , drawbarrect_(true)
  , drawgrid_(true)
  , drawgridvalues_(true)
  , drawgridvalueunits_(true)
  , lineargridmainstep_(50)
  , lineargridsmallstep_(10)
  , logarithmicgridmainstep_(1)
  , logarithmicgridsmallstep_(0.5){}
struct IndicatorHistogramVertDefaultTypeInternal {
  constexpr IndicatorHistogramVertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndicatorHistogramVertDefaultTypeInternal() {}
  union {
    IndicatorHistogramVert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndicatorHistogramVertDefaultTypeInternal _IndicatorHistogramVert_default_instance_;
constexpr IndicatorArrowIndicator::IndicatorArrowIndicator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startvalue_(0)
  , endvalue_(0)
  , startangle_(0)
  , spanangle_(0){}
struct IndicatorArrowIndicatorDefaultTypeInternal {
  constexpr IndicatorArrowIndicatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndicatorArrowIndicatorDefaultTypeInternal() {}
  union {
    IndicatorArrowIndicator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndicatorArrowIndicatorDefaultTypeInternal _IndicatorArrowIndicator_default_instance_;
constexpr SchemaItemIndicator::SchemaItemIndicator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalcolors_()
  , signalids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_(nullptr)
  , indicatorhistogramvert_(nullptr)
  , indicatorarrowindicator_(nullptr)
  , signalsource_(0)
  , drawrect_(false)
  , lineweight_(0)
  , type_(0u)
  , backgroundcolor_(0u)
  , linecolor_(0u)
  , precision_(2)
  , analogformat_(102){}
struct SchemaItemIndicatorDefaultTypeInternal {
  constexpr SchemaItemIndicatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemIndicatorDefaultTypeInternal() {}
  union {
    SchemaItemIndicator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemIndicatorDefaultTypeInternal _SchemaItemIndicator_default_instance_;
constexpr FblConnectionPoint::FblConnectionPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : associatedios_()
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , point_(nullptr)
  , uuid_(nullptr)
  , dirrection_(0)

  , signaltype_(0)
  , operandindex_(-1){}
struct FblConnectionPointDefaultTypeInternal {
  constexpr FblConnectionPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FblConnectionPointDefaultTypeInternal() {}
  union {
    FblConnectionPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FblConnectionPointDefaultTypeInternal _FblConnectionPoint_default_instance_;
constexpr FblItem::FblItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct FblItemDefaultTypeInternal {
  constexpr FblItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FblItemDefaultTypeInternal() {}
  union {
    FblItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FblItemDefaultTypeInternal _FblItem_default_instance_;
constexpr FblItemRect::FblItemRect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obsoletelabel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , usertext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_(nullptr)
  , weight_(0)
  , linecolor_(0u)
  , fillcolor_(0u)
  , textcolor_(0u)
  , usertextpos_(1)
  , obsoletelabelpos_(-1){}
struct FblItemRectDefaultTypeInternal {
  constexpr FblItemRectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FblItemRectDefaultTypeInternal() {}
  union {
    FblItemRect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FblItemRectDefaultTypeInternal _FblItemRect_default_instance_;
constexpr FblItemLine::FblItemLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_(0)
  , linecolor_(0u)
  , linestyle_(1){}
struct FblItemLineDefaultTypeInternal {
  constexpr FblItemLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FblItemLineDefaultTypeInternal() {}
  union {
    FblItemLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FblItemLineDefaultTypeInternal _FblItemLine_default_instance_;
constexpr SchemaItemSignalColumn::SchemaItemSignalColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(0)
  , horzalign_(1)
  , width_(20){}
struct SchemaItemSignalColumnDefaultTypeInternal {
  constexpr SchemaItemSignalColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemSignalColumnDefaultTypeInternal() {}
  union {
    SchemaItemSignalColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemSignalColumnDefaultTypeInternal _SchemaItemSignalColumn_default_instance_;
constexpr SchemaItemSignal::SchemaItemSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalids_()
  , columns_()
  , impactappsignalids_()
  , customtext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multiline_(true)
  , precision_(2)
  , analogformat_(102){}
struct SchemaItemSignalDefaultTypeInternal {
  constexpr SchemaItemSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemSignalDefaultTypeInternal() {}
  union {
    SchemaItemSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemSignalDefaultTypeInternal _SchemaItemSignal_default_instance_;
constexpr SchemaItemInput::SchemaItemInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemInputDefaultTypeInternal {
  constexpr SchemaItemInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemInputDefaultTypeInternal() {}
  union {
    SchemaItemInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemInputDefaultTypeInternal _SchemaItemInput_default_instance_;
constexpr SchemaItemOutput::SchemaItemOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemOutputDefaultTypeInternal {
  constexpr SchemaItemOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemOutputDefaultTypeInternal() {}
  union {
    SchemaItemOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemOutputDefaultTypeInternal _SchemaItemOutput_default_instance_;
constexpr SchemaItemInOut::SchemaItemInOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemInOutDefaultTypeInternal {
  constexpr SchemaItemInOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemInOutDefaultTypeInternal() {}
  union {
    SchemaItemInOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemInOutDefaultTypeInternal _SchemaItemInOut_default_instance_;
constexpr SchemaItemLink::SchemaItemLink(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemLinkDefaultTypeInternal {
  constexpr SchemaItemLinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemLinkDefaultTypeInternal() {}
  union {
    SchemaItemLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemLinkDefaultTypeInternal _SchemaItemLink_default_instance_;
constexpr SchemaItemAfb::SchemaItemAfb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , deprecated_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , afbstrid_(nullptr)
  , deprecated_afbelement_(nullptr)
  , afbelement_(nullptr)
  , precision_(2){}
struct SchemaItemAfbDefaultTypeInternal {
  constexpr SchemaItemAfbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemAfbDefaultTypeInternal() {}
  union {
    SchemaItemAfb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemAfbDefaultTypeInternal _SchemaItemAfb_default_instance_;
constexpr SchemaItemConst::SchemaItemConst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , floatref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , discreteref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , intvalue_(0)
  , floatvalue_obsolete_(0)
  , discretevalue_(0)
  , floatvalue_(0)
  , precision_(2)
  , horzalign_(4)
  , vertalign_(128)
  , analogformat_(102){}
struct SchemaItemConstDefaultTypeInternal {
  constexpr SchemaItemConstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemConstDefaultTypeInternal() {}
  union {
    SchemaItemConst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemConstDefaultTypeInternal _SchemaItemConst_default_instance_;
constexpr SchemaItemConnection::SchemaItemConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connectionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SchemaItemConnectionDefaultTypeInternal {
  constexpr SchemaItemConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemConnectionDefaultTypeInternal() {}
  union {
    SchemaItemConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemConnectionDefaultTypeInternal _SchemaItemConnection_default_instance_;
constexpr SchemaItemTransmitter::SchemaItemTransmitter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pincount_(1){}
struct SchemaItemTransmitterDefaultTypeInternal {
  constexpr SchemaItemTransmitterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemTransmitterDefaultTypeInternal() {}
  union {
    SchemaItemTransmitter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemTransmitterDefaultTypeInternal _SchemaItemTransmitter_default_instance_;
constexpr SchemaItemReceiver::SchemaItemReceiver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customtext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datatype_(0)
  , analogformat_(102)
  , showvalidity_(true)
  , precision_(2){}
struct SchemaItemReceiverDefaultTypeInternal {
  constexpr SchemaItemReceiverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemReceiverDefaultTypeInternal() {}
  union {
    SchemaItemReceiver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemReceiverDefaultTypeInternal _SchemaItemReceiver_default_instance_;
constexpr SchemaItemUfb::SchemaItemUfb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_()
  , ufbschemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ufbcaption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , specific_properties_struct_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ufbversion_(-1){}
struct SchemaItemUfbDefaultTypeInternal {
  constexpr SchemaItemUfbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemUfbDefaultTypeInternal() {}
  union {
    SchemaItemUfb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemUfbDefaultTypeInternal _SchemaItemUfb_default_instance_;
constexpr SchemaItemTerminator::SchemaItemTerminator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemTerminatorDefaultTypeInternal {
  constexpr SchemaItemTerminatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemTerminatorDefaultTypeInternal() {}
  union {
    SchemaItemTerminator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemTerminatorDefaultTypeInternal _SchemaItemTerminator_default_instance_;
constexpr SchemaItemValue::SchemaItemValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_(nullptr)
  , signalsource_(0)
  , linecolor_(0u)
  , lineweight_(0)
  , fillcolor_(0u)
  , textcolor_(0u)
  , analogformat_(102)
  , drawrect_(true)
  , horzalign_(4)
  , vertalign_(128)
  , precision_(-1){}
struct SchemaItemValueDefaultTypeInternal {
  constexpr SchemaItemValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemValueDefaultTypeInternal() {}
  union {
    SchemaItemValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemValueDefaultTypeInternal _SchemaItemValue_default_instance_;
constexpr SchemaItemImageValue::SchemaItemImageValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : images_()
  , signalids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currentimageid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lineweight_(0)
  , signalsource_(0)
  , drawrect_(false)
  , fillrect_(false)
  , linecolor_(4278190080u)
  , fillcolor_(4278190272u){}
struct SchemaItemImageValueDefaultTypeInternal {
  constexpr SchemaItemImageValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemImageValueDefaultTypeInternal() {}
  union {
    SchemaItemImageValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemImageValueDefaultTypeInternal _SchemaItemImageValue_default_instance_;
constexpr SchemaItemBus::SchemaItemBus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bustypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bus_(nullptr)
  , bustypehash_(PROTOBUF_ULONGLONG(0)){}
struct SchemaItemBusDefaultTypeInternal {
  constexpr SchemaItemBusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemBusDefaultTypeInternal() {}
  union {
    SchemaItemBus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemBusDefaultTypeInternal _SchemaItemBus_default_instance_;
constexpr SchemaItemBusComposer::SchemaItemBusComposer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemBusComposerDefaultTypeInternal {
  constexpr SchemaItemBusComposerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemBusComposerDefaultTypeInternal() {}
  union {
    SchemaItemBusComposer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemBusComposerDefaultTypeInternal _SchemaItemBusComposer_default_instance_;
constexpr SchemaItemBusExtractor::SchemaItemBusExtractor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(){}
struct SchemaItemBusExtractorDefaultTypeInternal {
  constexpr SchemaItemBusExtractorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemBusExtractorDefaultTypeInternal() {}
  union {
    SchemaItemBusExtractor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemBusExtractorDefaultTypeInternal _SchemaItemBusExtractor_default_instance_;
constexpr SchemaItemLoopback::SchemaItemLoopback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loopbackid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SchemaItemLoopbackDefaultTypeInternal {
  constexpr SchemaItemLoopbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemLoopbackDefaultTypeInternal() {}
  union {
    SchemaItemLoopback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemLoopbackDefaultTypeInternal _SchemaItemLoopback_default_instance_;
constexpr SchemaItemLoopbackSource::SchemaItemLoopbackSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemLoopbackSourceDefaultTypeInternal {
  constexpr SchemaItemLoopbackSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemLoopbackSourceDefaultTypeInternal() {}
  union {
    SchemaItemLoopbackSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemLoopbackSourceDefaultTypeInternal _SchemaItemLoopbackSource_default_instance_;
constexpr SchemaItemLoopbackTarget::SchemaItemLoopbackTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SchemaItemLoopbackTargetDefaultTypeInternal {
  constexpr SchemaItemLoopbackTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemLoopbackTargetDefaultTypeInternal() {}
  union {
    SchemaItemLoopbackTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemLoopbackTargetDefaultTypeInternal _SchemaItemLoopbackTarget_default_instance_;
constexpr SchemaItemControl::SchemaItemControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stylesheet_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tooltip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SchemaItemControlDefaultTypeInternal {
  constexpr SchemaItemControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemControlDefaultTypeInternal() {}
  union {
    SchemaItemControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemControlDefaultTypeInternal _SchemaItemControl_default_instance_;
constexpr SchemaItemPushButton::SchemaItemPushButton(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scriptaftercreate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scriptclicked_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scriptpressed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scriptreleased_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scripttoggled_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checkable_(false)
  , checkeddefault_(false)
  , autorepeat_(false)
  , autorepeatdelay_(0)
  , autorepeatinterval_(0){}
struct SchemaItemPushButtonDefaultTypeInternal {
  constexpr SchemaItemPushButtonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemPushButtonDefaultTypeInternal() {}
  union {
    SchemaItemPushButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemPushButtonDefaultTypeInternal _SchemaItemPushButton_default_instance_;
constexpr SchemaItemLineEdit::SchemaItemLineEdit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , placeholdertext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scriptaftercreate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scripteditingfinished_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scriptreturnpressed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scripttextchanged_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , horzalign_(0)
  , vertalign_(0)
  , maxlength_(0)
  , readonly_(false){}
struct SchemaItemLineEditDefaultTypeInternal {
  constexpr SchemaItemLineEditDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemLineEditDefaultTypeInternal() {}
  union {
    SchemaItemLineEdit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemLineEditDefaultTypeInternal _SchemaItemLineEdit_default_instance_;
constexpr DeviceObject::DeviceObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_()
  , children_()
  , specific_properties_struct_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(nullptr)
  , equipmentid_(nullptr)
  , caption_(nullptr)
  , childrestriction_(nullptr)
  , presetname_(nullptr)
  , presetobjectuuid_(nullptr)
  , root_(nullptr)
  , system_(nullptr)
  , rack_(nullptr)
  , chassis_(nullptr)
  , module_(nullptr)
  , controller_(nullptr)
  , appsignal_(nullptr)
  , workstation_(nullptr)
  , software_(nullptr)
  , childcounthint_(0)
  , place_(0)
  , preset_(false)
  , presetroot_(false){}
struct DeviceObjectDefaultTypeInternal {
  constexpr DeviceObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceObjectDefaultTypeInternal() {}
  union {
    DeviceObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceObjectDefaultTypeInternal _DeviceObject_default_instance_;
constexpr DeviceRoot::DeviceRoot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeviceRootDefaultTypeInternal {
  constexpr DeviceRootDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceRootDefaultTypeInternal() {}
  union {
    DeviceRoot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceRootDefaultTypeInternal _DeviceRoot_default_instance_;
constexpr DeviceSystem::DeviceSystem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeviceSystemDefaultTypeInternal {
  constexpr DeviceSystemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceSystemDefaultTypeInternal() {}
  union {
    DeviceSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceSystemDefaultTypeInternal _DeviceSystem_default_instance_;
constexpr DeviceRack::DeviceRack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeviceRackDefaultTypeInternal {
  constexpr DeviceRackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceRackDefaultTypeInternal() {}
  union {
    DeviceRack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceRackDefaultTypeInternal _DeviceRack_default_instance_;
constexpr DeviceChassis::DeviceChassis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct DeviceChassisDefaultTypeInternal {
  constexpr DeviceChassisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceChassisDefaultTypeInternal() {}
  union {
    DeviceChassis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceChassisDefaultTypeInternal _DeviceChassis_default_instance_;
constexpr DeviceModule::DeviceModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configurationscript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rawdatadescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , typeobsolete_(0)
  , moduletype_(0)
  , custommodulefamily_(0){}
struct DeviceModuleDefaultTypeInternal {
  constexpr DeviceModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceModuleDefaultTypeInternal() {}
  union {
    DeviceModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceModuleDefaultTypeInternal _DeviceModule_default_instance_;
constexpr DeviceController::DeviceController(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeviceControllerDefaultTypeInternal {
  constexpr DeviceControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceControllerDefaultTypeInternal() {}
  union {
    DeviceController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceControllerDefaultTypeInternal _DeviceController_default_instance_;
constexpr DeviceAppSignal::DeviceAppSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validitysignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appsignalbustypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signalspecpropsstruct_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , obsoletetype_(0)
  , byteorder_(0)
  , format_(0)
  , size_(0)
  , valueoffset_(0)
  , valuebit_(0)
  , type_(0)
  , function_(0)
  , memoryarea_(0)
  , appsignallowadc_(0)
  , appsignallowengunits_(0)
  , signalspecpropsstructwasfixed_(false)
  , appsignalhighadc_(65535)
  , appsignaldataformat_(2)
  , appsignalhighengunits_(100){}
struct DeviceAppSignalDefaultTypeInternal {
  constexpr DeviceAppSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceAppSignalDefaultTypeInternal() {}
  union {
    DeviceAppSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceAppSignalDefaultTypeInternal _DeviceAppSignal_default_instance_;
constexpr Workstation::Workstation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct WorkstationDefaultTypeInternal {
  constexpr WorkstationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkstationDefaultTypeInternal() {}
  union {
    Workstation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkstationDefaultTypeInternal _Workstation_default_instance_;
constexpr Software::Software(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct SoftwareDefaultTypeInternal {
  constexpr SoftwareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoftwareDefaultTypeInternal() {}
  union {
    Software _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoftwareDefaultTypeInternal _Software_default_instance_;
constexpr ModuleConfiguration::ModuleConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , struct_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModuleConfigurationDefaultTypeInternal {
  constexpr ModuleConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModuleConfigurationDefaultTypeInternal() {}
  union {
    ModuleConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModuleConfigurationDefaultTypeInternal _ModuleConfiguration_default_instance_;
constexpr ModuleConfigurationValue::ModuleConfigurationValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModuleConfigurationValueDefaultTypeInternal {
  constexpr ModuleConfigurationValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModuleConfigurationValueDefaultTypeInternal() {}
  union {
    ModuleConfigurationValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModuleConfigurationValueDefaultTypeInternal _ModuleConfigurationValue_default_instance_;
constexpr Property::Property(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PropertyDefaultTypeInternal {
  constexpr PropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyDefaultTypeInternal _Property_default_instance_;
constexpr SignalSpecPropValue::SignalSpecPropValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stringval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , isenum_(false)
  , boolval_(false)
  , int32val_(0)
  , uint32val_(0u)
  , int64val_(PROTOBUF_LONGLONG(0))
  , uint64val_(PROTOBUF_ULONGLONG(0))
  , doubleval_(0){}
struct SignalSpecPropValueDefaultTypeInternal {
  constexpr SignalSpecPropValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalSpecPropValueDefaultTypeInternal() {}
  union {
    SignalSpecPropValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalSpecPropValueDefaultTypeInternal _SignalSpecPropValue_default_instance_;
constexpr SignalSpecPropValues::SignalSpecPropValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct SignalSpecPropValuesDefaultTypeInternal {
  constexpr SignalSpecPropValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalSpecPropValuesDefaultTypeInternal() {}
  union {
    SignalSpecPropValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalSpecPropValuesDefaultTypeInternal _SignalSpecPropValues_default_instance_;
constexpr Address16::Address16(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(-1)
  , bit_(-1){}
struct Address16DefaultTypeInternal {
  constexpr Address16DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Address16DefaultTypeInternal() {}
  union {
    Address16 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Address16DefaultTypeInternal _Address16_default_instance_;
constexpr Unit::Unit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct UnitDefaultTypeInternal {
  constexpr UnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnitDefaultTypeInternal() {}
  union {
    Unit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnitDefaultTypeInternal _Unit_default_instance_;
constexpr UnitSet::UnitSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(){}
struct UnitSetDefaultTypeInternal {
  constexpr UnitSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnitSetDefaultTypeInternal() {}
  union {
    UnitSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnitSetDefaultTypeInternal _UnitSet_default_instance_;
constexpr TuningValue::TuningValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intvalue_(PROTOBUF_LONGLONG(0))
  , doublevalue_(0)
  , type_(0){}
struct TuningValueDefaultTypeInternal {
  constexpr TuningValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TuningValueDefaultTypeInternal() {}
  union {
    TuningValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TuningValueDefaultTypeInternal _TuningValue_default_instance_;
constexpr AppSignalDbField::AppSignalDbField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : created_(PROTOBUF_LONGLONG(0))
  , checkedout_(false)
  , deleted_(false)
  , instanceaction_(0)
  , instancecreated_(PROTOBUF_LONGLONG(0))
  , userid_(-1)
  , id_(-1)
  , signalgroupid_(-1)
  , signalinstanceid_(-1)
  , changesetid_(-1){}
struct AppSignalDbFieldDefaultTypeInternal {
  constexpr AppSignalDbFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSignalDbFieldDefaultTypeInternal() {}
  union {
    AppSignalDbField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSignalDbFieldDefaultTypeInternal _AppSignalDbField_default_instance_;
constexpr StateFlagSignal::StateFlagSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flagsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flagtype_(0){}
struct StateFlagSignalDefaultTypeInternal {
  constexpr StateFlagSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateFlagSignalDefaultTypeInternal() {}
  union {
    StateFlagSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateFlagSignalDefaultTypeInternal _StateFlagSignal_default_instance_;
constexpr AppSignalCalculatedParam::AppSignalCalculatedParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stateflagssignals_()
  , iobufaddr_(nullptr)
  , tuningaddr_(nullptr)
  , ualaddr_(nullptr)
  , regbufaddr_(nullptr)
  , regvalueaddr_(nullptr)
  , regvalidityaddr_(nullptr)
  , hash_(PROTOBUF_ULONGLONG(0))
  , lmramaccess_(0)
  , isconst_(false)
  , constvalue_(0){}
struct AppSignalCalculatedParamDefaultTypeInternal {
  constexpr AppSignalCalculatedParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSignalCalculatedParamDefaultTypeInternal() {}
  union {
    AppSignalCalculatedParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSignalCalculatedParamDefaultTypeInternal _AppSignalCalculatedParam_default_instance_;
constexpr AppSignal::AppSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , appsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customappsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bustypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , specpropstruct_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , specpropvalues_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tuningdefaultvalue_(nullptr)
  , tuninglowbound_(nullptr)
  , tuninghighbound_(nullptr)
  , dbfield_(nullptr)
  , calcparam_(nullptr)
  , channel_(0)
  , datasize_(0)
  , excludefrombuild_(false)
  , enabletuning_(false)
  , acquire_(false)
  , archive_(false)
  , adaptiveaperture_(false)
  , decimalplaces_(2)
  , signaltype_(1)
  , inouttype_(2)
  , byteorder_(1)
  , analogsignalformat_(1)
  , coarseaperture_(1)
  , fineaperture_(0.5){}
struct AppSignalDefaultTypeInternal {
  constexpr AppSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSignalDefaultTypeInternal() {}
  union {
    AppSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSignalDefaultTypeInternal _AppSignal_default_instance_;
constexpr AppSignalSet::AppSignalSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignal_(){}
struct AppSignalSetDefaultTypeInternal {
  constexpr AppSignalSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSignalSetDefaultTypeInternal() {}
  union {
    AppSignalSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSignalSetDefaultTypeInternal _AppSignalSet_default_instance_;
constexpr ProtoAppSignalData::ProtoAppSignalData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bustypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userspecpropstruct_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userspecpropvalues_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tuningdefaultvalue_(nullptr)
  , tuninglowbound_(nullptr)
  , tuninghighbound_(nullptr)
  , channel_(0)
  , enabletuning_(false)
  , adaptiveaperture_(false)
  , excludefrombuild_(false)
  , decimalplaces_(2)
  , datasize_(32)
  , byteorder_(1)
  , analogsignalformat_(2)
  , acquire_(true)
  , archive_(true)
  , coarseaperture_(1)
  , fineaperture_(0.5){}
struct ProtoAppSignalDataDefaultTypeInternal {
  constexpr ProtoAppSignalDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoAppSignalDataDefaultTypeInternal() {}
  union {
    ProtoAppSignalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoAppSignalDataDefaultTypeInternal _ProtoAppSignalData_default_instance_;
constexpr AppSignalState::AppSignalState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(PROTOBUF_ULONGLONG(0))
  , value_(0)
  , systemtime_(PROTOBUF_LONGLONG(0))
  , localtime_(PROTOBUF_LONGLONG(0))
  , flags_(0u)
  , packetno_(0u)
  , planttime_(PROTOBUF_LONGLONG(0))
  , archiveid_(PROTOBUF_LONGLONG(-1)){}
struct AppSignalStateDefaultTypeInternal {
  constexpr AppSignalStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSignalStateDefaultTypeInternal() {}
  union {
    AppSignalState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSignalStateDefaultTypeInternal _AppSignalState_default_instance_;
constexpr Connection::Connection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connectionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port1equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port2equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port1rawdatadescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port2rawdatadescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(nullptr)
  , obsoleteserialmode_(0)
  , obsoletemode_(0)
  , port1txstartaddress_(0)
  , manualsettings_(false)
  , disabledataid_(false)
  , generatevhdfile_(false)
  , port1enableserial_(false)
  , port2txstartaddress_(0)
  , port1enableduplex_(false)
  , port2enableserial_(false)
  , port2enableduplex_(false)
  , obsoleteenableduplex_(false)
  , port1serialmode_(0)
  , port2serialmode_(0)
  , type_(0)
  , port1txwordsquantity_(479)
  , port1rxwordsquantity_(479)
  , port2txwordsquantity_(479)
  , port2rxwordsquantity_(479){}
struct ConnectionDefaultTypeInternal {
  constexpr ConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionDefaultTypeInternal _Connection_default_instance_;
constexpr SchemaDetailsSet::SchemaDetailsSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schemasdetails_(){}
struct SchemaDetailsSetDefaultTypeInternal {
  constexpr SchemaDetailsSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaDetailsSetDefaultTypeInternal() {}
  union {
    SchemaDetailsSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaDetailsSetDefaultTypeInternal _SchemaDetailsSet_default_instance_;
constexpr SchemaDetails::SchemaDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalids_()
  , labels_()
  , connections_()
  , guids_()
  , tags_()
  , loopbacks_()
  , schemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , equipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lmdescriptionfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0)
  , excludedfrombuild_(false){}
struct SchemaDetailsDefaultTypeInternal {
  constexpr SchemaDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaDetailsDefaultTypeInternal() {}
  union {
    SchemaDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaDetailsDefaultTypeInternal _SchemaDetails_default_instance_;
constexpr ArchSignal::ArchSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(PROTOBUF_ULONGLONG(0))
  , isanalog_(false){}
struct ArchSignalDefaultTypeInternal {
  constexpr ArchSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArchSignalDefaultTypeInternal() {}
  union {
    ArchSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArchSignalDefaultTypeInternal _ArchSignal_default_instance_;
constexpr ArchSignals::ArchSignals(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : archsignals_(){}
struct ArchSignalsDefaultTypeInternal {
  constexpr ArchSignalsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArchSignalsDefaultTypeInternal() {}
  union {
    ArchSignals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArchSignalsDefaultTypeInternal _ArchSignals_default_instance_;
constexpr BusSignal::BusSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , units_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bustypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , analogformat_(0)
  , adaptiveaperture_(false)
  , inbusoffset_(0)
  , inbusdiscretebitno_(0)
  , inbusanalogsize_(0)
  , inbusanalogformat_(0)
  , inbusanalogbyteorder_(0)
  , busanaloglowlimit_(0)
  , busanaloghighlimit_(0)
  , inbusanaloglowlimit_(0)
  , inbusanaloghighlimit_(0)
  , precision_(2)
  , coarseaperture_(1)
  , fineaperture_(0.5){}
struct BusSignalDefaultTypeInternal {
  constexpr BusSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusSignalDefaultTypeInternal() {}
  union {
    BusSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusSignalDefaultTypeInternal _BusSignal_default_instance_;
constexpr Bus::Bus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bussignals_()
  , bustypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(nullptr)
  , manualbussize_(0)
  , enablemanualbussize_(false)
  , autosignalplacement_(true)
  , enablemanualbussizeisnotinitialized_(true){}
struct BusDefaultTypeInternal {
  constexpr BusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusDefaultTypeInternal() {}
  union {
    Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusDefaultTypeInternal _Bus_default_instance_;
constexpr ComparatorSignal::ComparatorSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , constvalue_(0)
  , isacquired_(false)
  , isconst_(true){}
struct ComparatorSignalDefaultTypeInternal {
  constexpr ComparatorSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComparatorSignalDefaultTypeInternal() {}
  union {
    ComparatorSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComparatorSignalDefaultTypeInternal _ComparatorSignal_default_instance_;
constexpr Comparator::Comparator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schemaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_(nullptr)
  , compare_(nullptr)
  , hysteresis_(nullptr)
  , output_(nullptr)
  , schemaitemuuid_(nullptr)
  , allsignalsisacquired_(false)
  , precision_(2)
  , cmptype_(1)
  , inanalogsignalformat_(1){}
struct ComparatorDefaultTypeInternal {
  constexpr ComparatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComparatorDefaultTypeInternal() {}
  union {
    Comparator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComparatorDefaultTypeInternal _Comparator_default_instance_;
constexpr LmComparatorSet::LmComparatorSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : comparator_()
  , lmequipmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LmComparatorSetDefaultTypeInternal {
  constexpr LmComparatorSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LmComparatorSetDefaultTypeInternal() {}
  union {
    LmComparatorSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LmComparatorSetDefaultTypeInternal _LmComparatorSet_default_instance_;
constexpr ComparatorSet::ComparatorSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lmcomparatorset_(){}
struct ComparatorSetDefaultTypeInternal {
  constexpr ComparatorSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComparatorSetDefaultTypeInternal() {}
  union {
    ComparatorSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComparatorSetDefaultTypeInternal _ComparatorSet_default_instance_;
constexpr MetrologySignalLocation::MetrologySignalLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rackid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chassisid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , moduleid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contact_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shownonschemas_(false)
  , place_(-1)
  , chassis_(-1)
  , module_(-1){}
struct MetrologySignalLocationDefaultTypeInternal {
  constexpr MetrologySignalLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetrologySignalLocationDefaultTypeInternal() {}
  union {
    MetrologySignalLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetrologySignalLocationDefaultTypeInternal _MetrologySignalLocation_default_instance_;
constexpr MetrologySignal::MetrologySignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignal_(nullptr)
  , location_(nullptr)
  , electriclowlimit_(0)
  , electrichighlimit_(0)
  , electricr0_(0)
  , physicallowlimit_(0)
  , physicalhighlimit_(0)
  , electricrload_(0)
  , electricprecision_(4)
  , electricunitid_(1)
  , electricsensortype_(1){}
struct MetrologySignalDefaultTypeInternal {
  constexpr MetrologySignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetrologySignalDefaultTypeInternal() {}
  union {
    MetrologySignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetrologySignalDefaultTypeInternal _MetrologySignal_default_instance_;
constexpr MetrologySignalSet::MetrologySignalSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrologysignal_(){}
struct MetrologySignalSetDefaultTypeInternal {
  constexpr MetrologySignalSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetrologySignalSetDefaultTypeInternal() {}
  union {
    MetrologySignalSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetrologySignalSetDefaultTypeInternal _MetrologySignalSet_default_instance_;
constexpr SimOverrideSignal::SimOverrideSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appsignalid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overridescript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overridevalue_(nullptr)
  , enabled_(false)
  , index_(0)
  , overridemethod_(0){}
struct SimOverrideSignalDefaultTypeInternal {
  constexpr SimOverrideSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimOverrideSignalDefaultTypeInternal() {}
  union {
    SimOverrideSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimOverrideSignalDefaultTypeInternal _SimOverrideSignal_default_instance_;
constexpr SimOverrideSignalWorkspace::SimOverrideSignalWorkspace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overridesignals_(){}
struct SimOverrideSignalWorkspaceDefaultTypeInternal {
  constexpr SimOverrideSignalWorkspaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimOverrideSignalWorkspaceDefaultTypeInternal() {}
  union {
    SimOverrideSignalWorkspace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimOverrideSignalWorkspaceDefaultTypeInternal _SimOverrideSignalWorkspace_default_instance_;
}  // namespace Proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_serialization_2eproto[104];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_serialization_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_serialization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_serialization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Proto::Uuid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Uuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Uuid, uuid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, intvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, uintvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, doublevalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, boolvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::qvariant, floatvalue_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::wstring, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::wstring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::wstring, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, name_obsolete_),
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, size_),
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, bold_),
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, italic_),
  PROTOBUF_FIELD_OFFSET(::Proto::FontParam, name_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaPoint, x_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaPoint, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, allowscale_),
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, keepaspectratio_),
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, imageid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, imagedata_),
  PROTOBUF_FIELD_OFFSET(::Proto::ImageItem, svgdata_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, version_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, dataformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, size_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParamValue, reference_),
  2,
  3,
  4,
  5,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, classnamehash_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, compressedobject_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, schemaitem_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, deviceobject_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, schema_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, schemalayer_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, fblelement_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, configuration_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, connection_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, schemadetailsset_),
  PROTOBUF_FIELD_OFFSET(::Proto::Envelope, bus_),
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSet, items_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, projectdbversion_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, classnamehash_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, devicetype_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, equipmenteditor_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, preseteditor_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnvelopeSetShortDescription, presetroot_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Proto::ExportedDevicePreset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ExportedDevicePreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ExportedDevicePreset, description_),
  PROTOBUF_FIELD_OFFSET(::Proto::ExportedDevicePreset, items_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, strid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, variables_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, globals_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, schemasids_),
  PROTOBUF_FIELD_OFFSET(::Proto::Configuration, schemas_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AfbElementCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AfbElementCollection, elements_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbElementXml, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbElementXml, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AfbElementXml, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, strid_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, opcode_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, hasram_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, requiredstart_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, inputs_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, outputs_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, params_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblElement, description_),
  0,
  1,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, operandindex_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, size_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, opname_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbSignal, dataformat_),
  0,
  2,
  3,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, visible_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, operandindex_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, size_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, instantiator_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, user_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, changedscript_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, defaultvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, lowlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, highlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, opname_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::AfbParam, dataformat_),
  0,
  9,
  7,
  8,
  10,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, schemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, width_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, height_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, unit_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, excludefrombuild_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, backgroundcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, tags_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, joinhorzpriority_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, joinleftschemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, jointopschemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, joinrightschemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, joinbottomschemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, layers_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, afbs_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, logic_schema_),
  PROTOBUF_FIELD_OFFSET(::Proto::Schema, ufb_schema_),
  5,
  6,
  7,
  11,
  12,
  13,
  15,
  14,
  0,
  16,
  1,
  2,
  3,
  4,
  ~0u,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::Proto::LogicSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::LogicSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LogicSchema, equipmentids_),
  PROTOBUF_FIELD_OFFSET(::Proto::LogicSchema, counter_),
  PROTOBUF_FIELD_OFFSET(::Proto::LogicSchema, lmdescriptionfile_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::UfbSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::UfbSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::UfbSchema, description_),
  PROTOBUF_FIELD_OFFSET(::Proto::UfbSchema, version_),
  PROTOBUF_FIELD_OFFSET(::Proto::UfbSchema, lmdescriptionfile_),
  PROTOBUF_FIELD_OFFSET(::Proto::UfbSchema, specific_properties_struct_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, compile_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, show_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, print_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaLayer, items_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, isstatic_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, islocked_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, itemunit_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, acceptclick_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, clickscript_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, iscommented_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, objectname_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, label_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, labelpos_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, predrawscript_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, posrectimpl_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, poslineimpl_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, posconnectionimpl_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, fblitem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, fblitemrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, fblitemline_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, rect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, line_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, path_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, image_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, frame_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, indicator_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, signal_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, inputsignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, outputsignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, link_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, afb_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, constitem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, connectionitem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, transmitteritem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, receiveritem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, inoutsignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, ufb_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, terminator_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, imagevalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, busitem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, buscomposer_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, busextractor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, loopbackitem_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, loopbacksource_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, loopbacktarget_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, control_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, pushbutton_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItem, lineedit_),
  4,
  41,
  42,
  40,
  43,
  0,
  44,
  1,
  2,
  45,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  PROTOBUF_FIELD_OFFSET(::Proto::PosRectImpl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosRectImpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PosRectImpl, leftdocpt_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosRectImpl, topdocpt_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosRectImpl, widthdocpt_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosRectImpl, heightdocpt_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Proto::PosLineImpl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosLineImpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PosLineImpl, startxdocpt_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosLineImpl, startydocpt_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosLineImpl, endxdocpt_),
  PROTOBUF_FIELD_OFFSET(::Proto::PosLineImpl, endydocpt_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PosConnectionImpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PosConnectionImpl, points_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, weight_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, fillcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, text_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, textcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, font_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, fill_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, drawrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, horzalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, vertalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, wordwrap_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemRect, linestyle_),
  2,
  3,
  4,
  0,
  5,
  1,
  6,
  8,
  9,
  10,
  7,
  11,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, weight_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, linestyle_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, linestylecap_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, linecapstart_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, linecapend_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLine, linecapfactor_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, weight_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, linestyle_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, linestylecap_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, linecapstart_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, linecapend_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPath, linecapfactor_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImage, image_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemFrame, schemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemFrame, allowscale_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemFrame, keepaspectratio_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::VFrameSetPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::VFrameSetPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::VFrameSetPoint, color_),
  PROTOBUF_FIELD_OFFSET(::Proto::VFrameSetPoint, colorsource_),
  PROTOBUF_FIELD_OFFSET(::Proto::VFrameSetPoint, outputappsignalid_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, startvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, endvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, barwidth_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, leftmargin_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, topmargin_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, rightmargin_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, bottommargin_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawbarrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawgrid_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawgridforallbars_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawgridvalues_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawgridvalueforallbars_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawgridvalueunits_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, lineargridmainstep_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, lineargridsmallstep_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, logarithmicgridmainstep_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, logarithmicgridsmallstep_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, drawsetpoints_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, customsetpoints_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorHistogramVert, scaletype_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  11,
  12,
  8,
  13,
  9,
  14,
  15,
  16,
  17,
  18,
  10,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorArrowIndicator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorArrowIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorArrowIndicator, startvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorArrowIndicator, endvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorArrowIndicator, startangle_),
  PROTOBUF_FIELD_OFFSET(::Proto::IndicatorArrowIndicator, spanangle_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, signalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, signalsource_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, analogformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, font_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, drawrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, lineweight_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, backgroundcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, signalcolors_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, indicatorhistogramvert_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemIndicator, indicatorarrowindicator_),
  0,
  4,
  10,
  11,
  1,
  5,
  6,
  8,
  9,
  ~0u,
  7,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, point_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, dirrection_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, operandindex_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, associatedios_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblConnectionPoint, signaltype_),
  1,
  3,
  2,
  5,
  0,
  ~0u,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::FblItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::FblItem, points_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, weight_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, fillcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, textcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, font_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, obsoletelabel_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, usertext_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, usertextpos_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemRect, obsoletelabelpos_),
  3,
  4,
  5,
  6,
  2,
  0,
  1,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemLine, weight_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemLine, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::FblItemLine, linestyle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignalColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignalColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignalColumn, width_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignalColumn, data_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignalColumn, horzalign_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, appsignalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, analogformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, columns_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, multiline_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, impactappsignalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemSignal, customtext_),
  ~0u,
  2,
  3,
  ~0u,
  1,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemInOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, params_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, afbstrid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, deprecated_afbelement_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, deprecated_label_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemAfb, afbelement_),
  ~0u,
  1,
  4,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, horzalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, vertalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, analogformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, intvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, intref_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, floatvalue_obsolete_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, floatvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, floatref_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, discretevalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConst, discreteref_),
  3,
  8,
  9,
  10,
  11,
  4,
  0,
  5,
  7,
  1,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConnection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemConnection, connectionid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemTransmitter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemTransmitter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemTransmitter, pincount_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, showvalidity_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, appsignalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, datatype_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, analogformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemReceiver, customtext_),
  4,
  0,
  2,
  5,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, ufbschemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, ufbcaption_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, ufbversion_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, specific_properties_struct_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemUfb, properties_),
  0,
  1,
  3,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemTerminator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, signalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, signalsource_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, lineweight_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, fillcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, textcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, text_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, font_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, drawrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, horzalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, vertalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemValue, analogformat_),
  0,
  3,
  5,
  4,
  6,
  7,
  1,
  2,
  9,
  10,
  11,
  12,
  8,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, signalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, signalsource_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, currentimageid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, lineweight_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, linecolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, fillcolor_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, drawrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, fillrect_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemImageValue, images_),
  0,
  3,
  1,
  2,
  6,
  7,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBus, bustypeid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBus, bustypehash_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBus, bus_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBusComposer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBusExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemBusExtractor, properties_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLoopback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLoopback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLoopback, loopbackid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLoopbackSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLoopbackTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemControl, stylesheet_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemControl, tooltip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, text_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, checkable_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, checkeddefault_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, autorepeat_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, autorepeatdelay_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, autorepeatinterval_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, scriptaftercreate_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, scriptclicked_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, scriptpressed_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, scriptreleased_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemPushButton, scripttoggled_),
  0,
  6,
  7,
  8,
  9,
  10,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, text_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, horzalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, vertalign_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, maxlength_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, placeholdertext_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, readonly_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, scriptaftercreate_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, scripteditingfinished_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, scriptreturnpressed_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaItemLineEdit, scripttextchanged_),
  0,
  6,
  7,
  8,
  1,
  9,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, childrestriction_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, place_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, specific_properties_struct_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, properties_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, preset_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, presetroot_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, presetname_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, presetobjectuuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, childcounthint_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, root_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, system_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, rack_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, chassis_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, module_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, controller_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, appsignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, workstation_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, software_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceObject, children_),
  1,
  2,
  3,
  4,
  17,
  0,
  ~0u,
  18,
  19,
  5,
  6,
  16,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceRack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceChassis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceChassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceChassis, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, typeobsolete_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, configurationscript_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, moduletype_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, rawdatadescription_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceModule, custommodulefamily_),
  2,
  0,
  3,
  1,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, obsoletetype_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, byteorder_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, format_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, size_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, valueoffset_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, valuebit_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, function_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, memoryarea_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, appsignallowadc_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, appsignalhighadc_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, appsignallowengunits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, appsignalhighengunits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, appsignaldataformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, validitysignalid_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, appsignalbustypeid_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, signalspecpropsstruct_),
  PROTOBUF_FIELD_OFFSET(::Proto::DeviceAppSignal, signalspecpropsstructwasfixed_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  15,
  13,
  17,
  16,
  0,
  1,
  2,
  14,
  PROTOBUF_FIELD_OFFSET(::Proto::Workstation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Workstation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Workstation, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::Software, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Software, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Software, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfiguration, struct_description_),
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfiguration, values_),
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfiguration, name_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfigurationValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfigurationValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfigurationValue, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::ModuleConfigurationValue, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::Property, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Property, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::Property, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, isenum_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, int32val_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, uint32val_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, int64val_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, uint64val_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, doubleval_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, boolval_),
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValue, stringval_),
  0,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  4,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SignalSpecPropValues, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::Address16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Address16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Address16, offset_),
  PROTOBUF_FIELD_OFFSET(::Proto::Address16, bit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::Unit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Unit, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::Unit, caption_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::UnitSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::UnitSet, unit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TuningValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TuningValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TuningValue, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::TuningValue, intvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::TuningValue, doublevalue_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, signalgroupid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, signalinstanceid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, changesetid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, checkedout_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, userid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, created_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, deleted_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, instancecreated_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalDbField, instanceaction_),
  6,
  7,
  8,
  9,
  1,
  5,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::Proto::StateFlagSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::StateFlagSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::StateFlagSignal, flagtype_),
  PROTOBUF_FIELD_OFFSET(::Proto::StateFlagSignal, flagsignalid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, hash_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, iobufaddr_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, tuningaddr_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, ualaddr_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, regbufaddr_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, regvalueaddr_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, regvalidityaddr_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, lmramaccess_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, isconst_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, constvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalCalculatedParam, stateflagssignals_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, appsignalid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, customappsignalid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, lmequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, bustypeid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, excludefrombuild_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, signaltype_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, inouttype_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, datasize_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, byteorder_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, analogsignalformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, unit_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, enabletuning_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, tuningdefaultvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, tuninglowbound_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, tuninghighbound_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, acquire_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, archive_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, decimalplaces_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, coarseaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, fineaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, adaptiveaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, specpropstruct_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, specpropvalues_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, tags_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, dbfield_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignal, calcparam_),
  0,
  1,
  2,
  3,
  4,
  5,
  14,
  16,
  22,
  23,
  15,
  24,
  25,
  6,
  17,
  9,
  10,
  11,
  18,
  19,
  21,
  26,
  27,
  20,
  7,
  8,
  ~0u,
  12,
  13,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalSet, appsignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, bustypeid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, datasize_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, byteorder_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, analogsignalformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, unit_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, enabletuning_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, tuningdefaultvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, tuninglowbound_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, tuninghighbound_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, acquire_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, archive_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, decimalplaces_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, coarseaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, fineaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, adaptiveaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, excludefrombuild_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, tags_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, userspecpropstruct_),
  PROTOBUF_FIELD_OFFSET(::Proto::ProtoAppSignalData, userspecpropvalues_),
  0,
  1,
  9,
  14,
  15,
  16,
  2,
  10,
  6,
  7,
  8,
  17,
  18,
  13,
  19,
  20,
  11,
  12,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, hash_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, flags_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, systemtime_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, localtime_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, planttime_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, archiveid_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppSignalState, packetno_),
  0,
  1,
  4,
  2,
  3,
  6,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, connectionid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1rawdatadescription_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2rawdatadescription_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, manualsettings_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, disabledataid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, generatevhdfile_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1txstartaddress_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1txwordsquantity_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1rxwordsquantity_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2txstartaddress_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2txwordsquantity_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2rxwordsquantity_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1enableserial_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1serialmode_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port1enableduplex_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2enableserial_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2serialmode_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, port2enableduplex_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, obsoletemode_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, obsoleteserialmode_),
  PROTOBUF_FIELD_OFFSET(::Proto::Connection, obsoleteenableduplex_),
  0,
  1,
  2,
  3,
  4,
  9,
  10,
  11,
  8,
  21,
  22,
  13,
  23,
  24,
  5,
  12,
  18,
  14,
  15,
  19,
  16,
  20,
  7,
  6,
  17,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetailsSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetailsSet, schemasdetails_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, version_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, schemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, excludedfrombuild_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, equipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, lmdescriptionfile_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, path_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, signalids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, labels_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, connections_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, guids_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, tags_),
  PROTOBUF_FIELD_OFFSET(::Proto::SchemaDetails, loopbacks_),
  5,
  0,
  1,
  6,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignal, hash_),
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignal, isanalog_),
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignal, appsignalid_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ArchSignals, archsignals_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, signalid_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, units_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, analogformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, coarseaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, fineaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, adaptiveaperture_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, bustypeid_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusoffset_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusdiscretebitno_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusanalogsize_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusanalogformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusanalogbyteorder_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, busanaloglowlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, busanaloghighlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusanaloglowlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::BusSignal, inbusanaloghighlimit_),
  0,
  1,
  4,
  2,
  5,
  16,
  17,
  18,
  6,
  3,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, bustypeid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, bussignals_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, autosignalplacement_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, manualbussize_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, enablemanualbussize_),
  PROTOBUF_FIELD_OFFSET(::Proto::Bus, enablemanualbussizeisnotinitialized_),
  1,
  0,
  ~0u,
  4,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSignal, isconst_),
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSignal, constvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSignal, appsignalid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSignal, isacquired_),
  3,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, cmptype_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, inanalogsignalformat_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, input_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, compare_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, output_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, allsignalsisacquired_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, label_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, schemaid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Comparator, schemaitemuuid_),
  9,
  10,
  2,
  3,
  4,
  5,
  7,
  8,
  0,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::Proto::LmComparatorSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::LmComparatorSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LmComparatorSet, lmequipmentid_),
  PROTOBUF_FIELD_OFFSET(::Proto::LmComparatorSet, comparator_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ComparatorSet, lmcomparatorset_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, rackid_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, chassisid_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, chassis_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, moduleid_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, module_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, place_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, contact_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalLocation, shownonschemas_),
  0,
  1,
  6,
  2,
  7,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, appsignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, location_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electriclowlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electrichighlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electricunitid_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electricsensortype_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electricrload_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electricr0_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, electricprecision_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, physicallowlimit_),
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignal, physicalhighlimit_),
  0,
  1,
  2,
  3,
  9,
  10,
  7,
  4,
  8,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::MetrologySignalSet, metrologysignal_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, enabled_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, index_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, appsignalid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, overridemethod_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, overridevalue_),
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignal, overridescript_),
  3,
  4,
  0,
  5,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignalWorkspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SimOverrideSignalWorkspace, overridesignals_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::Proto::Uuid)},
  { 7, 18, sizeof(::Proto::qvariant)},
  { 24, 30, sizeof(::Proto::wstring)},
  { 31, 41, sizeof(::Proto::FontParam)},
  { 46, 53, sizeof(::Proto::SchemaPoint)},
  { 55, 65, sizeof(::Proto::ImageItem)},
  { 70, 81, sizeof(::Proto::AfbParamValue)},
  { 87, 103, sizeof(::Proto::Envelope)},
  { 114, -1, sizeof(::Proto::EnvelopeSet)},
  { 120, 131, sizeof(::Proto::EnvelopeSetShortDescription)},
  { 137, 144, sizeof(::Proto::ExportedDevicePreset)},
  { 146, 158, sizeof(::Proto::Configuration)},
  { 165, -1, sizeof(::Proto::AfbElementCollection)},
  { 171, 177, sizeof(::Proto::AfbElementXml)},
  { 178, 192, sizeof(::Proto::FblElement)},
  { 201, 212, sizeof(::Proto::AfbSignal)},
  { 218, 237, sizeof(::Proto::AfbParam)},
  { 251, 274, sizeof(::Proto::Schema)},
  { 292, 300, sizeof(::Proto::LogicSchema)},
  { 303, 312, sizeof(::Proto::UfbSchema)},
  { 316, 327, sizeof(::Proto::SchemaLayer)},
  { 333, 384, sizeof(::Proto::SchemaItem)},
  { 430, 439, sizeof(::Proto::PosRectImpl)},
  { 443, 452, sizeof(::Proto::PosLineImpl)},
  { 456, -1, sizeof(::Proto::PosConnectionImpl)},
  { 462, 479, sizeof(::Proto::SchemaItemRect)},
  { 491, 503, sizeof(::Proto::SchemaItemLine)},
  { 510, 522, sizeof(::Proto::SchemaItemPath)},
  { 529, 535, sizeof(::Proto::SchemaItemImage)},
  { 536, 544, sizeof(::Proto::SchemaItemFrame)},
  { 547, 555, sizeof(::Proto::VFrameSetPoint)},
  { 558, 583, sizeof(::Proto::IndicatorHistogramVert)},
  { 603, 612, sizeof(::Proto::IndicatorArrowIndicator)},
  { 616, 634, sizeof(::Proto::SchemaItemIndicator)},
  { 647, 659, sizeof(::Proto::FblConnectionPoint)},
  { 666, -1, sizeof(::Proto::FblItem)},
  { 672, 686, sizeof(::Proto::FblItemRect)},
  { 695, 703, sizeof(::Proto::FblItemLine)},
  { 706, 714, sizeof(::Proto::SchemaItemSignalColumn)},
  { 717, 729, sizeof(::Proto::SchemaItemSignal)},
  { 736, -1, sizeof(::Proto::SchemaItemInput)},
  { 741, -1, sizeof(::Proto::SchemaItemOutput)},
  { 746, -1, sizeof(::Proto::SchemaItemInOut)},
  { 751, -1, sizeof(::Proto::SchemaItemLink)},
  { 756, 767, sizeof(::Proto::SchemaItemAfb)},
  { 773, 790, sizeof(::Proto::SchemaItemConst)},
  { 802, 808, sizeof(::Proto::SchemaItemConnection)},
  { 809, 815, sizeof(::Proto::SchemaItemTransmitter)},
  { 816, 827, sizeof(::Proto::SchemaItemReceiver)},
  { 833, 843, sizeof(::Proto::SchemaItemUfb)},
  { 848, -1, sizeof(::Proto::SchemaItemTerminator)},
  { 853, 871, sizeof(::Proto::SchemaItemValue)},
  { 884, 898, sizeof(::Proto::SchemaItemImageValue)},
  { 907, 915, sizeof(::Proto::SchemaItemBus)},
  { 918, -1, sizeof(::Proto::SchemaItemBusComposer)},
  { 923, -1, sizeof(::Proto::SchemaItemBusExtractor)},
  { 929, 935, sizeof(::Proto::SchemaItemLoopback)},
  { 936, -1, sizeof(::Proto::SchemaItemLoopbackSource)},
  { 941, -1, sizeof(::Proto::SchemaItemLoopbackTarget)},
  { 946, 953, sizeof(::Proto::SchemaItemControl)},
  { 955, 971, sizeof(::Proto::SchemaItemPushButton)},
  { 982, 997, sizeof(::Proto::SchemaItemLineEdit)},
  { 1007, 1034, sizeof(::Proto::DeviceObject)},
  { 1056, -1, sizeof(::Proto::DeviceRoot)},
  { 1061, -1, sizeof(::Proto::DeviceSystem)},
  { 1066, -1, sizeof(::Proto::DeviceRack)},
  { 1071, 1077, sizeof(::Proto::DeviceChassis)},
  { 1078, 1088, sizeof(::Proto::DeviceModule)},
  { 1093, -1, sizeof(::Proto::DeviceController)},
  { 1098, 1121, sizeof(::Proto::DeviceAppSignal)},
  { 1139, 1145, sizeof(::Proto::Workstation)},
  { 1146, 1152, sizeof(::Proto::Software)},
  { 1153, 1161, sizeof(::Proto::ModuleConfiguration)},
  { 1164, 1171, sizeof(::Proto::ModuleConfigurationValue)},
  { 1173, 1180, sizeof(::Proto::Property)},
  { 1182, 1197, sizeof(::Proto::SignalSpecPropValue)},
  { 1207, -1, sizeof(::Proto::SignalSpecPropValues)},
  { 1213, 1220, sizeof(::Proto::Address16)},
  { 1222, 1229, sizeof(::Proto::Unit)},
  { 1231, -1, sizeof(::Proto::UnitSet)},
  { 1237, 1245, sizeof(::Proto::TuningValue)},
  { 1248, 1263, sizeof(::Proto::AppSignalDbField)},
  { 1273, 1280, sizeof(::Proto::StateFlagSignal)},
  { 1282, 1298, sizeof(::Proto::AppSignalCalculatedParam)},
  { 1309, 1343, sizeof(::Proto::AppSignal)},
  { 1372, -1, sizeof(::Proto::AppSignalSet)},
  { 1378, 1404, sizeof(::Proto::ProtoAppSignalData)},
  { 1425, 1438, sizeof(::Proto::AppSignalState)},
  { 1446, 1476, sizeof(::Proto::Connection)},
  { 1501, -1, sizeof(::Proto::SchemaDetailsSet)},
  { 1507, 1525, sizeof(::Proto::SchemaDetails)},
  { 1538, 1546, sizeof(::Proto::ArchSignal)},
  { 1549, -1, sizeof(::Proto::ArchSignals)},
  { 1555, 1579, sizeof(::Proto::BusSignal)},
  { 1598, 1610, sizeof(::Proto::Bus)},
  { 1617, 1626, sizeof(::Proto::ComparatorSignal)},
  { 1630, 1646, sizeof(::Proto::Comparator)},
  { 1657, 1664, sizeof(::Proto::LmComparatorSet)},
  { 1666, -1, sizeof(::Proto::ComparatorSet)},
  { 1672, 1685, sizeof(::Proto::MetrologySignalLocation)},
  { 1693, 1709, sizeof(::Proto::MetrologySignal)},
  { 1720, -1, sizeof(::Proto::MetrologySignalSet)},
  { 1726, 1737, sizeof(::Proto::SimOverrideSignal)},
  { 1743, -1, sizeof(::Proto::SimOverrideSignalWorkspace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Uuid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_qvariant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_wstring_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_FontParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ImageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AfbParamValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Envelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_EnvelopeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_EnvelopeSetShortDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ExportedDevicePreset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AfbElementCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AfbElementXml_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_FblElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AfbSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AfbParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Schema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LogicSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_UfbSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PosRectImpl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PosLineImpl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PosConnectionImpl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_VFrameSetPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_IndicatorHistogramVert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_IndicatorArrowIndicator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemIndicator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_FblConnectionPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_FblItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_FblItemRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_FblItemLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemSignalColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemInOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemAfb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemConst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemTransmitter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemReceiver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemUfb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemTerminator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemImageValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemBus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemBusComposer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemBusExtractor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemLoopback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemLoopbackSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemLoopbackTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemPushButton_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaItemLineEdit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceRoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceRack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceChassis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DeviceAppSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Workstation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Software_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ModuleConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ModuleConfigurationValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Property_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SignalSpecPropValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SignalSpecPropValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Address16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Unit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_UnitSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TuningValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppSignalDbField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_StateFlagSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppSignalCalculatedParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppSignalSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ProtoAppSignalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppSignalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaDetailsSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SchemaDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ArchSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ArchSignals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BusSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Bus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ComparatorSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Comparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LmComparatorSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ComparatorSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_MetrologySignalLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_MetrologySignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_MetrologySignalSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SimOverrideSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SimOverrideSignalWorkspace_default_instance_),
};

const char descriptor_table_protodef_serialization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023serialization.proto\022\005Proto\"\024\n\004Uuid\022\014\n\004"
  "uuid\030\001 \002(\014\"\214\001\n\010qvariant\022\014\n\004type\030\001 \002(\005\022\023\n"
  "\010intValue\030\002 \001(\005:\0010\022\024\n\tuintValue\030\003 \001(\r:\0010"
  "\022\026\n\013doubleValue\030\004 \001(\001:\0010\022\030\n\tboolValue\030\005 "
  "\001(\010:\005false\022\025\n\nfloatValue\030\006 \001(\002:\0010\"\027\n\007wst"
  "ring\022\014\n\004text\030\001 \002(\014\"l\n\tFontParam\022%\n\rname_"
  "obsolete\030\001 \002(\0132\016.Proto.wstring\022\014\n\004size\030\002"
  " \002(\001\022\014\n\004bold\030\003 \002(\010\022\016\n\006italic\030\004 \002(\010\022\014\n\004na"
  "me\030\005 \001(\t\"#\n\013SchemaPoint\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030"
  "\002 \002(\001\"y\n\tImageItem\022\030\n\nallowScale\030\001 \001(\010:\004"
  "true\022\035\n\017keepAspectRatio\030\002 \001(\010:\004true\022\017\n\007i"
  "mageId\030\003 \001(\t\022\021\n\timageData\030\010 \001(\014\022\017\n\007svgDa"
  "ta\030\t \001(\t\"\203\001\n\rAfbParamValue\022\017\n\007version\030\001 "
  "\001(\005\022\014\n\004type\030\002 \001(\005\022\022\n\ndataFormat\030\003 \001(\005\022\014\n"
  "\004size\030\004 \001(\005\022\036\n\005value\030\006 \001(\0132\017.Proto.qvari"
  "ant\022\021\n\treference\030\007 \001(\t\"\235\003\n\010Envelope\022\025\n\rc"
  "lassnamehash\030\001 \002(\r\022\030\n\020compressedObject\030\002"
  " \001(\014\022%\n\nschemaitem\030\006 \001(\0132\021.Proto.SchemaI"
  "tem\022)\n\014deviceobject\030\007 \001(\0132\023.Proto.Device"
  "Object\022\035\n\006schema\030d \001(\0132\r.Proto.Schema\022\'\n"
  "\013schemalayer\030e \001(\0132\022.Proto.SchemaLayer\022%"
  "\n\nfblelement\030f \001(\0132\021.Proto.FblElement\022+\n"
  "\rconfiguration\030g \001(\0132\024.Proto.Configurati"
  "on\022%\n\nconnection\030h \001(\0132\021.Proto.Connectio"
  "n\0221\n\020schemaDetailsSet\030i \001(\0132\027.Proto.Sche"
  "maDetailsSet\022\030\n\003bus\030\310\001 \001(\0132\n.Proto.Bus\"-"
  "\n\013EnvelopeSet\022\036\n\005items\030\001 \003(\0132\017.Proto.Env"
  "elope\"\245\001\n\033EnvelopeSetShortDescription\022\030\n"
  "\020projectdbversion\030\001 \001(\r\022\025\n\rclassnamehash"
  "\030\002 \003(\r\022\022\n\ndevicetype\030\n \003(\005\022\027\n\017equipmentE"
  "ditor\030\003 \001(\010\022\024\n\014presetEditor\030\004 \001(\010\022\022\n\npre"
  "setRoot\030\005 \001(\010\"r\n\024ExportedDevicePreset\0227\n"
  "\013description\030\001 \001(\0132\".Proto.EnvelopeSetSh"
  "ortDescription\022!\n\005items\030\002 \001(\0132\022.Proto.En"
  "velopeSet\"\361\001\n\rConfiguration\022\031\n\004uuid\030\001 \002("
  "\0132\013.Proto.Uuid\022\035\n\005strID\030\002 \002(\0132\016.Proto.ws"
  "tring\022\037\n\007caption\030\003 \002(\0132\016.Proto.wstring\022!"
  "\n\tvariables\030\004 \002(\0132\016.Proto.wstring\022\037\n\007glo"
  "bals\030\005 \002(\0132\016.Proto.wstring\022\037\n\nschemasIDs"
  "\030d \003(\0132\013.Proto.Uuid\022 \n\007schemas\030e \003(\0132\017.P"
  "roto.Envelope\">\n\024AfbElementCollection\022&\n"
  "\010elements\030\001 \003(\0132\024.Proto.AfbElementXml\"\035\n"
  "\rAfbElementXml\022\014\n\004data\030\001 \002(\014\"\233\002\n\nFblElem"
  "ent\022\035\n\005strID\030\002 \002(\0132\016.Proto.wstring\022\037\n\007ca"
  "ption\030\003 \002(\0132\016.Proto.wstring\022\016\n\006opcode\030\004 "
  "\002(\r\022\025\n\006hasRam\030\005 \001(\010:\005false\022\033\n\rrequiredSt"
  "art\030\006 \001(\010:\004true\022 \n\006inputs\030\013 \003(\0132\020.Proto."
  "AfbSignal\022!\n\007outputs\030\014 \003(\0132\020.Proto.AfbSi"
  "gnal\022\037\n\006params\030\r \003(\0132\017.Proto.AfbParam\022#\n"
  "\013description\030\016 \001(\0132\016.Proto.wstring\"\304\001\n\tA"
  "fbSignal\022\037\n\007caption\030\001 \002(\0132\016.Proto.wstrin"
  "g\022\"\n\004type\030\002 \002(\0162\024.Proto.FblSignalType\022\027\n"
  "\014operandIndex\030\003 \001(\005:\0010\022\017\n\004size\030\004 \001(\005:\0010\022"
  "\036\n\006opName\030\005 \001(\0132\016.Proto.wstring\022(\n\ndataF"
  "ormat\030\006 \001(\0162\024.Proto.FblDataFormat\"\273\003\n\010Af"
  "bParam\022\037\n\007caption\030\001 \002(\0132\016.Proto.wstring\022"
  "\017\n\007visible\030\007 \002(\010\022\027\n\014operandIndex\030\010 \001(\005:\001"
  "0\022\017\n\004size\030\t \001(\005:\0010\022\033\n\014instantiator\030\n \001(\010"
  ":\005false\022\023\n\004user\030\013 \001(\010:\005false\022%\n\rchangedS"
  "cript\030\014 \001(\0132\016.Proto.wstring\022\036\n\005value\030\r \001"
  "(\0132\017.Proto.qvariant\022%\n\014defaultvalue\030\016 \001("
  "\0132\017.Proto.qvariant\022!\n\010lowlimit\030\017 \001(\0132\017.P"
  "roto.qvariant\022\"\n\thighlimit\030\020 \001(\0132\017.Proto"
  ".qvariant\022\036\n\006opName\030\021 \001(\0132\016.Proto.wstrin"
  "g\022\"\n\004type\030\022 \001(\0162\024.Proto.FblSignalType\022(\n"
  "\ndataFormat\030\023 \001(\0162\024.Proto.FblDataFormat\""
  "\227\004\n\006Schema\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022 \n"
  "\010schemaID\030\002 \002(\0132\016.Proto.wstring\022\037\n\007capti"
  "on\030\003 \002(\0132\016.Proto.wstring\022\r\n\005width\030\004 \002(\001\022"
  "\016\n\006height\030\005 \002(\001\022\037\n\004unit\030\006 \002(\0162\021.Proto.Sc"
  "hemaUnit\022\037\n\020excludeFromBuild\030\007 \001(\010:\005fals"
  "e\022\027\n\017backgroundColor\030\010 \001(\r\022\014\n\004tags\030\t \001(\t"
  "\022\037\n\020joinHorzPriority\030\037 \001(\010:\005false\022\030\n\020joi"
  "nLeftSchemaId\030  \001(\t\022\027\n\017joinTopSchemaId\030!"
  " \001(\t\022\031\n\021joinRightSchemaId\030\" \001(\t\022\032\n\022joinB"
  "ottomSchemaId\030# \001(\t\022\037\n\006layers\030d \003(\0132\017.Pr"
  "oto.Envelope\022)\n\004afbs\030e \002(\0132\033.Proto.AfbEl"
  "ementCollection\022)\n\014logic_schema\030\310\001 \001(\0132\022"
  ".Proto.LogicSchema\022%\n\nufb_schema\030\311\001 \001(\0132"
  "\020.Proto.UfbSchema\"w\n\013LogicSchema\022$\n\014equi"
  "pmentids\030\001 \003(\0132\016.Proto.wstring\022\022\n\007counte"
  "r\030\002 \001(\005:\0010\022.\n\021lmDescriptionFile\030\003 \001(\t:\023L"
  "ogicModule0000.xml\"\210\001\n\tUfbSchema\022\023\n\013desc"
  "ription\030\001 \001(\t\022\022\n\007version\030\002 \001(\005:\0011\022.\n\021lmD"
  "escriptionFile\030\003 \001(\t:\023LogicModule0000.xm"
  "l\022\"\n\032specific_properties_struct\030\006 \001(\t\"\224\001"
  "\n\013SchemaLayer\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid"
  "\022\034\n\004name\030\002 \002(\0132\016.Proto.wstring\022\017\n\007compil"
  "e\030\003 \002(\010\022\014\n\004show\030\004 \002(\010\022\r\n\005print\030\005 \002(\010\022\036\n\005"
  "items\030\017 \003(\0132\017.Proto.Envelope\"\256\016\n\nSchemaI"
  "tem\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022\020\n\010isStat"
  "ic\030\002 \002(\010\022\020\n\010isLocked\030\003 \002(\010\022#\n\010itemUnit\030\004"
  " \002(\0162\021.Proto.SchemaUnit\022\032\n\013acceptClick\030\005"
  " \001(\010:\005false\022\023\n\013clickScript\030\007 \001(\t\022\032\n\013isCo"
  "mmented\030\010 \001(\010:\005false\022\022\n\nobjectName\030\t \001(\t"
  "\022\r\n\005label\030\016 \001(\t\022\023\n\010labelPos\030\017 \001(\005:\0012\022\025\n\r"
  "preDrawScript\030\036 \001(\t\022\'\n\013PosRectImpl\030\n \001(\013"
  "2\022.Proto.PosRectImpl\022\'\n\013PosLineImpl\030\013 \001("
  "\0132\022.Proto.PosLineImpl\0223\n\021PosConnectionIm"
  "pl\030\014 \001(\0132\030.Proto.PosConnectionImpl\022\037\n\007Fb"
  "lItem\030j \001(\0132\016.Proto.FblItem\022\'\n\013FblItemRe"
  "ct\030k \001(\0132\022.Proto.FblItemRect\022\'\n\013FblItemL"
  "ine\030l \001(\0132\022.Proto.FblItemLine\022#\n\004Rect\030t "
  "\001(\0132\025.Proto.SchemaItemRect\022#\n\004Line\030u \001(\013"
  "2\025.Proto.SchemaItemLine\022#\n\004Path\030v \001(\0132\025."
  "Proto.SchemaItemPath\022%\n\005Image\030w \001(\0132\026.Pr"
  "oto.SchemaItemImage\022%\n\005Frame\030x \001(\0132\026.Pro"
  "to.SchemaItemFrame\022-\n\tIndicator\030y \001(\0132\032."
  "Proto.SchemaItemIndicator\022\'\n\006Signal\030| \001("
  "\0132\027.Proto.SchemaItemSignal\022+\n\013InputSigna"
  "l\030} \001(\0132\026.Proto.SchemaItemInput\022-\n\014Outpu"
  "tSignal\030~ \001(\0132\027.Proto.SchemaItemOutput\022#"
  "\n\004Link\030\177 \001(\0132\025.Proto.SchemaItemLink\022\"\n\003A"
  "fb\030\200\001 \001(\0132\024.Proto.SchemaItemAfb\022*\n\tConst"
  "Item\030\201\001 \001(\0132\026.Proto.SchemaItemConst\0224\n\016C"
  "onnectionItem\030\202\001 \001(\0132\033.Proto.SchemaItemC"
  "onnection\0226\n\017TransmitterItem\030\203\001 \001(\0132\034.Pr"
  "oto.SchemaItemTransmitter\0220\n\014ReceiverIte"
  "m\030\204\001 \001(\0132\031.Proto.SchemaItemReceiver\022,\n\013I"
  "nOutSignal\030\205\001 \001(\0132\026.Proto.SchemaItemInOu"
  "t\022\"\n\003ufb\030\206\001 \001(\0132\024.Proto.SchemaItemUfb\0220\n"
  "\nterminator\030\207\001 \001(\0132\033.Proto.SchemaItemTer"
  "minator\022&\n\005Value\030\210\001 \001(\0132\026.Proto.SchemaIt"
  "emValue\0220\n\nImageValue\030\211\001 \001(\0132\033.Proto.Sch"
  "emaItemImageValue\022&\n\007BusItem\030\226\001 \001(\0132\024.Pr"
  "oto.SchemaItemBus\0222\n\013BusComposer\030\227\001 \001(\0132"
  "\034.Proto.SchemaItemBusComposer\0224\n\014BusExtr"
  "actor\030\230\001 \001(\0132\035.Proto.SchemaItemBusExtrac"
  "tor\0220\n\014LoopbackItem\030\233\001 \001(\0132\031.Proto.Schem"
  "aItemLoopback\0228\n\016loopbackSource\030\234\001 \001(\0132\037"
  ".Proto.SchemaItemLoopbackSource\0228\n\016loopb"
  "ackTarget\030\235\001 \001(\0132\037.Proto.SchemaItemLoopb"
  "ackTarget\022*\n\007control\030\310\001 \001(\0132\030.Proto.Sche"
  "maItemControl\0220\n\npushButton\030\322\001 \001(\0132\033.Pro"
  "to.SchemaItemPushButton\022,\n\010lineEdit\030\323\001 \001"
  "(\0132\031.Proto.SchemaItemLineEdit\"[\n\013PosRect"
  "Impl\022\021\n\tleftDocPt\030\001 \002(\001\022\020\n\010topDocPt\030\002 \002("
  "\001\022\022\n\nwidthDocPt\030\003 \002(\001\022\023\n\013heightDocPt\030\004 \002"
  "(\001\"]\n\013PosLineImpl\022\023\n\013startXDocPt\030\001 \002(\001\022\023"
  "\n\013startYDocPt\030\002 \002(\001\022\021\n\tendXDocPt\030\003 \002(\001\022\021"
  "\n\tendYDocPt\030\004 \002(\001\"7\n\021PosConnectionImpl\022\""
  "\n\006points\030\001 \003(\0132\022.Proto.SchemaPoint\"\232\002\n\016S"
  "chemaItemRect\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineCol"
  "or\030\002 \002(\r\022\021\n\tfillColor\030\003 \002(\r\022\034\n\004text\030\004 \002("
  "\0132\016.Proto.wstring\022\021\n\ttextColor\030\005 \002(\r\022\036\n\004"
  "font\030\006 \002(\0132\020.Proto.FontParam\022\014\n\004fill\030\007 \002"
  "(\010\022\026\n\010drawrect\030\010 \001(\010:\004true\022\024\n\thorzAlign\030"
  "\t \001(\005:\0014\022\026\n\tvertAlign\030\n \001(\005:\003128\022\027\n\010word"
  "Wrap\030\013 \001(\010:\005false\022\024\n\tlineStyle\030\014 \001(\005:\0011\""
  "\255\001\n\016SchemaItemLine\022\016\n\006weight\030\001 \002(\001\022\021\n\tli"
  "neColor\030\002 \002(\r\022\024\n\tlineStyle\030\003 \001(\005:\0011\022\030\n\014l"
  "ineStyleCap\030\007 \001(\005:\00216\022\027\n\014lineCapStart\030\004 "
  "\001(\005:\0010\022\025\n\nlineCapEnd\030\005 \001(\005:\0010\022\030\n\rlineCap"
  "Factor\030\006 \001(\001:\0012\"\255\001\n\016SchemaItemPath\022\016\n\006we"
  "ight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\022\024\n\tlineSty"
  "le\030\003 \001(\005:\0011\022\030\n\014lineStyleCap\030\007 \001(\005:\00216\022\027\n"
  "\014lineCapStart\030\004 \001(\005:\0010\022\025\n\nlineCapEnd\030\005 \001"
  "(\005:\0010\022\030\n\rlineCapFactor\030\006 \001(\001:\0012\"2\n\017Schem"
  "aItemImage\022\037\n\005image\030\001 \001(\0132\020.Proto.ImageI"
  "tem\"f\n\017SchemaItemFrame\022\032\n\010schemaId\030\001 \001(\t"
  ":\010SCHEMAID\022\030\n\nallowScale\030\002 \001(\010:\004true\022\035\n\017"
  "keepAspectRatio\030\003 \001(\010:\004true\"R\n\016VFrameSet"
  "Point\022\r\n\005color\030\003 \001(\r\022\026\n\013colorSource\030\004 \001("
  "\005:\0010\022\031\n\021outputAppSignalId\030\024 \001(\t\"\314\004\n\026Indi"
  "catorHistogramVert\022\022\n\nstartValue\030\001 \001(\001\022\020"
  "\n\010endValue\030\002 \001(\001\022\020\n\010barWidth\030\020 \001(\001\022\022\n\nle"
  "ftMargin\030\024 \001(\001\022\021\n\ttopMargin\030\025 \001(\001\022\023\n\013rig"
  "htMargin\030\026 \001(\001\022\024\n\014bottomMargin\030\027 \001(\001\022\031\n\013"
  "drawBarRect\030  \001(\010:\004true\022\026\n\010drawGrid\030( \001("
  "\010:\004true\022!\n\022drawGridForAllBars\030) \001(\010:\005fal"
  "se\022\034\n\016drawGridValues\030* \001(\010:\004true\022&\n\027draw"
  "GridValueForAllBars\030+ \001(\010:\005false\022 \n\022draw"
  "GridValueUnits\030, \001(\010:\004true\022\036\n\022linearGrid"
  "MainStep\0302 \001(\001:\00250\022\037\n\023linearGridSmallSte"
  "p\0303 \001(\001:\00210\022\"\n\027logarithmicGridMainStep\0304"
  " \001(\001:\0011\022%\n\030logarithmicGridSmallStep\0305 \001("
  "\001:\0030.5\022\030\n\rdrawSetpoints\030F \001(\005:\0010\022.\n\017cust"
  "omSetPoints\030H \003(\0132\025.Proto.VFrameSetPoint"
  "\022\024\n\tscaleType\030K \001(\005:\0010\"f\n\027IndicatorArrow"
  "Indicator\022\022\n\nstartValue\030\001 \001(\001\022\020\n\010endValu"
  "e\030\002 \001(\001\022\022\n\nstartAngle\030\020 \001(\001\022\021\n\tspanAngle"
  "\030\021 \001(\001\"\225\003\n\023SchemaItemIndicator\022\021\n\tsignal"
  "Ids\030\001 \001(\t\022\027\n\014signalSource\030\002 \001(\005:\0010\022\024\n\tpr"
  "ecision\030\003 \001(\005:\0012\022\031\n\014analogFormat\030\004 \001(\005:\003"
  "102\022\036\n\004font\030\t \001(\0132\020.Proto.FontParam\022\027\n\010d"
  "rawRect\030\n \001(\010:\005false\022\025\n\nlineWeight\030\013 \001(\001"
  ":\0010\022\027\n\017backgroundColor\030\020 \001(\r\022\021\n\tlineColo"
  "r\030\021 \001(\r\022\024\n\014signalColors\030\022 \003(\r\022\017\n\004type\030  "
  "\001(\r:\0010\022=\n\026indicatorHistogramVert\0300 \001(\0132\035"
  ".Proto.IndicatorHistogramVert\022\?\n\027indicat"
  "orArrowIndicator\0301 \001(\0132\036.Proto.Indicator"
  "ArrowIndicator\"\353\001\n\022FblConnectionPoint\022!\n"
  "\005point\030\001 \001(\0132\022.Proto.SchemaPoint\022/\n\ndirr"
  "ection\030\002 \001(\0162\033.Proto.ConnectionDirrectio"
  "n\022\031\n\004uuid\030\003 \001(\0132\013.Proto.Uuid\022\030\n\014operandI"
  "ndex\030\004 \001(\005:\002-1\022\021\n\007caption\030\005 \001(\t:\000\022\"\n\rass"
  "ociatedIos\030\006 \003(\0132\013.Proto.Uuid\022\025\n\nsignalT"
  "ype\030\007 \001(\005:\0010\"4\n\007FblItem\022)\n\006points\030\001 \003(\0132"
  "\031.Proto.FblConnectionPoint\"\325\001\n\013FblItemRe"
  "ct\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r\022\021\n"
  "\tfillColor\030\003 \002(\r\022\021\n\ttextColor\030\004 \002(\r\022\036\n\004f"
  "ont\030\005 \002(\0132\020.Proto.FontParam\022\025\n\robsoleteL"
  "abel\030\006 \001(\t\022\020\n\010userText\030\007 \001(\t\022\026\n\013userText"
  "Pos\030\010 \001(\005:\0011\022\034\n\020obsoleteLabelPos\030\t \001(\005:\002"
  "-1\"F\n\013FblItemLine\022\016\n\006weight\030\001 \002(\001\022\021\n\tlin"
  "eColor\030\002 \002(\r\022\024\n\tlineStyle\030\003 \001(\005:\0011\"R\n\026Sc"
  "hemaItemSignalColumn\022\021\n\005width\030\001 \001(\001:\00220\022"
  "\017\n\004data\030\002 \001(\005:\0010\022\024\n\thorzAlign\030\003 \001(\005:\0011\"\342"
  "\001\n\020SchemaItemSignal\022$\n\014appSignalIDs\030\001 \003("
  "\0132\016.Proto.wstring\022\024\n\tprecision\030\002 \001(\005:\0012\022"
  "\031\n\014analogFormat\030\003 \001(\005:\003102\022.\n\007columns\030\004 "
  "\003(\0132\035.Proto.SchemaItemSignalColumn\022\027\n\tmu"
  "ltiLine\030\005 \001(\010:\004true\022\032\n\022impactAppSignalID"
  "s\030\006 \003(\t\022\022\n\ncustomText\030\020 \001(\t\"\021\n\017SchemaIte"
  "mInput\"\022\n\020SchemaItemOutput\"\021\n\017SchemaItem"
  "InOut\"\020\n\016SchemaItemLink\"\341\001\n\rSchemaItemAf"
  "b\022\037\n\006params\030\002 \003(\0132\017.Proto.AfbParam\022 \n\010af"
  "bStrid\030\003 \001(\0132\016.Proto.wstring\022\024\n\tprecisio"
  "n\030\004 \001(\005:\0012\0223\n\025deprecated_afbelement\030\005 \001("
  "\0132\024.Proto.AfbElementXml\022\030\n\020deprecated_la"
  "bel\030\006 \001(\t\022(\n\nafbelement\030\007 \001(\0132\024.Proto.Af"
  "bElementXml\"\236\002\n\017SchemaItemConst\022\017\n\004type\030"
  "\001 \001(\005:\0010\022\024\n\tprecision\030\004 \001(\005:\0012\022\024\n\thorzAl"
  "ign\030\005 \001(\005:\0014\022\026\n\tvertAlign\030\006 \001(\005:\003128\022\031\n\014"
  "analogFormat\030\010 \001(\005:\003102\022\023\n\010intValue\030\002 \001("
  "\005:\0010\022\016\n\006intRef\030\n \001(\t\022\036\n\023floatValue_obsol"
  "ete\030\003 \001(\001:\0010\022\025\n\nfloatValue\030\t \001(\002:\0010\022\020\n\010f"
  "loatRef\030\013 \001(\t\022\030\n\rdiscreteValue\030\007 \001(\005:\0010\022"
  "\023\n\013discreteRef\030\014 \001(\t\",\n\024SchemaItemConnec"
  "tion\022\024\n\014connectionid\030\001 \001(\t\",\n\025SchemaItem"
  "Transmitter\022\023\n\010pinCount\030\001 \001(\005:\0011\"\240\001\n\022Sch"
  "emaItemReceiver\022\032\n\014showValidity\030\001 \001(\010:\004t"
  "rue\022\024\n\014appSignalIds\030\002 \001(\t\022\023\n\010dataType\030\003 "
  "\001(\005:\0010\022\024\n\tprecision\030\004 \001(\005:\0012\022\031\n\014analogFo"
  "rmat\030\005 \001(\005:\003102\022\022\n\ncustomText\030\020 \001(\t\"\231\001\n\r"
  "SchemaItemUfb\022\023\n\013ufbSchemaId\030\001 \001(\t\022\022\n\nuf"
  "bCaption\030\002 \001(\t\022\026\n\nufbVersion\030\003 \001(\005:\002-1\022\""
  "\n\032specific_properties_struct\030\n \001(\t\022#\n\npr"
  "operties\030\013 \003(\0132\017.Proto.Property\"\026\n\024Schem"
  "aItemTerminator\"\260\002\n\017SchemaItemValue\022\021\n\ts"
  "ignalIds\030\001 \001(\t\022\027\n\014signalSource\030\002 \001(\005:\0010\022"
  "\022\n\nlineWeight\030\004 \001(\001\022\021\n\tlineColor\030\005 \001(\r\022\021"
  "\n\tfillColor\030\006 \001(\r\022\021\n\ttextColor\030\007 \001(\r\022\014\n\004"
  "text\030\010 \001(\t\022\036\n\004font\030\t \001(\0132\020.Proto.FontPar"
  "am\022\026\n\010drawRect\030\n \001(\010:\004true\022\024\n\thorzAlign\030"
  "\013 \001(\005:\0014\022\026\n\tvertAlign\030\014 \001(\005:\003128\022\025\n\tprec"
  "ision\030\r \001(\005:\002-1\022\031\n\014analogFormat\030\016 \001(\005:\0031"
  "02\"\203\002\n\024SchemaItemImageValue\022\021\n\tsignalIds"
  "\030\001 \001(\t\022\027\n\014signalSource\030\002 \001(\005:\0010\022\026\n\016curre"
  "ntImageId\030\003 \001(\t\022\025\n\nlineWeight\030\006 \001(\001:\0010\022\035"
  "\n\tlineColor\030\007 \001(\r:\n4278190080\022\035\n\tfillCol"
  "or\030\010 \001(\r:\n4278190272\022\027\n\010drawRect\030\t \001(\010:\005"
  "false\022\027\n\010fillRect\030\n \001(\010:\005false\022 \n\006images"
  "\030\016 \003(\0132\020.Proto.ImageItem\"P\n\rSchemaItemBu"
  "s\022\021\n\tbusTypeId\030\002 \001(\t\022\023\n\013busTypeHash\030\003 \001("
  "\006\022\027\n\003bus\030\005 \001(\0132\n.Proto.Bus\"\027\n\025SchemaItem"
  "BusComposer\"=\n\026SchemaItemBusExtractor\022#\n"
  "\nproperties\030\002 \003(\0132\017.Proto.Property\"(\n\022Sc"
  "hemaItemLoopback\022\022\n\nloopbackId\030\002 \001(\t\"\032\n\030"
  "SchemaItemLoopbackSource\"\032\n\030SchemaItemLo"
  "opbackTarget\"8\n\021SchemaItemControl\022\022\n\nsty"
  "leSheet\030\001 \001(\t\022\017\n\007toolTip\030\002 \001(\t\"\220\002\n\024Schem"
  "aItemPushButton\022\014\n\004text\030\001 \001(\t\022\021\n\tcheckab"
  "le\030\002 \001(\010\022\026\n\016checkedDefault\030\003 \001(\010\022\022\n\nauto"
  "Repeat\030\004 \001(\010\022\027\n\017autoRepeatDelay\030\005 \001(\005\022\032\n"
  "\022autoRepeatInterval\030\006 \001(\005\022\031\n\021scriptAfter"
  "Create\030\025 \001(\t\022\025\n\rscriptClicked\030\026 \001(\t\022\025\n\rs"
  "criptPressed\030\027 \001(\t\022\026\n\016scriptReleased\030\030 \001"
  "(\t\022\025\n\rscriptToggled\030\031 \001(\t\"\370\001\n\022SchemaItem"
  "LineEdit\022\014\n\004text\030\001 \001(\t\022\021\n\thorzAlign\030\002 \001("
  "\005\022\021\n\tvertAlign\030\003 \001(\005\022\021\n\tmaxLength\030\004 \001(\005\022"
  "\027\n\017placeholderText\030\005 \001(\t\022\020\n\010readOnly\030\006 \001"
  "(\010\022\031\n\021scriptAfterCreate\030\025 \001(\t\022\035\n\025scriptE"
  "ditingFinished\030\026 \001(\t\022\033\n\023scriptReturnPres"
  "sed\030\027 \001(\t\022\031\n\021scriptTextChanged\030\030 \001(\t\"\207\006\n"
  "\014DeviceObject\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid"
  "\022#\n\013equipmentId\030\002 \002(\0132\016.Proto.wstring\022\037\n"
  "\007caption\030\003 \002(\0132\016.Proto.wstring\022(\n\020childR"
  "estriction\030\004 \001(\0132\016.Proto.wstring\022\020\n\005plac"
  "e\030\005 \001(\005:\0010\022\"\n\032specific_properties_struct"
  "\030\006 \001(\t\022#\n\nproperties\030\007 \003(\0132\017.Proto.Prope"
  "rty\022\025\n\006preset\030  \001(\010:\005false\022\031\n\npresetRoot"
  "\030! \001(\010:\005false\022\"\n\npresetName\030\" \001(\0132\016.Prot"
  "o.wstring\022%\n\020presetObjectUuid\030# \001(\0132\013.Pr"
  "oto.Uuid\022\031\n\016childCountHint\030$ \001(\005:\0010\022\037\n\004R"
  "oot\030d \001(\0132\021.Proto.DeviceRoot\022#\n\006System\030e"
  " \001(\0132\023.Proto.DeviceSystem\022\037\n\004Rack\030f \001(\0132"
  "\021.Proto.DeviceRack\022%\n\007Chassis\030g \001(\0132\024.Pr"
  "oto.DeviceChassis\022#\n\006Module\030h \001(\0132\023.Prot"
  "o.DeviceModule\022+\n\nController\030i \001(\0132\027.Pro"
  "to.DeviceController\022)\n\tAppSignal\030j \001(\0132\026"
  ".Proto.DeviceAppSignal\022\'\n\013Workstation\030k "
  "\001(\0132\022.Proto.Workstation\022!\n\010Software\030l \001("
  "\0132\017.Proto.Software\022\"\n\010children\030\310\001 \003(\0132\017."
  "Proto.Envelope\"\014\n\nDeviceRoot\"\016\n\014DeviceSy"
  "stem\"\014\n\nDeviceRack\" \n\rDeviceChassis\022\017\n\004t"
  "ype\030\001 \001(\005:\0010\"\223\001\n\014DeviceModule\022\027\n\014typeObs"
  "olete\030\001 \001(\005:\0010\022\033\n\023configurationScript\030\002 "
  "\001(\t\022\022\n\nmoduleType\030\003 \001(\005\022\032\n\022rawDataDescri"
  "ption\030\004 \001(\t\022\035\n\022customModuleFamily\030\005 \001(\005:"
  "\0010\"\022\n\020DeviceController\"\363\003\n\017DeviceAppSign"
  "al\022\027\n\014obsoletetype\030\001 \001(\005:\0010\022\024\n\tbyteOrder"
  "\030\002 \001(\005:\0010\022\021\n\006format\030\003 \001(\005:\0010\022\017\n\004size\030\004 \001"
  "(\005:\0010\022\026\n\013valueOffset\030\007 \001(\005:\0010\022\023\n\010valueBi"
  "t\030\010 \001(\005:\0010\022\017\n\004type\030\t \001(\005:\0010\022\023\n\010function\030"
  "\n \001(\005:\0010\022\025\n\nmemoryArea\030\013 \001(\005:\0010\022\032\n\017appSi"
  "gnalLowAdc\030\014 \001(\005:\0010\022\037\n\020appSignalHighAdc\030"
  "\r \001(\005:\00565535\022\037\n\024appSignalLowEngUnits\030\016 \001"
  "(\001:\0010\022\"\n\025appSignalHighEngUnits\030\017 \001(\001:\00310"
  "0\022\036\n\023appSignalDataFormat\030\020 \001(\005:\0012\022\030\n\020val"
  "iditySignalId\030\024 \001(\t\022\032\n\022appSignalBusTypeI"
  "d\030\032 \001(\t\022\035\n\025signalSpecPropsStruct\030( \001(\t\022,"
  "\n\035signalSpecPropsStructWasFixed\030) \001(\010:\005f"
  "alse\"\036\n\013Workstation\022\017\n\004type\030\001 \001(\005:\0010\"\033\n\010"
  "Software\022\017\n\004type\030\001 \001(\005:\0010\"r\n\023ModuleConfi"
  "guration\022\032\n\022struct_description\030\001 \001(\t\022/\n\006"
  "values\030\002 \003(\0132\037.Proto.ModuleConfiguration"
  "Value\022\016\n\004name\030\003 \001(\t:\000\"7\n\030ModuleConfigura"
  "tionValue\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\'"
  "\n\010Property\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\""
  "\314\001\n\023SignalSpecPropValue\022\014\n\004name\030\001 \002(\t\022\017\n"
  "\004type\030\002 \002(\005:\0010\022\025\n\006isEnum\030\003 \002(\010:\005false\022\020\n"
  "\010int32Val\030\n \001(\005\022\021\n\tuint32Val\030\013 \001(\r\022\020\n\010in"
  "t64Val\030\014 \001(\003\022\021\n\tuint64Val\030\r \001(\004\022\021\n\tdoubl"
  "eVal\030\016 \001(\001\022\017\n\007boolVal\030\017 \001(\010\022\021\n\tstringVal"
  "\030\020 \001(\t\"A\n\024SignalSpecPropValues\022)\n\005value\030"
  "\001 \003(\0132\032.Proto.SignalSpecPropValue\"0\n\tAdd"
  "ress16\022\022\n\006offset\030\001 \002(\005:\002-1\022\017\n\003bit\030\002 \002(\005:"
  "\002-1\"&\n\004Unit\022\r\n\002id\030\001 \002(\005:\0010\022\017\n\007caption\030\002 "
  "\002(\t\"$\n\007UnitSet\022\031\n\004unit\030\001 \003(\0132\013.Proto.Uni"
  "t\"H\n\013TuningValue\022\014\n\004type\030\001 \001(\005\022\023\n\010intVal"
  "ue\030\002 \001(\003:\0010\022\026\n\013doubleValue\030\003 \001(\001:\0010\"\206\002\n\020"
  "AppSignalDbField\022\016\n\002ID\030\001 \001(\005:\002-1\022\031\n\rsign"
  "alGroupID\030\002 \001(\005:\002-1\022\034\n\020signalInstanceID\030"
  "\003 \001(\005:\002-1\022\027\n\013changesetID\030\004 \001(\005:\002-1\022\031\n\nch"
  "eckedOut\030\005 \001(\010:\005false\022\022\n\006userID\030\006 \001(\005:\002-"
  "1\022\022\n\007created\030\007 \001(\003:\0010\022\026\n\007deleted\030\010 \001(\010:\005"
  "false\022\032\n\017instanceCreated\030\t \001(\003:\0010\022\031\n\016ins"
  "tanceAction\030\n \001(\005:\0010\"<\n\017StateFlagSignal\022"
  "\023\n\010flagType\030\001 \001(\005:\0010\022\024\n\014flagSignalID\030\002 \001"
  "(\t\"\214\003\n\030AppSignalCalculatedParam\022\017\n\004hash\030"
  "\001 \001(\004:\0010\022#\n\tioBufAddr\030\002 \001(\0132\020.Proto.Addr"
  "ess16\022$\n\ntuningAddr\030\003 \001(\0132\020.Proto.Addres"
  "s16\022!\n\007ualAddr\030\004 \001(\0132\020.Proto.Address16\022$"
  "\n\nregBufAddr\030\005 \001(\0132\020.Proto.Address16\022&\n\014"
  "regValueAddr\030\006 \001(\0132\020.Proto.Address16\022)\n\017"
  "regValidityAddr\030\007 \001(\0132\020.Proto.Address16\022"
  "\026\n\013lmRamAccess\030\010 \001(\005:\0010\022\026\n\007isConst\030\t \001(\010"
  ":\005false\022\025\n\nconstValue\030\n \001(\001:\0010\0221\n\021stateF"
  "lagsSignals\030\013 \003(\0132\026.Proto.StateFlagSigna"
  "l\"\250\006\n\tAppSignal\022\023\n\013appSignalID\030\001 \001(\t\022\031\n\021"
  "customAppSignalID\030\002 \001(\t\022\017\n\007caption\030\003 \001(\t"
  "\022\023\n\013equipmentID\030\004 \001(\t\022\025\n\rlmEquipmentID\030\005"
  " \001(\t\022\021\n\tbusTypeID\030\006 \001(\t\022\022\n\007channel\030\007 \001(\005"
  ":\0010\022\037\n\020excludeFromBuild\030\010 \001(\010:\005false\022\025\n\n"
  "signalType\030\020 \001(\005:\0011\022\024\n\tinOutType\030\021 \001(\005:\001"
  "2\022\023\n\010dataSize\030\025 \001(\005:\0010\022\024\n\tbyteOrder\030\026 \001("
  "\005:\0011\022\035\n\022analogSignalFormat\030\032 \001(\005:\0011\022\014\n\004u"
  "nit\030\033 \001(\t\022\033\n\014enableTuning\030G \001(\010:\005false\022."
  "\n\022tuningDefaultValue\030H \001(\0132\022.Proto.Tunin"
  "gValue\022*\n\016tuningLowBound\030I \001(\0132\022.Proto.T"
  "uningValue\022+\n\017tuningHighBound\030J \001(\0132\022.Pr"
  "oto.TuningValue\022\026\n\007acquire\030Q \001(\010:\005false\022"
  "\026\n\007archive\030R \001(\010:\005false\022\030\n\rdecimalPlaces"
  "\030S \001(\005:\0012\022\031\n\016coarseAperture\030T \001(\001:\0011\022\031\n\014"
  "fineAperture\030U \001(\001:\0030.5\022\037\n\020adaptiveApert"
  "ure\030V \001(\010:\005false\022\026\n\016specPropStruct\030Z \001(\t"
  "\022\026\n\016specPropValues\030[ \001(\014\022\014\n\004tags\030\\ \003(\t\022("
  "\n\007dbField\030x \001(\0132\027.Proto.AppSignalDbField"
  "\0222\n\tcalcParam\030y \001(\0132\037.Proto.AppSignalCal"
  "culatedParam\"3\n\014AppSignalSet\022#\n\tappSigna"
  "l\030\001 \003(\0132\020.Proto.AppSignal\"\321\004\n\022ProtoAppSi"
  "gnalData\022\021\n\tbusTypeID\030\001 \001(\t\022\017\n\007caption\030\002"
  " \001(\t\022\022\n\007channel\030\003 \001(\005:\0010\022\024\n\010dataSize\030\004 \001"
  "(\005:\00232\022\024\n\tbyteOrder\030\005 \001(\005:\0011\022\035\n\022analogSi"
  "gnalFormat\030\006 \001(\005:\0012\022\014\n\004unit\030\007 \001(\t\022\033\n\014ena"
  "bleTuning\030\010 \001(\010:\005false\022.\n\022tuningDefaultV"
  "alue\030\t \001(\0132\022.Proto.TuningValue\022*\n\016tuning"
  "LowBound\030\n \001(\0132\022.Proto.TuningValue\022+\n\017tu"
  "ningHighBound\030\013 \001(\0132\022.Proto.TuningValue\022"
  "\025\n\007acquire\030\014 \001(\010:\004true\022\025\n\007archive\030\r \001(\010:"
  "\004true\022\030\n\rdecimalPlaces\030\016 \001(\005:\0012\022\031\n\016coars"
  "eAperture\030\017 \001(\001:\0011\022\031\n\014fineAperture\030\020 \001(\001"
  ":\0030.5\022\037\n\020adaptiveAperture\030\021 \001(\010:\005false\022\037"
  "\n\020excludefromBuild\030\022 \001(\010:\005false\022\014\n\004tags\030"
  "\023 \001(\t\022\032\n\022userSpecPropStruct\030\024 \001(\t\022\032\n\022use"
  "rSpecPropValues\030\025 \001(\014\"\264\001\n\016AppSignalState"
  "\022\017\n\004hash\030\001 \001(\004:\0010\022\020\n\005value\030\002 \001(\001:\0010\022\020\n\005f"
  "lags\030\003 \001(\r:\0010\022\025\n\nsystemTime\030\004 \001(\020:\0010\022\024\n\t"
  "localTime\030\005 \001(\020:\0010\022\024\n\tplantTime\030\006 \001(\020:\0010"
  "\022\025\n\tarchiveId\030\007 \001(\020:\002-1\022\023\n\010packetNo\030\010 \001("
  "\r:\0010\"\224\006\n\nConnection\022\026\n\014ConnectionID\030\002 \001("
  "\t:\000\022\032\n\020Port1EquipmentID\030\003 \001(\t:\000\022\032\n\020Port2"
  "EquipmentID\030\004 \001(\t:\000\022!\n\027Port1RawDataDescr"
  "iption\030\005 \001(\t:\000\022!\n\027Port2RawDataDescriptio"
  "n\030\006 \001(\t:\000\022\035\n\016ManualSettings\030\013 \001(\010:\005false"
  "\022\034\n\rDisableDataID\030\014 \001(\010:\005false\022\036\n\017Genera"
  "teVHDFile\030\r \001(\010:\005false\022\036\n\023Port1TxStartAd"
  "dress\030\016 \001(\005:\0010\022!\n\024Port1TxWordsQuantity\030\017"
  " \001(\005:\003479\022!\n\024Port1RxWordsQuantity\030\020 \001(\005:"
  "\003479\022\036\n\023Port2TxStartAddress\030\021 \001(\005:\0010\022!\n\024"
  "Port2TxWordsQuantity\030\022 \001(\005:\003479\022!\n\024Port2"
  "RxWordsQuantity\030\023 \001(\005:\003479\022\031\n\004uuid\030\024 \001(\013"
  "2\013.Proto.Uuid\022 \n\021Port1EnableSerial\030\025 \001(\010"
  ":\005false\022\032\n\017Port1SerialMode\030\026 \001(\005:\0010\022 \n\021P"
  "ort1EnableDuplex\030\027 \001(\010:\005false\022 \n\021Port2En"
  "ableSerial\030\030 \001(\010:\005false\022\032\n\017Port2SerialMo"
  "de\030\031 \001(\005:\0010\022 \n\021Port2EnableDuplex\030\032 \001(\010:\005"
  "false\022\017\n\004Type\030\033 \001(\005:\0010\022\027\n\014ObsoleteMode\030\010"
  " \001(\005:\0010\022\035\n\022ObsoleteSerialMode\030\007 \001(\005:\0010\022#"
  "\n\024ObsoleteEnableDuplex\030\n \001(\010:\005false\"@\n\020S"
  "chemaDetailsSet\022,\n\016schemasDetails\030\002 \003(\0132"
  "\024.Proto.SchemaDetails\"\221\002\n\rSchemaDetails\022"
  "\017\n\007version\030\002 \001(\005\022\020\n\010schemaId\030\004 \001(\t\022\017\n\007ca"
  "ption\030\005 \001(\t\022\031\n\021excludedfromBuild\030\006 \001(\010\022\023"
  "\n\013equipmentId\030\007 \001(\t\022\031\n\021lmDescriptionFile"
  "\030\010 \001(\t\022\014\n\004path\030\t \001(\t\022\021\n\tsignalIds\030\024 \003(\t\022"
  "\016\n\006labels\030\025 \003(\t\022\023\n\013connections\030\026 \003(\t\022\032\n\005"
  "guids\030\027 \003(\0132\013.Proto.Uuid\022\014\n\004tags\030\030 \003(\t\022\021"
  "\n\tloopbacks\030\031 \003(\t\"A\n\nArchSignal\022\014\n\004hash\030"
  "\001 \002(\004\022\020\n\010isAnalog\030\002 \002(\010\022\023\n\013appSignalID\030\003"
  " \002(\t\"5\n\013ArchSignals\022&\n\013archSignals\030\001 \003(\013"
  "2\021.Proto.ArchSignal\"\326\003\n\tBusSignal\022\020\n\010sig"
  "nalId\030\001 \001(\t\022\017\n\007caption\030\002 \001(\t\022\014\n\004type\030\003 \001"
  "(\005\022\r\n\005units\030\004 \001(\t\022\024\n\014analogFormat\030\n \001(\005\022"
  "\024\n\tprecision\030\013 \001(\005:\0012\022\031\n\016coarseAperture\030"
  "\014 \001(\001:\0011\022\031\n\014fineAperture\030\r \001(\001:\0030.5\022\037\n\020a"
  "daptiveAperture\030\016 \001(\010:\005false\022\021\n\tbusTypeI"
  "d\030\017 \001(\t\022\023\n\013inbusOffset\030  \001(\005\022\032\n\022inbusDis"
  "creteBitNo\030( \001(\005\022\027\n\017inbusAnalogSize\0302 \001("
  "\005\022\031\n\021inbusAnalogFormat\0303 \001(\005\022\034\n\024inbusAna"
  "logByteOrder\0304 \001(\005\022\031\n\021busAnalogLowLimit\030"
  "5 \001(\001\022\032\n\022busAnalogHighLimit\0306 \001(\001\022\033\n\023inb"
  "usAnalogLowLimit\0307 \001(\001\022\034\n\024inbusAnalogHig"
  "hLimit\0308 \001(\001\"\355\001\n\003Bus\022\031\n\004uuid\030\001 \001(\0132\013.Pro"
  "to.Uuid\022\021\n\tbusTypeId\030\002 \001(\t\022$\n\nbusSignals"
  "\030\003 \003(\0132\020.Proto.BusSignal\022!\n\023autoSignalPl"
  "acement\030\n \001(\010:\004true\022\030\n\rmanualBusSize\030\013 \001"
  "(\005:\0010\022\"\n\023enableManualBusSize\030\014 \001(\010:\005fals"
  "e\0221\n#enableManualBusSizeIsNotInitialized"
  "\030\r \001(\010:\004true\"p\n\020ComparatorSignal\022\025\n\007isCo"
  "nst\030\001 \001(\010:\004true\022\025\n\nconstValue\030\002 \001(\001:\0010\022\023"
  "\n\013appSignalId\030\003 \001(\t\022\031\n\nisAcquired\030\004 \001(\010:"
  "\005false\"\352\002\n\nComparator\022\022\n\007cmpType\030\001 \001(\005:\001"
  "1\022\037\n\024inAnalogSignalFormat\030\002 \001(\005:\0011\022&\n\005in"
  "put\030\003 \001(\0132\027.Proto.ComparatorSignal\022(\n\007co"
  "mpare\030\004 \001(\0132\027.Proto.ComparatorSignal\022+\n\n"
  "hysteresis\030\005 \001(\0132\027.Proto.ComparatorSigna"
  "l\022\'\n\006output\030\006 \001(\0132\027.Proto.ComparatorSign"
  "al\022#\n\024allSignalsIsAcquired\030\007 \001(\010:\005false\022"
  "\024\n\tprecision\030\010 \001(\005:\0012\022\r\n\005label\030\t \001(\t\022\020\n\010"
  "schemaId\030\n \001(\t\022#\n\016schemaItemUuid\030\013 \001(\0132\013"
  ".Proto.Uuid\"O\n\017LmComparatorSet\022\025\n\rlmEqui"
  "pmentID\030\001 \001(\t\022%\n\ncomparator\030\002 \003(\0132\021.Prot"
  "o.Comparator\"@\n\rComparatorSet\022/\n\017lmCompa"
  "ratorSet\030\001 \003(\0132\026.Proto.LmComparatorSet\"\272"
  "\001\n\027MetrologySignalLocation\022\016\n\006rackID\030\001 \001"
  "(\t\022\021\n\tchassisID\030\002 \001(\t\022\023\n\007chassis\030\003 \001(\005:\002"
  "-1\022\020\n\010moduleID\030\004 \001(\t\022\022\n\006module\030\005 \001(\005:\002-1"
  "\022\021\n\005place\030\006 \001(\005:\002-1\022\017\n\007contact\030\007 \001(\t\022\035\n\016"
  "shownOnSchemas\030\010 \001(\010:\005false\"\347\002\n\017Metrolog"
  "ySignal\022#\n\tappSignal\030\001 \001(\0132\020.Proto.AppSi"
  "gnal\0220\n\010location\030\002 \001(\0132\036.Proto.Metrology"
  "SignalLocation\022\033\n\020electricLowLimit\030\003 \001(\001"
  ":\0010\022\034\n\021electricHighLimit\030\004 \001(\001:\0010\022\031\n\016ele"
  "ctricUnitID\030\005 \001(\005:\0011\022\035\n\022electricSensorTy"
  "pe\030\006 \001(\005:\0011\022\030\n\relectricRload\030\013 \001(\001:\0010\022\025\n"
  "\nelectricR0\030\007 \001(\001:\0010\022\034\n\021electricPrecisio"
  "n\030\010 \001(\005:\0014\022\033\n\020physicalLowLimit\030\t \001(\001:\0010\022"
  "\034\n\021physicalHighLimit\030\n \001(\001:\0010\"E\n\022Metrolo"
  "gySignalSet\022/\n\017metrologySignal\030\001 \003(\0132\026.P"
  "roto.MetrologySignal\"\240\001\n\021SimOverrideSign"
  "al\022\017\n\007enabled\030\002 \001(\010\022\r\n\005index\030\003 \001(\005\022\023\n\013ap"
  "pSignalId\030\n \001(\t\022\026\n\016overrideMethod\030\036 \001(\005\022"
  "&\n\roverrideValue\030( \001(\0132\017.Proto.qvariant\022"
  "\026\n\016overrideScript\0302 \001(\t\"O\n\032SimOverrideSi"
  "gnalWorkspace\0221\n\017overrideSignals\030\002 \003(\0132\030"
  ".Proto.SimOverrideSignal*3\n\nSchemaUnit\022\013"
  "\n\007Display\020\000\022\016\n\nMillimeter\020\001\022\010\n\004Inch\020\002*-\n"
  "\024ConnectionDirrection\022\t\n\005Input\020\000\022\n\n\006Outp"
  "ut\020\001*)\n\rFblSignalType\022\n\n\006Analog\020\000\022\014\n\010Dis"
  "crete\020\001*:\n\rFblDataFormat\022\017\n\013UnsignedInt\020"
  "\000\022\r\n\tSignedInt\020\001\022\t\n\005Float\020\002"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_serialization_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serialization_2eproto = {
  false, false, 19307, descriptor_table_protodef_serialization_2eproto, "serialization.proto", 
  &descriptor_table_serialization_2eproto_once, nullptr, 0, 104,
  schemas, file_default_instances, TableStruct_serialization_2eproto::offsets,
  file_level_metadata_serialization_2eproto, file_level_enum_descriptors_serialization_2eproto, file_level_service_descriptors_serialization_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_serialization_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialization_2eproto);
  return descriptor_table_serialization_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_serialization_2eproto(&descriptor_table_serialization_2eproto);
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemaUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialization_2eproto);
  return file_level_enum_descriptors_serialization_2eproto[0];
}
bool SchemaUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionDirrection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialization_2eproto);
  return file_level_enum_descriptors_serialization_2eproto[1];
}
bool ConnectionDirrection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FblSignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialization_2eproto);
  return file_level_enum_descriptors_serialization_2eproto[2];
}
bool FblSignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FblDataFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialization_2eproto);
  return file_level_enum_descriptors_serialization_2eproto[3];
}
bool FblDataFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Uuid::_Internal {
 public:
  using HasBits = decltype(std::declval<Uuid>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Uuid::Uuid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Uuid)
}
Uuid::Uuid(const Uuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Uuid)
}

void Uuid::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Uuid::~Uuid() {
  // @@protoc_insertion_point(destructor:Proto.Uuid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Uuid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Uuid::ArenaDtor(void* object) {
  Uuid* _this = reinterpret_cast< Uuid* >(object);
  (void)_this;
}
void Uuid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uuid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uuid::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Uuid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uuid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uuid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uuid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Uuid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Uuid)
  return target;
}

size_t Uuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Uuid)
  size_t total_size = 0;

  // required bytes uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uuid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Uuid)
  GOOGLE_DCHECK_NE(&from, this);
  const Uuid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uuid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Uuid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Uuid)
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Uuid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uuid()) {
    _internal_set_uuid(from._internal_uuid());
  }
}

void Uuid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Uuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Uuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Uuid::InternalSwap(Uuid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Uuid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class qvariant::_Internal {
 public:
  using HasBits = decltype(std::declval<qvariant>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uintvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doublevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_floatvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

qvariant::qvariant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.qvariant)
}
qvariant::qvariant(const qvariant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&floatvalue_) -
    reinterpret_cast<char*>(&type_)) + sizeof(floatvalue_));
  // @@protoc_insertion_point(copy_constructor:Proto.qvariant)
}

void qvariant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&floatvalue_) -
    reinterpret_cast<char*>(&type_)) + sizeof(floatvalue_));
}

qvariant::~qvariant() {
  // @@protoc_insertion_point(destructor:Proto.qvariant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void qvariant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void qvariant::ArenaDtor(void* object) {
  qvariant* _this = reinterpret_cast< qvariant* >(object);
  (void)_this;
}
void qvariant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void qvariant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void qvariant::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.qvariant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&floatvalue_) -
        reinterpret_cast<char*>(&type_)) + sizeof(floatvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* qvariant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 intValue = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_intvalue(&has_bits);
          intvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uintValue = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uintvalue(&has_bits);
          uintvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double doubleValue = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_doublevalue(&has_bits);
          doublevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool boolValue = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_boolvalue(&has_bits);
          boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float floatValue = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_floatvalue(&has_bits);
          floatvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* qvariant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.qvariant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 intValue = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_intvalue(), target);
  }

  // optional uint32 uintValue = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uintvalue(), target);
  }

  // optional double doubleValue = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_doublevalue(), target);
  }

  // optional bool boolValue = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_boolvalue(), target);
  }

  // optional float floatValue = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_floatvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.qvariant)
  return target;
}

size_t qvariant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.qvariant)
  size_t total_size = 0;

  // required int32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional int32 intValue = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_intvalue());
    }

    // optional double doubleValue = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 uintValue = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uintvalue());
    }

    // optional bool boolValue = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float floatValue = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void qvariant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.qvariant)
  GOOGLE_DCHECK_NE(&from, this);
  const qvariant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<qvariant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.qvariant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.qvariant)
    MergeFrom(*source);
  }
}

void qvariant::MergeFrom(const qvariant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.qvariant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      intvalue_ = from.intvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      doublevalue_ = from.doublevalue_;
    }
    if (cached_has_bits & 0x00000008u) {
      uintvalue_ = from.uintvalue_;
    }
    if (cached_has_bits & 0x00000010u) {
      boolvalue_ = from.boolvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      floatvalue_ = from.floatvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void qvariant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.qvariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qvariant::CopyFrom(const qvariant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.qvariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qvariant::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void qvariant::InternalSwap(qvariant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(qvariant, floatvalue_)
      + sizeof(qvariant::floatvalue_)
      - PROTOBUF_FIELD_OFFSET(qvariant, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata qvariant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class wstring::_Internal {
 public:
  using HasBits = decltype(std::declval<wstring>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

wstring::wstring(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.wstring)
}
wstring::wstring(const wstring& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.wstring)
}

void wstring::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

wstring::~wstring() {
  // @@protoc_insertion_point(destructor:Proto.wstring)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void wstring::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void wstring::ArenaDtor(void* object) {
  wstring* _this = reinterpret_cast< wstring* >(object);
  (void)_this;
}
void wstring::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void wstring::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void wstring::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.wstring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* wstring::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* wstring::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.wstring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.wstring)
  return target;
}

size_t wstring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.wstring)
  size_t total_size = 0;

  // required bytes text = 1;
  if (_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void wstring::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.wstring)
  GOOGLE_DCHECK_NE(&from, this);
  const wstring* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<wstring>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.wstring)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.wstring)
    MergeFrom(*source);
  }
}

void wstring::MergeFrom(const wstring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.wstring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
}

void wstring::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.wstring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wstring::CopyFrom(const wstring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.wstring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wstring::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void wstring::InternalSwap(wstring* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata wstring::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FontParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FontParam>()._has_bits_);
  static const ::Proto::wstring& name_obsolete(const FontParam* msg);
  static void set_has_name_obsolete(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_italic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

const ::Proto::wstring&
FontParam::_Internal::name_obsolete(const FontParam* msg) {
  return *msg->name_obsolete_;
}
FontParam::FontParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.FontParam)
}
FontParam::FontParam(const FontParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_name_obsolete()) {
    name_obsolete_ = new ::Proto::wstring(*from.name_obsolete_);
  } else {
    name_obsolete_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&italic_) -
    reinterpret_cast<char*>(&size_)) + sizeof(italic_));
  // @@protoc_insertion_point(copy_constructor:Proto.FontParam)
}

void FontParam::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_obsolete_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&italic_) -
    reinterpret_cast<char*>(&name_obsolete_)) + sizeof(italic_));
}

FontParam::~FontParam() {
  // @@protoc_insertion_point(destructor:Proto.FontParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FontParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete name_obsolete_;
}

void FontParam::ArenaDtor(void* object) {
  FontParam* _this = reinterpret_cast< FontParam* >(object);
  (void)_this;
}
void FontParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FontParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.FontParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_obsolete_ != nullptr);
      name_obsolete_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&italic_) -
        reinterpret_cast<char*>(&size_)) + sizeof(italic_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FontParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.wstring name_obsolete = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_obsolete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool bold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bold(&has_bits);
          bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool italic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_italic(&has_bits);
          italic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.FontParam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FontParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.FontParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.wstring name_obsolete = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::name_obsolete(this), target, stream);
  }

  // required double size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_size(), target);
  }

  // required bool bold = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bold(), target);
  }

  // required bool italic = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_italic(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.FontParam.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.FontParam)
  return target;
}

size_t FontParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.FontParam)
  size_t total_size = 0;

  if (_internal_has_name_obsolete()) {
    // required .Proto.wstring name_obsolete = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_obsolete_);
  }

  if (_internal_has_size()) {
    // required double size = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_bold()) {
    // required bool bold = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_italic()) {
    // required bool italic = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FontParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.FontParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .Proto.wstring name_obsolete = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_obsolete_);

    // required double size = 2;
    total_size += 1 + 8;

    // required bool bold = 3;
    total_size += 1 + 1;

    // required bool italic = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.FontParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FontParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FontParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.FontParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.FontParam)
    MergeFrom(*source);
  }
}

void FontParam::MergeFrom(const FontParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.FontParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_name_obsolete()->::Proto::wstring::MergeFrom(from._internal_name_obsolete());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      bold_ = from.bold_;
    }
    if (cached_has_bits & 0x00000010u) {
      italic_ = from.italic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FontParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.FontParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontParam::CopyFrom(const FontParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.FontParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_name_obsolete()) {
    if (!name_obsolete_->IsInitialized()) return false;
  }
  return true;
}

void FontParam::InternalSwap(FontParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FontParam, italic_)
      + sizeof(FontParam::italic_)
      - PROTOBUF_FIELD_OFFSET(FontParam, name_obsolete_)>(
          reinterpret_cast<char*>(&name_obsolete_),
          reinterpret_cast<char*>(&other->name_obsolete_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FontParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SchemaPoint::SchemaPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaPoint)
}
SchemaPoint::SchemaPoint(const SchemaPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaPoint)
}

void SchemaPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

SchemaPoint::~SchemaPoint() {
  // @@protoc_insertion_point(destructor:Proto.SchemaPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaPoint::ArenaDtor(void* object) {
  SchemaPoint* _this = reinterpret_cast< SchemaPoint* >(object);
  (void)_this;
}
void SchemaPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaPoint)
  return target;
}

size_t SchemaPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SchemaPoint)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SchemaPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaPoint)
    MergeFrom(*source);
  }
}

void SchemaPoint::MergeFrom(const SchemaPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaPoint::CopyFrom(const SchemaPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SchemaPoint::InternalSwap(SchemaPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaPoint, y_)
      + sizeof(SchemaPoint::y_)
      - PROTOBUF_FIELD_OFFSET(SchemaPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageItem>()._has_bits_);
  static void set_has_allowscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_keepaspectratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_svgdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ImageItem::ImageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ImageItem)
}
ImageItem::ImageItem(const ImageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imageid()) {
    imageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imageid(), 
      GetArena());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imagedata()) {
    imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagedata(), 
      GetArena());
  }
  svgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_svgdata()) {
    svgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_svgdata(), 
      GetArena());
  }
  ::memcpy(&allowscale_, &from.allowscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&keepaspectratio_) -
    reinterpret_cast<char*>(&allowscale_)) + sizeof(keepaspectratio_));
  // @@protoc_insertion_point(copy_constructor:Proto.ImageItem)
}

void ImageItem::SharedCtor() {
imageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
svgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
allowscale_ = true;
keepaspectratio_ = true;
}

ImageItem::~ImageItem() {
  // @@protoc_insertion_point(destructor:Proto.ImageItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svgdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageItem::ArenaDtor(void* object) {
  ImageItem* _this = reinterpret_cast< ImageItem* >(object);
  (void)_this;
}
void ImageItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ImageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      imageid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      imagedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      svgdata_.ClearNonDefaultToEmpty();
    }
    allowscale_ = true;
    keepaspectratio_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allowScale = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allowscale(&has_bits);
          allowscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keepAspectRatio = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_keepaspectratio(&has_bits);
          keepaspectratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string imageId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_imageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ImageItem.imageId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes imageData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string svgData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_svgdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ImageItem.svgData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ImageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowScale = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allowscale(), target);
  }

  // optional bool keepAspectRatio = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_keepaspectratio(), target);
  }

  // optional string imageId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imageid().data(), static_cast<int>(this->_internal_imageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ImageItem.imageId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_imageid(), target);
  }

  // optional bytes imageData = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_imagedata(), target);
  }

  // optional string svgData = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_svgdata().data(), static_cast<int>(this->_internal_svgdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ImageItem.svgData");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_svgdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ImageItem)
  return target;
}

size_t ImageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ImageItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string imageId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imageid());
    }

    // optional bytes imageData = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_imagedata());
    }

    // optional string svgData = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_svgdata());
    }

    // optional bool allowScale = 1 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool keepAspectRatio = 2 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ImageItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ImageItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ImageItem)
    MergeFrom(*source);
  }
}

void ImageItem::MergeFrom(const ImageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ImageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_imageid(from._internal_imageid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_svgdata(from._internal_svgdata());
    }
    if (cached_has_bits & 0x00000008u) {
      allowscale_ = from.allowscale_;
    }
    if (cached_has_bits & 0x00000010u) {
      keepaspectratio_ = from.keepaspectratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ImageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageItem::CopyFrom(const ImageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ImageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageItem::IsInitialized() const {
  return true;
}

void ImageItem::InternalSwap(ImageItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  imageid_.Swap(&other->imageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svgdata_.Swap(&other->svgdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(allowscale_, other->allowscale_);
  swap(keepaspectratio_, other->keepaspectratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AfbParamValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AfbParamValue>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dataformat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::qvariant& value(const AfbParamValue* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Proto::qvariant&
AfbParamValue::_Internal::value(const AfbParamValue* msg) {
  return *msg->value_;
}
AfbParamValue::AfbParamValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AfbParamValue)
}
AfbParamValue::AfbParamValue(const AfbParamValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reference()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::Proto::qvariant(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&version_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Proto.AfbParamValue)
}

void AfbParamValue::SharedCtor() {
reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&value_)) + sizeof(size_));
}

AfbParamValue::~AfbParamValue() {
  // @@protoc_insertion_point(destructor:Proto.AfbParamValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfbParamValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void AfbParamValue::ArenaDtor(void* object) {
  AfbParamValue* _this = reinterpret_cast< AfbParamValue* >(object);
  (void)_this;
}
void AfbParamValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfbParamValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AfbParamValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AfbParamValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&version_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfbParamValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dataFormat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dataformat(&has_bits);
          dataformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.qvariant value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AfbParamValue.reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfbParamValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AfbParamValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // optional int32 dataFormat = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dataformat(), target);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // optional .Proto.qvariant value = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value(this), target, stream);
  }

  // optional string reference = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AfbParamValue.reference");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AfbParamValue)
  return target;
}

size_t AfbParamValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AfbParamValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string reference = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reference());
    }

    // optional .Proto.qvariant value = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional int32 type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 dataFormat = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dataformat());
    }

    // optional int32 size = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfbParamValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AfbParamValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AfbParamValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfbParamValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AfbParamValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AfbParamValue)
    MergeFrom(*source);
  }
}

void AfbParamValue::MergeFrom(const AfbParamValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AfbParamValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reference(from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::Proto::qvariant::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      dataformat_ = from.dataformat_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AfbParamValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AfbParamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbParamValue::CopyFrom(const AfbParamValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AfbParamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbParamValue::IsInitialized() const {
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void AfbParamValue::InternalSwap(AfbParamValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AfbParamValue, size_)
      + sizeof(AfbParamValue::size_)
      - PROTOBUF_FIELD_OFFSET(AfbParamValue, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AfbParamValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Envelope::_Internal {
 public:
  using HasBits = decltype(std::declval<Envelope>()._has_bits_);
  static void set_has_classnamehash(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_compressedobject(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::SchemaItem& schemaitem(const Envelope* msg);
  static void set_has_schemaitem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::DeviceObject& deviceobject(const Envelope* msg);
  static void set_has_deviceobject(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::Schema& schema(const Envelope* msg);
  static void set_has_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::SchemaLayer& schemalayer(const Envelope* msg);
  static void set_has_schemalayer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::FblElement& fblelement(const Envelope* msg);
  static void set_has_fblelement(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::Configuration& configuration(const Envelope* msg);
  static void set_has_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Proto::Connection& connection(const Envelope* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::Proto::SchemaDetailsSet& schemadetailsset(const Envelope* msg);
  static void set_has_schemadetailsset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Proto::Bus& bus(const Envelope* msg);
  static void set_has_bus(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000400) ^ 0x00000400) != 0;
  }
};

const ::Proto::SchemaItem&
Envelope::_Internal::schemaitem(const Envelope* msg) {
  return *msg->schemaitem_;
}
const ::Proto::DeviceObject&
Envelope::_Internal::deviceobject(const Envelope* msg) {
  return *msg->deviceobject_;
}
const ::Proto::Schema&
Envelope::_Internal::schema(const Envelope* msg) {
  return *msg->schema_;
}
const ::Proto::SchemaLayer&
Envelope::_Internal::schemalayer(const Envelope* msg) {
  return *msg->schemalayer_;
}
const ::Proto::FblElement&
Envelope::_Internal::fblelement(const Envelope* msg) {
  return *msg->fblelement_;
}
const ::Proto::Configuration&
Envelope::_Internal::configuration(const Envelope* msg) {
  return *msg->configuration_;
}
const ::Proto::Connection&
Envelope::_Internal::connection(const Envelope* msg) {
  return *msg->connection_;
}
const ::Proto::SchemaDetailsSet&
Envelope::_Internal::schemadetailsset(const Envelope* msg) {
  return *msg->schemadetailsset_;
}
const ::Proto::Bus&
Envelope::_Internal::bus(const Envelope* msg) {
  return *msg->bus_;
}
Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compressedobject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_compressedobject()) {
    compressedobject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compressedobject(), 
      GetArena());
  }
  if (from._internal_has_schemaitem()) {
    schemaitem_ = new ::Proto::SchemaItem(*from.schemaitem_);
  } else {
    schemaitem_ = nullptr;
  }
  if (from._internal_has_deviceobject()) {
    deviceobject_ = new ::Proto::DeviceObject(*from.deviceobject_);
  } else {
    deviceobject_ = nullptr;
  }
  if (from._internal_has_schema()) {
    schema_ = new ::Proto::Schema(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  if (from._internal_has_schemalayer()) {
    schemalayer_ = new ::Proto::SchemaLayer(*from.schemalayer_);
  } else {
    schemalayer_ = nullptr;
  }
  if (from._internal_has_fblelement()) {
    fblelement_ = new ::Proto::FblElement(*from.fblelement_);
  } else {
    fblelement_ = nullptr;
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::Proto::Configuration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::Proto::Connection(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  if (from._internal_has_schemadetailsset()) {
    schemadetailsset_ = new ::Proto::SchemaDetailsSet(*from.schemadetailsset_);
  } else {
    schemadetailsset_ = nullptr;
  }
  if (from._internal_has_bus()) {
    bus_ = new ::Proto::Bus(*from.bus_);
  } else {
    bus_ = nullptr;
  }
  classnamehash_ = from.classnamehash_;
  // @@protoc_insertion_point(copy_constructor:Proto.Envelope)
}

void Envelope::SharedCtor() {
compressedobject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schemaitem_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&classnamehash_) -
    reinterpret_cast<char*>(&schemaitem_)) + sizeof(classnamehash_));
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:Proto.Envelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  compressedobject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schemaitem_;
  if (this != internal_default_instance()) delete deviceobject_;
  if (this != internal_default_instance()) delete schema_;
  if (this != internal_default_instance()) delete schemalayer_;
  if (this != internal_default_instance()) delete fblelement_;
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete connection_;
  if (this != internal_default_instance()) delete schemadetailsset_;
  if (this != internal_default_instance()) delete bus_;
}

void Envelope::ArenaDtor(void* object) {
  Envelope* _this = reinterpret_cast< Envelope* >(object);
  (void)_this;
}
void Envelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Envelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      compressedobject_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schemaitem_ != nullptr);
      schemaitem_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(deviceobject_ != nullptr);
      deviceobject_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(schema_ != nullptr);
      schema_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(schemalayer_ != nullptr);
      schemalayer_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(fblelement_ != nullptr);
      fblelement_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(configuration_ != nullptr);
      configuration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(connection_ != nullptr);
      connection_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(schemadetailsset_ != nullptr);
      schemadetailsset_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(bus_ != nullptr);
      bus_->Clear();
    }
  }
  classnamehash_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 classnamehash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_classnamehash(&has_bits);
          classnamehash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes compressedObject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_compressedobject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItem schemaitem = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_schemaitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceObject deviceobject = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Schema schema = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaLayer schemalayer = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_schemalayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblElement fblelement = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fblelement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Configuration configuration = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Connection connection = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_schemadetailsset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Bus bus = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Envelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 classnamehash = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_classnamehash(), target);
  }

  // optional bytes compressedObject = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_compressedobject(), target);
  }

  // optional .Proto.SchemaItem schemaitem = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::schemaitem(this), target, stream);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::deviceobject(this), target, stream);
  }

  // optional .Proto.Schema schema = 100;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::schema(this), target, stream);
  }

  // optional .Proto.SchemaLayer schemalayer = 101;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::schemalayer(this), target, stream);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::fblelement(this), target, stream);
  }

  // optional .Proto.Configuration configuration = 103;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::configuration(this), target, stream);
  }

  // optional .Proto.Connection connection = 104;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::connection(this), target, stream);
  }

  // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::schemadetailsset(this), target, stream);
  }

  // optional .Proto.Bus bus = 200;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::bus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Envelope)
  size_t total_size = 0;

  // required uint32 classnamehash = 1;
  if (_internal_has_classnamehash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_classnamehash());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes compressedObject = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_compressedobject());
    }

    // optional .Proto.SchemaItem schemaitem = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schemaitem_);
    }

    // optional .Proto.DeviceObject deviceobject = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deviceobject_);
    }

    // optional .Proto.Schema schema = 100;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schema_);
    }

    // optional .Proto.SchemaLayer schemalayer = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schemalayer_);
    }

    // optional .Proto.FblElement fblelement = 102;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fblelement_);
    }

    // optional .Proto.Configuration configuration = 103;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_);
    }

    // optional .Proto.Connection connection = 104;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schemadetailsset_);
    }

    // optional .Proto.Bus bus = 200;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bus_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Envelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const Envelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Envelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Envelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_compressedobject(from._internal_compressedobject());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_schemaitem()->::Proto::SchemaItem::MergeFrom(from._internal_schemaitem());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_deviceobject()->::Proto::DeviceObject::MergeFrom(from._internal_deviceobject());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_schema()->::Proto::Schema::MergeFrom(from._internal_schema());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_schemalayer()->::Proto::SchemaLayer::MergeFrom(from._internal_schemalayer());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_fblelement()->::Proto::FblElement::MergeFrom(from._internal_fblelement());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_configuration()->::Proto::Configuration::MergeFrom(from._internal_configuration());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_connection()->::Proto::Connection::MergeFrom(from._internal_connection());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_schemadetailsset()->::Proto::SchemaDetailsSet::MergeFrom(from._internal_schemadetailsset());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_bus()->::Proto::Bus::MergeFrom(from._internal_bus());
    }
    if (cached_has_bits & 0x00000400u) {
      classnamehash_ = from.classnamehash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Envelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_schemaitem()) {
    if (!schemaitem_->IsInitialized()) return false;
  }
  if (_internal_has_deviceobject()) {
    if (!deviceobject_->IsInitialized()) return false;
  }
  if (_internal_has_schema()) {
    if (!schema_->IsInitialized()) return false;
  }
  if (_internal_has_schemalayer()) {
    if (!schemalayer_->IsInitialized()) return false;
  }
  if (_internal_has_fblelement()) {
    if (!fblelement_->IsInitialized()) return false;
  }
  if (_internal_has_configuration()) {
    if (!configuration_->IsInitialized()) return false;
  }
  if (_internal_has_connection()) {
    if (!connection_->IsInitialized()) return false;
  }
  if (_internal_has_schemadetailsset()) {
    if (!schemadetailsset_->IsInitialized()) return false;
  }
  if (_internal_has_bus()) {
    if (!bus_->IsInitialized()) return false;
  }
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  compressedobject_.Swap(&other->compressedobject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Envelope, classnamehash_)
      + sizeof(Envelope::classnamehash_)
      - PROTOBUF_FIELD_OFFSET(Envelope, schemaitem_)>(
          reinterpret_cast<char*>(&schemaitem_),
          reinterpret_cast<char*>(&other->schemaitem_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnvelopeSet::_Internal {
 public:
};

EnvelopeSet::EnvelopeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.EnvelopeSet)
}
EnvelopeSet::EnvelopeSet(const EnvelopeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.EnvelopeSet)
}

void EnvelopeSet::SharedCtor() {
}

EnvelopeSet::~EnvelopeSet() {
  // @@protoc_insertion_point(destructor:Proto.EnvelopeSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvelopeSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnvelopeSet::ArenaDtor(void* object) {
  EnvelopeSet* _this = reinterpret_cast< EnvelopeSet* >(object);
  (void)_this;
}
void EnvelopeSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvelopeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvelopeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.EnvelopeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvelopeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.Envelope items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvelopeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.EnvelopeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Envelope items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.EnvelopeSet)
  return target;
}

size_t EnvelopeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.EnvelopeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Envelope items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvelopeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.EnvelopeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvelopeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvelopeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.EnvelopeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.EnvelopeSet)
    MergeFrom(*source);
  }
}

void EnvelopeSet::MergeFrom(const EnvelopeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.EnvelopeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void EnvelopeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.EnvelopeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeSet::CopyFrom(const EnvelopeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.EnvelopeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(items_)) return false;
  return true;
}

void EnvelopeSet::InternalSwap(EnvelopeSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvelopeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnvelopeSetShortDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvelopeSetShortDescription>()._has_bits_);
  static void set_has_projectdbversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_equipmenteditor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preseteditor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_presetroot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

EnvelopeSetShortDescription::EnvelopeSetShortDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  classnamehash_(arena),
  devicetype_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.EnvelopeSetShortDescription)
}
EnvelopeSetShortDescription::EnvelopeSetShortDescription(const EnvelopeSetShortDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      classnamehash_(from.classnamehash_),
      devicetype_(from.devicetype_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&projectdbversion_, &from.projectdbversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&presetroot_) -
    reinterpret_cast<char*>(&projectdbversion_)) + sizeof(presetroot_));
  // @@protoc_insertion_point(copy_constructor:Proto.EnvelopeSetShortDescription)
}

void EnvelopeSetShortDescription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&projectdbversion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&presetroot_) -
    reinterpret_cast<char*>(&projectdbversion_)) + sizeof(presetroot_));
}

EnvelopeSetShortDescription::~EnvelopeSetShortDescription() {
  // @@protoc_insertion_point(destructor:Proto.EnvelopeSetShortDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvelopeSetShortDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnvelopeSetShortDescription::ArenaDtor(void* object) {
  EnvelopeSetShortDescription* _this = reinterpret_cast< EnvelopeSetShortDescription* >(object);
  (void)_this;
}
void EnvelopeSetShortDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvelopeSetShortDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvelopeSetShortDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.EnvelopeSetShortDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classnamehash_.Clear();
  devicetype_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&projectdbversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&presetroot_) -
        reinterpret_cast<char*>(&projectdbversion_)) + sizeof(presetroot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvelopeSetShortDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 projectdbversion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_projectdbversion(&has_bits);
          projectdbversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 classnamehash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_classnamehash(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_classnamehash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool equipmentEditor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_equipmenteditor(&has_bits);
          equipmenteditor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool presetEditor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_preseteditor(&has_bits);
          preseteditor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool presetRoot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_presetroot(&has_bits);
          presetroot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 devicetype = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_devicetype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_devicetype(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvelopeSetShortDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.EnvelopeSetShortDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 projectdbversion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_projectdbversion(), target);
  }

  // repeated uint32 classnamehash = 2;
  for (int i = 0, n = this->_internal_classnamehash_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_classnamehash(i), target);
  }

  // optional bool equipmentEditor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_equipmenteditor(), target);
  }

  // optional bool presetEditor = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_preseteditor(), target);
  }

  // optional bool presetRoot = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_presetroot(), target);
  }

  // repeated int32 devicetype = 10;
  for (int i = 0, n = this->_internal_devicetype_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_devicetype(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.EnvelopeSetShortDescription)
  return target;
}

size_t EnvelopeSetShortDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.EnvelopeSetShortDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 classnamehash = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->classnamehash_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_classnamehash_size());
    total_size += data_size;
  }

  // repeated int32 devicetype = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->devicetype_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_devicetype_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 projectdbversion = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_projectdbversion());
    }

    // optional bool equipmentEditor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool presetEditor = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool presetRoot = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvelopeSetShortDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.EnvelopeSetShortDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvelopeSetShortDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvelopeSetShortDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.EnvelopeSetShortDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.EnvelopeSetShortDescription)
    MergeFrom(*source);
  }
}

void EnvelopeSetShortDescription::MergeFrom(const EnvelopeSetShortDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.EnvelopeSetShortDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classnamehash_.MergeFrom(from.classnamehash_);
  devicetype_.MergeFrom(from.devicetype_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      projectdbversion_ = from.projectdbversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      equipmenteditor_ = from.equipmenteditor_;
    }
    if (cached_has_bits & 0x00000004u) {
      preseteditor_ = from.preseteditor_;
    }
    if (cached_has_bits & 0x00000008u) {
      presetroot_ = from.presetroot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnvelopeSetShortDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.EnvelopeSetShortDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeSetShortDescription::CopyFrom(const EnvelopeSetShortDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.EnvelopeSetShortDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeSetShortDescription::IsInitialized() const {
  return true;
}

void EnvelopeSetShortDescription::InternalSwap(EnvelopeSetShortDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  classnamehash_.InternalSwap(&other->classnamehash_);
  devicetype_.InternalSwap(&other->devicetype_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvelopeSetShortDescription, presetroot_)
      + sizeof(EnvelopeSetShortDescription::presetroot_)
      - PROTOBUF_FIELD_OFFSET(EnvelopeSetShortDescription, projectdbversion_)>(
          reinterpret_cast<char*>(&projectdbversion_),
          reinterpret_cast<char*>(&other->projectdbversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvelopeSetShortDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExportedDevicePreset::_Internal {
 public:
  using HasBits = decltype(std::declval<ExportedDevicePreset>()._has_bits_);
  static const ::Proto::EnvelopeSetShortDescription& description(const ExportedDevicePreset* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::EnvelopeSet& items(const ExportedDevicePreset* msg);
  static void set_has_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Proto::EnvelopeSetShortDescription&
ExportedDevicePreset::_Internal::description(const ExportedDevicePreset* msg) {
  return *msg->description_;
}
const ::Proto::EnvelopeSet&
ExportedDevicePreset::_Internal::items(const ExportedDevicePreset* msg) {
  return *msg->items_;
}
ExportedDevicePreset::ExportedDevicePreset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ExportedDevicePreset)
}
ExportedDevicePreset::ExportedDevicePreset(const ExportedDevicePreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_description()) {
    description_ = new ::Proto::EnvelopeSetShortDescription(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_items()) {
    items_ = new ::Proto::EnvelopeSet(*from.items_);
  } else {
    items_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.ExportedDevicePreset)
}

void ExportedDevicePreset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&description_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&items_) -
    reinterpret_cast<char*>(&description_)) + sizeof(items_));
}

ExportedDevicePreset::~ExportedDevicePreset() {
  // @@protoc_insertion_point(destructor:Proto.ExportedDevicePreset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportedDevicePreset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete items_;
}

void ExportedDevicePreset::ArenaDtor(void* object) {
  ExportedDevicePreset* _this = reinterpret_cast< ExportedDevicePreset* >(object);
  (void)_this;
}
void ExportedDevicePreset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedDevicePreset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedDevicePreset::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ExportedDevicePreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(description_ != nullptr);
      description_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(items_ != nullptr);
      items_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedDevicePreset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.EnvelopeSetShortDescription description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.EnvelopeSet items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedDevicePreset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ExportedDevicePreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.EnvelopeSetShortDescription description = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::description(this), target, stream);
  }

  // optional .Proto.EnvelopeSet items = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ExportedDevicePreset)
  return target;
}

size_t ExportedDevicePreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ExportedDevicePreset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Proto.EnvelopeSetShortDescription description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *description_);
    }

    // optional .Proto.EnvelopeSet items = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *items_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportedDevicePreset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ExportedDevicePreset)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportedDevicePreset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportedDevicePreset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ExportedDevicePreset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ExportedDevicePreset)
    MergeFrom(*source);
  }
}

void ExportedDevicePreset::MergeFrom(const ExportedDevicePreset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ExportedDevicePreset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_description()->::Proto::EnvelopeSetShortDescription::MergeFrom(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_items()->::Proto::EnvelopeSet::MergeFrom(from._internal_items());
    }
  }
}

void ExportedDevicePreset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ExportedDevicePreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportedDevicePreset::CopyFrom(const ExportedDevicePreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ExportedDevicePreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedDevicePreset::IsInitialized() const {
  if (_internal_has_items()) {
    if (!items_->IsInitialized()) return false;
  }
  return true;
}

void ExportedDevicePreset::InternalSwap(ExportedDevicePreset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedDevicePreset, items_)
      + sizeof(ExportedDevicePreset::items_)
      - PROTOBUF_FIELD_OFFSET(ExportedDevicePreset, description_)>(
          reinterpret_cast<char*>(&description_),
          reinterpret_cast<char*>(&other->description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedDevicePreset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Configuration::_Internal {
 public:
  using HasBits = decltype(std::declval<Configuration>()._has_bits_);
  static const ::Proto::Uuid& uuid(const Configuration* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::wstring& strid(const Configuration* msg);
  static void set_has_strid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::wstring& caption(const Configuration* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::wstring& variables(const Configuration* msg);
  static void set_has_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::wstring& globals(const Configuration* msg);
  static void set_has_globals(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::Proto::Uuid&
Configuration::_Internal::uuid(const Configuration* msg) {
  return *msg->uuid_;
}
const ::Proto::wstring&
Configuration::_Internal::strid(const Configuration* msg) {
  return *msg->strid_;
}
const ::Proto::wstring&
Configuration::_Internal::caption(const Configuration* msg) {
  return *msg->caption_;
}
const ::Proto::wstring&
Configuration::_Internal::variables(const Configuration* msg) {
  return *msg->variables_;
}
const ::Proto::wstring&
Configuration::_Internal::globals(const Configuration* msg) {
  return *msg->globals_;
}
Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  schemasids_(arena),
  schemas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      schemasids_(from.schemasids_),
      schemas_(from.schemas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_strid()) {
    strid_ = new ::Proto::wstring(*from.strid_);
  } else {
    strid_ = nullptr;
  }
  if (from._internal_has_caption()) {
    caption_ = new ::Proto::wstring(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  if (from._internal_has_variables()) {
    variables_ = new ::Proto::wstring(*from.variables_);
  } else {
    variables_ = nullptr;
  }
  if (from._internal_has_globals()) {
    globals_ = new ::Proto::wstring(*from.globals_);
  } else {
    globals_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Configuration)
}

void Configuration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&globals_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(globals_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:Proto.Configuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete strid_;
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete variables_;
  if (this != internal_default_instance()) delete globals_;
}

void Configuration::ArenaDtor(void* object) {
  Configuration* _this = reinterpret_cast< Configuration* >(object);
  (void)_this;
}
void Configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schemasids_.Clear();
  schemas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(strid_ != nullptr);
      strid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(variables_ != nullptr);
      variables_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(globals_ != nullptr);
      globals_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.Uuid uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring strID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_strid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring variables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_variables(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring globals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_globals(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Uuid schemasIDs = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_schemasids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Envelope schemas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_schemas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Uuid uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // required .Proto.wstring strID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::strid(this), target, stream);
  }

  // required .Proto.wstring caption = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caption(this), target, stream);
  }

  // required .Proto.wstring variables = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::variables(this), target, stream);
  }

  // required .Proto.wstring globals = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::globals(this), target, stream);
  }

  // repeated .Proto.Uuid schemasIDs = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schemasids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_schemasids(i), target, stream);
  }

  // repeated .Proto.Envelope schemas = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schemas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, this->_internal_schemas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Configuration)
  return target;
}

size_t Configuration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Configuration)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_strid()) {
    // required .Proto.wstring strID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strid_);
  }

  if (_internal_has_caption()) {
    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  if (_internal_has_variables()) {
    // required .Proto.wstring variables = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variables_);
  }

  if (_internal_has_globals()) {
    // required .Proto.wstring globals = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globals_);
  }

  return total_size;
}
size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Configuration)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required .Proto.wstring strID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strid_);

    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);

    // required .Proto.wstring variables = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variables_);

    // required .Proto.wstring globals = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globals_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Uuid schemasIDs = 100;
  total_size += 2UL * this->_internal_schemasids_size();
  for (const auto& msg : this->schemasids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Envelope schemas = 101;
  total_size += 2UL * this->_internal_schemas_size();
  for (const auto& msg : this->schemas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schemasids_.MergeFrom(from.schemasids_);
  schemas_.MergeFrom(from.schemas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_strid()->::Proto::wstring::MergeFrom(from._internal_strid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_caption()->::Proto::wstring::MergeFrom(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_variables()->::Proto::wstring::MergeFrom(from._internal_variables());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_globals()->::Proto::wstring::MergeFrom(from._internal_globals());
    }
  }
}

void Configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(schemasids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(schemas_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_strid()) {
    if (!strid_->IsInitialized()) return false;
  }
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  if (_internal_has_variables()) {
    if (!variables_->IsInitialized()) return false;
  }
  if (_internal_has_globals()) {
    if (!globals_->IsInitialized()) return false;
  }
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  schemasids_.InternalSwap(&other->schemasids_);
  schemas_.InternalSwap(&other->schemas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configuration, globals_)
      + sizeof(Configuration::globals_)
      - PROTOBUF_FIELD_OFFSET(Configuration, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AfbElementCollection::_Internal {
 public:
};

AfbElementCollection::AfbElementCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AfbElementCollection)
}
AfbElementCollection::AfbElementCollection(const AfbElementCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.AfbElementCollection)
}

void AfbElementCollection::SharedCtor() {
}

AfbElementCollection::~AfbElementCollection() {
  // @@protoc_insertion_point(destructor:Proto.AfbElementCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfbElementCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AfbElementCollection::ArenaDtor(void* object) {
  AfbElementCollection* _this = reinterpret_cast< AfbElementCollection* >(object);
  (void)_this;
}
void AfbElementCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfbElementCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AfbElementCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AfbElementCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfbElementCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.AfbElementXml elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfbElementCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AfbElementCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.AfbElementXml elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AfbElementCollection)
  return target;
}

size_t AfbElementCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AfbElementCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AfbElementXml elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfbElementCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AfbElementCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const AfbElementCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfbElementCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AfbElementCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AfbElementCollection)
    MergeFrom(*source);
  }
}

void AfbElementCollection::MergeFrom(const AfbElementCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AfbElementCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void AfbElementCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AfbElementCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementCollection::CopyFrom(const AfbElementCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AfbElementCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementCollection::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void AfbElementCollection::InternalSwap(AfbElementCollection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AfbElementCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AfbElementXml::_Internal {
 public:
  using HasBits = decltype(std::declval<AfbElementXml>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AfbElementXml::AfbElementXml(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AfbElementXml)
}
AfbElementXml::AfbElementXml(const AfbElementXml& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.AfbElementXml)
}

void AfbElementXml::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AfbElementXml::~AfbElementXml() {
  // @@protoc_insertion_point(destructor:Proto.AfbElementXml)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfbElementXml::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AfbElementXml::ArenaDtor(void* object) {
  AfbElementXml* _this = reinterpret_cast< AfbElementXml* >(object);
  (void)_this;
}
void AfbElementXml::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfbElementXml::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AfbElementXml::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AfbElementXml)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfbElementXml::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfbElementXml::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AfbElementXml)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AfbElementXml)
  return target;
}

size_t AfbElementXml::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AfbElementXml)
  size_t total_size = 0;

  // required bytes data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfbElementXml::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AfbElementXml)
  GOOGLE_DCHECK_NE(&from, this);
  const AfbElementXml* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfbElementXml>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AfbElementXml)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AfbElementXml)
    MergeFrom(*source);
  }
}

void AfbElementXml::MergeFrom(const AfbElementXml& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AfbElementXml)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void AfbElementXml::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AfbElementXml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementXml::CopyFrom(const AfbElementXml& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AfbElementXml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementXml::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AfbElementXml::InternalSwap(AfbElementXml* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AfbElementXml::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FblElement::_Internal {
 public:
  using HasBits = decltype(std::declval<FblElement>()._has_bits_);
  static const ::Proto::wstring& strid(const FblElement* msg);
  static void set_has_strid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::wstring& caption(const FblElement* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hasram(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_requiredstart(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::wstring& description(const FblElement* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::Proto::wstring&
FblElement::_Internal::strid(const FblElement* msg) {
  return *msg->strid_;
}
const ::Proto::wstring&
FblElement::_Internal::caption(const FblElement* msg) {
  return *msg->caption_;
}
const ::Proto::wstring&
FblElement::_Internal::description(const FblElement* msg) {
  return *msg->description_;
}
FblElement::FblElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.FblElement)
}
FblElement::FblElement(const FblElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_strid()) {
    strid_ = new ::Proto::wstring(*from.strid_);
  } else {
    strid_ = nullptr;
  }
  if (from._internal_has_caption()) {
    caption_ = new ::Proto::wstring(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  if (from._internal_has_description()) {
    description_ = new ::Proto::wstring(*from.description_);
  } else {
    description_ = nullptr;
  }
  ::memcpy(&opcode_, &from.opcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&requiredstart_) -
    reinterpret_cast<char*>(&opcode_)) + sizeof(requiredstart_));
  // @@protoc_insertion_point(copy_constructor:Proto.FblElement)
}

void FblElement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&strid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hasram_) -
    reinterpret_cast<char*>(&strid_)) + sizeof(hasram_));
requiredstart_ = true;
}

FblElement::~FblElement() {
  // @@protoc_insertion_point(destructor:Proto.FblElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FblElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete strid_;
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete description_;
}

void FblElement::ArenaDtor(void* object) {
  FblElement* _this = reinterpret_cast< FblElement* >(object);
  (void)_this;
}
void FblElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FblElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FblElement::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.FblElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(strid_ != nullptr);
      strid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(description_ != nullptr);
      description_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&opcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hasram_) -
        reinterpret_cast<char*>(&opcode_)) + sizeof(hasram_));
    requiredstart_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FblElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.wstring strID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_strid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 opcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasRam = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hasram(&has_bits);
          hasram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requiredStart = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_requiredstart(&has_bits);
          requiredstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AfbSignal inputs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AfbSignal outputs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.AfbParam params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FblElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.FblElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.wstring strID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::strid(this), target, stream);
  }

  // required .Proto.wstring caption = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caption(this), target, stream);
  }

  // required uint32 opcode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_opcode(), target);
  }

  // optional bool hasRam = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hasram(), target);
  }

  // optional bool requiredStart = 6 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_requiredstart(), target);
  }

  // repeated .Proto.AfbSignal inputs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_inputs(i), target, stream);
  }

  // repeated .Proto.AfbSignal outputs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_outputs(i), target, stream);
  }

  // repeated .Proto.AfbParam params = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_params(i), target, stream);
  }

  // optional .Proto.wstring description = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.FblElement)
  return target;
}

size_t FblElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.FblElement)
  size_t total_size = 0;

  if (_internal_has_strid()) {
    // required .Proto.wstring strID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strid_);
  }

  if (_internal_has_caption()) {
    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  if (_internal_has_opcode()) {
    // required uint32 opcode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opcode());
  }

  return total_size;
}
size_t FblElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.FblElement)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .Proto.wstring strID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strid_);

    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);

    // required uint32 opcode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AfbSignal inputs = 11;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.AfbSignal outputs = 12;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.AfbParam params = 13;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .Proto.wstring description = 14;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  if (cached_has_bits & 0x00000030u) {
    // optional bool hasRam = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool requiredStart = 6 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FblElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.FblElement)
  GOOGLE_DCHECK_NE(&from, this);
  const FblElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FblElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.FblElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.FblElement)
    MergeFrom(*source);
  }
}

void FblElement::MergeFrom(const FblElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.FblElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_strid()->::Proto::wstring::MergeFrom(from._internal_strid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_caption()->::Proto::wstring::MergeFrom(from._internal_caption());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_description()->::Proto::wstring::MergeFrom(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      hasram_ = from.hasram_;
    }
    if (cached_has_bits & 0x00000020u) {
      requiredstart_ = from.requiredstart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FblElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.FblElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblElement::CopyFrom(const FblElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.FblElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblElement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(params_)) return false;
  if (_internal_has_strid()) {
    if (!strid_->IsInitialized()) return false;
  }
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  if (_internal_has_description()) {
    if (!description_->IsInitialized()) return false;
  }
  return true;
}

void FblElement::InternalSwap(FblElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FblElement, hasram_)
      + sizeof(FblElement::hasram_)
      - PROTOBUF_FIELD_OFFSET(FblElement, strid_)>(
          reinterpret_cast<char*>(&strid_),
          reinterpret_cast<char*>(&other->strid_));
  swap(requiredstart_, other->requiredstart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FblElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AfbSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<AfbSignal>()._has_bits_);
  static const ::Proto::wstring& caption(const AfbSignal* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operandindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::wstring& opname(const AfbSignal* msg);
  static void set_has_opname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dataformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::Proto::wstring&
AfbSignal::_Internal::caption(const AfbSignal* msg) {
  return *msg->caption_;
}
const ::Proto::wstring&
AfbSignal::_Internal::opname(const AfbSignal* msg) {
  return *msg->opname_;
}
AfbSignal::AfbSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AfbSignal)
}
AfbSignal::AfbSignal(const AfbSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caption()) {
    caption_ = new ::Proto::wstring(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  if (from._internal_has_opname()) {
    opname_ = new ::Proto::wstring(*from.opname_);
  } else {
    opname_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dataformat_) -
    reinterpret_cast<char*>(&type_)) + sizeof(dataformat_));
  // @@protoc_insertion_point(copy_constructor:Proto.AfbSignal)
}

void AfbSignal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caption_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataformat_) -
    reinterpret_cast<char*>(&caption_)) + sizeof(dataformat_));
}

AfbSignal::~AfbSignal() {
  // @@protoc_insertion_point(destructor:Proto.AfbSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfbSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete opname_;
}

void AfbSignal::ArenaDtor(void* object) {
  AfbSignal* _this = reinterpret_cast< AfbSignal* >(object);
  (void)_this;
}
void AfbSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfbSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AfbSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AfbSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(opname_ != nullptr);
      opname_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dataformat_) -
        reinterpret_cast<char*>(&type_)) + sizeof(dataformat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfbSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.wstring caption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.FblSignalType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::FblSignalType_IsValid(val))) {
            _internal_set_type(static_cast<::Proto::FblSignalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 operandIndex = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_operandindex(&has_bits);
          operandindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring opName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblDataFormat dataFormat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::FblDataFormat_IsValid(val))) {
            _internal_set_dataformat(static_cast<::Proto::FblDataFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfbSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AfbSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.wstring caption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::caption(this), target, stream);
  }

  // required .Proto.FblSignalType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional int32 operandIndex = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_operandindex(), target);
  }

  // optional int32 size = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // optional .Proto.wstring opName = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::opname(this), target, stream);
  }

  // optional .Proto.FblDataFormat dataFormat = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_dataformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AfbSignal)
  return target;
}

size_t AfbSignal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.AfbSignal)
  size_t total_size = 0;

  if (_internal_has_caption()) {
    // required .Proto.wstring caption = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  if (_internal_has_type()) {
    // required .Proto.FblSignalType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t AfbSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AfbSignal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .Proto.wstring caption = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);

    // required .Proto.FblSignalType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Proto.wstring opName = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opname_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int32 operandIndex = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_operandindex());
    }

    // optional int32 size = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional .Proto.FblDataFormat dataFormat = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dataformat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfbSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AfbSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const AfbSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfbSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AfbSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AfbSignal)
    MergeFrom(*source);
  }
}

void AfbSignal::MergeFrom(const AfbSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AfbSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caption()->::Proto::wstring::MergeFrom(from._internal_caption());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_opname()->::Proto::wstring::MergeFrom(from._internal_opname());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      operandindex_ = from.operandindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      dataformat_ = from.dataformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AfbSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AfbSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbSignal::CopyFrom(const AfbSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AfbSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbSignal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  if (_internal_has_opname()) {
    if (!opname_->IsInitialized()) return false;
  }
  return true;
}

void AfbSignal::InternalSwap(AfbSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AfbSignal, dataformat_)
      + sizeof(AfbSignal::dataformat_)
      - PROTOBUF_FIELD_OFFSET(AfbSignal, caption_)>(
          reinterpret_cast<char*>(&caption_),
          reinterpret_cast<char*>(&other->caption_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AfbSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AfbParam::_Internal {
 public:
  using HasBits = decltype(std::declval<AfbParam>()._has_bits_);
  static const ::Proto::wstring& caption(const AfbParam* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_operandindex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_instantiator(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Proto::wstring& changedscript(const AfbParam* msg);
  static void set_has_changedscript(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::qvariant& value(const AfbParam* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::qvariant& defaultvalue(const AfbParam* msg);
  static void set_has_defaultvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::qvariant& lowlimit(const AfbParam* msg);
  static void set_has_lowlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::qvariant& highlimit(const AfbParam* msg);
  static void set_has_highlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::wstring& opname(const AfbParam* msg);
  static void set_has_opname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dataformat(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000201) ^ 0x00000201) != 0;
  }
};

const ::Proto::wstring&
AfbParam::_Internal::caption(const AfbParam* msg) {
  return *msg->caption_;
}
const ::Proto::wstring&
AfbParam::_Internal::changedscript(const AfbParam* msg) {
  return *msg->changedscript_;
}
const ::Proto::qvariant&
AfbParam::_Internal::value(const AfbParam* msg) {
  return *msg->value_;
}
const ::Proto::qvariant&
AfbParam::_Internal::defaultvalue(const AfbParam* msg) {
  return *msg->defaultvalue_;
}
const ::Proto::qvariant&
AfbParam::_Internal::lowlimit(const AfbParam* msg) {
  return *msg->lowlimit_;
}
const ::Proto::qvariant&
AfbParam::_Internal::highlimit(const AfbParam* msg) {
  return *msg->highlimit_;
}
const ::Proto::wstring&
AfbParam::_Internal::opname(const AfbParam* msg) {
  return *msg->opname_;
}
AfbParam::AfbParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AfbParam)
}
AfbParam::AfbParam(const AfbParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caption()) {
    caption_ = new ::Proto::wstring(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  if (from._internal_has_changedscript()) {
    changedscript_ = new ::Proto::wstring(*from.changedscript_);
  } else {
    changedscript_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::Proto::qvariant(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_defaultvalue()) {
    defaultvalue_ = new ::Proto::qvariant(*from.defaultvalue_);
  } else {
    defaultvalue_ = nullptr;
  }
  if (from._internal_has_lowlimit()) {
    lowlimit_ = new ::Proto::qvariant(*from.lowlimit_);
  } else {
    lowlimit_ = nullptr;
  }
  if (from._internal_has_highlimit()) {
    highlimit_ = new ::Proto::qvariant(*from.highlimit_);
  } else {
    highlimit_ = nullptr;
  }
  if (from._internal_has_opname()) {
    opname_ = new ::Proto::wstring(*from.opname_);
  } else {
    opname_ = nullptr;
  }
  ::memcpy(&operandindex_, &from.operandindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&dataformat_) -
    reinterpret_cast<char*>(&operandindex_)) + sizeof(dataformat_));
  // @@protoc_insertion_point(copy_constructor:Proto.AfbParam)
}

void AfbParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caption_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataformat_) -
    reinterpret_cast<char*>(&caption_)) + sizeof(dataformat_));
}

AfbParam::~AfbParam() {
  // @@protoc_insertion_point(destructor:Proto.AfbParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfbParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete changedscript_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete defaultvalue_;
  if (this != internal_default_instance()) delete lowlimit_;
  if (this != internal_default_instance()) delete highlimit_;
  if (this != internal_default_instance()) delete opname_;
}

void AfbParam::ArenaDtor(void* object) {
  AfbParam* _this = reinterpret_cast< AfbParam* >(object);
  (void)_this;
}
void AfbParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfbParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AfbParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AfbParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(changedscript_ != nullptr);
      changedscript_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(defaultvalue_ != nullptr);
      defaultvalue_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(lowlimit_ != nullptr);
      lowlimit_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(highlimit_ != nullptr);
      highlimit_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(opname_ != nullptr);
      opname_->Clear();
    }
  }
  operandindex_ = 0;
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dataformat_) -
        reinterpret_cast<char*>(&size_)) + sizeof(dataformat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfbParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.wstring caption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool visible = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 operandIndex = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_operandindex(&has_bits);
          operandindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool instantiator = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_instantiator(&has_bits);
          instantiator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_user(&has_bits);
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring changedScript = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_changedscript(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.qvariant value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.qvariant defaultvalue = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.qvariant lowlimit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_lowlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.qvariant highlimit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring opName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_opname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblSignalType type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::FblSignalType_IsValid(val))) {
            _internal_set_type(static_cast<::Proto::FblSignalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblDataFormat dataFormat = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::FblDataFormat_IsValid(val))) {
            _internal_set_dataformat(static_cast<::Proto::FblDataFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfbParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AfbParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.wstring caption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::caption(this), target, stream);
  }

  // required bool visible = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_visible(), target);
  }

  // optional int32 operandIndex = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_operandindex(), target);
  }

  // optional int32 size = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_size(), target);
  }

  // optional bool instantiator = 10 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_instantiator(), target);
  }

  // optional bool user = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_user(), target);
  }

  // optional .Proto.wstring changedScript = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::changedscript(this), target, stream);
  }

  // optional .Proto.qvariant value = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::value(this), target, stream);
  }

  // optional .Proto.qvariant defaultvalue = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::defaultvalue(this), target, stream);
  }

  // optional .Proto.qvariant lowlimit = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::lowlimit(this), target, stream);
  }

  // optional .Proto.qvariant highlimit = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::highlimit(this), target, stream);
  }

  // optional .Proto.wstring opName = 17;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::opname(this), target, stream);
  }

  // optional .Proto.FblSignalType type = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_type(), target);
  }

  // optional .Proto.FblDataFormat dataFormat = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_dataformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AfbParam)
  return target;
}

size_t AfbParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.AfbParam)
  size_t total_size = 0;

  if (_internal_has_caption()) {
    // required .Proto.wstring caption = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  if (_internal_has_visible()) {
    // required bool visible = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AfbParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AfbParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000201) ^ 0x00000201) == 0) {  // All required fields are present.
    // required .Proto.wstring caption = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);

    // required bool visible = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .Proto.wstring changedScript = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changedscript_);
    }

    // optional .Proto.qvariant value = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .Proto.qvariant defaultvalue = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultvalue_);
    }

    // optional .Proto.qvariant lowlimit = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lowlimit_);
    }

    // optional .Proto.qvariant highlimit = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *highlimit_);
    }

    // optional .Proto.wstring opName = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *opname_);
    }

    // optional int32 operandIndex = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_operandindex());
    }

  }
  // optional int32 size = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (cached_has_bits & 0x00003c00u) {
    // optional bool instantiator = 10 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool user = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .Proto.FblSignalType type = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .Proto.FblDataFormat dataFormat = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dataformat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfbParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AfbParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AfbParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfbParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AfbParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AfbParam)
    MergeFrom(*source);
  }
}

void AfbParam::MergeFrom(const AfbParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AfbParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caption()->::Proto::wstring::MergeFrom(from._internal_caption());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_changedscript()->::Proto::wstring::MergeFrom(from._internal_changedscript());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_value()->::Proto::qvariant::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_defaultvalue()->::Proto::qvariant::MergeFrom(from._internal_defaultvalue());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_lowlimit()->::Proto::qvariant::MergeFrom(from._internal_lowlimit());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_highlimit()->::Proto::qvariant::MergeFrom(from._internal_highlimit());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_opname()->::Proto::wstring::MergeFrom(from._internal_opname());
    }
    if (cached_has_bits & 0x00000080u) {
      operandindex_ = from.operandindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000200u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000400u) {
      instantiator_ = from.instantiator_;
    }
    if (cached_has_bits & 0x00000800u) {
      user_ = from.user_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      dataformat_ = from.dataformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AfbParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AfbParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbParam::CopyFrom(const AfbParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AfbParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  if (_internal_has_changedscript()) {
    if (!changedscript_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  if (_internal_has_defaultvalue()) {
    if (!defaultvalue_->IsInitialized()) return false;
  }
  if (_internal_has_lowlimit()) {
    if (!lowlimit_->IsInitialized()) return false;
  }
  if (_internal_has_highlimit()) {
    if (!highlimit_->IsInitialized()) return false;
  }
  if (_internal_has_opname()) {
    if (!opname_->IsInitialized()) return false;
  }
  return true;
}

void AfbParam::InternalSwap(AfbParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AfbParam, dataformat_)
      + sizeof(AfbParam::dataformat_)
      - PROTOBUF_FIELD_OFFSET(AfbParam, caption_)>(
          reinterpret_cast<char*>(&caption_),
          reinterpret_cast<char*>(&other->caption_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AfbParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Schema::_Internal {
 public:
  using HasBits = decltype(std::declval<Schema>()._has_bits_);
  static const ::Proto::Uuid& uuid(const Schema* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::wstring& schemaid(const Schema* msg);
  static void set_has_schemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Proto::wstring& caption(const Schema* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_excludefrombuild(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_backgroundcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_joinhorzpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_joinleftschemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jointopschemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_joinrightschemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_joinbottomschemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::AfbElementCollection& afbs(const Schema* msg);
  static void set_has_afbs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Proto::LogicSchema& logic_schema(const Schema* msg);
  static void set_has_logic_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Proto::UfbSchema& ufb_schema(const Schema* msg);
  static void set_has_ufb_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000039e0) ^ 0x000039e0) != 0;
  }
};

const ::Proto::Uuid&
Schema::_Internal::uuid(const Schema* msg) {
  return *msg->uuid_;
}
const ::Proto::wstring&
Schema::_Internal::schemaid(const Schema* msg) {
  return *msg->schemaid_;
}
const ::Proto::wstring&
Schema::_Internal::caption(const Schema* msg) {
  return *msg->caption_;
}
const ::Proto::AfbElementCollection&
Schema::_Internal::afbs(const Schema* msg) {
  return *msg->afbs_;
}
const ::Proto::LogicSchema&
Schema::_Internal::logic_schema(const Schema* msg) {
  return *msg->logic_schema_;
}
const ::Proto::UfbSchema&
Schema::_Internal::ufb_schema(const Schema* msg) {
  return *msg->ufb_schema_;
}
Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  layers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tags()) {
    tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tags(), 
      GetArena());
  }
  joinleftschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_joinleftschemaid()) {
    joinleftschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joinleftschemaid(), 
      GetArena());
  }
  jointopschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_jointopschemaid()) {
    jointopschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jointopschemaid(), 
      GetArena());
  }
  joinrightschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_joinrightschemaid()) {
    joinrightschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joinrightschemaid(), 
      GetArena());
  }
  joinbottomschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_joinbottomschemaid()) {
    joinbottomschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joinbottomschemaid(), 
      GetArena());
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_schemaid()) {
    schemaid_ = new ::Proto::wstring(*from.schemaid_);
  } else {
    schemaid_ = nullptr;
  }
  if (from._internal_has_caption()) {
    caption_ = new ::Proto::wstring(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  if (from._internal_has_afbs()) {
    afbs_ = new ::Proto::AfbElementCollection(*from.afbs_);
  } else {
    afbs_ = nullptr;
  }
  if (from._internal_has_logic_schema()) {
    logic_schema_ = new ::Proto::LogicSchema(*from.logic_schema_);
  } else {
    logic_schema_ = nullptr;
  }
  if (from._internal_has_ufb_schema()) {
    ufb_schema_ = new ::Proto::UfbSchema(*from.ufb_schema_);
  } else {
    ufb_schema_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&joinhorzpriority_) -
    reinterpret_cast<char*>(&width_)) + sizeof(joinhorzpriority_));
  // @@protoc_insertion_point(copy_constructor:Proto.Schema)
}

void Schema::SharedCtor() {
tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
joinleftschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
jointopschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
joinrightschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
joinbottomschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&joinhorzpriority_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(joinhorzpriority_));
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:Proto.Schema)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Schema::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  joinleftschemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jointopschemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  joinrightschemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  joinbottomschemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete schemaid_;
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete afbs_;
  if (this != internal_default_instance()) delete logic_schema_;
  if (this != internal_default_instance()) delete ufb_schema_;
}

void Schema::ArenaDtor(void* object) {
  Schema* _this = reinterpret_cast< Schema* >(object);
  (void)_this;
}
void Schema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Schema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tags_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      joinleftschemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      jointopschemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      joinrightschemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      joinbottomschemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(schemaid_ != nullptr);
      schemaid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(afbs_ != nullptr);
      afbs_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(logic_schema_ != nullptr);
      logic_schema_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(ufb_schema_ != nullptr);
      ufb_schema_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&excludefrombuild_) -
        reinterpret_cast<char*>(&width_)) + sizeof(excludefrombuild_));
  }
  joinhorzpriority_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.Uuid uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring schemaID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schemaid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .Proto.SchemaUnit unit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::SchemaUnit_IsValid(val))) {
            _internal_set_unit(static_cast<::Proto::SchemaUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool excludeFromBuild = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_excludefrombuild(&has_bits);
          excludefrombuild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 backgroundColor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_backgroundcolor(&has_bits);
          backgroundcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Schema.tags");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool joinHorzPriority = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_joinhorzpriority(&has_bits);
          joinhorzpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string joinLeftSchemaId = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_joinleftschemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Schema.joinLeftSchemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string joinTopSchemaId = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_jointopschemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Schema.joinTopSchemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string joinRightSchemaId = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_joinrightschemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Schema.joinRightSchemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string joinBottomSchemaId = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_joinbottomschemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Schema.joinBottomSchemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Envelope layers = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      // required .Proto.AfbElementCollection afbs = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_afbs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.LogicSchema logic_schema = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_logic_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.UfbSchema ufb_schema = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ufb_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Schema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Schema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Uuid uuid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // required .Proto.wstring schemaID = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::schemaid(this), target, stream);
  }

  // required .Proto.wstring caption = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caption(this), target, stream);
  }

  // required double width = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_width(), target);
  }

  // required double height = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_height(), target);
  }

  // required .Proto.SchemaUnit unit = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_unit(), target);
  }

  // optional bool excludeFromBuild = 7 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_excludefrombuild(), target);
  }

  // optional uint32 backgroundColor = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_backgroundcolor(), target);
  }

  // optional string tags = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Schema.tags");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tags(), target);
  }

  // optional bool joinHorzPriority = 31 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_joinhorzpriority(), target);
  }

  // optional string joinLeftSchemaId = 32;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_joinleftschemaid().data(), static_cast<int>(this->_internal_joinleftschemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Schema.joinLeftSchemaId");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_joinleftschemaid(), target);
  }

  // optional string joinTopSchemaId = 33;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_jointopschemaid().data(), static_cast<int>(this->_internal_jointopschemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Schema.joinTopSchemaId");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_jointopschemaid(), target);
  }

  // optional string joinRightSchemaId = 34;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_joinrightschemaid().data(), static_cast<int>(this->_internal_joinrightschemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Schema.joinRightSchemaId");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_joinrightschemaid(), target);
  }

  // optional string joinBottomSchemaId = 35;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_joinbottomschemaid().data(), static_cast<int>(this->_internal_joinbottomschemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Schema.joinBottomSchemaId");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_joinbottomschemaid(), target);
  }

  // repeated .Proto.Envelope layers = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_layers(i), target, stream);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::afbs(this), target, stream);
  }

  // optional .Proto.LogicSchema logic_schema = 200;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::logic_schema(this), target, stream);
  }

  // optional .Proto.UfbSchema ufb_schema = 201;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::ufb_schema(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Schema)
  return target;
}

size_t Schema::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Schema)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_schemaid()) {
    // required .Proto.wstring schemaID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schemaid_);
  }

  if (_internal_has_caption()) {
    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  if (_internal_has_afbs()) {
    // required .Proto.AfbElementCollection afbs = 101;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *afbs_);
  }

  if (_internal_has_width()) {
    // required double width = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_height()) {
    // required double height = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_unit()) {
    // required .Proto.SchemaUnit unit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  return total_size;
}
size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Schema)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000039e0) ^ 0x000039e0) == 0) {  // All required fields are present.
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required .Proto.wstring schemaID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schemaid_);

    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);

    // required .Proto.AfbElementCollection afbs = 101;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *afbs_);

    // required double width = 4;
    total_size += 1 + 8;

    // required double height = 5;
    total_size += 1 + 8;

    // required .Proto.SchemaUnit unit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Envelope layers = 100;
  total_size += 2UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string tags = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tags());
    }

    // optional string joinLeftSchemaId = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_joinleftschemaid());
    }

    // optional string joinTopSchemaId = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jointopschemaid());
    }

    // optional string joinRightSchemaId = 34;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_joinrightschemaid());
    }

    // optional string joinBottomSchemaId = 35;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_joinbottomschemaid());
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional .Proto.LogicSchema logic_schema = 200;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logic_schema_);
    }

    // optional .Proto.UfbSchema ufb_schema = 201;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ufb_schema_);
    }

  }
  if (cached_has_bits & 0x0000c000u) {
    // optional uint32 backgroundColor = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_backgroundcolor());
    }

    // optional bool excludeFromBuild = 7 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  // optional bool joinHorzPriority = 31 [default = false];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schema::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  const Schema* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Schema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Schema)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Schema)
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tags(from._internal_tags());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_joinleftschemaid(from._internal_joinleftschemaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_jointopschemaid(from._internal_jointopschemaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_joinrightschemaid(from._internal_joinrightschemaid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_joinbottomschemaid(from._internal_joinbottomschemaid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_schemaid()->::Proto::wstring::MergeFrom(from._internal_schemaid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_caption()->::Proto::wstring::MergeFrom(from._internal_caption());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_afbs()->::Proto::AfbElementCollection::MergeFrom(from._internal_afbs());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_logic_schema()->::Proto::LogicSchema::MergeFrom(from._internal_logic_schema());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_ufb_schema()->::Proto::UfbSchema::MergeFrom(from._internal_ufb_schema());
    }
    if (cached_has_bits & 0x00000800u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00001000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00002000u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00004000u) {
      backgroundcolor_ = from.backgroundcolor_;
    }
    if (cached_has_bits & 0x00008000u) {
      excludefrombuild_ = from.excludefrombuild_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_joinhorzpriority(from._internal_joinhorzpriority());
  }
}

void Schema::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(layers_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_schemaid()) {
    if (!schemaid_->IsInitialized()) return false;
  }
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  if (_internal_has_afbs()) {
    if (!afbs_->IsInitialized()) return false;
  }
  if (_internal_has_logic_schema()) {
    if (!logic_schema_->IsInitialized()) return false;
  }
  return true;
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layers_.InternalSwap(&other->layers_);
  tags_.Swap(&other->tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  joinleftschemaid_.Swap(&other->joinleftschemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jointopschemaid_.Swap(&other->jointopschemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  joinrightschemaid_.Swap(&other->joinrightschemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  joinbottomschemaid_.Swap(&other->joinbottomschemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Schema, joinhorzpriority_)
      + sizeof(Schema::joinhorzpriority_)
      - PROTOBUF_FIELD_OFFSET(Schema, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogicSchema::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicSchema>()._has_bits_);
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lmdescriptionfile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LogicSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_{{{"LogicModule0000.xml", 19}}, {nullptr}};
LogicSchema::LogicSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equipmentids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.LogicSchema)
}
LogicSchema::LogicSchema(const LogicSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      equipmentids_(from.equipmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lmdescriptionfile_.UnsafeSetDefault(nullptr);
  if (from._internal_has_lmdescriptionfile()) {
    lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_lmdescriptionfile(), 
      GetArena());
  }
  counter_ = from.counter_;
  // @@protoc_insertion_point(copy_constructor:Proto.LogicSchema)
}

void LogicSchema::SharedCtor() {
lmdescriptionfile_.UnsafeSetDefault(nullptr);
counter_ = 0;
}

LogicSchema::~LogicSchema() {
  // @@protoc_insertion_point(destructor:Proto.LogicSchema)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lmdescriptionfile_.DestroyNoArena(nullptr);
}

void LogicSchema::ArenaDtor(void* object) {
  LogicSchema* _this = reinterpret_cast< LogicSchema* >(object);
  (void)_this;
}
void LogicSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LogicSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equipmentids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lmdescriptionfile_.ClearToDefault(::Proto::LogicSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_, GetArena());
     }
  counter_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.wstring equipmentids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipmentids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 counter = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_counter(&has_bits);
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lmdescriptionfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.LogicSchema.lmDescriptionFile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicSchema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LogicSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.wstring equipmentids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipmentids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_equipmentids(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 counter = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_counter(), target);
  }

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmdescriptionfile().data(), static_cast<int>(this->_internal_lmdescriptionfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.LogicSchema.lmDescriptionFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lmdescriptionfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LogicSchema)
  return target;
}

size_t LogicSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LogicSchema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.wstring equipmentids = 1;
  total_size += 1UL * this->_internal_equipmentids_size();
  for (const auto& msg : this->equipmentids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmdescriptionfile());
    }

    // optional int32 counter = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicSchema::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LogicSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicSchema* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicSchema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LogicSchema)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LogicSchema)
    MergeFrom(*source);
  }
}

void LogicSchema::MergeFrom(const LogicSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LogicSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equipmentids_.MergeFrom(from.equipmentids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lmdescriptionfile(from._internal_lmdescriptionfile());
    }
    if (cached_has_bits & 0x00000002u) {
      counter_ = from.counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogicSchema::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LogicSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicSchema::CopyFrom(const LogicSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LogicSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicSchema::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(equipmentids_)) return false;
  return true;
}

void LogicSchema::InternalSwap(LogicSchema* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equipmentids_.InternalSwap(&other->equipmentids_);
  lmdescriptionfile_.Swap(&other->lmdescriptionfile_, nullptr, GetArena());
  swap(counter_, other->counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicSchema::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UfbSchema::_Internal {
 public:
  using HasBits = decltype(std::declval<UfbSchema>()._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lmdescriptionfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_specific_properties_struct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString UfbSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_{{{"LogicModule0000.xml", 19}}, {nullptr}};
UfbSchema::UfbSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.UfbSchema)
}
UfbSchema::UfbSchema(const UfbSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  lmdescriptionfile_.UnsafeSetDefault(nullptr);
  if (from._internal_has_lmdescriptionfile()) {
    lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_lmdescriptionfile(), 
      GetArena());
  }
  specific_properties_struct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_specific_properties_struct()) {
    specific_properties_struct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specific_properties_struct(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:Proto.UfbSchema)
}

void UfbSchema::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmdescriptionfile_.UnsafeSetDefault(nullptr);
specific_properties_struct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 1;
}

UfbSchema::~UfbSchema() {
  // @@protoc_insertion_point(destructor:Proto.UfbSchema)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UfbSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmdescriptionfile_.DestroyNoArena(nullptr);
  specific_properties_struct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UfbSchema::ArenaDtor(void* object) {
  UfbSchema* _this = reinterpret_cast< UfbSchema* >(object);
  (void)_this;
}
void UfbSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UfbSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UfbSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.UfbSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lmdescriptionfile_.ClearToDefault(::Proto::UfbSchema::_i_give_permission_to_break_this_code_default_lmdescriptionfile_, GetArena());
       }
    if (cached_has_bits & 0x00000004u) {
      specific_properties_struct_.ClearNonDefaultToEmpty();
    }
    version_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UfbSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.UfbSchema.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lmdescriptionfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.UfbSchema.lmDescriptionFile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string specific_properties_struct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_specific_properties_struct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.UfbSchema.specific_properties_struct");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UfbSchema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.UfbSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.UfbSchema.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // optional int32 version = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmdescriptionfile().data(), static_cast<int>(this->_internal_lmdescriptionfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.UfbSchema.lmDescriptionFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lmdescriptionfile(), target);
  }

  // optional string specific_properties_struct = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_specific_properties_struct().data(), static_cast<int>(this->_internal_specific_properties_struct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.UfbSchema.specific_properties_struct");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_specific_properties_struct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.UfbSchema)
  return target;
}

size_t UfbSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.UfbSchema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmdescriptionfile());
    }

    // optional string specific_properties_struct = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specific_properties_struct());
    }

    // optional int32 version = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UfbSchema::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.UfbSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const UfbSchema* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UfbSchema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.UfbSchema)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.UfbSchema)
    MergeFrom(*source);
  }
}

void UfbSchema::MergeFrom(const UfbSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.UfbSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lmdescriptionfile(from._internal_lmdescriptionfile());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_specific_properties_struct(from._internal_specific_properties_struct());
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UfbSchema::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.UfbSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UfbSchema::CopyFrom(const UfbSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.UfbSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UfbSchema::IsInitialized() const {
  return true;
}

void UfbSchema::InternalSwap(UfbSchema* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmdescriptionfile_.Swap(&other->lmdescriptionfile_, nullptr, GetArena());
  specific_properties_struct_.Swap(&other->specific_properties_struct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UfbSchema::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaLayer>()._has_bits_);
  static const ::Proto::Uuid& uuid(const SchemaLayer* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::wstring& name(const SchemaLayer* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_print(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::Proto::Uuid&
SchemaLayer::_Internal::uuid(const SchemaLayer* msg) {
  return *msg->uuid_;
}
const ::Proto::wstring&
SchemaLayer::_Internal::name(const SchemaLayer* msg) {
  return *msg->name_;
}
SchemaLayer::SchemaLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaLayer)
}
SchemaLayer::SchemaLayer(const SchemaLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new ::Proto::wstring(*from.name_);
  } else {
    name_ = nullptr;
  }
  ::memcpy(&compile_, &from.compile_,
    static_cast<size_t>(reinterpret_cast<char*>(&print_) -
    reinterpret_cast<char*>(&compile_)) + sizeof(print_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaLayer)
}

void SchemaLayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&print_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(print_));
}

SchemaLayer::~SchemaLayer() {
  // @@protoc_insertion_point(destructor:Proto.SchemaLayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete name_;
}

void SchemaLayer::ArenaDtor(void* object) {
  SchemaLayer* _this = reinterpret_cast< SchemaLayer* >(object);
  (void)_this;
}
void SchemaLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
  }
  ::memset(&compile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&print_) -
      reinterpret_cast<char*>(&compile_)) + sizeof(print_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.Uuid uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool compile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_compile(&has_bits);
          compile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool show = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool print = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_print(&has_bits);
          print_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Envelope items = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Uuid uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // required .Proto.wstring name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name(this), target, stream);
  }

  // required bool compile = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_compile(), target);
  }

  // required bool show = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_show(), target);
  }

  // required bool print = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_print(), target);
  }

  // repeated .Proto.Envelope items = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaLayer)
  return target;
}

size_t SchemaLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SchemaLayer)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_name()) {
    // required .Proto.wstring name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (_internal_has_compile()) {
    // required bool compile = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_show()) {
    // required bool show = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_print()) {
    // required bool print = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SchemaLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaLayer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required .Proto.wstring name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);

    // required bool compile = 3;
    total_size += 1 + 1;

    // required bool show = 4;
    total_size += 1 + 1;

    // required bool print = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Envelope items = 15;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaLayer)
    MergeFrom(*source);
  }
}

void SchemaLayer::MergeFrom(const SchemaLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_name()->::Proto::wstring::MergeFrom(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      compile_ = from.compile_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_ = from.show_;
    }
    if (cached_has_bits & 0x00000010u) {
      print_ = from.print_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaLayer::CopyFrom(const SchemaLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaLayer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(items_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_name()) {
    if (!name_->IsInitialized()) return false;
  }
  return true;
}

void SchemaLayer::InternalSwap(SchemaLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaLayer, print_)
      + sizeof(SchemaLayer::print_)
      - PROTOBUF_FIELD_OFFSET(SchemaLayer, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItem>()._has_bits_);
  static const ::Proto::Uuid& uuid(const SchemaItem* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isstatic(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_islocked(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_itemunit(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_acceptclick(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_clickscript(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iscommented(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_objectname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_labelpos(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_predrawscript(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::PosRectImpl& posrectimpl(const SchemaItem* msg);
  static void set_has_posrectimpl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::PosLineImpl& poslineimpl(const SchemaItem* msg);
  static void set_has_poslineimpl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Proto::PosConnectionImpl& posconnectionimpl(const SchemaItem* msg);
  static void set_has_posconnectionimpl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::Proto::FblItem& fblitem(const SchemaItem* msg);
  static void set_has_fblitem(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Proto::FblItemRect& fblitemrect(const SchemaItem* msg);
  static void set_has_fblitemrect(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Proto::FblItemLine& fblitemline(const SchemaItem* msg);
  static void set_has_fblitemline(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::Proto::SchemaItemRect& rect(const SchemaItem* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Proto::SchemaItemLine& line(const SchemaItem* msg);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::Proto::SchemaItemPath& path(const SchemaItem* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::Proto::SchemaItemImage& image(const SchemaItem* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::Proto::SchemaItemFrame& frame(const SchemaItem* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::Proto::SchemaItemIndicator& indicator(const SchemaItem* msg);
  static void set_has_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::Proto::SchemaItemSignal& signal(const SchemaItem* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::Proto::SchemaItemInput& inputsignal(const SchemaItem* msg);
  static void set_has_inputsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::Proto::SchemaItemOutput& outputsignal(const SchemaItem* msg);
  static void set_has_outputsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::Proto::SchemaItemLink& link(const SchemaItem* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::Proto::SchemaItemAfb& afb(const SchemaItem* msg);
  static void set_has_afb(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::Proto::SchemaItemConst& constitem(const SchemaItem* msg);
  static void set_has_constitem(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::Proto::SchemaItemConnection& connectionitem(const SchemaItem* msg);
  static void set_has_connectionitem(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::Proto::SchemaItemTransmitter& transmitteritem(const SchemaItem* msg);
  static void set_has_transmitteritem(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::Proto::SchemaItemReceiver& receiveritem(const SchemaItem* msg);
  static void set_has_receiveritem(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::Proto::SchemaItemInOut& inoutsignal(const SchemaItem* msg);
  static void set_has_inoutsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::Proto::SchemaItemUfb& ufb(const SchemaItem* msg);
  static void set_has_ufb(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::Proto::SchemaItemTerminator& terminator(const SchemaItem* msg);
  static void set_has_terminator(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::Proto::SchemaItemValue& value(const SchemaItem* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::Proto::SchemaItemImageValue& imagevalue(const SchemaItem* msg);
  static void set_has_imagevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::Proto::SchemaItemBus& busitem(const SchemaItem* msg);
  static void set_has_busitem(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::Proto::SchemaItemBusComposer& buscomposer(const SchemaItem* msg);
  static void set_has_buscomposer(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::Proto::SchemaItemBusExtractor& busextractor(const SchemaItem* msg);
  static void set_has_busextractor(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::Proto::SchemaItemLoopback& loopbackitem(const SchemaItem* msg);
  static void set_has_loopbackitem(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::Proto::SchemaItemLoopbackSource& loopbacksource(const SchemaItem* msg);
  static void set_has_loopbacksource(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::Proto::SchemaItemLoopbackTarget& loopbacktarget(const SchemaItem* msg);
  static void set_has_loopbacktarget(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::Proto::SchemaItemControl& control(const SchemaItem* msg);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::Proto::SchemaItemPushButton& pushbutton(const SchemaItem* msg);
  static void set_has_pushbutton(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::Proto::SchemaItemLineEdit& lineedit(const SchemaItem* msg);
  static void set_has_lineedit(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x00000010) ^ 0x00000010)
       | ((has_bits[1] & 0x00000700) ^ 0x00000700)) != 0;
  }
};

const ::Proto::Uuid&
SchemaItem::_Internal::uuid(const SchemaItem* msg) {
  return *msg->uuid_;
}
const ::Proto::PosRectImpl&
SchemaItem::_Internal::posrectimpl(const SchemaItem* msg) {
  return *msg->posrectimpl_;
}
const ::Proto::PosLineImpl&
SchemaItem::_Internal::poslineimpl(const SchemaItem* msg) {
  return *msg->poslineimpl_;
}
const ::Proto::PosConnectionImpl&
SchemaItem::_Internal::posconnectionimpl(const SchemaItem* msg) {
  return *msg->posconnectionimpl_;
}
const ::Proto::FblItem&
SchemaItem::_Internal::fblitem(const SchemaItem* msg) {
  return *msg->fblitem_;
}
const ::Proto::FblItemRect&
SchemaItem::_Internal::fblitemrect(const SchemaItem* msg) {
  return *msg->fblitemrect_;
}
const ::Proto::FblItemLine&
SchemaItem::_Internal::fblitemline(const SchemaItem* msg) {
  return *msg->fblitemline_;
}
const ::Proto::SchemaItemRect&
SchemaItem::_Internal::rect(const SchemaItem* msg) {
  return *msg->rect_;
}
const ::Proto::SchemaItemLine&
SchemaItem::_Internal::line(const SchemaItem* msg) {
  return *msg->line_;
}
const ::Proto::SchemaItemPath&
SchemaItem::_Internal::path(const SchemaItem* msg) {
  return *msg->path_;
}
const ::Proto::SchemaItemImage&
SchemaItem::_Internal::image(const SchemaItem* msg) {
  return *msg->image_;
}
const ::Proto::SchemaItemFrame&
SchemaItem::_Internal::frame(const SchemaItem* msg) {
  return *msg->frame_;
}
const ::Proto::SchemaItemIndicator&
SchemaItem::_Internal::indicator(const SchemaItem* msg) {
  return *msg->indicator_;
}
const ::Proto::SchemaItemSignal&
SchemaItem::_Internal::signal(const SchemaItem* msg) {
  return *msg->signal_;
}
const ::Proto::SchemaItemInput&
SchemaItem::_Internal::inputsignal(const SchemaItem* msg) {
  return *msg->inputsignal_;
}
const ::Proto::SchemaItemOutput&
SchemaItem::_Internal::outputsignal(const SchemaItem* msg) {
  return *msg->outputsignal_;
}
const ::Proto::SchemaItemLink&
SchemaItem::_Internal::link(const SchemaItem* msg) {
  return *msg->link_;
}
const ::Proto::SchemaItemAfb&
SchemaItem::_Internal::afb(const SchemaItem* msg) {
  return *msg->afb_;
}
const ::Proto::SchemaItemConst&
SchemaItem::_Internal::constitem(const SchemaItem* msg) {
  return *msg->constitem_;
}
const ::Proto::SchemaItemConnection&
SchemaItem::_Internal::connectionitem(const SchemaItem* msg) {
  return *msg->connectionitem_;
}
const ::Proto::SchemaItemTransmitter&
SchemaItem::_Internal::transmitteritem(const SchemaItem* msg) {
  return *msg->transmitteritem_;
}
const ::Proto::SchemaItemReceiver&
SchemaItem::_Internal::receiveritem(const SchemaItem* msg) {
  return *msg->receiveritem_;
}
const ::Proto::SchemaItemInOut&
SchemaItem::_Internal::inoutsignal(const SchemaItem* msg) {
  return *msg->inoutsignal_;
}
const ::Proto::SchemaItemUfb&
SchemaItem::_Internal::ufb(const SchemaItem* msg) {
  return *msg->ufb_;
}
const ::Proto::SchemaItemTerminator&
SchemaItem::_Internal::terminator(const SchemaItem* msg) {
  return *msg->terminator_;
}
const ::Proto::SchemaItemValue&
SchemaItem::_Internal::value(const SchemaItem* msg) {
  return *msg->value_;
}
const ::Proto::SchemaItemImageValue&
SchemaItem::_Internal::imagevalue(const SchemaItem* msg) {
  return *msg->imagevalue_;
}
const ::Proto::SchemaItemBus&
SchemaItem::_Internal::busitem(const SchemaItem* msg) {
  return *msg->busitem_;
}
const ::Proto::SchemaItemBusComposer&
SchemaItem::_Internal::buscomposer(const SchemaItem* msg) {
  return *msg->buscomposer_;
}
const ::Proto::SchemaItemBusExtractor&
SchemaItem::_Internal::busextractor(const SchemaItem* msg) {
  return *msg->busextractor_;
}
const ::Proto::SchemaItemLoopback&
SchemaItem::_Internal::loopbackitem(const SchemaItem* msg) {
  return *msg->loopbackitem_;
}
const ::Proto::SchemaItemLoopbackSource&
SchemaItem::_Internal::loopbacksource(const SchemaItem* msg) {
  return *msg->loopbacksource_;
}
const ::Proto::SchemaItemLoopbackTarget&
SchemaItem::_Internal::loopbacktarget(const SchemaItem* msg) {
  return *msg->loopbacktarget_;
}
const ::Proto::SchemaItemControl&
SchemaItem::_Internal::control(const SchemaItem* msg) {
  return *msg->control_;
}
const ::Proto::SchemaItemPushButton&
SchemaItem::_Internal::pushbutton(const SchemaItem* msg) {
  return *msg->pushbutton_;
}
const ::Proto::SchemaItemLineEdit&
SchemaItem::_Internal::lineedit(const SchemaItem* msg) {
  return *msg->lineedit_;
}
SchemaItem::SchemaItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItem)
}
SchemaItem::SchemaItem(const SchemaItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clickscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clickscript()) {
    clickscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clickscript(), 
      GetArena());
  }
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_objectname()) {
    objectname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_objectname(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  predrawscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_predrawscript()) {
    predrawscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_predrawscript(), 
      GetArena());
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_posrectimpl()) {
    posrectimpl_ = new ::Proto::PosRectImpl(*from.posrectimpl_);
  } else {
    posrectimpl_ = nullptr;
  }
  if (from._internal_has_poslineimpl()) {
    poslineimpl_ = new ::Proto::PosLineImpl(*from.poslineimpl_);
  } else {
    poslineimpl_ = nullptr;
  }
  if (from._internal_has_posconnectionimpl()) {
    posconnectionimpl_ = new ::Proto::PosConnectionImpl(*from.posconnectionimpl_);
  } else {
    posconnectionimpl_ = nullptr;
  }
  if (from._internal_has_fblitem()) {
    fblitem_ = new ::Proto::FblItem(*from.fblitem_);
  } else {
    fblitem_ = nullptr;
  }
  if (from._internal_has_fblitemrect()) {
    fblitemrect_ = new ::Proto::FblItemRect(*from.fblitemrect_);
  } else {
    fblitemrect_ = nullptr;
  }
  if (from._internal_has_fblitemline()) {
    fblitemline_ = new ::Proto::FblItemLine(*from.fblitemline_);
  } else {
    fblitemline_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::Proto::SchemaItemRect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_line()) {
    line_ = new ::Proto::SchemaItemLine(*from.line_);
  } else {
    line_ = nullptr;
  }
  if (from._internal_has_path()) {
    path_ = new ::Proto::SchemaItemPath(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::Proto::SchemaItemImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::Proto::SchemaItemFrame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_indicator()) {
    indicator_ = new ::Proto::SchemaItemIndicator(*from.indicator_);
  } else {
    indicator_ = nullptr;
  }
  if (from._internal_has_signal()) {
    signal_ = new ::Proto::SchemaItemSignal(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from._internal_has_inputsignal()) {
    inputsignal_ = new ::Proto::SchemaItemInput(*from.inputsignal_);
  } else {
    inputsignal_ = nullptr;
  }
  if (from._internal_has_outputsignal()) {
    outputsignal_ = new ::Proto::SchemaItemOutput(*from.outputsignal_);
  } else {
    outputsignal_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::Proto::SchemaItemLink(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_afb()) {
    afb_ = new ::Proto::SchemaItemAfb(*from.afb_);
  } else {
    afb_ = nullptr;
  }
  if (from._internal_has_constitem()) {
    constitem_ = new ::Proto::SchemaItemConst(*from.constitem_);
  } else {
    constitem_ = nullptr;
  }
  if (from._internal_has_connectionitem()) {
    connectionitem_ = new ::Proto::SchemaItemConnection(*from.connectionitem_);
  } else {
    connectionitem_ = nullptr;
  }
  if (from._internal_has_transmitteritem()) {
    transmitteritem_ = new ::Proto::SchemaItemTransmitter(*from.transmitteritem_);
  } else {
    transmitteritem_ = nullptr;
  }
  if (from._internal_has_receiveritem()) {
    receiveritem_ = new ::Proto::SchemaItemReceiver(*from.receiveritem_);
  } else {
    receiveritem_ = nullptr;
  }
  if (from._internal_has_inoutsignal()) {
    inoutsignal_ = new ::Proto::SchemaItemInOut(*from.inoutsignal_);
  } else {
    inoutsignal_ = nullptr;
  }
  if (from._internal_has_ufb()) {
    ufb_ = new ::Proto::SchemaItemUfb(*from.ufb_);
  } else {
    ufb_ = nullptr;
  }
  if (from._internal_has_terminator()) {
    terminator_ = new ::Proto::SchemaItemTerminator(*from.terminator_);
  } else {
    terminator_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::Proto::SchemaItemValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_imagevalue()) {
    imagevalue_ = new ::Proto::SchemaItemImageValue(*from.imagevalue_);
  } else {
    imagevalue_ = nullptr;
  }
  if (from._internal_has_busitem()) {
    busitem_ = new ::Proto::SchemaItemBus(*from.busitem_);
  } else {
    busitem_ = nullptr;
  }
  if (from._internal_has_buscomposer()) {
    buscomposer_ = new ::Proto::SchemaItemBusComposer(*from.buscomposer_);
  } else {
    buscomposer_ = nullptr;
  }
  if (from._internal_has_busextractor()) {
    busextractor_ = new ::Proto::SchemaItemBusExtractor(*from.busextractor_);
  } else {
    busextractor_ = nullptr;
  }
  if (from._internal_has_loopbackitem()) {
    loopbackitem_ = new ::Proto::SchemaItemLoopback(*from.loopbackitem_);
  } else {
    loopbackitem_ = nullptr;
  }
  if (from._internal_has_loopbacksource()) {
    loopbacksource_ = new ::Proto::SchemaItemLoopbackSource(*from.loopbacksource_);
  } else {
    loopbacksource_ = nullptr;
  }
  if (from._internal_has_loopbacktarget()) {
    loopbacktarget_ = new ::Proto::SchemaItemLoopbackTarget(*from.loopbacktarget_);
  } else {
    loopbacktarget_ = nullptr;
  }
  if (from._internal_has_control()) {
    control_ = new ::Proto::SchemaItemControl(*from.control_);
  } else {
    control_ = nullptr;
  }
  if (from._internal_has_pushbutton()) {
    pushbutton_ = new ::Proto::SchemaItemPushButton(*from.pushbutton_);
  } else {
    pushbutton_ = nullptr;
  }
  if (from._internal_has_lineedit()) {
    lineedit_ = new ::Proto::SchemaItemLineEdit(*from.lineedit_);
  } else {
    lineedit_ = nullptr;
  }
  ::memcpy(&itemunit_, &from.itemunit_,
    static_cast<size_t>(reinterpret_cast<char*>(&labelpos_) -
    reinterpret_cast<char*>(&itemunit_)) + sizeof(labelpos_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItem)
}

void SchemaItem::SharedCtor() {
clickscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
predrawscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscommented_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(iscommented_));
labelpos_ = 2;
}

SchemaItem::~SchemaItem() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clickscript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predrawscript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete posrectimpl_;
  if (this != internal_default_instance()) delete poslineimpl_;
  if (this != internal_default_instance()) delete posconnectionimpl_;
  if (this != internal_default_instance()) delete fblitem_;
  if (this != internal_default_instance()) delete fblitemrect_;
  if (this != internal_default_instance()) delete fblitemline_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete line_;
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete indicator_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete inputsignal_;
  if (this != internal_default_instance()) delete outputsignal_;
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete afb_;
  if (this != internal_default_instance()) delete constitem_;
  if (this != internal_default_instance()) delete connectionitem_;
  if (this != internal_default_instance()) delete transmitteritem_;
  if (this != internal_default_instance()) delete receiveritem_;
  if (this != internal_default_instance()) delete inoutsignal_;
  if (this != internal_default_instance()) delete ufb_;
  if (this != internal_default_instance()) delete terminator_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete imagevalue_;
  if (this != internal_default_instance()) delete busitem_;
  if (this != internal_default_instance()) delete buscomposer_;
  if (this != internal_default_instance()) delete busextractor_;
  if (this != internal_default_instance()) delete loopbackitem_;
  if (this != internal_default_instance()) delete loopbacksource_;
  if (this != internal_default_instance()) delete loopbacktarget_;
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete pushbutton_;
  if (this != internal_default_instance()) delete lineedit_;
}

void SchemaItem::ArenaDtor(void* object) {
  SchemaItem* _this = reinterpret_cast< SchemaItem* >(object);
  (void)_this;
}
void SchemaItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      clickscript_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      objectname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      predrawscript_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(posrectimpl_ != nullptr);
      posrectimpl_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(poslineimpl_ != nullptr);
      poslineimpl_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(posconnectionimpl_ != nullptr);
      posconnectionimpl_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(fblitem_ != nullptr);
      fblitem_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(fblitemrect_ != nullptr);
      fblitemrect_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(fblitemline_ != nullptr);
      fblitemline_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(line_ != nullptr);
      line_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(path_ != nullptr);
      path_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(image_ != nullptr);
      image_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(indicator_ != nullptr);
      indicator_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(signal_ != nullptr);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(inputsignal_ != nullptr);
      inputsignal_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(outputsignal_ != nullptr);
      outputsignal_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(link_ != nullptr);
      link_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(afb_ != nullptr);
      afb_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(constitem_ != nullptr);
      constitem_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(connectionitem_ != nullptr);
      connectionitem_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(transmitteritem_ != nullptr);
      transmitteritem_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(receiveritem_ != nullptr);
      receiveritem_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(inoutsignal_ != nullptr);
      inoutsignal_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(ufb_ != nullptr);
      ufb_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(terminator_ != nullptr);
      terminator_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(imagevalue_ != nullptr);
      imagevalue_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(busitem_ != nullptr);
      busitem_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(buscomposer_ != nullptr);
      buscomposer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(busextractor_ != nullptr);
      busextractor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(loopbackitem_ != nullptr);
      loopbackitem_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(loopbacksource_ != nullptr);
      loopbacksource_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(loopbacktarget_ != nullptr);
      loopbacktarget_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(control_ != nullptr);
      control_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(pushbutton_ != nullptr);
      pushbutton_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(lineedit_ != nullptr);
      lineedit_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&itemunit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iscommented_) -
        reinterpret_cast<char*>(&itemunit_)) + sizeof(iscommented_));
    labelpos_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.Uuid uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isStatic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isstatic(&_has_bits_);
          isstatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isLocked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_islocked(&_has_bits_);
          islocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.SchemaUnit itemUnit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::SchemaUnit_IsValid(val))) {
            _internal_set_itemunit(static_cast<::Proto::SchemaUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool acceptClick = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_acceptclick(&_has_bits_);
          acceptclick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clickScript = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_clickscript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItem.clickScript");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isCommented = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_iscommented(&_has_bits_);
          iscommented_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string objectName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_objectname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItem.objectName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.PosRectImpl PosRectImpl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_posrectimpl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.PosLineImpl PosLineImpl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_poslineimpl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_posconnectionimpl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItem.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 labelPos = 15 [default = 2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_labelpos(&_has_bits_);
          labelpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preDrawScript = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_predrawscript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItem.preDrawScript");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblItem FblItem = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fblitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblItemRect FblItemRect = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fblitemrect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FblItemLine FblItemLine = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_fblitemline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemRect Rect = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemLine Line = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemPath Path = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemImage Image = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemFrame Frame = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemIndicator Indicator = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_indicator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemSignal Signal = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemInput InputSignal = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputsignal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemOutput OutputSignal = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_outputsignal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemLink Link = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemAfb Afb = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_afb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemConst ConstItem = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_constitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemConnection ConnectionItem = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connectionitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmitteritem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiveritem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemInOut InOutSignal = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inoutsignal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemUfb ufb = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ufb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemTerminator terminator = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_terminator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemValue Value = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemImageValue ImageValue = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagevalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemBus BusItem = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_busitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemBusComposer BusComposer = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_buscomposer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_busextractor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_loopbackitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_loopbacksource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_loopbacktarget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemControl control = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemPushButton pushButton = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushbutton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.SchemaItemLineEdit lineEdit = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_lineedit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Uuid uuid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required bool isStatic = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isstatic(), target);
  }

  // required bool isLocked = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_islocked(), target);
  }

  // required .Proto.SchemaUnit itemUnit = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_itemunit(), target);
  }

  // optional bool acceptClick = 5 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_acceptclick(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string clickScript = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clickscript().data(), static_cast<int>(this->_internal_clickscript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItem.clickScript");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_clickscript(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool isCommented = 8 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_iscommented(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string objectName = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_objectname().data(), static_cast<int>(this->_internal_objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItem.objectName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_objectname(), target);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::posrectimpl(this), target, stream);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::poslineimpl(this), target, stream);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::posconnectionimpl(this), target, stream);
  }

  // optional string label = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItem.label");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_label(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 labelPos = 15 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_labelpos(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string preDrawScript = 30;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_predrawscript().data(), static_cast<int>(this->_internal_predrawscript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItem.preDrawScript");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_predrawscript(), target);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::fblitem(this), target, stream);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::fblitemrect(this), target, stream);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::fblitemline(this), target, stream);
  }

  // optional .Proto.SchemaItemRect Rect = 116;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::rect(this), target, stream);
  }

  // optional .Proto.SchemaItemLine Line = 117;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::line(this), target, stream);
  }

  // optional .Proto.SchemaItemPath Path = 118;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        118, _Internal::path(this), target, stream);
  }

  // optional .Proto.SchemaItemImage Image = 119;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        119, _Internal::image(this), target, stream);
  }

  // optional .Proto.SchemaItemFrame Frame = 120;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        120, _Internal::frame(this), target, stream);
  }

  // optional .Proto.SchemaItemIndicator Indicator = 121;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        121, _Internal::indicator(this), target, stream);
  }

  // optional .Proto.SchemaItemSignal Signal = 124;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        124, _Internal::signal(this), target, stream);
  }

  // optional .Proto.SchemaItemInput InputSignal = 125;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        125, _Internal::inputsignal(this), target, stream);
  }

  // optional .Proto.SchemaItemOutput OutputSignal = 126;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        126, _Internal::outputsignal(this), target, stream);
  }

  // optional .Proto.SchemaItemLink Link = 127;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        127, _Internal::link(this), target, stream);
  }

  // optional .Proto.SchemaItemAfb Afb = 128;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        128, _Internal::afb(this), target, stream);
  }

  // optional .Proto.SchemaItemConst ConstItem = 129;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        129, _Internal::constitem(this), target, stream);
  }

  // optional .Proto.SchemaItemConnection ConnectionItem = 130;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::connectionitem(this), target, stream);
  }

  // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        131, _Internal::transmitteritem(this), target, stream);
  }

  // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        132, _Internal::receiveritem(this), target, stream);
  }

  // optional .Proto.SchemaItemInOut InOutSignal = 133;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        133, _Internal::inoutsignal(this), target, stream);
  }

  // optional .Proto.SchemaItemUfb ufb = 134;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::ufb(this), target, stream);
  }

  // optional .Proto.SchemaItemTerminator terminator = 135;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        135, _Internal::terminator(this), target, stream);
  }

  // optional .Proto.SchemaItemValue Value = 136;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        136, _Internal::value(this), target, stream);
  }

  // optional .Proto.SchemaItemImageValue ImageValue = 137;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        137, _Internal::imagevalue(this), target, stream);
  }

  // optional .Proto.SchemaItemBus BusItem = 150;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        150, _Internal::busitem(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .Proto.SchemaItemBusComposer BusComposer = 151;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        151, _Internal::buscomposer(this), target, stream);
  }

  // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        152, _Internal::busextractor(this), target, stream);
  }

  // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        155, _Internal::loopbackitem(this), target, stream);
  }

  // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        156, _Internal::loopbacksource(this), target, stream);
  }

  // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        157, _Internal::loopbacktarget(this), target, stream);
  }

  // optional .Proto.SchemaItemControl control = 200;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::control(this), target, stream);
  }

  // optional .Proto.SchemaItemPushButton pushButton = 210;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        210, _Internal::pushbutton(this), target, stream);
  }

  // optional .Proto.SchemaItemLineEdit lineEdit = 211;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        211, _Internal::lineedit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItem)
  return target;
}

size_t SchemaItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SchemaItem)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_itemunit()) {
    // required .Proto.SchemaUnit itemUnit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemunit());
  }

  if (_internal_has_isstatic()) {
    // required bool isStatic = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_islocked()) {
    // required bool isLocked = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SchemaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItem)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0x00000010) ^ 0x00000010)
       | ((_has_bits_[1] & 0x00000700) ^ 0x00000700)) == 0) {  // All required fields are present.
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required .Proto.SchemaUnit itemUnit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemunit());

    // required bool isStatic = 2;
    total_size += 1 + 1;

    // required bool isLocked = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string clickScript = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clickscript());
    }

    // optional string objectName = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_objectname());
    }

    // optional string label = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string preDrawScript = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_predrawscript());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .Proto.PosRectImpl PosRectImpl = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *posrectimpl_);
    }

    // optional .Proto.PosLineImpl PosLineImpl = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poslineimpl_);
    }

    // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *posconnectionimpl_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .Proto.FblItem FblItem = 106;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fblitem_);
    }

    // optional .Proto.FblItemRect FblItemRect = 107;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fblitemrect_);
    }

    // optional .Proto.FblItemLine FblItemLine = 108;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fblitemline_);
    }

    // optional .Proto.SchemaItemRect Rect = 116;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .Proto.SchemaItemLine Line = 117;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *line_);
    }

    // optional .Proto.SchemaItemPath Path = 118;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_);
    }

    // optional .Proto.SchemaItemImage Image = 119;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

    // optional .Proto.SchemaItemFrame Frame = 120;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .Proto.SchemaItemIndicator Indicator = 121;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *indicator_);
    }

    // optional .Proto.SchemaItemSignal Signal = 124;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .Proto.SchemaItemInput InputSignal = 125;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inputsignal_);
    }

    // optional .Proto.SchemaItemOutput OutputSignal = 126;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outputsignal_);
    }

    // optional .Proto.SchemaItemLink Link = 127;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *link_);
    }

    // optional .Proto.SchemaItemAfb Afb = 128;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *afb_);
    }

    // optional .Proto.SchemaItemConst ConstItem = 129;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constitem_);
    }

    // optional .Proto.SchemaItemConnection ConnectionItem = 130;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connectionitem_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transmitteritem_);
    }

    // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receiveritem_);
    }

    // optional .Proto.SchemaItemInOut InOutSignal = 133;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inoutsignal_);
    }

    // optional .Proto.SchemaItemUfb ufb = 134;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ufb_);
    }

    // optional .Proto.SchemaItemTerminator terminator = 135;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *terminator_);
    }

    // optional .Proto.SchemaItemValue Value = 136;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .Proto.SchemaItemImageValue ImageValue = 137;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imagevalue_);
    }

    // optional .Proto.SchemaItemBus BusItem = 150;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *busitem_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .Proto.SchemaItemBusComposer BusComposer = 151;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *buscomposer_);
    }

    // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *busextractor_);
    }

    // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loopbackitem_);
    }

    // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loopbacksource_);
    }

    // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loopbacktarget_);
    }

    // optional .Proto.SchemaItemControl control = 200;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_);
    }

    // optional .Proto.SchemaItemPushButton pushButton = 210;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pushbutton_);
    }

    // optional .Proto.SchemaItemLineEdit lineEdit = 211;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lineedit_);
    }

  }
  if (cached_has_bits & 0x00003800u) {
    // optional bool acceptClick = 5 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool isCommented = 8 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 labelPos = 15 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_labelpos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItem)
    MergeFrom(*source);
  }
}

void SchemaItem::MergeFrom(const SchemaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clickscript(from._internal_clickscript());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_objectname(from._internal_objectname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_predrawscript(from._internal_predrawscript());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_posrectimpl()->::Proto::PosRectImpl::MergeFrom(from._internal_posrectimpl());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_poslineimpl()->::Proto::PosLineImpl::MergeFrom(from._internal_poslineimpl());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_posconnectionimpl()->::Proto::PosConnectionImpl::MergeFrom(from._internal_posconnectionimpl());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_fblitem()->::Proto::FblItem::MergeFrom(from._internal_fblitem());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_fblitemrect()->::Proto::FblItemRect::MergeFrom(from._internal_fblitemrect());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_fblitemline()->::Proto::FblItemLine::MergeFrom(from._internal_fblitemline());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_rect()->::Proto::SchemaItemRect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_line()->::Proto::SchemaItemLine::MergeFrom(from._internal_line());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_path()->::Proto::SchemaItemPath::MergeFrom(from._internal_path());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_image()->::Proto::SchemaItemImage::MergeFrom(from._internal_image());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_frame()->::Proto::SchemaItemFrame::MergeFrom(from._internal_frame());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_indicator()->::Proto::SchemaItemIndicator::MergeFrom(from._internal_indicator());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_signal()->::Proto::SchemaItemSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_inputsignal()->::Proto::SchemaItemInput::MergeFrom(from._internal_inputsignal());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_outputsignal()->::Proto::SchemaItemOutput::MergeFrom(from._internal_outputsignal());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_link()->::Proto::SchemaItemLink::MergeFrom(from._internal_link());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_afb()->::Proto::SchemaItemAfb::MergeFrom(from._internal_afb());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_constitem()->::Proto::SchemaItemConst::MergeFrom(from._internal_constitem());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_connectionitem()->::Proto::SchemaItemConnection::MergeFrom(from._internal_connectionitem());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_transmitteritem()->::Proto::SchemaItemTransmitter::MergeFrom(from._internal_transmitteritem());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_receiveritem()->::Proto::SchemaItemReceiver::MergeFrom(from._internal_receiveritem());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_inoutsignal()->::Proto::SchemaItemInOut::MergeFrom(from._internal_inoutsignal());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_ufb()->::Proto::SchemaItemUfb::MergeFrom(from._internal_ufb());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_terminator()->::Proto::SchemaItemTerminator::MergeFrom(from._internal_terminator());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_value()->::Proto::SchemaItemValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_imagevalue()->::Proto::SchemaItemImageValue::MergeFrom(from._internal_imagevalue());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_busitem()->::Proto::SchemaItemBus::MergeFrom(from._internal_busitem());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_buscomposer()->::Proto::SchemaItemBusComposer::MergeFrom(from._internal_buscomposer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_busextractor()->::Proto::SchemaItemBusExtractor::MergeFrom(from._internal_busextractor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_loopbackitem()->::Proto::SchemaItemLoopback::MergeFrom(from._internal_loopbackitem());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_loopbacksource()->::Proto::SchemaItemLoopbackSource::MergeFrom(from._internal_loopbacksource());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_loopbacktarget()->::Proto::SchemaItemLoopbackTarget::MergeFrom(from._internal_loopbacktarget());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_control()->::Proto::SchemaItemControl::MergeFrom(from._internal_control());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_pushbutton()->::Proto::SchemaItemPushButton::MergeFrom(from._internal_pushbutton());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_lineedit()->::Proto::SchemaItemLineEdit::MergeFrom(from._internal_lineedit());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      itemunit_ = from.itemunit_;
    }
    if (cached_has_bits & 0x00000200u) {
      isstatic_ = from.isstatic_;
    }
    if (cached_has_bits & 0x00000400u) {
      islocked_ = from.islocked_;
    }
    if (cached_has_bits & 0x00000800u) {
      acceptclick_ = from.acceptclick_;
    }
    if (cached_has_bits & 0x00001000u) {
      iscommented_ = from.iscommented_;
    }
    if (cached_has_bits & 0x00002000u) {
      labelpos_ = from.labelpos_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SchemaItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItem::CopyFrom(const SchemaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_posrectimpl()) {
    if (!posrectimpl_->IsInitialized()) return false;
  }
  if (_internal_has_poslineimpl()) {
    if (!poslineimpl_->IsInitialized()) return false;
  }
  if (_internal_has_posconnectionimpl()) {
    if (!posconnectionimpl_->IsInitialized()) return false;
  }
  if (_internal_has_fblitem()) {
    if (!fblitem_->IsInitialized()) return false;
  }
  if (_internal_has_fblitemrect()) {
    if (!fblitemrect_->IsInitialized()) return false;
  }
  if (_internal_has_fblitemline()) {
    if (!fblitemline_->IsInitialized()) return false;
  }
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_line()) {
    if (!line_->IsInitialized()) return false;
  }
  if (_internal_has_path()) {
    if (!path_->IsInitialized()) return false;
  }
  if (_internal_has_indicator()) {
    if (!indicator_->IsInitialized()) return false;
  }
  if (_internal_has_signal()) {
    if (!signal_->IsInitialized()) return false;
  }
  if (_internal_has_afb()) {
    if (!afb_->IsInitialized()) return false;
  }
  if (_internal_has_ufb()) {
    if (!ufb_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  if (_internal_has_busitem()) {
    if (!busitem_->IsInitialized()) return false;
  }
  if (_internal_has_busextractor()) {
    if (!busextractor_->IsInitialized()) return false;
  }
  return true;
}

void SchemaItem::InternalSwap(SchemaItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  clickscript_.Swap(&other->clickscript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  objectname_.Swap(&other->objectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  predrawscript_.Swap(&other->predrawscript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItem, iscommented_)
      + sizeof(SchemaItem::iscommented_)
      - PROTOBUF_FIELD_OFFSET(SchemaItem, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
  swap(labelpos_, other->labelpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosRectImpl::_Internal {
 public:
  using HasBits = decltype(std::declval<PosRectImpl>()._has_bits_);
  static void set_has_leftdocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_topdocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_widthdocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heightdocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PosRectImpl::PosRectImpl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.PosRectImpl)
}
PosRectImpl::PosRectImpl(const PosRectImpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leftdocpt_, &from.leftdocpt_,
    static_cast<size_t>(reinterpret_cast<char*>(&heightdocpt_) -
    reinterpret_cast<char*>(&leftdocpt_)) + sizeof(heightdocpt_));
  // @@protoc_insertion_point(copy_constructor:Proto.PosRectImpl)
}

void PosRectImpl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leftdocpt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heightdocpt_) -
    reinterpret_cast<char*>(&leftdocpt_)) + sizeof(heightdocpt_));
}

PosRectImpl::~PosRectImpl() {
  // @@protoc_insertion_point(destructor:Proto.PosRectImpl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosRectImpl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PosRectImpl::ArenaDtor(void* object) {
  PosRectImpl* _this = reinterpret_cast< PosRectImpl* >(object);
  (void)_this;
}
void PosRectImpl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosRectImpl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosRectImpl::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PosRectImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&leftdocpt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heightdocpt_) -
        reinterpret_cast<char*>(&leftdocpt_)) + sizeof(heightdocpt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosRectImpl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double leftDocPt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_leftdocpt(&has_bits);
          leftdocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double topDocPt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_topdocpt(&has_bits);
          topdocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double widthDocPt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_widthdocpt(&has_bits);
          widthdocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double heightDocPt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heightdocpt(&has_bits);
          heightdocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosRectImpl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PosRectImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double leftDocPt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_leftdocpt(), target);
  }

  // required double topDocPt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_topdocpt(), target);
  }

  // required double widthDocPt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_widthdocpt(), target);
  }

  // required double heightDocPt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heightdocpt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PosRectImpl)
  return target;
}

size_t PosRectImpl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.PosRectImpl)
  size_t total_size = 0;

  if (_internal_has_leftdocpt()) {
    // required double leftDocPt = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_topdocpt()) {
    // required double topDocPt = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_widthdocpt()) {
    // required double widthDocPt = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_heightdocpt()) {
    // required double heightDocPt = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PosRectImpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PosRectImpl)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double leftDocPt = 1;
    total_size += 1 + 8;

    // required double topDocPt = 2;
    total_size += 1 + 8;

    // required double widthDocPt = 3;
    total_size += 1 + 8;

    // required double heightDocPt = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosRectImpl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PosRectImpl)
  GOOGLE_DCHECK_NE(&from, this);
  const PosRectImpl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosRectImpl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PosRectImpl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PosRectImpl)
    MergeFrom(*source);
  }
}

void PosRectImpl::MergeFrom(const PosRectImpl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PosRectImpl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      leftdocpt_ = from.leftdocpt_;
    }
    if (cached_has_bits & 0x00000002u) {
      topdocpt_ = from.topdocpt_;
    }
    if (cached_has_bits & 0x00000004u) {
      widthdocpt_ = from.widthdocpt_;
    }
    if (cached_has_bits & 0x00000008u) {
      heightdocpt_ = from.heightdocpt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PosRectImpl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PosRectImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosRectImpl::CopyFrom(const PosRectImpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PosRectImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosRectImpl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PosRectImpl::InternalSwap(PosRectImpl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosRectImpl, heightdocpt_)
      + sizeof(PosRectImpl::heightdocpt_)
      - PROTOBUF_FIELD_OFFSET(PosRectImpl, leftdocpt_)>(
          reinterpret_cast<char*>(&leftdocpt_),
          reinterpret_cast<char*>(&other->leftdocpt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosRectImpl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosLineImpl::_Internal {
 public:
  using HasBits = decltype(std::declval<PosLineImpl>()._has_bits_);
  static void set_has_startxdocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startydocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endxdocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endydocpt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PosLineImpl::PosLineImpl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.PosLineImpl)
}
PosLineImpl::PosLineImpl(const PosLineImpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startxdocpt_, &from.startxdocpt_,
    static_cast<size_t>(reinterpret_cast<char*>(&endydocpt_) -
    reinterpret_cast<char*>(&startxdocpt_)) + sizeof(endydocpt_));
  // @@protoc_insertion_point(copy_constructor:Proto.PosLineImpl)
}

void PosLineImpl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startxdocpt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endydocpt_) -
    reinterpret_cast<char*>(&startxdocpt_)) + sizeof(endydocpt_));
}

PosLineImpl::~PosLineImpl() {
  // @@protoc_insertion_point(destructor:Proto.PosLineImpl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosLineImpl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PosLineImpl::ArenaDtor(void* object) {
  PosLineImpl* _this = reinterpret_cast< PosLineImpl* >(object);
  (void)_this;
}
void PosLineImpl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosLineImpl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosLineImpl::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PosLineImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&startxdocpt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endydocpt_) -
        reinterpret_cast<char*>(&startxdocpt_)) + sizeof(endydocpt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosLineImpl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double startXDocPt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_startxdocpt(&has_bits);
          startxdocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startYDocPt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_startydocpt(&has_bits);
          startydocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endXDocPt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_endxdocpt(&has_bits);
          endxdocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endYDocPt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_endydocpt(&has_bits);
          endydocpt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosLineImpl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PosLineImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double startXDocPt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_startxdocpt(), target);
  }

  // required double startYDocPt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_startydocpt(), target);
  }

  // required double endXDocPt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_endxdocpt(), target);
  }

  // required double endYDocPt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_endydocpt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PosLineImpl)
  return target;
}

size_t PosLineImpl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.PosLineImpl)
  size_t total_size = 0;

  if (_internal_has_startxdocpt()) {
    // required double startXDocPt = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_startydocpt()) {
    // required double startYDocPt = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_endxdocpt()) {
    // required double endXDocPt = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_endydocpt()) {
    // required double endYDocPt = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PosLineImpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PosLineImpl)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double startXDocPt = 1;
    total_size += 1 + 8;

    // required double startYDocPt = 2;
    total_size += 1 + 8;

    // required double endXDocPt = 3;
    total_size += 1 + 8;

    // required double endYDocPt = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosLineImpl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PosLineImpl)
  GOOGLE_DCHECK_NE(&from, this);
  const PosLineImpl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosLineImpl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PosLineImpl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PosLineImpl)
    MergeFrom(*source);
  }
}

void PosLineImpl::MergeFrom(const PosLineImpl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PosLineImpl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      startxdocpt_ = from.startxdocpt_;
    }
    if (cached_has_bits & 0x00000002u) {
      startydocpt_ = from.startydocpt_;
    }
    if (cached_has_bits & 0x00000004u) {
      endxdocpt_ = from.endxdocpt_;
    }
    if (cached_has_bits & 0x00000008u) {
      endydocpt_ = from.endydocpt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PosLineImpl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PosLineImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosLineImpl::CopyFrom(const PosLineImpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PosLineImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosLineImpl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PosLineImpl::InternalSwap(PosLineImpl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosLineImpl, endydocpt_)
      + sizeof(PosLineImpl::endydocpt_)
      - PROTOBUF_FIELD_OFFSET(PosLineImpl, startxdocpt_)>(
          reinterpret_cast<char*>(&startxdocpt_),
          reinterpret_cast<char*>(&other->startxdocpt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosLineImpl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosConnectionImpl::_Internal {
 public:
};

PosConnectionImpl::PosConnectionImpl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.PosConnectionImpl)
}
PosConnectionImpl::PosConnectionImpl(const PosConnectionImpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.PosConnectionImpl)
}

void PosConnectionImpl::SharedCtor() {
}

PosConnectionImpl::~PosConnectionImpl() {
  // @@protoc_insertion_point(destructor:Proto.PosConnectionImpl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosConnectionImpl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PosConnectionImpl::ArenaDtor(void* object) {
  PosConnectionImpl* _this = reinterpret_cast< PosConnectionImpl* >(object);
  (void)_this;
}
void PosConnectionImpl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosConnectionImpl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosConnectionImpl::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PosConnectionImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosConnectionImpl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.SchemaPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosConnectionImpl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PosConnectionImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.SchemaPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PosConnectionImpl)
  return target;
}

size_t PosConnectionImpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PosConnectionImpl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.SchemaPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosConnectionImpl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PosConnectionImpl)
  GOOGLE_DCHECK_NE(&from, this);
  const PosConnectionImpl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosConnectionImpl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PosConnectionImpl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PosConnectionImpl)
    MergeFrom(*source);
  }
}

void PosConnectionImpl::MergeFrom(const PosConnectionImpl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PosConnectionImpl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void PosConnectionImpl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PosConnectionImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosConnectionImpl::CopyFrom(const PosConnectionImpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PosConnectionImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosConnectionImpl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  return true;
}

void PosConnectionImpl::InternalSwap(PosConnectionImpl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PosConnectionImpl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemRect::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemRect>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fillcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::wstring& text(const SchemaItemRect* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_textcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::FontParam& font(const SchemaItemRect* msg);
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_drawrect(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_horzalign(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vertalign(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wordwrap(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_linestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::Proto::wstring&
SchemaItemRect::_Internal::text(const SchemaItemRect* msg) {
  return *msg->text_;
}
const ::Proto::FontParam&
SchemaItemRect::_Internal::font(const SchemaItemRect* msg) {
  return *msg->font_;
}
SchemaItemRect::SchemaItemRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemRect)
}
SchemaItemRect::SchemaItemRect(const SchemaItemRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text()) {
    text_ = new ::Proto::wstring(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_font()) {
    font_ = new ::Proto::FontParam(*from.font_);
  } else {
    font_ = nullptr;
  }
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&linestyle_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linestyle_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemRect)
}

void SchemaItemRect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wordwrap_) -
    reinterpret_cast<char*>(&text_)) + sizeof(wordwrap_));
drawrect_ = true;
horzalign_ = 4;
vertalign_ = 128;
linestyle_ = 1;
}

SchemaItemRect::~SchemaItemRect() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete font_;
}

void SchemaItemRect::ArenaDtor(void* object) {
  SchemaItemRect* _this = reinterpret_cast< SchemaItemRect* >(object);
  (void)_this;
}
void SchemaItemRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemRect::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(text_ != nullptr);
      text_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(font_ != nullptr);
      font_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wordwrap_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(wordwrap_));
  }
  if (cached_has_bits & 0x00000f00u) {
    drawrect_ = true;
    horzalign_ = 4;
    vertalign_ = 128;
    linestyle_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 lineColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fillColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fillcolor(&has_bits);
          fillcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 textColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_textcolor(&has_bits);
          textcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.FontParam font = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_font(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool fill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fill(&has_bits);
          fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawrect = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_drawrect(&has_bits);
          drawrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 horzAlign = 9 [default = 4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_horzalign(&has_bits);
          horzalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vertAlign = 10 [default = 128];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_vertalign(&has_bits);
          vertalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wordWrap = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_wordwrap(&has_bits);
          wordwrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineStyle = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_linestyle(&has_bits);
          linestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double weight = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // required uint32 lineColor = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fillcolor(), target);
  }

  // required .Proto.wstring text = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text(this), target, stream);
  }

  // required uint32 textColor = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_textcolor(), target);
  }

  // required .Proto.FontParam font = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::font(this), target, stream);
  }

  // required bool fill = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_fill(), target);
  }

  // optional bool drawrect = 8 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_drawrect(), target);
  }

  // optional int32 horzAlign = 9 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_horzalign(), target);
  }

  // optional int32 vertAlign = 10 [default = 128];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_vertalign(), target);
  }

  // optional bool wordWrap = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_wordwrap(), target);
  }

  // optional int32 lineStyle = 12 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_linestyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemRect)
  return target;
}

size_t SchemaItemRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SchemaItemRect)
  size_t total_size = 0;

  if (_internal_has_text()) {
    // required .Proto.wstring text = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  if (_internal_has_font()) {
    // required .Proto.FontParam font = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *font_);
  }

  if (_internal_has_weight()) {
    // required double weight = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_linecolor()) {
    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());
  }

  if (_internal_has_fillcolor()) {
    // required uint32 fillColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fillcolor());
  }

  if (_internal_has_textcolor()) {
    // required uint32 textColor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_textcolor());
  }

  if (_internal_has_fill()) {
    // required bool fill = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SchemaItemRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemRect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .Proto.wstring text = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);

    // required .Proto.FontParam font = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *font_);

    // required double weight = 1;
    total_size += 1 + 8;

    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());

    // required uint32 fillColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fillcolor());

    // required uint32 textColor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_textcolor());

    // required bool fill = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool wordWrap = 11 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00000f00u) {
    // optional bool drawrect = 8 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 horzAlign = 9 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_horzalign());
    }

    // optional int32 vertAlign = 10 [default = 128];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertalign());
    }

    // optional int32 lineStyle = 12 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linestyle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemRect)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemRect)
    MergeFrom(*source);
  }
}

void SchemaItemRect::MergeFrom(const SchemaItemRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_text()->::Proto::wstring::MergeFrom(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_font()->::Proto::FontParam::MergeFrom(from._internal_font());
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000010u) {
      fillcolor_ = from.fillcolor_;
    }
    if (cached_has_bits & 0x00000020u) {
      textcolor_ = from.textcolor_;
    }
    if (cached_has_bits & 0x00000040u) {
      fill_ = from.fill_;
    }
    if (cached_has_bits & 0x00000080u) {
      wordwrap_ = from.wordwrap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      drawrect_ = from.drawrect_;
    }
    if (cached_has_bits & 0x00000200u) {
      horzalign_ = from.horzalign_;
    }
    if (cached_has_bits & 0x00000400u) {
      vertalign_ = from.vertalign_;
    }
    if (cached_has_bits & 0x00000800u) {
      linestyle_ = from.linestyle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemRect::CopyFrom(const SchemaItemRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemRect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_text()) {
    if (!text_->IsInitialized()) return false;
  }
  if (_internal_has_font()) {
    if (!font_->IsInitialized()) return false;
  }
  return true;
}

void SchemaItemRect::InternalSwap(SchemaItemRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemRect, wordwrap_)
      + sizeof(SchemaItemRect::wordwrap_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemRect, text_)>(
          reinterpret_cast<char*>(&text_),
          reinterpret_cast<char*>(&other->text_));
  swap(drawrect_, other->drawrect_);
  swap(horzalign_, other->horzalign_);
  swap(vertalign_, other->vertalign_);
  swap(linestyle_, other->linestyle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemLine::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemLine>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_linestylecap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_linecapstart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linecapend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_linecapfactor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SchemaItemLine::SchemaItemLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemLine)
}
SchemaItemLine::SchemaItemLine(const SchemaItemLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&linecapfactor_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linecapfactor_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemLine)
}

void SchemaItemLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linecapend_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linecapend_));
linestyle_ = 1;
linestylecap_ = 16;
linecapfactor_ = 2;
}

SchemaItemLine::~SchemaItemLine() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemLine::ArenaDtor(void* object) {
  SchemaItemLine* _this = reinterpret_cast< SchemaItemLine* >(object);
  (void)_this;
}
void SchemaItemLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemLine::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linecapend_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(linecapend_));
    linestyle_ = 1;
    linestylecap_ = 16;
    linecapfactor_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 lineColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineStyle = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_linestyle(&has_bits);
          linestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineCapStart = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_linecapstart(&has_bits);
          linecapstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineCapEnd = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_linecapend(&has_bits);
          linecapend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lineCapFactor = 6 [default = 2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_linecapfactor(&has_bits);
          linecapfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 lineStyleCap = 7 [default = 16];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_linestylecap(&has_bits);
          linestylecap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // required uint32 lineColor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linecolor(), target);
  }

  // optional int32 lineStyle = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_linestyle(), target);
  }

  // optional int32 lineCapStart = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_linecapstart(), target);
  }

  // optional int32 lineCapEnd = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_linecapend(), target);
  }

  // optional double lineCapFactor = 6 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_linecapfactor(), target);
  }

  // optional int32 lineStyleCap = 7 [default = 16];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_linestylecap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemLine)
  return target;
}

size_t SchemaItemLine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SchemaItemLine)
  size_t total_size = 0;

  if (_internal_has_weight()) {
    // required double weight = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_linecolor()) {
    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());
  }

  return total_size;
}
size_t SchemaItemLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemLine)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double weight = 1;
    total_size += 1 + 8;

    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional int32 lineCapStart = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linecapstart());
    }

    // optional int32 lineCapEnd = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linecapend());
    }

    // optional int32 lineStyle = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linestyle());
    }

    // optional int32 lineStyleCap = 7 [default = 16];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linestylecap());
    }

    // optional double lineCapFactor = 6 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemLine)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemLine)
    MergeFrom(*source);
  }
}

void SchemaItemLine::MergeFrom(const SchemaItemLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000004u) {
      linecapstart_ = from.linecapstart_;
    }
    if (cached_has_bits & 0x00000008u) {
      linecapend_ = from.linecapend_;
    }
    if (cached_has_bits & 0x00000010u) {
      linestyle_ = from.linestyle_;
    }
    if (cached_has_bits & 0x00000020u) {
      linestylecap_ = from.linestylecap_;
    }
    if (cached_has_bits & 0x00000040u) {
      linecapfactor_ = from.linecapfactor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLine::CopyFrom(const SchemaItemLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLine::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SchemaItemLine::InternalSwap(SchemaItemLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemLine, linecapend_)
      + sizeof(SchemaItemLine::linecapend_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemLine, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
  swap(linestyle_, other->linestyle_);
  swap(linestylecap_, other->linestylecap_);
  swap(linecapfactor_, other->linecapfactor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemPath::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemPath>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_linestylecap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_linecapstart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linecapend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_linecapfactor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SchemaItemPath::SchemaItemPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemPath)
}
SchemaItemPath::SchemaItemPath(const SchemaItemPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&linecapfactor_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linecapfactor_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemPath)
}

void SchemaItemPath::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linecapend_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linecapend_));
linestyle_ = 1;
linestylecap_ = 16;
linecapfactor_ = 2;
}

SchemaItemPath::~SchemaItemPath() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemPath::ArenaDtor(void* object) {
  SchemaItemPath* _this = reinterpret_cast< SchemaItemPath* >(object);
  (void)_this;
}
void SchemaItemPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemPath::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linecapend_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(linecapend_));
    linestyle_ = 1;
    linestylecap_ = 16;
    linecapfactor_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 lineColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineStyle = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_linestyle(&has_bits);
          linestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineCapStart = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_linecapstart(&has_bits);
          linecapstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineCapEnd = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_linecapend(&has_bits);
          linecapend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lineCapFactor = 6 [default = 2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_linecapfactor(&has_bits);
          linecapfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 lineStyleCap = 7 [default = 16];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_linestylecap(&has_bits);
          linestylecap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // required uint32 lineColor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linecolor(), target);
  }

  // optional int32 lineStyle = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_linestyle(), target);
  }

  // optional int32 lineCapStart = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_linecapstart(), target);
  }

  // optional int32 lineCapEnd = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_linecapend(), target);
  }

  // optional double lineCapFactor = 6 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_linecapfactor(), target);
  }

  // optional int32 lineStyleCap = 7 [default = 16];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_linestylecap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemPath)
  return target;
}

size_t SchemaItemPath::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SchemaItemPath)
  size_t total_size = 0;

  if (_internal_has_weight()) {
    // required double weight = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_linecolor()) {
    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());
  }

  return total_size;
}
size_t SchemaItemPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemPath)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double weight = 1;
    total_size += 1 + 8;

    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional int32 lineCapStart = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linecapstart());
    }

    // optional int32 lineCapEnd = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linecapend());
    }

    // optional int32 lineStyle = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linestyle());
    }

    // optional int32 lineStyleCap = 7 [default = 16];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linestylecap());
    }

    // optional double lineCapFactor = 6 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemPath)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemPath)
    MergeFrom(*source);
  }
}

void SchemaItemPath::MergeFrom(const SchemaItemPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000004u) {
      linecapstart_ = from.linecapstart_;
    }
    if (cached_has_bits & 0x00000008u) {
      linecapend_ = from.linecapend_;
    }
    if (cached_has_bits & 0x00000010u) {
      linestyle_ = from.linestyle_;
    }
    if (cached_has_bits & 0x00000020u) {
      linestylecap_ = from.linestylecap_;
    }
    if (cached_has_bits & 0x00000040u) {
      linecapfactor_ = from.linecapfactor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemPath::CopyFrom(const SchemaItemPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemPath::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SchemaItemPath::InternalSwap(SchemaItemPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemPath, linecapend_)
      + sizeof(SchemaItemPath::linecapend_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemPath, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
  swap(linestyle_, other->linestyle_);
  swap(linestylecap_, other->linestylecap_);
  swap(linecapfactor_, other->linecapfactor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemImage::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemImage>()._has_bits_);
  static const ::Proto::ImageItem& image(const SchemaItemImage* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Proto::ImageItem&
SchemaItemImage::_Internal::image(const SchemaItemImage* msg) {
  return *msg->image_;
}
SchemaItemImage::SchemaItemImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemImage)
}
SchemaItemImage::SchemaItemImage(const SchemaItemImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::Proto::ImageItem(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemImage)
}

void SchemaItemImage::SharedCtor() {
image_ = nullptr;
}

SchemaItemImage::~SchemaItemImage() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void SchemaItemImage::ArenaDtor(void* object) {
  SchemaItemImage* _this = reinterpret_cast< SchemaItemImage* >(object);
  (void)_this;
}
void SchemaItemImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemImage::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(image_ != nullptr);
    image_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.ImageItem image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.ImageItem image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemImage)
  return target;
}

size_t SchemaItemImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Proto.ImageItem image = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemImage)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemImage)
    MergeFrom(*source);
  }
}

void SchemaItemImage::MergeFrom(const SchemaItemImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::Proto::ImageItem::MergeFrom(from._internal_image());
  }
}

void SchemaItemImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemImage::CopyFrom(const SchemaItemImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemImage::IsInitialized() const {
  return true;
}

void SchemaItemImage::InternalSwap(SchemaItemImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemFrame>()._has_bits_);
  static void set_has_schemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowscale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keepaspectratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SchemaItemFrame::_i_give_permission_to_break_this_code_default_schemaid_{{{"SCHEMAID", 8}}, {nullptr}};
SchemaItemFrame::SchemaItemFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemFrame)
}
SchemaItemFrame::SchemaItemFrame(const SchemaItemFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schemaid_.UnsafeSetDefault(nullptr);
  if (from._internal_has_schemaid()) {
    schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_schemaid(), 
      GetArena());
  }
  ::memcpy(&allowscale_, &from.allowscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&keepaspectratio_) -
    reinterpret_cast<char*>(&allowscale_)) + sizeof(keepaspectratio_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemFrame)
}

void SchemaItemFrame::SharedCtor() {
schemaid_.UnsafeSetDefault(nullptr);
allowscale_ = true;
keepaspectratio_ = true;
}

SchemaItemFrame::~SchemaItemFrame() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  schemaid_.DestroyNoArena(nullptr);
}

void SchemaItemFrame::ArenaDtor(void* object) {
  SchemaItemFrame* _this = reinterpret_cast< SchemaItemFrame* >(object);
  (void)_this;
}
void SchemaItemFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      schemaid_.ClearToDefault(::Proto::SchemaItemFrame::_i_give_permission_to_break_this_code_default_schemaid_, GetArena());
       }
    allowscale_ = true;
    keepaspectratio_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string schemaId = 1 [default = "SCHEMAID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_schemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemFrame.schemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allowScale = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allowscale(&has_bits);
          allowscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keepAspectRatio = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_keepaspectratio(&has_bits);
          keepaspectratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string schemaId = 1 [default = "SCHEMAID"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_schemaid().data(), static_cast<int>(this->_internal_schemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemFrame.schemaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_schemaid(), target);
  }

  // optional bool allowScale = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allowscale(), target);
  }

  // optional bool keepAspectRatio = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_keepaspectratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemFrame)
  return target;
}

size_t SchemaItemFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string schemaId = 1 [default = "SCHEMAID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_schemaid());
    }

    // optional bool allowScale = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool keepAspectRatio = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemFrame)
    MergeFrom(*source);
  }
}

void SchemaItemFrame::MergeFrom(const SchemaItemFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_schemaid(from._internal_schemaid());
    }
    if (cached_has_bits & 0x00000002u) {
      allowscale_ = from.allowscale_;
    }
    if (cached_has_bits & 0x00000004u) {
      keepaspectratio_ = from.keepaspectratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemFrame::CopyFrom(const SchemaItemFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemFrame::IsInitialized() const {
  return true;
}

void SchemaItemFrame::InternalSwap(SchemaItemFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  schemaid_.Swap(&other->schemaid_, nullptr, GetArena());
  swap(allowscale_, other->allowscale_);
  swap(keepaspectratio_, other->keepaspectratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VFrameSetPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<VFrameSetPoint>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_colorsource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outputappsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VFrameSetPoint::VFrameSetPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.VFrameSetPoint)
}
VFrameSetPoint::VFrameSetPoint(const VFrameSetPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outputappsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_outputappsignalid()) {
    outputappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputappsignalid(), 
      GetArena());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorsource_) -
    reinterpret_cast<char*>(&color_)) + sizeof(colorsource_));
  // @@protoc_insertion_point(copy_constructor:Proto.VFrameSetPoint)
}

void VFrameSetPoint::SharedCtor() {
outputappsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&colorsource_) -
    reinterpret_cast<char*>(&color_)) + sizeof(colorsource_));
}

VFrameSetPoint::~VFrameSetPoint() {
  // @@protoc_insertion_point(destructor:Proto.VFrameSetPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VFrameSetPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  outputappsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VFrameSetPoint::ArenaDtor(void* object) {
  VFrameSetPoint* _this = reinterpret_cast< VFrameSetPoint* >(object);
  (void)_this;
}
void VFrameSetPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VFrameSetPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VFrameSetPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.VFrameSetPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    outputappsignalid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colorsource_) -
        reinterpret_cast<char*>(&color_)) + sizeof(colorsource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VFrameSetPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 colorSource = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_colorsource(&has_bits);
          colorsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string outputAppSignalId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_outputappsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.VFrameSetPoint.outputAppSignalId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VFrameSetPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.VFrameSetPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color(), target);
  }

  // optional int32 colorSource = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_colorsource(), target);
  }

  // optional string outputAppSignalId = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_outputappsignalid().data(), static_cast<int>(this->_internal_outputappsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.VFrameSetPoint.outputAppSignalId");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_outputappsignalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.VFrameSetPoint)
  return target;
}

size_t VFrameSetPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.VFrameSetPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string outputAppSignalId = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_outputappsignalid());
    }

    // optional uint32 color = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional int32 colorSource = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_colorsource());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VFrameSetPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.VFrameSetPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VFrameSetPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VFrameSetPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.VFrameSetPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.VFrameSetPoint)
    MergeFrom(*source);
  }
}

void VFrameSetPoint::MergeFrom(const VFrameSetPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.VFrameSetPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_outputappsignalid(from._internal_outputappsignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      colorsource_ = from.colorsource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VFrameSetPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.VFrameSetPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFrameSetPoint::CopyFrom(const VFrameSetPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.VFrameSetPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFrameSetPoint::IsInitialized() const {
  return true;
}

void VFrameSetPoint::InternalSwap(VFrameSetPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outputappsignalid_.Swap(&other->outputappsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VFrameSetPoint, colorsource_)
      + sizeof(VFrameSetPoint::colorsource_)
      - PROTOBUF_FIELD_OFFSET(VFrameSetPoint, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VFrameSetPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndicatorHistogramVert::_Internal {
 public:
  using HasBits = decltype(std::declval<IndicatorHistogramVert>()._has_bits_);
  static void set_has_startvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_barwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leftmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_topmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rightmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bottommargin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_drawbarrect(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_drawgrid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_drawgridforallbars(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_drawgridvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_drawgridvalueforallbars(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_drawgridvalueunits(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lineargridmainstep(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lineargridsmallstep(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_logarithmicgridmainstep(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_logarithmicgridsmallstep(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_drawsetpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scaletype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

IndicatorHistogramVert::IndicatorHistogramVert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  customsetpoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.IndicatorHistogramVert)
}
IndicatorHistogramVert::IndicatorHistogramVert(const IndicatorHistogramVert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      customsetpoints_(from.customsetpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startvalue_, &from.startvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&logarithmicgridsmallstep_) -
    reinterpret_cast<char*>(&startvalue_)) + sizeof(logarithmicgridsmallstep_));
  // @@protoc_insertion_point(copy_constructor:Proto.IndicatorHistogramVert)
}

void IndicatorHistogramVert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drawsetpoints_) -
    reinterpret_cast<char*>(&startvalue_)) + sizeof(drawsetpoints_));
drawbarrect_ = true;
drawgrid_ = true;
drawgridvalues_ = true;
drawgridvalueunits_ = true;
lineargridmainstep_ = 50;
lineargridsmallstep_ = 10;
logarithmicgridmainstep_ = 1;
logarithmicgridsmallstep_ = 0.5;
}

IndicatorHistogramVert::~IndicatorHistogramVert() {
  // @@protoc_insertion_point(destructor:Proto.IndicatorHistogramVert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndicatorHistogramVert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndicatorHistogramVert::ArenaDtor(void* object) {
  IndicatorHistogramVert* _this = reinterpret_cast< IndicatorHistogramVert* >(object);
  (void)_this;
}
void IndicatorHistogramVert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndicatorHistogramVert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndicatorHistogramVert::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.IndicatorHistogramVert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customsetpoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&startvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottommargin_) -
        reinterpret_cast<char*>(&startvalue_)) + sizeof(bottommargin_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&drawgridforallbars_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drawsetpoints_) -
        reinterpret_cast<char*>(&drawgridforallbars_)) + sizeof(drawsetpoints_));
    drawbarrect_ = true;
    drawgrid_ = true;
    drawgridvalues_ = true;
    drawgridvalueunits_ = true;
    lineargridmainstep_ = 50;
  }
  if (cached_has_bits & 0x00070000u) {
    lineargridsmallstep_ = 10;
    logarithmicgridmainstep_ = 1;
    logarithmicgridsmallstep_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndicatorHistogramVert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double startValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_startvalue(&has_bits);
          startvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_endvalue(&has_bits);
          endvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double barWidth = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_barwidth(&has_bits);
          barwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double leftMargin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_leftmargin(&has_bits);
          leftmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double topMargin = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_topmargin(&has_bits);
          topmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rightMargin = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_rightmargin(&has_bits);
          rightmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bottomMargin = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_bottommargin(&has_bits);
          bottommargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool drawBarRect = 32 [default = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_drawbarrect(&has_bits);
          drawbarrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawGrid = 40 [default = true];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_drawgrid(&has_bits);
          drawgrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawGridForAllBars = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_drawgridforallbars(&has_bits);
          drawgridforallbars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawGridValues = 42 [default = true];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_drawgridvalues(&has_bits);
          drawgridvalues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawGridValueForAllBars = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_drawgridvalueforallbars(&has_bits);
          drawgridvalueforallbars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawGridValueUnits = 44 [default = true];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_drawgridvalueunits(&has_bits);
          drawgridvalueunits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double linearGridMainStep = 50 [default = 50];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lineargridmainstep(&has_bits);
          lineargridmainstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double linearGridSmallStep = 51 [default = 10];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_lineargridsmallstep(&has_bits);
          lineargridsmallstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double logarithmicGridMainStep = 52 [default = 1];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_logarithmicgridmainstep(&has_bits);
          logarithmicgridmainstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double logarithmicGridSmallStep = 53 [default = 0.5];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_logarithmicgridsmallstep(&has_bits);
          logarithmicgridsmallstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 drawSetpoints = 70 [default = 0];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_drawsetpoints(&has_bits);
          drawsetpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.VFrameSetPoint customSetPoints = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_customsetpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<578>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 scaleType = 75 [default = 0];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_scaletype(&has_bits);
          scaletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndicatorHistogramVert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.IndicatorHistogramVert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double startValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_startvalue(), target);
  }

  // optional double endValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_endvalue(), target);
  }

  // optional double barWidth = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_barwidth(), target);
  }

  // optional double leftMargin = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_leftmargin(), target);
  }

  // optional double topMargin = 21;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_topmargin(), target);
  }

  // optional double rightMargin = 22;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_rightmargin(), target);
  }

  // optional double bottomMargin = 23;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_bottommargin(), target);
  }

  // optional bool drawBarRect = 32 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_drawbarrect(), target);
  }

  // optional bool drawGrid = 40 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_drawgrid(), target);
  }

  // optional bool drawGridForAllBars = 41 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_drawgridforallbars(), target);
  }

  // optional bool drawGridValues = 42 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_drawgridvalues(), target);
  }

  // optional bool drawGridValueForAllBars = 43 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_drawgridvalueforallbars(), target);
  }

  // optional bool drawGridValueUnits = 44 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_drawgridvalueunits(), target);
  }

  // optional double linearGridMainStep = 50 [default = 50];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_lineargridmainstep(), target);
  }

  // optional double linearGridSmallStep = 51 [default = 10];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_lineargridsmallstep(), target);
  }

  // optional double logarithmicGridMainStep = 52 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(52, this->_internal_logarithmicgridmainstep(), target);
  }

  // optional double logarithmicGridSmallStep = 53 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(53, this->_internal_logarithmicgridsmallstep(), target);
  }

  // optional int32 drawSetpoints = 70 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_drawsetpoints(), target);
  }

  // repeated .Proto.VFrameSetPoint customSetPoints = 72;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_customsetpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, this->_internal_customsetpoints(i), target, stream);
  }

  // optional int32 scaleType = 75 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(75, this->_internal_scaletype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.IndicatorHistogramVert)
  return target;
}

size_t IndicatorHistogramVert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.IndicatorHistogramVert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.VFrameSetPoint customSetPoints = 72;
  total_size += 2UL * this->_internal_customsetpoints_size();
  for (const auto& msg : this->customsetpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double startValue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double endValue = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double barWidth = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double leftMargin = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double topMargin = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional int32 scaleType = 75 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scaletype());
    }

    // optional double rightMargin = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double bottomMargin = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool drawGridForAllBars = 41 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool drawGridValueForAllBars = 43 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int32 drawSetpoints = 70 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_drawsetpoints());
    }

    // optional bool drawBarRect = 32 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool drawGrid = 40 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool drawGridValues = 42 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool drawGridValueUnits = 44 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional double linearGridMainStep = 50 [default = 50];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional double linearGridSmallStep = 51 [default = 10];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double logarithmicGridMainStep = 52 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double logarithmicGridSmallStep = 53 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndicatorHistogramVert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.IndicatorHistogramVert)
  GOOGLE_DCHECK_NE(&from, this);
  const IndicatorHistogramVert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndicatorHistogramVert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.IndicatorHistogramVert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.IndicatorHistogramVert)
    MergeFrom(*source);
  }
}

void IndicatorHistogramVert::MergeFrom(const IndicatorHistogramVert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.IndicatorHistogramVert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  customsetpoints_.MergeFrom(from.customsetpoints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      startvalue_ = from.startvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      endvalue_ = from.endvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      barwidth_ = from.barwidth_;
    }
    if (cached_has_bits & 0x00000008u) {
      leftmargin_ = from.leftmargin_;
    }
    if (cached_has_bits & 0x00000010u) {
      topmargin_ = from.topmargin_;
    }
    if (cached_has_bits & 0x00000020u) {
      scaletype_ = from.scaletype_;
    }
    if (cached_has_bits & 0x00000040u) {
      rightmargin_ = from.rightmargin_;
    }
    if (cached_has_bits & 0x00000080u) {
      bottommargin_ = from.bottommargin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      drawgridforallbars_ = from.drawgridforallbars_;
    }
    if (cached_has_bits & 0x00000200u) {
      drawgridvalueforallbars_ = from.drawgridvalueforallbars_;
    }
    if (cached_has_bits & 0x00000400u) {
      drawsetpoints_ = from.drawsetpoints_;
    }
    if (cached_has_bits & 0x00000800u) {
      drawbarrect_ = from.drawbarrect_;
    }
    if (cached_has_bits & 0x00001000u) {
      drawgrid_ = from.drawgrid_;
    }
    if (cached_has_bits & 0x00002000u) {
      drawgridvalues_ = from.drawgridvalues_;
    }
    if (cached_has_bits & 0x00004000u) {
      drawgridvalueunits_ = from.drawgridvalueunits_;
    }
    if (cached_has_bits & 0x00008000u) {
      lineargridmainstep_ = from.lineargridmainstep_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      lineargridsmallstep_ = from.lineargridsmallstep_;
    }
    if (cached_has_bits & 0x00020000u) {
      logarithmicgridmainstep_ = from.logarithmicgridmainstep_;
    }
    if (cached_has_bits & 0x00040000u) {
      logarithmicgridsmallstep_ = from.logarithmicgridsmallstep_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndicatorHistogramVert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.IndicatorHistogramVert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndicatorHistogramVert::CopyFrom(const IndicatorHistogramVert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.IndicatorHistogramVert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicatorHistogramVert::IsInitialized() const {
  return true;
}

void IndicatorHistogramVert::InternalSwap(IndicatorHistogramVert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  customsetpoints_.InternalSwap(&other->customsetpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndicatorHistogramVert, drawsetpoints_)
      + sizeof(IndicatorHistogramVert::drawsetpoints_)
      - PROTOBUF_FIELD_OFFSET(IndicatorHistogramVert, startvalue_)>(
          reinterpret_cast<char*>(&startvalue_),
          reinterpret_cast<char*>(&other->startvalue_));
  swap(drawbarrect_, other->drawbarrect_);
  swap(drawgrid_, other->drawgrid_);
  swap(drawgridvalues_, other->drawgridvalues_);
  swap(drawgridvalueunits_, other->drawgridvalueunits_);
  swap(lineargridmainstep_, other->lineargridmainstep_);
  swap(lineargridsmallstep_, other->lineargridsmallstep_);
  swap(logarithmicgridmainstep_, other->logarithmicgridmainstep_);
  swap(logarithmicgridsmallstep_, other->logarithmicgridsmallstep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicatorHistogramVert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndicatorArrowIndicator::_Internal {
 public:
  using HasBits = decltype(std::declval<IndicatorArrowIndicator>()._has_bits_);
  static void set_has_startvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spanangle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

IndicatorArrowIndicator::IndicatorArrowIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.IndicatorArrowIndicator)
}
IndicatorArrowIndicator::IndicatorArrowIndicator(const IndicatorArrowIndicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startvalue_, &from.startvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&spanangle_) -
    reinterpret_cast<char*>(&startvalue_)) + sizeof(spanangle_));
  // @@protoc_insertion_point(copy_constructor:Proto.IndicatorArrowIndicator)
}

void IndicatorArrowIndicator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spanangle_) -
    reinterpret_cast<char*>(&startvalue_)) + sizeof(spanangle_));
}

IndicatorArrowIndicator::~IndicatorArrowIndicator() {
  // @@protoc_insertion_point(destructor:Proto.IndicatorArrowIndicator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndicatorArrowIndicator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndicatorArrowIndicator::ArenaDtor(void* object) {
  IndicatorArrowIndicator* _this = reinterpret_cast< IndicatorArrowIndicator* >(object);
  (void)_this;
}
void IndicatorArrowIndicator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndicatorArrowIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndicatorArrowIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.IndicatorArrowIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&startvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spanangle_) -
        reinterpret_cast<char*>(&startvalue_)) + sizeof(spanangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndicatorArrowIndicator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double startValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_startvalue(&has_bits);
          startvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_endvalue(&has_bits);
          endvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double startAngle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_startangle(&has_bits);
          startangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double spanAngle = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_spanangle(&has_bits);
          spanangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndicatorArrowIndicator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.IndicatorArrowIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double startValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_startvalue(), target);
  }

  // optional double endValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_endvalue(), target);
  }

  // optional double startAngle = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_startangle(), target);
  }

  // optional double spanAngle = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_spanangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.IndicatorArrowIndicator)
  return target;
}

size_t IndicatorArrowIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.IndicatorArrowIndicator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double startValue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double endValue = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double startAngle = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double spanAngle = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndicatorArrowIndicator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.IndicatorArrowIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const IndicatorArrowIndicator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndicatorArrowIndicator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.IndicatorArrowIndicator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.IndicatorArrowIndicator)
    MergeFrom(*source);
  }
}

void IndicatorArrowIndicator::MergeFrom(const IndicatorArrowIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.IndicatorArrowIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      startvalue_ = from.startvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      endvalue_ = from.endvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      startangle_ = from.startangle_;
    }
    if (cached_has_bits & 0x00000008u) {
      spanangle_ = from.spanangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndicatorArrowIndicator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.IndicatorArrowIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndicatorArrowIndicator::CopyFrom(const IndicatorArrowIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.IndicatorArrowIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicatorArrowIndicator::IsInitialized() const {
  return true;
}

void IndicatorArrowIndicator::InternalSwap(IndicatorArrowIndicator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndicatorArrowIndicator, spanangle_)
      + sizeof(IndicatorArrowIndicator::spanangle_)
      - PROTOBUF_FIELD_OFFSET(IndicatorArrowIndicator, startvalue_)>(
          reinterpret_cast<char*>(&startvalue_),
          reinterpret_cast<char*>(&other->startvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicatorArrowIndicator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemIndicator::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemIndicator>()._has_bits_);
  static void set_has_signalids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signalsource(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_analogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Proto::FontParam& font(const SchemaItemIndicator* msg);
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drawrect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lineweight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_backgroundcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::Proto::IndicatorHistogramVert& indicatorhistogramvert(const SchemaItemIndicator* msg);
  static void set_has_indicatorhistogramvert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::IndicatorArrowIndicator& indicatorarrowindicator(const SchemaItemIndicator* msg);
  static void set_has_indicatorarrowindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Proto::FontParam&
SchemaItemIndicator::_Internal::font(const SchemaItemIndicator* msg) {
  return *msg->font_;
}
const ::Proto::IndicatorHistogramVert&
SchemaItemIndicator::_Internal::indicatorhistogramvert(const SchemaItemIndicator* msg) {
  return *msg->indicatorhistogramvert_;
}
const ::Proto::IndicatorArrowIndicator&
SchemaItemIndicator::_Internal::indicatorarrowindicator(const SchemaItemIndicator* msg) {
  return *msg->indicatorarrowindicator_;
}
SchemaItemIndicator::SchemaItemIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalcolors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemIndicator)
}
SchemaItemIndicator::SchemaItemIndicator(const SchemaItemIndicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signalcolors_(from.signalcolors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signalids()) {
    signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signalids(), 
      GetArena());
  }
  if (from._internal_has_font()) {
    font_ = new ::Proto::FontParam(*from.font_);
  } else {
    font_ = nullptr;
  }
  if (from._internal_has_indicatorhistogramvert()) {
    indicatorhistogramvert_ = new ::Proto::IndicatorHistogramVert(*from.indicatorhistogramvert_);
  } else {
    indicatorhistogramvert_ = nullptr;
  }
  if (from._internal_has_indicatorarrowindicator()) {
    indicatorarrowindicator_ = new ::Proto::IndicatorArrowIndicator(*from.indicatorarrowindicator_);
  } else {
    indicatorarrowindicator_ = nullptr;
  }
  ::memcpy(&signalsource_, &from.signalsource_,
    static_cast<size_t>(reinterpret_cast<char*>(&analogformat_) -
    reinterpret_cast<char*>(&signalsource_)) + sizeof(analogformat_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemIndicator)
}

void SchemaItemIndicator::SharedCtor() {
signalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&font_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linecolor_) -
    reinterpret_cast<char*>(&font_)) + sizeof(linecolor_));
precision_ = 2;
analogformat_ = 102;
}

SchemaItemIndicator::~SchemaItemIndicator() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemIndicator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemIndicator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signalids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete font_;
  if (this != internal_default_instance()) delete indicatorhistogramvert_;
  if (this != internal_default_instance()) delete indicatorarrowindicator_;
}

void SchemaItemIndicator::ArenaDtor(void* object) {
  SchemaItemIndicator* _this = reinterpret_cast< SchemaItemIndicator* >(object);
  (void)_this;
}
void SchemaItemIndicator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalcolors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      signalids_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(font_ != nullptr);
      font_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(indicatorhistogramvert_ != nullptr);
      indicatorhistogramvert_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(indicatorarrowindicator_ != nullptr);
      indicatorarrowindicator_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&signalsource_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&signalsource_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&backgroundcolor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linecolor_) -
        reinterpret_cast<char*>(&backgroundcolor_)) + sizeof(linecolor_));
    precision_ = 2;
    analogformat_ = 102;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemIndicator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string signalIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signalids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemIndicator.signalIds");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalSource = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_signalsource(&has_bits);
          signalsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogFormat = 4 [default = 102];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_analogformat(&has_bits);
          analogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FontParam font = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_font(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawRect = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_drawrect(&has_bits);
          drawrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lineWeight = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_lineweight(&has_bits);
          lineweight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 backgroundColor = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_backgroundcolor(&has_bits);
          backgroundcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lineColor = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 signalColors = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_signalcolors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_signalcolors(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.IndicatorHistogramVert indicatorHistogramVert = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_indicatorhistogramvert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.IndicatorArrowIndicator indicatorArrowIndicator = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_indicatorarrowindicator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemIndicator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signalIds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signalids().data(), static_cast<int>(this->_internal_signalids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemIndicator.signalIds");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signalids(), target);
  }

  // optional int32 signalSource = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_signalsource(), target);
  }

  // optional int32 precision = 3 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_precision(), target);
  }

  // optional int32 analogFormat = 4 [default = 102];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_analogformat(), target);
  }

  // optional .Proto.FontParam font = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::font(this), target, stream);
  }

  // optional bool drawRect = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_drawrect(), target);
  }

  // optional double lineWeight = 11 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_lineweight(), target);
  }

  // optional uint32 backgroundColor = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_backgroundcolor(), target);
  }

  // optional uint32 lineColor = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_linecolor(), target);
  }

  // repeated uint32 signalColors = 18;
  for (int i = 0, n = this->_internal_signalcolors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_signalcolors(i), target);
  }

  // optional uint32 type = 32 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_type(), target);
  }

  // optional .Proto.IndicatorHistogramVert indicatorHistogramVert = 48;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::indicatorhistogramvert(this), target, stream);
  }

  // optional .Proto.IndicatorArrowIndicator indicatorArrowIndicator = 49;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::indicatorarrowindicator(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemIndicator)
  return target;
}

size_t SchemaItemIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemIndicator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 signalColors = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->signalcolors_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signalcolors_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string signalIds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signalids());
    }

    // optional .Proto.FontParam font = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *font_);
    }

    // optional .Proto.IndicatorHistogramVert indicatorHistogramVert = 48;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *indicatorhistogramvert_);
    }

    // optional .Proto.IndicatorArrowIndicator indicatorArrowIndicator = 49;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *indicatorarrowindicator_);
    }

    // optional int32 signalSource = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalsource());
    }

    // optional bool drawRect = 10 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double lineWeight = 11 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 type = 32 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 backgroundColor = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_backgroundcolor());
    }

    // optional uint32 lineColor = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_linecolor());
    }

    // optional int32 precision = 3 [default = 2];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

    // optional int32 analogFormat = 4 [default = 102];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogformat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemIndicator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemIndicator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemIndicator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemIndicator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemIndicator)
    MergeFrom(*source);
  }
}

void SchemaItemIndicator::MergeFrom(const SchemaItemIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalcolors_.MergeFrom(from.signalcolors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signalids(from._internal_signalids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_font()->::Proto::FontParam::MergeFrom(from._internal_font());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_indicatorhistogramvert()->::Proto::IndicatorHistogramVert::MergeFrom(from._internal_indicatorhistogramvert());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_indicatorarrowindicator()->::Proto::IndicatorArrowIndicator::MergeFrom(from._internal_indicatorarrowindicator());
    }
    if (cached_has_bits & 0x00000010u) {
      signalsource_ = from.signalsource_;
    }
    if (cached_has_bits & 0x00000020u) {
      drawrect_ = from.drawrect_;
    }
    if (cached_has_bits & 0x00000040u) {
      lineweight_ = from.lineweight_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      backgroundcolor_ = from.backgroundcolor_;
    }
    if (cached_has_bits & 0x00000200u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000400u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000800u) {
      analogformat_ = from.analogformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemIndicator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemIndicator::CopyFrom(const SchemaItemIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemIndicator::IsInitialized() const {
  if (_internal_has_font()) {
    if (!font_->IsInitialized()) return false;
  }
  return true;
}

void SchemaItemIndicator::InternalSwap(SchemaItemIndicator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalcolors_.InternalSwap(&other->signalcolors_);
  signalids_.Swap(&other->signalids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemIndicator, linecolor_)
      + sizeof(SchemaItemIndicator::linecolor_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemIndicator, font_)>(
          reinterpret_cast<char*>(&font_),
          reinterpret_cast<char*>(&other->font_));
  swap(precision_, other->precision_);
  swap(analogformat_, other->analogformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemIndicator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FblConnectionPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<FblConnectionPoint>()._has_bits_);
  static const ::Proto::SchemaPoint& point(const FblConnectionPoint* msg);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dirrection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::Uuid& uuid(const FblConnectionPoint* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operandindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signaltype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Proto::SchemaPoint&
FblConnectionPoint::_Internal::point(const FblConnectionPoint* msg) {
  return *msg->point_;
}
const ::Proto::Uuid&
FblConnectionPoint::_Internal::uuid(const FblConnectionPoint* msg) {
  return *msg->uuid_;
}
FblConnectionPoint::FblConnectionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  associatedios_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.FblConnectionPoint)
}
FblConnectionPoint::FblConnectionPoint(const FblConnectionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      associatedios_(from.associatedios_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  if (from._internal_has_point()) {
    point_ = new ::Proto::SchemaPoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  ::memcpy(&dirrection_, &from.dirrection_,
    static_cast<size_t>(reinterpret_cast<char*>(&operandindex_) -
    reinterpret_cast<char*>(&dirrection_)) + sizeof(operandindex_));
  // @@protoc_insertion_point(copy_constructor:Proto.FblConnectionPoint)
}

void FblConnectionPoint::SharedCtor() {
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signaltype_) -
    reinterpret_cast<char*>(&point_)) + sizeof(signaltype_));
operandindex_ = -1;
}

FblConnectionPoint::~FblConnectionPoint() {
  // @@protoc_insertion_point(destructor:Proto.FblConnectionPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FblConnectionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete uuid_;
}

void FblConnectionPoint::ArenaDtor(void* object) {
  FblConnectionPoint* _this = reinterpret_cast< FblConnectionPoint* >(object);
  (void)_this;
}
void FblConnectionPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FblConnectionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FblConnectionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.FblConnectionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associatedios_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(point_ != nullptr);
      point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&dirrection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signaltype_) -
        reinterpret_cast<char*>(&dirrection_)) + sizeof(signaltype_));
    operandindex_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FblConnectionPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.SchemaPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.ConnectionDirrection dirrection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::ConnectionDirrection_IsValid(val))) {
            _internal_set_dirrection(static_cast<::Proto::ConnectionDirrection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Proto.Uuid uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 operandIndex = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_operandindex(&has_bits);
          operandindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caption = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.FblConnectionPoint.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Uuid associatedIos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associatedios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 signalType = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_signaltype(&has_bits);
          signaltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FblConnectionPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.FblConnectionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.SchemaPoint point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // optional .Proto.ConnectionDirrection dirrection = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dirrection(), target);
  }

  // optional .Proto.Uuid uuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uuid(this), target, stream);
  }

  // optional int32 operandIndex = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_operandindex(), target);
  }

  // optional string caption = 5 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.FblConnectionPoint.caption");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_caption(), target);
  }

  // repeated .Proto.Uuid associatedIos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_associatedios_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_associatedios(i), target, stream);
  }

  // optional int32 signalType = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_signaltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.FblConnectionPoint)
  return target;
}

size_t FblConnectionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.FblConnectionPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Uuid associatedIos = 6;
  total_size += 1UL * this->_internal_associatedios_size();
  for (const auto& msg : this->associatedios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string caption = 5 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional .Proto.SchemaPoint point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *point_);
    }

    // optional .Proto.Uuid uuid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uuid_);
    }

    // optional .Proto.ConnectionDirrection dirrection = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dirrection());
    }

    // optional int32 signalType = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signaltype());
    }

    // optional int32 operandIndex = 4 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_operandindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FblConnectionPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.FblConnectionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FblConnectionPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FblConnectionPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.FblConnectionPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.FblConnectionPoint)
    MergeFrom(*source);
  }
}

void FblConnectionPoint::MergeFrom(const FblConnectionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.FblConnectionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associatedios_.MergeFrom(from.associatedios_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_point()->::Proto::SchemaPoint::MergeFrom(from._internal_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      dirrection_ = from.dirrection_;
    }
    if (cached_has_bits & 0x00000010u) {
      signaltype_ = from.signaltype_;
    }
    if (cached_has_bits & 0x00000020u) {
      operandindex_ = from.operandindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FblConnectionPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.FblConnectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblConnectionPoint::CopyFrom(const FblConnectionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.FblConnectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblConnectionPoint::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(associatedios_)) return false;
  if (_internal_has_point()) {
    if (!point_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void FblConnectionPoint::InternalSwap(FblConnectionPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  associatedios_.InternalSwap(&other->associatedios_);
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FblConnectionPoint, signaltype_)
      + sizeof(FblConnectionPoint::signaltype_)
      - PROTOBUF_FIELD_OFFSET(FblConnectionPoint, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
  swap(operandindex_, other->operandindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FblConnectionPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FblItem::_Internal {
 public:
};

FblItem::FblItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.FblItem)
}
FblItem::FblItem(const FblItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.FblItem)
}

void FblItem::SharedCtor() {
}

FblItem::~FblItem() {
  // @@protoc_insertion_point(destructor:Proto.FblItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FblItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FblItem::ArenaDtor(void* object) {
  FblItem* _this = reinterpret_cast< FblItem* >(object);
  (void)_this;
}
void FblItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FblItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FblItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.FblItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FblItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.FblConnectionPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FblItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.FblItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.FblConnectionPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.FblItem)
  return target;
}

size_t FblItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.FblItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.FblConnectionPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FblItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.FblItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FblItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FblItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.FblItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.FblItem)
    MergeFrom(*source);
  }
}

void FblItem::MergeFrom(const FblItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.FblItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void FblItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.FblItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItem::CopyFrom(const FblItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.FblItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItem::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  return true;
}

void FblItem::InternalSwap(FblItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FblItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FblItemRect::_Internal {
 public:
  using HasBits = decltype(std::declval<FblItemRect>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fillcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_textcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Proto::FontParam& font(const FblItemRect* msg);
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obsoletelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usertext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usertextpos(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obsoletelabelpos(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007c) ^ 0x0000007c) != 0;
  }
};

const ::Proto::FontParam&
FblItemRect::_Internal::font(const FblItemRect* msg) {
  return *msg->font_;
}
FblItemRect::FblItemRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.FblItemRect)
}
FblItemRect::FblItemRect(const FblItemRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obsoletelabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsoletelabel()) {
    obsoletelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obsoletelabel(), 
      GetArena());
  }
  usertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_usertext()) {
    usertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usertext(), 
      GetArena());
  }
  if (from._internal_has_font()) {
    font_ = new ::Proto::FontParam(*from.font_);
  } else {
    font_ = nullptr;
  }
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&obsoletelabelpos_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(obsoletelabelpos_));
  // @@protoc_insertion_point(copy_constructor:Proto.FblItemRect)
}

void FblItemRect::SharedCtor() {
obsoletelabel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
usertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&font_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&textcolor_) -
    reinterpret_cast<char*>(&font_)) + sizeof(textcolor_));
usertextpos_ = 1;
obsoletelabelpos_ = -1;
}

FblItemRect::~FblItemRect() {
  // @@protoc_insertion_point(destructor:Proto.FblItemRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FblItemRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obsoletelabel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usertext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete font_;
}

void FblItemRect::ArenaDtor(void* object) {
  FblItemRect* _this = reinterpret_cast< FblItemRect* >(object);
  (void)_this;
}
void FblItemRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FblItemRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FblItemRect::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.FblItemRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      obsoletelabel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      usertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(font_ != nullptr);
      font_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&textcolor_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(textcolor_));
    usertextpos_ = 1;
  }
  obsoletelabelpos_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FblItemRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 lineColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fillColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fillcolor(&has_bits);
          fillcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 textColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_textcolor(&has_bits);
          textcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.FontParam font = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_font(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string obsoleteLabel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_obsoletelabel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.FblItemRect.obsoleteLabel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userText = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_usertext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.FblItemRect.userText");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userTextPos = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_usertextpos(&has_bits);
          usertextpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 obsoleteLabelPos = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_obsoletelabelpos(&has_bits);
          obsoletelabelpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FblItemRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.FblItemRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double weight = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // required uint32 lineColor = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fillcolor(), target);
  }

  // required uint32 textColor = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_textcolor(), target);
  }

  // required .Proto.FontParam font = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::font(this), target, stream);
  }

  // optional string obsoleteLabel = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obsoletelabel().data(), static_cast<int>(this->_internal_obsoletelabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.FblItemRect.obsoleteLabel");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_obsoletelabel(), target);
  }

  // optional string userText = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_usertext().data(), static_cast<int>(this->_internal_usertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.FblItemRect.userText");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_usertext(), target);
  }

  // optional int32 userTextPos = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_usertextpos(), target);
  }

  // optional int32 obsoleteLabelPos = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_obsoletelabelpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.FblItemRect)
  return target;
}

size_t FblItemRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.FblItemRect)
  size_t total_size = 0;

  if (_internal_has_font()) {
    // required .Proto.FontParam font = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *font_);
  }

  if (_internal_has_weight()) {
    // required double weight = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_linecolor()) {
    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());
  }

  if (_internal_has_fillcolor()) {
    // required uint32 fillColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fillcolor());
  }

  if (_internal_has_textcolor()) {
    // required uint32 textColor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_textcolor());
  }

  return total_size;
}
size_t FblItemRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.FblItemRect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required .Proto.FontParam font = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *font_);

    // required double weight = 1;
    total_size += 1 + 8;

    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());

    // required uint32 fillColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fillcolor());

    // required uint32 textColor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_textcolor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string obsoleteLabel = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsoletelabel());
    }

    // optional string userText = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_usertext());
    }

  }
  // optional int32 userTextPos = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usertextpos());
  }

  // optional int32 obsoleteLabelPos = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obsoletelabelpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FblItemRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.FblItemRect)
  GOOGLE_DCHECK_NE(&from, this);
  const FblItemRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FblItemRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.FblItemRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.FblItemRect)
    MergeFrom(*source);
  }
}

void FblItemRect::MergeFrom(const FblItemRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.FblItemRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obsoletelabel(from._internal_obsoletelabel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_usertext(from._internal_usertext());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_font()->::Proto::FontParam::MergeFrom(from._internal_font());
    }
    if (cached_has_bits & 0x00000008u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000020u) {
      fillcolor_ = from.fillcolor_;
    }
    if (cached_has_bits & 0x00000040u) {
      textcolor_ = from.textcolor_;
    }
    if (cached_has_bits & 0x00000080u) {
      usertextpos_ = from.usertextpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_obsoletelabelpos(from._internal_obsoletelabelpos());
  }
}

void FblItemRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.FblItemRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemRect::CopyFrom(const FblItemRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.FblItemRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemRect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_font()) {
    if (!font_->IsInitialized()) return false;
  }
  return true;
}

void FblItemRect::InternalSwap(FblItemRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsoletelabel_.Swap(&other->obsoletelabel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usertext_.Swap(&other->usertext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FblItemRect, textcolor_)
      + sizeof(FblItemRect::textcolor_)
      - PROTOBUF_FIELD_OFFSET(FblItemRect, font_)>(
          reinterpret_cast<char*>(&font_),
          reinterpret_cast<char*>(&other->font_));
  swap(usertextpos_, other->usertextpos_);
  swap(obsoletelabelpos_, other->obsoletelabelpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FblItemRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FblItemLine::_Internal {
 public:
  using HasBits = decltype(std::declval<FblItemLine>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FblItemLine::FblItemLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.FblItemLine)
}
FblItemLine::FblItemLine(const FblItemLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&linestyle_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linestyle_));
  // @@protoc_insertion_point(copy_constructor:Proto.FblItemLine)
}

void FblItemLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linecolor_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(linecolor_));
linestyle_ = 1;
}

FblItemLine::~FblItemLine() {
  // @@protoc_insertion_point(destructor:Proto.FblItemLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FblItemLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FblItemLine::ArenaDtor(void* object) {
  FblItemLine* _this = reinterpret_cast< FblItemLine* >(object);
  (void)_this;
}
void FblItemLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FblItemLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FblItemLine::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.FblItemLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linecolor_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(linecolor_));
    linestyle_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FblItemLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 lineColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lineStyle = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_linestyle(&has_bits);
          linestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FblItemLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.FblItemLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // required uint32 lineColor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linecolor(), target);
  }

  // optional int32 lineStyle = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_linestyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.FblItemLine)
  return target;
}

size_t FblItemLine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.FblItemLine)
  size_t total_size = 0;

  if (_internal_has_weight()) {
    // required double weight = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_linecolor()) {
    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());
  }

  return total_size;
}
size_t FblItemLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.FblItemLine)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double weight = 1;
    total_size += 1 + 8;

    // required uint32 lineColor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 lineStyle = 3 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linestyle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FblItemLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.FblItemLine)
  GOOGLE_DCHECK_NE(&from, this);
  const FblItemLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FblItemLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.FblItemLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.FblItemLine)
    MergeFrom(*source);
  }
}

void FblItemLine::MergeFrom(const FblItemLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.FblItemLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000004u) {
      linestyle_ = from.linestyle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FblItemLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.FblItemLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemLine::CopyFrom(const FblItemLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.FblItemLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemLine::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FblItemLine::InternalSwap(FblItemLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FblItemLine, linecolor_)
      + sizeof(FblItemLine::linecolor_)
      - PROTOBUF_FIELD_OFFSET(FblItemLine, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
  swap(linestyle_, other->linestyle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FblItemLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemSignalColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemSignalColumn>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horzalign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SchemaItemSignalColumn::SchemaItemSignalColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemSignalColumn)
}
SchemaItemSignalColumn::SchemaItemSignalColumn(const SchemaItemSignalColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&data_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemSignalColumn)
}

void SchemaItemSignalColumn::SharedCtor() {
data_ = 0;
horzalign_ = 1;
width_ = 20;
}

SchemaItemSignalColumn::~SchemaItemSignalColumn() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemSignalColumn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemSignalColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemSignalColumn::ArenaDtor(void* object) {
  SchemaItemSignalColumn* _this = reinterpret_cast< SchemaItemSignalColumn* >(object);
  (void)_this;
}
void SchemaItemSignalColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemSignalColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemSignalColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemSignalColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    data_ = 0;
    horzalign_ = 1;
    width_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemSignalColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double width = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 data = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 horzAlign = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_horzalign(&has_bits);
          horzalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemSignalColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemSignalColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double width = 1 [default = 20];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  // optional int32 data = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // optional int32 horzAlign = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_horzalign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemSignalColumn)
  return target;
}

size_t SchemaItemSignalColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemSignalColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 data = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data());
    }

    // optional int32 horzAlign = 3 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_horzalign());
    }

    // optional double width = 1 [default = 20];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemSignalColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemSignalColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemSignalColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemSignalColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemSignalColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemSignalColumn)
    MergeFrom(*source);
  }
}

void SchemaItemSignalColumn::MergeFrom(const SchemaItemSignalColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemSignalColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000002u) {
      horzalign_ = from.horzalign_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemSignalColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemSignalColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemSignalColumn::CopyFrom(const SchemaItemSignalColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemSignalColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemSignalColumn::IsInitialized() const {
  return true;
}

void SchemaItemSignalColumn::InternalSwap(SchemaItemSignalColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(horzalign_, other->horzalign_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemSignalColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemSignal>()._has_bits_);
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_analogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_multiline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_customtext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SchemaItemSignal::SchemaItemSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignalids_(arena),
  columns_(arena),
  impactappsignalids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemSignal)
}
SchemaItemSignal::SchemaItemSignal(const SchemaItemSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appsignalids_(from.appsignalids_),
      columns_(from.columns_),
      impactappsignalids_(from.impactappsignalids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customtext()) {
    customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customtext(), 
      GetArena());
  }
  ::memcpy(&multiline_, &from.multiline_,
    static_cast<size_t>(reinterpret_cast<char*>(&analogformat_) -
    reinterpret_cast<char*>(&multiline_)) + sizeof(analogformat_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemSignal)
}

void SchemaItemSignal::SharedCtor() {
customtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multiline_ = true;
precision_ = 2;
analogformat_ = 102;
}

SchemaItemSignal::~SchemaItemSignal() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemSignal::ArenaDtor(void* object) {
  SchemaItemSignal* _this = reinterpret_cast< SchemaItemSignal* >(object);
  (void)_this;
}
void SchemaItemSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignalids_.Clear();
  columns_.Clear();
  impactappsignalids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      customtext_.ClearNonDefaultToEmpty();
    }
    multiline_ = true;
    precision_ = 2;
    analogformat_ = 102;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.wstring appSignalIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignalids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogFormat = 3 [default = 102];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_analogformat(&has_bits);
          analogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.SchemaItemSignalColumn columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool multiLine = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_multiline(&has_bits);
          multiline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string impactAppSignalIDs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_impactappsignalids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemSignal.impactAppSignalIDs");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string customText = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_customtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemSignal.customText");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.wstring appSignalIDs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignalids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_appsignalids(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 precision = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // optional int32 analogFormat = 3 [default = 102];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_analogformat(), target);
  }

  // repeated .Proto.SchemaItemSignalColumn columns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_columns(i), target, stream);
  }

  // optional bool multiLine = 5 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_multiline(), target);
  }

  // repeated string impactAppSignalIDs = 6;
  for (int i = 0, n = this->_internal_impactappsignalids_size(); i < n; i++) {
    const auto& s = this->_internal_impactappsignalids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemSignal.impactAppSignalIDs");
    target = stream->WriteString(6, s, target);
  }

  // optional string customText = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_customtext().data(), static_cast<int>(this->_internal_customtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemSignal.customText");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_customtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemSignal)
  return target;
}

size_t SchemaItemSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.wstring appSignalIDs = 1;
  total_size += 1UL * this->_internal_appsignalids_size();
  for (const auto& msg : this->appsignalids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.SchemaItemSignalColumn columns = 4;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string impactAppSignalIDs = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(impactappsignalids_.size());
  for (int i = 0, n = impactappsignalids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      impactappsignalids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string customText = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customtext());
    }

    // optional bool multiLine = 5 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 precision = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

    // optional int32 analogFormat = 3 [default = 102];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogformat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemSignal)
    MergeFrom(*source);
  }
}

void SchemaItemSignal::MergeFrom(const SchemaItemSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignalids_.MergeFrom(from.appsignalids_);
  columns_.MergeFrom(from.columns_);
  impactappsignalids_.MergeFrom(from.impactappsignalids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_customtext(from._internal_customtext());
    }
    if (cached_has_bits & 0x00000002u) {
      multiline_ = from.multiline_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      analogformat_ = from.analogformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemSignal::CopyFrom(const SchemaItemSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemSignal::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(appsignalids_)) return false;
  return true;
}

void SchemaItemSignal::InternalSwap(SchemaItemSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalids_.InternalSwap(&other->appsignalids_);
  columns_.InternalSwap(&other->columns_);
  impactappsignalids_.InternalSwap(&other->impactappsignalids_);
  customtext_.Swap(&other->customtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(multiline_, other->multiline_);
  swap(precision_, other->precision_);
  swap(analogformat_, other->analogformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemInput::_Internal {
 public:
};

SchemaItemInput::SchemaItemInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemInput)
}
SchemaItemInput::SchemaItemInput(const SchemaItemInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemInput)
}

void SchemaItemInput::SharedCtor() {
}

SchemaItemInput::~SchemaItemInput() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemInput::ArenaDtor(void* object) {
  SchemaItemInput* _this = reinterpret_cast< SchemaItemInput* >(object);
  (void)_this;
}
void SchemaItemInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemInput::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemInput)
  return target;
}

size_t SchemaItemInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemInput)
    MergeFrom(*source);
  }
}

void SchemaItemInput::MergeFrom(const SchemaItemInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemInput::CopyFrom(const SchemaItemInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemInput::IsInitialized() const {
  return true;
}

void SchemaItemInput::InternalSwap(SchemaItemInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemOutput::_Internal {
 public:
};

SchemaItemOutput::SchemaItemOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemOutput)
}
SchemaItemOutput::SchemaItemOutput(const SchemaItemOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemOutput)
}

void SchemaItemOutput::SharedCtor() {
}

SchemaItemOutput::~SchemaItemOutput() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemOutput::ArenaDtor(void* object) {
  SchemaItemOutput* _this = reinterpret_cast< SchemaItemOutput* >(object);
  (void)_this;
}
void SchemaItemOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemOutput)
  return target;
}

size_t SchemaItemOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemOutput)
    MergeFrom(*source);
  }
}

void SchemaItemOutput::MergeFrom(const SchemaItemOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemOutput::CopyFrom(const SchemaItemOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemOutput::IsInitialized() const {
  return true;
}

void SchemaItemOutput::InternalSwap(SchemaItemOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemInOut::_Internal {
 public:
};

SchemaItemInOut::SchemaItemInOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemInOut)
}
SchemaItemInOut::SchemaItemInOut(const SchemaItemInOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemInOut)
}

void SchemaItemInOut::SharedCtor() {
}

SchemaItemInOut::~SchemaItemInOut() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemInOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemInOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemInOut::ArenaDtor(void* object) {
  SchemaItemInOut* _this = reinterpret_cast< SchemaItemInOut* >(object);
  (void)_this;
}
void SchemaItemInOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemInOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemInOut::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemInOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemInOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemInOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemInOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemInOut)
  return target;
}

size_t SchemaItemInOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemInOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemInOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemInOut)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemInOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemInOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemInOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemInOut)
    MergeFrom(*source);
  }
}

void SchemaItemInOut::MergeFrom(const SchemaItemInOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemInOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemInOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemInOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemInOut::CopyFrom(const SchemaItemInOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemInOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemInOut::IsInitialized() const {
  return true;
}

void SchemaItemInOut::InternalSwap(SchemaItemInOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemInOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemLink::_Internal {
 public:
};

SchemaItemLink::SchemaItemLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemLink)
}
SchemaItemLink::SchemaItemLink(const SchemaItemLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemLink)
}

void SchemaItemLink::SharedCtor() {
}

SchemaItemLink::~SchemaItemLink() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemLink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemLink::ArenaDtor(void* object) {
  SchemaItemLink* _this = reinterpret_cast< SchemaItemLink* >(object);
  (void)_this;
}
void SchemaItemLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemLink::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemLink)
  return target;
}

size_t SchemaItemLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemLink)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemLink)
    MergeFrom(*source);
  }
}

void SchemaItemLink::MergeFrom(const SchemaItemLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLink::CopyFrom(const SchemaItemLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLink::IsInitialized() const {
  return true;
}

void SchemaItemLink::InternalSwap(SchemaItemLink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemAfb::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemAfb>()._has_bits_);
  static const ::Proto::wstring& afbstrid(const SchemaItemAfb* msg);
  static void set_has_afbstrid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::AfbElementXml& deprecated_afbelement(const SchemaItemAfb* msg);
  static void set_has_deprecated_afbelement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::AfbElementXml& afbelement(const SchemaItemAfb* msg);
  static void set_has_afbelement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Proto::wstring&
SchemaItemAfb::_Internal::afbstrid(const SchemaItemAfb* msg) {
  return *msg->afbstrid_;
}
const ::Proto::AfbElementXml&
SchemaItemAfb::_Internal::deprecated_afbelement(const SchemaItemAfb* msg) {
  return *msg->deprecated_afbelement_;
}
const ::Proto::AfbElementXml&
SchemaItemAfb::_Internal::afbelement(const SchemaItemAfb* msg) {
  return *msg->afbelement_;
}
SchemaItemAfb::SchemaItemAfb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemAfb)
}
SchemaItemAfb::SchemaItemAfb(const SchemaItemAfb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deprecated_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deprecated_label()) {
    deprecated_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deprecated_label(), 
      GetArena());
  }
  if (from._internal_has_afbstrid()) {
    afbstrid_ = new ::Proto::wstring(*from.afbstrid_);
  } else {
    afbstrid_ = nullptr;
  }
  if (from._internal_has_deprecated_afbelement()) {
    deprecated_afbelement_ = new ::Proto::AfbElementXml(*from.deprecated_afbelement_);
  } else {
    deprecated_afbelement_ = nullptr;
  }
  if (from._internal_has_afbelement()) {
    afbelement_ = new ::Proto::AfbElementXml(*from.afbelement_);
  } else {
    afbelement_ = nullptr;
  }
  precision_ = from.precision_;
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemAfb)
}

void SchemaItemAfb::SharedCtor() {
deprecated_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afbstrid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&afbelement_) -
    reinterpret_cast<char*>(&afbstrid_)) + sizeof(afbelement_));
precision_ = 2;
}

SchemaItemAfb::~SchemaItemAfb() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemAfb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemAfb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deprecated_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete afbstrid_;
  if (this != internal_default_instance()) delete deprecated_afbelement_;
  if (this != internal_default_instance()) delete afbelement_;
}

void SchemaItemAfb::ArenaDtor(void* object) {
  SchemaItemAfb* _this = reinterpret_cast< SchemaItemAfb* >(object);
  (void)_this;
}
void SchemaItemAfb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemAfb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemAfb::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemAfb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      deprecated_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(afbstrid_ != nullptr);
      afbstrid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(deprecated_afbelement_ != nullptr);
      deprecated_afbelement_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(afbelement_ != nullptr);
      afbelement_->Clear();
    }
    precision_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemAfb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.AfbParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring afbStrid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_afbstrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.AfbElementXml deprecated_afbelement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_afbelement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string deprecated_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_deprecated_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemAfb.deprecated_label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.AfbElementXml afbelement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_afbelement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemAfb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemAfb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.AfbParam params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_params(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Proto.wstring afbStrid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::afbstrid(this), target, stream);
  }

  // optional int32 precision = 4 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_precision(), target);
  }

  // optional .Proto.AfbElementXml deprecated_afbelement = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::deprecated_afbelement(this), target, stream);
  }

  // optional string deprecated_label = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deprecated_label().data(), static_cast<int>(this->_internal_deprecated_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemAfb.deprecated_label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_deprecated_label(), target);
  }

  // optional .Proto.AfbElementXml afbelement = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::afbelement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemAfb)
  return target;
}

size_t SchemaItemAfb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemAfb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AfbParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string deprecated_label = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_label());
    }

    // optional .Proto.wstring afbStrid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *afbstrid_);
    }

    // optional .Proto.AfbElementXml deprecated_afbelement = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_afbelement_);
    }

    // optional .Proto.AfbElementXml afbelement = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *afbelement_);
    }

    // optional int32 precision = 4 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemAfb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemAfb)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemAfb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemAfb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemAfb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemAfb)
    MergeFrom(*source);
  }
}

void SchemaItemAfb::MergeFrom(const SchemaItemAfb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemAfb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_label(from._internal_deprecated_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_afbstrid()->::Proto::wstring::MergeFrom(from._internal_afbstrid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_deprecated_afbelement()->::Proto::AfbElementXml::MergeFrom(from._internal_deprecated_afbelement());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_afbelement()->::Proto::AfbElementXml::MergeFrom(from._internal_afbelement());
    }
    if (cached_has_bits & 0x00000010u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemAfb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemAfb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemAfb::CopyFrom(const SchemaItemAfb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemAfb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemAfb::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(params_)) return false;
  if (_internal_has_afbstrid()) {
    if (!afbstrid_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_afbelement()) {
    if (!deprecated_afbelement_->IsInitialized()) return false;
  }
  if (_internal_has_afbelement()) {
    if (!afbelement_->IsInitialized()) return false;
  }
  return true;
}

void SchemaItemAfb::InternalSwap(SchemaItemAfb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  deprecated_label_.Swap(&other->deprecated_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemAfb, afbelement_)
      + sizeof(SchemaItemAfb::afbelement_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemAfb, afbstrid_)>(
          reinterpret_cast<char*>(&afbstrid_),
          reinterpret_cast<char*>(&other->afbstrid_));
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemAfb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemConst::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemConst>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_horzalign(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vertalign(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_analogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_intvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_intref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_floatvalue_obsolete(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_floatvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_floatref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_discretevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_discreteref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SchemaItemConst::SchemaItemConst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemConst)
}
SchemaItemConst::SchemaItemConst(const SchemaItemConst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  intref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_intref()) {
    intref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_intref(), 
      GetArena());
  }
  floatref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_floatref()) {
    floatref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_floatref(), 
      GetArena());
  }
  discreteref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_discreteref()) {
    discreteref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_discreteref(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&analogformat_) -
    reinterpret_cast<char*>(&type_)) + sizeof(analogformat_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemConst)
}

void SchemaItemConst::SharedCtor() {
intref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
floatref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
discreteref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&floatvalue_) -
    reinterpret_cast<char*>(&type_)) + sizeof(floatvalue_));
precision_ = 2;
horzalign_ = 4;
vertalign_ = 128;
analogformat_ = 102;
}

SchemaItemConst::~SchemaItemConst() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemConst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemConst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  intref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  floatref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discreteref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemConst::ArenaDtor(void* object) {
  SchemaItemConst* _this = reinterpret_cast< SchemaItemConst* >(object);
  (void)_this;
}
void SchemaItemConst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemConst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemConst::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemConst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      intref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      floatref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      discreteref_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&floatvalue_) -
        reinterpret_cast<char*>(&type_)) + sizeof(floatvalue_));
  }
  if (cached_has_bits & 0x00000f00u) {
    precision_ = 2;
    horzalign_ = 4;
    vertalign_ = 128;
    analogformat_ = 102;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemConst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 intValue = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_intvalue(&has_bits);
          intvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double floatValue_obsolete = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_floatvalue_obsolete(&has_bits);
          floatvalue_obsolete_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 horzAlign = 5 [default = 4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_horzalign(&has_bits);
          horzalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vertAlign = 6 [default = 128];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vertalign(&has_bits);
          vertalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 discreteValue = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_discretevalue(&has_bits);
          discretevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogFormat = 8 [default = 102];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_analogformat(&has_bits);
          analogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float floatValue = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_floatvalue(&has_bits);
          floatvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string intRef = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_intref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemConst.intRef");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string floatRef = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_floatref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemConst.floatRef");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string discreteRef = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_discreteref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemConst.discreteRef");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemConst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemConst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 intValue = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_intvalue(), target);
  }

  // optional double floatValue_obsolete = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_floatvalue_obsolete(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_precision(), target);
  }

  // optional int32 horzAlign = 5 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_horzalign(), target);
  }

  // optional int32 vertAlign = 6 [default = 128];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vertalign(), target);
  }

  // optional int32 discreteValue = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_discretevalue(), target);
  }

  // optional int32 analogFormat = 8 [default = 102];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_analogformat(), target);
  }

  // optional float floatValue = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_floatvalue(), target);
  }

  // optional string intRef = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_intref().data(), static_cast<int>(this->_internal_intref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemConst.intRef");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_intref(), target);
  }

  // optional string floatRef = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_floatref().data(), static_cast<int>(this->_internal_floatref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemConst.floatRef");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_floatref(), target);
  }

  // optional string discreteRef = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_discreteref().data(), static_cast<int>(this->_internal_discreteref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemConst.discreteRef");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_discreteref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemConst)
  return target;
}

size_t SchemaItemConst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemConst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string intRef = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_intref());
    }

    // optional string floatRef = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_floatref());
    }

    // optional string discreteRef = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_discreteref());
    }

    // optional int32 type = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 intValue = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_intvalue());
    }

    // optional double floatValue_obsolete = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 discreteValue = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_discretevalue());
    }

    // optional float floatValue = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 precision = 4 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

    // optional int32 horzAlign = 5 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_horzalign());
    }

    // optional int32 vertAlign = 6 [default = 128];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertalign());
    }

    // optional int32 analogFormat = 8 [default = 102];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogformat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemConst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemConst)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemConst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemConst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemConst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemConst)
    MergeFrom(*source);
  }
}

void SchemaItemConst::MergeFrom(const SchemaItemConst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemConst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_intref(from._internal_intref());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_floatref(from._internal_floatref());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_discreteref(from._internal_discreteref());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      intvalue_ = from.intvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      floatvalue_obsolete_ = from.floatvalue_obsolete_;
    }
    if (cached_has_bits & 0x00000040u) {
      discretevalue_ = from.discretevalue_;
    }
    if (cached_has_bits & 0x00000080u) {
      floatvalue_ = from.floatvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000200u) {
      horzalign_ = from.horzalign_;
    }
    if (cached_has_bits & 0x00000400u) {
      vertalign_ = from.vertalign_;
    }
    if (cached_has_bits & 0x00000800u) {
      analogformat_ = from.analogformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemConst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemConst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemConst::CopyFrom(const SchemaItemConst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemConst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemConst::IsInitialized() const {
  return true;
}

void SchemaItemConst::InternalSwap(SchemaItemConst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intref_.Swap(&other->intref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  floatref_.Swap(&other->floatref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  discreteref_.Swap(&other->discreteref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemConst, floatvalue_)
      + sizeof(SchemaItemConst::floatvalue_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemConst, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(precision_, other->precision_);
  swap(horzalign_, other->horzalign_);
  swap(vertalign_, other->vertalign_);
  swap(analogformat_, other->analogformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemConst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemConnection>()._has_bits_);
  static void set_has_connectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SchemaItemConnection::SchemaItemConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemConnection)
}
SchemaItemConnection::SchemaItemConnection(const SchemaItemConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connectionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connectionid()) {
    connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connectionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemConnection)
}

void SchemaItemConnection::SharedCtor() {
connectionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SchemaItemConnection::~SchemaItemConnection() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connectionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemConnection::ArenaDtor(void* object) {
  SchemaItemConnection* _this = reinterpret_cast< SchemaItemConnection* >(object);
  (void)_this;
}
void SchemaItemConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connectionid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string connectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemConnection.connectionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string connectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemConnection.connectionid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemConnection)
  return target;
}

size_t SchemaItemConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string connectionid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemConnection)
    MergeFrom(*source);
  }
}

void SchemaItemConnection::MergeFrom(const SchemaItemConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connectionid()) {
    _internal_set_connectionid(from._internal_connectionid());
  }
}

void SchemaItemConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemConnection::CopyFrom(const SchemaItemConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemConnection::IsInitialized() const {
  return true;
}

void SchemaItemConnection::InternalSwap(SchemaItemConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connectionid_.Swap(&other->connectionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemTransmitter::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemTransmitter>()._has_bits_);
  static void set_has_pincount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SchemaItemTransmitter::SchemaItemTransmitter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemTransmitter)
}
SchemaItemTransmitter::SchemaItemTransmitter(const SchemaItemTransmitter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pincount_ = from.pincount_;
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemTransmitter)
}

void SchemaItemTransmitter::SharedCtor() {
pincount_ = 1;
}

SchemaItemTransmitter::~SchemaItemTransmitter() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemTransmitter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemTransmitter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemTransmitter::ArenaDtor(void* object) {
  SchemaItemTransmitter* _this = reinterpret_cast< SchemaItemTransmitter* >(object);
  (void)_this;
}
void SchemaItemTransmitter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemTransmitter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemTransmitter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemTransmitter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pincount_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemTransmitter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pinCount = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pincount(&has_bits);
          pincount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemTransmitter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemTransmitter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pinCount = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pincount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemTransmitter)
  return target;
}

size_t SchemaItemTransmitter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemTransmitter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 pinCount = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pincount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemTransmitter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemTransmitter)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemTransmitter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemTransmitter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemTransmitter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemTransmitter)
    MergeFrom(*source);
  }
}

void SchemaItemTransmitter::MergeFrom(const SchemaItemTransmitter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemTransmitter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pincount()) {
    _internal_set_pincount(from._internal_pincount());
  }
}

void SchemaItemTransmitter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemTransmitter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemTransmitter::CopyFrom(const SchemaItemTransmitter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemTransmitter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemTransmitter::IsInitialized() const {
  return true;
}

void SchemaItemTransmitter::InternalSwap(SchemaItemTransmitter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pincount_, other->pincount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemTransmitter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemReceiver::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemReceiver>()._has_bits_);
  static void set_has_showvalidity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appsignalids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_analogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_customtext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SchemaItemReceiver::SchemaItemReceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemReceiver)
}
SchemaItemReceiver::SchemaItemReceiver(const SchemaItemReceiver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appsignalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appsignalids()) {
    appsignalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appsignalids(), 
      GetArena());
  }
  customtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customtext()) {
    customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customtext(), 
      GetArena());
  }
  ::memcpy(&datatype_, &from.datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&datatype_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemReceiver)
}

void SchemaItemReceiver::SharedCtor() {
appsignalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
datatype_ = 0;
analogformat_ = 102;
showvalidity_ = true;
precision_ = 2;
}

SchemaItemReceiver::~SchemaItemReceiver() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemReceiver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemReceiver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appsignalids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemReceiver::ArenaDtor(void* object) {
  SchemaItemReceiver* _this = reinterpret_cast< SchemaItemReceiver* >(object);
  (void)_this;
}
void SchemaItemReceiver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemReceiver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemReceiver::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemReceiver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appsignalids_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      customtext_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    datatype_ = 0;
    analogformat_ = 102;
    showvalidity_ = true;
    precision_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemReceiver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool showValidity = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_showvalidity(&has_bits);
          showvalidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string appSignalIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_appsignalids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemReceiver.appSignalIds");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dataType = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_datatype(&has_bits);
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogFormat = 5 [default = 102];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_analogformat(&has_bits);
          analogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customText = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_customtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemReceiver.customText");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemReceiver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemReceiver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool showValidity = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_showvalidity(), target);
  }

  // optional string appSignalIds = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appsignalids().data(), static_cast<int>(this->_internal_appsignalids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemReceiver.appSignalIds");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appsignalids(), target);
  }

  // optional int32 dataType = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_datatype(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_precision(), target);
  }

  // optional int32 analogFormat = 5 [default = 102];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_analogformat(), target);
  }

  // optional string customText = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_customtext().data(), static_cast<int>(this->_internal_customtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemReceiver.customText");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_customtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemReceiver)
  return target;
}

size_t SchemaItemReceiver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemReceiver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string appSignalIds = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appsignalids());
    }

    // optional string customText = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customtext());
    }

    // optional int32 dataType = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_datatype());
    }

    // optional int32 analogFormat = 5 [default = 102];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogformat());
    }

    // optional bool showValidity = 1 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 precision = 4 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemReceiver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemReceiver)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemReceiver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemReceiver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemReceiver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemReceiver)
    MergeFrom(*source);
  }
}

void SchemaItemReceiver::MergeFrom(const SchemaItemReceiver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemReceiver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appsignalids(from._internal_appsignalids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_customtext(from._internal_customtext());
    }
    if (cached_has_bits & 0x00000004u) {
      datatype_ = from.datatype_;
    }
    if (cached_has_bits & 0x00000008u) {
      analogformat_ = from.analogformat_;
    }
    if (cached_has_bits & 0x00000010u) {
      showvalidity_ = from.showvalidity_;
    }
    if (cached_has_bits & 0x00000020u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemReceiver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemReceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemReceiver::CopyFrom(const SchemaItemReceiver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemReceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemReceiver::IsInitialized() const {
  return true;
}

void SchemaItemReceiver::InternalSwap(SchemaItemReceiver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalids_.Swap(&other->appsignalids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customtext_.Swap(&other->customtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(datatype_, other->datatype_);
  swap(analogformat_, other->analogformat_);
  swap(showvalidity_, other->showvalidity_);
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemReceiver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemUfb::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemUfb>()._has_bits_);
  static void set_has_ufbschemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ufbcaption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ufbversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_specific_properties_struct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SchemaItemUfb::SchemaItemUfb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemUfb)
}
SchemaItemUfb::SchemaItemUfb(const SchemaItemUfb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ufbschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ufbschemaid()) {
    ufbschemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ufbschemaid(), 
      GetArena());
  }
  ufbcaption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ufbcaption()) {
    ufbcaption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ufbcaption(), 
      GetArena());
  }
  specific_properties_struct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_specific_properties_struct()) {
    specific_properties_struct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specific_properties_struct(), 
      GetArena());
  }
  ufbversion_ = from.ufbversion_;
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemUfb)
}

void SchemaItemUfb::SharedCtor() {
ufbschemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ufbcaption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
specific_properties_struct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ufbversion_ = -1;
}

SchemaItemUfb::~SchemaItemUfb() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemUfb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemUfb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ufbschemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ufbcaption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specific_properties_struct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemUfb::ArenaDtor(void* object) {
  SchemaItemUfb* _this = reinterpret_cast< SchemaItemUfb* >(object);
  (void)_this;
}
void SchemaItemUfb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemUfb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemUfb::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemUfb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ufbschemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ufbcaption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      specific_properties_struct_.ClearNonDefaultToEmpty();
    }
    ufbversion_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemUfb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ufbSchemaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ufbschemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemUfb.ufbSchemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ufbCaption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ufbcaption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemUfb.ufbCaption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ufbVersion = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ufbversion(&has_bits);
          ufbversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string specific_properties_struct = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_specific_properties_struct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemUfb.specific_properties_struct");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Property properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemUfb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemUfb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ufbSchemaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ufbschemaid().data(), static_cast<int>(this->_internal_ufbschemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemUfb.ufbSchemaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ufbschemaid(), target);
  }

  // optional string ufbCaption = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ufbcaption().data(), static_cast<int>(this->_internal_ufbcaption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemUfb.ufbCaption");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ufbcaption(), target);
  }

  // optional int32 ufbVersion = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ufbversion(), target);
  }

  // optional string specific_properties_struct = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_specific_properties_struct().data(), static_cast<int>(this->_internal_specific_properties_struct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemUfb.specific_properties_struct");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_specific_properties_struct(), target);
  }

  // repeated .Proto.Property properties = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemUfb)
  return target;
}

size_t SchemaItemUfb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemUfb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Property properties = 11;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ufbSchemaId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ufbschemaid());
    }

    // optional string ufbCaption = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ufbcaption());
    }

    // optional string specific_properties_struct = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specific_properties_struct());
    }

    // optional int32 ufbVersion = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ufbversion());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemUfb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemUfb)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemUfb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemUfb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemUfb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemUfb)
    MergeFrom(*source);
  }
}

void SchemaItemUfb::MergeFrom(const SchemaItemUfb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemUfb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ufbschemaid(from._internal_ufbschemaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ufbcaption(from._internal_ufbcaption());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_specific_properties_struct(from._internal_specific_properties_struct());
    }
    if (cached_has_bits & 0x00000008u) {
      ufbversion_ = from.ufbversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemUfb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemUfb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemUfb::CopyFrom(const SchemaItemUfb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemUfb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemUfb::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  return true;
}

void SchemaItemUfb::InternalSwap(SchemaItemUfb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  properties_.InternalSwap(&other->properties_);
  ufbschemaid_.Swap(&other->ufbschemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ufbcaption_.Swap(&other->ufbcaption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  specific_properties_struct_.Swap(&other->specific_properties_struct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ufbversion_, other->ufbversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemUfb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemTerminator::_Internal {
 public:
};

SchemaItemTerminator::SchemaItemTerminator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemTerminator)
}
SchemaItemTerminator::SchemaItemTerminator(const SchemaItemTerminator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemTerminator)
}

void SchemaItemTerminator::SharedCtor() {
}

SchemaItemTerminator::~SchemaItemTerminator() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemTerminator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemTerminator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemTerminator::ArenaDtor(void* object) {
  SchemaItemTerminator* _this = reinterpret_cast< SchemaItemTerminator* >(object);
  (void)_this;
}
void SchemaItemTerminator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemTerminator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemTerminator::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemTerminator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemTerminator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemTerminator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemTerminator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemTerminator)
  return target;
}

size_t SchemaItemTerminator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemTerminator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemTerminator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemTerminator)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemTerminator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemTerminator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemTerminator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemTerminator)
    MergeFrom(*source);
  }
}

void SchemaItemTerminator::MergeFrom(const SchemaItemTerminator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemTerminator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemTerminator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemTerminator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemTerminator::CopyFrom(const SchemaItemTerminator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemTerminator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemTerminator::IsInitialized() const {
  return true;
}

void SchemaItemTerminator::InternalSwap(SchemaItemTerminator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemTerminator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemValue>()._has_bits_);
  static void set_has_signalids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signalsource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lineweight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fillcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_textcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::FontParam& font(const SchemaItemValue* msg);
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drawrect(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_horzalign(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vertalign(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_analogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::Proto::FontParam&
SchemaItemValue::_Internal::font(const SchemaItemValue* msg) {
  return *msg->font_;
}
SchemaItemValue::SchemaItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemValue)
}
SchemaItemValue::SchemaItemValue(const SchemaItemValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signalids()) {
    signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signalids(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_font()) {
    font_ = new ::Proto::FontParam(*from.font_);
  } else {
    font_ = nullptr;
  }
  ::memcpy(&signalsource_, &from.signalsource_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&signalsource_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemValue)
}

void SchemaItemValue::SharedCtor() {
signalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&font_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&textcolor_) -
    reinterpret_cast<char*>(&font_)) + sizeof(textcolor_));
analogformat_ = 102;
drawrect_ = true;
horzalign_ = 4;
vertalign_ = 128;
precision_ = -1;
}

SchemaItemValue::~SchemaItemValue() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signalids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete font_;
}

void SchemaItemValue::ArenaDtor(void* object) {
  SchemaItemValue* _this = reinterpret_cast< SchemaItemValue* >(object);
  (void)_this;
}
void SchemaItemValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      signalids_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(font_ != nullptr);
      font_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&signalsource_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&textcolor_) -
        reinterpret_cast<char*>(&signalsource_)) + sizeof(textcolor_));
  }
  if (cached_has_bits & 0x00001f00u) {
    analogformat_ = 102;
    drawrect_ = true;
    horzalign_ = 4;
    vertalign_ = 128;
    precision_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string signalIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signalids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemValue.signalIds");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalSource = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_signalsource(&has_bits);
          signalsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lineWeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lineweight(&has_bits);
          lineweight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 lineColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fillColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fillcolor(&has_bits);
          fillcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 textColor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_textcolor(&has_bits);
          textcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemValue.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.FontParam font = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_font(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawRect = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_drawrect(&has_bits);
          drawrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 horzAlign = 11 [default = 4];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_horzalign(&has_bits);
          horzalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vertAlign = 12 [default = 128];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_vertalign(&has_bits);
          vertalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogFormat = 14 [default = 102];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_analogformat(&has_bits);
          analogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signalIds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signalids().data(), static_cast<int>(this->_internal_signalids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemValue.signalIds");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signalids(), target);
  }

  // optional int32 signalSource = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_signalsource(), target);
  }

  // optional double lineWeight = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lineweight(), target);
  }

  // optional uint32 lineColor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_linecolor(), target);
  }

  // optional uint32 fillColor = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fillcolor(), target);
  }

  // optional uint32 textColor = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_textcolor(), target);
  }

  // optional string text = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemValue.text");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_text(), target);
  }

  // optional .Proto.FontParam font = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::font(this), target, stream);
  }

  // optional bool drawRect = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_drawrect(), target);
  }

  // optional int32 horzAlign = 11 [default = 4];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_horzalign(), target);
  }

  // optional int32 vertAlign = 12 [default = 128];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_vertalign(), target);
  }

  // optional int32 precision = 13 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_precision(), target);
  }

  // optional int32 analogFormat = 14 [default = 102];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_analogformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemValue)
  return target;
}

size_t SchemaItemValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string signalIds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signalids());
    }

    // optional string text = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .Proto.FontParam font = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *font_);
    }

    // optional int32 signalSource = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalsource());
    }

    // optional uint32 lineColor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_linecolor());
    }

    // optional double lineWeight = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 fillColor = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fillcolor());
    }

    // optional uint32 textColor = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_textcolor());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 analogFormat = 14 [default = 102];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogformat());
    }

    // optional bool drawRect = 10 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 horzAlign = 11 [default = 4];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_horzalign());
    }

    // optional int32 vertAlign = 12 [default = 128];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertalign());
    }

    // optional int32 precision = 13 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemValue)
    MergeFrom(*source);
  }
}

void SchemaItemValue::MergeFrom(const SchemaItemValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signalids(from._internal_signalids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_font()->::Proto::FontParam::MergeFrom(from._internal_font());
    }
    if (cached_has_bits & 0x00000008u) {
      signalsource_ = from.signalsource_;
    }
    if (cached_has_bits & 0x00000010u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000020u) {
      lineweight_ = from.lineweight_;
    }
    if (cached_has_bits & 0x00000040u) {
      fillcolor_ = from.fillcolor_;
    }
    if (cached_has_bits & 0x00000080u) {
      textcolor_ = from.textcolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      analogformat_ = from.analogformat_;
    }
    if (cached_has_bits & 0x00000200u) {
      drawrect_ = from.drawrect_;
    }
    if (cached_has_bits & 0x00000400u) {
      horzalign_ = from.horzalign_;
    }
    if (cached_has_bits & 0x00000800u) {
      vertalign_ = from.vertalign_;
    }
    if (cached_has_bits & 0x00001000u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemValue::CopyFrom(const SchemaItemValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemValue::IsInitialized() const {
  if (_internal_has_font()) {
    if (!font_->IsInitialized()) return false;
  }
  return true;
}

void SchemaItemValue::InternalSwap(SchemaItemValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalids_.Swap(&other->signalids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemValue, textcolor_)
      + sizeof(SchemaItemValue::textcolor_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemValue, font_)>(
          reinterpret_cast<char*>(&font_),
          reinterpret_cast<char*>(&other->font_));
  swap(analogformat_, other->analogformat_);
  swap(drawrect_, other->drawrect_);
  swap(horzalign_, other->horzalign_);
  swap(vertalign_, other->vertalign_);
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemImageValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemImageValue>()._has_bits_);
  static void set_has_signalids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signalsource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_currentimageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lineweight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fillcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_drawrect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fillrect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SchemaItemImageValue::SchemaItemImageValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  images_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemImageValue)
}
SchemaItemImageValue::SchemaItemImageValue(const SchemaItemImageValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signalids()) {
    signalids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signalids(), 
      GetArena());
  }
  currentimageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currentimageid()) {
    currentimageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currentimageid(), 
      GetArena());
  }
  ::memcpy(&lineweight_, &from.lineweight_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillcolor_) -
    reinterpret_cast<char*>(&lineweight_)) + sizeof(fillcolor_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemImageValue)
}

void SchemaItemImageValue::SharedCtor() {
signalids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currentimageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lineweight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fillrect_) -
    reinterpret_cast<char*>(&lineweight_)) + sizeof(fillrect_));
linecolor_ = 4278190080u;
fillcolor_ = 4278190272u;
}

SchemaItemImageValue::~SchemaItemImageValue() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemImageValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemImageValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signalids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currentimageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemImageValue::ArenaDtor(void* object) {
  SchemaItemImageValue* _this = reinterpret_cast< SchemaItemImageValue* >(object);
  (void)_this;
}
void SchemaItemImageValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemImageValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemImageValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemImageValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signalids_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      currentimageid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&lineweight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fillrect_) -
        reinterpret_cast<char*>(&lineweight_)) + sizeof(fillrect_));
    linecolor_ = 4278190080u;
    fillcolor_ = 4278190272u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemImageValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string signalIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signalids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemImageValue.signalIds");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalSource = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_signalsource(&has_bits);
          signalsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currentImageId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currentimageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemImageValue.currentImageId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lineWeight = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lineweight(&has_bits);
          lineweight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 lineColor = 7 [default = 4278190080];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_linecolor(&has_bits);
          linecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fillColor = 8 [default = 4278190272];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fillcolor(&has_bits);
          fillcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drawRect = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_drawrect(&has_bits);
          drawrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fillRect = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fillrect(&has_bits);
          fillrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.ImageItem images = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemImageValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemImageValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signalIds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signalids().data(), static_cast<int>(this->_internal_signalids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemImageValue.signalIds");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signalids(), target);
  }

  // optional int32 signalSource = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_signalsource(), target);
  }

  // optional string currentImageId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currentimageid().data(), static_cast<int>(this->_internal_currentimageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemImageValue.currentImageId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currentimageid(), target);
  }

  // optional double lineWeight = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lineweight(), target);
  }

  // optional uint32 lineColor = 7 [default = 4278190080];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_linecolor(), target);
  }

  // optional uint32 fillColor = 8 [default = 4278190272];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fillcolor(), target);
  }

  // optional bool drawRect = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_drawrect(), target);
  }

  // optional bool fillRect = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_fillrect(), target);
  }

  // repeated .Proto.ImageItem images = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemImageValue)
  return target;
}

size_t SchemaItemImageValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemImageValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ImageItem images = 14;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string signalIds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signalids());
    }

    // optional string currentImageId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currentimageid());
    }

    // optional double lineWeight = 6 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 signalSource = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalsource());
    }

    // optional bool drawRect = 9 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool fillRect = 10 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 lineColor = 7 [default = 4278190080];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_linecolor());
    }

    // optional uint32 fillColor = 8 [default = 4278190272];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fillcolor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemImageValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemImageValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemImageValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemImageValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemImageValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemImageValue)
    MergeFrom(*source);
  }
}

void SchemaItemImageValue::MergeFrom(const SchemaItemImageValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemImageValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signalids(from._internal_signalids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_currentimageid(from._internal_currentimageid());
    }
    if (cached_has_bits & 0x00000004u) {
      lineweight_ = from.lineweight_;
    }
    if (cached_has_bits & 0x00000008u) {
      signalsource_ = from.signalsource_;
    }
    if (cached_has_bits & 0x00000010u) {
      drawrect_ = from.drawrect_;
    }
    if (cached_has_bits & 0x00000020u) {
      fillrect_ = from.fillrect_;
    }
    if (cached_has_bits & 0x00000040u) {
      linecolor_ = from.linecolor_;
    }
    if (cached_has_bits & 0x00000080u) {
      fillcolor_ = from.fillcolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemImageValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemImageValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemImageValue::CopyFrom(const SchemaItemImageValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemImageValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemImageValue::IsInitialized() const {
  return true;
}

void SchemaItemImageValue::InternalSwap(SchemaItemImageValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  images_.InternalSwap(&other->images_);
  signalids_.Swap(&other->signalids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currentimageid_.Swap(&other->currentimageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemImageValue, fillrect_)
      + sizeof(SchemaItemImageValue::fillrect_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemImageValue, lineweight_)>(
          reinterpret_cast<char*>(&lineweight_),
          reinterpret_cast<char*>(&other->lineweight_));
  swap(linecolor_, other->linecolor_);
  swap(fillcolor_, other->fillcolor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemImageValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemBus::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemBus>()._has_bits_);
  static void set_has_bustypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bustypehash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::Bus& bus(const SchemaItemBus* msg);
  static void set_has_bus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Proto::Bus&
SchemaItemBus::_Internal::bus(const SchemaItemBus* msg) {
  return *msg->bus_;
}
SchemaItemBus::SchemaItemBus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemBus)
}
SchemaItemBus::SchemaItemBus(const SchemaItemBus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bustypeid()) {
    bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bustypeid(), 
      GetArena());
  }
  if (from._internal_has_bus()) {
    bus_ = new ::Proto::Bus(*from.bus_);
  } else {
    bus_ = nullptr;
  }
  bustypehash_ = from.bustypehash_;
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemBus)
}

void SchemaItemBus::SharedCtor() {
bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bustypehash_) -
    reinterpret_cast<char*>(&bus_)) + sizeof(bustypehash_));
}

SchemaItemBus::~SchemaItemBus() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemBus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemBus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bustypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bus_;
}

void SchemaItemBus::ArenaDtor(void* object) {
  SchemaItemBus* _this = reinterpret_cast< SchemaItemBus* >(object);
  (void)_this;
}
void SchemaItemBus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemBus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemBus::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemBus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bustypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bus_ != nullptr);
      bus_->Clear();
    }
  }
  bustypehash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemBus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string busTypeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bustypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemBus.busTypeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 busTypeHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_bustypehash(&has_bits);
          bustypehash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Bus bus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemBus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemBus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string busTypeId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bustypeid().data(), static_cast<int>(this->_internal_bustypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemBus.busTypeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bustypeid(), target);
  }

  // optional fixed64 busTypeHash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_bustypehash(), target);
  }

  // optional .Proto.Bus bus = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemBus)
  return target;
}

size_t SchemaItemBus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemBus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string busTypeId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bustypeid());
    }

    // optional .Proto.Bus bus = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bus_);
    }

    // optional fixed64 busTypeHash = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemBus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemBus)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemBus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemBus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemBus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemBus)
    MergeFrom(*source);
  }
}

void SchemaItemBus::MergeFrom(const SchemaItemBus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemBus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bustypeid(from._internal_bustypeid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bus()->::Proto::Bus::MergeFrom(from._internal_bus());
    }
    if (cached_has_bits & 0x00000004u) {
      bustypehash_ = from.bustypehash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemBus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemBus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemBus::CopyFrom(const SchemaItemBus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemBus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemBus::IsInitialized() const {
  if (_internal_has_bus()) {
    if (!bus_->IsInitialized()) return false;
  }
  return true;
}

void SchemaItemBus::InternalSwap(SchemaItemBus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bustypeid_.Swap(&other->bustypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemBus, bustypehash_)
      + sizeof(SchemaItemBus::bustypehash_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemBus, bus_)>(
          reinterpret_cast<char*>(&bus_),
          reinterpret_cast<char*>(&other->bus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemBus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemBusComposer::_Internal {
 public:
};

SchemaItemBusComposer::SchemaItemBusComposer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemBusComposer)
}
SchemaItemBusComposer::SchemaItemBusComposer(const SchemaItemBusComposer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemBusComposer)
}

void SchemaItemBusComposer::SharedCtor() {
}

SchemaItemBusComposer::~SchemaItemBusComposer() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemBusComposer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemBusComposer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemBusComposer::ArenaDtor(void* object) {
  SchemaItemBusComposer* _this = reinterpret_cast< SchemaItemBusComposer* >(object);
  (void)_this;
}
void SchemaItemBusComposer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemBusComposer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemBusComposer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemBusComposer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemBusComposer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemBusComposer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemBusComposer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemBusComposer)
  return target;
}

size_t SchemaItemBusComposer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemBusComposer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemBusComposer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemBusComposer)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemBusComposer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemBusComposer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemBusComposer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemBusComposer)
    MergeFrom(*source);
  }
}

void SchemaItemBusComposer::MergeFrom(const SchemaItemBusComposer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemBusComposer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemBusComposer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemBusComposer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemBusComposer::CopyFrom(const SchemaItemBusComposer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemBusComposer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemBusComposer::IsInitialized() const {
  return true;
}

void SchemaItemBusComposer::InternalSwap(SchemaItemBusComposer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemBusComposer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemBusExtractor::_Internal {
 public:
};

SchemaItemBusExtractor::SchemaItemBusExtractor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemBusExtractor)
}
SchemaItemBusExtractor::SchemaItemBusExtractor(const SchemaItemBusExtractor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemBusExtractor)
}

void SchemaItemBusExtractor::SharedCtor() {
}

SchemaItemBusExtractor::~SchemaItemBusExtractor() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemBusExtractor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemBusExtractor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemBusExtractor::ArenaDtor(void* object) {
  SchemaItemBusExtractor* _this = reinterpret_cast< SchemaItemBusExtractor* >(object);
  (void)_this;
}
void SchemaItemBusExtractor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemBusExtractor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemBusExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemBusExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemBusExtractor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.Property properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemBusExtractor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemBusExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Property properties = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemBusExtractor)
  return target;
}

size_t SchemaItemBusExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemBusExtractor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Property properties = 2;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemBusExtractor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemBusExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemBusExtractor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemBusExtractor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemBusExtractor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemBusExtractor)
    MergeFrom(*source);
  }
}

void SchemaItemBusExtractor::MergeFrom(const SchemaItemBusExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemBusExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void SchemaItemBusExtractor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemBusExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemBusExtractor::CopyFrom(const SchemaItemBusExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemBusExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemBusExtractor::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  return true;
}

void SchemaItemBusExtractor::InternalSwap(SchemaItemBusExtractor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemBusExtractor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemLoopback::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemLoopback>()._has_bits_);
  static void set_has_loopbackid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SchemaItemLoopback::SchemaItemLoopback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemLoopback)
}
SchemaItemLoopback::SchemaItemLoopback(const SchemaItemLoopback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loopbackid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loopbackid()) {
    loopbackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loopbackid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemLoopback)
}

void SchemaItemLoopback::SharedCtor() {
loopbackid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SchemaItemLoopback::~SchemaItemLoopback() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemLoopback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemLoopback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loopbackid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemLoopback::ArenaDtor(void* object) {
  SchemaItemLoopback* _this = reinterpret_cast< SchemaItemLoopback* >(object);
  (void)_this;
}
void SchemaItemLoopback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemLoopback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemLoopback::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemLoopback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    loopbackid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemLoopback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string loopbackId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_loopbackid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLoopback.loopbackId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemLoopback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemLoopback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loopbackId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loopbackid().data(), static_cast<int>(this->_internal_loopbackid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLoopback.loopbackId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loopbackid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemLoopback)
  return target;
}

size_t SchemaItemLoopback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemLoopback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string loopbackId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loopbackid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemLoopback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemLoopback)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemLoopback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemLoopback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemLoopback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemLoopback)
    MergeFrom(*source);
  }
}

void SchemaItemLoopback::MergeFrom(const SchemaItemLoopback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemLoopback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_loopbackid()) {
    _internal_set_loopbackid(from._internal_loopbackid());
  }
}

void SchemaItemLoopback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemLoopback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLoopback::CopyFrom(const SchemaItemLoopback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemLoopback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLoopback::IsInitialized() const {
  return true;
}

void SchemaItemLoopback::InternalSwap(SchemaItemLoopback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  loopbackid_.Swap(&other->loopbackid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemLoopback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemLoopbackSource::_Internal {
 public:
};

SchemaItemLoopbackSource::SchemaItemLoopbackSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemLoopbackSource)
}
SchemaItemLoopbackSource::SchemaItemLoopbackSource(const SchemaItemLoopbackSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemLoopbackSource)
}

void SchemaItemLoopbackSource::SharedCtor() {
}

SchemaItemLoopbackSource::~SchemaItemLoopbackSource() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemLoopbackSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemLoopbackSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemLoopbackSource::ArenaDtor(void* object) {
  SchemaItemLoopbackSource* _this = reinterpret_cast< SchemaItemLoopbackSource* >(object);
  (void)_this;
}
void SchemaItemLoopbackSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemLoopbackSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemLoopbackSource::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemLoopbackSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemLoopbackSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemLoopbackSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemLoopbackSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemLoopbackSource)
  return target;
}

size_t SchemaItemLoopbackSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemLoopbackSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemLoopbackSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemLoopbackSource)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemLoopbackSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemLoopbackSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemLoopbackSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemLoopbackSource)
    MergeFrom(*source);
  }
}

void SchemaItemLoopbackSource::MergeFrom(const SchemaItemLoopbackSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemLoopbackSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemLoopbackSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemLoopbackSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLoopbackSource::CopyFrom(const SchemaItemLoopbackSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemLoopbackSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLoopbackSource::IsInitialized() const {
  return true;
}

void SchemaItemLoopbackSource::InternalSwap(SchemaItemLoopbackSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemLoopbackSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemLoopbackTarget::_Internal {
 public:
};

SchemaItemLoopbackTarget::SchemaItemLoopbackTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemLoopbackTarget)
}
SchemaItemLoopbackTarget::SchemaItemLoopbackTarget(const SchemaItemLoopbackTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemLoopbackTarget)
}

void SchemaItemLoopbackTarget::SharedCtor() {
}

SchemaItemLoopbackTarget::~SchemaItemLoopbackTarget() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemLoopbackTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemLoopbackTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaItemLoopbackTarget::ArenaDtor(void* object) {
  SchemaItemLoopbackTarget* _this = reinterpret_cast< SchemaItemLoopbackTarget* >(object);
  (void)_this;
}
void SchemaItemLoopbackTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemLoopbackTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemLoopbackTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemLoopbackTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemLoopbackTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemLoopbackTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemLoopbackTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemLoopbackTarget)
  return target;
}

size_t SchemaItemLoopbackTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemLoopbackTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemLoopbackTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemLoopbackTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemLoopbackTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemLoopbackTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemLoopbackTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemLoopbackTarget)
    MergeFrom(*source);
  }
}

void SchemaItemLoopbackTarget::MergeFrom(const SchemaItemLoopbackTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemLoopbackTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SchemaItemLoopbackTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemLoopbackTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLoopbackTarget::CopyFrom(const SchemaItemLoopbackTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemLoopbackTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLoopbackTarget::IsInitialized() const {
  return true;
}

void SchemaItemLoopbackTarget::InternalSwap(SchemaItemLoopbackTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemLoopbackTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemControl>()._has_bits_);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tooltip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SchemaItemControl::SchemaItemControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemControl)
}
SchemaItemControl::SchemaItemControl(const SchemaItemControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stylesheet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stylesheet()) {
    stylesheet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stylesheet(), 
      GetArena());
  }
  tooltip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tooltip()) {
    tooltip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tooltip(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemControl)
}

void SchemaItemControl::SharedCtor() {
stylesheet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tooltip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SchemaItemControl::~SchemaItemControl() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stylesheet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tooltip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemControl::ArenaDtor(void* object) {
  SchemaItemControl* _this = reinterpret_cast< SchemaItemControl* >(object);
  (void)_this;
}
void SchemaItemControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemControl::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stylesheet_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tooltip_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string styleSheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stylesheet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemControl.styleSheet");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string toolTip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tooltip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemControl.toolTip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string styleSheet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stylesheet().data(), static_cast<int>(this->_internal_stylesheet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemControl.styleSheet");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stylesheet(), target);
  }

  // optional string toolTip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tooltip().data(), static_cast<int>(this->_internal_tooltip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemControl.toolTip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tooltip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemControl)
  return target;
}

size_t SchemaItemControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string styleSheet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stylesheet());
    }

    // optional string toolTip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tooltip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemControl)
    MergeFrom(*source);
  }
}

void SchemaItemControl::MergeFrom(const SchemaItemControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stylesheet(from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tooltip(from._internal_tooltip());
    }
  }
}

void SchemaItemControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemControl::CopyFrom(const SchemaItemControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemControl::IsInitialized() const {
  return true;
}

void SchemaItemControl::InternalSwap(SchemaItemControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stylesheet_.Swap(&other->stylesheet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tooltip_.Swap(&other->tooltip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemPushButton::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemPushButton>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_checkable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_checkeddefault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_autorepeat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_autorepeatdelay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_autorepeatinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scriptaftercreate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scriptclicked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scriptpressed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scriptreleased(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scripttoggled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SchemaItemPushButton::SchemaItemPushButton(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemPushButton)
}
SchemaItemPushButton::SchemaItemPushButton(const SchemaItemPushButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  scriptaftercreate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scriptaftercreate()) {
    scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptaftercreate(), 
      GetArena());
  }
  scriptclicked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scriptclicked()) {
    scriptclicked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptclicked(), 
      GetArena());
  }
  scriptpressed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scriptpressed()) {
    scriptpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptpressed(), 
      GetArena());
  }
  scriptreleased_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scriptreleased()) {
    scriptreleased_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptreleased(), 
      GetArena());
  }
  scripttoggled_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scripttoggled()) {
    scripttoggled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scripttoggled(), 
      GetArena());
  }
  ::memcpy(&checkable_, &from.checkable_,
    static_cast<size_t>(reinterpret_cast<char*>(&autorepeatinterval_) -
    reinterpret_cast<char*>(&checkable_)) + sizeof(autorepeatinterval_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemPushButton)
}

void SchemaItemPushButton::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scriptaftercreate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scriptclicked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scriptpressed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scriptreleased_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scripttoggled_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&checkable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&autorepeatinterval_) -
    reinterpret_cast<char*>(&checkable_)) + sizeof(autorepeatinterval_));
}

SchemaItemPushButton::~SchemaItemPushButton() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemPushButton)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemPushButton::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptaftercreate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptclicked_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptpressed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptreleased_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripttoggled_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemPushButton::ArenaDtor(void* object) {
  SchemaItemPushButton* _this = reinterpret_cast< SchemaItemPushButton* >(object);
  (void)_this;
}
void SchemaItemPushButton::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemPushButton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemPushButton::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemPushButton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      scriptaftercreate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      scriptclicked_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      scriptpressed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      scriptreleased_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      scripttoggled_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&checkable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checkeddefault_) -
        reinterpret_cast<char*>(&checkable_)) + sizeof(checkeddefault_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&autorepeat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autorepeatinterval_) -
        reinterpret_cast<char*>(&autorepeat_)) + sizeof(autorepeatinterval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemPushButton::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemPushButton.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_checkable(&has_bits);
          checkable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkedDefault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_checkeddefault(&has_bits);
          checkeddefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autoRepeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_autorepeat(&has_bits);
          autorepeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 autoRepeatDelay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_autorepeatdelay(&has_bits);
          autorepeatdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 autoRepeatInterval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_autorepeatinterval(&has_bits);
          autorepeatinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptAfterCreate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_scriptaftercreate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemPushButton.scriptAfterCreate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptClicked = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_scriptclicked();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemPushButton.scriptClicked");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptPressed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_scriptpressed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemPushButton.scriptPressed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptReleased = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_scriptreleased();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemPushButton.scriptReleased");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptToggled = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_scripttoggled();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemPushButton.scriptToggled");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemPushButton::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemPushButton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemPushButton.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional bool checkable = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_checkable(), target);
  }

  // optional bool checkedDefault = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_checkeddefault(), target);
  }

  // optional bool autoRepeat = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_autorepeat(), target);
  }

  // optional int32 autoRepeatDelay = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_autorepeatdelay(), target);
  }

  // optional int32 autoRepeatInterval = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_autorepeatinterval(), target);
  }

  // optional string scriptAfterCreate = 21;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scriptaftercreate().data(), static_cast<int>(this->_internal_scriptaftercreate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemPushButton.scriptAfterCreate");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_scriptaftercreate(), target);
  }

  // optional string scriptClicked = 22;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scriptclicked().data(), static_cast<int>(this->_internal_scriptclicked().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemPushButton.scriptClicked");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_scriptclicked(), target);
  }

  // optional string scriptPressed = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scriptpressed().data(), static_cast<int>(this->_internal_scriptpressed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemPushButton.scriptPressed");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_scriptpressed(), target);
  }

  // optional string scriptReleased = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scriptreleased().data(), static_cast<int>(this->_internal_scriptreleased().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemPushButton.scriptReleased");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_scriptreleased(), target);
  }

  // optional string scriptToggled = 25;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scripttoggled().data(), static_cast<int>(this->_internal_scripttoggled().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemPushButton.scriptToggled");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_scripttoggled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemPushButton)
  return target;
}

size_t SchemaItemPushButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemPushButton)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string scriptAfterCreate = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scriptaftercreate());
    }

    // optional string scriptClicked = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scriptclicked());
    }

    // optional string scriptPressed = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scriptpressed());
    }

    // optional string scriptReleased = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scriptreleased());
    }

    // optional string scriptToggled = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scripttoggled());
    }

    // optional bool checkable = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool checkedDefault = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool autoRepeat = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 autoRepeatDelay = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_autorepeatdelay());
    }

    // optional int32 autoRepeatInterval = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_autorepeatinterval());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemPushButton::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemPushButton)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemPushButton* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemPushButton>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemPushButton)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemPushButton)
    MergeFrom(*source);
  }
}

void SchemaItemPushButton::MergeFrom(const SchemaItemPushButton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemPushButton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_scriptaftercreate(from._internal_scriptaftercreate());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_scriptclicked(from._internal_scriptclicked());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_scriptpressed(from._internal_scriptpressed());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_scriptreleased(from._internal_scriptreleased());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_scripttoggled(from._internal_scripttoggled());
    }
    if (cached_has_bits & 0x00000040u) {
      checkable_ = from.checkable_;
    }
    if (cached_has_bits & 0x00000080u) {
      checkeddefault_ = from.checkeddefault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      autorepeat_ = from.autorepeat_;
    }
    if (cached_has_bits & 0x00000200u) {
      autorepeatdelay_ = from.autorepeatdelay_;
    }
    if (cached_has_bits & 0x00000400u) {
      autorepeatinterval_ = from.autorepeatinterval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemPushButton::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemPushButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemPushButton::CopyFrom(const SchemaItemPushButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemPushButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemPushButton::IsInitialized() const {
  return true;
}

void SchemaItemPushButton::InternalSwap(SchemaItemPushButton* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scriptaftercreate_.Swap(&other->scriptaftercreate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scriptclicked_.Swap(&other->scriptclicked_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scriptpressed_.Swap(&other->scriptpressed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scriptreleased_.Swap(&other->scriptreleased_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scripttoggled_.Swap(&other->scripttoggled_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemPushButton, autorepeatinterval_)
      + sizeof(SchemaItemPushButton::autorepeatinterval_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemPushButton, checkable_)>(
          reinterpret_cast<char*>(&checkable_),
          reinterpret_cast<char*>(&other->checkable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemPushButton::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaItemLineEdit::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaItemLineEdit>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horzalign(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vertalign(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_maxlength(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_placeholdertext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_readonly(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_scriptaftercreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scripteditingfinished(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scriptreturnpressed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scripttextchanged(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SchemaItemLineEdit::SchemaItemLineEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaItemLineEdit)
}
SchemaItemLineEdit::SchemaItemLineEdit(const SchemaItemLineEdit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  placeholdertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_placeholdertext()) {
    placeholdertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placeholdertext(), 
      GetArena());
  }
  scriptaftercreate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scriptaftercreate()) {
    scriptaftercreate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptaftercreate(), 
      GetArena());
  }
  scripteditingfinished_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scripteditingfinished()) {
    scripteditingfinished_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scripteditingfinished(), 
      GetArena());
  }
  scriptreturnpressed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scriptreturnpressed()) {
    scriptreturnpressed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptreturnpressed(), 
      GetArena());
  }
  scripttextchanged_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scripttextchanged()) {
    scripttextchanged_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scripttextchanged(), 
      GetArena());
  }
  ::memcpy(&horzalign_, &from.horzalign_,
    static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&horzalign_)) + sizeof(readonly_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaItemLineEdit)
}

void SchemaItemLineEdit::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
placeholdertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scriptaftercreate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scripteditingfinished_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scriptreturnpressed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scripttextchanged_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horzalign_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&horzalign_)) + sizeof(readonly_));
}

SchemaItemLineEdit::~SchemaItemLineEdit() {
  // @@protoc_insertion_point(destructor:Proto.SchemaItemLineEdit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaItemLineEdit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholdertext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptaftercreate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripteditingfinished_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptreturnpressed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripttextchanged_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItemLineEdit::ArenaDtor(void* object) {
  SchemaItemLineEdit* _this = reinterpret_cast< SchemaItemLineEdit* >(object);
  (void)_this;
}
void SchemaItemLineEdit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItemLineEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItemLineEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaItemLineEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      placeholdertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      scriptaftercreate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      scripteditingfinished_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      scriptreturnpressed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      scripttextchanged_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&horzalign_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertalign_) -
        reinterpret_cast<char*>(&horzalign_)) + sizeof(vertalign_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&maxlength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&readonly_) -
        reinterpret_cast<char*>(&maxlength_)) + sizeof(readonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItemLineEdit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLineEdit.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 horzAlign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_horzalign(&has_bits);
          horzalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vertAlign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vertalign(&has_bits);
          vertalign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_maxlength(&has_bits);
          maxlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string placeholderText = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_placeholdertext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLineEdit.placeholderText");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool readOnly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_readonly(&has_bits);
          readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptAfterCreate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_scriptaftercreate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLineEdit.scriptAfterCreate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptEditingFinished = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_scripteditingfinished();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLineEdit.scriptEditingFinished");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptReturnPressed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_scriptreturnpressed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLineEdit.scriptReturnPressed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scriptTextChanged = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_scripttextchanged();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaItemLineEdit.scriptTextChanged");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaItemLineEdit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaItemLineEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLineEdit.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional int32 horzAlign = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_horzalign(), target);
  }

  // optional int32 vertAlign = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vertalign(), target);
  }

  // optional int32 maxLength = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxlength(), target);
  }

  // optional string placeholderText = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_placeholdertext().data(), static_cast<int>(this->_internal_placeholdertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLineEdit.placeholderText");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placeholdertext(), target);
  }

  // optional bool readOnly = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_readonly(), target);
  }

  // optional string scriptAfterCreate = 21;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scriptaftercreate().data(), static_cast<int>(this->_internal_scriptaftercreate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLineEdit.scriptAfterCreate");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_scriptaftercreate(), target);
  }

  // optional string scriptEditingFinished = 22;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scripteditingfinished().data(), static_cast<int>(this->_internal_scripteditingfinished().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLineEdit.scriptEditingFinished");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_scripteditingfinished(), target);
  }

  // optional string scriptReturnPressed = 23;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scriptreturnpressed().data(), static_cast<int>(this->_internal_scriptreturnpressed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLineEdit.scriptReturnPressed");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_scriptreturnpressed(), target);
  }

  // optional string scriptTextChanged = 24;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scripttextchanged().data(), static_cast<int>(this->_internal_scripttextchanged().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaItemLineEdit.scriptTextChanged");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_scripttextchanged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaItemLineEdit)
  return target;
}

size_t SchemaItemLineEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaItemLineEdit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string placeholderText = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_placeholdertext());
    }

    // optional string scriptAfterCreate = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scriptaftercreate());
    }

    // optional string scriptEditingFinished = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scripteditingfinished());
    }

    // optional string scriptReturnPressed = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scriptreturnpressed());
    }

    // optional string scriptTextChanged = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scripttextchanged());
    }

    // optional int32 horzAlign = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_horzalign());
    }

    // optional int32 vertAlign = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertalign());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 maxLength = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maxlength());
    }

    // optional bool readOnly = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaItemLineEdit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaItemLineEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaItemLineEdit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaItemLineEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaItemLineEdit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaItemLineEdit)
    MergeFrom(*source);
  }
}

void SchemaItemLineEdit::MergeFrom(const SchemaItemLineEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaItemLineEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_placeholdertext(from._internal_placeholdertext());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_scriptaftercreate(from._internal_scriptaftercreate());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_scripteditingfinished(from._internal_scripteditingfinished());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_scriptreturnpressed(from._internal_scriptreturnpressed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_scripttextchanged(from._internal_scripttextchanged());
    }
    if (cached_has_bits & 0x00000040u) {
      horzalign_ = from.horzalign_;
    }
    if (cached_has_bits & 0x00000080u) {
      vertalign_ = from.vertalign_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      maxlength_ = from.maxlength_;
    }
    if (cached_has_bits & 0x00000200u) {
      readonly_ = from.readonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaItemLineEdit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaItemLineEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLineEdit::CopyFrom(const SchemaItemLineEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaItemLineEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLineEdit::IsInitialized() const {
  return true;
}

void SchemaItemLineEdit::InternalSwap(SchemaItemLineEdit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeholdertext_.Swap(&other->placeholdertext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scriptaftercreate_.Swap(&other->scriptaftercreate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scripteditingfinished_.Swap(&other->scripteditingfinished_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scriptreturnpressed_.Swap(&other->scriptreturnpressed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scripttextchanged_.Swap(&other->scripttextchanged_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItemLineEdit, readonly_)
      + sizeof(SchemaItemLineEdit::readonly_)
      - PROTOBUF_FIELD_OFFSET(SchemaItemLineEdit, horzalign_)>(
          reinterpret_cast<char*>(&horzalign_),
          reinterpret_cast<char*>(&other->horzalign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItemLineEdit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceObject::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceObject>()._has_bits_);
  static const ::Proto::Uuid& uuid(const DeviceObject* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::wstring& equipmentid(const DeviceObject* msg);
  static void set_has_equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::wstring& caption(const DeviceObject* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::wstring& childrestriction(const DeviceObject* msg);
  static void set_has_childrestriction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_place(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_specific_properties_struct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_presetroot(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::Proto::wstring& presetname(const DeviceObject* msg);
  static void set_has_presetname(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::Uuid& presetobjectuuid(const DeviceObject* msg);
  static void set_has_presetobjectuuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_childcounthint(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::Proto::DeviceRoot& root(const DeviceObject* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::Proto::DeviceSystem& system(const DeviceObject* msg);
  static void set_has_system(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Proto::DeviceRack& rack(const DeviceObject* msg);
  static void set_has_rack(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Proto::DeviceChassis& chassis(const DeviceObject* msg);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::Proto::DeviceModule& module(const DeviceObject* msg);
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Proto::DeviceController& controller(const DeviceObject* msg);
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::Proto::DeviceAppSignal& appsignal(const DeviceObject* msg);
  static void set_has_appsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::Proto::Workstation& workstation(const DeviceObject* msg);
  static void set_has_workstation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::Proto::Software& software(const DeviceObject* msg);
  static void set_has_software(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::Proto::Uuid&
DeviceObject::_Internal::uuid(const DeviceObject* msg) {
  return *msg->uuid_;
}
const ::Proto::wstring&
DeviceObject::_Internal::equipmentid(const DeviceObject* msg) {
  return *msg->equipmentid_;
}
const ::Proto::wstring&
DeviceObject::_Internal::caption(const DeviceObject* msg) {
  return *msg->caption_;
}
const ::Proto::wstring&
DeviceObject::_Internal::childrestriction(const DeviceObject* msg) {
  return *msg->childrestriction_;
}
const ::Proto::wstring&
DeviceObject::_Internal::presetname(const DeviceObject* msg) {
  return *msg->presetname_;
}
const ::Proto::Uuid&
DeviceObject::_Internal::presetobjectuuid(const DeviceObject* msg) {
  return *msg->presetobjectuuid_;
}
const ::Proto::DeviceRoot&
DeviceObject::_Internal::root(const DeviceObject* msg) {
  return *msg->root_;
}
const ::Proto::DeviceSystem&
DeviceObject::_Internal::system(const DeviceObject* msg) {
  return *msg->system_;
}
const ::Proto::DeviceRack&
DeviceObject::_Internal::rack(const DeviceObject* msg) {
  return *msg->rack_;
}
const ::Proto::DeviceChassis&
DeviceObject::_Internal::chassis(const DeviceObject* msg) {
  return *msg->chassis_;
}
const ::Proto::DeviceModule&
DeviceObject::_Internal::module(const DeviceObject* msg) {
  return *msg->module_;
}
const ::Proto::DeviceController&
DeviceObject::_Internal::controller(const DeviceObject* msg) {
  return *msg->controller_;
}
const ::Proto::DeviceAppSignal&
DeviceObject::_Internal::appsignal(const DeviceObject* msg) {
  return *msg->appsignal_;
}
const ::Proto::Workstation&
DeviceObject::_Internal::workstation(const DeviceObject* msg) {
  return *msg->workstation_;
}
const ::Proto::Software&
DeviceObject::_Internal::software(const DeviceObject* msg) {
  return *msg->software_;
}
DeviceObject::DeviceObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceObject)
}
DeviceObject::DeviceObject(const DeviceObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      properties_(from.properties_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  specific_properties_struct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_specific_properties_struct()) {
    specific_properties_struct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specific_properties_struct(), 
      GetArena());
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_equipmentid()) {
    equipmentid_ = new ::Proto::wstring(*from.equipmentid_);
  } else {
    equipmentid_ = nullptr;
  }
  if (from._internal_has_caption()) {
    caption_ = new ::Proto::wstring(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  if (from._internal_has_childrestriction()) {
    childrestriction_ = new ::Proto::wstring(*from.childrestriction_);
  } else {
    childrestriction_ = nullptr;
  }
  if (from._internal_has_presetname()) {
    presetname_ = new ::Proto::wstring(*from.presetname_);
  } else {
    presetname_ = nullptr;
  }
  if (from._internal_has_presetobjectuuid()) {
    presetobjectuuid_ = new ::Proto::Uuid(*from.presetobjectuuid_);
  } else {
    presetobjectuuid_ = nullptr;
  }
  if (from._internal_has_root()) {
    root_ = new ::Proto::DeviceRoot(*from.root_);
  } else {
    root_ = nullptr;
  }
  if (from._internal_has_system()) {
    system_ = new ::Proto::DeviceSystem(*from.system_);
  } else {
    system_ = nullptr;
  }
  if (from._internal_has_rack()) {
    rack_ = new ::Proto::DeviceRack(*from.rack_);
  } else {
    rack_ = nullptr;
  }
  if (from._internal_has_chassis()) {
    chassis_ = new ::Proto::DeviceChassis(*from.chassis_);
  } else {
    chassis_ = nullptr;
  }
  if (from._internal_has_module()) {
    module_ = new ::Proto::DeviceModule(*from.module_);
  } else {
    module_ = nullptr;
  }
  if (from._internal_has_controller()) {
    controller_ = new ::Proto::DeviceController(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  if (from._internal_has_appsignal()) {
    appsignal_ = new ::Proto::DeviceAppSignal(*from.appsignal_);
  } else {
    appsignal_ = nullptr;
  }
  if (from._internal_has_workstation()) {
    workstation_ = new ::Proto::Workstation(*from.workstation_);
  } else {
    workstation_ = nullptr;
  }
  if (from._internal_has_software()) {
    software_ = new ::Proto::Software(*from.software_);
  } else {
    software_ = nullptr;
  }
  ::memcpy(&childcounthint_, &from.childcounthint_,
    static_cast<size_t>(reinterpret_cast<char*>(&presetroot_) -
    reinterpret_cast<char*>(&childcounthint_)) + sizeof(presetroot_));
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceObject)
}

void DeviceObject::SharedCtor() {
specific_properties_struct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&presetroot_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(presetroot_));
}

DeviceObject::~DeviceObject() {
  // @@protoc_insertion_point(destructor:Proto.DeviceObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  specific_properties_struct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete equipmentid_;
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete childrestriction_;
  if (this != internal_default_instance()) delete presetname_;
  if (this != internal_default_instance()) delete presetobjectuuid_;
  if (this != internal_default_instance()) delete root_;
  if (this != internal_default_instance()) delete system_;
  if (this != internal_default_instance()) delete rack_;
  if (this != internal_default_instance()) delete chassis_;
  if (this != internal_default_instance()) delete module_;
  if (this != internal_default_instance()) delete controller_;
  if (this != internal_default_instance()) delete appsignal_;
  if (this != internal_default_instance()) delete workstation_;
  if (this != internal_default_instance()) delete software_;
}

void DeviceObject::ArenaDtor(void* object) {
  DeviceObject* _this = reinterpret_cast< DeviceObject* >(object);
  (void)_this;
}
void DeviceObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceObject::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      specific_properties_struct_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(equipmentid_ != nullptr);
      equipmentid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(childrestriction_ != nullptr);
      childrestriction_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(presetname_ != nullptr);
      presetname_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(presetobjectuuid_ != nullptr);
      presetobjectuuid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(root_ != nullptr);
      root_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(system_ != nullptr);
      system_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(rack_ != nullptr);
      rack_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(chassis_ != nullptr);
      chassis_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(module_ != nullptr);
      module_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(controller_ != nullptr);
      controller_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(appsignal_ != nullptr);
      appsignal_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(workstation_ != nullptr);
      workstation_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(software_ != nullptr);
      software_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&childcounthint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&presetroot_) -
        reinterpret_cast<char*>(&childcounthint_)) + sizeof(presetroot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Proto.Uuid uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring equipmentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipmentid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Proto.wstring caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring childRestriction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_childrestriction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 place = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_place(&has_bits);
          place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string specific_properties_struct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_specific_properties_struct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.DeviceObject.specific_properties_struct");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Property properties = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool preset = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_preset(&has_bits);
          preset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool presetRoot = 33 [default = false];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_presetroot(&has_bits);
          presetroot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.wstring presetName = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presetname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Uuid presetObjectUuid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_presetobjectuuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 childCountHint = 36 [default = 0];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_childcounthint(&has_bits);
          childcounthint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceRoot Root = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceSystem System = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceRack Rack = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceChassis Chassis = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceModule Module = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_module(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceController Controller = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.DeviceAppSignal AppSignal = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_appsignal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Workstation Workstation = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_workstation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Software Software = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_software(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Envelope children = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1602>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Uuid uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // required .Proto.wstring equipmentId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::equipmentid(this), target, stream);
  }

  // required .Proto.wstring caption = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caption(this), target, stream);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::childrestriction(this), target, stream);
  }

  // optional int32 place = 5 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_place(), target);
  }

  // optional string specific_properties_struct = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_specific_properties_struct().data(), static_cast<int>(this->_internal_specific_properties_struct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.DeviceObject.specific_properties_struct");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_specific_properties_struct(), target);
  }

  // repeated .Proto.Property properties = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_properties(i), target, stream);
  }

  // optional bool preset = 32 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_preset(), target);
  }

  // optional bool presetRoot = 33 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_presetroot(), target);
  }

  // optional .Proto.wstring presetName = 34;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::presetname(this), target, stream);
  }

  // optional .Proto.Uuid presetObjectUuid = 35;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::presetobjectuuid(this), target, stream);
  }

  // optional int32 childCountHint = 36 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_childcounthint(), target);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::root(this), target, stream);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::system(this), target, stream);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::rack(this), target, stream);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::chassis(this), target, stream);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::module(this), target, stream);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::controller(this), target, stream);
  }

  // optional .Proto.DeviceAppSignal AppSignal = 106;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::appsignal(this), target, stream);
  }

  // optional .Proto.Workstation Workstation = 107;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::workstation(this), target, stream);
  }

  // optional .Proto.Software Software = 108;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::software(this), target, stream);
  }

  // repeated .Proto.Envelope children = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceObject)
  return target;
}

size_t DeviceObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.DeviceObject)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_equipmentid()) {
    // required .Proto.wstring equipmentId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equipmentid_);
  }

  if (_internal_has_caption()) {
    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  return total_size;
}
size_t DeviceObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceObject)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .Proto.Uuid uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required .Proto.wstring equipmentId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equipmentid_);

    // required .Proto.wstring caption = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caption_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Property properties = 7;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Envelope children = 200;
  total_size += 2UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string specific_properties_struct = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_specific_properties_struct());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional .Proto.wstring childRestriction = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *childrestriction_);
    }

    // optional .Proto.wstring presetName = 34;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *presetname_);
    }

    // optional .Proto.Uuid presetObjectUuid = 35;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *presetobjectuuid_);
    }

    // optional .Proto.DeviceRoot Root = 100;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .Proto.DeviceSystem System = 101;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_);
    }

    // optional .Proto.DeviceRack Rack = 102;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rack_);
    }

    // optional .Proto.DeviceChassis Chassis = 103;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chassis_);
    }

    // optional .Proto.DeviceModule Module = 104;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *module_);
    }

    // optional .Proto.DeviceController Controller = 105;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_);
    }

    // optional .Proto.DeviceAppSignal AppSignal = 106;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *appsignal_);
    }

    // optional .Proto.Workstation Workstation = 107;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workstation_);
    }

    // optional .Proto.Software Software = 108;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *software_);
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int32 childCountHint = 36 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_childcounthint());
    }

    // optional int32 place = 5 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_place());
    }

    // optional bool preset = 32 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool presetRoot = 33 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceObject)
    MergeFrom(*source);
  }
}

void DeviceObject::MergeFrom(const DeviceObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_specific_properties_struct(from._internal_specific_properties_struct());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_equipmentid()->::Proto::wstring::MergeFrom(from._internal_equipmentid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_caption()->::Proto::wstring::MergeFrom(from._internal_caption());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_childrestriction()->::Proto::wstring::MergeFrom(from._internal_childrestriction());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_presetname()->::Proto::wstring::MergeFrom(from._internal_presetname());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_presetobjectuuid()->::Proto::Uuid::MergeFrom(from._internal_presetobjectuuid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_root()->::Proto::DeviceRoot::MergeFrom(from._internal_root());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_system()->::Proto::DeviceSystem::MergeFrom(from._internal_system());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_rack()->::Proto::DeviceRack::MergeFrom(from._internal_rack());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_chassis()->::Proto::DeviceChassis::MergeFrom(from._internal_chassis());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_module()->::Proto::DeviceModule::MergeFrom(from._internal_module());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_controller()->::Proto::DeviceController::MergeFrom(from._internal_controller());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_appsignal()->::Proto::DeviceAppSignal::MergeFrom(from._internal_appsignal());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_workstation()->::Proto::Workstation::MergeFrom(from._internal_workstation());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_software()->::Proto::Software::MergeFrom(from._internal_software());
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      childcounthint_ = from.childcounthint_;
    }
    if (cached_has_bits & 0x00020000u) {
      place_ = from.place_;
    }
    if (cached_has_bits & 0x00040000u) {
      preset_ = from.preset_;
    }
    if (cached_has_bits & 0x00080000u) {
      presetroot_ = from.presetroot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceObject::CopyFrom(const DeviceObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceObject::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_equipmentid()) {
    if (!equipmentid_->IsInitialized()) return false;
  }
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  if (_internal_has_childrestriction()) {
    if (!childrestriction_->IsInitialized()) return false;
  }
  if (_internal_has_presetname()) {
    if (!presetname_->IsInitialized()) return false;
  }
  if (_internal_has_presetobjectuuid()) {
    if (!presetobjectuuid_->IsInitialized()) return false;
  }
  return true;
}

void DeviceObject::InternalSwap(DeviceObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  properties_.InternalSwap(&other->properties_);
  children_.InternalSwap(&other->children_);
  specific_properties_struct_.Swap(&other->specific_properties_struct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceObject, presetroot_)
      + sizeof(DeviceObject::presetroot_)
      - PROTOBUF_FIELD_OFFSET(DeviceObject, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceRoot::_Internal {
 public:
};

DeviceRoot::DeviceRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceRoot)
}
DeviceRoot::DeviceRoot(const DeviceRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceRoot)
}

void DeviceRoot::SharedCtor() {
}

DeviceRoot::~DeviceRoot() {
  // @@protoc_insertion_point(destructor:Proto.DeviceRoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceRoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceRoot::ArenaDtor(void* object) {
  DeviceRoot* _this = reinterpret_cast< DeviceRoot* >(object);
  (void)_this;
}
void DeviceRoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceRoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceRoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceRoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceRoot)
  return target;
}

size_t DeviceRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceRoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceRoot)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceRoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceRoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceRoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceRoot)
    MergeFrom(*source);
  }
}

void DeviceRoot::MergeFrom(const DeviceRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceRoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRoot::CopyFrom(const DeviceRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRoot::IsInitialized() const {
  return true;
}

void DeviceRoot::InternalSwap(DeviceRoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceRoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceSystem::_Internal {
 public:
};

DeviceSystem::DeviceSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceSystem)
}
DeviceSystem::DeviceSystem(const DeviceSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceSystem)
}

void DeviceSystem::SharedCtor() {
}

DeviceSystem::~DeviceSystem() {
  // @@protoc_insertion_point(destructor:Proto.DeviceSystem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceSystem::ArenaDtor(void* object) {
  DeviceSystem* _this = reinterpret_cast< DeviceSystem* >(object);
  (void)_this;
}
void DeviceSystem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceSystem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceSystem)
  return target;
}

size_t DeviceSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceSystem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceSystem)
    MergeFrom(*source);
  }
}

void DeviceSystem::MergeFrom(const DeviceSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSystem::CopyFrom(const DeviceSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSystem::IsInitialized() const {
  return true;
}

void DeviceSystem::InternalSwap(DeviceSystem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceRack::_Internal {
 public:
};

DeviceRack::DeviceRack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceRack)
}
DeviceRack::DeviceRack(const DeviceRack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceRack)
}

void DeviceRack::SharedCtor() {
}

DeviceRack::~DeviceRack() {
  // @@protoc_insertion_point(destructor:Proto.DeviceRack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceRack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceRack::ArenaDtor(void* object) {
  DeviceRack* _this = reinterpret_cast< DeviceRack* >(object);
  (void)_this;
}
void DeviceRack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceRack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceRack::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceRack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceRack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceRack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceRack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceRack)
  return target;
}

size_t DeviceRack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceRack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceRack)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceRack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceRack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceRack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceRack)
    MergeFrom(*source);
  }
}

void DeviceRack::MergeFrom(const DeviceRack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceRack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceRack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceRack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRack::CopyFrom(const DeviceRack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceRack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRack::IsInitialized() const {
  return true;
}

void DeviceRack::InternalSwap(DeviceRack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceRack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceChassis::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceChassis>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceChassis::DeviceChassis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceChassis)
}
DeviceChassis::DeviceChassis(const DeviceChassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceChassis)
}

void DeviceChassis::SharedCtor() {
type_ = 0;
}

DeviceChassis::~DeviceChassis() {
  // @@protoc_insertion_point(destructor:Proto.DeviceChassis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceChassis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceChassis::ArenaDtor(void* object) {
  DeviceChassis* _this = reinterpret_cast< DeviceChassis* >(object);
  (void)_this;
}
void DeviceChassis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceChassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceChassis::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceChassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceChassis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceChassis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceChassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceChassis)
  return target;
}

size_t DeviceChassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceChassis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceChassis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceChassis)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceChassis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceChassis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceChassis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceChassis)
    MergeFrom(*source);
  }
}

void DeviceChassis::MergeFrom(const DeviceChassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceChassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void DeviceChassis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceChassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceChassis::CopyFrom(const DeviceChassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceChassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceChassis::IsInitialized() const {
  return true;
}

void DeviceChassis::InternalSwap(DeviceChassis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceChassis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceModule::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceModule>()._has_bits_);
  static void set_has_typeobsolete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_configurationscript(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moduletype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rawdatadescription(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custommodulefamily(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DeviceModule::DeviceModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceModule)
}
DeviceModule::DeviceModule(const DeviceModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  configurationscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_configurationscript()) {
    configurationscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_configurationscript(), 
      GetArena());
  }
  rawdatadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rawdatadescription()) {
    rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rawdatadescription(), 
      GetArena());
  }
  ::memcpy(&typeobsolete_, &from.typeobsolete_,
    static_cast<size_t>(reinterpret_cast<char*>(&custommodulefamily_) -
    reinterpret_cast<char*>(&typeobsolete_)) + sizeof(custommodulefamily_));
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceModule)
}

void DeviceModule::SharedCtor() {
configurationscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rawdatadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&typeobsolete_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custommodulefamily_) -
    reinterpret_cast<char*>(&typeobsolete_)) + sizeof(custommodulefamily_));
}

DeviceModule::~DeviceModule() {
  // @@protoc_insertion_point(destructor:Proto.DeviceModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceModule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  configurationscript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rawdatadescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceModule::ArenaDtor(void* object) {
  DeviceModule* _this = reinterpret_cast< DeviceModule* >(object);
  (void)_this;
}
void DeviceModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceModule::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      configurationscript_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rawdatadescription_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&typeobsolete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custommodulefamily_) -
        reinterpret_cast<char*>(&typeobsolete_)) + sizeof(custommodulefamily_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 typeObsolete = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_typeobsolete(&has_bits);
          typeobsolete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string configurationScript = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_configurationscript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.DeviceModule.configurationScript");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 moduleType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_moduletype(&has_bits);
          moduletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rawDataDescription = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rawdatadescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.DeviceModule.rawDataDescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 customModuleFamily = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_custommodulefamily(&has_bits);
          custommodulefamily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 typeObsolete = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_typeobsolete(), target);
  }

  // optional string configurationScript = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_configurationscript().data(), static_cast<int>(this->_internal_configurationscript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.DeviceModule.configurationScript");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_configurationscript(), target);
  }

  // optional int32 moduleType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_moduletype(), target);
  }

  // optional string rawDataDescription = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rawdatadescription().data(), static_cast<int>(this->_internal_rawdatadescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.DeviceModule.rawDataDescription");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rawdatadescription(), target);
  }

  // optional int32 customModuleFamily = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_custommodulefamily(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceModule)
  return target;
}

size_t DeviceModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string configurationScript = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_configurationscript());
    }

    // optional string rawDataDescription = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rawdatadescription());
    }

    // optional int32 typeObsolete = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_typeobsolete());
    }

    // optional int32 moduleType = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_moduletype());
    }

    // optional int32 customModuleFamily = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_custommodulefamily());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceModule)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceModule)
    MergeFrom(*source);
  }
}

void DeviceModule::MergeFrom(const DeviceModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_configurationscript(from._internal_configurationscript());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rawdatadescription(from._internal_rawdatadescription());
    }
    if (cached_has_bits & 0x00000004u) {
      typeobsolete_ = from.typeobsolete_;
    }
    if (cached_has_bits & 0x00000008u) {
      moduletype_ = from.moduletype_;
    }
    if (cached_has_bits & 0x00000010u) {
      custommodulefamily_ = from.custommodulefamily_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceModule::CopyFrom(const DeviceModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceModule::IsInitialized() const {
  return true;
}

void DeviceModule::InternalSwap(DeviceModule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configurationscript_.Swap(&other->configurationscript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rawdatadescription_.Swap(&other->rawdatadescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceModule, custommodulefamily_)
      + sizeof(DeviceModule::custommodulefamily_)
      - PROTOBUF_FIELD_OFFSET(DeviceModule, typeobsolete_)>(
          reinterpret_cast<char*>(&typeobsolete_),
          reinterpret_cast<char*>(&other->typeobsolete_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceController::_Internal {
 public:
};

DeviceController::DeviceController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceController)
}
DeviceController::DeviceController(const DeviceController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceController)
}

void DeviceController::SharedCtor() {
}

DeviceController::~DeviceController() {
  // @@protoc_insertion_point(destructor:Proto.DeviceController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceController::ArenaDtor(void* object) {
  DeviceController* _this = reinterpret_cast< DeviceController* >(object);
  (void)_this;
}
void DeviceController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceController::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceController)
  return target;
}

size_t DeviceController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceController)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceController)
    MergeFrom(*source);
  }
}

void DeviceController::MergeFrom(const DeviceController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceController::CopyFrom(const DeviceController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceController::IsInitialized() const {
  return true;
}

void DeviceController::InternalSwap(DeviceController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceAppSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAppSignal>()._has_bits_);
  static void set_has_obsoletetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_byteorder(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_valueoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_valuebit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_memoryarea(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_appsignallowadc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_appsignalhighadc(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_appsignallowengunits(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_appsignalhighengunits(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_appsignaldataformat(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_validitysignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appsignalbustypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signalspecpropsstruct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signalspecpropsstructwasfixed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

DeviceAppSignal::DeviceAppSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.DeviceAppSignal)
}
DeviceAppSignal::DeviceAppSignal(const DeviceAppSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validitysignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_validitysignalid()) {
    validitysignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validitysignalid(), 
      GetArena());
  }
  appsignalbustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appsignalbustypeid()) {
    appsignalbustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appsignalbustypeid(), 
      GetArena());
  }
  signalspecpropsstruct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signalspecpropsstruct()) {
    signalspecpropsstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signalspecpropsstruct(), 
      GetArena());
  }
  ::memcpy(&obsoletetype_, &from.obsoletetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&appsignalhighengunits_) -
    reinterpret_cast<char*>(&obsoletetype_)) + sizeof(appsignalhighengunits_));
  // @@protoc_insertion_point(copy_constructor:Proto.DeviceAppSignal)
}

void DeviceAppSignal::SharedCtor() {
validitysignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appsignalbustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signalspecpropsstruct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obsoletetype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signalspecpropsstructwasfixed_) -
    reinterpret_cast<char*>(&obsoletetype_)) + sizeof(signalspecpropsstructwasfixed_));
appsignalhighadc_ = 65535;
appsignaldataformat_ = 2;
appsignalhighengunits_ = 100;
}

DeviceAppSignal::~DeviceAppSignal() {
  // @@protoc_insertion_point(destructor:Proto.DeviceAppSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceAppSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  validitysignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appsignalbustypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signalspecpropsstruct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceAppSignal::ArenaDtor(void* object) {
  DeviceAppSignal* _this = reinterpret_cast< DeviceAppSignal* >(object);
  (void)_this;
}
void DeviceAppSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAppSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceAppSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DeviceAppSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      validitysignalid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      appsignalbustypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      signalspecpropsstruct_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&obsoletetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valueoffset_) -
        reinterpret_cast<char*>(&obsoletetype_)) + sizeof(valueoffset_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&valuebit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signalspecpropsstructwasfixed_) -
        reinterpret_cast<char*>(&valuebit_)) + sizeof(signalspecpropsstructwasfixed_));
    appsignalhighadc_ = 65535;
  }
  if (cached_has_bits & 0x00030000u) {
    appsignaldataformat_ = 2;
    appsignalhighengunits_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAppSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 obsoletetype = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obsoletetype(&has_bits);
          obsoletetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 byteOrder = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_byteorder(&has_bits);
          byteorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 format = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_format(&has_bits);
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 valueOffset = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_valueoffset(&has_bits);
          valueoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 valueBit = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_valuebit(&has_bits);
          valuebit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 function = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_function(&has_bits);
          function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 memoryArea = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_memoryarea(&has_bits);
          memoryarea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 appSignalLowAdc = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_appsignallowadc(&has_bits);
          appsignallowadc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 appSignalHighAdc = 13 [default = 65535];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_appsignalhighadc(&has_bits);
          appsignalhighadc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double appSignalLowEngUnits = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_appsignallowengunits(&has_bits);
          appsignallowengunits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double appSignalHighEngUnits = 15 [default = 100];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_appsignalhighengunits(&has_bits);
          appsignalhighengunits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 appSignalDataFormat = 16 [default = 2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_appsignaldataformat(&has_bits);
          appsignaldataformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string validitySignalId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_validitysignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.DeviceAppSignal.validitySignalId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string appSignalBusTypeId = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_appsignalbustypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.DeviceAppSignal.appSignalBusTypeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signalSpecPropsStruct = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_signalspecpropsstruct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.DeviceAppSignal.signalSpecPropsStruct");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool signalSpecPropsStructWasFixed = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_signalspecpropsstructwasfixed(&has_bits);
          signalspecpropsstructwasfixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAppSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DeviceAppSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obsoletetype = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_obsoletetype(), target);
  }

  // optional int32 byteOrder = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_byteorder(), target);
  }

  // optional int32 format = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_format(), target);
  }

  // optional int32 size = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // optional int32 valueOffset = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_valueoffset(), target);
  }

  // optional int32 valueBit = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_valuebit(), target);
  }

  // optional int32 type = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_type(), target);
  }

  // optional int32 function = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_function(), target);
  }

  // optional int32 memoryArea = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_memoryarea(), target);
  }

  // optional int32 appSignalLowAdc = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_appsignallowadc(), target);
  }

  // optional int32 appSignalHighAdc = 13 [default = 65535];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_appsignalhighadc(), target);
  }

  // optional double appSignalLowEngUnits = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_appsignallowengunits(), target);
  }

  // optional double appSignalHighEngUnits = 15 [default = 100];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_appsignalhighengunits(), target);
  }

  // optional int32 appSignalDataFormat = 16 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_appsignaldataformat(), target);
  }

  // optional string validitySignalId = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_validitysignalid().data(), static_cast<int>(this->_internal_validitysignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.DeviceAppSignal.validitySignalId");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_validitysignalid(), target);
  }

  // optional string appSignalBusTypeId = 26;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appsignalbustypeid().data(), static_cast<int>(this->_internal_appsignalbustypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.DeviceAppSignal.appSignalBusTypeId");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_appsignalbustypeid(), target);
  }

  // optional string signalSpecPropsStruct = 40;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signalspecpropsstruct().data(), static_cast<int>(this->_internal_signalspecpropsstruct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.DeviceAppSignal.signalSpecPropsStruct");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_signalspecpropsstruct(), target);
  }

  // optional bool signalSpecPropsStructWasFixed = 41 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_signalspecpropsstructwasfixed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DeviceAppSignal)
  return target;
}

size_t DeviceAppSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DeviceAppSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string validitySignalId = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_validitysignalid());
    }

    // optional string appSignalBusTypeId = 26;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appsignalbustypeid());
    }

    // optional string signalSpecPropsStruct = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signalspecpropsstruct());
    }

    // optional int32 obsoletetype = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_obsoletetype());
    }

    // optional int32 byteOrder = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_byteorder());
    }

    // optional int32 format = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_format());
    }

    // optional int32 size = 4 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional int32 valueOffset = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_valueoffset());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 valueBit = 8 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_valuebit());
    }

    // optional int32 type = 9 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 function = 10 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_function());
    }

    // optional int32 memoryArea = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_memoryarea());
    }

    // optional int32 appSignalLowAdc = 12 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appsignallowadc());
    }

    // optional double appSignalLowEngUnits = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool signalSpecPropsStructWasFixed = 41 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 appSignalHighAdc = 13 [default = 65535];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appsignalhighadc());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 appSignalDataFormat = 16 [default = 2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appsignaldataformat());
    }

    // optional double appSignalHighEngUnits = 15 [default = 100];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAppSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DeviceAppSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceAppSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceAppSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DeviceAppSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DeviceAppSignal)
    MergeFrom(*source);
  }
}

void DeviceAppSignal::MergeFrom(const DeviceAppSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DeviceAppSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_validitysignalid(from._internal_validitysignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_appsignalbustypeid(from._internal_appsignalbustypeid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_signalspecpropsstruct(from._internal_signalspecpropsstruct());
    }
    if (cached_has_bits & 0x00000008u) {
      obsoletetype_ = from.obsoletetype_;
    }
    if (cached_has_bits & 0x00000010u) {
      byteorder_ = from.byteorder_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000080u) {
      valueoffset_ = from.valueoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      valuebit_ = from.valuebit_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      function_ = from.function_;
    }
    if (cached_has_bits & 0x00000800u) {
      memoryarea_ = from.memoryarea_;
    }
    if (cached_has_bits & 0x00001000u) {
      appsignallowadc_ = from.appsignallowadc_;
    }
    if (cached_has_bits & 0x00002000u) {
      appsignallowengunits_ = from.appsignallowengunits_;
    }
    if (cached_has_bits & 0x00004000u) {
      signalspecpropsstructwasfixed_ = from.signalspecpropsstructwasfixed_;
    }
    if (cached_has_bits & 0x00008000u) {
      appsignalhighadc_ = from.appsignalhighadc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      appsignaldataformat_ = from.appsignaldataformat_;
    }
    if (cached_has_bits & 0x00020000u) {
      appsignalhighengunits_ = from.appsignalhighengunits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceAppSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DeviceAppSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAppSignal::CopyFrom(const DeviceAppSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DeviceAppSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAppSignal::IsInitialized() const {
  return true;
}

void DeviceAppSignal::InternalSwap(DeviceAppSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  validitysignalid_.Swap(&other->validitysignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appsignalbustypeid_.Swap(&other->appsignalbustypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signalspecpropsstruct_.Swap(&other->signalspecpropsstruct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceAppSignal, signalspecpropsstructwasfixed_)
      + sizeof(DeviceAppSignal::signalspecpropsstructwasfixed_)
      - PROTOBUF_FIELD_OFFSET(DeviceAppSignal, obsoletetype_)>(
          reinterpret_cast<char*>(&obsoletetype_),
          reinterpret_cast<char*>(&other->obsoletetype_));
  swap(appsignalhighadc_, other->appsignalhighadc_);
  swap(appsignaldataformat_, other->appsignaldataformat_);
  swap(appsignalhighengunits_, other->appsignalhighengunits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAppSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Workstation::_Internal {
 public:
  using HasBits = decltype(std::declval<Workstation>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Workstation::Workstation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Workstation)
}
Workstation::Workstation(const Workstation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Proto.Workstation)
}

void Workstation::SharedCtor() {
type_ = 0;
}

Workstation::~Workstation() {
  // @@protoc_insertion_point(destructor:Proto.Workstation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Workstation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Workstation::ArenaDtor(void* object) {
  Workstation* _this = reinterpret_cast< Workstation* >(object);
  (void)_this;
}
void Workstation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workstation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Workstation::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Workstation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workstation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workstation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Workstation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Workstation)
  return target;
}

size_t Workstation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Workstation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workstation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Workstation)
  GOOGLE_DCHECK_NE(&from, this);
  const Workstation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workstation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Workstation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Workstation)
    MergeFrom(*source);
  }
}

void Workstation::MergeFrom(const Workstation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Workstation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void Workstation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Workstation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workstation::CopyFrom(const Workstation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Workstation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workstation::IsInitialized() const {
  return true;
}

void Workstation::InternalSwap(Workstation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Workstation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Software::_Internal {
 public:
  using HasBits = decltype(std::declval<Software>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Software::Software(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Software)
}
Software::Software(const Software& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Proto.Software)
}

void Software::SharedCtor() {
type_ = 0;
}

Software::~Software() {
  // @@protoc_insertion_point(destructor:Proto.Software)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Software::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Software::ArenaDtor(void* object) {
  Software* _this = reinterpret_cast< Software* >(object);
  (void)_this;
}
void Software::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Software::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Software::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Software)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Software::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Software::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Software)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Software)
  return target;
}

size_t Software::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Software)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Software::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Software)
  GOOGLE_DCHECK_NE(&from, this);
  const Software* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Software>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Software)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Software)
    MergeFrom(*source);
  }
}

void Software::MergeFrom(const Software& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Software)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void Software::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Software)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Software::CopyFrom(const Software& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Software)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {
  return true;
}

void Software::InternalSwap(Software* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Software::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModuleConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleConfiguration>()._has_bits_);
  static void set_has_struct_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ModuleConfiguration::ModuleConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ModuleConfiguration)
}
ModuleConfiguration::ModuleConfiguration(const ModuleConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  struct_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_struct_description()) {
    struct_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_struct_description(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.ModuleConfiguration)
}

void ModuleConfiguration::SharedCtor() {
struct_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModuleConfiguration::~ModuleConfiguration() {
  // @@protoc_insertion_point(destructor:Proto.ModuleConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModuleConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  struct_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModuleConfiguration::ArenaDtor(void* object) {
  ModuleConfiguration* _this = reinterpret_cast< ModuleConfiguration* >(object);
  (void)_this;
}
void ModuleConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModuleConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ModuleConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      struct_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string struct_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_struct_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ModuleConfiguration.struct_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.ModuleConfigurationValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ModuleConfiguration.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ModuleConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string struct_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_struct_description().data(), static_cast<int>(this->_internal_struct_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ModuleConfiguration.struct_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_struct_description(), target);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // optional string name = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ModuleConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ModuleConfiguration)
  return target;
}

size_t ModuleConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ModuleConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ModuleConfigurationValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string struct_description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_struct_description());
    }

    // optional string name = 3 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ModuleConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ModuleConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ModuleConfiguration)
    MergeFrom(*source);
  }
}

void ModuleConfiguration::MergeFrom(const ModuleConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ModuleConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_struct_description(from._internal_struct_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
}

void ModuleConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ModuleConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfiguration::CopyFrom(const ModuleConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ModuleConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfiguration::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(values_)) return false;
  return true;
}

void ModuleConfiguration::InternalSwap(ModuleConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  struct_description_.Swap(&other->struct_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModuleConfigurationValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleConfigurationValue>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ModuleConfigurationValue::ModuleConfigurationValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ModuleConfigurationValue)
}
ModuleConfigurationValue::ModuleConfigurationValue(const ModuleConfigurationValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.ModuleConfigurationValue)
}

void ModuleConfigurationValue::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModuleConfigurationValue::~ModuleConfigurationValue() {
  // @@protoc_insertion_point(destructor:Proto.ModuleConfigurationValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModuleConfigurationValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModuleConfigurationValue::ArenaDtor(void* object) {
  ModuleConfigurationValue* _this = reinterpret_cast< ModuleConfigurationValue* >(object);
  (void)_this;
}
void ModuleConfigurationValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModuleConfigurationValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleConfigurationValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ModuleConfigurationValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleConfigurationValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ModuleConfigurationValue.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ModuleConfigurationValue.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleConfigurationValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ModuleConfigurationValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ModuleConfigurationValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ModuleConfigurationValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ModuleConfigurationValue)
  return target;
}

size_t ModuleConfigurationValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.ModuleConfigurationValue)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t ModuleConfigurationValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ModuleConfigurationValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleConfigurationValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ModuleConfigurationValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleConfigurationValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleConfigurationValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ModuleConfigurationValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ModuleConfigurationValue)
    MergeFrom(*source);
  }
}

void ModuleConfigurationValue::MergeFrom(const ModuleConfigurationValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ModuleConfigurationValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void ModuleConfigurationValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ModuleConfigurationValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfigurationValue::CopyFrom(const ModuleConfigurationValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ModuleConfigurationValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfigurationValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModuleConfigurationValue::InternalSwap(ModuleConfigurationValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleConfigurationValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Property::_Internal {
 public:
  using HasBits = decltype(std::declval<Property>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Property)
}

void Property::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:Proto.Property)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Property::ArenaDtor(void* object) {
  Property* _this = reinterpret_cast< Property* >(object);
  (void)_this;
}
void Property::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Property.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Property.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Property.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Property.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Property)
  return target;
}

size_t Property::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Property)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Property)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Property)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void Property::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalSpecPropValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalSpecPropValue>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isenum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int32val(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint32val(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_int64val(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uint64val(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_doubleval(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_boolval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stringval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

SignalSpecPropValue::SignalSpecPropValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SignalSpecPropValue)
}
SignalSpecPropValue::SignalSpecPropValue(const SignalSpecPropValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  stringval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringval()) {
    stringval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stringval(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&doubleval_) -
    reinterpret_cast<char*>(&type_)) + sizeof(doubleval_));
  // @@protoc_insertion_point(copy_constructor:Proto.SignalSpecPropValue)
}

void SignalSpecPropValue::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stringval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&doubleval_) -
    reinterpret_cast<char*>(&type_)) + sizeof(doubleval_));
}

SignalSpecPropValue::~SignalSpecPropValue() {
  // @@protoc_insertion_point(destructor:Proto.SignalSpecPropValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSpecPropValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stringval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignalSpecPropValue::ArenaDtor(void* object) {
  SignalSpecPropValue* _this = reinterpret_cast< SignalSpecPropValue* >(object);
  (void)_this;
}
void SignalSpecPropValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSpecPropValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalSpecPropValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SignalSpecPropValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stringval_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int64val_) -
        reinterpret_cast<char*>(&type_)) + sizeof(int64val_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&uint64val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&doubleval_) -
        reinterpret_cast<char*>(&uint64val_)) + sizeof(doubleval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSpecPropValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SignalSpecPropValue.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 type = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isEnum = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isenum(&has_bits);
          isenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int32Val = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_int32val(&has_bits);
          int32val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32Val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_uint32val(&has_bits);
          uint32val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int64Val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_int64val(&has_bits);
          int64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uint64Val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_uint64val(&has_bits);
          uint64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double doubleVal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_doubleval(&has_bits);
          doubleval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool boolVal = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_boolval(&has_bits);
          boolval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stringVal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_stringval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SignalSpecPropValue.stringVal");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSpecPropValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SignalSpecPropValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SignalSpecPropValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 type = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // required bool isEnum = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isenum(), target);
  }

  // optional int32 int32Val = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_int32val(), target);
  }

  // optional uint32 uint32Val = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_uint32val(), target);
  }

  // optional int64 int64Val = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_int64val(), target);
  }

  // optional uint64 uint64Val = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_uint64val(), target);
  }

  // optional double doubleVal = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_doubleval(), target);
  }

  // optional bool boolVal = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_boolval(), target);
  }

  // optional string stringVal = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringval().data(), static_cast<int>(this->_internal_stringval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SignalSpecPropValue.stringVal");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_stringval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SignalSpecPropValue)
  return target;
}

size_t SignalSpecPropValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.SignalSpecPropValue)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required int32 type = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (_internal_has_isenum()) {
    // required bool isEnum = 3 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SignalSpecPropValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SignalSpecPropValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 type = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());

    // required bool isEnum = 3 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string stringVal = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stringval());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional bool boolVal = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 int32Val = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32val());
    }

    // optional uint32 uint32Val = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32val());
    }

    // optional int64 int64Val = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64val());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 uint64Val = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64val());
    }

    // optional double doubleVal = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSpecPropValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SignalSpecPropValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSpecPropValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSpecPropValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SignalSpecPropValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SignalSpecPropValue)
    MergeFrom(*source);
  }
}

void SignalSpecPropValue::MergeFrom(const SignalSpecPropValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SignalSpecPropValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stringval(from._internal_stringval());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      isenum_ = from.isenum_;
    }
    if (cached_has_bits & 0x00000010u) {
      boolval_ = from.boolval_;
    }
    if (cached_has_bits & 0x00000020u) {
      int32val_ = from.int32val_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint32val_ = from.uint32val_;
    }
    if (cached_has_bits & 0x00000080u) {
      int64val_ = from.int64val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      uint64val_ = from.uint64val_;
    }
    if (cached_has_bits & 0x00000200u) {
      doubleval_ = from.doubleval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalSpecPropValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SignalSpecPropValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSpecPropValue::CopyFrom(const SignalSpecPropValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SignalSpecPropValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSpecPropValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SignalSpecPropValue::InternalSwap(SignalSpecPropValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stringval_.Swap(&other->stringval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalSpecPropValue, doubleval_)
      + sizeof(SignalSpecPropValue::doubleval_)
      - PROTOBUF_FIELD_OFFSET(SignalSpecPropValue, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSpecPropValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalSpecPropValues::_Internal {
 public:
};

SignalSpecPropValues::SignalSpecPropValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SignalSpecPropValues)
}
SignalSpecPropValues::SignalSpecPropValues(const SignalSpecPropValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SignalSpecPropValues)
}

void SignalSpecPropValues::SharedCtor() {
}

SignalSpecPropValues::~SignalSpecPropValues() {
  // @@protoc_insertion_point(destructor:Proto.SignalSpecPropValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSpecPropValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalSpecPropValues::ArenaDtor(void* object) {
  SignalSpecPropValues* _this = reinterpret_cast< SignalSpecPropValues* >(object);
  (void)_this;
}
void SignalSpecPropValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSpecPropValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalSpecPropValues::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SignalSpecPropValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSpecPropValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.SignalSpecPropValue value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSpecPropValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SignalSpecPropValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.SignalSpecPropValue value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SignalSpecPropValues)
  return target;
}

size_t SignalSpecPropValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SignalSpecPropValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.SignalSpecPropValue value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSpecPropValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SignalSpecPropValues)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSpecPropValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSpecPropValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SignalSpecPropValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SignalSpecPropValues)
    MergeFrom(*source);
  }
}

void SignalSpecPropValues::MergeFrom(const SignalSpecPropValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SignalSpecPropValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void SignalSpecPropValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SignalSpecPropValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSpecPropValues::CopyFrom(const SignalSpecPropValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SignalSpecPropValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSpecPropValues::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_)) return false;
  return true;
}

void SignalSpecPropValues::InternalSwap(SignalSpecPropValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSpecPropValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Address16::_Internal {
 public:
  using HasBits = decltype(std::declval<Address16>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Address16::Address16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Address16)
}
Address16::Address16(const Address16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(bit_));
  // @@protoc_insertion_point(copy_constructor:Proto.Address16)
}

void Address16::SharedCtor() {
offset_ = -1;
bit_ = -1;
}

Address16::~Address16() {
  // @@protoc_insertion_point(destructor:Proto.Address16)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Address16::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Address16::ArenaDtor(void* object) {
  Address16* _this = reinterpret_cast< Address16* >(object);
  (void)_this;
}
void Address16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address16::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Address16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    offset_ = -1;
    bit_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 offset = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bit = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bit(&has_bits);
          bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Address16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 offset = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // required int32 bit = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Address16)
  return target;
}

size_t Address16::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Address16)
  size_t total_size = 0;

  if (_internal_has_offset()) {
    // required int32 offset = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (_internal_has_bit()) {
    // required int32 bit = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bit());
  }

  return total_size;
}
size_t Address16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Address16)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 offset = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());

    // required int32 bit = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Address16)
  GOOGLE_DCHECK_NE(&from, this);
  const Address16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Address16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Address16)
    MergeFrom(*source);
  }
}

void Address16::MergeFrom(const Address16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Address16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      bit_ = from.bit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Address16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address16::CopyFrom(const Address16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Address16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address16::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Address16::InternalSwap(Address16* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(offset_, other->offset_);
  swap(bit_, other->bit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Unit::_Internal {
 public:
  using HasBits = decltype(std::declval<Unit>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Unit::Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Unit)
}
Unit::Unit(const Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Proto.Unit)
}

void Unit::SharedCtor() {
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:Proto.Unit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Unit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Unit::ArenaDtor(void* object) {
  Unit* _this = reinterpret_cast< Unit* >(object);
  (void)_this;
}
void Unit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    caption_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string caption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Unit.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Unit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required string caption = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Unit.caption");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Unit)
  return target;
}

size_t Unit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Unit)
  size_t total_size = 0;

  if (_internal_has_caption()) {
    // required string caption = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption());
  }

  if (_internal_has_id()) {
    // required int32 id = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Unit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string caption = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption());

    // required int32 id = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Unit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Unit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Unit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Unit::InternalSwap(Unit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Unit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnitSet::_Internal {
 public:
};

UnitSet::UnitSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.UnitSet)
}
UnitSet::UnitSet(const UnitSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unit_(from.unit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.UnitSet)
}

void UnitSet::SharedCtor() {
}

UnitSet::~UnitSet() {
  // @@protoc_insertion_point(destructor:Proto.UnitSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitSet::ArenaDtor(void* object) {
  UnitSet* _this = reinterpret_cast< UnitSet* >(object);
  (void)_this;
}
void UnitSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnitSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.UnitSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.Unit unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.UnitSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Unit unit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_unit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.UnitSet)
  return target;
}

size_t UnitSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.UnitSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Unit unit = 1;
  total_size += 1UL * this->_internal_unit_size();
  for (const auto& msg : this->unit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.UnitSet)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.UnitSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.UnitSet)
    MergeFrom(*source);
  }
}

void UnitSet::MergeFrom(const UnitSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.UnitSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_.MergeFrom(from.unit_);
}

void UnitSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.UnitSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitSet::CopyFrom(const UnitSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.UnitSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(unit_)) return false;
  return true;
}

void UnitSet::InternalSwap(UnitSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_.InternalSwap(&other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TuningValue::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningValue>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_intvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_doublevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TuningValue::TuningValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TuningValue)
}
TuningValue::TuningValue(const TuningValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&intvalue_, &from.intvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&intvalue_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Proto.TuningValue)
}

void TuningValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&intvalue_)) + sizeof(type_));
}

TuningValue::~TuningValue() {
  // @@protoc_insertion_point(destructor:Proto.TuningValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuningValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuningValue::ArenaDtor(void* object) {
  TuningValue* _this = reinterpret_cast< TuningValue* >(object);
  (void)_this;
}
void TuningValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuningValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TuningValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TuningValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&intvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&intvalue_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuningValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 intValue = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_intvalue(&has_bits);
          intvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double doubleValue = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_doublevalue(&has_bits);
          doublevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TuningValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int64 intValue = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_intvalue(), target);
  }

  // optional double doubleValue = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_doublevalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TuningValue)
  return target;
}

size_t TuningValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TuningValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 intValue = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_intvalue());
    }

    // optional double doubleValue = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TuningValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TuningValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TuningValue)
    MergeFrom(*source);
  }
}

void TuningValue::MergeFrom(const TuningValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TuningValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      intvalue_ = from.intvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      doublevalue_ = from.doublevalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TuningValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TuningValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningValue::CopyFrom(const TuningValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TuningValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningValue::IsInitialized() const {
  return true;
}

void TuningValue::InternalSwap(TuningValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuningValue, type_)
      + sizeof(TuningValue::type_)
      - PROTOBUF_FIELD_OFFSET(TuningValue, intvalue_)>(
          reinterpret_cast<char*>(&intvalue_),
          reinterpret_cast<char*>(&other->intvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppSignalDbField::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSignalDbField>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_signalgroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_signalinstanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_changesetid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_checkedout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_created(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instancecreated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_instanceaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AppSignalDbField::AppSignalDbField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AppSignalDbField)
}
AppSignalDbField::AppSignalDbField(const AppSignalDbField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&created_, &from.created_,
    static_cast<size_t>(reinterpret_cast<char*>(&changesetid_) -
    reinterpret_cast<char*>(&created_)) + sizeof(changesetid_));
  // @@protoc_insertion_point(copy_constructor:Proto.AppSignalDbField)
}

void AppSignalDbField::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instancecreated_) -
    reinterpret_cast<char*>(&created_)) + sizeof(instancecreated_));
userid_ = -1;
id_ = -1;
signalgroupid_ = -1;
signalinstanceid_ = -1;
changesetid_ = -1;
}

AppSignalDbField::~AppSignalDbField() {
  // @@protoc_insertion_point(destructor:Proto.AppSignalDbField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppSignalDbField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppSignalDbField::ArenaDtor(void* object) {
  AppSignalDbField* _this = reinterpret_cast< AppSignalDbField* >(object);
  (void)_this;
}
void AppSignalDbField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSignalDbField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSignalDbField::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppSignalDbField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instancecreated_) -
        reinterpret_cast<char*>(&created_)) + sizeof(instancecreated_));
    userid_ = -1;
    id_ = -1;
    signalgroupid_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    signalinstanceid_ = -1;
    changesetid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSignalDbField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ID = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalGroupID = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_signalgroupid(&has_bits);
          signalgroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalInstanceID = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_signalinstanceid(&has_bits);
          signalinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 changesetID = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_changesetid(&has_bits);
          changesetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkedOut = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_checkedout(&has_bits);
          checkedout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userID = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 created = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_created(&has_bits);
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deleted = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 instanceCreated = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_instancecreated(&has_bits);
          instancecreated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 instanceAction = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_instanceaction(&has_bits);
          instanceaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSignalDbField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppSignalDbField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ID = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int32 signalGroupID = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_signalgroupid(), target);
  }

  // optional int32 signalInstanceID = 3 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_signalinstanceid(), target);
  }

  // optional int32 changesetID = 4 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_changesetid(), target);
  }

  // optional bool checkedOut = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_checkedout(), target);
  }

  // optional int32 userID = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_userid(), target);
  }

  // optional int64 created = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_created(), target);
  }

  // optional bool deleted = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_deleted(), target);
  }

  // optional int64 instanceCreated = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_instancecreated(), target);
  }

  // optional int32 instanceAction = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_instanceaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppSignalDbField)
  return target;
}

size_t AppSignalDbField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppSignalDbField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 created = 7 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_created());
    }

    // optional bool checkedOut = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool deleted = 8 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 instanceAction = 10 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_instanceaction());
    }

    // optional int64 instanceCreated = 9 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_instancecreated());
    }

    // optional int32 userID = 6 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

    // optional int32 ID = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional int32 signalGroupID = 2 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalgroupid());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 signalInstanceID = 3 [default = -1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signalinstanceid());
    }

    // optional int32 changesetID = 4 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_changesetid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSignalDbField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppSignalDbField)
  GOOGLE_DCHECK_NE(&from, this);
  const AppSignalDbField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppSignalDbField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppSignalDbField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppSignalDbField)
    MergeFrom(*source);
  }
}

void AppSignalDbField::MergeFrom(const AppSignalDbField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppSignalDbField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      created_ = from.created_;
    }
    if (cached_has_bits & 0x00000002u) {
      checkedout_ = from.checkedout_;
    }
    if (cached_has_bits & 0x00000004u) {
      deleted_ = from.deleted_;
    }
    if (cached_has_bits & 0x00000008u) {
      instanceaction_ = from.instanceaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      instancecreated_ = from.instancecreated_;
    }
    if (cached_has_bits & 0x00000020u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      signalgroupid_ = from.signalgroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      signalinstanceid_ = from.signalinstanceid_;
    }
    if (cached_has_bits & 0x00000200u) {
      changesetid_ = from.changesetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppSignalDbField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppSignalDbField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalDbField::CopyFrom(const AppSignalDbField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppSignalDbField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalDbField::IsInitialized() const {
  return true;
}

void AppSignalDbField::InternalSwap(AppSignalDbField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppSignalDbField, instancecreated_)
      + sizeof(AppSignalDbField::instancecreated_)
      - PROTOBUF_FIELD_OFFSET(AppSignalDbField, created_)>(
          reinterpret_cast<char*>(&created_),
          reinterpret_cast<char*>(&other->created_));
  swap(userid_, other->userid_);
  swap(id_, other->id_);
  swap(signalgroupid_, other->signalgroupid_);
  swap(signalinstanceid_, other->signalinstanceid_);
  swap(changesetid_, other->changesetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSignalDbField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateFlagSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<StateFlagSignal>()._has_bits_);
  static void set_has_flagtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flagsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateFlagSignal::StateFlagSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.StateFlagSignal)
}
StateFlagSignal::StateFlagSignal(const StateFlagSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flagsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_flagsignalid()) {
    flagsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flagsignalid(), 
      GetArena());
  }
  flagtype_ = from.flagtype_;
  // @@protoc_insertion_point(copy_constructor:Proto.StateFlagSignal)
}

void StateFlagSignal::SharedCtor() {
flagsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
flagtype_ = 0;
}

StateFlagSignal::~StateFlagSignal() {
  // @@protoc_insertion_point(destructor:Proto.StateFlagSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateFlagSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  flagsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StateFlagSignal::ArenaDtor(void* object) {
  StateFlagSignal* _this = reinterpret_cast< StateFlagSignal* >(object);
  (void)_this;
}
void StateFlagSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateFlagSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StateFlagSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.StateFlagSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    flagsignalid_.ClearNonDefaultToEmpty();
  }
  flagtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateFlagSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 flagType = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flagtype(&has_bits);
          flagtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string flagSignalID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_flagsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.StateFlagSignal.flagSignalID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateFlagSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.StateFlagSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flagType = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flagtype(), target);
  }

  // optional string flagSignalID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_flagsignalid().data(), static_cast<int>(this->_internal_flagsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.StateFlagSignal.flagSignalID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flagsignalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.StateFlagSignal)
  return target;
}

size_t StateFlagSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.StateFlagSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string flagSignalID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_flagsignalid());
    }

    // optional int32 flagType = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_flagtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateFlagSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.StateFlagSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const StateFlagSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateFlagSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.StateFlagSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.StateFlagSignal)
    MergeFrom(*source);
  }
}

void StateFlagSignal::MergeFrom(const StateFlagSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.StateFlagSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_flagsignalid(from._internal_flagsignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      flagtype_ = from.flagtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateFlagSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.StateFlagSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateFlagSignal::CopyFrom(const StateFlagSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.StateFlagSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateFlagSignal::IsInitialized() const {
  return true;
}

void StateFlagSignal::InternalSwap(StateFlagSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flagsignalid_.Swap(&other->flagsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(flagtype_, other->flagtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateFlagSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppSignalCalculatedParam::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSignalCalculatedParam>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Proto::Address16& iobufaddr(const AppSignalCalculatedParam* msg);
  static void set_has_iobufaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::Address16& tuningaddr(const AppSignalCalculatedParam* msg);
  static void set_has_tuningaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::Address16& ualaddr(const AppSignalCalculatedParam* msg);
  static void set_has_ualaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::Address16& regbufaddr(const AppSignalCalculatedParam* msg);
  static void set_has_regbufaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::Address16& regvalueaddr(const AppSignalCalculatedParam* msg);
  static void set_has_regvalueaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::Address16& regvalidityaddr(const AppSignalCalculatedParam* msg);
  static void set_has_regvalidityaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lmramaccess(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isconst(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_constvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::Proto::Address16&
AppSignalCalculatedParam::_Internal::iobufaddr(const AppSignalCalculatedParam* msg) {
  return *msg->iobufaddr_;
}
const ::Proto::Address16&
AppSignalCalculatedParam::_Internal::tuningaddr(const AppSignalCalculatedParam* msg) {
  return *msg->tuningaddr_;
}
const ::Proto::Address16&
AppSignalCalculatedParam::_Internal::ualaddr(const AppSignalCalculatedParam* msg) {
  return *msg->ualaddr_;
}
const ::Proto::Address16&
AppSignalCalculatedParam::_Internal::regbufaddr(const AppSignalCalculatedParam* msg) {
  return *msg->regbufaddr_;
}
const ::Proto::Address16&
AppSignalCalculatedParam::_Internal::regvalueaddr(const AppSignalCalculatedParam* msg) {
  return *msg->regvalueaddr_;
}
const ::Proto::Address16&
AppSignalCalculatedParam::_Internal::regvalidityaddr(const AppSignalCalculatedParam* msg) {
  return *msg->regvalidityaddr_;
}
AppSignalCalculatedParam::AppSignalCalculatedParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stateflagssignals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AppSignalCalculatedParam)
}
AppSignalCalculatedParam::AppSignalCalculatedParam(const AppSignalCalculatedParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stateflagssignals_(from.stateflagssignals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iobufaddr()) {
    iobufaddr_ = new ::Proto::Address16(*from.iobufaddr_);
  } else {
    iobufaddr_ = nullptr;
  }
  if (from._internal_has_tuningaddr()) {
    tuningaddr_ = new ::Proto::Address16(*from.tuningaddr_);
  } else {
    tuningaddr_ = nullptr;
  }
  if (from._internal_has_ualaddr()) {
    ualaddr_ = new ::Proto::Address16(*from.ualaddr_);
  } else {
    ualaddr_ = nullptr;
  }
  if (from._internal_has_regbufaddr()) {
    regbufaddr_ = new ::Proto::Address16(*from.regbufaddr_);
  } else {
    regbufaddr_ = nullptr;
  }
  if (from._internal_has_regvalueaddr()) {
    regvalueaddr_ = new ::Proto::Address16(*from.regvalueaddr_);
  } else {
    regvalueaddr_ = nullptr;
  }
  if (from._internal_has_regvalidityaddr()) {
    regvalidityaddr_ = new ::Proto::Address16(*from.regvalidityaddr_);
  } else {
    regvalidityaddr_ = nullptr;
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&constvalue_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(constvalue_));
  // @@protoc_insertion_point(copy_constructor:Proto.AppSignalCalculatedParam)
}

void AppSignalCalculatedParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobufaddr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&constvalue_) -
    reinterpret_cast<char*>(&iobufaddr_)) + sizeof(constvalue_));
}

AppSignalCalculatedParam::~AppSignalCalculatedParam() {
  // @@protoc_insertion_point(destructor:Proto.AppSignalCalculatedParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppSignalCalculatedParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete iobufaddr_;
  if (this != internal_default_instance()) delete tuningaddr_;
  if (this != internal_default_instance()) delete ualaddr_;
  if (this != internal_default_instance()) delete regbufaddr_;
  if (this != internal_default_instance()) delete regvalueaddr_;
  if (this != internal_default_instance()) delete regvalidityaddr_;
}

void AppSignalCalculatedParam::ArenaDtor(void* object) {
  AppSignalCalculatedParam* _this = reinterpret_cast< AppSignalCalculatedParam* >(object);
  (void)_this;
}
void AppSignalCalculatedParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSignalCalculatedParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSignalCalculatedParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppSignalCalculatedParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stateflagssignals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iobufaddr_ != nullptr);
      iobufaddr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tuningaddr_ != nullptr);
      tuningaddr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ualaddr_ != nullptr);
      ualaddr_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(regbufaddr_ != nullptr);
      regbufaddr_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(regvalueaddr_ != nullptr);
      regvalueaddr_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(regvalidityaddr_ != nullptr);
      regvalidityaddr_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lmramaccess_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(lmramaccess_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&isconst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&constvalue_) -
        reinterpret_cast<char*>(&isconst_)) + sizeof(constvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSignalCalculatedParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 hash = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Address16 ioBufAddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_iobufaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Address16 tuningAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuningaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Address16 ualAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ualaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Address16 regBufAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_regbufaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Address16 regValueAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_regvalueaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Address16 regValidityAddr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_regvalidityaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lmRamAccess = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lmramaccess(&has_bits);
          lmramaccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isConst = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_isconst(&has_bits);
          isconst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double constValue = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_constvalue(&has_bits);
          constvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.StateFlagSignal stateFlagsSignals = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stateflagssignals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSignalCalculatedParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppSignalCalculatedParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  // optional .Proto.Address16 ioBufAddr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::iobufaddr(this), target, stream);
  }

  // optional .Proto.Address16 tuningAddr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tuningaddr(this), target, stream);
  }

  // optional .Proto.Address16 ualAddr = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ualaddr(this), target, stream);
  }

  // optional .Proto.Address16 regBufAddr = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::regbufaddr(this), target, stream);
  }

  // optional .Proto.Address16 regValueAddr = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::regvalueaddr(this), target, stream);
  }

  // optional .Proto.Address16 regValidityAddr = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::regvalidityaddr(this), target, stream);
  }

  // optional int32 lmRamAccess = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_lmramaccess(), target);
  }

  // optional bool isConst = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isconst(), target);
  }

  // optional double constValue = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_constvalue(), target);
  }

  // repeated .Proto.StateFlagSignal stateFlagsSignals = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stateflagssignals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_stateflagssignals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppSignalCalculatedParam)
  return target;
}

size_t AppSignalCalculatedParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppSignalCalculatedParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.StateFlagSignal stateFlagsSignals = 11;
  total_size += 1UL * this->_internal_stateflagssignals_size();
  for (const auto& msg : this->stateflagssignals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .Proto.Address16 ioBufAddr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *iobufaddr_);
    }

    // optional .Proto.Address16 tuningAddr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuningaddr_);
    }

    // optional .Proto.Address16 ualAddr = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ualaddr_);
    }

    // optional .Proto.Address16 regBufAddr = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regbufaddr_);
    }

    // optional .Proto.Address16 regValueAddr = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regvalueaddr_);
    }

    // optional .Proto.Address16 regValidityAddr = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regvalidityaddr_);
    }

    // optional uint64 hash = 1 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_hash());
    }

    // optional int32 lmRamAccess = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lmramaccess());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool isConst = 9 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional double constValue = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSignalCalculatedParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppSignalCalculatedParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AppSignalCalculatedParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppSignalCalculatedParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppSignalCalculatedParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppSignalCalculatedParam)
    MergeFrom(*source);
  }
}

void AppSignalCalculatedParam::MergeFrom(const AppSignalCalculatedParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppSignalCalculatedParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stateflagssignals_.MergeFrom(from.stateflagssignals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_iobufaddr()->::Proto::Address16::MergeFrom(from._internal_iobufaddr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tuningaddr()->::Proto::Address16::MergeFrom(from._internal_tuningaddr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ualaddr()->::Proto::Address16::MergeFrom(from._internal_ualaddr());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_regbufaddr()->::Proto::Address16::MergeFrom(from._internal_regbufaddr());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_regvalueaddr()->::Proto::Address16::MergeFrom(from._internal_regvalueaddr());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_regvalidityaddr()->::Proto::Address16::MergeFrom(from._internal_regvalidityaddr());
    }
    if (cached_has_bits & 0x00000040u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      lmramaccess_ = from.lmramaccess_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      isconst_ = from.isconst_;
    }
    if (cached_has_bits & 0x00000200u) {
      constvalue_ = from.constvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppSignalCalculatedParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppSignalCalculatedParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalCalculatedParam::CopyFrom(const AppSignalCalculatedParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppSignalCalculatedParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalCalculatedParam::IsInitialized() const {
  if (_internal_has_iobufaddr()) {
    if (!iobufaddr_->IsInitialized()) return false;
  }
  if (_internal_has_tuningaddr()) {
    if (!tuningaddr_->IsInitialized()) return false;
  }
  if (_internal_has_ualaddr()) {
    if (!ualaddr_->IsInitialized()) return false;
  }
  if (_internal_has_regbufaddr()) {
    if (!regbufaddr_->IsInitialized()) return false;
  }
  if (_internal_has_regvalueaddr()) {
    if (!regvalueaddr_->IsInitialized()) return false;
  }
  if (_internal_has_regvalidityaddr()) {
    if (!regvalidityaddr_->IsInitialized()) return false;
  }
  return true;
}

void AppSignalCalculatedParam::InternalSwap(AppSignalCalculatedParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stateflagssignals_.InternalSwap(&other->stateflagssignals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppSignalCalculatedParam, constvalue_)
      + sizeof(AppSignalCalculatedParam::constvalue_)
      - PROTOBUF_FIELD_OFFSET(AppSignalCalculatedParam, iobufaddr_)>(
          reinterpret_cast<char*>(&iobufaddr_),
          reinterpret_cast<char*>(&other->iobufaddr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSignalCalculatedParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSignal>()._has_bits_);
  static void set_has_appsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_customappsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lmequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bustypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_excludefrombuild(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_signaltype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_inouttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_datasize(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_byteorder(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_analogsignalformat(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enabletuning(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::Proto::TuningValue& tuningdefaultvalue(const AppSignal* msg);
  static void set_has_tuningdefaultvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Proto::TuningValue& tuninglowbound(const AppSignal* msg);
  static void set_has_tuninglowbound(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::Proto::TuningValue& tuninghighbound(const AppSignal* msg);
  static void set_has_tuninghighbound(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_acquire(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_decimalplaces(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_coarseaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_fineaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_adaptiveaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_specpropstruct(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_specpropvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Proto::AppSignalDbField& dbfield(const AppSignal* msg);
  static void set_has_dbfield(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::Proto::AppSignalCalculatedParam& calcparam(const AppSignal* msg);
  static void set_has_calcparam(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::Proto::TuningValue&
AppSignal::_Internal::tuningdefaultvalue(const AppSignal* msg) {
  return *msg->tuningdefaultvalue_;
}
const ::Proto::TuningValue&
AppSignal::_Internal::tuninglowbound(const AppSignal* msg) {
  return *msg->tuninglowbound_;
}
const ::Proto::TuningValue&
AppSignal::_Internal::tuninghighbound(const AppSignal* msg) {
  return *msg->tuninghighbound_;
}
const ::Proto::AppSignalDbField&
AppSignal::_Internal::dbfield(const AppSignal* msg) {
  return *msg->dbfield_;
}
const ::Proto::AppSignalCalculatedParam&
AppSignal::_Internal::calcparam(const AppSignal* msg) {
  return *msg->calcparam_;
}
AppSignal::AppSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AppSignal)
}
AppSignal::AppSignal(const AppSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appsignalid()) {
    appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appsignalid(), 
      GetArena());
  }
  customappsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customappsignalid()) {
    customappsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customappsignalid(), 
      GetArena());
  }
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipmentid()) {
    equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipmentid(), 
      GetArena());
  }
  lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmequipmentid()) {
    lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmequipmentid(), 
      GetArena());
  }
  bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bustypeid()) {
    bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bustypeid(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  specpropstruct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_specpropstruct()) {
    specpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specpropstruct(), 
      GetArena());
  }
  specpropvalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_specpropvalues()) {
    specpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specpropvalues(), 
      GetArena());
  }
  if (from._internal_has_tuningdefaultvalue()) {
    tuningdefaultvalue_ = new ::Proto::TuningValue(*from.tuningdefaultvalue_);
  } else {
    tuningdefaultvalue_ = nullptr;
  }
  if (from._internal_has_tuninglowbound()) {
    tuninglowbound_ = new ::Proto::TuningValue(*from.tuninglowbound_);
  } else {
    tuninglowbound_ = nullptr;
  }
  if (from._internal_has_tuninghighbound()) {
    tuninghighbound_ = new ::Proto::TuningValue(*from.tuninghighbound_);
  } else {
    tuninghighbound_ = nullptr;
  }
  if (from._internal_has_dbfield()) {
    dbfield_ = new ::Proto::AppSignalDbField(*from.dbfield_);
  } else {
    dbfield_ = nullptr;
  }
  if (from._internal_has_calcparam()) {
    calcparam_ = new ::Proto::AppSignalCalculatedParam(*from.calcparam_);
  } else {
    calcparam_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&fineaperture_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fineaperture_));
  // @@protoc_insertion_point(copy_constructor:Proto.AppSignal)
}

void AppSignal::SharedCtor() {
appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customappsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
specpropstruct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
specpropvalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tuningdefaultvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adaptiveaperture_) -
    reinterpret_cast<char*>(&tuningdefaultvalue_)) + sizeof(adaptiveaperture_));
decimalplaces_ = 2;
signaltype_ = 1;
inouttype_ = 2;
byteorder_ = 1;
analogsignalformat_ = 1;
coarseaperture_ = 1;
fineaperture_ = 0.5;
}

AppSignal::~AppSignal() {
  // @@protoc_insertion_point(destructor:Proto.AppSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customappsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bustypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specpropstruct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specpropvalues_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tuningdefaultvalue_;
  if (this != internal_default_instance()) delete tuninglowbound_;
  if (this != internal_default_instance()) delete tuninghighbound_;
  if (this != internal_default_instance()) delete dbfield_;
  if (this != internal_default_instance()) delete calcparam_;
}

void AppSignal::ArenaDtor(void* object) {
  AppSignal* _this = reinterpret_cast< AppSignal* >(object);
  (void)_this;
}
void AppSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      appsignalid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      customappsignalid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      lmequipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      bustypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      specpropstruct_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      specpropvalues_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tuningdefaultvalue_ != nullptr);
      tuningdefaultvalue_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tuninglowbound_ != nullptr);
      tuninglowbound_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tuninghighbound_ != nullptr);
      tuninghighbound_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(dbfield_ != nullptr);
      dbfield_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(calcparam_ != nullptr);
      calcparam_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datasize_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(datasize_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&excludefrombuild_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adaptiveaperture_) -
        reinterpret_cast<char*>(&excludefrombuild_)) + sizeof(adaptiveaperture_));
    decimalplaces_ = 2;
    signaltype_ = 1;
    inouttype_ = 2;
  }
  if (cached_has_bits & 0x0f000000u) {
    byteorder_ = 1;
    analogsignalformat_ = 1;
    coarseaperture_ = 1;
    fineaperture_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string appSignalID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_appsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.appSignalID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customAppSignalID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_customappsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.customAppSignalID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equipmentID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.equipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmEquipmentID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_lmequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.lmEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string busTypeID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bustypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.busTypeID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channel = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excludeFromBuild = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_excludefrombuild(&has_bits);
          excludefrombuild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signalType = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_signaltype(&has_bits);
          signaltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inOutType = 17 [default = 2];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_inouttype(&has_bits);
          inouttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dataSize = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_datasize(&has_bits);
          datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 byteOrder = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_byteorder(&has_bits);
          byteorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogSignalFormat = 26 [default = 1];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_analogsignalformat(&has_bits);
          analogsignalformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unit = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.unit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableTuning = 71 [default = false];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enabletuning(&has_bits);
          enabletuning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue tuningDefaultValue = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuningdefaultvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue tuningLowBound = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuninglowbound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue tuningHighBound = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuninghighbound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acquire = 81 [default = false];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_acquire(&has_bits);
          acquire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool archive = 82 [default = false];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_archive(&has_bits);
          archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 decimalPlaces = 83 [default = 2];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_decimalplaces(&has_bits);
          decimalplaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coarseAperture = 84 [default = 1];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_coarseaperture(&has_bits);
          coarseaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double fineAperture = 85 [default = 0.5];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_fineaperture(&has_bits);
          fineaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool adaptiveAperture = 86 [default = false];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_adaptiveaperture(&has_bits);
          adaptiveaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string specPropStruct = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_specpropstruct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.specPropStruct");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes specPropValues = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_specpropvalues();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.AppSignal.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<738>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Proto.AppSignalDbField dbField = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_dbfield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.AppSignalCalculatedParam calcParam = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_calcparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appSignalID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appsignalid().data(), static_cast<int>(this->_internal_appsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.appSignalID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appsignalid(), target);
  }

  // optional string customAppSignalID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_customappsignalid().data(), static_cast<int>(this->_internal_customappsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.customAppSignalID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_customappsignalid(), target);
  }

  // optional string caption = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.caption");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_caption(), target);
  }

  // optional string equipmentID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_equipmentid().data(), static_cast<int>(this->_internal_equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.equipmentID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_equipmentid(), target);
  }

  // optional string lmEquipmentID = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmequipmentid().data(), static_cast<int>(this->_internal_lmequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.lmEquipmentID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lmequipmentid(), target);
  }

  // optional string busTypeID = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bustypeid().data(), static_cast<int>(this->_internal_bustypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.busTypeID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bustypeid(), target);
  }

  // optional int32 channel = 7 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_channel(), target);
  }

  // optional bool excludeFromBuild = 8 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_excludefrombuild(), target);
  }

  // optional int32 signalType = 16 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_signaltype(), target);
  }

  // optional int32 inOutType = 17 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_inouttype(), target);
  }

  // optional int32 dataSize = 21 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_datasize(), target);
  }

  // optional int32 byteOrder = 22 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_byteorder(), target);
  }

  // optional int32 analogSignalFormat = 26 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_analogsignalformat(), target);
  }

  // optional string unit = 27;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.unit");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_unit(), target);
  }

  // optional bool enableTuning = 71 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_enabletuning(), target);
  }

  // optional .Proto.TuningValue tuningDefaultValue = 72;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        72, _Internal::tuningdefaultvalue(this), target, stream);
  }

  // optional .Proto.TuningValue tuningLowBound = 73;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        73, _Internal::tuninglowbound(this), target, stream);
  }

  // optional .Proto.TuningValue tuningHighBound = 74;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        74, _Internal::tuninghighbound(this), target, stream);
  }

  // optional bool acquire = 81 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(81, this->_internal_acquire(), target);
  }

  // optional bool archive = 82 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(82, this->_internal_archive(), target);
  }

  // optional int32 decimalPlaces = 83 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(83, this->_internal_decimalplaces(), target);
  }

  // optional double coarseAperture = 84 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(84, this->_internal_coarseaperture(), target);
  }

  // optional double fineAperture = 85 [default = 0.5];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(85, this->_internal_fineaperture(), target);
  }

  // optional bool adaptiveAperture = 86 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(86, this->_internal_adaptiveaperture(), target);
  }

  // optional string specPropStruct = 90;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_specpropstruct().data(), static_cast<int>(this->_internal_specpropstruct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.specPropStruct");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_specpropstruct(), target);
  }

  // optional bytes specPropValues = 91;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        91, this->_internal_specpropvalues(), target);
  }

  // repeated string tags = 92;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.AppSignal.tags");
    target = stream->WriteString(92, s, target);
  }

  // optional .Proto.AppSignalDbField dbField = 120;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        120, _Internal::dbfield(this), target, stream);
  }

  // optional .Proto.AppSignalCalculatedParam calcParam = 121;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        121, _Internal::calcparam(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppSignal)
  return target;
}

size_t AppSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 92;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string appSignalID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appsignalid());
    }

    // optional string customAppSignalID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customappsignalid());
    }

    // optional string caption = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional string equipmentID = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equipmentid());
    }

    // optional string lmEquipmentID = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmequipmentid());
    }

    // optional string busTypeID = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bustypeid());
    }

    // optional string unit = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit());
    }

    // optional string specPropStruct = 90;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specpropstruct());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes specPropValues = 91;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_specpropvalues());
    }

    // optional .Proto.TuningValue tuningDefaultValue = 72;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuningdefaultvalue_);
    }

    // optional .Proto.TuningValue tuningLowBound = 73;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuninglowbound_);
    }

    // optional .Proto.TuningValue tuningHighBound = 74;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuninghighbound_);
    }

    // optional .Proto.AppSignalDbField dbField = 120;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dbfield_);
    }

    // optional .Proto.AppSignalCalculatedParam calcParam = 121;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calcparam_);
    }

    // optional int32 channel = 7 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channel());
    }

    // optional int32 dataSize = 21 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_datasize());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool excludeFromBuild = 8 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool enableTuning = 71 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool acquire = 81 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool archive = 82 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool adaptiveAperture = 86 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional int32 decimalPlaces = 83 [default = 2];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_decimalplaces());
    }

    // optional int32 signalType = 16 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signaltype());
    }

    // optional int32 inOutType = 17 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inouttype());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional int32 byteOrder = 22 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_byteorder());
    }

    // optional int32 analogSignalFormat = 26 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogsignalformat());
    }

    // optional double coarseAperture = 84 [default = 1];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double fineAperture = 85 [default = 0.5];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const AppSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppSignal)
    MergeFrom(*source);
  }
}

void AppSignal::MergeFrom(const AppSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appsignalid(from._internal_appsignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_customappsignalid(from._internal_customappsignalid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_equipmentid(from._internal_equipmentid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_lmequipmentid(from._internal_lmequipmentid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_bustypeid(from._internal_bustypeid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_unit(from._internal_unit());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_specpropstruct(from._internal_specpropstruct());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_specpropvalues(from._internal_specpropvalues());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tuningdefaultvalue()->::Proto::TuningValue::MergeFrom(from._internal_tuningdefaultvalue());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tuninglowbound()->::Proto::TuningValue::MergeFrom(from._internal_tuninglowbound());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tuninghighbound()->::Proto::TuningValue::MergeFrom(from._internal_tuninghighbound());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_dbfield()->::Proto::AppSignalDbField::MergeFrom(from._internal_dbfield());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_calcparam()->::Proto::AppSignalCalculatedParam::MergeFrom(from._internal_calcparam());
    }
    if (cached_has_bits & 0x00004000u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00008000u) {
      datasize_ = from.datasize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      excludefrombuild_ = from.excludefrombuild_;
    }
    if (cached_has_bits & 0x00020000u) {
      enabletuning_ = from.enabletuning_;
    }
    if (cached_has_bits & 0x00040000u) {
      acquire_ = from.acquire_;
    }
    if (cached_has_bits & 0x00080000u) {
      archive_ = from.archive_;
    }
    if (cached_has_bits & 0x00100000u) {
      adaptiveaperture_ = from.adaptiveaperture_;
    }
    if (cached_has_bits & 0x00200000u) {
      decimalplaces_ = from.decimalplaces_;
    }
    if (cached_has_bits & 0x00400000u) {
      signaltype_ = from.signaltype_;
    }
    if (cached_has_bits & 0x00800000u) {
      inouttype_ = from.inouttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      byteorder_ = from.byteorder_;
    }
    if (cached_has_bits & 0x02000000u) {
      analogsignalformat_ = from.analogsignalformat_;
    }
    if (cached_has_bits & 0x04000000u) {
      coarseaperture_ = from.coarseaperture_;
    }
    if (cached_has_bits & 0x08000000u) {
      fineaperture_ = from.fineaperture_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignal::CopyFrom(const AppSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignal::IsInitialized() const {
  if (_internal_has_calcparam()) {
    if (!calcparam_->IsInitialized()) return false;
  }
  return true;
}

void AppSignal::InternalSwap(AppSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  appsignalid_.Swap(&other->appsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customappsignalid_.Swap(&other->customappsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipmentid_.Swap(&other->equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmequipmentid_.Swap(&other->lmequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bustypeid_.Swap(&other->bustypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  specpropstruct_.Swap(&other->specpropstruct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  specpropvalues_.Swap(&other->specpropvalues_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppSignal, adaptiveaperture_)
      + sizeof(AppSignal::adaptiveaperture_)
      - PROTOBUF_FIELD_OFFSET(AppSignal, tuningdefaultvalue_)>(
          reinterpret_cast<char*>(&tuningdefaultvalue_),
          reinterpret_cast<char*>(&other->tuningdefaultvalue_));
  swap(decimalplaces_, other->decimalplaces_);
  swap(signaltype_, other->signaltype_);
  swap(inouttype_, other->inouttype_);
  swap(byteorder_, other->byteorder_);
  swap(analogsignalformat_, other->analogsignalformat_);
  swap(coarseaperture_, other->coarseaperture_);
  swap(fineaperture_, other->fineaperture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppSignalSet::_Internal {
 public:
};

AppSignalSet::AppSignalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appsignal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AppSignalSet)
}
AppSignalSet::AppSignalSet(const AppSignalSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      appsignal_(from.appsignal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.AppSignalSet)
}

void AppSignalSet::SharedCtor() {
}

AppSignalSet::~AppSignalSet() {
  // @@protoc_insertion_point(destructor:Proto.AppSignalSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppSignalSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppSignalSet::ArenaDtor(void* object) {
  AppSignalSet* _this = reinterpret_cast< AppSignalSet* >(object);
  (void)_this;
}
void AppSignalSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSignalSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSignalSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppSignalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appsignal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSignalSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.AppSignal appSignal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appsignal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSignalSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppSignalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.AppSignal appSignal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appsignal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_appsignal(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppSignalSet)
  return target;
}

size_t AppSignalSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppSignalSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppSignal appSignal = 1;
  total_size += 1UL * this->_internal_appsignal_size();
  for (const auto& msg : this->appsignal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSignalSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppSignalSet)
  GOOGLE_DCHECK_NE(&from, this);
  const AppSignalSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppSignalSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppSignalSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppSignalSet)
    MergeFrom(*source);
  }
}

void AppSignalSet::MergeFrom(const AppSignalSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppSignalSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appsignal_.MergeFrom(from.appsignal_);
}

void AppSignalSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppSignalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalSet::CopyFrom(const AppSignalSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppSignalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(appsignal_)) return false;
  return true;
}

void AppSignalSet::InternalSwap(AppSignalSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appsignal_.InternalSwap(&other->appsignal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSignalSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoAppSignalData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoAppSignalData>()._has_bits_);
  static void set_has_bustypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_datasize(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_byteorder(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_analogsignalformat(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enabletuning(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::Proto::TuningValue& tuningdefaultvalue(const ProtoAppSignalData* msg);
  static void set_has_tuningdefaultvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Proto::TuningValue& tuninglowbound(const ProtoAppSignalData* msg);
  static void set_has_tuninglowbound(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::Proto::TuningValue& tuninghighbound(const ProtoAppSignalData* msg);
  static void set_has_tuninghighbound(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_acquire(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_decimalplaces(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_coarseaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_fineaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_adaptiveaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_excludefrombuild(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_userspecpropstruct(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_userspecpropvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::Proto::TuningValue&
ProtoAppSignalData::_Internal::tuningdefaultvalue(const ProtoAppSignalData* msg) {
  return *msg->tuningdefaultvalue_;
}
const ::Proto::TuningValue&
ProtoAppSignalData::_Internal::tuninglowbound(const ProtoAppSignalData* msg) {
  return *msg->tuninglowbound_;
}
const ::Proto::TuningValue&
ProtoAppSignalData::_Internal::tuninghighbound(const ProtoAppSignalData* msg) {
  return *msg->tuninghighbound_;
}
ProtoAppSignalData::ProtoAppSignalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ProtoAppSignalData)
}
ProtoAppSignalData::ProtoAppSignalData(const ProtoAppSignalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bustypeid()) {
    bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bustypeid(), 
      GetArena());
  }
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tags()) {
    tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tags(), 
      GetArena());
  }
  userspecpropstruct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userspecpropstruct()) {
    userspecpropstruct_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userspecpropstruct(), 
      GetArena());
  }
  userspecpropvalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userspecpropvalues()) {
    userspecpropvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userspecpropvalues(), 
      GetArena());
  }
  if (from._internal_has_tuningdefaultvalue()) {
    tuningdefaultvalue_ = new ::Proto::TuningValue(*from.tuningdefaultvalue_);
  } else {
    tuningdefaultvalue_ = nullptr;
  }
  if (from._internal_has_tuninglowbound()) {
    tuninglowbound_ = new ::Proto::TuningValue(*from.tuninglowbound_);
  } else {
    tuninglowbound_ = nullptr;
  }
  if (from._internal_has_tuninghighbound()) {
    tuninghighbound_ = new ::Proto::TuningValue(*from.tuninghighbound_);
  } else {
    tuninghighbound_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&fineaperture_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fineaperture_));
  // @@protoc_insertion_point(copy_constructor:Proto.ProtoAppSignalData)
}

void ProtoAppSignalData::SharedCtor() {
bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userspecpropstruct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userspecpropvalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tuningdefaultvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&excludefrombuild_) -
    reinterpret_cast<char*>(&tuningdefaultvalue_)) + sizeof(excludefrombuild_));
decimalplaces_ = 2;
datasize_ = 32;
byteorder_ = 1;
analogsignalformat_ = 2;
acquire_ = true;
archive_ = true;
coarseaperture_ = 1;
fineaperture_ = 0.5;
}

ProtoAppSignalData::~ProtoAppSignalData() {
  // @@protoc_insertion_point(destructor:Proto.ProtoAppSignalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoAppSignalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bustypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userspecpropstruct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userspecpropvalues_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tuningdefaultvalue_;
  if (this != internal_default_instance()) delete tuninglowbound_;
  if (this != internal_default_instance()) delete tuninghighbound_;
}

void ProtoAppSignalData::ArenaDtor(void* object) {
  ProtoAppSignalData* _this = reinterpret_cast< ProtoAppSignalData* >(object);
  (void)_this;
}
void ProtoAppSignalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoAppSignalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoAppSignalData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ProtoAppSignalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bustypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      tags_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      userspecpropstruct_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      userspecpropvalues_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tuningdefaultvalue_ != nullptr);
      tuningdefaultvalue_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tuninglowbound_ != nullptr);
      tuninglowbound_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(tuninghighbound_ != nullptr);
    tuninghighbound_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&excludefrombuild_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(excludefrombuild_));
    decimalplaces_ = 2;
    datasize_ = 32;
    byteorder_ = 1;
  }
  if (cached_has_bits & 0x001f0000u) {
    analogsignalformat_ = 2;
    acquire_ = true;
    archive_ = true;
    coarseaperture_ = 1;
    fineaperture_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoAppSignalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string busTypeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bustypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ProtoAppSignalData.busTypeID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ProtoAppSignalData.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channel = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dataSize = 4 [default = 32];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_datasize(&has_bits);
          datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 byteOrder = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_byteorder(&has_bits);
          byteorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogSignalFormat = 6 [default = 2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_analogsignalformat(&has_bits);
          analogsignalformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ProtoAppSignalData.unit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableTuning = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enabletuning(&has_bits);
          enabletuning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue tuningDefaultValue = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuningdefaultvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue tuningLowBound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuninglowbound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TuningValue tuningHighBound = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuninghighbound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acquire = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_acquire(&has_bits);
          acquire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool archive = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_archive(&has_bits);
          archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 decimalPlaces = 14 [default = 2];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_decimalplaces(&has_bits);
          decimalplaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coarseAperture = 15 [default = 1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_coarseaperture(&has_bits);
          coarseaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double fineAperture = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_fineaperture(&has_bits);
          fineaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool adaptiveAperture = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_adaptiveaperture(&has_bits);
          adaptiveaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excludefromBuild = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_excludefrombuild(&has_bits);
          excludefrombuild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tags = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ProtoAppSignalData.tags");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userSpecPropStruct = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_userspecpropstruct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ProtoAppSignalData.userSpecPropStruct");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes userSpecPropValues = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_userspecpropvalues();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoAppSignalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ProtoAppSignalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string busTypeID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bustypeid().data(), static_cast<int>(this->_internal_bustypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ProtoAppSignalData.busTypeID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bustypeid(), target);
  }

  // optional string caption = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ProtoAppSignalData.caption");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caption(), target);
  }

  // optional int32 channel = 3 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // optional int32 dataSize = 4 [default = 32];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_datasize(), target);
  }

  // optional int32 byteOrder = 5 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_byteorder(), target);
  }

  // optional int32 analogSignalFormat = 6 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_analogsignalformat(), target);
  }

  // optional string unit = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ProtoAppSignalData.unit");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_unit(), target);
  }

  // optional bool enableTuning = 8 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enabletuning(), target);
  }

  // optional .Proto.TuningValue tuningDefaultValue = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tuningdefaultvalue(this), target, stream);
  }

  // optional .Proto.TuningValue tuningLowBound = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tuninglowbound(this), target, stream);
  }

  // optional .Proto.TuningValue tuningHighBound = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tuninghighbound(this), target, stream);
  }

  // optional bool acquire = 12 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_acquire(), target);
  }

  // optional bool archive = 13 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_archive(), target);
  }

  // optional int32 decimalPlaces = 14 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_decimalplaces(), target);
  }

  // optional double coarseAperture = 15 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_coarseaperture(), target);
  }

  // optional double fineAperture = 16 [default = 0.5];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_fineaperture(), target);
  }

  // optional bool adaptiveAperture = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_adaptiveaperture(), target);
  }

  // optional bool excludefromBuild = 18 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_excludefrombuild(), target);
  }

  // optional string tags = 19;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ProtoAppSignalData.tags");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_tags(), target);
  }

  // optional string userSpecPropStruct = 20;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userspecpropstruct().data(), static_cast<int>(this->_internal_userspecpropstruct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ProtoAppSignalData.userSpecPropStruct");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_userspecpropstruct(), target);
  }

  // optional bytes userSpecPropValues = 21;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_userspecpropvalues(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ProtoAppSignalData)
  return target;
}

size_t ProtoAppSignalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ProtoAppSignalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string busTypeID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bustypeid());
    }

    // optional string caption = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional string unit = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit());
    }

    // optional string tags = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tags());
    }

    // optional string userSpecPropStruct = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userspecpropstruct());
    }

    // optional bytes userSpecPropValues = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_userspecpropvalues());
    }

    // optional .Proto.TuningValue tuningDefaultValue = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuningdefaultvalue_);
    }

    // optional .Proto.TuningValue tuningLowBound = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuninglowbound_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .Proto.TuningValue tuningHighBound = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuninghighbound_);
    }

    // optional int32 channel = 3 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channel());
    }

    // optional bool enableTuning = 8 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool adaptiveAperture = 17 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool excludefromBuild = 18 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional int32 decimalPlaces = 14 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_decimalplaces());
    }

    // optional int32 dataSize = 4 [default = 32];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_datasize());
    }

    // optional int32 byteOrder = 5 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_byteorder());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int32 analogSignalFormat = 6 [default = 2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogsignalformat());
    }

    // optional bool acquire = 12 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool archive = 13 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional double coarseAperture = 15 [default = 1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double fineAperture = 16 [default = 0.5];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoAppSignalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ProtoAppSignalData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoAppSignalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoAppSignalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ProtoAppSignalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ProtoAppSignalData)
    MergeFrom(*source);
  }
}

void ProtoAppSignalData::MergeFrom(const ProtoAppSignalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ProtoAppSignalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bustypeid(from._internal_bustypeid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_unit(from._internal_unit());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_tags(from._internal_tags());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_userspecpropstruct(from._internal_userspecpropstruct());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_userspecpropvalues(from._internal_userspecpropvalues());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tuningdefaultvalue()->::Proto::TuningValue::MergeFrom(from._internal_tuningdefaultvalue());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tuninglowbound()->::Proto::TuningValue::MergeFrom(from._internal_tuninglowbound());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tuninghighbound()->::Proto::TuningValue::MergeFrom(from._internal_tuninghighbound());
    }
    if (cached_has_bits & 0x00000200u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000400u) {
      enabletuning_ = from.enabletuning_;
    }
    if (cached_has_bits & 0x00000800u) {
      adaptiveaperture_ = from.adaptiveaperture_;
    }
    if (cached_has_bits & 0x00001000u) {
      excludefrombuild_ = from.excludefrombuild_;
    }
    if (cached_has_bits & 0x00002000u) {
      decimalplaces_ = from.decimalplaces_;
    }
    if (cached_has_bits & 0x00004000u) {
      datasize_ = from.datasize_;
    }
    if (cached_has_bits & 0x00008000u) {
      byteorder_ = from.byteorder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      analogsignalformat_ = from.analogsignalformat_;
    }
    if (cached_has_bits & 0x00020000u) {
      acquire_ = from.acquire_;
    }
    if (cached_has_bits & 0x00040000u) {
      archive_ = from.archive_;
    }
    if (cached_has_bits & 0x00080000u) {
      coarseaperture_ = from.coarseaperture_;
    }
    if (cached_has_bits & 0x00100000u) {
      fineaperture_ = from.fineaperture_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoAppSignalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ProtoAppSignalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAppSignalData::CopyFrom(const ProtoAppSignalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ProtoAppSignalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAppSignalData::IsInitialized() const {
  return true;
}

void ProtoAppSignalData::InternalSwap(ProtoAppSignalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bustypeid_.Swap(&other->bustypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tags_.Swap(&other->tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userspecpropstruct_.Swap(&other->userspecpropstruct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userspecpropvalues_.Swap(&other->userspecpropvalues_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoAppSignalData, excludefrombuild_)
      + sizeof(ProtoAppSignalData::excludefrombuild_)
      - PROTOBUF_FIELD_OFFSET(ProtoAppSignalData, tuningdefaultvalue_)>(
          reinterpret_cast<char*>(&tuningdefaultvalue_),
          reinterpret_cast<char*>(&other->tuningdefaultvalue_));
  swap(decimalplaces_, other->decimalplaces_);
  swap(datasize_, other->datasize_);
  swap(byteorder_, other->byteorder_);
  swap(analogsignalformat_, other->analogsignalformat_);
  swap(acquire_, other->acquire_);
  swap(archive_, other->archive_);
  swap(coarseaperture_, other->coarseaperture_);
  swap(fineaperture_, other->fineaperture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoAppSignalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppSignalState::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSignalState>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_systemtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_localtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_planttime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_archiveid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_packetno(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AppSignalState::AppSignalState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.AppSignalState)
}
AppSignalState::AppSignalState(const AppSignalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&archiveid_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(archiveid_));
  // @@protoc_insertion_point(copy_constructor:Proto.AppSignalState)
}

void AppSignalState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&planttime_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(planttime_));
archiveid_ = PROTOBUF_LONGLONG(-1);
}

AppSignalState::~AppSignalState() {
  // @@protoc_insertion_point(destructor:Proto.AppSignalState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppSignalState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppSignalState::ArenaDtor(void* object) {
  AppSignalState* _this = reinterpret_cast< AppSignalState* >(object);
  (void)_this;
}
void AppSignalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSignalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSignalState::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppSignalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&planttime_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(planttime_));
    archiveid_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSignalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 hash = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double value = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 systemTime = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_systemtime(&has_bits);
          systemtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 localTime = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_localtime(&has_bits);
          localtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 plantTime = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_planttime(&has_bits);
          planttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 archiveId = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_archiveid(&has_bits);
          archiveid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional uint32 packetNo = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_packetno(&has_bits);
          packetno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSignalState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppSignalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  // optional double value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // optional uint32 flags = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional sfixed64 systemTime = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(4, this->_internal_systemtime(), target);
  }

  // optional sfixed64 localTime = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(5, this->_internal_localtime(), target);
  }

  // optional sfixed64 plantTime = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_planttime(), target);
  }

  // optional sfixed64 archiveId = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(7, this->_internal_archiveid(), target);
  }

  // optional uint32 packetNo = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_packetno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppSignalState)
  return target;
}

size_t AppSignalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppSignalState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 hash = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_hash());
    }

    // optional double value = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 systemTime = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 localTime = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 flags = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 packetNo = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packetno());
    }

    // optional sfixed64 plantTime = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 archiveId = 7 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSignalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppSignalState)
  GOOGLE_DCHECK_NE(&from, this);
  const AppSignalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppSignalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppSignalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppSignalState)
    MergeFrom(*source);
  }
}

void AppSignalState::MergeFrom(const AppSignalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppSignalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      systemtime_ = from.systemtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      localtime_ = from.localtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      packetno_ = from.packetno_;
    }
    if (cached_has_bits & 0x00000040u) {
      planttime_ = from.planttime_;
    }
    if (cached_has_bits & 0x00000080u) {
      archiveid_ = from.archiveid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppSignalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppSignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalState::CopyFrom(const AppSignalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppSignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalState::IsInitialized() const {
  return true;
}

void AppSignalState::InternalSwap(AppSignalState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppSignalState, planttime_)
      + sizeof(AppSignalState::planttime_)
      - PROTOBUF_FIELD_OFFSET(AppSignalState, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
  swap(archiveid_, other->archiveid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSignalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Connection::_Internal {
 public:
  using HasBits = decltype(std::declval<Connection>()._has_bits_);
  static void set_has_connectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port1equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port2equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port1rawdatadescription(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_port2rawdatadescription(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_manualsettings(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_disabledataid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_generatevhdfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_port1txstartaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_port1txwordsquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_port1rxwordsquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_port2txstartaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_port2txwordsquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_port2rxwordsquantity(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::Proto::Uuid& uuid(const Connection* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_port1enableserial(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_port1serialmode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_port1enableduplex(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_port2enableserial(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_port2serialmode(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_port2enableduplex(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_obsoletemode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obsoleteserialmode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_obsoleteenableduplex(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::Proto::Uuid&
Connection::_Internal::uuid(const Connection* msg) {
  return *msg->uuid_;
}
Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connectionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connectionid()) {
    connectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connectionid(), 
      GetArena());
  }
  port1equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_port1equipmentid()) {
    port1equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port1equipmentid(), 
      GetArena());
  }
  port2equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_port2equipmentid()) {
    port2equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port2equipmentid(), 
      GetArena());
  }
  port1rawdatadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_port1rawdatadescription()) {
    port1rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port1rawdatadescription(), 
      GetArena());
  }
  port2rawdatadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_port2rawdatadescription()) {
    port2rawdatadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port2rawdatadescription(), 
      GetArena());
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  ::memcpy(&obsoleteserialmode_, &from.obsoleteserialmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&port2rxwordsquantity_) -
    reinterpret_cast<char*>(&obsoleteserialmode_)) + sizeof(port2rxwordsquantity_));
  // @@protoc_insertion_point(copy_constructor:Proto.Connection)
}

void Connection::SharedCtor() {
connectionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port1equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port2equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port1rawdatadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port2rawdatadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(type_));
port1txwordsquantity_ = 479;
port1rxwordsquantity_ = 479;
port2txwordsquantity_ = 479;
port2rxwordsquantity_ = 479;
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:Proto.Connection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connectionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port1equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port2equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port1rawdatadescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port2rawdatadescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uuid_;
}

void Connection::ArenaDtor(void* object) {
  Connection* _this = reinterpret_cast< Connection* >(object);
  (void)_this;
}
void Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      connectionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      port1equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      port2equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      port1rawdatadescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      port2rawdatadescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&obsoleteserialmode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obsoletemode_) -
        reinterpret_cast<char*>(&obsoleteserialmode_)) + sizeof(obsoletemode_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&port1txstartaddress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port2enableserial_) -
        reinterpret_cast<char*>(&port1txstartaddress_)) + sizeof(port2enableserial_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&port2enableduplex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&port2enableduplex_)) + sizeof(type_));
    port1txwordsquantity_ = 479;
    port1rxwordsquantity_ = 479;
    port2txwordsquantity_ = 479;
  }
  port2rxwordsquantity_ = 479;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ConnectionID = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Connection.ConnectionID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Port1EquipmentID = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port1equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Connection.Port1EquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Port2EquipmentID = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_port2equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Connection.Port2EquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Port1RawDataDescription = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_port1rawdatadescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Connection.Port1RawDataDescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Port2RawDataDescription = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_port2rawdatadescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Connection.Port2RawDataDescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ObsoleteSerialMode = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_obsoleteserialmode(&has_bits);
          obsoleteserialmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ObsoleteMode = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_obsoletemode(&has_bits);
          obsoletemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ObsoleteEnableDuplex = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_obsoleteenableduplex(&has_bits);
          obsoleteenableduplex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ManualSettings = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_manualsettings(&has_bits);
          manualsettings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DisableDataID = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_disabledataid(&has_bits);
          disabledataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool GenerateVHDFile = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_generatevhdfile(&has_bits);
          generatevhdfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port1TxStartAddress = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_port1txstartaddress(&has_bits);
          port1txstartaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port1TxWordsQuantity = 15 [default = 479];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_port1txwordsquantity(&has_bits);
          port1txwordsquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port1RxWordsQuantity = 16 [default = 479];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_port1rxwordsquantity(&has_bits);
          port1rxwordsquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port2TxStartAddress = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_port2txstartaddress(&has_bits);
          port2txstartaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port2TxWordsQuantity = 18 [default = 479];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_port2txwordsquantity(&has_bits);
          port2txwordsquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port2RxWordsQuantity = 19 [default = 479];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_port2rxwordsquantity(&has_bits);
          port2rxwordsquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Uuid uuid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool Port1EnableSerial = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_port1enableserial(&has_bits);
          port1enableserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port1SerialMode = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_port1serialmode(&has_bits);
          port1serialmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool Port1EnableDuplex = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_port1enableduplex(&has_bits);
          port1enableduplex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool Port2EnableSerial = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_port2enableserial(&has_bits);
          port2enableserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Port2SerialMode = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_port2serialmode(&has_bits);
          port2serialmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool Port2EnableDuplex = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_port2enableduplex(&has_bits);
          port2enableduplex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Type = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ConnectionID = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Connection.ConnectionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  // optional string Port1EquipmentID = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port1equipmentid().data(), static_cast<int>(this->_internal_port1equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Connection.Port1EquipmentID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port1equipmentid(), target);
  }

  // optional string Port2EquipmentID = 4 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port2equipmentid().data(), static_cast<int>(this->_internal_port2equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Connection.Port2EquipmentID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_port2equipmentid(), target);
  }

  // optional string Port1RawDataDescription = 5 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port1rawdatadescription().data(), static_cast<int>(this->_internal_port1rawdatadescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Connection.Port1RawDataDescription");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_port1rawdatadescription(), target);
  }

  // optional string Port2RawDataDescription = 6 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port2rawdatadescription().data(), static_cast<int>(this->_internal_port2rawdatadescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Connection.Port2RawDataDescription");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_port2rawdatadescription(), target);
  }

  // optional int32 ObsoleteSerialMode = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_obsoleteserialmode(), target);
  }

  // optional int32 ObsoleteMode = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_obsoletemode(), target);
  }

  // optional bool ObsoleteEnableDuplex = 10 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_obsoleteenableduplex(), target);
  }

  // optional bool ManualSettings = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_manualsettings(), target);
  }

  // optional bool DisableDataID = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_disabledataid(), target);
  }

  // optional bool GenerateVHDFile = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_generatevhdfile(), target);
  }

  // optional int32 Port1TxStartAddress = 14 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_port1txstartaddress(), target);
  }

  // optional int32 Port1TxWordsQuantity = 15 [default = 479];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_port1txwordsquantity(), target);
  }

  // optional int32 Port1RxWordsQuantity = 16 [default = 479];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_port1rxwordsquantity(), target);
  }

  // optional int32 Port2TxStartAddress = 17 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_port2txstartaddress(), target);
  }

  // optional int32 Port2TxWordsQuantity = 18 [default = 479];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_port2txwordsquantity(), target);
  }

  // optional int32 Port2RxWordsQuantity = 19 [default = 479];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_port2rxwordsquantity(), target);
  }

  // optional .Proto.Uuid uuid = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::uuid(this), target, stream);
  }

  // optional bool Port1EnableSerial = 21 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_port1enableserial(), target);
  }

  // optional int32 Port1SerialMode = 22 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_port1serialmode(), target);
  }

  // optional bool Port1EnableDuplex = 23 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_port1enableduplex(), target);
  }

  // optional bool Port2EnableSerial = 24 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_port2enableserial(), target);
  }

  // optional int32 Port2SerialMode = 25 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_port2serialmode(), target);
  }

  // optional bool Port2EnableDuplex = 26 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_port2enableduplex(), target);
  }

  // optional int32 Type = 27 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Connection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ConnectionID = 2 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connectionid());
    }

    // optional string Port1EquipmentID = 3 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port1equipmentid());
    }

    // optional string Port2EquipmentID = 4 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port2equipmentid());
    }

    // optional string Port1RawDataDescription = 5 [default = ""];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port1rawdatadescription());
    }

    // optional string Port2RawDataDescription = 6 [default = ""];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port2rawdatadescription());
    }

    // optional .Proto.Uuid uuid = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uuid_);
    }

    // optional int32 ObsoleteSerialMode = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_obsoleteserialmode());
    }

    // optional int32 ObsoleteMode = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_obsoletemode());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 Port1TxStartAddress = 14 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port1txstartaddress());
    }

    // optional bool ManualSettings = 11 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool DisableDataID = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool GenerateVHDFile = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool Port1EnableSerial = 21 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional int32 Port2TxStartAddress = 17 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port2txstartaddress());
    }

    // optional bool Port1EnableDuplex = 23 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool Port2EnableSerial = 24 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool Port2EnableDuplex = 26 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool ObsoleteEnableDuplex = 10 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional int32 Port1SerialMode = 22 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port1serialmode());
    }

    // optional int32 Port2SerialMode = 25 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port2serialmode());
    }

    // optional int32 Type = 27 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 Port1TxWordsQuantity = 15 [default = 479];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port1txwordsquantity());
    }

    // optional int32 Port1RxWordsQuantity = 16 [default = 479];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port1rxwordsquantity());
    }

    // optional int32 Port2TxWordsQuantity = 18 [default = 479];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port2txwordsquantity());
    }

  }
  // optional int32 Port2RxWordsQuantity = 19 [default = 479];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port2rxwordsquantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Connection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connectionid(from._internal_connectionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_port1equipmentid(from._internal_port1equipmentid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_port2equipmentid(from._internal_port2equipmentid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_port1rawdatadescription(from._internal_port1rawdatadescription());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_port2rawdatadescription(from._internal_port2rawdatadescription());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000040u) {
      obsoleteserialmode_ = from.obsoleteserialmode_;
    }
    if (cached_has_bits & 0x00000080u) {
      obsoletemode_ = from.obsoletemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      port1txstartaddress_ = from.port1txstartaddress_;
    }
    if (cached_has_bits & 0x00000200u) {
      manualsettings_ = from.manualsettings_;
    }
    if (cached_has_bits & 0x00000400u) {
      disabledataid_ = from.disabledataid_;
    }
    if (cached_has_bits & 0x00000800u) {
      generatevhdfile_ = from.generatevhdfile_;
    }
    if (cached_has_bits & 0x00001000u) {
      port1enableserial_ = from.port1enableserial_;
    }
    if (cached_has_bits & 0x00002000u) {
      port2txstartaddress_ = from.port2txstartaddress_;
    }
    if (cached_has_bits & 0x00004000u) {
      port1enableduplex_ = from.port1enableduplex_;
    }
    if (cached_has_bits & 0x00008000u) {
      port2enableserial_ = from.port2enableserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      port2enableduplex_ = from.port2enableduplex_;
    }
    if (cached_has_bits & 0x00020000u) {
      obsoleteenableduplex_ = from.obsoleteenableduplex_;
    }
    if (cached_has_bits & 0x00040000u) {
      port1serialmode_ = from.port1serialmode_;
    }
    if (cached_has_bits & 0x00080000u) {
      port2serialmode_ = from.port2serialmode_;
    }
    if (cached_has_bits & 0x00100000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00200000u) {
      port1txwordsquantity_ = from.port1txwordsquantity_;
    }
    if (cached_has_bits & 0x00400000u) {
      port1rxwordsquantity_ = from.port1rxwordsquantity_;
    }
    if (cached_has_bits & 0x00800000u) {
      port2txwordsquantity_ = from.port2txwordsquantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_port2rxwordsquantity(from._internal_port2rxwordsquantity());
  }
}

void Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connectionid_.Swap(&other->connectionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port1equipmentid_.Swap(&other->port1equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port2equipmentid_.Swap(&other->port2equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port1rawdatadescription_.Swap(&other->port1rawdatadescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port2rawdatadescription_.Swap(&other->port2rawdatadescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, type_)
      + sizeof(Connection::type_)
      - PROTOBUF_FIELD_OFFSET(Connection, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
  swap(port1txwordsquantity_, other->port1txwordsquantity_);
  swap(port1rxwordsquantity_, other->port1rxwordsquantity_);
  swap(port2txwordsquantity_, other->port2txwordsquantity_);
  swap(port2rxwordsquantity_, other->port2rxwordsquantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaDetailsSet::_Internal {
 public:
};

SchemaDetailsSet::SchemaDetailsSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  schemasdetails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaDetailsSet)
}
SchemaDetailsSet::SchemaDetailsSet(const SchemaDetailsSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      schemasdetails_(from.schemasdetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaDetailsSet)
}

void SchemaDetailsSet::SharedCtor() {
}

SchemaDetailsSet::~SchemaDetailsSet() {
  // @@protoc_insertion_point(destructor:Proto.SchemaDetailsSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaDetailsSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SchemaDetailsSet::ArenaDtor(void* object) {
  SchemaDetailsSet* _this = reinterpret_cast< SchemaDetailsSet* >(object);
  (void)_this;
}
void SchemaDetailsSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaDetailsSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaDetailsSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaDetailsSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schemasdetails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaDetailsSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.SchemaDetails schemasDetails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schemasdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaDetailsSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaDetailsSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.SchemaDetails schemasDetails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schemasdetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_schemasdetails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaDetailsSet)
  return target;
}

size_t SchemaDetailsSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaDetailsSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.SchemaDetails schemasDetails = 2;
  total_size += 1UL * this->_internal_schemasdetails_size();
  for (const auto& msg : this->schemasdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaDetailsSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaDetailsSet)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaDetailsSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaDetailsSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaDetailsSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaDetailsSet)
    MergeFrom(*source);
  }
}

void SchemaDetailsSet::MergeFrom(const SchemaDetailsSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaDetailsSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schemasdetails_.MergeFrom(from.schemasdetails_);
}

void SchemaDetailsSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaDetailsSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaDetailsSet::CopyFrom(const SchemaDetailsSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaDetailsSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaDetailsSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(schemasdetails_)) return false;
  return true;
}

void SchemaDetailsSet::InternalSwap(SchemaDetailsSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  schemasdetails_.InternalSwap(&other->schemasdetails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaDetailsSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchemaDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaDetails>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_schemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_excludedfrombuild(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_equipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lmdescriptionfile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SchemaDetails::SchemaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signalids_(arena),
  labels_(arena),
  connections_(arena),
  guids_(arena),
  tags_(arena),
  loopbacks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SchemaDetails)
}
SchemaDetails::SchemaDetails(const SchemaDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signalids_(from.signalids_),
      labels_(from.labels_),
      connections_(from.connections_),
      guids_(from.guids_),
      tags_(from.tags_),
      loopbacks_(from.loopbacks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schemaid()) {
    schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schemaid(), 
      GetArena());
  }
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipmentid()) {
    equipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipmentid(), 
      GetArena());
  }
  lmdescriptionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmdescriptionfile()) {
    lmdescriptionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmdescriptionfile(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&excludedfrombuild_) -
    reinterpret_cast<char*>(&version_)) + sizeof(excludedfrombuild_));
  // @@protoc_insertion_point(copy_constructor:Proto.SchemaDetails)
}

void SchemaDetails::SharedCtor() {
schemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
equipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lmdescriptionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&excludedfrombuild_) -
    reinterpret_cast<char*>(&version_)) + sizeof(excludedfrombuild_));
}

SchemaDetails::~SchemaDetails() {
  // @@protoc_insertion_point(destructor:Proto.SchemaDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchemaDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  schemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmdescriptionfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaDetails::ArenaDtor(void* object) {
  SchemaDetails* _this = reinterpret_cast< SchemaDetails* >(object);
  (void)_this;
}
void SchemaDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SchemaDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalids_.Clear();
  labels_.Clear();
  connections_.Clear();
  guids_.Clear();
  tags_.Clear();
  loopbacks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      schemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      equipmentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      lmdescriptionfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&excludedfrombuild_) -
        reinterpret_cast<char*>(&version_)) + sizeof(excludedfrombuild_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string schemaId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_schemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.schemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caption = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excludedfromBuild = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_excludedfrombuild(&has_bits);
          excludedfrombuild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equipmentId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_equipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.equipmentId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lmDescriptionFile = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_lmdescriptionfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.lmDescriptionFile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string signalIds = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_signalids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.signalIds");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string labels = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.labels");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string connections = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_connections();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.connections");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Uuid guids = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tags = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string loopbacks = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_loopbacks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SchemaDetails.loopbacks");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SchemaDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional string schemaId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_schemaid().data(), static_cast<int>(this->_internal_schemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.schemaId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_schemaid(), target);
  }

  // optional string caption = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.caption");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_caption(), target);
  }

  // optional bool excludedfromBuild = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_excludedfrombuild(), target);
  }

  // optional string equipmentId = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_equipmentid().data(), static_cast<int>(this->_internal_equipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.equipmentId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_equipmentid(), target);
  }

  // optional string lmDescriptionFile = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmdescriptionfile().data(), static_cast<int>(this->_internal_lmdescriptionfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.lmDescriptionFile");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lmdescriptionfile(), target);
  }

  // optional string path = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_path(), target);
  }

  // repeated string signalIds = 20;
  for (int i = 0, n = this->_internal_signalids_size(); i < n; i++) {
    const auto& s = this->_internal_signalids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.signalIds");
    target = stream->WriteString(20, s, target);
  }

  // repeated string labels = 21;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.labels");
    target = stream->WriteString(21, s, target);
  }

  // repeated string connections = 22;
  for (int i = 0, n = this->_internal_connections_size(); i < n; i++) {
    const auto& s = this->_internal_connections(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.connections");
    target = stream->WriteString(22, s, target);
  }

  // repeated .Proto.Uuid guids = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_guids(i), target, stream);
  }

  // repeated string tags = 24;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.tags");
    target = stream->WriteString(24, s, target);
  }

  // repeated string loopbacks = 25;
  for (int i = 0, n = this->_internal_loopbacks_size(); i < n; i++) {
    const auto& s = this->_internal_loopbacks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SchemaDetails.loopbacks");
    target = stream->WriteString(25, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SchemaDetails)
  return target;
}

size_t SchemaDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SchemaDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string signalIds = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signalids_.size());
  for (int i = 0, n = signalids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signalids_.Get(i));
  }

  // repeated string labels = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // repeated string connections = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(connections_.size());
  for (int i = 0, n = connections_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      connections_.Get(i));
  }

  // repeated .Proto.Uuid guids = 23;
  total_size += 2UL * this->_internal_guids_size();
  for (const auto& msg : this->guids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string loopbacks = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loopbacks_.size());
  for (int i = 0, n = loopbacks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loopbacks_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string schemaId = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_schemaid());
    }

    // optional string caption = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional string equipmentId = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equipmentid());
    }

    // optional string lmDescriptionFile = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lmdescriptionfile());
    }

    // optional string path = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional int32 version = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional bool excludedfromBuild = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SchemaDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchemaDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SchemaDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SchemaDetails)
    MergeFrom(*source);
  }
}

void SchemaDetails::MergeFrom(const SchemaDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SchemaDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalids_.MergeFrom(from.signalids_);
  labels_.MergeFrom(from.labels_);
  connections_.MergeFrom(from.connections_);
  guids_.MergeFrom(from.guids_);
  tags_.MergeFrom(from.tags_);
  loopbacks_.MergeFrom(from.loopbacks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_schemaid(from._internal_schemaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_equipmentid(from._internal_equipmentid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_lmdescriptionfile(from._internal_lmdescriptionfile());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      excludedfrombuild_ = from.excludedfrombuild_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SchemaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaDetails::CopyFrom(const SchemaDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SchemaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaDetails::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(guids_)) return false;
  return true;
}

void SchemaDetails::InternalSwap(SchemaDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalids_.InternalSwap(&other->signalids_);
  labels_.InternalSwap(&other->labels_);
  connections_.InternalSwap(&other->connections_);
  guids_.InternalSwap(&other->guids_);
  tags_.InternalSwap(&other->tags_);
  loopbacks_.InternalSwap(&other->loopbacks_);
  schemaid_.Swap(&other->schemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipmentid_.Swap(&other->equipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lmdescriptionfile_.Swap(&other->lmdescriptionfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaDetails, excludedfrombuild_)
      + sizeof(SchemaDetails::excludedfrombuild_)
      - PROTOBUF_FIELD_OFFSET(SchemaDetails, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArchSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<ArchSignal>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isanalog(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ArchSignal::ArchSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ArchSignal)
}
ArchSignal::ArchSignal(const ArchSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appsignalid()) {
    appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appsignalid(), 
      GetArena());
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&isanalog_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(isanalog_));
  // @@protoc_insertion_point(copy_constructor:Proto.ArchSignal)
}

void ArchSignal::SharedCtor() {
appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isanalog_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(isanalog_));
}

ArchSignal::~ArchSignal() {
  // @@protoc_insertion_point(destructor:Proto.ArchSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArchSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArchSignal::ArenaDtor(void* object) {
  ArchSignal* _this = reinterpret_cast< ArchSignal* >(object);
  (void)_this;
}
void ArchSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArchSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArchSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ArchSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    appsignalid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isanalog_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(isanalog_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isAnalog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isanalog(&has_bits);
          isanalog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string appSignalID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ArchSignal.appSignalID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ArchSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  // required bool isAnalog = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isanalog(), target);
  }

  // required string appSignalID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appsignalid().data(), static_cast<int>(this->_internal_appsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ArchSignal.appSignalID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appsignalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ArchSignal)
  return target;
}

size_t ArchSignal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.ArchSignal)
  size_t total_size = 0;

  if (_internal_has_appsignalid()) {
    // required string appSignalID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appsignalid());
  }

  if (_internal_has_hash()) {
    // required uint64 hash = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hash());
  }

  if (_internal_has_isanalog()) {
    // required bool isAnalog = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ArchSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ArchSignal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string appSignalID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appsignalid());

    // required uint64 hash = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hash());

    // required bool isAnalog = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ArchSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ArchSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ArchSignal)
    MergeFrom(*source);
  }
}

void ArchSignal::MergeFrom(const ArchSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ArchSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appsignalid(from._internal_appsignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      isanalog_ = from.isanalog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArchSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ArchSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchSignal::CopyFrom(const ArchSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ArchSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchSignal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ArchSignal::InternalSwap(ArchSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalid_.Swap(&other->appsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArchSignal, isanalog_)
      + sizeof(ArchSignal::isanalog_)
      - PROTOBUF_FIELD_OFFSET(ArchSignal, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArchSignals::_Internal {
 public:
};

ArchSignals::ArchSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  archsignals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ArchSignals)
}
ArchSignals::ArchSignals(const ArchSignals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      archsignals_(from.archsignals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.ArchSignals)
}

void ArchSignals::SharedCtor() {
}

ArchSignals::~ArchSignals() {
  // @@protoc_insertion_point(destructor:Proto.ArchSignals)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArchSignals::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArchSignals::ArenaDtor(void* object) {
  ArchSignals* _this = reinterpret_cast< ArchSignals* >(object);
  (void)_this;
}
void ArchSignals::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArchSignals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArchSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ArchSignals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  archsignals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchSignals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.ArchSignal archSignals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_archsignals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchSignals::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ArchSignals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.ArchSignal archSignals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_archsignals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_archsignals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ArchSignals)
  return target;
}

size_t ArchSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ArchSignals)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ArchSignal archSignals = 1;
  total_size += 1UL * this->_internal_archsignals_size();
  for (const auto& msg : this->archsignals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchSignals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ArchSignals)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchSignals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchSignals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ArchSignals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ArchSignals)
    MergeFrom(*source);
  }
}

void ArchSignals::MergeFrom(const ArchSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ArchSignals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  archsignals_.MergeFrom(from.archsignals_);
}

void ArchSignals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ArchSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchSignals::CopyFrom(const ArchSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ArchSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchSignals::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(archsignals_)) return false;
  return true;
}

void ArchSignals::InternalSwap(ArchSignals* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  archsignals_.InternalSwap(&other->archsignals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchSignals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BusSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<BusSignal>()._has_bits_);
  static void set_has_signalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_analogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_coarseaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_fineaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_adaptiveaperture(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bustypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inbusoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_inbusdiscretebitno(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_inbusanalogsize(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_inbusanalogformat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_inbusanalogbyteorder(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_busanaloglowlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_busanaloghighlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inbusanaloglowlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_inbusanaloghighlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

BusSignal::BusSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.BusSignal)
}
BusSignal::BusSignal(const BusSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signalid()) {
    signalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signalid(), 
      GetArena());
  }
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_units()) {
    units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_units(), 
      GetArena());
  }
  bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bustypeid()) {
    bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bustypeid(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&fineaperture_) -
    reinterpret_cast<char*>(&type_)) + sizeof(fineaperture_));
  // @@protoc_insertion_point(copy_constructor:Proto.BusSignal)
}

void BusSignal::SharedCtor() {
signalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inbusanaloghighlimit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(inbusanaloghighlimit_));
precision_ = 2;
coarseaperture_ = 1;
fineaperture_ = 0.5;
}

BusSignal::~BusSignal() {
  // @@protoc_insertion_point(destructor:Proto.BusSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bustypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusSignal::ArenaDtor(void* object) {
  BusSignal* _this = reinterpret_cast< BusSignal* >(object);
  (void)_this;
}
void BusSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BusSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      signalid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      units_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bustypeid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inbusoffset_) -
        reinterpret_cast<char*>(&type_)) + sizeof(inbusoffset_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&inbusdiscretebitno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inbusanaloghighlimit_) -
        reinterpret_cast<char*>(&inbusdiscretebitno_)) + sizeof(inbusanaloghighlimit_));
  }
  if (cached_has_bits & 0x00070000u) {
    precision_ = 2;
    coarseaperture_ = 1;
    fineaperture_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string signalId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.BusSignal.signalId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.BusSignal.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.BusSignal.units");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 analogFormat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_analogformat(&has_bits);
          analogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 11 [default = 2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coarseAperture = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_coarseaperture(&has_bits);
          coarseaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double fineAperture = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_fineaperture(&has_bits);
          fineaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool adaptiveAperture = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_adaptiveaperture(&has_bits);
          adaptiveaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string busTypeId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bustypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.BusSignal.busTypeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inbusOffset = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_inbusoffset(&has_bits);
          inbusoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inbusDiscreteBitNo = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inbusdiscretebitno(&has_bits);
          inbusdiscretebitno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inbusAnalogSize = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_inbusanalogsize(&has_bits);
          inbusanalogsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inbusAnalogFormat = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_inbusanalogformat(&has_bits);
          inbusanalogformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inbusAnalogByteOrder = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_inbusanalogbyteorder(&has_bits);
          inbusanalogbyteorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double busAnalogLowLimit = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_busanaloglowlimit(&has_bits);
          busanaloglowlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double busAnalogHighLimit = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_busanaloghighlimit(&has_bits);
          busanaloghighlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double inbusAnalogLowLimit = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_inbusanaloglowlimit(&has_bits);
          inbusanaloglowlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double inbusAnalogHighLimit = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_inbusanaloghighlimit(&has_bits);
          inbusanaloghighlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BusSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signalId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signalid().data(), static_cast<int>(this->_internal_signalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.BusSignal.signalId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signalid(), target);
  }

  // optional string caption = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.BusSignal.caption");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caption(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // optional string units = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.BusSignal.units");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_units(), target);
  }

  // optional int32 analogFormat = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_analogformat(), target);
  }

  // optional int32 precision = 11 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_precision(), target);
  }

  // optional double coarseAperture = 12 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_coarseaperture(), target);
  }

  // optional double fineAperture = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_fineaperture(), target);
  }

  // optional bool adaptiveAperture = 14 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_adaptiveaperture(), target);
  }

  // optional string busTypeId = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bustypeid().data(), static_cast<int>(this->_internal_bustypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.BusSignal.busTypeId");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_bustypeid(), target);
  }

  // optional int32 inbusOffset = 32;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_inbusoffset(), target);
  }

  // optional int32 inbusDiscreteBitNo = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_inbusdiscretebitno(), target);
  }

  // optional int32 inbusAnalogSize = 50;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_inbusanalogsize(), target);
  }

  // optional int32 inbusAnalogFormat = 51;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_inbusanalogformat(), target);
  }

  // optional int32 inbusAnalogByteOrder = 52;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_inbusanalogbyteorder(), target);
  }

  // optional double busAnalogLowLimit = 53;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(53, this->_internal_busanaloglowlimit(), target);
  }

  // optional double busAnalogHighLimit = 54;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(54, this->_internal_busanaloghighlimit(), target);
  }

  // optional double inbusAnalogLowLimit = 55;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(55, this->_internal_inbusanaloglowlimit(), target);
  }

  // optional double inbusAnalogHighLimit = 56;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(56, this->_internal_inbusanaloghighlimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BusSignal)
  return target;
}

size_t BusSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BusSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string signalId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signalid());
    }

    // optional string caption = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional string units = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional string busTypeId = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bustypeid());
    }

    // optional int32 type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 analogFormat = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_analogformat());
    }

    // optional bool adaptiveAperture = 14 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 inbusOffset = 32;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inbusoffset());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 inbusDiscreteBitNo = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inbusdiscretebitno());
    }

    // optional int32 inbusAnalogSize = 50;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inbusanalogsize());
    }

    // optional int32 inbusAnalogFormat = 51;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inbusanalogformat());
    }

    // optional int32 inbusAnalogByteOrder = 52;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inbusanalogbyteorder());
    }

    // optional double busAnalogLowLimit = 53;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double busAnalogHighLimit = 54;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double inbusAnalogLowLimit = 55;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double inbusAnalogHighLimit = 56;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 precision = 11 [default = 2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

    // optional double coarseAperture = 12 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double fineAperture = 13 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BusSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const BusSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BusSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BusSignal)
    MergeFrom(*source);
  }
}

void BusSignal::MergeFrom(const BusSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BusSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signalid(from._internal_signalid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bustypeid(from._internal_bustypeid());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      analogformat_ = from.analogformat_;
    }
    if (cached_has_bits & 0x00000040u) {
      adaptiveaperture_ = from.adaptiveaperture_;
    }
    if (cached_has_bits & 0x00000080u) {
      inbusoffset_ = from.inbusoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      inbusdiscretebitno_ = from.inbusdiscretebitno_;
    }
    if (cached_has_bits & 0x00000200u) {
      inbusanalogsize_ = from.inbusanalogsize_;
    }
    if (cached_has_bits & 0x00000400u) {
      inbusanalogformat_ = from.inbusanalogformat_;
    }
    if (cached_has_bits & 0x00000800u) {
      inbusanalogbyteorder_ = from.inbusanalogbyteorder_;
    }
    if (cached_has_bits & 0x00001000u) {
      busanaloglowlimit_ = from.busanaloglowlimit_;
    }
    if (cached_has_bits & 0x00002000u) {
      busanaloghighlimit_ = from.busanaloghighlimit_;
    }
    if (cached_has_bits & 0x00004000u) {
      inbusanaloglowlimit_ = from.inbusanaloglowlimit_;
    }
    if (cached_has_bits & 0x00008000u) {
      inbusanaloghighlimit_ = from.inbusanaloghighlimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00020000u) {
      coarseaperture_ = from.coarseaperture_;
    }
    if (cached_has_bits & 0x00040000u) {
      fineaperture_ = from.fineaperture_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BusSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BusSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusSignal::CopyFrom(const BusSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BusSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusSignal::IsInitialized() const {
  return true;
}

void BusSignal::InternalSwap(BusSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signalid_.Swap(&other->signalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bustypeid_.Swap(&other->bustypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusSignal, inbusanaloghighlimit_)
      + sizeof(BusSignal::inbusanaloghighlimit_)
      - PROTOBUF_FIELD_OFFSET(BusSignal, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(precision_, other->precision_);
  swap(coarseaperture_, other->coarseaperture_);
  swap(fineaperture_, other->fineaperture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bus::_Internal {
 public:
  using HasBits = decltype(std::declval<Bus>()._has_bits_);
  static const ::Proto::Uuid& uuid(const Bus* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bustypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autosignalplacement(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_manualbussize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enablemanualbussize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enablemanualbussizeisnotinitialized(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::Proto::Uuid&
Bus::_Internal::uuid(const Bus* msg) {
  return *msg->uuid_;
}
Bus::Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bussignals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bussignals_(from.bussignals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bustypeid()) {
    bustypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bustypeid(), 
      GetArena());
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::Proto::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  ::memcpy(&manualbussize_, &from.manualbussize_,
    static_cast<size_t>(reinterpret_cast<char*>(&enablemanualbussizeisnotinitialized_) -
    reinterpret_cast<char*>(&manualbussize_)) + sizeof(enablemanualbussizeisnotinitialized_));
  // @@protoc_insertion_point(copy_constructor:Proto.Bus)
}

void Bus::SharedCtor() {
bustypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enablemanualbussize_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(enablemanualbussize_));
autosignalplacement_ = true;
enablemanualbussizeisnotinitialized_ = true;
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:Proto.Bus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bustypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uuid_;
}

void Bus::ArenaDtor(void* object) {
  Bus* _this = reinterpret_cast< Bus* >(object);
  (void)_this;
}
void Bus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bussignals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bustypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&manualbussize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enablemanualbussize_) -
        reinterpret_cast<char*>(&manualbussize_)) + sizeof(enablemanualbussize_));
    autosignalplacement_ = true;
    enablemanualbussizeisnotinitialized_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.Uuid uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string busTypeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bustypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Bus.busTypeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.BusSignal busSignals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bussignals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool autoSignalPlacement = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_autosignalplacement(&has_bits);
          autosignalplacement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 manualBusSize = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_manualbussize(&has_bits);
          manualbussize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableManualBusSize = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_enablemanualbussize(&has_bits);
          enablemanualbussize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableManualBusSizeIsNotInitialized = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_enablemanualbussizeisnotinitialized(&has_bits);
          enablemanualbussizeisnotinitialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.Uuid uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // optional string busTypeId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bustypeid().data(), static_cast<int>(this->_internal_bustypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Bus.busTypeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bustypeid(), target);
  }

  // repeated .Proto.BusSignal busSignals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bussignals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bussignals(i), target, stream);
  }

  // optional bool autoSignalPlacement = 10 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_autosignalplacement(), target);
  }

  // optional int32 manualBusSize = 11 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_manualbussize(), target);
  }

  // optional bool enableManualBusSize = 12 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enablemanualbussize(), target);
  }

  // optional bool enableManualBusSizeIsNotInitialized = 13 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enablemanualbussizeisnotinitialized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Bus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.BusSignal busSignals = 3;
  total_size += 1UL * this->_internal_bussignals_size();
  for (const auto& msg : this->bussignals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string busTypeId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bustypeid());
    }

    // optional .Proto.Uuid uuid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uuid_);
    }

    // optional int32 manualBusSize = 11 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_manualbussize());
    }

    // optional bool enableManualBusSize = 12 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool autoSignalPlacement = 10 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enableManualBusSizeIsNotInitialized = 13 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  const Bus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Bus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Bus)
    MergeFrom(*source);
  }
}

void Bus::MergeFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bussignals_.MergeFrom(from.bussignals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bustypeid(from._internal_bustypeid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_uuid()->::Proto::Uuid::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      manualbussize_ = from.manualbussize_;
    }
    if (cached_has_bits & 0x00000008u) {
      enablemanualbussize_ = from.enablemanualbussize_;
    }
    if (cached_has_bits & 0x00000010u) {
      autosignalplacement_ = from.autosignalplacement_;
    }
    if (cached_has_bits & 0x00000020u) {
      enablemanualbussizeisnotinitialized_ = from.enablemanualbussizeisnotinitialized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bussignals_.InternalSwap(&other->bussignals_);
  bustypeid_.Swap(&other->bustypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bus, enablemanualbussize_)
      + sizeof(Bus::enablemanualbussize_)
      - PROTOBUF_FIELD_OFFSET(Bus, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
  swap(autosignalplacement_, other->autosignalplacement_);
  swap(enablemanualbussizeisnotinitialized_, other->enablemanualbussizeisnotinitialized_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComparatorSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<ComparatorSignal>()._has_bits_);
  static void set_has_isconst(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_constvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isacquired(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ComparatorSignal::ComparatorSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ComparatorSignal)
}
ComparatorSignal::ComparatorSignal(const ComparatorSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appsignalid()) {
    appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appsignalid(), 
      GetArena());
  }
  ::memcpy(&constvalue_, &from.constvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&isconst_) -
    reinterpret_cast<char*>(&constvalue_)) + sizeof(isconst_));
  // @@protoc_insertion_point(copy_constructor:Proto.ComparatorSignal)
}

void ComparatorSignal::SharedCtor() {
appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&constvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isacquired_) -
    reinterpret_cast<char*>(&constvalue_)) + sizeof(isacquired_));
isconst_ = true;
}

ComparatorSignal::~ComparatorSignal() {
  // @@protoc_insertion_point(destructor:Proto.ComparatorSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComparatorSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComparatorSignal::ArenaDtor(void* object) {
  ComparatorSignal* _this = reinterpret_cast< ComparatorSignal* >(object);
  (void)_this;
}
void ComparatorSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComparatorSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComparatorSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ComparatorSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    appsignalid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&constvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isacquired_) -
        reinterpret_cast<char*>(&constvalue_)) + sizeof(isacquired_));
    isconst_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComparatorSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isConst = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isconst(&has_bits);
          isconst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double constValue = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_constvalue(&has_bits);
          constvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string appSignalId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.ComparatorSignal.appSignalId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAcquired = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_isacquired(&has_bits);
          isacquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComparatorSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ComparatorSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isConst = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isconst(), target);
  }

  // optional double constValue = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_constvalue(), target);
  }

  // optional string appSignalId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appsignalid().data(), static_cast<int>(this->_internal_appsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.ComparatorSignal.appSignalId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appsignalid(), target);
  }

  // optional bool isAcquired = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isacquired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ComparatorSignal)
  return target;
}

size_t ComparatorSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ComparatorSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string appSignalId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appsignalid());
    }

    // optional double constValue = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool isAcquired = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool isConst = 1 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComparatorSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ComparatorSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparatorSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComparatorSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ComparatorSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ComparatorSignal)
    MergeFrom(*source);
  }
}

void ComparatorSignal::MergeFrom(const ComparatorSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ComparatorSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appsignalid(from._internal_appsignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      constvalue_ = from.constvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      isacquired_ = from.isacquired_;
    }
    if (cached_has_bits & 0x00000008u) {
      isconst_ = from.isconst_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComparatorSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ComparatorSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparatorSignal::CopyFrom(const ComparatorSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ComparatorSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparatorSignal::IsInitialized() const {
  return true;
}

void ComparatorSignal::InternalSwap(ComparatorSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalid_.Swap(&other->appsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComparatorSignal, isacquired_)
      + sizeof(ComparatorSignal::isacquired_)
      - PROTOBUF_FIELD_OFFSET(ComparatorSignal, constvalue_)>(
          reinterpret_cast<char*>(&constvalue_),
          reinterpret_cast<char*>(&other->constvalue_));
  swap(isconst_, other->isconst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComparatorSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Comparator::_Internal {
 public:
  using HasBits = decltype(std::declval<Comparator>()._has_bits_);
  static void set_has_cmptype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_inanalogsignalformat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::Proto::ComparatorSignal& input(const Comparator* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Proto::ComparatorSignal& compare(const Comparator* msg);
  static void set_has_compare(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Proto::ComparatorSignal& hysteresis(const Comparator* msg);
  static void set_has_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Proto::ComparatorSignal& output(const Comparator* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_allsignalsisacquired(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_schemaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Proto::Uuid& schemaitemuuid(const Comparator* msg);
  static void set_has_schemaitemuuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::Proto::ComparatorSignal&
Comparator::_Internal::input(const Comparator* msg) {
  return *msg->input_;
}
const ::Proto::ComparatorSignal&
Comparator::_Internal::compare(const Comparator* msg) {
  return *msg->compare_;
}
const ::Proto::ComparatorSignal&
Comparator::_Internal::hysteresis(const Comparator* msg) {
  return *msg->hysteresis_;
}
const ::Proto::ComparatorSignal&
Comparator::_Internal::output(const Comparator* msg) {
  return *msg->output_;
}
const ::Proto::Uuid&
Comparator::_Internal::schemaitemuuid(const Comparator* msg) {
  return *msg->schemaitemuuid_;
}
Comparator::Comparator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Comparator)
}
Comparator::Comparator(const Comparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  schemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schemaid()) {
    schemaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schemaid(), 
      GetArena());
  }
  if (from._internal_has_input()) {
    input_ = new ::Proto::ComparatorSignal(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_compare()) {
    compare_ = new ::Proto::ComparatorSignal(*from.compare_);
  } else {
    compare_ = nullptr;
  }
  if (from._internal_has_hysteresis()) {
    hysteresis_ = new ::Proto::ComparatorSignal(*from.hysteresis_);
  } else {
    hysteresis_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::Proto::ComparatorSignal(*from.output_);
  } else {
    output_ = nullptr;
  }
  if (from._internal_has_schemaitemuuid()) {
    schemaitemuuid_ = new ::Proto::Uuid(*from.schemaitemuuid_);
  } else {
    schemaitemuuid_ = nullptr;
  }
  ::memcpy(&allsignalsisacquired_, &from.allsignalsisacquired_,
    static_cast<size_t>(reinterpret_cast<char*>(&inanalogsignalformat_) -
    reinterpret_cast<char*>(&allsignalsisacquired_)) + sizeof(inanalogsignalformat_));
  // @@protoc_insertion_point(copy_constructor:Proto.Comparator)
}

void Comparator::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
schemaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allsignalsisacquired_) -
    reinterpret_cast<char*>(&input_)) + sizeof(allsignalsisacquired_));
precision_ = 2;
cmptype_ = 1;
inanalogsignalformat_ = 1;
}

Comparator::~Comparator() {
  // @@protoc_insertion_point(destructor:Proto.Comparator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Comparator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schemaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete compare_;
  if (this != internal_default_instance()) delete hysteresis_;
  if (this != internal_default_instance()) delete output_;
  if (this != internal_default_instance()) delete schemaitemuuid_;
}

void Comparator::ArenaDtor(void* object) {
  Comparator* _this = reinterpret_cast< Comparator* >(object);
  (void)_this;
}
void Comparator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Comparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Comparator::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Comparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      schemaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_ != nullptr);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(compare_ != nullptr);
      compare_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hysteresis_ != nullptr);
      hysteresis_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(output_ != nullptr);
      output_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(schemaitemuuid_ != nullptr);
      schemaitemuuid_->Clear();
    }
  }
  allsignalsisacquired_ = false;
  if (cached_has_bits & 0x00000700u) {
    precision_ = 2;
    cmptype_ = 1;
    inanalogsignalformat_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Comparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cmpType = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cmptype(&has_bits);
          cmptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inAnalogSignalFormat = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inanalogsignalformat(&has_bits);
          inanalogsignalformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.ComparatorSignal input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.ComparatorSignal compare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.ComparatorSignal hysteresis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hysteresis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.ComparatorSignal output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allSignalsIsAcquired = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_allsignalsisacquired(&has_bits);
          allsignalsisacquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 8 [default = 2];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Comparator.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string schemaId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_schemaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.Comparator.schemaId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.Uuid schemaItemUuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_schemaitemuuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Comparator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Comparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmpType = 1 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmptype(), target);
  }

  // optional int32 inAnalogSignalFormat = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inanalogsignalformat(), target);
  }

  // optional .Proto.ComparatorSignal input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input(this), target, stream);
  }

  // optional .Proto.ComparatorSignal compare = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::compare(this), target, stream);
  }

  // optional .Proto.ComparatorSignal hysteresis = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hysteresis(this), target, stream);
  }

  // optional .Proto.ComparatorSignal output = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::output(this), target, stream);
  }

  // optional bool allSignalsIsAcquired = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_allsignalsisacquired(), target);
  }

  // optional int32 precision = 8 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_precision(), target);
  }

  // optional string label = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Comparator.label");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_label(), target);
  }

  // optional string schemaId = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_schemaid().data(), static_cast<int>(this->_internal_schemaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.Comparator.schemaId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_schemaid(), target);
  }

  // optional .Proto.Uuid schemaItemUuid = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::schemaitemuuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Comparator)
  return target;
}

size_t Comparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Comparator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string label = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string schemaId = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_schemaid());
    }

    // optional .Proto.ComparatorSignal input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_);
    }

    // optional .Proto.ComparatorSignal compare = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compare_);
    }

    // optional .Proto.ComparatorSignal hysteresis = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hysteresis_);
    }

    // optional .Proto.ComparatorSignal output = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_);
    }

    // optional .Proto.Uuid schemaItemUuid = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schemaitemuuid_);
    }

    // optional bool allSignalsIsAcquired = 7 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 precision = 8 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

    // optional int32 cmpType = 1 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cmptype());
    }

    // optional int32 inAnalogSignalFormat = 2 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inanalogsignalformat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Comparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Comparator)
  GOOGLE_DCHECK_NE(&from, this);
  const Comparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Comparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Comparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Comparator)
    MergeFrom(*source);
  }
}

void Comparator::MergeFrom(const Comparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Comparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_schemaid(from._internal_schemaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input()->::Proto::ComparatorSignal::MergeFrom(from._internal_input());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_compare()->::Proto::ComparatorSignal::MergeFrom(from._internal_compare());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_hysteresis()->::Proto::ComparatorSignal::MergeFrom(from._internal_hysteresis());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_output()->::Proto::ComparatorSignal::MergeFrom(from._internal_output());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_schemaitemuuid()->::Proto::Uuid::MergeFrom(from._internal_schemaitemuuid());
    }
    if (cached_has_bits & 0x00000080u) {
      allsignalsisacquired_ = from.allsignalsisacquired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000200u) {
      cmptype_ = from.cmptype_;
    }
    if (cached_has_bits & 0x00000400u) {
      inanalogsignalformat_ = from.inanalogsignalformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Comparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Comparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comparator::CopyFrom(const Comparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Comparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comparator::IsInitialized() const {
  if (_internal_has_schemaitemuuid()) {
    if (!schemaitemuuid_->IsInitialized()) return false;
  }
  return true;
}

void Comparator::InternalSwap(Comparator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  schemaid_.Swap(&other->schemaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Comparator, allsignalsisacquired_)
      + sizeof(Comparator::allsignalsisacquired_)
      - PROTOBUF_FIELD_OFFSET(Comparator, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
  swap(precision_, other->precision_);
  swap(cmptype_, other->cmptype_);
  swap(inanalogsignalformat_, other->inanalogsignalformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Comparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LmComparatorSet::_Internal {
 public:
  using HasBits = decltype(std::declval<LmComparatorSet>()._has_bits_);
  static void set_has_lmequipmentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LmComparatorSet::LmComparatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comparator_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.LmComparatorSet)
}
LmComparatorSet::LmComparatorSet(const LmComparatorSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comparator_(from.comparator_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lmequipmentid()) {
    lmequipmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lmequipmentid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.LmComparatorSet)
}

void LmComparatorSet::SharedCtor() {
lmequipmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LmComparatorSet::~LmComparatorSet() {
  // @@protoc_insertion_point(destructor:Proto.LmComparatorSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LmComparatorSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lmequipmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LmComparatorSet::ArenaDtor(void* object) {
  LmComparatorSet* _this = reinterpret_cast< LmComparatorSet* >(object);
  (void)_this;
}
void LmComparatorSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LmComparatorSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LmComparatorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LmComparatorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comparator_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lmequipmentid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LmComparatorSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string lmEquipmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lmequipmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.LmComparatorSet.lmEquipmentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Comparator comparator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comparator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LmComparatorSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LmComparatorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lmEquipmentID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lmequipmentid().data(), static_cast<int>(this->_internal_lmequipmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.LmComparatorSet.lmEquipmentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lmequipmentid(), target);
  }

  // repeated .Proto.Comparator comparator = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comparator_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_comparator(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LmComparatorSet)
  return target;
}

size_t LmComparatorSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LmComparatorSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Comparator comparator = 2;
  total_size += 1UL * this->_internal_comparator_size();
  for (const auto& msg : this->comparator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string lmEquipmentID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lmequipmentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LmComparatorSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LmComparatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LmComparatorSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LmComparatorSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LmComparatorSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LmComparatorSet)
    MergeFrom(*source);
  }
}

void LmComparatorSet::MergeFrom(const LmComparatorSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LmComparatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comparator_.MergeFrom(from.comparator_);
  if (from._internal_has_lmequipmentid()) {
    _internal_set_lmequipmentid(from._internal_lmequipmentid());
  }
}

void LmComparatorSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LmComparatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LmComparatorSet::CopyFrom(const LmComparatorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LmComparatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LmComparatorSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(comparator_)) return false;
  return true;
}

void LmComparatorSet::InternalSwap(LmComparatorSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comparator_.InternalSwap(&other->comparator_);
  lmequipmentid_.Swap(&other->lmequipmentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LmComparatorSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComparatorSet::_Internal {
 public:
};

ComparatorSet::ComparatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lmcomparatorset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.ComparatorSet)
}
ComparatorSet::ComparatorSet(const ComparatorSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lmcomparatorset_(from.lmcomparatorset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.ComparatorSet)
}

void ComparatorSet::SharedCtor() {
}

ComparatorSet::~ComparatorSet() {
  // @@protoc_insertion_point(destructor:Proto.ComparatorSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComparatorSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComparatorSet::ArenaDtor(void* object) {
  ComparatorSet* _this = reinterpret_cast< ComparatorSet* >(object);
  (void)_this;
}
void ComparatorSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComparatorSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComparatorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ComparatorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lmcomparatorset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComparatorSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.LmComparatorSet lmComparatorSet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lmcomparatorset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComparatorSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ComparatorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.LmComparatorSet lmComparatorSet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lmcomparatorset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lmcomparatorset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ComparatorSet)
  return target;
}

size_t ComparatorSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ComparatorSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.LmComparatorSet lmComparatorSet = 1;
  total_size += 1UL * this->_internal_lmcomparatorset_size();
  for (const auto& msg : this->lmcomparatorset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComparatorSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ComparatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparatorSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComparatorSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ComparatorSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ComparatorSet)
    MergeFrom(*source);
  }
}

void ComparatorSet::MergeFrom(const ComparatorSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ComparatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lmcomparatorset_.MergeFrom(from.lmcomparatorset_);
}

void ComparatorSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ComparatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparatorSet::CopyFrom(const ComparatorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ComparatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparatorSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(lmcomparatorset_)) return false;
  return true;
}

void ComparatorSet::InternalSwap(ComparatorSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lmcomparatorset_.InternalSwap(&other->lmcomparatorset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComparatorSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetrologySignalLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<MetrologySignalLocation>()._has_bits_);
  static void set_has_rackid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chassisid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_moduleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_place(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contact(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shownonschemas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MetrologySignalLocation::MetrologySignalLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.MetrologySignalLocation)
}
MetrologySignalLocation::MetrologySignalLocation(const MetrologySignalLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rackid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rackid()) {
    rackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rackid(), 
      GetArena());
  }
  chassisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chassisid()) {
    chassisid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chassisid(), 
      GetArena());
  }
  moduleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_moduleid()) {
    moduleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_moduleid(), 
      GetArena());
  }
  contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contact()) {
    contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contact(), 
      GetArena());
  }
  ::memcpy(&shownonschemas_, &from.shownonschemas_,
    static_cast<size_t>(reinterpret_cast<char*>(&module_) -
    reinterpret_cast<char*>(&shownonschemas_)) + sizeof(module_));
  // @@protoc_insertion_point(copy_constructor:Proto.MetrologySignalLocation)
}

void MetrologySignalLocation::SharedCtor() {
rackid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chassisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
moduleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shownonschemas_ = false;
place_ = -1;
chassis_ = -1;
module_ = -1;
}

MetrologySignalLocation::~MetrologySignalLocation() {
  // @@protoc_insertion_point(destructor:Proto.MetrologySignalLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetrologySignalLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rackid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chassisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moduleid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetrologySignalLocation::ArenaDtor(void* object) {
  MetrologySignalLocation* _this = reinterpret_cast< MetrologySignalLocation* >(object);
  (void)_this;
}
void MetrologySignalLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetrologySignalLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetrologySignalLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MetrologySignalLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rackid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      chassisid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      moduleid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      contact_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    shownonschemas_ = false;
    place_ = -1;
    chassis_ = -1;
    module_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetrologySignalLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string rackID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rackid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.MetrologySignalLocation.rackID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string chassisID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chassisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.MetrologySignalLocation.chassisID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chassis = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chassis(&has_bits);
          chassis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string moduleID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_moduleid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.MetrologySignalLocation.moduleID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 module = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_module(&has_bits);
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 place = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_place(&has_bits);
          place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string contact = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_contact();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.MetrologySignalLocation.contact");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shownOnSchemas = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shownonschemas(&has_bits);
          shownonschemas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetrologySignalLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MetrologySignalLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rackID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rackid().data(), static_cast<int>(this->_internal_rackid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.MetrologySignalLocation.rackID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rackid(), target);
  }

  // optional string chassisID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chassisid().data(), static_cast<int>(this->_internal_chassisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.MetrologySignalLocation.chassisID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chassisid(), target);
  }

  // optional int32 chassis = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chassis(), target);
  }

  // optional string moduleID = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_moduleid().data(), static_cast<int>(this->_internal_moduleid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.MetrologySignalLocation.moduleID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_moduleid(), target);
  }

  // optional int32 module = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_module(), target);
  }

  // optional int32 place = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_place(), target);
  }

  // optional string contact = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contact().data(), static_cast<int>(this->_internal_contact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.MetrologySignalLocation.contact");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_contact(), target);
  }

  // optional bool shownOnSchemas = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_shownonschemas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MetrologySignalLocation)
  return target;
}

size_t MetrologySignalLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MetrologySignalLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string rackID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rackid());
    }

    // optional string chassisID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chassisid());
    }

    // optional string moduleID = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_moduleid());
    }

    // optional string contact = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contact());
    }

    // optional bool shownOnSchemas = 8 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 place = 6 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_place());
    }

    // optional int32 chassis = 3 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chassis());
    }

    // optional int32 module = 5 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_module());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetrologySignalLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MetrologySignalLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MetrologySignalLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetrologySignalLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MetrologySignalLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MetrologySignalLocation)
    MergeFrom(*source);
  }
}

void MetrologySignalLocation::MergeFrom(const MetrologySignalLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MetrologySignalLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rackid(from._internal_rackid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_chassisid(from._internal_chassisid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_moduleid(from._internal_moduleid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_contact(from._internal_contact());
    }
    if (cached_has_bits & 0x00000010u) {
      shownonschemas_ = from.shownonschemas_;
    }
    if (cached_has_bits & 0x00000020u) {
      place_ = from.place_;
    }
    if (cached_has_bits & 0x00000040u) {
      chassis_ = from.chassis_;
    }
    if (cached_has_bits & 0x00000080u) {
      module_ = from.module_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetrologySignalLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MetrologySignalLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetrologySignalLocation::CopyFrom(const MetrologySignalLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MetrologySignalLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetrologySignalLocation::IsInitialized() const {
  return true;
}

void MetrologySignalLocation::InternalSwap(MetrologySignalLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rackid_.Swap(&other->rackid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chassisid_.Swap(&other->chassisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  moduleid_.Swap(&other->moduleid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contact_.Swap(&other->contact_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(shownonschemas_, other->shownonschemas_);
  swap(place_, other->place_);
  swap(chassis_, other->chassis_);
  swap(module_, other->module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetrologySignalLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetrologySignal::_Internal {
 public:
  using HasBits = decltype(std::declval<MetrologySignal>()._has_bits_);
  static const ::Proto::AppSignal& appsignal(const MetrologySignal* msg);
  static void set_has_appsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::MetrologySignalLocation& location(const MetrologySignal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_electriclowlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_electrichighlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_electricunitid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_electricsensortype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_electricrload(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_electricr0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_electricprecision(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_physicallowlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_physicalhighlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::Proto::AppSignal&
MetrologySignal::_Internal::appsignal(const MetrologySignal* msg) {
  return *msg->appsignal_;
}
const ::Proto::MetrologySignalLocation&
MetrologySignal::_Internal::location(const MetrologySignal* msg) {
  return *msg->location_;
}
MetrologySignal::MetrologySignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.MetrologySignal)
}
MetrologySignal::MetrologySignal(const MetrologySignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_appsignal()) {
    appsignal_ = new ::Proto::AppSignal(*from.appsignal_);
  } else {
    appsignal_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::Proto::MetrologySignalLocation(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&electriclowlimit_, &from.electriclowlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&electricsensortype_) -
    reinterpret_cast<char*>(&electriclowlimit_)) + sizeof(electricsensortype_));
  // @@protoc_insertion_point(copy_constructor:Proto.MetrologySignal)
}

void MetrologySignal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appsignal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&electricrload_) -
    reinterpret_cast<char*>(&appsignal_)) + sizeof(electricrload_));
electricprecision_ = 4;
electricunitid_ = 1;
electricsensortype_ = 1;
}

MetrologySignal::~MetrologySignal() {
  // @@protoc_insertion_point(destructor:Proto.MetrologySignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetrologySignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete appsignal_;
  if (this != internal_default_instance()) delete location_;
}

void MetrologySignal::ArenaDtor(void* object) {
  MetrologySignal* _this = reinterpret_cast< MetrologySignal* >(object);
  (void)_this;
}
void MetrologySignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetrologySignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetrologySignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MetrologySignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(appsignal_ != nullptr);
      appsignal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&electriclowlimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&electricrload_) -
        reinterpret_cast<char*>(&electriclowlimit_)) + sizeof(electricrload_));
  }
  if (cached_has_bits & 0x00000700u) {
    electricprecision_ = 4;
    electricunitid_ = 1;
    electricsensortype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetrologySignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.AppSignal appSignal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_appsignal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.MetrologySignalLocation location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double electricLowLimit = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_electriclowlimit(&has_bits);
          electriclowlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double electricHighLimit = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_electrichighlimit(&has_bits);
          electrichighlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 electricUnitID = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_electricunitid(&has_bits);
          electricunitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 electricSensorType = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_electricsensortype(&has_bits);
          electricsensortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double electricR0 = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_electricr0(&has_bits);
          electricr0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 electricPrecision = 8 [default = 4];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_electricprecision(&has_bits);
          electricprecision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double physicalLowLimit = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_physicallowlimit(&has_bits);
          physicallowlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double physicalHighLimit = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_physicalhighlimit(&has_bits);
          physicalhighlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double electricRload = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_electricrload(&has_bits);
          electricrload_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetrologySignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MetrologySignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.AppSignal appSignal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::appsignal(this), target, stream);
  }

  // optional .Proto.MetrologySignalLocation location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional double electricLowLimit = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_electriclowlimit(), target);
  }

  // optional double electricHighLimit = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_electrichighlimit(), target);
  }

  // optional int32 electricUnitID = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_electricunitid(), target);
  }

  // optional int32 electricSensorType = 6 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_electricsensortype(), target);
  }

  // optional double electricR0 = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_electricr0(), target);
  }

  // optional int32 electricPrecision = 8 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_electricprecision(), target);
  }

  // optional double physicalLowLimit = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_physicallowlimit(), target);
  }

  // optional double physicalHighLimit = 10 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_physicalhighlimit(), target);
  }

  // optional double electricRload = 11 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_electricrload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MetrologySignal)
  return target;
}

size_t MetrologySignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MetrologySignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .Proto.AppSignal appSignal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *appsignal_);
    }

    // optional .Proto.MetrologySignalLocation location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional double electricLowLimit = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double electricHighLimit = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double electricR0 = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double physicalLowLimit = 9 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double physicalHighLimit = 10 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double electricRload = 11 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 electricPrecision = 8 [default = 4];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_electricprecision());
    }

    // optional int32 electricUnitID = 5 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_electricunitid());
    }

    // optional int32 electricSensorType = 6 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_electricsensortype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetrologySignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MetrologySignal)
  GOOGLE_DCHECK_NE(&from, this);
  const MetrologySignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetrologySignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MetrologySignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MetrologySignal)
    MergeFrom(*source);
  }
}

void MetrologySignal::MergeFrom(const MetrologySignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MetrologySignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_appsignal()->::Proto::AppSignal::MergeFrom(from._internal_appsignal());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::Proto::MetrologySignalLocation::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      electriclowlimit_ = from.electriclowlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      electrichighlimit_ = from.electrichighlimit_;
    }
    if (cached_has_bits & 0x00000010u) {
      electricr0_ = from.electricr0_;
    }
    if (cached_has_bits & 0x00000020u) {
      physicallowlimit_ = from.physicallowlimit_;
    }
    if (cached_has_bits & 0x00000040u) {
      physicalhighlimit_ = from.physicalhighlimit_;
    }
    if (cached_has_bits & 0x00000080u) {
      electricrload_ = from.electricrload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      electricprecision_ = from.electricprecision_;
    }
    if (cached_has_bits & 0x00000200u) {
      electricunitid_ = from.electricunitid_;
    }
    if (cached_has_bits & 0x00000400u) {
      electricsensortype_ = from.electricsensortype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetrologySignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MetrologySignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetrologySignal::CopyFrom(const MetrologySignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MetrologySignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetrologySignal::IsInitialized() const {
  if (_internal_has_appsignal()) {
    if (!appsignal_->IsInitialized()) return false;
  }
  return true;
}

void MetrologySignal::InternalSwap(MetrologySignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetrologySignal, electricrload_)
      + sizeof(MetrologySignal::electricrload_)
      - PROTOBUF_FIELD_OFFSET(MetrologySignal, appsignal_)>(
          reinterpret_cast<char*>(&appsignal_),
          reinterpret_cast<char*>(&other->appsignal_));
  swap(electricprecision_, other->electricprecision_);
  swap(electricunitid_, other->electricunitid_);
  swap(electricsensortype_, other->electricsensortype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetrologySignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetrologySignalSet::_Internal {
 public:
};

MetrologySignalSet::MetrologySignalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrologysignal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.MetrologySignalSet)
}
MetrologySignalSet::MetrologySignalSet(const MetrologySignalSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrologysignal_(from.metrologysignal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.MetrologySignalSet)
}

void MetrologySignalSet::SharedCtor() {
}

MetrologySignalSet::~MetrologySignalSet() {
  // @@protoc_insertion_point(destructor:Proto.MetrologySignalSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetrologySignalSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetrologySignalSet::ArenaDtor(void* object) {
  MetrologySignalSet* _this = reinterpret_cast< MetrologySignalSet* >(object);
  (void)_this;
}
void MetrologySignalSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetrologySignalSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetrologySignalSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MetrologySignalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrologysignal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetrologySignalSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.MetrologySignal metrologySignal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrologysignal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetrologySignalSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MetrologySignalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.MetrologySignal metrologySignal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrologysignal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metrologysignal(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MetrologySignalSet)
  return target;
}

size_t MetrologySignalSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MetrologySignalSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.MetrologySignal metrologySignal = 1;
  total_size += 1UL * this->_internal_metrologysignal_size();
  for (const auto& msg : this->metrologysignal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetrologySignalSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MetrologySignalSet)
  GOOGLE_DCHECK_NE(&from, this);
  const MetrologySignalSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetrologySignalSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MetrologySignalSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MetrologySignalSet)
    MergeFrom(*source);
  }
}

void MetrologySignalSet::MergeFrom(const MetrologySignalSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MetrologySignalSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrologysignal_.MergeFrom(from.metrologysignal_);
}

void MetrologySignalSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MetrologySignalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetrologySignalSet::CopyFrom(const MetrologySignalSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MetrologySignalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetrologySignalSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrologysignal_)) return false;
  return true;
}

void MetrologySignalSet::InternalSwap(MetrologySignalSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrologysignal_.InternalSwap(&other->metrologysignal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetrologySignalSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimOverrideSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<SimOverrideSignal>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appsignalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_overridemethod(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Proto::qvariant& overridevalue(const SimOverrideSignal* msg);
  static void set_has_overridevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_overridescript(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Proto::qvariant&
SimOverrideSignal::_Internal::overridevalue(const SimOverrideSignal* msg) {
  return *msg->overridevalue_;
}
SimOverrideSignal::SimOverrideSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SimOverrideSignal)
}
SimOverrideSignal::SimOverrideSignal(const SimOverrideSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appsignalid()) {
    appsignalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appsignalid(), 
      GetArena());
  }
  overridescript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_overridescript()) {
    overridescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_overridescript(), 
      GetArena());
  }
  if (from._internal_has_overridevalue()) {
    overridevalue_ = new ::Proto::qvariant(*from.overridevalue_);
  } else {
    overridevalue_ = nullptr;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&overridemethod_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(overridemethod_));
  // @@protoc_insertion_point(copy_constructor:Proto.SimOverrideSignal)
}

void SimOverrideSignal::SharedCtor() {
appsignalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
overridescript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&overridevalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&overridemethod_) -
    reinterpret_cast<char*>(&overridevalue_)) + sizeof(overridemethod_));
}

SimOverrideSignal::~SimOverrideSignal() {
  // @@protoc_insertion_point(destructor:Proto.SimOverrideSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimOverrideSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appsignalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overridescript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overridevalue_;
}

void SimOverrideSignal::ArenaDtor(void* object) {
  SimOverrideSignal* _this = reinterpret_cast< SimOverrideSignal* >(object);
  (void)_this;
}
void SimOverrideSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimOverrideSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimOverrideSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SimOverrideSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appsignalid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      overridescript_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(overridevalue_ != nullptr);
      overridevalue_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overridemethod_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(overridemethod_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimOverrideSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string appSignalId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_appsignalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SimOverrideSignal.appSignalId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 overrideMethod = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_overridemethod(&has_bits);
          overridemethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.qvariant overrideValue = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_overridevalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string overrideScript = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_overridescript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.SimOverrideSignal.overrideScript");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimOverrideSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SimOverrideSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // optional int32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // optional string appSignalId = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appsignalid().data(), static_cast<int>(this->_internal_appsignalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SimOverrideSignal.appSignalId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_appsignalid(), target);
  }

  // optional int32 overrideMethod = 30;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_overridemethod(), target);
  }

  // optional .Proto.qvariant overrideValue = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::overridevalue(this), target, stream);
  }

  // optional string overrideScript = 50;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_overridescript().data(), static_cast<int>(this->_internal_overridescript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.SimOverrideSignal.overrideScript");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_overridescript(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SimOverrideSignal)
  return target;
}

size_t SimOverrideSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SimOverrideSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string appSignalId = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appsignalid());
    }

    // optional string overrideScript = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_overridescript());
    }

    // optional .Proto.qvariant overrideValue = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overridevalue_);
    }

    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 index = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_index());
    }

    // optional int32 overrideMethod = 30;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overridemethod());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimOverrideSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SimOverrideSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const SimOverrideSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimOverrideSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SimOverrideSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SimOverrideSignal)
    MergeFrom(*source);
  }
}

void SimOverrideSignal::MergeFrom(const SimOverrideSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SimOverrideSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appsignalid(from._internal_appsignalid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_overridescript(from._internal_overridescript());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_overridevalue()->::Proto::qvariant::MergeFrom(from._internal_overridevalue());
    }
    if (cached_has_bits & 0x00000008u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      overridemethod_ = from.overridemethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimOverrideSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SimOverrideSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimOverrideSignal::CopyFrom(const SimOverrideSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SimOverrideSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimOverrideSignal::IsInitialized() const {
  if (_internal_has_overridevalue()) {
    if (!overridevalue_->IsInitialized()) return false;
  }
  return true;
}

void SimOverrideSignal::InternalSwap(SimOverrideSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appsignalid_.Swap(&other->appsignalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  overridescript_.Swap(&other->overridescript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimOverrideSignal, overridemethod_)
      + sizeof(SimOverrideSignal::overridemethod_)
      - PROTOBUF_FIELD_OFFSET(SimOverrideSignal, overridevalue_)>(
          reinterpret_cast<char*>(&overridevalue_),
          reinterpret_cast<char*>(&other->overridevalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimOverrideSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimOverrideSignalWorkspace::_Internal {
 public:
};

SimOverrideSignalWorkspace::SimOverrideSignalWorkspace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overridesignals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.SimOverrideSignalWorkspace)
}
SimOverrideSignalWorkspace::SimOverrideSignalWorkspace(const SimOverrideSignalWorkspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      overridesignals_(from.overridesignals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SimOverrideSignalWorkspace)
}

void SimOverrideSignalWorkspace::SharedCtor() {
}

SimOverrideSignalWorkspace::~SimOverrideSignalWorkspace() {
  // @@protoc_insertion_point(destructor:Proto.SimOverrideSignalWorkspace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimOverrideSignalWorkspace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimOverrideSignalWorkspace::ArenaDtor(void* object) {
  SimOverrideSignalWorkspace* _this = reinterpret_cast< SimOverrideSignalWorkspace* >(object);
  (void)_this;
}
void SimOverrideSignalWorkspace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimOverrideSignalWorkspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimOverrideSignalWorkspace::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SimOverrideSignalWorkspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overridesignals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimOverrideSignalWorkspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.SimOverrideSignal overrideSignals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overridesignals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimOverrideSignalWorkspace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SimOverrideSignalWorkspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.SimOverrideSignal overrideSignals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overridesignals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_overridesignals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SimOverrideSignalWorkspace)
  return target;
}

size_t SimOverrideSignalWorkspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SimOverrideSignalWorkspace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.SimOverrideSignal overrideSignals = 2;
  total_size += 1UL * this->_internal_overridesignals_size();
  for (const auto& msg : this->overridesignals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimOverrideSignalWorkspace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SimOverrideSignalWorkspace)
  GOOGLE_DCHECK_NE(&from, this);
  const SimOverrideSignalWorkspace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimOverrideSignalWorkspace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SimOverrideSignalWorkspace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SimOverrideSignalWorkspace)
    MergeFrom(*source);
  }
}

void SimOverrideSignalWorkspace::MergeFrom(const SimOverrideSignalWorkspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SimOverrideSignalWorkspace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overridesignals_.MergeFrom(from.overridesignals_);
}

void SimOverrideSignalWorkspace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SimOverrideSignalWorkspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimOverrideSignalWorkspace::CopyFrom(const SimOverrideSignalWorkspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SimOverrideSignalWorkspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimOverrideSignalWorkspace::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(overridesignals_)) return false;
  return true;
}

void SimOverrideSignalWorkspace::InternalSwap(SimOverrideSignalWorkspace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  overridesignals_.InternalSwap(&other->overridesignals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimOverrideSignalWorkspace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::Uuid* Arena::CreateMaybeMessage< ::Proto::Uuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Uuid >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::qvariant* Arena::CreateMaybeMessage< ::Proto::qvariant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::qvariant >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::wstring* Arena::CreateMaybeMessage< ::Proto::wstring >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::wstring >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::FontParam* Arena::CreateMaybeMessage< ::Proto::FontParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::FontParam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaPoint* Arena::CreateMaybeMessage< ::Proto::SchemaPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ImageItem* Arena::CreateMaybeMessage< ::Proto::ImageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ImageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AfbParamValue* Arena::CreateMaybeMessage< ::Proto::AfbParamValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AfbParamValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Envelope* Arena::CreateMaybeMessage< ::Proto::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Envelope >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::EnvelopeSet* Arena::CreateMaybeMessage< ::Proto::EnvelopeSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::EnvelopeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::EnvelopeSetShortDescription* Arena::CreateMaybeMessage< ::Proto::EnvelopeSetShortDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::EnvelopeSetShortDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ExportedDevicePreset* Arena::CreateMaybeMessage< ::Proto::ExportedDevicePreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ExportedDevicePreset >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Configuration* Arena::CreateMaybeMessage< ::Proto::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AfbElementCollection* Arena::CreateMaybeMessage< ::Proto::AfbElementCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AfbElementCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AfbElementXml* Arena::CreateMaybeMessage< ::Proto::AfbElementXml >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AfbElementXml >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::FblElement* Arena::CreateMaybeMessage< ::Proto::FblElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::FblElement >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AfbSignal* Arena::CreateMaybeMessage< ::Proto::AfbSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AfbSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AfbParam* Arena::CreateMaybeMessage< ::Proto::AfbParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AfbParam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Schema* Arena::CreateMaybeMessage< ::Proto::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LogicSchema* Arena::CreateMaybeMessage< ::Proto::LogicSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::LogicSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::UfbSchema* Arena::CreateMaybeMessage< ::Proto::UfbSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::UfbSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaLayer* Arena::CreateMaybeMessage< ::Proto::SchemaLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItem* Arena::CreateMaybeMessage< ::Proto::SchemaItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PosRectImpl* Arena::CreateMaybeMessage< ::Proto::PosRectImpl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::PosRectImpl >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PosLineImpl* Arena::CreateMaybeMessage< ::Proto::PosLineImpl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::PosLineImpl >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PosConnectionImpl* Arena::CreateMaybeMessage< ::Proto::PosConnectionImpl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::PosConnectionImpl >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemRect* Arena::CreateMaybeMessage< ::Proto::SchemaItemRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemRect >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemLine* Arena::CreateMaybeMessage< ::Proto::SchemaItemLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemLine >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemPath* Arena::CreateMaybeMessage< ::Proto::SchemaItemPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemPath >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemImage* Arena::CreateMaybeMessage< ::Proto::SchemaItemImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemImage >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemFrame* Arena::CreateMaybeMessage< ::Proto::SchemaItemFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::VFrameSetPoint* Arena::CreateMaybeMessage< ::Proto::VFrameSetPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::VFrameSetPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::IndicatorHistogramVert* Arena::CreateMaybeMessage< ::Proto::IndicatorHistogramVert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::IndicatorHistogramVert >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::IndicatorArrowIndicator* Arena::CreateMaybeMessage< ::Proto::IndicatorArrowIndicator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::IndicatorArrowIndicator >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemIndicator* Arena::CreateMaybeMessage< ::Proto::SchemaItemIndicator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemIndicator >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::FblConnectionPoint* Arena::CreateMaybeMessage< ::Proto::FblConnectionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::FblConnectionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::FblItem* Arena::CreateMaybeMessage< ::Proto::FblItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::FblItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::FblItemRect* Arena::CreateMaybeMessage< ::Proto::FblItemRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::FblItemRect >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::FblItemLine* Arena::CreateMaybeMessage< ::Proto::FblItemLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::FblItemLine >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemSignalColumn* Arena::CreateMaybeMessage< ::Proto::SchemaItemSignalColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemSignalColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemSignal* Arena::CreateMaybeMessage< ::Proto::SchemaItemSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemInput* Arena::CreateMaybeMessage< ::Proto::SchemaItemInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemInput >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemOutput* Arena::CreateMaybeMessage< ::Proto::SchemaItemOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemInOut* Arena::CreateMaybeMessage< ::Proto::SchemaItemInOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemInOut >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemLink* Arena::CreateMaybeMessage< ::Proto::SchemaItemLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemLink >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemAfb* Arena::CreateMaybeMessage< ::Proto::SchemaItemAfb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemAfb >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemConst* Arena::CreateMaybeMessage< ::Proto::SchemaItemConst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemConst >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemConnection* Arena::CreateMaybeMessage< ::Proto::SchemaItemConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemTransmitter* Arena::CreateMaybeMessage< ::Proto::SchemaItemTransmitter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemTransmitter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemReceiver* Arena::CreateMaybeMessage< ::Proto::SchemaItemReceiver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemReceiver >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemUfb* Arena::CreateMaybeMessage< ::Proto::SchemaItemUfb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemUfb >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemTerminator* Arena::CreateMaybeMessage< ::Proto::SchemaItemTerminator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemTerminator >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemValue* Arena::CreateMaybeMessage< ::Proto::SchemaItemValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemImageValue* Arena::CreateMaybeMessage< ::Proto::SchemaItemImageValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemImageValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemBus* Arena::CreateMaybeMessage< ::Proto::SchemaItemBus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemBus >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemBusComposer* Arena::CreateMaybeMessage< ::Proto::SchemaItemBusComposer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemBusComposer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemBusExtractor* Arena::CreateMaybeMessage< ::Proto::SchemaItemBusExtractor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemBusExtractor >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemLoopback* Arena::CreateMaybeMessage< ::Proto::SchemaItemLoopback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemLoopback >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemLoopbackSource* Arena::CreateMaybeMessage< ::Proto::SchemaItemLoopbackSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemLoopbackSource >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemLoopbackTarget* Arena::CreateMaybeMessage< ::Proto::SchemaItemLoopbackTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemLoopbackTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemControl* Arena::CreateMaybeMessage< ::Proto::SchemaItemControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemControl >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemPushButton* Arena::CreateMaybeMessage< ::Proto::SchemaItemPushButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemPushButton >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaItemLineEdit* Arena::CreateMaybeMessage< ::Proto::SchemaItemLineEdit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaItemLineEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceObject* Arena::CreateMaybeMessage< ::Proto::DeviceObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceObject >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceRoot* Arena::CreateMaybeMessage< ::Proto::DeviceRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceSystem* Arena::CreateMaybeMessage< ::Proto::DeviceSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceRack* Arena::CreateMaybeMessage< ::Proto::DeviceRack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceRack >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceChassis* Arena::CreateMaybeMessage< ::Proto::DeviceChassis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceChassis >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceModule* Arena::CreateMaybeMessage< ::Proto::DeviceModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceModule >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceController* Arena::CreateMaybeMessage< ::Proto::DeviceController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceController >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DeviceAppSignal* Arena::CreateMaybeMessage< ::Proto::DeviceAppSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DeviceAppSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Workstation* Arena::CreateMaybeMessage< ::Proto::Workstation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Workstation >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Software* Arena::CreateMaybeMessage< ::Proto::Software >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Software >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ModuleConfiguration* Arena::CreateMaybeMessage< ::Proto::ModuleConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ModuleConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ModuleConfigurationValue* Arena::CreateMaybeMessage< ::Proto::ModuleConfigurationValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ModuleConfigurationValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Property* Arena::CreateMaybeMessage< ::Proto::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SignalSpecPropValue* Arena::CreateMaybeMessage< ::Proto::SignalSpecPropValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SignalSpecPropValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SignalSpecPropValues* Arena::CreateMaybeMessage< ::Proto::SignalSpecPropValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SignalSpecPropValues >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Address16* Arena::CreateMaybeMessage< ::Proto::Address16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Address16 >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Unit* Arena::CreateMaybeMessage< ::Proto::Unit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::UnitSet* Arena::CreateMaybeMessage< ::Proto::UnitSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::UnitSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TuningValue* Arena::CreateMaybeMessage< ::Proto::TuningValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TuningValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppSignalDbField* Arena::CreateMaybeMessage< ::Proto::AppSignalDbField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AppSignalDbField >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::StateFlagSignal* Arena::CreateMaybeMessage< ::Proto::StateFlagSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::StateFlagSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppSignalCalculatedParam* Arena::CreateMaybeMessage< ::Proto::AppSignalCalculatedParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AppSignalCalculatedParam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppSignal* Arena::CreateMaybeMessage< ::Proto::AppSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AppSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppSignalSet* Arena::CreateMaybeMessage< ::Proto::AppSignalSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AppSignalSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ProtoAppSignalData* Arena::CreateMaybeMessage< ::Proto::ProtoAppSignalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ProtoAppSignalData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppSignalState* Arena::CreateMaybeMessage< ::Proto::AppSignalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::AppSignalState >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Connection* Arena::CreateMaybeMessage< ::Proto::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaDetailsSet* Arena::CreateMaybeMessage< ::Proto::SchemaDetailsSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaDetailsSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SchemaDetails* Arena::CreateMaybeMessage< ::Proto::SchemaDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SchemaDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ArchSignal* Arena::CreateMaybeMessage< ::Proto::ArchSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ArchSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ArchSignals* Arena::CreateMaybeMessage< ::Proto::ArchSignals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ArchSignals >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BusSignal* Arena::CreateMaybeMessage< ::Proto::BusSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::BusSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Bus* Arena::CreateMaybeMessage< ::Proto::Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ComparatorSignal* Arena::CreateMaybeMessage< ::Proto::ComparatorSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ComparatorSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Comparator* Arena::CreateMaybeMessage< ::Proto::Comparator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Comparator >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LmComparatorSet* Arena::CreateMaybeMessage< ::Proto::LmComparatorSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::LmComparatorSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ComparatorSet* Arena::CreateMaybeMessage< ::Proto::ComparatorSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ComparatorSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::MetrologySignalLocation* Arena::CreateMaybeMessage< ::Proto::MetrologySignalLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::MetrologySignalLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::MetrologySignal* Arena::CreateMaybeMessage< ::Proto::MetrologySignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::MetrologySignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::MetrologySignalSet* Arena::CreateMaybeMessage< ::Proto::MetrologySignalSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::MetrologySignalSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SimOverrideSignal* Arena::CreateMaybeMessage< ::Proto::SimOverrideSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SimOverrideSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SimOverrideSignalWorkspace* Arena::CreateMaybeMessage< ::Proto::SimOverrideSignalWorkspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SimOverrideSignalWorkspace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#ifdef _MSC_VER
#pragma warning(pop)
#endif