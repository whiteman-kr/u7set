#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 6011)
#pragma warning(disable : 4100)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* qvariant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qvariant_reflection_ = NULL;
const ::google::protobuf::Descriptor* wstring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wstring_reflection_ = NULL;
const ::google::protobuf::Descriptor* FontParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnvelopeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvelopeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnvelopeSetShortDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvelopeSetShortDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbElementCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbElementCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbElementXml_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbElementXml_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfbParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfbParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Schema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schema_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* UfbSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UfbSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosRectImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosRectImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosLineImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosLineImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosConnectionImpl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosConnectionImpl_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblConnectionPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblConnectionPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItemRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItemRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* FblItemLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FblItemLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemSignalColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemSignalColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemInOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemInOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemAfb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemAfb_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemTransmitter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemTransmitter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemReceiver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemReceiver_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemUfb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemUfb_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemTerminator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemTerminator_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemBus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemBus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemBusComposer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemBusComposer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemBusExtractor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemBusExtractor_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLoopback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLoopback_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLoopbackSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLoopbackSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLoopbackTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLoopbackTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemPushButton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemPushButton_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaItemLineEdit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaItemLineEdit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceRoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceRack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceRack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceChassis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceChassis_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceController_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceController_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Workstation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Workstation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Software_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Software_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleConfigurationValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleConfigurationValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalSpecPropValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalSpecPropValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalSpecPropValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalSpecPropValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address16_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuningValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuningValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppSignalDbField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppSignalDbField_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppSignalCalculatedParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppSignalCalculatedParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppSignalSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppSignalSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAppSignalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAppSignalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppSignalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppSignalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connection_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaDetailsSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaDetailsSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArchSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArchSignals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchSignals_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SchemaUnit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionDirrection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FblSignalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FblDataFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialization_2eproto() {
  protobuf_AddDesc_serialization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialization.proto");
  GOOGLE_CHECK(file != NULL);
  Uuid_descriptor_ = file->message_type(0);
  static const int Uuid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, uuid_),
  };
  Uuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uuid_descriptor_,
      Uuid::default_instance_,
      Uuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uuid));
  qvariant_descriptor_ = file->message_type(1);
  static const int qvariant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, uintvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, doublevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, boolvalue_),
  };
  qvariant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qvariant_descriptor_,
      qvariant::default_instance_,
      qvariant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qvariant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qvariant));
  wstring_descriptor_ = file->message_type(2);
  static const int wstring_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, text_),
  };
  wstring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wstring_descriptor_,
      wstring::default_instance_,
      wstring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wstring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wstring));
  FontParam_descriptor_ = file->message_type(3);
  static const int FontParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, name_obsolete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, name_),
  };
  FontParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontParam_descriptor_,
      FontParam::default_instance_,
      FontParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontParam));
  SchemaPoint_descriptor_ = file->message_type(4);
  static const int SchemaPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, y_),
  };
  SchemaPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaPoint_descriptor_,
      SchemaPoint::default_instance_,
      SchemaPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaPoint));
  Envelope_descriptor_ = file->message_type(5);
  static const int Envelope_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, classnamehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, compressedobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schemaitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, deviceobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schemalayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, fblelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, schemadetailsset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, bus_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  EnvelopeSet_descriptor_ = file->message_type(6);
  static const int EnvelopeSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSet, items_),
  };
  EnvelopeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnvelopeSet_descriptor_,
      EnvelopeSet::default_instance_,
      EnvelopeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnvelopeSet));
  EnvelopeSetShortDescription_descriptor_ = file->message_type(7);
  static const int EnvelopeSetShortDescription_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, projectdbversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, classnamehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, equipmenteditor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, preseteditor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, presetroot_),
  };
  EnvelopeSetShortDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnvelopeSetShortDescription_descriptor_,
      EnvelopeSetShortDescription::default_instance_,
      EnvelopeSetShortDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeSetShortDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnvelopeSetShortDescription));
  Configuration_descriptor_ = file->message_type(8);
  static const int Configuration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, globals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, schemasids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, schemas_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  AfbElementCollection_descriptor_ = file->message_type(9);
  static const int AfbElementCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, elements_),
  };
  AfbElementCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbElementCollection_descriptor_,
      AfbElementCollection::default_instance_,
      AfbElementCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbElementCollection));
  AfbElementXml_descriptor_ = file->message_type(10);
  static const int AfbElementXml_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, data_),
  };
  AfbElementXml_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbElementXml_descriptor_,
      AfbElementXml::default_instance_,
      AfbElementXml_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbElementXml, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbElementXml));
  FblElement_descriptor_ = file->message_type(11);
  static const int FblElement_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, strid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, hasram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, requiredstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, description_),
  };
  FblElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblElement_descriptor_,
      FblElement::default_instance_,
      FblElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblElement));
  AfbSignal_descriptor_ = file->message_type(12);
  static const int AfbSignal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, operandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, opname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, dataformat_),
  };
  AfbSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbSignal_descriptor_,
      AfbSignal::default_instance_,
      AfbSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbSignal));
  AfbParam_descriptor_ = file->message_type(13);
  static const int AfbParam_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, operandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, instantiator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, changedscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, defaultvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, lowlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, highlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, opname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, dataformat_),
  };
  AfbParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfbParam_descriptor_,
      AfbParam::default_instance_,
      AfbParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfbParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfbParam));
  Schema_descriptor_ = file->message_type(14);
  static const int Schema_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, schemaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, excludefrombuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, backgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, afbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, logic_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, ufb_schema_),
  };
  Schema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schema_descriptor_,
      Schema::default_instance_,
      Schema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schema));
  LogicSchema_descriptor_ = file->message_type(15);
  static const int LogicSchema_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, equipmentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, lmdescriptionfile_),
  };
  LogicSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicSchema_descriptor_,
      LogicSchema::default_instance_,
      LogicSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicSchema));
  UfbSchema_descriptor_ = file->message_type(16);
  static const int UfbSchema_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UfbSchema, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UfbSchema, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UfbSchema, lmdescriptionfile_),
  };
  UfbSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UfbSchema_descriptor_,
      UfbSchema::default_instance_,
      UfbSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UfbSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UfbSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UfbSchema));
  SchemaLayer_descriptor_ = file->message_type(17);
  static const int SchemaLayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, compile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, items_),
  };
  SchemaLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaLayer_descriptor_,
      SchemaLayer::default_instance_,
      SchemaLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaLayer));
  SchemaItem_descriptor_ = file->message_type(18);
  static const int SchemaItem_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, isstatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, itemunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, acceptclick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, clickscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, iscommented_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, objectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, predrawscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, posrectimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, poslineimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, posconnectionimpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, fblitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, fblitemrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, fblitemline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, inputsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, outputsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, afb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, constitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, connectionitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, transmitteritem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, receiveritem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, inoutsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, ufb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, terminator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, busitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, buscomposer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, busextractor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, loopbackitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, loopbacksource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, loopbacktarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, pushbutton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, lineedit_),
  };
  SchemaItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItem_descriptor_,
      SchemaItem::default_instance_,
      SchemaItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItem));
  PosRectImpl_descriptor_ = file->message_type(19);
  static const int PosRectImpl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, leftdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, topdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, widthdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, heightdocpt_),
  };
  PosRectImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosRectImpl_descriptor_,
      PosRectImpl::default_instance_,
      PosRectImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosRectImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosRectImpl));
  PosLineImpl_descriptor_ = file->message_type(20);
  static const int PosLineImpl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, startxdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, startydocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, endxdocpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, endydocpt_),
  };
  PosLineImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosLineImpl_descriptor_,
      PosLineImpl::default_instance_,
      PosLineImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosLineImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosLineImpl));
  PosConnectionImpl_descriptor_ = file->message_type(21);
  static const int PosConnectionImpl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, points_),
  };
  PosConnectionImpl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosConnectionImpl_descriptor_,
      PosConnectionImpl::default_instance_,
      PosConnectionImpl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosConnectionImpl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosConnectionImpl));
  SchemaItemRect_descriptor_ = file->message_type(22);
  static const int SchemaItemRect_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, drawrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, horzalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, vertalign_),
  };
  SchemaItemRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemRect_descriptor_,
      SchemaItemRect::default_instance_,
      SchemaItemRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemRect));
  SchemaItemLine_descriptor_ = file->message_type(23);
  static const int SchemaItemLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, linecolor_),
  };
  SchemaItemLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLine_descriptor_,
      SchemaItemLine::default_instance_,
      SchemaItemLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLine));
  SchemaItemPath_descriptor_ = file->message_type(24);
  static const int SchemaItemPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, linecolor_),
  };
  SchemaItemPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemPath_descriptor_,
      SchemaItemPath::default_instance_,
      SchemaItemPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemPath));
  SchemaItemImage_descriptor_ = file->message_type(25);
  static const int SchemaItemImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemImage, keepaspectratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemImage, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemImage, svgdata_),
  };
  SchemaItemImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemImage_descriptor_,
      SchemaItemImage::default_instance_,
      SchemaItemImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemImage));
  FblConnectionPoint_descriptor_ = file->message_type(26);
  static const int FblConnectionPoint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, dirrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, operandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, associatedios_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, signaltype_),
  };
  FblConnectionPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblConnectionPoint_descriptor_,
      FblConnectionPoint::default_instance_,
      FblConnectionPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblConnectionPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblConnectionPoint));
  FblItem_descriptor_ = file->message_type(27);
  static const int FblItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, points_),
  };
  FblItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItem_descriptor_,
      FblItem::default_instance_,
      FblItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItem));
  FblItemRect_descriptor_ = file->message_type(28);
  static const int FblItemRect_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, usertext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, usertextpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, labelpos_),
  };
  FblItemRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItemRect_descriptor_,
      FblItemRect::default_instance_,
      FblItemRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItemRect));
  FblItemLine_descriptor_ = file->message_type(29);
  static const int FblItemLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, linecolor_),
  };
  FblItemLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FblItemLine_descriptor_,
      FblItemLine::default_instance_,
      FblItemLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FblItemLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FblItemLine));
  SchemaItemSignalColumn_descriptor_ = file->message_type(30);
  static const int SchemaItemSignalColumn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignalColumn, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignalColumn, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignalColumn, horzalign_),
  };
  SchemaItemSignalColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemSignalColumn_descriptor_,
      SchemaItemSignalColumn::default_instance_,
      SchemaItemSignalColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignalColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignalColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemSignalColumn));
  SchemaItemSignal_descriptor_ = file->message_type(31);
  static const int SchemaItemSignal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, appsignalids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, analogformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, multiline_),
  };
  SchemaItemSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemSignal_descriptor_,
      SchemaItemSignal::default_instance_,
      SchemaItemSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemSignal));
  SchemaItemInput_descriptor_ = file->message_type(32);
  static const int SchemaItemInput_offsets_[1] = {
  };
  SchemaItemInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemInput_descriptor_,
      SchemaItemInput::default_instance_,
      SchemaItemInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemInput));
  SchemaItemOutput_descriptor_ = file->message_type(33);
  static const int SchemaItemOutput_offsets_[1] = {
  };
  SchemaItemOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemOutput_descriptor_,
      SchemaItemOutput::default_instance_,
      SchemaItemOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemOutput));
  SchemaItemInOut_descriptor_ = file->message_type(34);
  static const int SchemaItemInOut_offsets_[1] = {
  };
  SchemaItemInOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemInOut_descriptor_,
      SchemaItemInOut::default_instance_,
      SchemaItemInOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemInOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemInOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemInOut));
  SchemaItemLink_descriptor_ = file->message_type(35);
  static const int SchemaItemLink_offsets_[1] = {
  };
  SchemaItemLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLink_descriptor_,
      SchemaItemLink::default_instance_,
      SchemaItemLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLink));
  SchemaItemAfb_descriptor_ = file->message_type(36);
  static const int SchemaItemAfb_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, afbstrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, deprecated_afbelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, deprecated_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, afbelement_),
  };
  SchemaItemAfb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemAfb_descriptor_,
      SchemaItemAfb::default_instance_,
      SchemaItemAfb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemAfb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemAfb));
  SchemaItemConst_descriptor_ = file->message_type(37);
  static const int SchemaItemConst_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, floatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, discretevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, horzalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, vertalign_),
  };
  SchemaItemConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemConst_descriptor_,
      SchemaItemConst::default_instance_,
      SchemaItemConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemConst));
  SchemaItemConnection_descriptor_ = file->message_type(38);
  static const int SchemaItemConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConnection, connectionid_),
  };
  SchemaItemConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemConnection_descriptor_,
      SchemaItemConnection::default_instance_,
      SchemaItemConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemConnection));
  SchemaItemTransmitter_descriptor_ = file->message_type(39);
  static const int SchemaItemTransmitter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemTransmitter, pincount_),
  };
  SchemaItemTransmitter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemTransmitter_descriptor_,
      SchemaItemTransmitter::default_instance_,
      SchemaItemTransmitter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemTransmitter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemTransmitter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemTransmitter));
  SchemaItemReceiver_descriptor_ = file->message_type(40);
  static const int SchemaItemReceiver_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, showvalidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, appsignalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, analogformat_),
  };
  SchemaItemReceiver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemReceiver_descriptor_,
      SchemaItemReceiver::default_instance_,
      SchemaItemReceiver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemReceiver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemReceiver));
  SchemaItemUfb_descriptor_ = file->message_type(41);
  static const int SchemaItemUfb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemUfb, ufbschemaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemUfb, ufbcaption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemUfb, ufbversion_),
  };
  SchemaItemUfb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemUfb_descriptor_,
      SchemaItemUfb::default_instance_,
      SchemaItemUfb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemUfb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemUfb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemUfb));
  SchemaItemTerminator_descriptor_ = file->message_type(42);
  static const int SchemaItemTerminator_offsets_[1] = {
  };
  SchemaItemTerminator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemTerminator_descriptor_,
      SchemaItemTerminator::default_instance_,
      SchemaItemTerminator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemTerminator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemTerminator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemTerminator));
  SchemaItemValue_descriptor_ = file->message_type(43);
  static const int SchemaItemValue_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, signalids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, signalsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, lineweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, fillcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, drawrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, horzalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, vertalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, analogformat_),
  };
  SchemaItemValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemValue_descriptor_,
      SchemaItemValue::default_instance_,
      SchemaItemValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemValue));
  SchemaItemBus_descriptor_ = file->message_type(44);
  static const int SchemaItemBus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBus, bustypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBus, bustypehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBus, bus_),
  };
  SchemaItemBus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemBus_descriptor_,
      SchemaItemBus::default_instance_,
      SchemaItemBus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemBus));
  SchemaItemBusComposer_descriptor_ = file->message_type(45);
  static const int SchemaItemBusComposer_offsets_[1] = {
  };
  SchemaItemBusComposer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemBusComposer_descriptor_,
      SchemaItemBusComposer::default_instance_,
      SchemaItemBusComposer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBusComposer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBusComposer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemBusComposer));
  SchemaItemBusExtractor_descriptor_ = file->message_type(46);
  static const int SchemaItemBusExtractor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBusExtractor, properties_),
  };
  SchemaItemBusExtractor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemBusExtractor_descriptor_,
      SchemaItemBusExtractor::default_instance_,
      SchemaItemBusExtractor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBusExtractor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemBusExtractor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemBusExtractor));
  SchemaItemLoopback_descriptor_ = file->message_type(47);
  static const int SchemaItemLoopback_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopback, loopbackid_),
  };
  SchemaItemLoopback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLoopback_descriptor_,
      SchemaItemLoopback::default_instance_,
      SchemaItemLoopback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLoopback));
  SchemaItemLoopbackSource_descriptor_ = file->message_type(48);
  static const int SchemaItemLoopbackSource_offsets_[1] = {
  };
  SchemaItemLoopbackSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLoopbackSource_descriptor_,
      SchemaItemLoopbackSource::default_instance_,
      SchemaItemLoopbackSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopbackSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopbackSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLoopbackSource));
  SchemaItemLoopbackTarget_descriptor_ = file->message_type(49);
  static const int SchemaItemLoopbackTarget_offsets_[1] = {
  };
  SchemaItemLoopbackTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLoopbackTarget_descriptor_,
      SchemaItemLoopbackTarget::default_instance_,
      SchemaItemLoopbackTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopbackTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLoopbackTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLoopbackTarget));
  SchemaItemControl_descriptor_ = file->message_type(50);
  static const int SchemaItemControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemControl, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemControl, tooltip_),
  };
  SchemaItemControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemControl_descriptor_,
      SchemaItemControl::default_instance_,
      SchemaItemControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemControl));
  SchemaItemPushButton_descriptor_ = file->message_type(51);
  static const int SchemaItemPushButton_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, checkable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, checkeddefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, autorepeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, autorepeatdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, autorepeatinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, scriptaftercreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, scriptclicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, scriptpressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, scriptreleased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, scripttoggled_),
  };
  SchemaItemPushButton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemPushButton_descriptor_,
      SchemaItemPushButton::default_instance_,
      SchemaItemPushButton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemPushButton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemPushButton));
  SchemaItemLineEdit_descriptor_ = file->message_type(52);
  static const int SchemaItemLineEdit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, horzalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, vertalign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, maxlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, placeholdertext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, readonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, scriptaftercreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, scripteditingfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, scriptreturnpressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, scripttextchanged_),
  };
  SchemaItemLineEdit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaItemLineEdit_descriptor_,
      SchemaItemLineEdit::default_instance_,
      SchemaItemLineEdit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaItemLineEdit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaItemLineEdit));
  DeviceObject_descriptor_ = file->message_type(53);
  static const int DeviceObject_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, childrestriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, specific_properties_struct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, presetobjectuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, childcounthint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, rack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, chassis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, workstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, children_),
  };
  DeviceObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceObject_descriptor_,
      DeviceObject::default_instance_,
      DeviceObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceObject));
  DeviceRoot_descriptor_ = file->message_type(54);
  static const int DeviceRoot_offsets_[1] = {
  };
  DeviceRoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceRoot_descriptor_,
      DeviceRoot::default_instance_,
      DeviceRoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceRoot));
  DeviceSystem_descriptor_ = file->message_type(55);
  static const int DeviceSystem_offsets_[1] = {
  };
  DeviceSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSystem_descriptor_,
      DeviceSystem::default_instance_,
      DeviceSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSystem));
  DeviceRack_descriptor_ = file->message_type(56);
  static const int DeviceRack_offsets_[1] = {
  };
  DeviceRack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceRack_descriptor_,
      DeviceRack::default_instance_,
      DeviceRack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceRack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceRack));
  DeviceChassis_descriptor_ = file->message_type(57);
  static const int DeviceChassis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, type_),
  };
  DeviceChassis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceChassis_descriptor_,
      DeviceChassis::default_instance_,
      DeviceChassis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceChassis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceChassis));
  DeviceModule_descriptor_ = file->message_type(58);
  static const int DeviceModule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, typeobsolete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, configurationscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, moduletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, rawdatadescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, custommodulefamily_),
  };
  DeviceModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceModule_descriptor_,
      DeviceModule::default_instance_,
      DeviceModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceModule));
  DeviceController_descriptor_ = file->message_type(59);
  static const int DeviceController_offsets_[1] = {
  };
  DeviceController_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceController_descriptor_,
      DeviceController::default_instance_,
      DeviceController_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceController, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceController, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceController));
  DeviceSignal_descriptor_ = file->message_type(60);
  static const int DeviceSignal_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, obsoletetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, byteorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, valueoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, valuebit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, memoryarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, appsignallowadc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, appsignalhighadc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, appsignallowengunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, appsignalhighengunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, appsignaldataformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, validitysignalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, signalspecpropsstruc_),
  };
  DeviceSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSignal_descriptor_,
      DeviceSignal::default_instance_,
      DeviceSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSignal));
  Workstation_descriptor_ = file->message_type(61);
  static const int Workstation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workstation, type_),
  };
  Workstation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Workstation_descriptor_,
      Workstation::default_instance_,
      Workstation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workstation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workstation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Workstation));
  Software_descriptor_ = file->message_type(62);
  static const int Software_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, type_),
  };
  Software_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Software_descriptor_,
      Software::default_instance_,
      Software_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Software));
  ModuleConfiguration_descriptor_ = file->message_type(63);
  static const int ModuleConfiguration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, struct_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, name_),
  };
  ModuleConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleConfiguration_descriptor_,
      ModuleConfiguration::default_instance_,
      ModuleConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleConfiguration));
  ModuleConfigurationValue_descriptor_ = file->message_type(64);
  static const int ModuleConfigurationValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, value_),
  };
  ModuleConfigurationValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleConfigurationValue_descriptor_,
      ModuleConfigurationValue::default_instance_,
      ModuleConfigurationValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleConfigurationValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleConfigurationValue));
  Property_descriptor_ = file->message_type(65);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  SignalSpecPropValue_descriptor_ = file->message_type(66);
  static const int SignalSpecPropValue_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, isenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, int32val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, uint32val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, int64val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, uint64val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, doubleval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, boolval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, stringval_),
  };
  SignalSpecPropValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalSpecPropValue_descriptor_,
      SignalSpecPropValue::default_instance_,
      SignalSpecPropValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalSpecPropValue));
  SignalSpecPropValues_descriptor_ = file->message_type(67);
  static const int SignalSpecPropValues_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValues, value_),
  };
  SignalSpecPropValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalSpecPropValues_descriptor_,
      SignalSpecPropValues::default_instance_,
      SignalSpecPropValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSpecPropValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalSpecPropValues));
  Address16_descriptor_ = file->message_type(68);
  static const int Address16_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address16, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address16, bit_),
  };
  Address16_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address16_descriptor_,
      Address16::default_instance_,
      Address16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address16, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address16, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address16));
  Unit_descriptor_ = file->message_type(69);
  static const int Unit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, caption_),
  };
  Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unit_descriptor_,
      Unit::default_instance_,
      Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unit));
  UnitSet_descriptor_ = file->message_type(70);
  static const int UnitSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSet, unit_),
  };
  UnitSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitSet_descriptor_,
      UnitSet::default_instance_,
      UnitSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitSet));
  TuningValue_descriptor_ = file->message_type(71);
  static const int TuningValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningValue, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningValue, doublevalue_),
  };
  TuningValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuningValue_descriptor_,
      TuningValue::default_instance_,
      TuningValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuningValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuningValue));
  AppSignalDbField_descriptor_ = file->message_type(72);
  static const int AppSignalDbField_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, signalgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, signalinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, changesetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, checkedout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, instancecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, instanceaction_),
  };
  AppSignalDbField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppSignalDbField_descriptor_,
      AppSignalDbField::default_instance_,
      AppSignalDbField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalDbField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppSignalDbField));
  AppSignalCalculatedParam_descriptor_ = file->message_type(73);
  static const int AppSignalCalculatedParam_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, iobufaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, tuningaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, ualaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, regbufaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, regvalueaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, regvalidityaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, lmramaccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, isconst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, constvalue_),
  };
  AppSignalCalculatedParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppSignalCalculatedParam_descriptor_,
      AppSignalCalculatedParam::default_instance_,
      AppSignalCalculatedParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalCalculatedParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppSignalCalculatedParam));
  AppSignal_descriptor_ = file->message_type(74);
  static const int AppSignal_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, appsignalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, customappsignalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, lmequipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, bustypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, excludefrombuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, signaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, inouttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, byteorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, analogsignalformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, enabletuning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, tuningdefaultvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, tuninglowbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, tuninghighbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, acquire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, archive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, decimalplaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, coarseaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, fineaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, adaptiveaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, specpropstruct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, specpropvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, dbfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, calcparam_),
  };
  AppSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppSignal_descriptor_,
      AppSignal::default_instance_,
      AppSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppSignal));
  AppSignalSet_descriptor_ = file->message_type(75);
  static const int AppSignalSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalSet, appsignal_),
  };
  AppSignalSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppSignalSet_descriptor_,
      AppSignalSet::default_instance_,
      AppSignalSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppSignalSet));
  ProtoAppSignalData_descriptor_ = file->message_type(76);
  static const int ProtoAppSignalData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, bustypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, byteorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, analogsignalformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, enabletuning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, tuningdefaultvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, tuninglowbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, tuninghighbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, acquire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, archive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, decimalplaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, coarseaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, fineaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, adaptiveaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, excludefrombuild_),
  };
  ProtoAppSignalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAppSignalData_descriptor_,
      ProtoAppSignalData::default_instance_,
      ProtoAppSignalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAppSignalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAppSignalData));
  AppSignalState_descriptor_ = file->message_type(77);
  static const int AppSignalState_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, systemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, localtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, planttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, archiveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, packetno_),
  };
  AppSignalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppSignalState_descriptor_,
      AppSignalState::default_instance_,
      AppSignalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppSignalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppSignalState));
  Connection_descriptor_ = file->message_type(78);
  static const int Connection_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1rawdatadescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2rawdatadescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, manualsettings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, disabledataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, generatevhdfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1txstartaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1txwordsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1rxwordsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2txstartaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2txwordsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2rxwordsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1enableserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1serialmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port1enableduplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2enableserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2serialmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, port2enableduplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, obsoletemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, obsoleteserialmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, obsoleteenableduplex_),
  };
  Connection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connection_descriptor_,
      Connection::default_instance_,
      Connection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connection));
  SchemaDetailsSet_descriptor_ = file->message_type(79);
  static const int SchemaDetailsSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetailsSet, schemasdetails_),
  };
  SchemaDetailsSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaDetailsSet_descriptor_,
      SchemaDetailsSet::default_instance_,
      SchemaDetailsSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetailsSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetailsSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaDetailsSet));
  SchemaDetails_descriptor_ = file->message_type(80);
  static const int SchemaDetails_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, schemaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, excludedfrombuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, lmdescriptionfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, signalids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, tags_),
  };
  SchemaDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaDetails_descriptor_,
      SchemaDetails::default_instance_,
      SchemaDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaDetails));
  ArchSignal_descriptor_ = file->message_type(81);
  static const int ArchSignal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignal, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignal, isanalog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignal, appsignalid_),
  };
  ArchSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchSignal_descriptor_,
      ArchSignal::default_instance_,
      ArchSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchSignal));
  ArchSignals_descriptor_ = file->message_type(82);
  static const int ArchSignals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignals, archsignals_),
  };
  ArchSignals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchSignals_descriptor_,
      ArchSignals::default_instance_,
      ArchSignals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchSignals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchSignals));
  BusSignal_descriptor_ = file->message_type(83);
  static const int BusSignal_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, signalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, analogformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, coarseaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, fineaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, adaptiveaperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, bustypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusdiscretebitno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusanalogsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusanalogformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusanalogbyteorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, busanaloglowlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, busanaloghighlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusanaloglowlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, inbusanaloghighlimit_),
  };
  BusSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusSignal_descriptor_,
      BusSignal::default_instance_,
      BusSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusSignal));
  Bus_descriptor_ = file->message_type(84);
  static const int Bus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, bustypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, bussignals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, autosignalplacement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, manualbussize_),
  };
  Bus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bus_descriptor_,
      Bus::default_instance_,
      Bus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bus));
  SchemaUnit_descriptor_ = file->enum_type(0);
  ConnectionDirrection_descriptor_ = file->enum_type(1);
  FblSignalType_descriptor_ = file->enum_type(2);
  FblDataFormat_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uuid_descriptor_, &Uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qvariant_descriptor_, &qvariant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wstring_descriptor_, &wstring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontParam_descriptor_, &FontParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaPoint_descriptor_, &SchemaPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnvelopeSet_descriptor_, &EnvelopeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnvelopeSetShortDescription_descriptor_, &EnvelopeSetShortDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbElementCollection_descriptor_, &AfbElementCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbElementXml_descriptor_, &AfbElementXml::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblElement_descriptor_, &FblElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbSignal_descriptor_, &AfbSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfbParam_descriptor_, &AfbParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schema_descriptor_, &Schema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicSchema_descriptor_, &LogicSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UfbSchema_descriptor_, &UfbSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaLayer_descriptor_, &SchemaLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItem_descriptor_, &SchemaItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosRectImpl_descriptor_, &PosRectImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosLineImpl_descriptor_, &PosLineImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosConnectionImpl_descriptor_, &PosConnectionImpl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemRect_descriptor_, &SchemaItemRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLine_descriptor_, &SchemaItemLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemPath_descriptor_, &SchemaItemPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemImage_descriptor_, &SchemaItemImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblConnectionPoint_descriptor_, &FblConnectionPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItem_descriptor_, &FblItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItemRect_descriptor_, &FblItemRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FblItemLine_descriptor_, &FblItemLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemSignalColumn_descriptor_, &SchemaItemSignalColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemSignal_descriptor_, &SchemaItemSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemInput_descriptor_, &SchemaItemInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemOutput_descriptor_, &SchemaItemOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemInOut_descriptor_, &SchemaItemInOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLink_descriptor_, &SchemaItemLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemAfb_descriptor_, &SchemaItemAfb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemConst_descriptor_, &SchemaItemConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemConnection_descriptor_, &SchemaItemConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemTransmitter_descriptor_, &SchemaItemTransmitter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemReceiver_descriptor_, &SchemaItemReceiver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemUfb_descriptor_, &SchemaItemUfb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemTerminator_descriptor_, &SchemaItemTerminator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemValue_descriptor_, &SchemaItemValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemBus_descriptor_, &SchemaItemBus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemBusComposer_descriptor_, &SchemaItemBusComposer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemBusExtractor_descriptor_, &SchemaItemBusExtractor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLoopback_descriptor_, &SchemaItemLoopback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLoopbackSource_descriptor_, &SchemaItemLoopbackSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLoopbackTarget_descriptor_, &SchemaItemLoopbackTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemControl_descriptor_, &SchemaItemControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemPushButton_descriptor_, &SchemaItemPushButton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaItemLineEdit_descriptor_, &SchemaItemLineEdit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceObject_descriptor_, &DeviceObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceRoot_descriptor_, &DeviceRoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSystem_descriptor_, &DeviceSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceRack_descriptor_, &DeviceRack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceChassis_descriptor_, &DeviceChassis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceModule_descriptor_, &DeviceModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceController_descriptor_, &DeviceController::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSignal_descriptor_, &DeviceSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Workstation_descriptor_, &Workstation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Software_descriptor_, &Software::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleConfiguration_descriptor_, &ModuleConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleConfigurationValue_descriptor_, &ModuleConfigurationValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalSpecPropValue_descriptor_, &SignalSpecPropValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalSpecPropValues_descriptor_, &SignalSpecPropValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address16_descriptor_, &Address16::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unit_descriptor_, &Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitSet_descriptor_, &UnitSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuningValue_descriptor_, &TuningValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppSignalDbField_descriptor_, &AppSignalDbField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppSignalCalculatedParam_descriptor_, &AppSignalCalculatedParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppSignal_descriptor_, &AppSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppSignalSet_descriptor_, &AppSignalSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAppSignalData_descriptor_, &ProtoAppSignalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppSignalState_descriptor_, &AppSignalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connection_descriptor_, &Connection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaDetailsSet_descriptor_, &SchemaDetailsSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaDetails_descriptor_, &SchemaDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchSignal_descriptor_, &ArchSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchSignals_descriptor_, &ArchSignals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusSignal_descriptor_, &BusSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bus_descriptor_, &Bus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialization_2eproto() {
  delete Uuid::default_instance_;
  delete Uuid_reflection_;
  delete qvariant::default_instance_;
  delete qvariant_reflection_;
  delete wstring::default_instance_;
  delete wstring_reflection_;
  delete FontParam::default_instance_;
  delete FontParam_reflection_;
  delete SchemaPoint::default_instance_;
  delete SchemaPoint_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete EnvelopeSet::default_instance_;
  delete EnvelopeSet_reflection_;
  delete EnvelopeSetShortDescription::default_instance_;
  delete EnvelopeSetShortDescription_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete AfbElementCollection::default_instance_;
  delete AfbElementCollection_reflection_;
  delete AfbElementXml::default_instance_;
  delete AfbElementXml_reflection_;
  delete FblElement::default_instance_;
  delete FblElement_reflection_;
  delete AfbSignal::default_instance_;
  delete AfbSignal_reflection_;
  delete AfbParam::default_instance_;
  delete AfbParam_reflection_;
  delete Schema::default_instance_;
  delete Schema_reflection_;
  delete LogicSchema::default_instance_;
  delete LogicSchema_reflection_;
  delete LogicSchema::_default_lmdescriptionfile_;
  delete UfbSchema::default_instance_;
  delete UfbSchema_reflection_;
  delete UfbSchema::_default_lmdescriptionfile_;
  delete SchemaLayer::default_instance_;
  delete SchemaLayer_reflection_;
  delete SchemaItem::default_instance_;
  delete SchemaItem_reflection_;
  delete PosRectImpl::default_instance_;
  delete PosRectImpl_reflection_;
  delete PosLineImpl::default_instance_;
  delete PosLineImpl_reflection_;
  delete PosConnectionImpl::default_instance_;
  delete PosConnectionImpl_reflection_;
  delete SchemaItemRect::default_instance_;
  delete SchemaItemRect_reflection_;
  delete SchemaItemLine::default_instance_;
  delete SchemaItemLine_reflection_;
  delete SchemaItemPath::default_instance_;
  delete SchemaItemPath_reflection_;
  delete SchemaItemImage::default_instance_;
  delete SchemaItemImage_reflection_;
  delete FblConnectionPoint::default_instance_;
  delete FblConnectionPoint_reflection_;
  delete FblItem::default_instance_;
  delete FblItem_reflection_;
  delete FblItemRect::default_instance_;
  delete FblItemRect_reflection_;
  delete FblItemLine::default_instance_;
  delete FblItemLine_reflection_;
  delete SchemaItemSignalColumn::default_instance_;
  delete SchemaItemSignalColumn_reflection_;
  delete SchemaItemSignal::default_instance_;
  delete SchemaItemSignal_reflection_;
  delete SchemaItemInput::default_instance_;
  delete SchemaItemInput_reflection_;
  delete SchemaItemOutput::default_instance_;
  delete SchemaItemOutput_reflection_;
  delete SchemaItemInOut::default_instance_;
  delete SchemaItemInOut_reflection_;
  delete SchemaItemLink::default_instance_;
  delete SchemaItemLink_reflection_;
  delete SchemaItemAfb::default_instance_;
  delete SchemaItemAfb_reflection_;
  delete SchemaItemConst::default_instance_;
  delete SchemaItemConst_reflection_;
  delete SchemaItemConnection::default_instance_;
  delete SchemaItemConnection_reflection_;
  delete SchemaItemTransmitter::default_instance_;
  delete SchemaItemTransmitter_reflection_;
  delete SchemaItemReceiver::default_instance_;
  delete SchemaItemReceiver_reflection_;
  delete SchemaItemUfb::default_instance_;
  delete SchemaItemUfb_reflection_;
  delete SchemaItemTerminator::default_instance_;
  delete SchemaItemTerminator_reflection_;
  delete SchemaItemValue::default_instance_;
  delete SchemaItemValue_reflection_;
  delete SchemaItemBus::default_instance_;
  delete SchemaItemBus_reflection_;
  delete SchemaItemBusComposer::default_instance_;
  delete SchemaItemBusComposer_reflection_;
  delete SchemaItemBusExtractor::default_instance_;
  delete SchemaItemBusExtractor_reflection_;
  delete SchemaItemLoopback::default_instance_;
  delete SchemaItemLoopback_reflection_;
  delete SchemaItemLoopbackSource::default_instance_;
  delete SchemaItemLoopbackSource_reflection_;
  delete SchemaItemLoopbackTarget::default_instance_;
  delete SchemaItemLoopbackTarget_reflection_;
  delete SchemaItemControl::default_instance_;
  delete SchemaItemControl_reflection_;
  delete SchemaItemPushButton::default_instance_;
  delete SchemaItemPushButton_reflection_;
  delete SchemaItemLineEdit::default_instance_;
  delete SchemaItemLineEdit_reflection_;
  delete DeviceObject::default_instance_;
  delete DeviceObject_reflection_;
  delete DeviceRoot::default_instance_;
  delete DeviceRoot_reflection_;
  delete DeviceSystem::default_instance_;
  delete DeviceSystem_reflection_;
  delete DeviceRack::default_instance_;
  delete DeviceRack_reflection_;
  delete DeviceChassis::default_instance_;
  delete DeviceChassis_reflection_;
  delete DeviceModule::default_instance_;
  delete DeviceModule_reflection_;
  delete DeviceController::default_instance_;
  delete DeviceController_reflection_;
  delete DeviceSignal::default_instance_;
  delete DeviceSignal_reflection_;
  delete Workstation::default_instance_;
  delete Workstation_reflection_;
  delete Software::default_instance_;
  delete Software_reflection_;
  delete ModuleConfiguration::default_instance_;
  delete ModuleConfiguration_reflection_;
  delete ModuleConfigurationValue::default_instance_;
  delete ModuleConfigurationValue_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete SignalSpecPropValue::default_instance_;
  delete SignalSpecPropValue_reflection_;
  delete SignalSpecPropValues::default_instance_;
  delete SignalSpecPropValues_reflection_;
  delete Address16::default_instance_;
  delete Address16_reflection_;
  delete Unit::default_instance_;
  delete Unit_reflection_;
  delete UnitSet::default_instance_;
  delete UnitSet_reflection_;
  delete TuningValue::default_instance_;
  delete TuningValue_reflection_;
  delete AppSignalDbField::default_instance_;
  delete AppSignalDbField_reflection_;
  delete AppSignalCalculatedParam::default_instance_;
  delete AppSignalCalculatedParam_reflection_;
  delete AppSignal::default_instance_;
  delete AppSignal_reflection_;
  delete AppSignalSet::default_instance_;
  delete AppSignalSet_reflection_;
  delete ProtoAppSignalData::default_instance_;
  delete ProtoAppSignalData_reflection_;
  delete AppSignalState::default_instance_;
  delete AppSignalState_reflection_;
  delete Connection::default_instance_;
  delete Connection_reflection_;
  delete SchemaDetailsSet::default_instance_;
  delete SchemaDetailsSet_reflection_;
  delete SchemaDetails::default_instance_;
  delete SchemaDetails_reflection_;
  delete ArchSignal::default_instance_;
  delete ArchSignal_reflection_;
  delete ArchSignals::default_instance_;
  delete ArchSignals_reflection_;
  delete BusSignal::default_instance_;
  delete BusSignal_reflection_;
  delete Bus::default_instance_;
  delete Bus_reflection_;
}

void protobuf_AddDesc_serialization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023serialization.proto\022\005Proto\"\024\n\004Uuid\022\014\n\004"
    "uuid\030\001 \002(\014\"u\n\010qvariant\022\014\n\004type\030\001 \002(\005\022\023\n\010"
    "intValue\030\002 \001(\005:\0010\022\024\n\tuintValue\030\003 \001(\r:\0010\022"
    "\026\n\013doubleValue\030\004 \001(\001:\0010\022\030\n\tboolValue\030\005 \001"
    "(\010:\005false\"\027\n\007wstring\022\014\n\004text\030\001 \002(\014\"l\n\tFo"
    "ntParam\022%\n\rname_obsolete\030\001 \002(\0132\016.Proto.w"
    "string\022\014\n\004size\030\002 \002(\001\022\014\n\004bold\030\003 \002(\010\022\016\n\006it"
    "alic\030\004 \002(\010\022\014\n\004name\030\005 \001(\t\"#\n\013SchemaPoint\022"
    "\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"\235\003\n\010Envelope\022\025\n\rcl"
    "assnamehash\030\001 \002(\r\022\030\n\020compressedObject\030\002 "
    "\001(\014\022%\n\nschemaitem\030\006 \001(\0132\021.Proto.SchemaIt"
    "em\022)\n\014deviceobject\030\007 \001(\0132\023.Proto.DeviceO"
    "bject\022\035\n\006schema\030d \001(\0132\r.Proto.Schema\022\'\n\013"
    "schemalayer\030e \001(\0132\022.Proto.SchemaLayer\022%\n"
    "\nfblelement\030f \001(\0132\021.Proto.FblElement\022+\n\r"
    "configuration\030g \001(\0132\024.Proto.Configuratio"
    "n\022%\n\nconnection\030h \001(\0132\021.Proto.Connection"
    "\0221\n\020schemaDetailsSet\030i \001(\0132\027.Proto.Schem"
    "aDetailsSet\022\030\n\003bus\030\310\001 \001(\0132\n.Proto.Bus\"-\n"
    "\013EnvelopeSet\022\036\n\005items\030\001 \003(\0132\017.Proto.Enve"
    "lope\"\221\001\n\033EnvelopeSetShortDescription\022\030\n\020"
    "projectdbversion\030\001 \001(\r\022\025\n\rclassnamehash\030"
    "\002 \003(\r\022\027\n\017equipmentEditor\030\003 \001(\010\022\024\n\014preset"
    "Editor\030\004 \001(\010\022\022\n\npresetRoot\030\005 \001(\010\"\361\001\n\rCon"
    "figuration\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022\035\n"
    "\005strID\030\002 \002(\0132\016.Proto.wstring\022\037\n\007caption\030"
    "\003 \002(\0132\016.Proto.wstring\022!\n\tvariables\030\004 \002(\013"
    "2\016.Proto.wstring\022\037\n\007globals\030\005 \002(\0132\016.Prot"
    "o.wstring\022\037\n\nschemasIDs\030d \003(\0132\013.Proto.Uu"
    "id\022 \n\007schemas\030e \003(\0132\017.Proto.Envelope\">\n\024"
    "AfbElementCollection\022&\n\010elements\030\001 \003(\0132\024"
    ".Proto.AfbElementXml\"\035\n\rAfbElementXml\022\014\n"
    "\004data\030\001 \002(\014\"\233\002\n\nFblElement\022\035\n\005strID\030\002 \002("
    "\0132\016.Proto.wstring\022\037\n\007caption\030\003 \002(\0132\016.Pro"
    "to.wstring\022\016\n\006opcode\030\004 \002(\r\022\025\n\006hasRam\030\005 \001"
    "(\010:\005false\022\033\n\rrequiredStart\030\006 \001(\010:\004true\022 "
    "\n\006inputs\030\013 \003(\0132\020.Proto.AfbSignal\022!\n\007outp"
    "uts\030\014 \003(\0132\020.Proto.AfbSignal\022\037\n\006params\030\r "
    "\003(\0132\017.Proto.AfbParam\022#\n\013description\030\016 \001("
    "\0132\016.Proto.wstring\"\304\001\n\tAfbSignal\022\037\n\007capti"
    "on\030\001 \002(\0132\016.Proto.wstring\022\"\n\004type\030\002 \002(\0162\024"
    ".Proto.FblSignalType\022\027\n\014operandIndex\030\003 \001"
    "(\005:\0010\022\017\n\004size\030\004 \001(\005:\0010\022\036\n\006opName\030\005 \001(\0132\016"
    ".Proto.wstring\022(\n\ndataFormat\030\006 \001(\0162\024.Pro"
    "to.FblDataFormat\"\273\003\n\010AfbParam\022\037\n\007caption"
    "\030\001 \002(\0132\016.Proto.wstring\022\017\n\007visible\030\007 \002(\010\022"
    "\027\n\014operandIndex\030\010 \001(\005:\0010\022\017\n\004size\030\t \001(\005:\001"
    "0\022\033\n\014instantiator\030\n \001(\010:\005false\022\023\n\004user\030\013"
    " \001(\010:\005false\022%\n\rchangedScript\030\014 \001(\0132\016.Pro"
    "to.wstring\022\036\n\005value\030\r \001(\0132\017.Proto.qvaria"
    "nt\022%\n\014defaultvalue\030\016 \001(\0132\017.Proto.qvarian"
    "t\022!\n\010lowlimit\030\017 \001(\0132\017.Proto.qvariant\022\"\n\t"
    "highlimit\030\020 \001(\0132\017.Proto.qvariant\022\036\n\006opNa"
    "me\030\021 \001(\0132\016.Proto.wstring\022\"\n\004type\030\022 \001(\0162\024"
    ".Proto.FblSignalType\022(\n\ndataFormat\030\023 \001(\016"
    "2\024.Proto.FblDataFormat\"\214\003\n\006Schema\022\031\n\004uui"
    "d\030\001 \002(\0132\013.Proto.Uuid\022 \n\010schemaID\030\002 \002(\0132\016"
    ".Proto.wstring\022\037\n\007caption\030\003 \002(\0132\016.Proto."
    "wstring\022\r\n\005width\030\004 \002(\001\022\016\n\006height\030\005 \002(\001\022\037"
    "\n\004unit\030\006 \002(\0162\021.Proto.SchemaUnit\022\037\n\020exclu"
    "deFromBuild\030\007 \001(\010:\005false\022\027\n\017backgroundCo"
    "lor\030\010 \001(\r\022\014\n\004tags\030\t \001(\t\022\037\n\006layers\030d \003(\0132"
    "\017.Proto.Envelope\022)\n\004afbs\030e \002(\0132\033.Proto.A"
    "fbElementCollection\022)\n\014logic_schema\030\310\001 \001"
    "(\0132\022.Proto.LogicSchema\022%\n\nufb_schema\030\311\001 "
    "\001(\0132\020.Proto.UfbSchema\"w\n\013LogicSchema\022$\n\014"
    "equipmentids\030\001 \003(\0132\016.Proto.wstring\022\022\n\007co"
    "unter\030\002 \001(\005:\0010\022.\n\021lmDescriptionFile\030\003 \001("
    "\t:\023LogicModule0000.xml\"d\n\tUfbSchema\022\023\n\013d"
    "escription\030\001 \001(\t\022\022\n\007version\030\002 \001(\005:\0011\022.\n\021"
    "lmDescriptionFile\030\003 \001(\t:\023LogicModule0000"
    ".xml\"\224\001\n\013SchemaLayer\022\031\n\004uuid\030\001 \002(\0132\013.Pro"
    "to.Uuid\022\034\n\004name\030\002 \002(\0132\016.Proto.wstring\022\017\n"
    "\007compile\030\003 \002(\010\022\014\n\004show\030\004 \002(\010\022\r\n\005print\030\005 "
    "\002(\010\022\036\n\005items\030\017 \003(\0132\017.Proto.Envelope\"\202\r\n\n"
    "SchemaItem\022\031\n\004uuid\030\001 \002(\0132\013.Proto.Uuid\022\020\n"
    "\010isStatic\030\002 \002(\010\022\020\n\010isLocked\030\003 \002(\010\022#\n\010ite"
    "mUnit\030\004 \002(\0162\021.Proto.SchemaUnit\022\032\n\013accept"
    "Click\030\005 \001(\010:\005false\022\023\n\013clickScript\030\007 \001(\t\022"
    "\032\n\013isCommented\030\010 \001(\010:\005false\022\022\n\nobjectNam"
    "e\030\t \001(\t\022\025\n\rpreDrawScript\030\036 \001(\t\022\'\n\013PosRec"
    "tImpl\030\n \001(\0132\022.Proto.PosRectImpl\022\'\n\013PosLi"
    "neImpl\030\013 \001(\0132\022.Proto.PosLineImpl\0223\n\021PosC"
    "onnectionImpl\030\014 \001(\0132\030.Proto.PosConnectio"
    "nImpl\022\037\n\007FblItem\030j \001(\0132\016.Proto.FblItem\022\'"
    "\n\013FblItemRect\030k \001(\0132\022.Proto.FblItemRect\022"
    "\'\n\013FblItemLine\030l \001(\0132\022.Proto.FblItemLine"
    "\022#\n\004Rect\030t \001(\0132\025.Proto.SchemaItemRect\022#\n"
    "\004Line\030u \001(\0132\025.Proto.SchemaItemLine\022#\n\004Pa"
    "th\030v \001(\0132\025.Proto.SchemaItemPath\022%\n\005Image"
    "\030w \001(\0132\026.Proto.SchemaItemImage\022\'\n\006Signal"
    "\030| \001(\0132\027.Proto.SchemaItemSignal\022+\n\013Input"
    "Signal\030} \001(\0132\026.Proto.SchemaItemInput\022-\n\014"
    "OutputSignal\030~ \001(\0132\027.Proto.SchemaItemOut"
    "put\022#\n\004Link\030\177 \001(\0132\025.Proto.SchemaItemLink"
    "\022\"\n\003Afb\030\200\001 \001(\0132\024.Proto.SchemaItemAfb\022*\n\t"
    "ConstItem\030\201\001 \001(\0132\026.Proto.SchemaItemConst"
    "\0224\n\016ConnectionItem\030\202\001 \001(\0132\033.Proto.Schema"
    "ItemConnection\0226\n\017TransmitterItem\030\203\001 \001(\013"
    "2\034.Proto.SchemaItemTransmitter\0220\n\014Receiv"
    "erItem\030\204\001 \001(\0132\031.Proto.SchemaItemReceiver"
    "\022,\n\013InOutSignal\030\205\001 \001(\0132\026.Proto.SchemaIte"
    "mInOut\022\"\n\003ufb\030\206\001 \001(\0132\024.Proto.SchemaItemU"
    "fb\0220\n\nterminator\030\207\001 \001(\0132\033.Proto.SchemaIt"
    "emTerminator\022&\n\005Value\030\210\001 \001(\0132\026.Proto.Sch"
    "emaItemValue\022&\n\007BusItem\030\226\001 \001(\0132\024.Proto.S"
    "chemaItemBus\0222\n\013BusComposer\030\227\001 \001(\0132\034.Pro"
    "to.SchemaItemBusComposer\0224\n\014BusExtractor"
    "\030\230\001 \001(\0132\035.Proto.SchemaItemBusExtractor\0220"
    "\n\014LoopbackItem\030\233\001 \001(\0132\031.Proto.SchemaItem"
    "Loopback\0228\n\016loopbackSource\030\234\001 \001(\0132\037.Prot"
    "o.SchemaItemLoopbackSource\0228\n\016loopbackTa"
    "rget\030\235\001 \001(\0132\037.Proto.SchemaItemLoopbackTa"
    "rget\022*\n\007control\030\310\001 \001(\0132\030.Proto.SchemaIte"
    "mControl\0220\n\npushButton\030\322\001 \001(\0132\033.Proto.Sc"
    "hemaItemPushButton\022,\n\010lineEdit\030\323\001 \001(\0132\031."
    "Proto.SchemaItemLineEdit\"[\n\013PosRectImpl\022"
    "\021\n\tleftDocPt\030\001 \002(\001\022\020\n\010topDocPt\030\002 \002(\001\022\022\n\n"
    "widthDocPt\030\003 \002(\001\022\023\n\013heightDocPt\030\004 \002(\001\"]\n"
    "\013PosLineImpl\022\023\n\013startXDocPt\030\001 \002(\001\022\023\n\013sta"
    "rtYDocPt\030\002 \002(\001\022\021\n\tendXDocPt\030\003 \002(\001\022\021\n\tend"
    "YDocPt\030\004 \002(\001\"7\n\021PosConnectionImpl\022\"\n\006poi"
    "nts\030\001 \003(\0132\022.Proto.SchemaPoint\"\353\001\n\016Schema"
    "ItemRect\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineColor\030\002 "
    "\002(\r\022\021\n\tfillColor\030\003 \002(\r\022\034\n\004text\030\004 \002(\0132\016.P"
    "roto.wstring\022\021\n\ttextColor\030\005 \002(\r\022\036\n\004font\030"
    "\006 \002(\0132\020.Proto.FontParam\022\014\n\004fill\030\007 \002(\010\022\026\n"
    "\010drawrect\030\010 \001(\010:\004true\022\024\n\thorzAlign\030\t \001(\005"
    ":\0014\022\026\n\tvertAlign\030\n \001(\005:\003128\"3\n\016SchemaIte"
    "mLine\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r"
    "\"3\n\016SchemaItemPath\022\016\n\006weight\030\001 \002(\001\022\021\n\tli"
    "neColor\030\002 \002(\r\"T\n\017SchemaItemImage\022\035\n\017keep"
    "AspectRatio\030\002 \001(\010:\004true\022\021\n\timageData\030\010 \001"
    "(\014\022\017\n\007svgData\030\t \001(\t\"\353\001\n\022FblConnectionPoi"
    "nt\022!\n\005point\030\001 \001(\0132\022.Proto.SchemaPoint\022/\n"
    "\ndirrection\030\002 \001(\0162\033.Proto.ConnectionDirr"
    "ection\022\031\n\004uuid\030\003 \001(\0132\013.Proto.Uuid\022\030\n\014ope"
    "randIndex\030\004 \001(\005:\002-1\022\021\n\007caption\030\005 \001(\t:\000\022\""
    "\n\rassociatedIos\030\006 \003(\0132\013.Proto.Uuid\022\025\n\nsi"
    "gnalType\030\007 \001(\005:\0010\"4\n\007FblItem\022)\n\006points\030\001"
    " \003(\0132\031.Proto.FblConnectionPoint\"\304\001\n\013FblI"
    "temRect\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002"
    "(\r\022\021\n\tfillColor\030\003 \002(\r\022\021\n\ttextColor\030\004 \002(\r"
    "\022\036\n\004font\030\005 \002(\0132\020.Proto.FontParam\022\r\n\005labe"
    "l\030\006 \001(\t\022\020\n\010userText\030\007 \001(\t\022\026\n\013userTextPos"
    "\030\010 \001(\005:\0011\022\023\n\010labelPos\030\t \001(\005:\0012\"0\n\013FblIte"
    "mLine\022\016\n\006weight\030\001 \002(\001\022\021\n\tlineColor\030\002 \002(\r"
    "\"R\n\026SchemaItemSignalColumn\022\021\n\005width\030\001 \001("
    "\001:\00220\022\017\n\004data\030\002 \001(\005:\0010\022\024\n\thorzAlign\030\003 \001("
    "\005:\0011\"\262\001\n\020SchemaItemSignal\022$\n\014appSignalID"
    "s\030\001 \003(\0132\016.Proto.wstring\022\024\n\tprecision\030\002 \001"
    "(\005:\0012\022\031\n\014analogFormat\030\003 \001(\005:\003102\022.\n\007colu"
    "mns\030\004 \003(\0132\035.Proto.SchemaItemSignalColumn"
    "\022\027\n\tmultiLine\030\005 \001(\010:\004true\"\021\n\017SchemaItemI"
    "nput\"\022\n\020SchemaItemOutput\"\021\n\017SchemaItemIn"
    "Out\"\020\n\016SchemaItemLink\"\341\001\n\rSchemaItemAfb\022"
    "\037\n\006params\030\002 \003(\0132\017.Proto.AfbParam\022 \n\010afbS"
    "trid\030\003 \001(\0132\016.Proto.wstring\022\024\n\tprecision\030"
    "\004 \001(\005:\0012\0223\n\025deprecated_afbelement\030\005 \001(\0132"
    "\024.Proto.AfbElementXml\022\030\n\020deprecated_labe"
    "l\030\006 \001(\t\022(\n\nafbelement\030\007 \001(\0132\024.Proto.AfbE"
    "lementXml\"\254\001\n\017SchemaItemConst\022\017\n\004type\030\001 "
    "\001(\005:\0010\022\023\n\010intValue\030\002 \001(\005:\0010\022\025\n\nfloatValu"
    "e\030\003 \001(\001:\0010\022\030\n\rdiscreteValue\030\007 \001(\005:\0010\022\024\n\t"
    "precision\030\004 \001(\005:\0012\022\024\n\thorzAlign\030\005 \001(\005:\0014"
    "\022\026\n\tvertAlign\030\006 \001(\005:\003128\",\n\024SchemaItemCo"
    "nnection\022\024\n\014connectionid\030\001 \001(\t\",\n\025Schema"
    "ItemTransmitter\022\023\n\010pinCount\030\001 \001(\005:\0011\"\213\001\n"
    "\022SchemaItemReceiver\022\032\n\014showValidity\030\001 \001("
    "\010:\004true\022\023\n\013appSignalId\030\002 \001(\t\022\023\n\010dataType"
    "\030\003 \001(\005:\0010\022\024\n\tprecision\030\004 \001(\005:\0012\022\031\n\014analo"
    "gFormat\030\005 \001(\005:\003102\"P\n\rSchemaItemUfb\022\023\n\013u"
    "fbSchemaId\030\001 \001(\t\022\022\n\nufbCaption\030\002 \001(\t\022\026\n\n"
    "ufbVersion\030\003 \001(\005:\002-1\"\026\n\024SchemaItemTermin"
    "ator\"\260\002\n\017SchemaItemValue\022\021\n\tsignalIds\030\001 "
    "\001(\t\022\027\n\014signalSource\030\002 \001(\005:\0010\022\022\n\nlineWeig"
    "ht\030\004 \001(\001\022\021\n\tlineColor\030\005 \001(\r\022\021\n\tfillColor"
    "\030\006 \001(\r\022\021\n\ttextColor\030\007 \001(\r\022\014\n\004text\030\010 \001(\t\022"
    "\036\n\004font\030\t \001(\0132\020.Proto.FontParam\022\026\n\010drawR"
    "ect\030\n \001(\010:\004true\022\024\n\thorzAlign\030\013 \001(\005:\0014\022\026\n"
    "\tvertAlign\030\014 \001(\005:\003128\022\025\n\tprecision\030\r \001(\005"
    ":\002-1\022\031\n\014analogFormat\030\016 \001(\005:\003102\"P\n\rSchem"
    "aItemBus\022\021\n\tbusTypeId\030\002 \001(\t\022\023\n\013busTypeHa"
    "sh\030\003 \001(\006\022\027\n\003bus\030\005 \001(\0132\n.Proto.Bus\"\027\n\025Sch"
    "emaItemBusComposer\"=\n\026SchemaItemBusExtra"
    "ctor\022#\n\nproperties\030\002 \003(\0132\017.Proto.Propert"
    "y\"(\n\022SchemaItemLoopback\022\022\n\nloopbackId\030\002 "
    "\001(\t\"\032\n\030SchemaItemLoopbackSource\"\032\n\030Schem"
    "aItemLoopbackTarget\"8\n\021SchemaItemControl"
    "\022\022\n\nstyleSheet\030\001 \001(\t\022\017\n\007toolTip\030\002 \001(\t\"\220\002"
    "\n\024SchemaItemPushButton\022\014\n\004text\030\001 \001(\t\022\021\n\t"
    "checkable\030\002 \001(\010\022\026\n\016checkedDefault\030\003 \001(\010\022"
    "\022\n\nautoRepeat\030\004 \001(\010\022\027\n\017autoRepeatDelay\030\005"
    " \001(\005\022\032\n\022autoRepeatInterval\030\006 \001(\005\022\031\n\021scri"
    "ptAfterCreate\030\025 \001(\t\022\025\n\rscriptClicked\030\026 \001"
    "(\t\022\025\n\rscriptPressed\030\027 \001(\t\022\026\n\016scriptRelea"
    "sed\030\030 \001(\t\022\025\n\rscriptToggled\030\031 \001(\t\"\370\001\n\022Sch"
    "emaItemLineEdit\022\014\n\004text\030\001 \001(\t\022\021\n\thorzAli"
    "gn\030\002 \001(\005\022\021\n\tvertAlign\030\003 \001(\005\022\021\n\tmaxLength"
    "\030\004 \001(\005\022\027\n\017placeholderText\030\005 \001(\t\022\020\n\010readO"
    "nly\030\006 \001(\010\022\031\n\021scriptAfterCreate\030\025 \001(\t\022\035\n\025"
    "scriptEditingFinished\030\026 \001(\t\022\033\n\023scriptRet"
    "urnPressed\030\027 \001(\t\022\031\n\021scriptTextChanged\030\030 "
    "\001(\t\"\201\006\n\014DeviceObject\022\031\n\004uuid\030\001 \002(\0132\013.Pro"
    "to.Uuid\022#\n\013equipmentId\030\002 \002(\0132\016.Proto.wst"
    "ring\022\037\n\007caption\030\003 \002(\0132\016.Proto.wstring\022(\n"
    "\020childRestriction\030\004 \001(\0132\016.Proto.wstring\022"
    "\020\n\005place\030\005 \001(\005:\0010\022\"\n\032specific_properties"
    "_struct\030\006 \001(\t\022#\n\nproperties\030\007 \003(\0132\017.Prot"
    "o.Property\022\025\n\006preset\030  \001(\010:\005false\022\031\n\npre"
    "setRoot\030! \001(\010:\005false\022\"\n\npresetName\030\" \001(\013"
    "2\016.Proto.wstring\022%\n\020presetObjectUuid\030# \001"
    "(\0132\013.Proto.Uuid\022\031\n\016childCountHint\030$ \001(\005:"
    "\0010\022\037\n\004Root\030d \001(\0132\021.Proto.DeviceRoot\022#\n\006S"
    "ystem\030e \001(\0132\023.Proto.DeviceSystem\022\037\n\004Rack"
    "\030f \001(\0132\021.Proto.DeviceRack\022%\n\007Chassis\030g \001"
    "(\0132\024.Proto.DeviceChassis\022#\n\006Module\030h \001(\013"
    "2\023.Proto.DeviceModule\022+\n\nController\030i \001("
    "\0132\027.Proto.DeviceController\022#\n\006Signal\030j \001"
    "(\0132\023.Proto.DeviceSignal\022\'\n\013Workstation\030k"
    " \001(\0132\022.Proto.Workstation\022!\n\010Software\030l \001"
    "(\0132\017.Proto.Software\022\"\n\010children\030\310\001 \003(\0132\017"
    ".Proto.Envelope\"\014\n\nDeviceRoot\"\016\n\014DeviceS"
    "ystem\"\014\n\nDeviceRack\" \n\rDeviceChassis\022\017\n\004"
    "type\030\001 \001(\005:\0010\"\223\001\n\014DeviceModule\022\027\n\014typeOb"
    "solete\030\001 \001(\005:\0010\022\033\n\023configurationScript\030\002"
    " \001(\t\022\022\n\nmoduleType\030\003 \001(\005\022\032\n\022rawDataDescr"
    "iption\030\004 \001(\t\022\035\n\022customModuleFamily\030\005 \001(\005"
    ":\0010\"\022\n\020DeviceController\"\245\003\n\014DeviceSignal"
    "\022\027\n\014obsoletetype\030\001 \001(\005:\0010\022\024\n\tbyteOrder\030\002"
    " \001(\005:\0010\022\021\n\006format\030\003 \001(\005:\0010\022\017\n\004size\030\004 \001(\005"
    ":\0010\022\026\n\013valueOffset\030\007 \001(\005:\0010\022\023\n\010valueBit\030"
    "\010 \001(\005:\0010\022\017\n\004type\030\t \001(\005:\0010\022\023\n\010function\030\n "
    "\001(\005:\0010\022\025\n\nmemoryArea\030\013 \001(\005:\0010\022\032\n\017appSign"
    "alLowAdc\030\014 \001(\005:\0010\022\037\n\020appSignalHighAdc\030\r "
    "\001(\005:\00565535\022\037\n\024appSignalLowEngUnits\030\016 \001(\001"
    ":\0010\022\"\n\025appSignalHighEngUnits\030\017 \001(\001:\003100\022"
    "\036\n\023appSignalDataFormat\030\020 \001(\005:\0012\022\030\n\020valid"
    "itySignalId\030\024 \001(\t\022\034\n\024signalSpecPropsStru"
    "c\030( \001(\t\"\036\n\013Workstation\022\017\n\004type\030\001 \001(\005:\0010\""
    "\033\n\010Software\022\017\n\004type\030\001 \001(\005:\0010\"r\n\023ModuleCo"
    "nfiguration\022\032\n\022struct_description\030\001 \001(\t\022"
    "/\n\006values\030\002 \003(\0132\037.Proto.ModuleConfigurat"
    "ionValue\022\016\n\004name\030\003 \001(\t:\000\"7\n\030ModuleConfig"
    "urationValue\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002("
    "\t\"\'\n\010Property\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002"
    "(\t\"\314\001\n\023SignalSpecPropValue\022\014\n\004name\030\001 \002(\t"
    "\022\017\n\004type\030\002 \002(\005:\0010\022\025\n\006isEnum\030\003 \002(\010:\005false"
    "\022\020\n\010int32Val\030\n \001(\005\022\021\n\tuint32Val\030\013 \001(\r\022\020\n"
    "\010int64Val\030\014 \001(\003\022\021\n\tuint64Val\030\r \001(\004\022\021\n\tdo"
    "ubleVal\030\016 \001(\001\022\017\n\007boolVal\030\017 \001(\010\022\021\n\tstring"
    "Val\030\020 \001(\t\"A\n\024SignalSpecPropValues\022)\n\005val"
    "ue\030\001 \003(\0132\032.Proto.SignalSpecPropValue\"0\n\t"
    "Address16\022\022\n\006offset\030\001 \002(\005:\002-1\022\017\n\003bit\030\002 \002"
    "(\005:\002-1\"&\n\004Unit\022\r\n\002id\030\001 \002(\005:\0010\022\017\n\007caption"
    "\030\002 \002(\t\"$\n\007UnitSet\022\031\n\004unit\030\001 \003(\0132\013.Proto."
    "Unit\"H\n\013TuningValue\022\014\n\004type\030\001 \001(\005\022\023\n\010int"
    "Value\030\002 \001(\003:\0010\022\026\n\013doubleValue\030\003 \001(\001:\0010\"\206"
    "\002\n\020AppSignalDbField\022\016\n\002ID\030\001 \001(\005:\002-1\022\031\n\rs"
    "ignalGroupID\030\002 \001(\005:\002-1\022\034\n\020signalInstance"
    "ID\030\003 \001(\005:\002-1\022\027\n\013changesetID\030\004 \001(\005:\002-1\022\031\n"
    "\ncheckedOut\030\005 \001(\010:\005false\022\022\n\006userID\030\006 \001(\005"
    ":\002-1\022\022\n\007created\030\007 \001(\003:\0010\022\026\n\007deleted\030\010 \001("
    "\010:\005false\022\032\n\017instanceCreated\030\t \001(\003:\0010\022\031\n\016"
    "instanceAction\030\n \001(\005:\0010\"\331\002\n\030AppSignalCal"
    "culatedParam\022\017\n\004hash\030\001 \001(\004:\0010\022#\n\tioBufAd"
    "dr\030\002 \001(\0132\020.Proto.Address16\022$\n\ntuningAddr"
    "\030\003 \001(\0132\020.Proto.Address16\022!\n\007ualAddr\030\004 \001("
    "\0132\020.Proto.Address16\022$\n\nregBufAddr\030\005 \001(\0132"
    "\020.Proto.Address16\022&\n\014regValueAddr\030\006 \001(\0132"
    "\020.Proto.Address16\022)\n\017regValidityAddr\030\007 \001"
    "(\0132\020.Proto.Address16\022\026\n\013lmRamAccess\030\010 \001("
    "\005:\0010\022\026\n\007isConst\030\t \001(\010:\005false\022\025\n\nconstVal"
    "ue\030\n \001(\001:\0010\"\232\006\n\tAppSignal\022\023\n\013appSignalID"
    "\030\001 \001(\t\022\031\n\021customAppSignalID\030\002 \001(\t\022\017\n\007cap"
    "tion\030\003 \001(\t\022\023\n\013equipmentID\030\004 \001(\t\022\025\n\rlmEqu"
    "ipmentID\030\005 \001(\t\022\021\n\tbusTypeID\030\006 \001(\t\022\022\n\007cha"
    "nnel\030\007 \001(\005:\0010\022\037\n\020excludeFromBuild\030\010 \001(\010:"
    "\005false\022\025\n\nsignalType\030\020 \001(\005:\0011\022\024\n\tinOutTy"
    "pe\030\021 \001(\005:\0012\022\023\n\010dataSize\030\025 \001(\005:\0010\022\024\n\tbyte"
    "Order\030\026 \001(\005:\0011\022\035\n\022analogSignalFormat\030\032 \001"
    "(\005:\0011\022\014\n\004unit\030\033 \001(\t\022\033\n\014enableTuning\030G \001("
    "\010:\005false\022.\n\022tuningDefaultValue\030H \001(\0132\022.P"
    "roto.TuningValue\022*\n\016tuningLowBound\030I \001(\013"
    "2\022.Proto.TuningValue\022+\n\017tuningHighBound\030"
    "J \001(\0132\022.Proto.TuningValue\022\026\n\007acquire\030Q \001"
    "(\010:\005false\022\026\n\007archive\030R \001(\010:\005false\022\030\n\rdec"
    "imalPlaces\030S \001(\005:\0012\022\031\n\016coarseAperture\030T "
    "\001(\001:\0011\022\031\n\014fineAperture\030U \001(\001:\0030.5\022\037\n\020ada"
    "ptiveAperture\030V \001(\010:\005false\022\026\n\016specPropSt"
    "ruct\030Z \001(\t\022\026\n\016specPropValues\030[ \001(\014\022(\n\007db"
    "Field\030x \001(\0132\027.Proto.AppSignalDbField\0222\n\t"
    "calcParam\030y \001(\0132\037.Proto.AppSignalCalcula"
    "tedParam\"3\n\014AppSignalSet\022#\n\tappSignal\030\001 "
    "\003(\0132\020.Proto.AppSignal\"\213\004\n\022ProtoAppSignal"
    "Data\022\021\n\tbusTypeID\030\001 \001(\t\022\017\n\007caption\030\002 \001(\t"
    "\022\022\n\007channel\030\003 \001(\005:\0010\022\024\n\010dataSize\030\004 \001(\005:\002"
    "32\022\024\n\tbyteOrder\030\005 \001(\005:\0011\022\035\n\022analogSignal"
    "Format\030\006 \001(\005:\0012\022\014\n\004unit\030\007 \001(\t\022\033\n\014enableT"
    "uning\030\010 \001(\010:\005false\022.\n\022tuningDefaultValue"
    "\030\t \001(\0132\022.Proto.TuningValue\022*\n\016tuningLowB"
    "ound\030\n \001(\0132\022.Proto.TuningValue\022+\n\017tuning"
    "HighBound\030\013 \001(\0132\022.Proto.TuningValue\022\025\n\007a"
    "cquire\030\014 \001(\010:\004true\022\025\n\007archive\030\r \001(\010:\004tru"
    "e\022\030\n\rdecimalPlaces\030\016 \001(\005:\0012\022\031\n\016coarseApe"
    "rture\030\017 \001(\001:\0011\022\031\n\014fineAperture\030\020 \001(\001:\0030."
    "5\022\037\n\020adaptiveAperture\030\021 \001(\010:\005false\022\037\n\020ex"
    "cludefromBuild\030\022 \001(\010:\005false\"\264\001\n\016AppSigna"
    "lState\022\017\n\004hash\030\001 \001(\004:\0010\022\020\n\005value\030\002 \001(\001:\001"
    "0\022\020\n\005flags\030\003 \001(\r:\0010\022\025\n\nsystemTime\030\004 \001(\020:"
    "\0010\022\024\n\tlocalTime\030\005 \001(\020:\0010\022\024\n\tplantTime\030\006 "
    "\001(\020:\0010\022\025\n\tarchiveId\030\007 \001(\020:\002-1\022\023\n\010packetN"
    "o\030\010 \001(\r:\0010\"\224\006\n\nConnection\022\026\n\014ConnectionI"
    "D\030\002 \001(\t:\000\022\032\n\020Port1EquipmentID\030\003 \001(\t:\000\022\032\n"
    "\020Port2EquipmentID\030\004 \001(\t:\000\022!\n\027Port1RawDat"
    "aDescription\030\005 \001(\t:\000\022!\n\027Port2RawDataDesc"
    "ription\030\006 \001(\t:\000\022\035\n\016ManualSettings\030\013 \001(\010:"
    "\005false\022\034\n\rDisableDataID\030\014 \001(\010:\005false\022\036\n\017"
    "GenerateVHDFile\030\r \001(\010:\005false\022\036\n\023Port1TxS"
    "tartAddress\030\016 \001(\005:\0010\022!\n\024Port1TxWordsQuan"
    "tity\030\017 \001(\005:\003479\022!\n\024Port1RxWordsQuantity\030"
    "\020 \001(\005:\003479\022\036\n\023Port2TxStartAddress\030\021 \001(\005:"
    "\0010\022!\n\024Port2TxWordsQuantity\030\022 \001(\005:\003479\022!\n"
    "\024Port2RxWordsQuantity\030\023 \001(\005:\003479\022\031\n\004uuid"
    "\030\024 \001(\0132\013.Proto.Uuid\022 \n\021Port1EnableSerial"
    "\030\025 \001(\010:\005false\022\032\n\017Port1SerialMode\030\026 \001(\005:\001"
    "0\022 \n\021Port1EnableDuplex\030\027 \001(\010:\005false\022 \n\021P"
    "ort2EnableSerial\030\030 \001(\010:\005false\022\032\n\017Port2Se"
    "rialMode\030\031 \001(\005:\0010\022 \n\021Port2EnableDuplex\030\032"
    " \001(\010:\005false\022\017\n\004Type\030\033 \001(\005:\0010\022\027\n\014Obsolete"
    "Mode\030\010 \001(\005:\0010\022\035\n\022ObsoleteSerialMode\030\007 \001("
    "\005:\0010\022#\n\024ObsoleteEnableDuplex\030\n \001(\010:\005fals"
    "e\"@\n\020SchemaDetailsSet\022,\n\016schemasDetails\030"
    "\002 \003(\0132\024.Proto.SchemaDetails\"\360\001\n\rSchemaDe"
    "tails\022\017\n\007version\030\002 \001(\005\022\020\n\010schemaId\030\004 \001(\t"
    "\022\017\n\007caption\030\005 \001(\t\022\031\n\021excludedfromBuild\030\006"
    " \001(\010\022\023\n\013equipmentId\030\007 \001(\t\022\031\n\021lmDescripti"
    "onFile\030\010 \001(\t\022\021\n\tsignalIds\030\024 \003(\t\022\016\n\006label"
    "s\030\025 \003(\t\022\023\n\013connections\030\026 \003(\t\022\032\n\005guids\030\027 "
    "\003(\0132\013.Proto.Uuid\022\014\n\004tags\030\030 \003(\t\"A\n\nArchSi"
    "gnal\022\014\n\004hash\030\001 \002(\004\022\020\n\010isAnalog\030\002 \002(\010\022\023\n\013"
    "appSignalID\030\003 \002(\t\"5\n\013ArchSignals\022&\n\013arch"
    "Signals\030\001 \003(\0132\021.Proto.ArchSignal\"\326\003\n\tBus"
    "Signal\022\020\n\010signalId\030\001 \001(\t\022\017\n\007caption\030\002 \001("
    "\t\022\014\n\004type\030\003 \001(\005\022\r\n\005units\030\004 \001(\t\022\024\n\014analog"
    "Format\030\n \001(\005\022\024\n\tprecision\030\013 \001(\005:\0012\022\031\n\016co"
    "arseAperture\030\014 \001(\001:\0011\022\031\n\014fineAperture\030\r "
    "\001(\001:\0030.5\022\037\n\020adaptiveAperture\030\016 \001(\010:\005fals"
    "e\022\021\n\tbusTypeId\030\017 \001(\t\022\023\n\013inbusOffset\030  \001("
    "\005\022\032\n\022inbusDiscreteBitNo\030( \001(\005\022\027\n\017inbusAn"
    "alogSize\0302 \001(\005\022\031\n\021inbusAnalogFormat\0303 \001("
    "\005\022\034\n\024inbusAnalogByteOrder\0304 \001(\005\022\031\n\021busAn"
    "alogLowLimit\0305 \001(\001\022\032\n\022busAnalogHighLimit"
    "\0306 \001(\001\022\033\n\023inbusAnalogLowLimit\0307 \001(\001\022\034\n\024i"
    "nbusAnalogHighLimit\0308 \001(\001\"\226\001\n\003Bus\022\031\n\004uui"
    "d\030\001 \001(\0132\013.Proto.Uuid\022\021\n\tbusTypeId\030\002 \001(\t\022"
    "$\n\nbusSignals\030\003 \003(\0132\020.Proto.BusSignal\022!\n"
    "\023autoSignalPlacement\030\n \001(\010:\004true\022\030\n\rmanu"
    "alBusSize\030\013 \001(\005:\0010*3\n\nSchemaUnit\022\013\n\007Disp"
    "lay\020\000\022\016\n\nMillimeter\020\001\022\010\n\004Inch\020\002*-\n\024Conne"
    "ctionDirrection\022\t\n\005Input\020\000\022\n\n\006Output\020\001*)"
    "\n\rFblSignalType\022\n\n\006Analog\020\000\022\014\n\010Discrete\020"
    "\001*:\n\rFblDataFormat\022\017\n\013UnsignedInt\020\000\022\r\n\tS"
    "ignedInt\020\001\022\t\n\005Float\020\002", 14541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialization.proto", &protobuf_RegisterTypes);
  Uuid::default_instance_ = new Uuid();
  qvariant::default_instance_ = new qvariant();
  wstring::default_instance_ = new wstring();
  FontParam::default_instance_ = new FontParam();
  SchemaPoint::default_instance_ = new SchemaPoint();
  Envelope::default_instance_ = new Envelope();
  EnvelopeSet::default_instance_ = new EnvelopeSet();
  EnvelopeSetShortDescription::default_instance_ = new EnvelopeSetShortDescription();
  Configuration::default_instance_ = new Configuration();
  AfbElementCollection::default_instance_ = new AfbElementCollection();
  AfbElementXml::default_instance_ = new AfbElementXml();
  FblElement::default_instance_ = new FblElement();
  AfbSignal::default_instance_ = new AfbSignal();
  AfbParam::default_instance_ = new AfbParam();
  Schema::default_instance_ = new Schema();
  LogicSchema::_default_lmdescriptionfile_ =
      new ::std::string("LogicModule0000.xml", 19);
  LogicSchema::default_instance_ = new LogicSchema();
  UfbSchema::_default_lmdescriptionfile_ =
      new ::std::string("LogicModule0000.xml", 19);
  UfbSchema::default_instance_ = new UfbSchema();
  SchemaLayer::default_instance_ = new SchemaLayer();
  SchemaItem::default_instance_ = new SchemaItem();
  PosRectImpl::default_instance_ = new PosRectImpl();
  PosLineImpl::default_instance_ = new PosLineImpl();
  PosConnectionImpl::default_instance_ = new PosConnectionImpl();
  SchemaItemRect::default_instance_ = new SchemaItemRect();
  SchemaItemLine::default_instance_ = new SchemaItemLine();
  SchemaItemPath::default_instance_ = new SchemaItemPath();
  SchemaItemImage::default_instance_ = new SchemaItemImage();
  FblConnectionPoint::default_instance_ = new FblConnectionPoint();
  FblItem::default_instance_ = new FblItem();
  FblItemRect::default_instance_ = new FblItemRect();
  FblItemLine::default_instance_ = new FblItemLine();
  SchemaItemSignalColumn::default_instance_ = new SchemaItemSignalColumn();
  SchemaItemSignal::default_instance_ = new SchemaItemSignal();
  SchemaItemInput::default_instance_ = new SchemaItemInput();
  SchemaItemOutput::default_instance_ = new SchemaItemOutput();
  SchemaItemInOut::default_instance_ = new SchemaItemInOut();
  SchemaItemLink::default_instance_ = new SchemaItemLink();
  SchemaItemAfb::default_instance_ = new SchemaItemAfb();
  SchemaItemConst::default_instance_ = new SchemaItemConst();
  SchemaItemConnection::default_instance_ = new SchemaItemConnection();
  SchemaItemTransmitter::default_instance_ = new SchemaItemTransmitter();
  SchemaItemReceiver::default_instance_ = new SchemaItemReceiver();
  SchemaItemUfb::default_instance_ = new SchemaItemUfb();
  SchemaItemTerminator::default_instance_ = new SchemaItemTerminator();
  SchemaItemValue::default_instance_ = new SchemaItemValue();
  SchemaItemBus::default_instance_ = new SchemaItemBus();
  SchemaItemBusComposer::default_instance_ = new SchemaItemBusComposer();
  SchemaItemBusExtractor::default_instance_ = new SchemaItemBusExtractor();
  SchemaItemLoopback::default_instance_ = new SchemaItemLoopback();
  SchemaItemLoopbackSource::default_instance_ = new SchemaItemLoopbackSource();
  SchemaItemLoopbackTarget::default_instance_ = new SchemaItemLoopbackTarget();
  SchemaItemControl::default_instance_ = new SchemaItemControl();
  SchemaItemPushButton::default_instance_ = new SchemaItemPushButton();
  SchemaItemLineEdit::default_instance_ = new SchemaItemLineEdit();
  DeviceObject::default_instance_ = new DeviceObject();
  DeviceRoot::default_instance_ = new DeviceRoot();
  DeviceSystem::default_instance_ = new DeviceSystem();
  DeviceRack::default_instance_ = new DeviceRack();
  DeviceChassis::default_instance_ = new DeviceChassis();
  DeviceModule::default_instance_ = new DeviceModule();
  DeviceController::default_instance_ = new DeviceController();
  DeviceSignal::default_instance_ = new DeviceSignal();
  Workstation::default_instance_ = new Workstation();
  Software::default_instance_ = new Software();
  ModuleConfiguration::default_instance_ = new ModuleConfiguration();
  ModuleConfigurationValue::default_instance_ = new ModuleConfigurationValue();
  Property::default_instance_ = new Property();
  SignalSpecPropValue::default_instance_ = new SignalSpecPropValue();
  SignalSpecPropValues::default_instance_ = new SignalSpecPropValues();
  Address16::default_instance_ = new Address16();
  Unit::default_instance_ = new Unit();
  UnitSet::default_instance_ = new UnitSet();
  TuningValue::default_instance_ = new TuningValue();
  AppSignalDbField::default_instance_ = new AppSignalDbField();
  AppSignalCalculatedParam::default_instance_ = new AppSignalCalculatedParam();
  AppSignal::default_instance_ = new AppSignal();
  AppSignalSet::default_instance_ = new AppSignalSet();
  ProtoAppSignalData::default_instance_ = new ProtoAppSignalData();
  AppSignalState::default_instance_ = new AppSignalState();
  Connection::default_instance_ = new Connection();
  SchemaDetailsSet::default_instance_ = new SchemaDetailsSet();
  SchemaDetails::default_instance_ = new SchemaDetails();
  ArchSignal::default_instance_ = new ArchSignal();
  ArchSignals::default_instance_ = new ArchSignals();
  BusSignal::default_instance_ = new BusSignal();
  Bus::default_instance_ = new Bus();
  Uuid::default_instance_->InitAsDefaultInstance();
  qvariant::default_instance_->InitAsDefaultInstance();
  wstring::default_instance_->InitAsDefaultInstance();
  FontParam::default_instance_->InitAsDefaultInstance();
  SchemaPoint::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  EnvelopeSet::default_instance_->InitAsDefaultInstance();
  EnvelopeSetShortDescription::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  AfbElementCollection::default_instance_->InitAsDefaultInstance();
  AfbElementXml::default_instance_->InitAsDefaultInstance();
  FblElement::default_instance_->InitAsDefaultInstance();
  AfbSignal::default_instance_->InitAsDefaultInstance();
  AfbParam::default_instance_->InitAsDefaultInstance();
  Schema::default_instance_->InitAsDefaultInstance();
  LogicSchema::default_instance_->InitAsDefaultInstance();
  UfbSchema::default_instance_->InitAsDefaultInstance();
  SchemaLayer::default_instance_->InitAsDefaultInstance();
  SchemaItem::default_instance_->InitAsDefaultInstance();
  PosRectImpl::default_instance_->InitAsDefaultInstance();
  PosLineImpl::default_instance_->InitAsDefaultInstance();
  PosConnectionImpl::default_instance_->InitAsDefaultInstance();
  SchemaItemRect::default_instance_->InitAsDefaultInstance();
  SchemaItemLine::default_instance_->InitAsDefaultInstance();
  SchemaItemPath::default_instance_->InitAsDefaultInstance();
  SchemaItemImage::default_instance_->InitAsDefaultInstance();
  FblConnectionPoint::default_instance_->InitAsDefaultInstance();
  FblItem::default_instance_->InitAsDefaultInstance();
  FblItemRect::default_instance_->InitAsDefaultInstance();
  FblItemLine::default_instance_->InitAsDefaultInstance();
  SchemaItemSignalColumn::default_instance_->InitAsDefaultInstance();
  SchemaItemSignal::default_instance_->InitAsDefaultInstance();
  SchemaItemInput::default_instance_->InitAsDefaultInstance();
  SchemaItemOutput::default_instance_->InitAsDefaultInstance();
  SchemaItemInOut::default_instance_->InitAsDefaultInstance();
  SchemaItemLink::default_instance_->InitAsDefaultInstance();
  SchemaItemAfb::default_instance_->InitAsDefaultInstance();
  SchemaItemConst::default_instance_->InitAsDefaultInstance();
  SchemaItemConnection::default_instance_->InitAsDefaultInstance();
  SchemaItemTransmitter::default_instance_->InitAsDefaultInstance();
  SchemaItemReceiver::default_instance_->InitAsDefaultInstance();
  SchemaItemUfb::default_instance_->InitAsDefaultInstance();
  SchemaItemTerminator::default_instance_->InitAsDefaultInstance();
  SchemaItemValue::default_instance_->InitAsDefaultInstance();
  SchemaItemBus::default_instance_->InitAsDefaultInstance();
  SchemaItemBusComposer::default_instance_->InitAsDefaultInstance();
  SchemaItemBusExtractor::default_instance_->InitAsDefaultInstance();
  SchemaItemLoopback::default_instance_->InitAsDefaultInstance();
  SchemaItemLoopbackSource::default_instance_->InitAsDefaultInstance();
  SchemaItemLoopbackTarget::default_instance_->InitAsDefaultInstance();
  SchemaItemControl::default_instance_->InitAsDefaultInstance();
  SchemaItemPushButton::default_instance_->InitAsDefaultInstance();
  SchemaItemLineEdit::default_instance_->InitAsDefaultInstance();
  DeviceObject::default_instance_->InitAsDefaultInstance();
  DeviceRoot::default_instance_->InitAsDefaultInstance();
  DeviceSystem::default_instance_->InitAsDefaultInstance();
  DeviceRack::default_instance_->InitAsDefaultInstance();
  DeviceChassis::default_instance_->InitAsDefaultInstance();
  DeviceModule::default_instance_->InitAsDefaultInstance();
  DeviceController::default_instance_->InitAsDefaultInstance();
  DeviceSignal::default_instance_->InitAsDefaultInstance();
  Workstation::default_instance_->InitAsDefaultInstance();
  Software::default_instance_->InitAsDefaultInstance();
  ModuleConfiguration::default_instance_->InitAsDefaultInstance();
  ModuleConfigurationValue::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  SignalSpecPropValue::default_instance_->InitAsDefaultInstance();
  SignalSpecPropValues::default_instance_->InitAsDefaultInstance();
  Address16::default_instance_->InitAsDefaultInstance();
  Unit::default_instance_->InitAsDefaultInstance();
  UnitSet::default_instance_->InitAsDefaultInstance();
  TuningValue::default_instance_->InitAsDefaultInstance();
  AppSignalDbField::default_instance_->InitAsDefaultInstance();
  AppSignalCalculatedParam::default_instance_->InitAsDefaultInstance();
  AppSignal::default_instance_->InitAsDefaultInstance();
  AppSignalSet::default_instance_->InitAsDefaultInstance();
  ProtoAppSignalData::default_instance_->InitAsDefaultInstance();
  AppSignalState::default_instance_->InitAsDefaultInstance();
  Connection::default_instance_->InitAsDefaultInstance();
  SchemaDetailsSet::default_instance_->InitAsDefaultInstance();
  SchemaDetails::default_instance_->InitAsDefaultInstance();
  ArchSignal::default_instance_->InitAsDefaultInstance();
  ArchSignals::default_instance_->InitAsDefaultInstance();
  BusSignal::default_instance_->InitAsDefaultInstance();
  Bus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialization_2eproto {
  StaticDescriptorInitializer_serialization_2eproto() {
    protobuf_AddDesc_serialization_2eproto();
  }
} static_descriptor_initializer_serialization_2eproto_;
const ::google::protobuf::EnumDescriptor* SchemaUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaUnit_descriptor_;
}
bool SchemaUnit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionDirrection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionDirrection_descriptor_;
}
bool ConnectionDirrection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FblSignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblSignalType_descriptor_;
}
bool FblSignalType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FblDataFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblDataFormat_descriptor_;
}
bool FblDataFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Uuid::kUuidFieldNumber;
#endif  // !_MSC_VER

Uuid::Uuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Uuid::InitAsDefaultInstance() {
}

Uuid::Uuid(const Uuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Uuid::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uuid::~Uuid() {
  SharedDtor();
}

void Uuid::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void Uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uuid_descriptor_;
}

const Uuid& Uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Uuid* Uuid::default_instance_ = NULL;

Uuid* Uuid::New() const {
  return new Uuid;
}

void Uuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Uuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Uuid::Swap(Uuid* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uuid_descriptor_;
  metadata.reflection = Uuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qvariant::kTypeFieldNumber;
const int qvariant::kIntValueFieldNumber;
const int qvariant::kUintValueFieldNumber;
const int qvariant::kDoubleValueFieldNumber;
const int qvariant::kBoolValueFieldNumber;
#endif  // !_MSC_VER

qvariant::qvariant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qvariant::InitAsDefaultInstance() {
}

qvariant::qvariant(const qvariant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qvariant::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  intvalue_ = 0;
  uintvalue_ = 0u;
  doublevalue_ = 0;
  boolvalue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qvariant::~qvariant() {
  SharedDtor();
}

void qvariant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qvariant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qvariant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qvariant_descriptor_;
}

const qvariant& qvariant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

qvariant* qvariant::default_instance_ = NULL;

qvariant* qvariant::New() const {
  return new qvariant;
}

void qvariant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    intvalue_ = 0;
    uintvalue_ = 0u;
    doublevalue_ = 0;
    boolvalue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qvariant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intValue;
        break;
      }

      // optional int32 intValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uintValue;
        break;
      }

      // optional uint32 uintValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uintValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uintvalue_)));
          set_has_uintvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_doubleValue;
        break;
      }

      // optional double doubleValue = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doublevalue_)));
          set_has_doublevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boolValue;
        break;
      }

      // optional bool boolValue = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qvariant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intvalue(), output);
  }

  // optional uint32 uintValue = 3 [default = 0];
  if (has_uintvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uintvalue(), output);
  }

  // optional double doubleValue = 4 [default = 0];
  if (has_doublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->doublevalue(), output);
  }

  // optional bool boolValue = 5 [default = false];
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->boolvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qvariant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intvalue(), target);
  }

  // optional uint32 uintValue = 3 [default = 0];
  if (has_uintvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uintvalue(), target);
  }

  // optional double doubleValue = 4 [default = 0];
  if (has_doublevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->doublevalue(), target);
  }

  // optional bool boolValue = 5 [default = false];
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->boolvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qvariant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 intValue = 2 [default = 0];
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intvalue());
    }

    // optional uint32 uintValue = 3 [default = 0];
    if (has_uintvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uintvalue());
    }

    // optional double doubleValue = 4 [default = 0];
    if (has_doublevalue()) {
      total_size += 1 + 8;
    }

    // optional bool boolValue = 5 [default = false];
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qvariant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qvariant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qvariant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qvariant::MergeFrom(const qvariant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_uintvalue()) {
      set_uintvalue(from.uintvalue());
    }
    if (from.has_doublevalue()) {
      set_doublevalue(from.doublevalue());
    }
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qvariant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qvariant::CopyFrom(const qvariant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qvariant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qvariant::Swap(qvariant* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(uintvalue_, other->uintvalue_);
    std::swap(doublevalue_, other->doublevalue_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qvariant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qvariant_descriptor_;
  metadata.reflection = qvariant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wstring::kTextFieldNumber;
#endif  // !_MSC_VER

wstring::wstring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wstring::InitAsDefaultInstance() {
}

wstring::wstring(const wstring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wstring::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wstring::~wstring() {
  SharedDtor();
}

void wstring::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void wstring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wstring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wstring_descriptor_;
}

const wstring& wstring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

wstring* wstring::default_instance_ = NULL;

wstring* wstring::New() const {
  return new wstring;
}

void wstring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wstring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wstring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wstring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes text = 1;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wstring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wstring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wstring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wstring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wstring::MergeFrom(const wstring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wstring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wstring::CopyFrom(const wstring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wstring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void wstring::Swap(wstring* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wstring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wstring_descriptor_;
  metadata.reflection = wstring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FontParam::kNameObsoleteFieldNumber;
const int FontParam::kSizeFieldNumber;
const int FontParam::kBoldFieldNumber;
const int FontParam::kItalicFieldNumber;
const int FontParam::kNameFieldNumber;
#endif  // !_MSC_VER

FontParam::FontParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontParam::InitAsDefaultInstance() {
  name_obsolete_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FontParam::FontParam(const FontParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontParam::SharedCtor() {
  _cached_size_ = 0;
  name_obsolete_ = NULL;
  size_ = 0;
  bold_ = false;
  italic_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontParam::~FontParam() {
  SharedDtor();
}

void FontParam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete name_obsolete_;
  }
}

void FontParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontParam_descriptor_;
}

const FontParam& FontParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FontParam* FontParam::default_instance_ = NULL;

FontParam* FontParam::New() const {
  return new FontParam;
}

void FontParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name_obsolete()) {
      if (name_obsolete_ != NULL) name_obsolete_->::Proto::wstring::Clear();
    }
    size_ = 0;
    bold_ = false;
    italic_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring name_obsolete = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_obsolete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_size;
        break;
      }

      // required double size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bold;
        break;
      }

      // required bool bold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_italic;
        break;
      }

      // required bool italic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring name_obsolete = 1;
  if (has_name_obsolete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name_obsolete(), output);
  }

  // required double size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->size(), output);
  }

  // required bool bold = 3;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bold(), output);
  }

  // required bool italic = 4;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->italic(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring name_obsolete = 1;
  if (has_name_obsolete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name_obsolete(), target);
  }

  // required double size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->size(), target);
  }

  // required bool bold = 3;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bold(), target);
  }

  // required bool italic = 4;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->italic(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring name_obsolete = 1;
    if (has_name_obsolete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_obsolete());
    }

    // required double size = 2;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // required bool bold = 3;
    if (has_bold()) {
      total_size += 1 + 1;
    }

    // required bool italic = 4;
    if (has_italic()) {
      total_size += 1 + 1;
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontParam::MergeFrom(const FontParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_obsolete()) {
      mutable_name_obsolete()->::Proto::wstring::MergeFrom(from.name_obsolete());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontParam::CopyFrom(const FontParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_name_obsolete()) {
    if (!this->name_obsolete().IsInitialized()) return false;
  }
  return true;
}

void FontParam::Swap(FontParam* other) {
  if (other != this) {
    std::swap(name_obsolete_, other->name_obsolete_);
    std::swap(size_, other->size_);
    std::swap(bold_, other->bold_);
    std::swap(italic_, other->italic_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontParam_descriptor_;
  metadata.reflection = FontParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaPoint::kXFieldNumber;
const int SchemaPoint::kYFieldNumber;
#endif  // !_MSC_VER

SchemaPoint::SchemaPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaPoint::InitAsDefaultInstance() {
}

SchemaPoint::SchemaPoint(const SchemaPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaPoint::~SchemaPoint() {
  SharedDtor();
}

void SchemaPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaPoint_descriptor_;
}

const SchemaPoint& SchemaPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaPoint* SchemaPoint::default_instance_ = NULL;

SchemaPoint* SchemaPoint::New() const {
  return new SchemaPoint;
}

void SchemaPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaPoint::MergeFrom(const SchemaPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaPoint::CopyFrom(const SchemaPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaPoint::Swap(SchemaPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaPoint_descriptor_;
  metadata.reflection = SchemaPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Envelope::kClassnamehashFieldNumber;
const int Envelope::kCompressedObjectFieldNumber;
const int Envelope::kSchemaitemFieldNumber;
const int Envelope::kDeviceobjectFieldNumber;
const int Envelope::kSchemaFieldNumber;
const int Envelope::kSchemalayerFieldNumber;
const int Envelope::kFblelementFieldNumber;
const int Envelope::kConfigurationFieldNumber;
const int Envelope::kConnectionFieldNumber;
const int Envelope::kSchemaDetailsSetFieldNumber;
const int Envelope::kBusFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  schemaitem_ = const_cast< ::Proto::SchemaItem*>(&::Proto::SchemaItem::default_instance());
  deviceobject_ = const_cast< ::Proto::DeviceObject*>(&::Proto::DeviceObject::default_instance());
  schema_ = const_cast< ::Proto::Schema*>(&::Proto::Schema::default_instance());
  schemalayer_ = const_cast< ::Proto::SchemaLayer*>(&::Proto::SchemaLayer::default_instance());
  fblelement_ = const_cast< ::Proto::FblElement*>(&::Proto::FblElement::default_instance());
  configuration_ = const_cast< ::Proto::Configuration*>(&::Proto::Configuration::default_instance());
  connection_ = const_cast< ::Proto::Connection*>(&::Proto::Connection::default_instance());
  schemadetailsset_ = const_cast< ::Proto::SchemaDetailsSet*>(&::Proto::SchemaDetailsSet::default_instance());
  bus_ = const_cast< ::Proto::Bus*>(&::Proto::Bus::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  classnamehash_ = 0u;
  compressedobject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  schemaitem_ = NULL;
  deviceobject_ = NULL;
  schema_ = NULL;
  schemalayer_ = NULL;
  fblelement_ = NULL;
  configuration_ = NULL;
  connection_ = NULL;
  schemadetailsset_ = NULL;
  bus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (compressedobject_ != &::google::protobuf::internal::kEmptyString) {
    delete compressedobject_;
  }
  if (this != default_instance_) {
    delete schemaitem_;
    delete deviceobject_;
    delete schema_;
    delete schemalayer_;
    delete fblelement_;
    delete configuration_;
    delete connection_;
    delete schemadetailsset_;
    delete bus_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    classnamehash_ = 0u;
    if (has_compressedobject()) {
      if (compressedobject_ != &::google::protobuf::internal::kEmptyString) {
        compressedobject_->clear();
      }
    }
    if (has_schemaitem()) {
      if (schemaitem_ != NULL) schemaitem_->::Proto::SchemaItem::Clear();
    }
    if (has_deviceobject()) {
      if (deviceobject_ != NULL) deviceobject_->::Proto::DeviceObject::Clear();
    }
    if (has_schema()) {
      if (schema_ != NULL) schema_->::Proto::Schema::Clear();
    }
    if (has_schemalayer()) {
      if (schemalayer_ != NULL) schemalayer_->::Proto::SchemaLayer::Clear();
    }
    if (has_fblelement()) {
      if (fblelement_ != NULL) fblelement_->::Proto::FblElement::Clear();
    }
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::Proto::Configuration::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_connection()) {
      if (connection_ != NULL) connection_->::Proto::Connection::Clear();
    }
    if (has_schemadetailsset()) {
      if (schemadetailsset_ != NULL) schemadetailsset_->::Proto::SchemaDetailsSet::Clear();
    }
    if (has_bus()) {
      if (bus_ != NULL) bus_->::Proto::Bus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 classnamehash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classnamehash_)));
          set_has_classnamehash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_compressedObject;
        break;
      }

      // optional bytes compressedObject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compressedObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compressedobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_schemaitem;
        break;
      }

      // optional .Proto.SchemaItem schemaitem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemaitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceobject;
        break;
      }

      // optional .Proto.DeviceObject deviceobject = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_schema;
        break;
      }

      // optional .Proto.Schema schema = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_schemalayer;
        break;
      }

      // optional .Proto.SchemaLayer schemalayer = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemalayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemalayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_fblelement;
        break;
      }

      // optional .Proto.FblElement fblelement = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fblelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblelement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_configuration;
        break;
      }

      // optional .Proto.Configuration configuration = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_connection;
        break;
      }

      // optional .Proto.Connection connection = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_schemaDetailsSet;
        break;
      }

      // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaDetailsSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemadetailsset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_bus;
        break;
      }

      // optional .Proto.Bus bus = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 classnamehash = 1;
  if (has_classnamehash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->classnamehash(), output);
  }

  // optional bytes compressedObject = 2;
  if (has_compressedobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->compressedobject(), output);
  }

  // optional .Proto.SchemaItem schemaitem = 6;
  if (has_schemaitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->schemaitem(), output);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (has_deviceobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deviceobject(), output);
  }

  // optional .Proto.Schema schema = 100;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->schema(), output);
  }

  // optional .Proto.SchemaLayer schemalayer = 101;
  if (has_schemalayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->schemalayer(), output);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (has_fblelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->fblelement(), output);
  }

  // optional .Proto.Configuration configuration = 103;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->configuration(), output);
  }

  // optional .Proto.Connection connection = 104;
  if (has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->connection(), output);
  }

  // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
  if (has_schemadetailsset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->schemadetailsset(), output);
  }

  // optional .Proto.Bus bus = 200;
  if (has_bus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->bus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 classnamehash = 1;
  if (has_classnamehash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->classnamehash(), target);
  }

  // optional bytes compressedObject = 2;
  if (has_compressedobject()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->compressedobject(), target);
  }

  // optional .Proto.SchemaItem schemaitem = 6;
  if (has_schemaitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->schemaitem(), target);
  }

  // optional .Proto.DeviceObject deviceobject = 7;
  if (has_deviceobject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deviceobject(), target);
  }

  // optional .Proto.Schema schema = 100;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->schema(), target);
  }

  // optional .Proto.SchemaLayer schemalayer = 101;
  if (has_schemalayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->schemalayer(), target);
  }

  // optional .Proto.FblElement fblelement = 102;
  if (has_fblelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->fblelement(), target);
  }

  // optional .Proto.Configuration configuration = 103;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->configuration(), target);
  }

  // optional .Proto.Connection connection = 104;
  if (has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->connection(), target);
  }

  // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
  if (has_schemadetailsset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->schemadetailsset(), target);
  }

  // optional .Proto.Bus bus = 200;
  if (has_bus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->bus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 classnamehash = 1;
    if (has_classnamehash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classnamehash());
    }

    // optional bytes compressedObject = 2;
    if (has_compressedobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->compressedobject());
    }

    // optional .Proto.SchemaItem schemaitem = 6;
    if (has_schemaitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemaitem());
    }

    // optional .Proto.DeviceObject deviceobject = 7;
    if (has_deviceobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceobject());
    }

    // optional .Proto.Schema schema = 100;
    if (has_schema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

    // optional .Proto.SchemaLayer schemalayer = 101;
    if (has_schemalayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemalayer());
    }

    // optional .Proto.FblElement fblelement = 102;
    if (has_fblelement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblelement());
    }

    // optional .Proto.Configuration configuration = 103;
    if (has_configuration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.Connection connection = 104;
    if (has_connection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection());
    }

    // optional .Proto.SchemaDetailsSet schemaDetailsSet = 105;
    if (has_schemadetailsset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemadetailsset());
    }

    // optional .Proto.Bus bus = 200;
    if (has_bus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classnamehash()) {
      set_classnamehash(from.classnamehash());
    }
    if (from.has_compressedobject()) {
      set_compressedobject(from.compressedobject());
    }
    if (from.has_schemaitem()) {
      mutable_schemaitem()->::Proto::SchemaItem::MergeFrom(from.schemaitem());
    }
    if (from.has_deviceobject()) {
      mutable_deviceobject()->::Proto::DeviceObject::MergeFrom(from.deviceobject());
    }
    if (from.has_schema()) {
      mutable_schema()->::Proto::Schema::MergeFrom(from.schema());
    }
    if (from.has_schemalayer()) {
      mutable_schemalayer()->::Proto::SchemaLayer::MergeFrom(from.schemalayer());
    }
    if (from.has_fblelement()) {
      mutable_fblelement()->::Proto::FblElement::MergeFrom(from.fblelement());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::Proto::Configuration::MergeFrom(from.configuration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connection()) {
      mutable_connection()->::Proto::Connection::MergeFrom(from.connection());
    }
    if (from.has_schemadetailsset()) {
      mutable_schemadetailsset()->::Proto::SchemaDetailsSet::MergeFrom(from.schemadetailsset());
    }
    if (from.has_bus()) {
      mutable_bus()->::Proto::Bus::MergeFrom(from.bus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schemaitem()) {
    if (!this->schemaitem().IsInitialized()) return false;
  }
  if (has_deviceobject()) {
    if (!this->deviceobject().IsInitialized()) return false;
  }
  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  if (has_schemalayer()) {
    if (!this->schemalayer().IsInitialized()) return false;
  }
  if (has_fblelement()) {
    if (!this->fblelement().IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  if (has_connection()) {
    if (!this->connection().IsInitialized()) return false;
  }
  if (has_schemadetailsset()) {
    if (!this->schemadetailsset().IsInitialized()) return false;
  }
  if (has_bus()) {
    if (!this->bus().IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(classnamehash_, other->classnamehash_);
    std::swap(compressedobject_, other->compressedobject_);
    std::swap(schemaitem_, other->schemaitem_);
    std::swap(deviceobject_, other->deviceobject_);
    std::swap(schema_, other->schema_);
    std::swap(schemalayer_, other->schemalayer_);
    std::swap(fblelement_, other->fblelement_);
    std::swap(configuration_, other->configuration_);
    std::swap(connection_, other->connection_);
    std::swap(schemadetailsset_, other->schemadetailsset_);
    std::swap(bus_, other->bus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnvelopeSet::kItemsFieldNumber;
#endif  // !_MSC_VER

EnvelopeSet::EnvelopeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnvelopeSet::InitAsDefaultInstance() {
}

EnvelopeSet::EnvelopeSet(const EnvelopeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnvelopeSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvelopeSet::~EnvelopeSet() {
  SharedDtor();
}

void EnvelopeSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnvelopeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvelopeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvelopeSet_descriptor_;
}

const EnvelopeSet& EnvelopeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

EnvelopeSet* EnvelopeSet::default_instance_ = NULL;

EnvelopeSet* EnvelopeSet::New() const {
  return new EnvelopeSet;
}

void EnvelopeSet::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnvelopeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.Envelope items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnvelopeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.Envelope items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnvelopeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.Envelope items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnvelopeSet::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.Envelope items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvelopeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnvelopeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnvelopeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnvelopeSet::MergeFrom(const EnvelopeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnvelopeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeSet::CopyFrom(const EnvelopeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeSet::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void EnvelopeSet::Swap(EnvelopeSet* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnvelopeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvelopeSet_descriptor_;
  metadata.reflection = EnvelopeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnvelopeSetShortDescription::kProjectdbversionFieldNumber;
const int EnvelopeSetShortDescription::kClassnamehashFieldNumber;
const int EnvelopeSetShortDescription::kEquipmentEditorFieldNumber;
const int EnvelopeSetShortDescription::kPresetEditorFieldNumber;
const int EnvelopeSetShortDescription::kPresetRootFieldNumber;
#endif  // !_MSC_VER

EnvelopeSetShortDescription::EnvelopeSetShortDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnvelopeSetShortDescription::InitAsDefaultInstance() {
}

EnvelopeSetShortDescription::EnvelopeSetShortDescription(const EnvelopeSetShortDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnvelopeSetShortDescription::SharedCtor() {
  _cached_size_ = 0;
  projectdbversion_ = 0u;
  equipmenteditor_ = false;
  preseteditor_ = false;
  presetroot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvelopeSetShortDescription::~EnvelopeSetShortDescription() {
  SharedDtor();
}

void EnvelopeSetShortDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnvelopeSetShortDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvelopeSetShortDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvelopeSetShortDescription_descriptor_;
}

const EnvelopeSetShortDescription& EnvelopeSetShortDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

EnvelopeSetShortDescription* EnvelopeSetShortDescription::default_instance_ = NULL;

EnvelopeSetShortDescription* EnvelopeSetShortDescription::New() const {
  return new EnvelopeSetShortDescription;
}

void EnvelopeSetShortDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectdbversion_ = 0u;
    equipmenteditor_ = false;
    preseteditor_ = false;
    presetroot_ = false;
  }
  classnamehash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnvelopeSetShortDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 projectdbversion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &projectdbversion_)));
          set_has_projectdbversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_classnamehash;
        break;
      }

      // repeated uint32 classnamehash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classnamehash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_classnamehash())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_classnamehash())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_classnamehash;
        if (input->ExpectTag(24)) goto parse_equipmentEditor;
        break;
      }

      // optional bool equipmentEditor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentEditor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &equipmenteditor_)));
          set_has_equipmenteditor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_presetEditor;
        break;
      }

      // optional bool presetEditor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presetEditor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preseteditor_)));
          set_has_preseteditor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_presetRoot;
        break;
      }

      // optional bool presetRoot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presetRoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presetroot_)));
          set_has_presetroot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnvelopeSetShortDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 projectdbversion = 1;
  if (has_projectdbversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->projectdbversion(), output);
  }

  // repeated uint32 classnamehash = 2;
  for (int i = 0; i < this->classnamehash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->classnamehash(i), output);
  }

  // optional bool equipmentEditor = 3;
  if (has_equipmenteditor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->equipmenteditor(), output);
  }

  // optional bool presetEditor = 4;
  if (has_preseteditor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preseteditor(), output);
  }

  // optional bool presetRoot = 5;
  if (has_presetroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->presetroot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnvelopeSetShortDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 projectdbversion = 1;
  if (has_projectdbversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->projectdbversion(), target);
  }

  // repeated uint32 classnamehash = 2;
  for (int i = 0; i < this->classnamehash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->classnamehash(i), target);
  }

  // optional bool equipmentEditor = 3;
  if (has_equipmenteditor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->equipmenteditor(), target);
  }

  // optional bool presetEditor = 4;
  if (has_preseteditor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preseteditor(), target);
  }

  // optional bool presetRoot = 5;
  if (has_presetroot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->presetroot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnvelopeSetShortDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 projectdbversion = 1;
    if (has_projectdbversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->projectdbversion());
    }

    // optional bool equipmentEditor = 3;
    if (has_equipmenteditor()) {
      total_size += 1 + 1;
    }

    // optional bool presetEditor = 4;
    if (has_preseteditor()) {
      total_size += 1 + 1;
    }

    // optional bool presetRoot = 5;
    if (has_presetroot()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 classnamehash = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->classnamehash_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->classnamehash(i));
    }
    total_size += 1 * this->classnamehash_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvelopeSetShortDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnvelopeSetShortDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnvelopeSetShortDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnvelopeSetShortDescription::MergeFrom(const EnvelopeSetShortDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  classnamehash_.MergeFrom(from.classnamehash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectdbversion()) {
      set_projectdbversion(from.projectdbversion());
    }
    if (from.has_equipmenteditor()) {
      set_equipmenteditor(from.equipmenteditor());
    }
    if (from.has_preseteditor()) {
      set_preseteditor(from.preseteditor());
    }
    if (from.has_presetroot()) {
      set_presetroot(from.presetroot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnvelopeSetShortDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeSetShortDescription::CopyFrom(const EnvelopeSetShortDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeSetShortDescription::IsInitialized() const {

  return true;
}

void EnvelopeSetShortDescription::Swap(EnvelopeSetShortDescription* other) {
  if (other != this) {
    std::swap(projectdbversion_, other->projectdbversion_);
    classnamehash_.Swap(&other->classnamehash_);
    std::swap(equipmenteditor_, other->equipmenteditor_);
    std::swap(preseteditor_, other->preseteditor_);
    std::swap(presetroot_, other->presetroot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnvelopeSetShortDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvelopeSetShortDescription_descriptor_;
  metadata.reflection = EnvelopeSetShortDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kUuidFieldNumber;
const int Configuration::kStrIDFieldNumber;
const int Configuration::kCaptionFieldNumber;
const int Configuration::kVariablesFieldNumber;
const int Configuration::kGlobalsFieldNumber;
const int Configuration::kSchemasIDsFieldNumber;
const int Configuration::kSchemasFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  variables_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  globals_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  strid_ = NULL;
  caption_ = NULL;
  variables_ = NULL;
  globals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete strid_;
    delete caption_;
    delete variables_;
    delete globals_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    if (has_variables()) {
      if (variables_ != NULL) variables_->::Proto::wstring::Clear();
    }
    if (has_globals()) {
      if (globals_ != NULL) globals_->::Proto::wstring::Clear();
    }
  }
  schemasids_.Clear();
  schemas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strID;
        break;
      }

      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variables;
        break;
      }

      // required .Proto.wstring variables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globals;
        break;
      }

      // required .Proto.wstring globals = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_schemasIDs;
        break;
      }

      // repeated .Proto.Uuid schemasIDs = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemasIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemasids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_schemasIDs;
        if (input->ExpectTag(810)) goto parse_schemas;
        break;
      }

      // repeated .Proto.Envelope schemas = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_schemas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required .Proto.wstring variables = 4;
  if (has_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variables(), output);
  }

  // required .Proto.wstring globals = 5;
  if (has_globals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->globals(), output);
  }

  // repeated .Proto.Uuid schemasIDs = 100;
  for (int i = 0; i < this->schemasids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->schemasids(i), output);
  }

  // repeated .Proto.Envelope schemas = 101;
  for (int i = 0; i < this->schemas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->schemas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required .Proto.wstring variables = 4;
  if (has_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variables(), target);
  }

  // required .Proto.wstring globals = 5;
  if (has_globals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->globals(), target);
  }

  // repeated .Proto.Uuid schemasIDs = 100;
  for (int i = 0; i < this->schemasids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->schemasids(i), target);
  }

  // repeated .Proto.Envelope schemas = 101;
  for (int i = 0; i < this->schemas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->schemas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.wstring variables = 4;
    if (has_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variables());
    }

    // required .Proto.wstring globals = 5;
    if (has_globals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globals());
    }

  }
  // repeated .Proto.Uuid schemasIDs = 100;
  total_size += 2 * this->schemasids_size();
  for (int i = 0; i < this->schemasids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemasids(i));
  }

  // repeated .Proto.Envelope schemas = 101;
  total_size += 2 * this->schemas_size();
  for (int i = 0; i < this->schemas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  schemasids_.MergeFrom(from.schemasids_);
  schemas_.MergeFrom(from.schemas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_variables()) {
      mutable_variables()->::Proto::wstring::MergeFrom(from.variables());
    }
    if (from.has_globals()) {
      mutable_globals()->::Proto::wstring::MergeFrom(from.globals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_variables()) {
    if (!this->variables().IsInitialized()) return false;
  }
  if (has_globals()) {
    if (!this->globals().IsInitialized()) return false;
  }
  for (int i = 0; i < schemasids_size(); i++) {
    if (!this->schemasids(i).IsInitialized()) return false;
  }
  for (int i = 0; i < schemas_size(); i++) {
    if (!this->schemas(i).IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(variables_, other->variables_);
    std::swap(globals_, other->globals_);
    schemasids_.Swap(&other->schemasids_);
    schemas_.Swap(&other->schemas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbElementCollection::kElementsFieldNumber;
#endif  // !_MSC_VER

AfbElementCollection::AfbElementCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbElementCollection::InitAsDefaultInstance() {
}

AfbElementCollection::AfbElementCollection(const AfbElementCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbElementCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbElementCollection::~AfbElementCollection() {
  SharedDtor();
}

void AfbElementCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AfbElementCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbElementCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbElementCollection_descriptor_;
}

const AfbElementCollection& AfbElementCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbElementCollection* AfbElementCollection::default_instance_ = NULL;

AfbElementCollection* AfbElementCollection::New() const {
  return new AfbElementCollection;
}

void AfbElementCollection::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbElementCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AfbElementXml elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbElementCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.AfbElementXml elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbElementCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.AfbElementXml elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbElementCollection::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.AfbElementXml elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbElementCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbElementCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbElementCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbElementCollection::MergeFrom(const AfbElementCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbElementCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementCollection::CopyFrom(const AfbElementCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementCollection::IsInitialized() const {

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void AfbElementCollection::Swap(AfbElementCollection* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbElementCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbElementCollection_descriptor_;
  metadata.reflection = AfbElementCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbElementXml::kDataFieldNumber;
#endif  // !_MSC_VER

AfbElementXml::AfbElementXml()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbElementXml::InitAsDefaultInstance() {
}

AfbElementXml::AfbElementXml(const AfbElementXml& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbElementXml::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbElementXml::~AfbElementXml() {
  SharedDtor();
}

void AfbElementXml::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AfbElementXml::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbElementXml::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbElementXml_descriptor_;
}

const AfbElementXml& AfbElementXml::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbElementXml* AfbElementXml::default_instance_ = NULL;

AfbElementXml* AfbElementXml::New() const {
  return new AfbElementXml;
}

void AfbElementXml::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbElementXml::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbElementXml::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbElementXml::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbElementXml::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbElementXml::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbElementXml* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbElementXml*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbElementXml::MergeFrom(const AfbElementXml& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbElementXml::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbElementXml::CopyFrom(const AfbElementXml& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbElementXml::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AfbElementXml::Swap(AfbElementXml* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbElementXml::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbElementXml_descriptor_;
  metadata.reflection = AfbElementXml_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblElement::kStrIDFieldNumber;
const int FblElement::kCaptionFieldNumber;
const int FblElement::kOpcodeFieldNumber;
const int FblElement::kHasRamFieldNumber;
const int FblElement::kRequiredStartFieldNumber;
const int FblElement::kInputsFieldNumber;
const int FblElement::kOutputsFieldNumber;
const int FblElement::kParamsFieldNumber;
const int FblElement::kDescriptionFieldNumber;
#endif  // !_MSC_VER

FblElement::FblElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblElement::InitAsDefaultInstance() {
  strid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  description_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

FblElement::FblElement(const FblElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblElement::SharedCtor() {
  _cached_size_ = 0;
  strid_ = NULL;
  caption_ = NULL;
  opcode_ = 0u;
  hasram_ = false;
  requiredstart_ = true;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblElement::~FblElement() {
  SharedDtor();
}

void FblElement::SharedDtor() {
  if (this != default_instance_) {
    delete strid_;
    delete caption_;
    delete description_;
  }
}

void FblElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblElement_descriptor_;
}

const FblElement& FblElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblElement* FblElement::default_instance_ = NULL;

FblElement* FblElement::New() const {
  return new FblElement;
}

void FblElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strid()) {
      if (strid_ != NULL) strid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    opcode_ = 0u;
    hasram_ = false;
    requiredstart_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::Proto::wstring::Clear();
    }
  }
  inputs_.Clear();
  outputs_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring strID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opcode;
        break;
      }

      // required uint32 opcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasRam;
        break;
      }

      // optional bool hasRam = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasRam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasram_)));
          set_has_hasram();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requiredStart;
        break;
      }

      // optional bool requiredStart = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requiredstart_)));
          set_has_requiredstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inputs;
        break;
      }

      // repeated .Proto.AfbSignal inputs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_inputs;
        if (input->ExpectTag(98)) goto parse_outputs;
        break;
      }

      // repeated .Proto.AfbSignal outputs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_outputs;
        if (input->ExpectTag(106)) goto parse_params;
        break;
      }

      // repeated .Proto.AfbParam params = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_params;
        if (input->ExpectTag(114)) goto parse_description;
        break;
      }

      // optional .Proto.wstring description = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required uint32 opcode = 4;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opcode(), output);
  }

  // optional bool hasRam = 5 [default = false];
  if (has_hasram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasram(), output);
  }

  // optional bool requiredStart = 6 [default = true];
  if (has_requiredstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requiredstart(), output);
  }

  // repeated .Proto.AfbSignal inputs = 11;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->inputs(i), output);
  }

  // repeated .Proto.AfbSignal outputs = 12;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->outputs(i), output);
  }

  // repeated .Proto.AfbParam params = 13;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->params(i), output);
  }

  // optional .Proto.wstring description = 14;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring strID = 2;
  if (has_strid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required uint32 opcode = 4;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opcode(), target);
  }

  // optional bool hasRam = 5 [default = false];
  if (has_hasram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasram(), target);
  }

  // optional bool requiredStart = 6 [default = true];
  if (has_requiredstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requiredstart(), target);
  }

  // repeated .Proto.AfbSignal inputs = 11;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->inputs(i), target);
  }

  // repeated .Proto.AfbSignal outputs = 12;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->outputs(i), target);
  }

  // repeated .Proto.AfbParam params = 13;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->params(i), target);
  }

  // optional .Proto.wstring description = 14;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring strID = 2;
    if (has_strid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required uint32 opcode = 4;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }

    // optional bool hasRam = 5 [default = false];
    if (has_hasram()) {
      total_size += 1 + 1;
    }

    // optional bool requiredStart = 6 [default = true];
    if (has_requiredstart()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.wstring description = 14;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

  }
  // repeated .Proto.AfbSignal inputs = 11;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .Proto.AfbSignal outputs = 12;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  // repeated .Proto.AfbParam params = 13;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblElement::MergeFrom(const FblElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strid()) {
      mutable_strid()->::Proto::wstring::MergeFrom(from.strid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_hasram()) {
      set_hasram(from.hasram());
    }
    if (from.has_requiredstart()) {
      set_requiredstart(from.requiredstart());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      mutable_description()->::Proto::wstring::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblElement::CopyFrom(const FblElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_strid()) {
    if (!this->strid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  for (int i = 0; i < inputs_size(); i++) {
    if (!this->inputs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < outputs_size(); i++) {
    if (!this->outputs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

void FblElement::Swap(FblElement* other) {
  if (other != this) {
    std::swap(strid_, other->strid_);
    std::swap(caption_, other->caption_);
    std::swap(opcode_, other->opcode_);
    std::swap(hasram_, other->hasram_);
    std::swap(requiredstart_, other->requiredstart_);
    inputs_.Swap(&other->inputs_);
    outputs_.Swap(&other->outputs_);
    params_.Swap(&other->params_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblElement_descriptor_;
  metadata.reflection = FblElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbSignal::kCaptionFieldNumber;
const int AfbSignal::kTypeFieldNumber;
const int AfbSignal::kOperandIndexFieldNumber;
const int AfbSignal::kSizeFieldNumber;
const int AfbSignal::kOpNameFieldNumber;
const int AfbSignal::kDataFormatFieldNumber;
#endif  // !_MSC_VER

AfbSignal::AfbSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbSignal::InitAsDefaultInstance() {
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  opname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

AfbSignal::AfbSignal(const AfbSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbSignal::SharedCtor() {
  _cached_size_ = 0;
  caption_ = NULL;
  type_ = 0;
  operandindex_ = 0;
  size_ = 0;
  opname_ = NULL;
  dataformat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbSignal::~AfbSignal() {
  SharedDtor();
}

void AfbSignal::SharedDtor() {
  if (this != default_instance_) {
    delete caption_;
    delete opname_;
  }
}

void AfbSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbSignal_descriptor_;
}

const AfbSignal& AfbSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbSignal* AfbSignal::default_instance_ = NULL;

AfbSignal* AfbSignal::New() const {
  return new AfbSignal;
}

void AfbSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    type_ = 0;
    operandindex_ = 0;
    size_ = 0;
    if (has_opname()) {
      if (opname_ != NULL) opname_->::Proto::wstring::Clear();
    }
    dataformat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Proto.FblSignalType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblSignalType_IsValid(value)) {
            set_type(static_cast< ::Proto::FblSignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operandIndex;
        break;
      }

      // optional int32 operandIndex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operandIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operandindex_)));
          set_has_operandindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_opName;
        break;
      }

      // optional .Proto.wstring opName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dataFormat;
        break;
      }

      // optional .Proto.FblDataFormat dataFormat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblDataFormat_IsValid(value)) {
            set_dataformat(static_cast< ::Proto::FblDataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caption(), output);
  }

  // required .Proto.FblSignalType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 operandIndex = 3 [default = 0];
  if (has_operandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operandindex(), output);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional .Proto.wstring opName = 5;
  if (has_opname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->opname(), output);
  }

  // optional .Proto.FblDataFormat dataFormat = 6;
  if (has_dataformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->dataformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caption(), target);
  }

  // required .Proto.FblSignalType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 operandIndex = 3 [default = 0];
  if (has_operandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operandindex(), target);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional .Proto.wstring opName = 5;
  if (has_opname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->opname(), target);
  }

  // optional .Proto.FblDataFormat dataFormat = 6;
  if (has_dataformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->dataformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required .Proto.FblSignalType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 operandIndex = 3 [default = 0];
    if (has_operandindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operandindex());
    }

    // optional int32 size = 4 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional .Proto.wstring opName = 5;
    if (has_opname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opname());
    }

    // optional .Proto.FblDataFormat dataFormat = 6;
    if (has_dataformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbSignal::MergeFrom(const AfbSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operandindex()) {
      set_operandindex(from.operandindex());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_opname()) {
      mutable_opname()->::Proto::wstring::MergeFrom(from.opname());
    }
    if (from.has_dataformat()) {
      set_dataformat(from.dataformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbSignal::CopyFrom(const AfbSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_opname()) {
    if (!this->opname().IsInitialized()) return false;
  }
  return true;
}

void AfbSignal::Swap(AfbSignal* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(type_, other->type_);
    std::swap(operandindex_, other->operandindex_);
    std::swap(size_, other->size_);
    std::swap(opname_, other->opname_);
    std::swap(dataformat_, other->dataformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbSignal_descriptor_;
  metadata.reflection = AfbSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfbParam::kCaptionFieldNumber;
const int AfbParam::kVisibleFieldNumber;
const int AfbParam::kOperandIndexFieldNumber;
const int AfbParam::kSizeFieldNumber;
const int AfbParam::kInstantiatorFieldNumber;
const int AfbParam::kUserFieldNumber;
const int AfbParam::kChangedScriptFieldNumber;
const int AfbParam::kValueFieldNumber;
const int AfbParam::kDefaultvalueFieldNumber;
const int AfbParam::kLowlimitFieldNumber;
const int AfbParam::kHighlimitFieldNumber;
const int AfbParam::kOpNameFieldNumber;
const int AfbParam::kTypeFieldNumber;
const int AfbParam::kDataFormatFieldNumber;
#endif  // !_MSC_VER

AfbParam::AfbParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfbParam::InitAsDefaultInstance() {
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  changedscript_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  value_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  defaultvalue_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  lowlimit_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  highlimit_ = const_cast< ::Proto::qvariant*>(&::Proto::qvariant::default_instance());
  opname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

AfbParam::AfbParam(const AfbParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfbParam::SharedCtor() {
  _cached_size_ = 0;
  caption_ = NULL;
  visible_ = false;
  operandindex_ = 0;
  size_ = 0;
  instantiator_ = false;
  user_ = false;
  changedscript_ = NULL;
  value_ = NULL;
  defaultvalue_ = NULL;
  lowlimit_ = NULL;
  highlimit_ = NULL;
  opname_ = NULL;
  type_ = 0;
  dataformat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfbParam::~AfbParam() {
  SharedDtor();
}

void AfbParam::SharedDtor() {
  if (this != default_instance_) {
    delete caption_;
    delete changedscript_;
    delete value_;
    delete defaultvalue_;
    delete lowlimit_;
    delete highlimit_;
    delete opname_;
  }
}

void AfbParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfbParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfbParam_descriptor_;
}

const AfbParam& AfbParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AfbParam* AfbParam::default_instance_ = NULL;

AfbParam* AfbParam::New() const {
  return new AfbParam;
}

void AfbParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    visible_ = false;
    operandindex_ = 0;
    size_ = 0;
    instantiator_ = false;
    user_ = false;
    if (has_changedscript()) {
      if (changedscript_ != NULL) changedscript_->::Proto::wstring::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Proto::qvariant::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_defaultvalue()) {
      if (defaultvalue_ != NULL) defaultvalue_->::Proto::qvariant::Clear();
    }
    if (has_lowlimit()) {
      if (lowlimit_ != NULL) lowlimit_->::Proto::qvariant::Clear();
    }
    if (has_highlimit()) {
      if (highlimit_ != NULL) highlimit_->::Proto::qvariant::Clear();
    }
    if (has_opname()) {
      if (opname_ != NULL) opname_->::Proto::wstring::Clear();
    }
    type_ = 0;
    dataformat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfbParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.wstring caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_visible;
        break;
      }

      // required bool visible = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_operandIndex;
        break;
      }

      // optional int32 operandIndex = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operandIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operandindex_)));
          set_has_operandindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional int32 size = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_instantiator;
        break;
      }

      // optional bool instantiator = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instantiator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &instantiator_)));
          set_has_instantiator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_user;
        break;
      }

      // optional bool user = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_)));
          set_has_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_changedScript;
        break;
      }

      // optional .Proto.wstring changedScript = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changedScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changedscript()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_value;
        break;
      }

      // optional .Proto.qvariant value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_defaultvalue;
        break;
      }

      // optional .Proto.qvariant defaultvalue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_lowlimit;
        break;
      }

      // optional .Proto.qvariant lowlimit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lowlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowlimit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_highlimit;
        break;
      }

      // optional .Proto.qvariant highlimit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highlimit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_opName;
        break;
      }

      // optional .Proto.wstring opName = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_type;
        break;
      }

      // optional .Proto.FblSignalType type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblSignalType_IsValid(value)) {
            set_type(static_cast< ::Proto::FblSignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dataFormat;
        break;
      }

      // optional .Proto.FblDataFormat dataFormat = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::FblDataFormat_IsValid(value)) {
            set_dataformat(static_cast< ::Proto::FblDataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfbParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caption(), output);
  }

  // required bool visible = 7;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->visible(), output);
  }

  // optional int32 operandIndex = 8 [default = 0];
  if (has_operandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->operandindex(), output);
  }

  // optional int32 size = 9 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->size(), output);
  }

  // optional bool instantiator = 10 [default = false];
  if (has_instantiator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->instantiator(), output);
  }

  // optional bool user = 11 [default = false];
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->user(), output);
  }

  // optional .Proto.wstring changedScript = 12;
  if (has_changedscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->changedscript(), output);
  }

  // optional .Proto.qvariant value = 13;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->value(), output);
  }

  // optional .Proto.qvariant defaultvalue = 14;
  if (has_defaultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->defaultvalue(), output);
  }

  // optional .Proto.qvariant lowlimit = 15;
  if (has_lowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->lowlimit(), output);
  }

  // optional .Proto.qvariant highlimit = 16;
  if (has_highlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->highlimit(), output);
  }

  // optional .Proto.wstring opName = 17;
  if (has_opname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->opname(), output);
  }

  // optional .Proto.FblSignalType type = 18;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->type(), output);
  }

  // optional .Proto.FblDataFormat dataFormat = 19;
  if (has_dataformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->dataformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfbParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.wstring caption = 1;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caption(), target);
  }

  // required bool visible = 7;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->visible(), target);
  }

  // optional int32 operandIndex = 8 [default = 0];
  if (has_operandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->operandindex(), target);
  }

  // optional int32 size = 9 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->size(), target);
  }

  // optional bool instantiator = 10 [default = false];
  if (has_instantiator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->instantiator(), target);
  }

  // optional bool user = 11 [default = false];
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->user(), target);
  }

  // optional .Proto.wstring changedScript = 12;
  if (has_changedscript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->changedscript(), target);
  }

  // optional .Proto.qvariant value = 13;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->value(), target);
  }

  // optional .Proto.qvariant defaultvalue = 14;
  if (has_defaultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->defaultvalue(), target);
  }

  // optional .Proto.qvariant lowlimit = 15;
  if (has_lowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->lowlimit(), target);
  }

  // optional .Proto.qvariant highlimit = 16;
  if (has_highlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->highlimit(), target);
  }

  // optional .Proto.wstring opName = 17;
  if (has_opname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->opname(), target);
  }

  // optional .Proto.FblSignalType type = 18;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->type(), target);
  }

  // optional .Proto.FblDataFormat dataFormat = 19;
  if (has_dataformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->dataformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfbParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.wstring caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required bool visible = 7;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 operandIndex = 8 [default = 0];
    if (has_operandindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operandindex());
    }

    // optional int32 size = 9 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bool instantiator = 10 [default = false];
    if (has_instantiator()) {
      total_size += 1 + 1;
    }

    // optional bool user = 11 [default = false];
    if (has_user()) {
      total_size += 1 + 1;
    }

    // optional .Proto.wstring changedScript = 12;
    if (has_changedscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changedscript());
    }

    // optional .Proto.qvariant value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.qvariant defaultvalue = 14;
    if (has_defaultvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defaultvalue());
    }

    // optional .Proto.qvariant lowlimit = 15;
    if (has_lowlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lowlimit());
    }

    // optional .Proto.qvariant highlimit = 16;
    if (has_highlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highlimit());
    }

    // optional .Proto.wstring opName = 17;
    if (has_opname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opname());
    }

    // optional .Proto.FblSignalType type = 18;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Proto.FblDataFormat dataFormat = 19;
    if (has_dataformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfbParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfbParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfbParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfbParam::MergeFrom(const AfbParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_operandindex()) {
      set_operandindex(from.operandindex());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_instantiator()) {
      set_instantiator(from.instantiator());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_changedscript()) {
      mutable_changedscript()->::Proto::wstring::MergeFrom(from.changedscript());
    }
    if (from.has_value()) {
      mutable_value()->::Proto::qvariant::MergeFrom(from.value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defaultvalue()) {
      mutable_defaultvalue()->::Proto::qvariant::MergeFrom(from.defaultvalue());
    }
    if (from.has_lowlimit()) {
      mutable_lowlimit()->::Proto::qvariant::MergeFrom(from.lowlimit());
    }
    if (from.has_highlimit()) {
      mutable_highlimit()->::Proto::qvariant::MergeFrom(from.highlimit());
    }
    if (from.has_opname()) {
      mutable_opname()->::Proto::wstring::MergeFrom(from.opname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dataformat()) {
      set_dataformat(from.dataformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfbParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfbParam::CopyFrom(const AfbParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfbParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_changedscript()) {
    if (!this->changedscript().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  if (has_defaultvalue()) {
    if (!this->defaultvalue().IsInitialized()) return false;
  }
  if (has_lowlimit()) {
    if (!this->lowlimit().IsInitialized()) return false;
  }
  if (has_highlimit()) {
    if (!this->highlimit().IsInitialized()) return false;
  }
  if (has_opname()) {
    if (!this->opname().IsInitialized()) return false;
  }
  return true;
}

void AfbParam::Swap(AfbParam* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(visible_, other->visible_);
    std::swap(operandindex_, other->operandindex_);
    std::swap(size_, other->size_);
    std::swap(instantiator_, other->instantiator_);
    std::swap(user_, other->user_);
    std::swap(changedscript_, other->changedscript_);
    std::swap(value_, other->value_);
    std::swap(defaultvalue_, other->defaultvalue_);
    std::swap(lowlimit_, other->lowlimit_);
    std::swap(highlimit_, other->highlimit_);
    std::swap(opname_, other->opname_);
    std::swap(type_, other->type_);
    std::swap(dataformat_, other->dataformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfbParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfbParam_descriptor_;
  metadata.reflection = AfbParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Schema::kUuidFieldNumber;
const int Schema::kSchemaIDFieldNumber;
const int Schema::kCaptionFieldNumber;
const int Schema::kWidthFieldNumber;
const int Schema::kHeightFieldNumber;
const int Schema::kUnitFieldNumber;
const int Schema::kExcludeFromBuildFieldNumber;
const int Schema::kBackgroundColorFieldNumber;
const int Schema::kTagsFieldNumber;
const int Schema::kLayersFieldNumber;
const int Schema::kAfbsFieldNumber;
const int Schema::kLogicSchemaFieldNumber;
const int Schema::kUfbSchemaFieldNumber;
#endif  // !_MSC_VER

Schema::Schema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Schema::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  schemaid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  afbs_ = const_cast< ::Proto::AfbElementCollection*>(&::Proto::AfbElementCollection::default_instance());
  logic_schema_ = const_cast< ::Proto::LogicSchema*>(&::Proto::LogicSchema::default_instance());
  ufb_schema_ = const_cast< ::Proto::UfbSchema*>(&::Proto::UfbSchema::default_instance());
}

Schema::Schema(const Schema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Schema::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  schemaid_ = NULL;
  caption_ = NULL;
  width_ = 0;
  height_ = 0;
  unit_ = 0;
  excludefrombuild_ = false;
  backgroundcolor_ = 0u;
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  afbs_ = NULL;
  logic_schema_ = NULL;
  ufb_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schema::~Schema() {
  SharedDtor();
}

void Schema::SharedDtor() {
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (this != default_instance_) {
    delete uuid_;
    delete schemaid_;
    delete caption_;
    delete afbs_;
    delete logic_schema_;
    delete ufb_schema_;
  }
}

void Schema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schema_descriptor_;
}

const Schema& Schema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Schema* Schema::default_instance_ = NULL;

Schema* Schema::New() const {
  return new Schema;
}

void Schema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_schemaid()) {
      if (schemaid_ != NULL) schemaid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    width_ = 0;
    height_ = 0;
    unit_ = 0;
    excludefrombuild_ = false;
    backgroundcolor_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
    if (has_afbs()) {
      if (afbs_ != NULL) afbs_->::Proto::AfbElementCollection::Clear();
    }
    if (has_logic_schema()) {
      if (logic_schema_ != NULL) logic_schema_->::Proto::LogicSchema::Clear();
    }
    if (has_ufb_schema()) {
      if (ufb_schema_ != NULL) ufb_schema_->::Proto::UfbSchema::Clear();
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schemaID;
        break;
      }

      // required .Proto.wstring schemaID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_width;
        break;
      }

      // required double width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // required double height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unit;
        break;
      }

      // required .Proto.SchemaUnit unit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::SchemaUnit_IsValid(value)) {
            set_unit(static_cast< ::Proto::SchemaUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_excludeFromBuild;
        break;
      }

      // optional bool excludeFromBuild = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludeFromBuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excludefrombuild_)));
          set_has_excludefrombuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_backgroundColor;
        break;
      }

      // optional uint32 backgroundColor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backgroundColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backgroundcolor_)));
          set_has_backgroundcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tags;
        break;
      }

      // optional string tags = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_layers;
        break;
      }

      // repeated .Proto.Envelope layers = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_layers;
        if (input->ExpectTag(810)) goto parse_afbs;
        break;
      }

      // required .Proto.AfbElementCollection afbs = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_logic_schema;
        break;
      }

      // optional .Proto.LogicSchema logic_schema = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logic_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_ufb_schema;
        break;
      }

      // optional .Proto.UfbSchema ufb_schema = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ufb_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ufb_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring schemaID = 2;
  if (has_schemaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schemaid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // required double width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->width(), output);
  }

  // required double height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // required .Proto.SchemaUnit unit = 6;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->unit(), output);
  }

  // optional bool excludeFromBuild = 7 [default = false];
  if (has_excludefrombuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->excludefrombuild(), output);
  }

  // optional uint32 backgroundColor = 8;
  if (has_backgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->backgroundcolor(), output);
  }

  // optional string tags = 9;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->tags(), output);
  }

  // repeated .Proto.Envelope layers = 100;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layers(i), output);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (has_afbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->afbs(), output);
  }

  // optional .Proto.LogicSchema logic_schema = 200;
  if (has_logic_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->logic_schema(), output);
  }

  // optional .Proto.UfbSchema ufb_schema = 201;
  if (has_ufb_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->ufb_schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Schema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring schemaID = 2;
  if (has_schemaid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schemaid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // required double width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->width(), target);
  }

  // required double height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // required .Proto.SchemaUnit unit = 6;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->unit(), target);
  }

  // optional bool excludeFromBuild = 7 [default = false];
  if (has_excludefrombuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->excludefrombuild(), target);
  }

  // optional uint32 backgroundColor = 8;
  if (has_backgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->backgroundcolor(), target);
  }

  // optional string tags = 9;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tags(), target);
  }

  // repeated .Proto.Envelope layers = 100;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->layers(i), target);
  }

  // required .Proto.AfbElementCollection afbs = 101;
  if (has_afbs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->afbs(), target);
  }

  // optional .Proto.LogicSchema logic_schema = 200;
  if (has_logic_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->logic_schema(), target);
  }

  // optional .Proto.UfbSchema ufb_schema = 201;
  if (has_ufb_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->ufb_schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Schema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring schemaID = 2;
    if (has_schemaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schemaid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // required double width = 4;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required double height = 5;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required .Proto.SchemaUnit unit = 6;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

    // optional bool excludeFromBuild = 7 [default = false];
    if (has_excludefrombuild()) {
      total_size += 1 + 1;
    }

    // optional uint32 backgroundColor = 8;
    if (has_backgroundcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backgroundcolor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string tags = 9;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }

    // required .Proto.AfbElementCollection afbs = 101;
    if (has_afbs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbs());
    }

    // optional .Proto.LogicSchema logic_schema = 200;
    if (has_logic_schema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logic_schema());
    }

    // optional .Proto.UfbSchema ufb_schema = 201;
    if (has_ufb_schema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ufb_schema());
    }

  }
  // repeated .Proto.Envelope layers = 100;
  total_size += 2 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_schemaid()) {
      mutable_schemaid()->::Proto::wstring::MergeFrom(from.schemaid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_excludefrombuild()) {
      set_excludefrombuild(from.excludefrombuild());
    }
    if (from.has_backgroundcolor()) {
      set_backgroundcolor(from.backgroundcolor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tags()) {
      set_tags(from.tags());
    }
    if (from.has_afbs()) {
      mutable_afbs()->::Proto::AfbElementCollection::MergeFrom(from.afbs());
    }
    if (from.has_logic_schema()) {
      mutable_logic_schema()->::Proto::LogicSchema::MergeFrom(from.logic_schema());
    }
    if (from.has_ufb_schema()) {
      mutable_ufb_schema()->::Proto::UfbSchema::MergeFrom(from.ufb_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000043f) != 0x0000043f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_schemaid()) {
    if (!this->schemaid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  if (has_afbs()) {
    if (!this->afbs().IsInitialized()) return false;
  }
  if (has_logic_schema()) {
    if (!this->logic_schema().IsInitialized()) return false;
  }
  return true;
}

void Schema::Swap(Schema* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(schemaid_, other->schemaid_);
    std::swap(caption_, other->caption_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(unit_, other->unit_);
    std::swap(excludefrombuild_, other->excludefrombuild_);
    std::swap(backgroundcolor_, other->backgroundcolor_);
    std::swap(tags_, other->tags_);
    layers_.Swap(&other->layers_);
    std::swap(afbs_, other->afbs_);
    std::swap(logic_schema_, other->logic_schema_);
    std::swap(ufb_schema_, other->ufb_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schema_descriptor_;
  metadata.reflection = Schema_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LogicSchema::_default_lmdescriptionfile_ = NULL;
#ifndef _MSC_VER
const int LogicSchema::kEquipmentidsFieldNumber;
const int LogicSchema::kCounterFieldNumber;
const int LogicSchema::kLmDescriptionFileFieldNumber;
#endif  // !_MSC_VER

LogicSchema::LogicSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicSchema::InitAsDefaultInstance() {
}

LogicSchema::LogicSchema(const LogicSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicSchema::SharedCtor() {
  _cached_size_ = 0;
  counter_ = 0;
  lmdescriptionfile_ = const_cast< ::std::string*>(_default_lmdescriptionfile_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicSchema::~LogicSchema() {
  SharedDtor();
}

void LogicSchema::SharedDtor() {
  if (lmdescriptionfile_ != _default_lmdescriptionfile_) {
    delete lmdescriptionfile_;
  }
  if (this != default_instance_) {
  }
}

void LogicSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicSchema_descriptor_;
}

const LogicSchema& LogicSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

LogicSchema* LogicSchema::default_instance_ = NULL;

LogicSchema* LogicSchema::New() const {
  return new LogicSchema;
}

void LogicSchema::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    counter_ = 0;
    if (has_lmdescriptionfile()) {
      if (lmdescriptionfile_ != _default_lmdescriptionfile_) {
        lmdescriptionfile_->assign(*_default_lmdescriptionfile_);
      }
    }
  }
  equipmentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.wstring equipmentids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmentids;
        if (input->ExpectTag(16)) goto parse_counter;
        break;
      }

      // optional int32 counter = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lmDescriptionFile;
        break;
      }

      // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmDescriptionFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmdescriptionfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.wstring equipmentids = 1;
  for (int i = 0; i < this->equipmentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmentids(i), output);
  }

  // optional int32 counter = 2 [default = 0];
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counter(), output);
  }

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  if (has_lmdescriptionfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lmdescriptionfile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.wstring equipmentids = 1;
  for (int i = 0; i < this->equipmentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmentids(i), target);
  }

  // optional int32 counter = 2 [default = 0];
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counter(), target);
  }

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  if (has_lmdescriptionfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lmdescriptionfile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 counter = 2 [default = 0];
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter());
    }

    // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
    if (has_lmdescriptionfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmdescriptionfile());
    }

  }
  // repeated .Proto.wstring equipmentids = 1;
  total_size += 1 * this->equipmentids_size();
  for (int i = 0; i < this->equipmentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicSchema::MergeFrom(const LogicSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentids_.MergeFrom(from.equipmentids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_lmdescriptionfile()) {
      set_lmdescriptionfile(from.lmdescriptionfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicSchema::CopyFrom(const LogicSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicSchema::IsInitialized() const {

  for (int i = 0; i < equipmentids_size(); i++) {
    if (!this->equipmentids(i).IsInitialized()) return false;
  }
  return true;
}

void LogicSchema::Swap(LogicSchema* other) {
  if (other != this) {
    equipmentids_.Swap(&other->equipmentids_);
    std::swap(counter_, other->counter_);
    std::swap(lmdescriptionfile_, other->lmdescriptionfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicSchema_descriptor_;
  metadata.reflection = LogicSchema_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UfbSchema::_default_lmdescriptionfile_ = NULL;
#ifndef _MSC_VER
const int UfbSchema::kDescriptionFieldNumber;
const int UfbSchema::kVersionFieldNumber;
const int UfbSchema::kLmDescriptionFileFieldNumber;
#endif  // !_MSC_VER

UfbSchema::UfbSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UfbSchema::InitAsDefaultInstance() {
}

UfbSchema::UfbSchema(const UfbSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UfbSchema::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 1;
  lmdescriptionfile_ = const_cast< ::std::string*>(_default_lmdescriptionfile_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UfbSchema::~UfbSchema() {
  SharedDtor();
}

void UfbSchema::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (lmdescriptionfile_ != _default_lmdescriptionfile_) {
    delete lmdescriptionfile_;
  }
  if (this != default_instance_) {
  }
}

void UfbSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UfbSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UfbSchema_descriptor_;
}

const UfbSchema& UfbSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

UfbSchema* UfbSchema::default_instance_ = NULL;

UfbSchema* UfbSchema::New() const {
  return new UfbSchema;
}

void UfbSchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    version_ = 1;
    if (has_lmdescriptionfile()) {
      if (lmdescriptionfile_ != _default_lmdescriptionfile_) {
        lmdescriptionfile_->assign(*_default_lmdescriptionfile_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UfbSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lmDescriptionFile;
        break;
      }

      // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmDescriptionFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmdescriptionfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UfbSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->description(), output);
  }

  // optional int32 version = 2 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  if (has_lmdescriptionfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lmdescriptionfile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UfbSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // optional int32 version = 2 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
  if (has_lmdescriptionfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lmdescriptionfile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UfbSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 version = 2 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string lmDescriptionFile = 3 [default = "LogicModule0000.xml"];
    if (has_lmdescriptionfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmdescriptionfile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UfbSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UfbSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UfbSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UfbSchema::MergeFrom(const UfbSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_lmdescriptionfile()) {
      set_lmdescriptionfile(from.lmdescriptionfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UfbSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UfbSchema::CopyFrom(const UfbSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UfbSchema::IsInitialized() const {

  return true;
}

void UfbSchema::Swap(UfbSchema* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(version_, other->version_);
    std::swap(lmdescriptionfile_, other->lmdescriptionfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UfbSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UfbSchema_descriptor_;
  metadata.reflection = UfbSchema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaLayer::kUuidFieldNumber;
const int SchemaLayer::kNameFieldNumber;
const int SchemaLayer::kCompileFieldNumber;
const int SchemaLayer::kShowFieldNumber;
const int SchemaLayer::kPrintFieldNumber;
const int SchemaLayer::kItemsFieldNumber;
#endif  // !_MSC_VER

SchemaLayer::SchemaLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaLayer::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  name_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
}

SchemaLayer::SchemaLayer(const SchemaLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaLayer::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  name_ = NULL;
  compile_ = false;
  show_ = false;
  print_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaLayer::~SchemaLayer() {
  SharedDtor();
}

void SchemaLayer::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete name_;
  }
}

void SchemaLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaLayer_descriptor_;
}

const SchemaLayer& SchemaLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaLayer* SchemaLayer::default_instance_ = NULL;

SchemaLayer* SchemaLayer::New() const {
  return new SchemaLayer;
}

void SchemaLayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_name()) {
      if (name_ != NULL) name_->::Proto::wstring::Clear();
    }
    compile_ = false;
    show_ = false;
    print_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required .Proto.wstring name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compile;
        break;
      }

      // required bool compile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compile_)));
          set_has_compile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show;
        break;
      }

      // required bool show = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_print;
        break;
      }

      // required bool print = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_)));
          set_has_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        break;
      }

      // repeated .Proto.Envelope items = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name(), output);
  }

  // required bool compile = 3;
  if (has_compile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compile(), output);
  }

  // required bool show = 4;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show(), output);
  }

  // required bool print = 5;
  if (has_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->print(), output);
  }

  // repeated .Proto.Envelope items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name(), target);
  }

  // required bool compile = 3;
  if (has_compile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compile(), target);
  }

  // required bool show = 4;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show(), target);
  }

  // required bool print = 5;
  if (has_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->print(), target);
  }

  // repeated .Proto.Envelope items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

    // required bool compile = 3;
    if (has_compile()) {
      total_size += 1 + 1;
    }

    // required bool show = 4;
    if (has_show()) {
      total_size += 1 + 1;
    }

    // required bool print = 5;
    if (has_print()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Proto.Envelope items = 15;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaLayer::MergeFrom(const SchemaLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_name()) {
      mutable_name()->::Proto::wstring::MergeFrom(from.name());
    }
    if (from.has_compile()) {
      set_compile(from.compile());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_print()) {
      set_print(from.print());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaLayer::CopyFrom(const SchemaLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaLayer::Swap(SchemaLayer* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(name_, other->name_);
    std::swap(compile_, other->compile_);
    std::swap(show_, other->show_);
    std::swap(print_, other->print_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaLayer_descriptor_;
  metadata.reflection = SchemaLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItem::kUuidFieldNumber;
const int SchemaItem::kIsStaticFieldNumber;
const int SchemaItem::kIsLockedFieldNumber;
const int SchemaItem::kItemUnitFieldNumber;
const int SchemaItem::kAcceptClickFieldNumber;
const int SchemaItem::kClickScriptFieldNumber;
const int SchemaItem::kIsCommentedFieldNumber;
const int SchemaItem::kObjectNameFieldNumber;
const int SchemaItem::kPreDrawScriptFieldNumber;
const int SchemaItem::kPosRectImplFieldNumber;
const int SchemaItem::kPosLineImplFieldNumber;
const int SchemaItem::kPosConnectionImplFieldNumber;
const int SchemaItem::kFblItemFieldNumber;
const int SchemaItem::kFblItemRectFieldNumber;
const int SchemaItem::kFblItemLineFieldNumber;
const int SchemaItem::kRectFieldNumber;
const int SchemaItem::kLineFieldNumber;
const int SchemaItem::kPathFieldNumber;
const int SchemaItem::kImageFieldNumber;
const int SchemaItem::kSignalFieldNumber;
const int SchemaItem::kInputSignalFieldNumber;
const int SchemaItem::kOutputSignalFieldNumber;
const int SchemaItem::kLinkFieldNumber;
const int SchemaItem::kAfbFieldNumber;
const int SchemaItem::kConstItemFieldNumber;
const int SchemaItem::kConnectionItemFieldNumber;
const int SchemaItem::kTransmitterItemFieldNumber;
const int SchemaItem::kReceiverItemFieldNumber;
const int SchemaItem::kInOutSignalFieldNumber;
const int SchemaItem::kUfbFieldNumber;
const int SchemaItem::kTerminatorFieldNumber;
const int SchemaItem::kValueFieldNumber;
const int SchemaItem::kBusItemFieldNumber;
const int SchemaItem::kBusComposerFieldNumber;
const int SchemaItem::kBusExtractorFieldNumber;
const int SchemaItem::kLoopbackItemFieldNumber;
const int SchemaItem::kLoopbackSourceFieldNumber;
const int SchemaItem::kLoopbackTargetFieldNumber;
const int SchemaItem::kControlFieldNumber;
const int SchemaItem::kPushButtonFieldNumber;
const int SchemaItem::kLineEditFieldNumber;
#endif  // !_MSC_VER

SchemaItem::SchemaItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItem::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  posrectimpl_ = const_cast< ::Proto::PosRectImpl*>(&::Proto::PosRectImpl::default_instance());
  poslineimpl_ = const_cast< ::Proto::PosLineImpl*>(&::Proto::PosLineImpl::default_instance());
  posconnectionimpl_ = const_cast< ::Proto::PosConnectionImpl*>(&::Proto::PosConnectionImpl::default_instance());
  fblitem_ = const_cast< ::Proto::FblItem*>(&::Proto::FblItem::default_instance());
  fblitemrect_ = const_cast< ::Proto::FblItemRect*>(&::Proto::FblItemRect::default_instance());
  fblitemline_ = const_cast< ::Proto::FblItemLine*>(&::Proto::FblItemLine::default_instance());
  rect_ = const_cast< ::Proto::SchemaItemRect*>(&::Proto::SchemaItemRect::default_instance());
  line_ = const_cast< ::Proto::SchemaItemLine*>(&::Proto::SchemaItemLine::default_instance());
  path_ = const_cast< ::Proto::SchemaItemPath*>(&::Proto::SchemaItemPath::default_instance());
  image_ = const_cast< ::Proto::SchemaItemImage*>(&::Proto::SchemaItemImage::default_instance());
  signal_ = const_cast< ::Proto::SchemaItemSignal*>(&::Proto::SchemaItemSignal::default_instance());
  inputsignal_ = const_cast< ::Proto::SchemaItemInput*>(&::Proto::SchemaItemInput::default_instance());
  outputsignal_ = const_cast< ::Proto::SchemaItemOutput*>(&::Proto::SchemaItemOutput::default_instance());
  link_ = const_cast< ::Proto::SchemaItemLink*>(&::Proto::SchemaItemLink::default_instance());
  afb_ = const_cast< ::Proto::SchemaItemAfb*>(&::Proto::SchemaItemAfb::default_instance());
  constitem_ = const_cast< ::Proto::SchemaItemConst*>(&::Proto::SchemaItemConst::default_instance());
  connectionitem_ = const_cast< ::Proto::SchemaItemConnection*>(&::Proto::SchemaItemConnection::default_instance());
  transmitteritem_ = const_cast< ::Proto::SchemaItemTransmitter*>(&::Proto::SchemaItemTransmitter::default_instance());
  receiveritem_ = const_cast< ::Proto::SchemaItemReceiver*>(&::Proto::SchemaItemReceiver::default_instance());
  inoutsignal_ = const_cast< ::Proto::SchemaItemInOut*>(&::Proto::SchemaItemInOut::default_instance());
  ufb_ = const_cast< ::Proto::SchemaItemUfb*>(&::Proto::SchemaItemUfb::default_instance());
  terminator_ = const_cast< ::Proto::SchemaItemTerminator*>(&::Proto::SchemaItemTerminator::default_instance());
  value_ = const_cast< ::Proto::SchemaItemValue*>(&::Proto::SchemaItemValue::default_instance());
  busitem_ = const_cast< ::Proto::SchemaItemBus*>(&::Proto::SchemaItemBus::default_instance());
  buscomposer_ = const_cast< ::Proto::SchemaItemBusComposer*>(&::Proto::SchemaItemBusComposer::default_instance());
  busextractor_ = const_cast< ::Proto::SchemaItemBusExtractor*>(&::Proto::SchemaItemBusExtractor::default_instance());
  loopbackitem_ = const_cast< ::Proto::SchemaItemLoopback*>(&::Proto::SchemaItemLoopback::default_instance());
  loopbacksource_ = const_cast< ::Proto::SchemaItemLoopbackSource*>(&::Proto::SchemaItemLoopbackSource::default_instance());
  loopbacktarget_ = const_cast< ::Proto::SchemaItemLoopbackTarget*>(&::Proto::SchemaItemLoopbackTarget::default_instance());
  control_ = const_cast< ::Proto::SchemaItemControl*>(&::Proto::SchemaItemControl::default_instance());
  pushbutton_ = const_cast< ::Proto::SchemaItemPushButton*>(&::Proto::SchemaItemPushButton::default_instance());
  lineedit_ = const_cast< ::Proto::SchemaItemLineEdit*>(&::Proto::SchemaItemLineEdit::default_instance());
}

SchemaItem::SchemaItem(const SchemaItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItem::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  isstatic_ = false;
  islocked_ = false;
  itemunit_ = 0;
  acceptclick_ = false;
  clickscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscommented_ = false;
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  predrawscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posrectimpl_ = NULL;
  poslineimpl_ = NULL;
  posconnectionimpl_ = NULL;
  fblitem_ = NULL;
  fblitemrect_ = NULL;
  fblitemline_ = NULL;
  rect_ = NULL;
  line_ = NULL;
  path_ = NULL;
  image_ = NULL;
  signal_ = NULL;
  inputsignal_ = NULL;
  outputsignal_ = NULL;
  link_ = NULL;
  afb_ = NULL;
  constitem_ = NULL;
  connectionitem_ = NULL;
  transmitteritem_ = NULL;
  receiveritem_ = NULL;
  inoutsignal_ = NULL;
  ufb_ = NULL;
  terminator_ = NULL;
  value_ = NULL;
  busitem_ = NULL;
  buscomposer_ = NULL;
  busextractor_ = NULL;
  loopbackitem_ = NULL;
  loopbacksource_ = NULL;
  loopbacktarget_ = NULL;
  control_ = NULL;
  pushbutton_ = NULL;
  lineedit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItem::~SchemaItem() {
  SharedDtor();
}

void SchemaItem::SharedDtor() {
  if (clickscript_ != &::google::protobuf::internal::kEmptyString) {
    delete clickscript_;
  }
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete objectname_;
  }
  if (predrawscript_ != &::google::protobuf::internal::kEmptyString) {
    delete predrawscript_;
  }
  if (this != default_instance_) {
    delete uuid_;
    delete posrectimpl_;
    delete poslineimpl_;
    delete posconnectionimpl_;
    delete fblitem_;
    delete fblitemrect_;
    delete fblitemline_;
    delete rect_;
    delete line_;
    delete path_;
    delete image_;
    delete signal_;
    delete inputsignal_;
    delete outputsignal_;
    delete link_;
    delete afb_;
    delete constitem_;
    delete connectionitem_;
    delete transmitteritem_;
    delete receiveritem_;
    delete inoutsignal_;
    delete ufb_;
    delete terminator_;
    delete value_;
    delete busitem_;
    delete buscomposer_;
    delete busextractor_;
    delete loopbackitem_;
    delete loopbacksource_;
    delete loopbacktarget_;
    delete control_;
    delete pushbutton_;
    delete lineedit_;
  }
}

void SchemaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItem_descriptor_;
}

const SchemaItem& SchemaItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItem* SchemaItem::default_instance_ = NULL;

SchemaItem* SchemaItem::New() const {
  return new SchemaItem;
}

void SchemaItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    isstatic_ = false;
    islocked_ = false;
    itemunit_ = 0;
    acceptclick_ = false;
    if (has_clickscript()) {
      if (clickscript_ != &::google::protobuf::internal::kEmptyString) {
        clickscript_->clear();
      }
    }
    iscommented_ = false;
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::kEmptyString) {
        objectname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_predrawscript()) {
      if (predrawscript_ != &::google::protobuf::internal::kEmptyString) {
        predrawscript_->clear();
      }
    }
    if (has_posrectimpl()) {
      if (posrectimpl_ != NULL) posrectimpl_->::Proto::PosRectImpl::Clear();
    }
    if (has_poslineimpl()) {
      if (poslineimpl_ != NULL) poslineimpl_->::Proto::PosLineImpl::Clear();
    }
    if (has_posconnectionimpl()) {
      if (posconnectionimpl_ != NULL) posconnectionimpl_->::Proto::PosConnectionImpl::Clear();
    }
    if (has_fblitem()) {
      if (fblitem_ != NULL) fblitem_->::Proto::FblItem::Clear();
    }
    if (has_fblitemrect()) {
      if (fblitemrect_ != NULL) fblitemrect_->::Proto::FblItemRect::Clear();
    }
    if (has_fblitemline()) {
      if (fblitemline_ != NULL) fblitemline_->::Proto::FblItemLine::Clear();
    }
    if (has_rect()) {
      if (rect_ != NULL) rect_->::Proto::SchemaItemRect::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_line()) {
      if (line_ != NULL) line_->::Proto::SchemaItemLine::Clear();
    }
    if (has_path()) {
      if (path_ != NULL) path_->::Proto::SchemaItemPath::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::Proto::SchemaItemImage::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::Proto::SchemaItemSignal::Clear();
    }
    if (has_inputsignal()) {
      if (inputsignal_ != NULL) inputsignal_->::Proto::SchemaItemInput::Clear();
    }
    if (has_outputsignal()) {
      if (outputsignal_ != NULL) outputsignal_->::Proto::SchemaItemOutput::Clear();
    }
    if (has_link()) {
      if (link_ != NULL) link_->::Proto::SchemaItemLink::Clear();
    }
    if (has_afb()) {
      if (afb_ != NULL) afb_->::Proto::SchemaItemAfb::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_constitem()) {
      if (constitem_ != NULL) constitem_->::Proto::SchemaItemConst::Clear();
    }
    if (has_connectionitem()) {
      if (connectionitem_ != NULL) connectionitem_->::Proto::SchemaItemConnection::Clear();
    }
    if (has_transmitteritem()) {
      if (transmitteritem_ != NULL) transmitteritem_->::Proto::SchemaItemTransmitter::Clear();
    }
    if (has_receiveritem()) {
      if (receiveritem_ != NULL) receiveritem_->::Proto::SchemaItemReceiver::Clear();
    }
    if (has_inoutsignal()) {
      if (inoutsignal_ != NULL) inoutsignal_->::Proto::SchemaItemInOut::Clear();
    }
    if (has_ufb()) {
      if (ufb_ != NULL) ufb_->::Proto::SchemaItemUfb::Clear();
    }
    if (has_terminator()) {
      if (terminator_ != NULL) terminator_->::Proto::SchemaItemTerminator::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Proto::SchemaItemValue::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_busitem()) {
      if (busitem_ != NULL) busitem_->::Proto::SchemaItemBus::Clear();
    }
    if (has_buscomposer()) {
      if (buscomposer_ != NULL) buscomposer_->::Proto::SchemaItemBusComposer::Clear();
    }
    if (has_busextractor()) {
      if (busextractor_ != NULL) busextractor_->::Proto::SchemaItemBusExtractor::Clear();
    }
    if (has_loopbackitem()) {
      if (loopbackitem_ != NULL) loopbackitem_->::Proto::SchemaItemLoopback::Clear();
    }
    if (has_loopbacksource()) {
      if (loopbacksource_ != NULL) loopbacksource_->::Proto::SchemaItemLoopbackSource::Clear();
    }
    if (has_loopbacktarget()) {
      if (loopbacktarget_ != NULL) loopbacktarget_->::Proto::SchemaItemLoopbackTarget::Clear();
    }
    if (has_control()) {
      if (control_ != NULL) control_->::Proto::SchemaItemControl::Clear();
    }
    if (has_pushbutton()) {
      if (pushbutton_ != NULL) pushbutton_->::Proto::SchemaItemPushButton::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_lineedit()) {
      if (lineedit_ != NULL) lineedit_->::Proto::SchemaItemLineEdit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isStatic;
        break;
      }

      // required bool isStatic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstatic_)));
          set_has_isstatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isLocked;
        break;
      }

      // required bool isLocked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemUnit;
        break;
      }

      // required .Proto.SchemaUnit itemUnit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemUnit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::SchemaUnit_IsValid(value)) {
            set_itemunit(static_cast< ::Proto::SchemaUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_acceptClick;
        break;
      }

      // optional bool acceptClick = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptClick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceptclick_)));
          set_has_acceptclick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clickScript;
        break;
      }

      // optional string clickScript = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clickScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickscript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clickscript().data(), this->clickscript().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isCommented;
        break;
      }

      // optional bool isCommented = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCommented:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscommented_)));
          set_has_iscommented();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_objectName;
        break;
      }

      // optional string objectName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_PosRectImpl;
        break;
      }

      // optional .Proto.PosRectImpl PosRectImpl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosRectImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posrectimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PosLineImpl;
        break;
      }

      // optional .Proto.PosLineImpl PosLineImpl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosLineImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poslineimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_PosConnectionImpl;
        break;
      }

      // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosConnectionImpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posconnectionimpl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_preDrawScript;
        break;
      }

      // optional string preDrawScript = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preDrawScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predrawscript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predrawscript().data(), this->predrawscript().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_FblItem;
        break;
      }

      // optional .Proto.FblItem FblItem = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_FblItemRect;
        break;
      }

      // optional .Proto.FblItemRect FblItemRect = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItemRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitemrect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_FblItemLine;
        break;
      }

      // optional .Proto.FblItemLine FblItemLine = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FblItemLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fblitemline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(930)) goto parse_Rect;
        break;
      }

      // optional .Proto.SchemaItemRect Rect = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_Line;
        break;
      }

      // optional .Proto.SchemaItemLine Line = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(946)) goto parse_Path;
        break;
      }

      // optional .Proto.SchemaItemPath Path = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(954)) goto parse_Image;
        break;
      }

      // optional .Proto.SchemaItemImage Image = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(994)) goto parse_Signal;
        break;
      }

      // optional .Proto.SchemaItemSignal Signal = 124;
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1002)) goto parse_InputSignal;
        break;
      }

      // optional .Proto.SchemaItemInput InputSignal = 125;
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InputSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inputsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1010)) goto parse_OutputSignal;
        break;
      }

      // optional .Proto.SchemaItemOutput OutputSignal = 126;
      case 126: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OutputSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outputsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1018)) goto parse_Link;
        break;
      }

      // optional .Proto.SchemaItemLink Link = 127;
      case 127: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1026)) goto parse_Afb;
        break;
      }

      // optional .Proto.SchemaItemAfb Afb = 128;
      case 128: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Afb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_ConstItem;
        break;
      }

      // optional .Proto.SchemaItemConst ConstItem = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1042)) goto parse_ConnectionItem;
        break;
      }

      // optional .Proto.SchemaItemConnection ConnectionItem = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectionitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1050)) goto parse_TransmitterItem;
        break;
      }

      // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TransmitterItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transmitteritem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1058)) goto parse_ReceiverItem;
        break;
      }

      // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReceiverItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveritem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1066)) goto parse_InOutSignal;
        break;
      }

      // optional .Proto.SchemaItemInOut InOutSignal = 133;
      case 133: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InOutSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inoutsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1074)) goto parse_ufb;
        break;
      }

      // optional .Proto.SchemaItemUfb ufb = 134;
      case 134: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ufb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ufb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1082)) goto parse_terminator;
        break;
      }

      // optional .Proto.SchemaItemTerminator terminator = 135;
      case 135: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terminator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1090)) goto parse_Value;
        break;
      }

      // optional .Proto.SchemaItemValue Value = 136;
      case 136: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1202)) goto parse_BusItem;
        break;
      }

      // optional .Proto.SchemaItemBus BusItem = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_busitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1210)) goto parse_BusComposer;
        break;
      }

      // optional .Proto.SchemaItemBusComposer BusComposer = 151;
      case 151: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusComposer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buscomposer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1218)) goto parse_BusExtractor;
        break;
      }

      // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
      case 152: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusExtractor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_busextractor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1242)) goto parse_LoopbackItem;
        break;
      }

      // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
      case 155: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoopbackItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loopbackitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1250)) goto parse_loopbackSource;
        break;
      }

      // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
      case 156: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loopbackSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loopbacksource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1258)) goto parse_loopbackTarget;
        break;
      }

      // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
      case 157: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loopbackTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loopbacktarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_control;
        break;
      }

      // optional .Proto.SchemaItemControl control = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1682)) goto parse_pushButton;
        break;
      }

      // optional .Proto.SchemaItemPushButton pushButton = 210;
      case 210: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pushButton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushbutton()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1690)) goto parse_lineEdit;
        break;
      }

      // optional .Proto.SchemaItemLineEdit lineEdit = 211;
      case 211: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineEdit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineedit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required bool isStatic = 2;
  if (has_isstatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstatic(), output);
  }

  // required bool isLocked = 3;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islocked(), output);
  }

  // required .Proto.SchemaUnit itemUnit = 4;
  if (has_itemunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->itemunit(), output);
  }

  // optional bool acceptClick = 5 [default = false];
  if (has_acceptclick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->acceptclick(), output);
  }

  // optional string clickScript = 7;
  if (has_clickscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickscript().data(), this->clickscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->clickscript(), output);
  }

  // optional bool isCommented = 8 [default = false];
  if (has_iscommented()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscommented(), output);
  }

  // optional string objectName = 9;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->objectname(), output);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (has_posrectimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->posrectimpl(), output);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (has_poslineimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->poslineimpl(), output);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (has_posconnectionimpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->posconnectionimpl(), output);
  }

  // optional string preDrawScript = 30;
  if (has_predrawscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predrawscript().data(), this->predrawscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->predrawscript(), output);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (has_fblitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->fblitem(), output);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (has_fblitemrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->fblitemrect(), output);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (has_fblitemline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->fblitemline(), output);
  }

  // optional .Proto.SchemaItemRect Rect = 116;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->rect(), output);
  }

  // optional .Proto.SchemaItemLine Line = 117;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->line(), output);
  }

  // optional .Proto.SchemaItemPath Path = 118;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, this->path(), output);
  }

  // optional .Proto.SchemaItemImage Image = 119;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, this->image(), output);
  }

  // optional .Proto.SchemaItemSignal Signal = 124;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, this->signal(), output);
  }

  // optional .Proto.SchemaItemInput InputSignal = 125;
  if (has_inputsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, this->inputsignal(), output);
  }

  // optional .Proto.SchemaItemOutput OutputSignal = 126;
  if (has_outputsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, this->outputsignal(), output);
  }

  // optional .Proto.SchemaItemLink Link = 127;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, this->link(), output);
  }

  // optional .Proto.SchemaItemAfb Afb = 128;
  if (has_afb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, this->afb(), output);
  }

  // optional .Proto.SchemaItemConst ConstItem = 129;
  if (has_constitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, this->constitem(), output);
  }

  // optional .Proto.SchemaItemConnection ConnectionItem = 130;
  if (has_connectionitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, this->connectionitem(), output);
  }

  // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
  if (has_transmitteritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, this->transmitteritem(), output);
  }

  // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
  if (has_receiveritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, this->receiveritem(), output);
  }

  // optional .Proto.SchemaItemInOut InOutSignal = 133;
  if (has_inoutsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, this->inoutsignal(), output);
  }

  // optional .Proto.SchemaItemUfb ufb = 134;
  if (has_ufb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, this->ufb(), output);
  }

  // optional .Proto.SchemaItemTerminator terminator = 135;
  if (has_terminator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, this->terminator(), output);
  }

  // optional .Proto.SchemaItemValue Value = 136;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, this->value(), output);
  }

  // optional .Proto.SchemaItemBus BusItem = 150;
  if (has_busitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->busitem(), output);
  }

  // optional .Proto.SchemaItemBusComposer BusComposer = 151;
  if (has_buscomposer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      151, this->buscomposer(), output);
  }

  // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
  if (has_busextractor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      152, this->busextractor(), output);
  }

  // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
  if (has_loopbackitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      155, this->loopbackitem(), output);
  }

  // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
  if (has_loopbacksource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      156, this->loopbacksource(), output);
  }

  // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
  if (has_loopbacktarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      157, this->loopbacktarget(), output);
  }

  // optional .Proto.SchemaItemControl control = 200;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->control(), output);
  }

  // optional .Proto.SchemaItemPushButton pushButton = 210;
  if (has_pushbutton()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      210, this->pushbutton(), output);
  }

  // optional .Proto.SchemaItemLineEdit lineEdit = 211;
  if (has_lineedit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      211, this->lineedit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required bool isStatic = 2;
  if (has_isstatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstatic(), target);
  }

  // required bool isLocked = 3;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islocked(), target);
  }

  // required .Proto.SchemaUnit itemUnit = 4;
  if (has_itemunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->itemunit(), target);
  }

  // optional bool acceptClick = 5 [default = false];
  if (has_acceptclick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->acceptclick(), target);
  }

  // optional string clickScript = 7;
  if (has_clickscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickscript().data(), this->clickscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clickscript(), target);
  }

  // optional bool isCommented = 8 [default = false];
  if (has_iscommented()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscommented(), target);
  }

  // optional string objectName = 9;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->objectname(), target);
  }

  // optional .Proto.PosRectImpl PosRectImpl = 10;
  if (has_posrectimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->posrectimpl(), target);
  }

  // optional .Proto.PosLineImpl PosLineImpl = 11;
  if (has_poslineimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->poslineimpl(), target);
  }

  // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
  if (has_posconnectionimpl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->posconnectionimpl(), target);
  }

  // optional string preDrawScript = 30;
  if (has_predrawscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predrawscript().data(), this->predrawscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->predrawscript(), target);
  }

  // optional .Proto.FblItem FblItem = 106;
  if (has_fblitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->fblitem(), target);
  }

  // optional .Proto.FblItemRect FblItemRect = 107;
  if (has_fblitemrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->fblitemrect(), target);
  }

  // optional .Proto.FblItemLine FblItemLine = 108;
  if (has_fblitemline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->fblitemline(), target);
  }

  // optional .Proto.SchemaItemRect Rect = 116;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->rect(), target);
  }

  // optional .Proto.SchemaItemLine Line = 117;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->line(), target);
  }

  // optional .Proto.SchemaItemPath Path = 118;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->path(), target);
  }

  // optional .Proto.SchemaItemImage Image = 119;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, this->image(), target);
  }

  // optional .Proto.SchemaItemSignal Signal = 124;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, this->signal(), target);
  }

  // optional .Proto.SchemaItemInput InputSignal = 125;
  if (has_inputsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        125, this->inputsignal(), target);
  }

  // optional .Proto.SchemaItemOutput OutputSignal = 126;
  if (has_outputsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        126, this->outputsignal(), target);
  }

  // optional .Proto.SchemaItemLink Link = 127;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        127, this->link(), target);
  }

  // optional .Proto.SchemaItemAfb Afb = 128;
  if (has_afb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, this->afb(), target);
  }

  // optional .Proto.SchemaItemConst ConstItem = 129;
  if (has_constitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        129, this->constitem(), target);
  }

  // optional .Proto.SchemaItemConnection ConnectionItem = 130;
  if (has_connectionitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, this->connectionitem(), target);
  }

  // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
  if (has_transmitteritem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        131, this->transmitteritem(), target);
  }

  // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
  if (has_receiveritem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        132, this->receiveritem(), target);
  }

  // optional .Proto.SchemaItemInOut InOutSignal = 133;
  if (has_inoutsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        133, this->inoutsignal(), target);
  }

  // optional .Proto.SchemaItemUfb ufb = 134;
  if (has_ufb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        134, this->ufb(), target);
  }

  // optional .Proto.SchemaItemTerminator terminator = 135;
  if (has_terminator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        135, this->terminator(), target);
  }

  // optional .Proto.SchemaItemValue Value = 136;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        136, this->value(), target);
  }

  // optional .Proto.SchemaItemBus BusItem = 150;
  if (has_busitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->busitem(), target);
  }

  // optional .Proto.SchemaItemBusComposer BusComposer = 151;
  if (has_buscomposer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        151, this->buscomposer(), target);
  }

  // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
  if (has_busextractor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        152, this->busextractor(), target);
  }

  // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
  if (has_loopbackitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        155, this->loopbackitem(), target);
  }

  // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
  if (has_loopbacksource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        156, this->loopbacksource(), target);
  }

  // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
  if (has_loopbacktarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        157, this->loopbacktarget(), target);
  }

  // optional .Proto.SchemaItemControl control = 200;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->control(), target);
  }

  // optional .Proto.SchemaItemPushButton pushButton = 210;
  if (has_pushbutton()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        210, this->pushbutton(), target);
  }

  // optional .Proto.SchemaItemLineEdit lineEdit = 211;
  if (has_lineedit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        211, this->lineedit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required bool isStatic = 2;
    if (has_isstatic()) {
      total_size += 1 + 1;
    }

    // required bool isLocked = 3;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required .Proto.SchemaUnit itemUnit = 4;
    if (has_itemunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemunit());
    }

    // optional bool acceptClick = 5 [default = false];
    if (has_acceptclick()) {
      total_size += 1 + 1;
    }

    // optional string clickScript = 7;
    if (has_clickscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clickscript());
    }

    // optional bool isCommented = 8 [default = false];
    if (has_iscommented()) {
      total_size += 1 + 1;
    }

    // optional string objectName = 9;
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string preDrawScript = 30;
    if (has_predrawscript()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predrawscript());
    }

    // optional .Proto.PosRectImpl PosRectImpl = 10;
    if (has_posrectimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posrectimpl());
    }

    // optional .Proto.PosLineImpl PosLineImpl = 11;
    if (has_poslineimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poslineimpl());
    }

    // optional .Proto.PosConnectionImpl PosConnectionImpl = 12;
    if (has_posconnectionimpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posconnectionimpl());
    }

    // optional .Proto.FblItem FblItem = 106;
    if (has_fblitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitem());
    }

    // optional .Proto.FblItemRect FblItemRect = 107;
    if (has_fblitemrect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitemrect());
    }

    // optional .Proto.FblItemLine FblItemLine = 108;
    if (has_fblitemline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fblitemline());
    }

    // optional .Proto.SchemaItemRect Rect = 116;
    if (has_rect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Proto.SchemaItemLine Line = 117;
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional .Proto.SchemaItemPath Path = 118;
    if (has_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

    // optional .Proto.SchemaItemImage Image = 119;
    if (has_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .Proto.SchemaItemSignal Signal = 124;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .Proto.SchemaItemInput InputSignal = 125;
    if (has_inputsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputsignal());
    }

    // optional .Proto.SchemaItemOutput OutputSignal = 126;
    if (has_outputsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputsignal());
    }

    // optional .Proto.SchemaItemLink Link = 127;
    if (has_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link());
    }

    // optional .Proto.SchemaItemAfb Afb = 128;
    if (has_afb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afb());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Proto.SchemaItemConst ConstItem = 129;
    if (has_constitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constitem());
    }

    // optional .Proto.SchemaItemConnection ConnectionItem = 130;
    if (has_connectionitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectionitem());
    }

    // optional .Proto.SchemaItemTransmitter TransmitterItem = 131;
    if (has_transmitteritem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transmitteritem());
    }

    // optional .Proto.SchemaItemReceiver ReceiverItem = 132;
    if (has_receiveritem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveritem());
    }

    // optional .Proto.SchemaItemInOut InOutSignal = 133;
    if (has_inoutsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inoutsignal());
    }

    // optional .Proto.SchemaItemUfb ufb = 134;
    if (has_ufb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ufb());
    }

    // optional .Proto.SchemaItemTerminator terminator = 135;
    if (has_terminator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->terminator());
    }

    // optional .Proto.SchemaItemValue Value = 136;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .Proto.SchemaItemBus BusItem = 150;
    if (has_busitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->busitem());
    }

    // optional .Proto.SchemaItemBusComposer BusComposer = 151;
    if (has_buscomposer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buscomposer());
    }

    // optional .Proto.SchemaItemBusExtractor BusExtractor = 152;
    if (has_busextractor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->busextractor());
    }

    // optional .Proto.SchemaItemLoopback LoopbackItem = 155;
    if (has_loopbackitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loopbackitem());
    }

    // optional .Proto.SchemaItemLoopbackSource loopbackSource = 156;
    if (has_loopbacksource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loopbacksource());
    }

    // optional .Proto.SchemaItemLoopbackTarget loopbackTarget = 157;
    if (has_loopbacktarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loopbacktarget());
    }

    // optional .Proto.SchemaItemControl control = 200;
    if (has_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

    // optional .Proto.SchemaItemPushButton pushButton = 210;
    if (has_pushbutton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pushbutton());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .Proto.SchemaItemLineEdit lineEdit = 211;
    if (has_lineedit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineedit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItem::MergeFrom(const SchemaItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_isstatic()) {
      set_isstatic(from.isstatic());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_itemunit()) {
      set_itemunit(from.itemunit());
    }
    if (from.has_acceptclick()) {
      set_acceptclick(from.acceptclick());
    }
    if (from.has_clickscript()) {
      set_clickscript(from.clickscript());
    }
    if (from.has_iscommented()) {
      set_iscommented(from.iscommented());
    }
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_predrawscript()) {
      set_predrawscript(from.predrawscript());
    }
    if (from.has_posrectimpl()) {
      mutable_posrectimpl()->::Proto::PosRectImpl::MergeFrom(from.posrectimpl());
    }
    if (from.has_poslineimpl()) {
      mutable_poslineimpl()->::Proto::PosLineImpl::MergeFrom(from.poslineimpl());
    }
    if (from.has_posconnectionimpl()) {
      mutable_posconnectionimpl()->::Proto::PosConnectionImpl::MergeFrom(from.posconnectionimpl());
    }
    if (from.has_fblitem()) {
      mutable_fblitem()->::Proto::FblItem::MergeFrom(from.fblitem());
    }
    if (from.has_fblitemrect()) {
      mutable_fblitemrect()->::Proto::FblItemRect::MergeFrom(from.fblitemrect());
    }
    if (from.has_fblitemline()) {
      mutable_fblitemline()->::Proto::FblItemLine::MergeFrom(from.fblitemline());
    }
    if (from.has_rect()) {
      mutable_rect()->::Proto::SchemaItemRect::MergeFrom(from.rect());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_line()) {
      mutable_line()->::Proto::SchemaItemLine::MergeFrom(from.line());
    }
    if (from.has_path()) {
      mutable_path()->::Proto::SchemaItemPath::MergeFrom(from.path());
    }
    if (from.has_image()) {
      mutable_image()->::Proto::SchemaItemImage::MergeFrom(from.image());
    }
    if (from.has_signal()) {
      mutable_signal()->::Proto::SchemaItemSignal::MergeFrom(from.signal());
    }
    if (from.has_inputsignal()) {
      mutable_inputsignal()->::Proto::SchemaItemInput::MergeFrom(from.inputsignal());
    }
    if (from.has_outputsignal()) {
      mutable_outputsignal()->::Proto::SchemaItemOutput::MergeFrom(from.outputsignal());
    }
    if (from.has_link()) {
      mutable_link()->::Proto::SchemaItemLink::MergeFrom(from.link());
    }
    if (from.has_afb()) {
      mutable_afb()->::Proto::SchemaItemAfb::MergeFrom(from.afb());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_constitem()) {
      mutable_constitem()->::Proto::SchemaItemConst::MergeFrom(from.constitem());
    }
    if (from.has_connectionitem()) {
      mutable_connectionitem()->::Proto::SchemaItemConnection::MergeFrom(from.connectionitem());
    }
    if (from.has_transmitteritem()) {
      mutable_transmitteritem()->::Proto::SchemaItemTransmitter::MergeFrom(from.transmitteritem());
    }
    if (from.has_receiveritem()) {
      mutable_receiveritem()->::Proto::SchemaItemReceiver::MergeFrom(from.receiveritem());
    }
    if (from.has_inoutsignal()) {
      mutable_inoutsignal()->::Proto::SchemaItemInOut::MergeFrom(from.inoutsignal());
    }
    if (from.has_ufb()) {
      mutable_ufb()->::Proto::SchemaItemUfb::MergeFrom(from.ufb());
    }
    if (from.has_terminator()) {
      mutable_terminator()->::Proto::SchemaItemTerminator::MergeFrom(from.terminator());
    }
    if (from.has_value()) {
      mutable_value()->::Proto::SchemaItemValue::MergeFrom(from.value());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_busitem()) {
      mutable_busitem()->::Proto::SchemaItemBus::MergeFrom(from.busitem());
    }
    if (from.has_buscomposer()) {
      mutable_buscomposer()->::Proto::SchemaItemBusComposer::MergeFrom(from.buscomposer());
    }
    if (from.has_busextractor()) {
      mutable_busextractor()->::Proto::SchemaItemBusExtractor::MergeFrom(from.busextractor());
    }
    if (from.has_loopbackitem()) {
      mutable_loopbackitem()->::Proto::SchemaItemLoopback::MergeFrom(from.loopbackitem());
    }
    if (from.has_loopbacksource()) {
      mutable_loopbacksource()->::Proto::SchemaItemLoopbackSource::MergeFrom(from.loopbacksource());
    }
    if (from.has_loopbacktarget()) {
      mutable_loopbacktarget()->::Proto::SchemaItemLoopbackTarget::MergeFrom(from.loopbacktarget());
    }
    if (from.has_control()) {
      mutable_control()->::Proto::SchemaItemControl::MergeFrom(from.control());
    }
    if (from.has_pushbutton()) {
      mutable_pushbutton()->::Proto::SchemaItemPushButton::MergeFrom(from.pushbutton());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_lineedit()) {
      mutable_lineedit()->::Proto::SchemaItemLineEdit::MergeFrom(from.lineedit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItem::CopyFrom(const SchemaItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_posrectimpl()) {
    if (!this->posrectimpl().IsInitialized()) return false;
  }
  if (has_poslineimpl()) {
    if (!this->poslineimpl().IsInitialized()) return false;
  }
  if (has_posconnectionimpl()) {
    if (!this->posconnectionimpl().IsInitialized()) return false;
  }
  if (has_fblitem()) {
    if (!this->fblitem().IsInitialized()) return false;
  }
  if (has_fblitemrect()) {
    if (!this->fblitemrect().IsInitialized()) return false;
  }
  if (has_fblitemline()) {
    if (!this->fblitemline().IsInitialized()) return false;
  }
  if (has_rect()) {
    if (!this->rect().IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  if (has_signal()) {
    if (!this->signal().IsInitialized()) return false;
  }
  if (has_afb()) {
    if (!this->afb().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  if (has_busitem()) {
    if (!this->busitem().IsInitialized()) return false;
  }
  if (has_busextractor()) {
    if (!this->busextractor().IsInitialized()) return false;
  }
  return true;
}

void SchemaItem::Swap(SchemaItem* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(isstatic_, other->isstatic_);
    std::swap(islocked_, other->islocked_);
    std::swap(itemunit_, other->itemunit_);
    std::swap(acceptclick_, other->acceptclick_);
    std::swap(clickscript_, other->clickscript_);
    std::swap(iscommented_, other->iscommented_);
    std::swap(objectname_, other->objectname_);
    std::swap(predrawscript_, other->predrawscript_);
    std::swap(posrectimpl_, other->posrectimpl_);
    std::swap(poslineimpl_, other->poslineimpl_);
    std::swap(posconnectionimpl_, other->posconnectionimpl_);
    std::swap(fblitem_, other->fblitem_);
    std::swap(fblitemrect_, other->fblitemrect_);
    std::swap(fblitemline_, other->fblitemline_);
    std::swap(rect_, other->rect_);
    std::swap(line_, other->line_);
    std::swap(path_, other->path_);
    std::swap(image_, other->image_);
    std::swap(signal_, other->signal_);
    std::swap(inputsignal_, other->inputsignal_);
    std::swap(outputsignal_, other->outputsignal_);
    std::swap(link_, other->link_);
    std::swap(afb_, other->afb_);
    std::swap(constitem_, other->constitem_);
    std::swap(connectionitem_, other->connectionitem_);
    std::swap(transmitteritem_, other->transmitteritem_);
    std::swap(receiveritem_, other->receiveritem_);
    std::swap(inoutsignal_, other->inoutsignal_);
    std::swap(ufb_, other->ufb_);
    std::swap(terminator_, other->terminator_);
    std::swap(value_, other->value_);
    std::swap(busitem_, other->busitem_);
    std::swap(buscomposer_, other->buscomposer_);
    std::swap(busextractor_, other->busextractor_);
    std::swap(loopbackitem_, other->loopbackitem_);
    std::swap(loopbacksource_, other->loopbacksource_);
    std::swap(loopbacktarget_, other->loopbacktarget_);
    std::swap(control_, other->control_);
    std::swap(pushbutton_, other->pushbutton_);
    std::swap(lineedit_, other->lineedit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItem_descriptor_;
  metadata.reflection = SchemaItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosRectImpl::kLeftDocPtFieldNumber;
const int PosRectImpl::kTopDocPtFieldNumber;
const int PosRectImpl::kWidthDocPtFieldNumber;
const int PosRectImpl::kHeightDocPtFieldNumber;
#endif  // !_MSC_VER

PosRectImpl::PosRectImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosRectImpl::InitAsDefaultInstance() {
}

PosRectImpl::PosRectImpl(const PosRectImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosRectImpl::SharedCtor() {
  _cached_size_ = 0;
  leftdocpt_ = 0;
  topdocpt_ = 0;
  widthdocpt_ = 0;
  heightdocpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosRectImpl::~PosRectImpl() {
  SharedDtor();
}

void PosRectImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosRectImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosRectImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosRectImpl_descriptor_;
}

const PosRectImpl& PosRectImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosRectImpl* PosRectImpl::default_instance_ = NULL;

PosRectImpl* PosRectImpl::New() const {
  return new PosRectImpl;
}

void PosRectImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftdocpt_ = 0;
    topdocpt_ = 0;
    widthdocpt_ = 0;
    heightdocpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosRectImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double leftDocPt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftdocpt_)));
          set_has_leftdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_topDocPt;
        break;
      }

      // required double topDocPt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_topDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topdocpt_)));
          set_has_topdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_widthDocPt;
        break;
      }

      // required double widthDocPt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_widthDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthdocpt_)));
          set_has_widthdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_heightDocPt;
        break;
      }

      // required double heightDocPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heightDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heightdocpt_)));
          set_has_heightdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosRectImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double leftDocPt = 1;
  if (has_leftdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->leftdocpt(), output);
  }

  // required double topDocPt = 2;
  if (has_topdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->topdocpt(), output);
  }

  // required double widthDocPt = 3;
  if (has_widthdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->widthdocpt(), output);
  }

  // required double heightDocPt = 4;
  if (has_heightdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heightdocpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosRectImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double leftDocPt = 1;
  if (has_leftdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->leftdocpt(), target);
  }

  // required double topDocPt = 2;
  if (has_topdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->topdocpt(), target);
  }

  // required double widthDocPt = 3;
  if (has_widthdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->widthdocpt(), target);
  }

  // required double heightDocPt = 4;
  if (has_heightdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heightdocpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosRectImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double leftDocPt = 1;
    if (has_leftdocpt()) {
      total_size += 1 + 8;
    }

    // required double topDocPt = 2;
    if (has_topdocpt()) {
      total_size += 1 + 8;
    }

    // required double widthDocPt = 3;
    if (has_widthdocpt()) {
      total_size += 1 + 8;
    }

    // required double heightDocPt = 4;
    if (has_heightdocpt()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosRectImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosRectImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosRectImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosRectImpl::MergeFrom(const PosRectImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftdocpt()) {
      set_leftdocpt(from.leftdocpt());
    }
    if (from.has_topdocpt()) {
      set_topdocpt(from.topdocpt());
    }
    if (from.has_widthdocpt()) {
      set_widthdocpt(from.widthdocpt());
    }
    if (from.has_heightdocpt()) {
      set_heightdocpt(from.heightdocpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosRectImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosRectImpl::CopyFrom(const PosRectImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosRectImpl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PosRectImpl::Swap(PosRectImpl* other) {
  if (other != this) {
    std::swap(leftdocpt_, other->leftdocpt_);
    std::swap(topdocpt_, other->topdocpt_);
    std::swap(widthdocpt_, other->widthdocpt_);
    std::swap(heightdocpt_, other->heightdocpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosRectImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosRectImpl_descriptor_;
  metadata.reflection = PosRectImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosLineImpl::kStartXDocPtFieldNumber;
const int PosLineImpl::kStartYDocPtFieldNumber;
const int PosLineImpl::kEndXDocPtFieldNumber;
const int PosLineImpl::kEndYDocPtFieldNumber;
#endif  // !_MSC_VER

PosLineImpl::PosLineImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosLineImpl::InitAsDefaultInstance() {
}

PosLineImpl::PosLineImpl(const PosLineImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosLineImpl::SharedCtor() {
  _cached_size_ = 0;
  startxdocpt_ = 0;
  startydocpt_ = 0;
  endxdocpt_ = 0;
  endydocpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosLineImpl::~PosLineImpl() {
  SharedDtor();
}

void PosLineImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosLineImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosLineImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosLineImpl_descriptor_;
}

const PosLineImpl& PosLineImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosLineImpl* PosLineImpl::default_instance_ = NULL;

PosLineImpl* PosLineImpl::New() const {
  return new PosLineImpl;
}

void PosLineImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startxdocpt_ = 0;
    startydocpt_ = 0;
    endxdocpt_ = 0;
    endydocpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosLineImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double startXDocPt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startxdocpt_)));
          set_has_startxdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_startYDocPt;
        break;
      }

      // required double startYDocPt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startYDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startydocpt_)));
          set_has_startydocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_endXDocPt;
        break;
      }

      // required double endXDocPt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endXDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endxdocpt_)));
          set_has_endxdocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_endYDocPt;
        break;
      }

      // required double endYDocPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endYDocPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endydocpt_)));
          set_has_endydocpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosLineImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double startXDocPt = 1;
  if (has_startxdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->startxdocpt(), output);
  }

  // required double startYDocPt = 2;
  if (has_startydocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->startydocpt(), output);
  }

  // required double endXDocPt = 3;
  if (has_endxdocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->endxdocpt(), output);
  }

  // required double endYDocPt = 4;
  if (has_endydocpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->endydocpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosLineImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double startXDocPt = 1;
  if (has_startxdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->startxdocpt(), target);
  }

  // required double startYDocPt = 2;
  if (has_startydocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->startydocpt(), target);
  }

  // required double endXDocPt = 3;
  if (has_endxdocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->endxdocpt(), target);
  }

  // required double endYDocPt = 4;
  if (has_endydocpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->endydocpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosLineImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double startXDocPt = 1;
    if (has_startxdocpt()) {
      total_size += 1 + 8;
    }

    // required double startYDocPt = 2;
    if (has_startydocpt()) {
      total_size += 1 + 8;
    }

    // required double endXDocPt = 3;
    if (has_endxdocpt()) {
      total_size += 1 + 8;
    }

    // required double endYDocPt = 4;
    if (has_endydocpt()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosLineImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosLineImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosLineImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosLineImpl::MergeFrom(const PosLineImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startxdocpt()) {
      set_startxdocpt(from.startxdocpt());
    }
    if (from.has_startydocpt()) {
      set_startydocpt(from.startydocpt());
    }
    if (from.has_endxdocpt()) {
      set_endxdocpt(from.endxdocpt());
    }
    if (from.has_endydocpt()) {
      set_endydocpt(from.endydocpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosLineImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosLineImpl::CopyFrom(const PosLineImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosLineImpl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PosLineImpl::Swap(PosLineImpl* other) {
  if (other != this) {
    std::swap(startxdocpt_, other->startxdocpt_);
    std::swap(startydocpt_, other->startydocpt_);
    std::swap(endxdocpt_, other->endxdocpt_);
    std::swap(endydocpt_, other->endydocpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosLineImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosLineImpl_descriptor_;
  metadata.reflection = PosLineImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosConnectionImpl::kPointsFieldNumber;
#endif  // !_MSC_VER

PosConnectionImpl::PosConnectionImpl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosConnectionImpl::InitAsDefaultInstance() {
}

PosConnectionImpl::PosConnectionImpl(const PosConnectionImpl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosConnectionImpl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosConnectionImpl::~PosConnectionImpl() {
  SharedDtor();
}

void PosConnectionImpl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosConnectionImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosConnectionImpl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosConnectionImpl_descriptor_;
}

const PosConnectionImpl& PosConnectionImpl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

PosConnectionImpl* PosConnectionImpl::default_instance_ = NULL;

PosConnectionImpl* PosConnectionImpl::New() const {
  return new PosConnectionImpl;
}

void PosConnectionImpl::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosConnectionImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.SchemaPoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosConnectionImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.SchemaPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosConnectionImpl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.SchemaPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosConnectionImpl::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.SchemaPoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosConnectionImpl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosConnectionImpl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosConnectionImpl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosConnectionImpl::MergeFrom(const PosConnectionImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosConnectionImpl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosConnectionImpl::CopyFrom(const PosConnectionImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosConnectionImpl::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void PosConnectionImpl::Swap(PosConnectionImpl* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosConnectionImpl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosConnectionImpl_descriptor_;
  metadata.reflection = PosConnectionImpl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemRect::kWeightFieldNumber;
const int SchemaItemRect::kLineColorFieldNumber;
const int SchemaItemRect::kFillColorFieldNumber;
const int SchemaItemRect::kTextFieldNumber;
const int SchemaItemRect::kTextColorFieldNumber;
const int SchemaItemRect::kFontFieldNumber;
const int SchemaItemRect::kFillFieldNumber;
const int SchemaItemRect::kDrawrectFieldNumber;
const int SchemaItemRect::kHorzAlignFieldNumber;
const int SchemaItemRect::kVertAlignFieldNumber;
#endif  // !_MSC_VER

SchemaItemRect::SchemaItemRect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemRect::InitAsDefaultInstance() {
  text_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

SchemaItemRect::SchemaItemRect(const SchemaItemRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemRect::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  text_ = NULL;
  textcolor_ = 0u;
  font_ = NULL;
  fill_ = false;
  drawrect_ = true;
  horzalign_ = 4;
  vertalign_ = 128;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemRect::~SchemaItemRect() {
  SharedDtor();
}

void SchemaItemRect::SharedDtor() {
  if (this != default_instance_) {
    delete text_;
    delete font_;
  }
}

void SchemaItemRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemRect_descriptor_;
}

const SchemaItemRect& SchemaItemRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemRect* SchemaItemRect::default_instance_ = NULL;

SchemaItemRect* SchemaItemRect::New() const {
  return new SchemaItemRect;
}

void SchemaItemRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    if (has_text()) {
      if (text_ != NULL) text_->::Proto::wstring::Clear();
    }
    textcolor_ = 0u;
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
    fill_ = false;
    drawrect_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    horzalign_ = 4;
    vertalign_ = 128;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillColor;
        break;
      }

      // required uint32 fillColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // required .Proto.wstring text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_textColor;
        break;
      }

      // required uint32 textColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_font;
        break;
      }

      // required .Proto.FontParam font = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fill;
        break;
      }

      // required bool fill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_drawrect;
        break;
      }

      // optional bool drawrect = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawrect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawrect_)));
          set_has_drawrect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_horzAlign;
        break;
      }

      // optional int32 horzAlign = 9 [default = 4];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horzAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horzalign_)));
          set_has_horzalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vertAlign;
        break;
      }

      // optional int32 vertAlign = 10 [default = 128];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertalign_)));
          set_has_vertalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fillcolor(), output);
  }

  // required .Proto.wstring text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text(), output);
  }

  // required uint32 textColor = 5;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->textcolor(), output);
  }

  // required .Proto.FontParam font = 6;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->font(), output);
  }

  // required bool fill = 7;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fill(), output);
  }

  // optional bool drawrect = 8 [default = true];
  if (has_drawrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->drawrect(), output);
  }

  // optional int32 horzAlign = 9 [default = 4];
  if (has_horzalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->horzalign(), output);
  }

  // optional int32 vertAlign = 10 [default = 128];
  if (has_vertalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vertalign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fillcolor(), target);
  }

  // required .Proto.wstring text = 4;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text(), target);
  }

  // required uint32 textColor = 5;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->textcolor(), target);
  }

  // required .Proto.FontParam font = 6;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->font(), target);
  }

  // required bool fill = 7;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fill(), target);
  }

  // optional bool drawrect = 8 [default = true];
  if (has_drawrect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->drawrect(), target);
  }

  // optional int32 horzAlign = 9 [default = 4];
  if (has_horzalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->horzalign(), target);
  }

  // optional int32 vertAlign = 10 [default = 128];
  if (has_vertalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vertalign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // required uint32 fillColor = 3;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // required .Proto.wstring text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // required uint32 textColor = 5;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // required .Proto.FontParam font = 6;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

    // required bool fill = 7;
    if (has_fill()) {
      total_size += 1 + 1;
    }

    // optional bool drawrect = 8 [default = true];
    if (has_drawrect()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 horzAlign = 9 [default = 4];
    if (has_horzalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horzalign());
    }

    // optional int32 vertAlign = 10 [default = 128];
    if (has_vertalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertalign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemRect::MergeFrom(const SchemaItemRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_text()) {
      mutable_text()->::Proto::wstring::MergeFrom(from.text());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
    if (from.has_drawrect()) {
      set_drawrect(from.drawrect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_horzalign()) {
      set_horzalign(from.horzalign());
    }
    if (from.has_vertalign()) {
      set_vertalign(from.vertalign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemRect::CopyFrom(const SchemaItemRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void SchemaItemRect::Swap(SchemaItemRect* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(text_, other->text_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(font_, other->font_);
    std::swap(fill_, other->fill_);
    std::swap(drawrect_, other->drawrect_);
    std::swap(horzalign_, other->horzalign_);
    std::swap(vertalign_, other->vertalign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemRect_descriptor_;
  metadata.reflection = SchemaItemRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemLine::kWeightFieldNumber;
const int SchemaItemLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

SchemaItemLine::SchemaItemLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLine::InitAsDefaultInstance() {
}

SchemaItemLine::SchemaItemLine(const SchemaItemLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLine::~SchemaItemLine() {
  SharedDtor();
}

void SchemaItemLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLine_descriptor_;
}

const SchemaItemLine& SchemaItemLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLine* SchemaItemLine::default_instance_ = NULL;

SchemaItemLine* SchemaItemLine::New() const {
  return new SchemaItemLine;
}

void SchemaItemLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLine::MergeFrom(const SchemaItemLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLine::CopyFrom(const SchemaItemLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaItemLine::Swap(SchemaItemLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLine_descriptor_;
  metadata.reflection = SchemaItemLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemPath::kWeightFieldNumber;
const int SchemaItemPath::kLineColorFieldNumber;
#endif  // !_MSC_VER

SchemaItemPath::SchemaItemPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemPath::InitAsDefaultInstance() {
}

SchemaItemPath::SchemaItemPath(const SchemaItemPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemPath::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemPath::~SchemaItemPath() {
  SharedDtor();
}

void SchemaItemPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemPath_descriptor_;
}

const SchemaItemPath& SchemaItemPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemPath* SchemaItemPath::default_instance_ = NULL;

SchemaItemPath* SchemaItemPath::New() const {
  return new SchemaItemPath;
}

void SchemaItemPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemPath::MergeFrom(const SchemaItemPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemPath::CopyFrom(const SchemaItemPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaItemPath::Swap(SchemaItemPath* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemPath_descriptor_;
  metadata.reflection = SchemaItemPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemImage::kKeepAspectRatioFieldNumber;
const int SchemaItemImage::kImageDataFieldNumber;
const int SchemaItemImage::kSvgDataFieldNumber;
#endif  // !_MSC_VER

SchemaItemImage::SchemaItemImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemImage::InitAsDefaultInstance() {
}

SchemaItemImage::SchemaItemImage(const SchemaItemImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemImage::SharedCtor() {
  _cached_size_ = 0;
  keepaspectratio_ = true;
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemImage::~SchemaItemImage() {
  SharedDtor();
}

void SchemaItemImage::SharedDtor() {
  if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
    delete imagedata_;
  }
  if (svgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete svgdata_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemImage_descriptor_;
}

const SchemaItemImage& SchemaItemImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemImage* SchemaItemImage::default_instance_ = NULL;

SchemaItemImage* SchemaItemImage::New() const {
  return new SchemaItemImage;
}

void SchemaItemImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keepaspectratio_ = true;
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
        imagedata_->clear();
      }
    }
    if (has_svgdata()) {
      if (svgdata_ != &::google::protobuf::internal::kEmptyString) {
        svgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool keepAspectRatio = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepaspectratio_)));
          set_has_keepaspectratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imageData;
        break;
      }

      // optional bytes imageData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_svgData;
        break;
      }

      // optional string svgData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svgdata().data(), this->svgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool keepAspectRatio = 2 [default = true];
  if (has_keepaspectratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->keepaspectratio(), output);
  }

  // optional bytes imageData = 8;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->imagedata(), output);
  }

  // optional string svgData = 9;
  if (has_svgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svgdata().data(), this->svgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->svgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool keepAspectRatio = 2 [default = true];
  if (has_keepaspectratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->keepaspectratio(), target);
  }

  // optional bytes imageData = 8;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->imagedata(), target);
  }

  // optional string svgData = 9;
  if (has_svgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svgdata().data(), this->svgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->svgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool keepAspectRatio = 2 [default = true];
    if (has_keepaspectratio()) {
      total_size += 1 + 1;
    }

    // optional bytes imageData = 8;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // optional string svgData = 9;
    if (has_svgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemImage::MergeFrom(const SchemaItemImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keepaspectratio()) {
      set_keepaspectratio(from.keepaspectratio());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_svgdata()) {
      set_svgdata(from.svgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemImage::CopyFrom(const SchemaItemImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemImage::IsInitialized() const {

  return true;
}

void SchemaItemImage::Swap(SchemaItemImage* other) {
  if (other != this) {
    std::swap(keepaspectratio_, other->keepaspectratio_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(svgdata_, other->svgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemImage_descriptor_;
  metadata.reflection = SchemaItemImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblConnectionPoint::kPointFieldNumber;
const int FblConnectionPoint::kDirrectionFieldNumber;
const int FblConnectionPoint::kUuidFieldNumber;
const int FblConnectionPoint::kOperandIndexFieldNumber;
const int FblConnectionPoint::kCaptionFieldNumber;
const int FblConnectionPoint::kAssociatedIosFieldNumber;
const int FblConnectionPoint::kSignalTypeFieldNumber;
#endif  // !_MSC_VER

FblConnectionPoint::FblConnectionPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblConnectionPoint::InitAsDefaultInstance() {
  point_ = const_cast< ::Proto::SchemaPoint*>(&::Proto::SchemaPoint::default_instance());
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
}

FblConnectionPoint::FblConnectionPoint(const FblConnectionPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblConnectionPoint::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  dirrection_ = 0;
  uuid_ = NULL;
  operandindex_ = -1;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signaltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblConnectionPoint::~FblConnectionPoint() {
  SharedDtor();
}

void FblConnectionPoint::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (this != default_instance_) {
    delete point_;
    delete uuid_;
  }
}

void FblConnectionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblConnectionPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblConnectionPoint_descriptor_;
}

const FblConnectionPoint& FblConnectionPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblConnectionPoint* FblConnectionPoint::default_instance_ = NULL;

FblConnectionPoint* FblConnectionPoint::New() const {
  return new FblConnectionPoint;
}

void FblConnectionPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::Proto::SchemaPoint::Clear();
    }
    dirrection_ = 0;
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    operandindex_ = -1;
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    signaltype_ = 0;
  }
  associatedios_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblConnectionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.SchemaPoint point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dirrection;
        break;
      }

      // optional .Proto.ConnectionDirrection dirrection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirrection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::ConnectionDirrection_IsValid(value)) {
            set_dirrection(static_cast< ::Proto::ConnectionDirrection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional .Proto.Uuid uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operandIndex;
        break;
      }

      // optional int32 operandIndex = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operandIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operandindex_)));
          set_has_operandindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_caption;
        break;
      }

      // optional string caption = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_associatedIos;
        break;
      }

      // repeated .Proto.Uuid associatedIos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_associatedIos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_associatedios()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_associatedIos;
        if (input->ExpectTag(56)) goto parse_signalType;
        break;
      }

      // optional int32 signalType = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signaltype_)));
          set_has_signaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblConnectionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Proto.SchemaPoint point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  // optional .Proto.ConnectionDirrection dirrection = 2;
  if (has_dirrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dirrection(), output);
  }

  // optional .Proto.Uuid uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->uuid(), output);
  }

  // optional int32 operandIndex = 4 [default = -1];
  if (has_operandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operandindex(), output);
  }

  // optional string caption = 5 [default = ""];
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->caption(), output);
  }

  // repeated .Proto.Uuid associatedIos = 6;
  for (int i = 0; i < this->associatedios_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->associatedios(i), output);
  }

  // optional int32 signalType = 7 [default = 0];
  if (has_signaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->signaltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblConnectionPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Proto.SchemaPoint point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  // optional .Proto.ConnectionDirrection dirrection = 2;
  if (has_dirrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dirrection(), target);
  }

  // optional .Proto.Uuid uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->uuid(), target);
  }

  // optional int32 operandIndex = 4 [default = -1];
  if (has_operandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operandindex(), target);
  }

  // optional string caption = 5 [default = ""];
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->caption(), target);
  }

  // repeated .Proto.Uuid associatedIos = 6;
  for (int i = 0; i < this->associatedios_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->associatedios(i), target);
  }

  // optional int32 signalType = 7 [default = 0];
  if (has_signaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->signaltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblConnectionPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Proto.SchemaPoint point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // optional .Proto.ConnectionDirrection dirrection = 2;
    if (has_dirrection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dirrection());
    }

    // optional .Proto.Uuid uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // optional int32 operandIndex = 4 [default = -1];
    if (has_operandindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operandindex());
    }

    // optional string caption = 5 [default = ""];
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional int32 signalType = 7 [default = 0];
    if (has_signaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signaltype());
    }

  }
  // repeated .Proto.Uuid associatedIos = 6;
  total_size += 1 * this->associatedios_size();
  for (int i = 0; i < this->associatedios_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->associatedios(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblConnectionPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblConnectionPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblConnectionPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblConnectionPoint::MergeFrom(const FblConnectionPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  associatedios_.MergeFrom(from.associatedios_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::Proto::SchemaPoint::MergeFrom(from.point());
    }
    if (from.has_dirrection()) {
      set_dirrection(from.dirrection());
    }
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_operandindex()) {
      set_operandindex(from.operandindex());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_signaltype()) {
      set_signaltype(from.signaltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblConnectionPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblConnectionPoint::CopyFrom(const FblConnectionPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblConnectionPoint::IsInitialized() const {

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  for (int i = 0; i < associatedios_size(); i++) {
    if (!this->associatedios(i).IsInitialized()) return false;
  }
  return true;
}

void FblConnectionPoint::Swap(FblConnectionPoint* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(dirrection_, other->dirrection_);
    std::swap(uuid_, other->uuid_);
    std::swap(operandindex_, other->operandindex_);
    std::swap(caption_, other->caption_);
    associatedios_.Swap(&other->associatedios_);
    std::swap(signaltype_, other->signaltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblConnectionPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblConnectionPoint_descriptor_;
  metadata.reflection = FblConnectionPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItem::kPointsFieldNumber;
#endif  // !_MSC_VER

FblItem::FblItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItem::InitAsDefaultInstance() {
}

FblItem::FblItem(const FblItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItem::~FblItem() {
  SharedDtor();
}

void FblItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItem_descriptor_;
}

const FblItem& FblItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItem* FblItem::default_instance_ = NULL;

FblItem* FblItem::New() const {
  return new FblItem;
}

void FblItem::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.FblConnectionPoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.FblConnectionPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.FblConnectionPoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItem::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.FblConnectionPoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItem::MergeFrom(const FblItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItem::CopyFrom(const FblItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItem::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void FblItem::Swap(FblItem* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItem_descriptor_;
  metadata.reflection = FblItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItemRect::kWeightFieldNumber;
const int FblItemRect::kLineColorFieldNumber;
const int FblItemRect::kFillColorFieldNumber;
const int FblItemRect::kTextColorFieldNumber;
const int FblItemRect::kFontFieldNumber;
const int FblItemRect::kLabelFieldNumber;
const int FblItemRect::kUserTextFieldNumber;
const int FblItemRect::kUserTextPosFieldNumber;
const int FblItemRect::kLabelPosFieldNumber;
#endif  // !_MSC_VER

FblItemRect::FblItemRect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItemRect::InitAsDefaultInstance() {
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

FblItemRect::FblItemRect(const FblItemRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItemRect::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  textcolor_ = 0u;
  font_ = NULL;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertextpos_ = 1;
  labelpos_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItemRect::~FblItemRect() {
  SharedDtor();
}

void FblItemRect::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (usertext_ != &::google::protobuf::internal::kEmptyString) {
    delete usertext_;
  }
  if (this != default_instance_) {
    delete font_;
  }
}

void FblItemRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItemRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItemRect_descriptor_;
}

const FblItemRect& FblItemRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItemRect* FblItemRect::default_instance_ = NULL;

FblItemRect* FblItemRect::New() const {
  return new FblItemRect;
}

void FblItemRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    textcolor_ = 0u;
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_usertext()) {
      if (usertext_ != &::google::protobuf::internal::kEmptyString) {
        usertext_->clear();
      }
    }
    usertextpos_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    labelpos_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItemRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillColor;
        break;
      }

      // required uint32 fillColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_textColor;
        break;
      }

      // required uint32 textColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_font;
        break;
      }

      // required .Proto.FontParam font = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_label;
        break;
      }

      // optional string label = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_userText;
        break;
      }

      // optional string userText = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usertext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usertext().data(), this->usertext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_userTextPos;
        break;
      }

      // optional int32 userTextPos = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userTextPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertextpos_)));
          set_has_usertextpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_labelPos;
        break;
      }

      // optional int32 labelPos = 9 [default = 2];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labelPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labelpos_)));
          set_has_labelpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItemRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fillcolor(), output);
  }

  // required uint32 textColor = 4;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->textcolor(), output);
  }

  // required .Proto.FontParam font = 5;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->font(), output);
  }

  // optional string label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->label(), output);
  }

  // optional string userText = 7;
  if (has_usertext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usertext().data(), this->usertext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->usertext(), output);
  }

  // optional int32 userTextPos = 8 [default = 1];
  if (has_usertextpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->usertextpos(), output);
  }

  // optional int32 labelPos = 9 [default = 2];
  if (has_labelpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->labelpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItemRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  // required uint32 fillColor = 3;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fillcolor(), target);
  }

  // required uint32 textColor = 4;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->textcolor(), target);
  }

  // required .Proto.FontParam font = 5;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->font(), target);
  }

  // optional string label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->label(), target);
  }

  // optional string userText = 7;
  if (has_usertext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usertext().data(), this->usertext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->usertext(), target);
  }

  // optional int32 userTextPos = 8 [default = 1];
  if (has_usertextpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->usertextpos(), target);
  }

  // optional int32 labelPos = 9 [default = 2];
  if (has_labelpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->labelpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItemRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // required uint32 fillColor = 3;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // required uint32 textColor = 4;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // required .Proto.FontParam font = 5;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

    // optional string label = 6;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string userText = 7;
    if (has_usertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usertext());
    }

    // optional int32 userTextPos = 8 [default = 1];
    if (has_usertextpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertextpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 labelPos = 9 [default = 2];
    if (has_labelpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labelpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItemRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItemRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItemRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItemRect::MergeFrom(const FblItemRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_usertext()) {
      set_usertext(from.usertext());
    }
    if (from.has_usertextpos()) {
      set_usertextpos(from.usertextpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_labelpos()) {
      set_labelpos(from.labelpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItemRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemRect::CopyFrom(const FblItemRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void FblItemRect::Swap(FblItemRect* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(font_, other->font_);
    std::swap(label_, other->label_);
    std::swap(usertext_, other->usertext_);
    std::swap(usertextpos_, other->usertextpos_);
    std::swap(labelpos_, other->labelpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItemRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItemRect_descriptor_;
  metadata.reflection = FblItemRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FblItemLine::kWeightFieldNumber;
const int FblItemLine::kLineColorFieldNumber;
#endif  // !_MSC_VER

FblItemLine::FblItemLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FblItemLine::InitAsDefaultInstance() {
}

FblItemLine::FblItemLine(const FblItemLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FblItemLine::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  linecolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FblItemLine::~FblItemLine() {
  SharedDtor();
}

void FblItemLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FblItemLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FblItemLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FblItemLine_descriptor_;
}

const FblItemLine& FblItemLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

FblItemLine* FblItemLine::default_instance_ = NULL;

FblItemLine* FblItemLine::New() const {
  return new FblItemLine;
}

void FblItemLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    linecolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FblItemLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineColor;
        break;
      }

      // required uint32 lineColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FblItemLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight(), output);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linecolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FblItemLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight(), target);
  }

  // required uint32 lineColor = 2;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linecolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FblItemLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weight = 1;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required uint32 lineColor = 2;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FblItemLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FblItemLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FblItemLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FblItemLine::MergeFrom(const FblItemLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FblItemLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FblItemLine::CopyFrom(const FblItemLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FblItemLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FblItemLine::Swap(FblItemLine* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FblItemLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FblItemLine_descriptor_;
  metadata.reflection = FblItemLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemSignalColumn::kWidthFieldNumber;
const int SchemaItemSignalColumn::kDataFieldNumber;
const int SchemaItemSignalColumn::kHorzAlignFieldNumber;
#endif  // !_MSC_VER

SchemaItemSignalColumn::SchemaItemSignalColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemSignalColumn::InitAsDefaultInstance() {
}

SchemaItemSignalColumn::SchemaItemSignalColumn(const SchemaItemSignalColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemSignalColumn::SharedCtor() {
  _cached_size_ = 0;
  width_ = 20;
  data_ = 0;
  horzalign_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemSignalColumn::~SchemaItemSignalColumn() {
  SharedDtor();
}

void SchemaItemSignalColumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemSignalColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemSignalColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemSignalColumn_descriptor_;
}

const SchemaItemSignalColumn& SchemaItemSignalColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemSignalColumn* SchemaItemSignalColumn::default_instance_ = NULL;

SchemaItemSignalColumn* SchemaItemSignalColumn::New() const {
  return new SchemaItemSignalColumn;
}

void SchemaItemSignalColumn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 20;
    data_ = 0;
    horzalign_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemSignalColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double width = 1 [default = 20];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int32 data = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_horzAlign;
        break;
      }

      // optional int32 horzAlign = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horzAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horzalign_)));
          set_has_horzalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemSignalColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double width = 1 [default = 20];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // optional int32 data = 2 [default = 0];
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // optional int32 horzAlign = 3 [default = 1];
  if (has_horzalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->horzalign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemSignalColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double width = 1 [default = 20];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->width(), target);
  }

  // optional int32 data = 2 [default = 0];
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // optional int32 horzAlign = 3 [default = 1];
  if (has_horzalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->horzalign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemSignalColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double width = 1 [default = 20];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional int32 data = 2 [default = 0];
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 horzAlign = 3 [default = 1];
    if (has_horzalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horzalign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemSignalColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemSignalColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemSignalColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemSignalColumn::MergeFrom(const SchemaItemSignalColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_horzalign()) {
      set_horzalign(from.horzalign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemSignalColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemSignalColumn::CopyFrom(const SchemaItemSignalColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemSignalColumn::IsInitialized() const {

  return true;
}

void SchemaItemSignalColumn::Swap(SchemaItemSignalColumn* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(data_, other->data_);
    std::swap(horzalign_, other->horzalign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemSignalColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemSignalColumn_descriptor_;
  metadata.reflection = SchemaItemSignalColumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemSignal::kAppSignalIDsFieldNumber;
const int SchemaItemSignal::kPrecisionFieldNumber;
const int SchemaItemSignal::kAnalogFormatFieldNumber;
const int SchemaItemSignal::kColumnsFieldNumber;
const int SchemaItemSignal::kMultiLineFieldNumber;
#endif  // !_MSC_VER

SchemaItemSignal::SchemaItemSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemSignal::InitAsDefaultInstance() {
}

SchemaItemSignal::SchemaItemSignal(const SchemaItemSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemSignal::SharedCtor() {
  _cached_size_ = 0;
  precision_ = 2;
  analogformat_ = 102;
  multiline_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemSignal::~SchemaItemSignal() {
  SharedDtor();
}

void SchemaItemSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemSignal_descriptor_;
}

const SchemaItemSignal& SchemaItemSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemSignal* SchemaItemSignal::default_instance_ = NULL;

SchemaItemSignal* SchemaItemSignal::New() const {
  return new SchemaItemSignal;
}

void SchemaItemSignal::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    precision_ = 2;
    analogformat_ = 102;
    multiline_ = true;
  }
  appsignalids_.Clear();
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.wstring appSignalIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignalids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_appSignalIDs;
        if (input->ExpectTag(16)) goto parse_precision;
        break;
      }

      // optional int32 precision = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_analogFormat;
        break;
      }

      // optional int32 analogFormat = 3 [default = 102];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analogFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analogformat_)));
          set_has_analogformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_columns;
        break;
      }

      // repeated .Proto.SchemaItemSignalColumn columns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_columns;
        if (input->ExpectTag(40)) goto parse_multiLine;
        break;
      }

      // optional bool multiLine = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multiline_)));
          set_has_multiline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.wstring appSignalIDs = 1;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->appsignalids(i), output);
  }

  // optional int32 precision = 2 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  // optional int32 analogFormat = 3 [default = 102];
  if (has_analogformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->analogformat(), output);
  }

  // repeated .Proto.SchemaItemSignalColumn columns = 4;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->columns(i), output);
  }

  // optional bool multiLine = 5 [default = true];
  if (has_multiline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->multiline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.wstring appSignalIDs = 1;
  for (int i = 0; i < this->appsignalids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->appsignalids(i), target);
  }

  // optional int32 precision = 2 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  // optional int32 analogFormat = 3 [default = 102];
  if (has_analogformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->analogformat(), target);
  }

  // repeated .Proto.SchemaItemSignalColumn columns = 4;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->columns(i), target);
  }

  // optional bool multiLine = 5 [default = true];
  if (has_multiline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->multiline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 precision = 2 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 analogFormat = 3 [default = 102];
    if (has_analogformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analogformat());
    }

    // optional bool multiLine = 5 [default = true];
    if (has_multiline()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Proto.wstring appSignalIDs = 1;
  total_size += 1 * this->appsignalids_size();
  for (int i = 0; i < this->appsignalids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignalids(i));
  }

  // repeated .Proto.SchemaItemSignalColumn columns = 4;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemSignal::MergeFrom(const SchemaItemSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignalids_.MergeFrom(from.appsignalids_);
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_analogformat()) {
      set_analogformat(from.analogformat());
    }
    if (from.has_multiline()) {
      set_multiline(from.multiline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemSignal::CopyFrom(const SchemaItemSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemSignal::IsInitialized() const {

  for (int i = 0; i < appsignalids_size(); i++) {
    if (!this->appsignalids(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaItemSignal::Swap(SchemaItemSignal* other) {
  if (other != this) {
    appsignalids_.Swap(&other->appsignalids_);
    std::swap(precision_, other->precision_);
    std::swap(analogformat_, other->analogformat_);
    columns_.Swap(&other->columns_);
    std::swap(multiline_, other->multiline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemSignal_descriptor_;
  metadata.reflection = SchemaItemSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemInput::SchemaItemInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemInput::InitAsDefaultInstance() {
}

SchemaItemInput::SchemaItemInput(const SchemaItemInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemInput::~SchemaItemInput() {
  SharedDtor();
}

void SchemaItemInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemInput_descriptor_;
}

const SchemaItemInput& SchemaItemInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemInput* SchemaItemInput::default_instance_ = NULL;

SchemaItemInput* SchemaItemInput::New() const {
  return new SchemaItemInput;
}

void SchemaItemInput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemInput::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemInput::MergeFrom(const SchemaItemInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemInput::CopyFrom(const SchemaItemInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemInput::IsInitialized() const {

  return true;
}

void SchemaItemInput::Swap(SchemaItemInput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemInput_descriptor_;
  metadata.reflection = SchemaItemInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemOutput::SchemaItemOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemOutput::InitAsDefaultInstance() {
}

SchemaItemOutput::SchemaItemOutput(const SchemaItemOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemOutput::~SchemaItemOutput() {
  SharedDtor();
}

void SchemaItemOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemOutput_descriptor_;
}

const SchemaItemOutput& SchemaItemOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemOutput* SchemaItemOutput::default_instance_ = NULL;

SchemaItemOutput* SchemaItemOutput::New() const {
  return new SchemaItemOutput;
}

void SchemaItemOutput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemOutput::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemOutput::MergeFrom(const SchemaItemOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemOutput::CopyFrom(const SchemaItemOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemOutput::IsInitialized() const {

  return true;
}

void SchemaItemOutput::Swap(SchemaItemOutput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemOutput_descriptor_;
  metadata.reflection = SchemaItemOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemInOut::SchemaItemInOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemInOut::InitAsDefaultInstance() {
}

SchemaItemInOut::SchemaItemInOut(const SchemaItemInOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemInOut::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemInOut::~SchemaItemInOut() {
  SharedDtor();
}

void SchemaItemInOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemInOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemInOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemInOut_descriptor_;
}

const SchemaItemInOut& SchemaItemInOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemInOut* SchemaItemInOut::default_instance_ = NULL;

SchemaItemInOut* SchemaItemInOut::New() const {
  return new SchemaItemInOut;
}

void SchemaItemInOut::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemInOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemInOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemInOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemInOut::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemInOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemInOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemInOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemInOut::MergeFrom(const SchemaItemInOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemInOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemInOut::CopyFrom(const SchemaItemInOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemInOut::IsInitialized() const {

  return true;
}

void SchemaItemInOut::Swap(SchemaItemInOut* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemInOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemInOut_descriptor_;
  metadata.reflection = SchemaItemInOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemLink::SchemaItemLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLink::InitAsDefaultInstance() {
}

SchemaItemLink::SchemaItemLink(const SchemaItemLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLink::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLink::~SchemaItemLink() {
  SharedDtor();
}

void SchemaItemLink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLink_descriptor_;
}

const SchemaItemLink& SchemaItemLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLink* SchemaItemLink::default_instance_ = NULL;

SchemaItemLink* SchemaItemLink::New() const {
  return new SchemaItemLink;
}

void SchemaItemLink::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLink::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLink::MergeFrom(const SchemaItemLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLink::CopyFrom(const SchemaItemLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLink::IsInitialized() const {

  return true;
}

void SchemaItemLink::Swap(SchemaItemLink* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLink_descriptor_;
  metadata.reflection = SchemaItemLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemAfb::kParamsFieldNumber;
const int SchemaItemAfb::kAfbStridFieldNumber;
const int SchemaItemAfb::kPrecisionFieldNumber;
const int SchemaItemAfb::kDeprecatedAfbelementFieldNumber;
const int SchemaItemAfb::kDeprecatedLabelFieldNumber;
const int SchemaItemAfb::kAfbelementFieldNumber;
#endif  // !_MSC_VER

SchemaItemAfb::SchemaItemAfb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemAfb::InitAsDefaultInstance() {
  afbstrid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  deprecated_afbelement_ = const_cast< ::Proto::AfbElementXml*>(&::Proto::AfbElementXml::default_instance());
  afbelement_ = const_cast< ::Proto::AfbElementXml*>(&::Proto::AfbElementXml::default_instance());
}

SchemaItemAfb::SchemaItemAfb(const SchemaItemAfb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemAfb::SharedCtor() {
  _cached_size_ = 0;
  afbstrid_ = NULL;
  precision_ = 2;
  deprecated_afbelement_ = NULL;
  deprecated_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  afbelement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemAfb::~SchemaItemAfb() {
  SharedDtor();
}

void SchemaItemAfb::SharedDtor() {
  if (deprecated_label_ != &::google::protobuf::internal::kEmptyString) {
    delete deprecated_label_;
  }
  if (this != default_instance_) {
    delete afbstrid_;
    delete deprecated_afbelement_;
    delete afbelement_;
  }
}

void SchemaItemAfb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemAfb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemAfb_descriptor_;
}

const SchemaItemAfb& SchemaItemAfb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemAfb* SchemaItemAfb::default_instance_ = NULL;

SchemaItemAfb* SchemaItemAfb::New() const {
  return new SchemaItemAfb;
}

void SchemaItemAfb::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_afbstrid()) {
      if (afbstrid_ != NULL) afbstrid_->::Proto::wstring::Clear();
    }
    precision_ = 2;
    if (has_deprecated_afbelement()) {
      if (deprecated_afbelement_ != NULL) deprecated_afbelement_->::Proto::AfbElementXml::Clear();
    }
    if (has_deprecated_label()) {
      if (deprecated_label_ != &::google::protobuf::internal::kEmptyString) {
        deprecated_label_->clear();
      }
    }
    if (has_afbelement()) {
      if (afbelement_ != NULL) afbelement_->::Proto::AfbElementXml::Clear();
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemAfb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AfbParam params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectTag(26)) goto parse_afbStrid;
        break;
      }

      // optional .Proto.wstring afbStrid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afbStrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbstrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_precision;
        break;
      }

      // optional int32 precision = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deprecated_afbelement;
        break;
      }

      // optional .Proto.AfbElementXml deprecated_afbelement = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_afbelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_afbelement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deprecated_label;
        break;
      }

      // optional string deprecated_label = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deprecated_label().data(), this->deprecated_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_afbelement;
        break;
      }

      // optional .Proto.AfbElementXml afbelement = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afbelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afbelement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemAfb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.AfbParam params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->params(i), output);
  }

  // optional .Proto.wstring afbStrid = 3;
  if (has_afbstrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->afbstrid(), output);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->precision(), output);
  }

  // optional .Proto.AfbElementXml deprecated_afbelement = 5;
  if (has_deprecated_afbelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deprecated_afbelement(), output);
  }

  // optional string deprecated_label = 6;
  if (has_deprecated_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deprecated_label().data(), this->deprecated_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deprecated_label(), output);
  }

  // optional .Proto.AfbElementXml afbelement = 7;
  if (has_afbelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->afbelement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemAfb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.AfbParam params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->params(i), target);
  }

  // optional .Proto.wstring afbStrid = 3;
  if (has_afbstrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->afbstrid(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->precision(), target);
  }

  // optional .Proto.AfbElementXml deprecated_afbelement = 5;
  if (has_deprecated_afbelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deprecated_afbelement(), target);
  }

  // optional string deprecated_label = 6;
  if (has_deprecated_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deprecated_label().data(), this->deprecated_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deprecated_label(), target);
  }

  // optional .Proto.AfbElementXml afbelement = 7;
  if (has_afbelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->afbelement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemAfb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Proto.wstring afbStrid = 3;
    if (has_afbstrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbstrid());
    }

    // optional int32 precision = 4 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional .Proto.AfbElementXml deprecated_afbelement = 5;
    if (has_deprecated_afbelement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_afbelement());
    }

    // optional string deprecated_label = 6;
    if (has_deprecated_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_label());
    }

    // optional .Proto.AfbElementXml afbelement = 7;
    if (has_afbelement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afbelement());
    }

  }
  // repeated .Proto.AfbParam params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemAfb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemAfb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemAfb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemAfb::MergeFrom(const SchemaItemAfb& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_afbstrid()) {
      mutable_afbstrid()->::Proto::wstring::MergeFrom(from.afbstrid());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_deprecated_afbelement()) {
      mutable_deprecated_afbelement()->::Proto::AfbElementXml::MergeFrom(from.deprecated_afbelement());
    }
    if (from.has_deprecated_label()) {
      set_deprecated_label(from.deprecated_label());
    }
    if (from.has_afbelement()) {
      mutable_afbelement()->::Proto::AfbElementXml::MergeFrom(from.afbelement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemAfb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemAfb::CopyFrom(const SchemaItemAfb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemAfb::IsInitialized() const {

  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  if (has_afbstrid()) {
    if (!this->afbstrid().IsInitialized()) return false;
  }
  if (has_deprecated_afbelement()) {
    if (!this->deprecated_afbelement().IsInitialized()) return false;
  }
  if (has_afbelement()) {
    if (!this->afbelement().IsInitialized()) return false;
  }
  return true;
}

void SchemaItemAfb::Swap(SchemaItemAfb* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(afbstrid_, other->afbstrid_);
    std::swap(precision_, other->precision_);
    std::swap(deprecated_afbelement_, other->deprecated_afbelement_);
    std::swap(deprecated_label_, other->deprecated_label_);
    std::swap(afbelement_, other->afbelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemAfb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemAfb_descriptor_;
  metadata.reflection = SchemaItemAfb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemConst::kTypeFieldNumber;
const int SchemaItemConst::kIntValueFieldNumber;
const int SchemaItemConst::kFloatValueFieldNumber;
const int SchemaItemConst::kDiscreteValueFieldNumber;
const int SchemaItemConst::kPrecisionFieldNumber;
const int SchemaItemConst::kHorzAlignFieldNumber;
const int SchemaItemConst::kVertAlignFieldNumber;
#endif  // !_MSC_VER

SchemaItemConst::SchemaItemConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemConst::InitAsDefaultInstance() {
}

SchemaItemConst::SchemaItemConst(const SchemaItemConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemConst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  intvalue_ = 0;
  floatvalue_ = 0;
  discretevalue_ = 0;
  precision_ = 2;
  horzalign_ = 4;
  vertalign_ = 128;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemConst::~SchemaItemConst() {
  SharedDtor();
}

void SchemaItemConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemConst_descriptor_;
}

const SchemaItemConst& SchemaItemConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemConst* SchemaItemConst::default_instance_ = NULL;

SchemaItemConst* SchemaItemConst::New() const {
  return new SchemaItemConst;
}

void SchemaItemConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    intvalue_ = 0;
    floatvalue_ = 0;
    discretevalue_ = 0;
    precision_ = 2;
    horzalign_ = 4;
    vertalign_ = 128;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intValue;
        break;
      }

      // optional int32 intValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_floatValue;
        break;
      }

      // optional double floatValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_floatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &floatvalue_)));
          set_has_floatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_precision;
        break;
      }

      // optional int32 precision = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_horzAlign;
        break;
      }

      // optional int32 horzAlign = 5 [default = 4];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horzAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horzalign_)));
          set_has_horzalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vertAlign;
        break;
      }

      // optional int32 vertAlign = 6 [default = 128];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertalign_)));
          set_has_vertalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_discreteValue;
        break;
      }

      // optional int32 discreteValue = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discreteValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discretevalue_)));
          set_has_discretevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intvalue(), output);
  }

  // optional double floatValue = 3 [default = 0];
  if (has_floatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->floatvalue(), output);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->precision(), output);
  }

  // optional int32 horzAlign = 5 [default = 4];
  if (has_horzalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->horzalign(), output);
  }

  // optional int32 vertAlign = 6 [default = 128];
  if (has_vertalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vertalign(), output);
  }

  // optional int32 discreteValue = 7 [default = 0];
  if (has_discretevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->discretevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 intValue = 2 [default = 0];
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intvalue(), target);
  }

  // optional double floatValue = 3 [default = 0];
  if (has_floatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->floatvalue(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->precision(), target);
  }

  // optional int32 horzAlign = 5 [default = 4];
  if (has_horzalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->horzalign(), target);
  }

  // optional int32 vertAlign = 6 [default = 128];
  if (has_vertalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vertalign(), target);
  }

  // optional int32 discreteValue = 7 [default = 0];
  if (has_discretevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->discretevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 intValue = 2 [default = 0];
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intvalue());
    }

    // optional double floatValue = 3 [default = 0];
    if (has_floatvalue()) {
      total_size += 1 + 8;
    }

    // optional int32 discreteValue = 7 [default = 0];
    if (has_discretevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discretevalue());
    }

    // optional int32 precision = 4 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 horzAlign = 5 [default = 4];
    if (has_horzalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horzalign());
    }

    // optional int32 vertAlign = 6 [default = 128];
    if (has_vertalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertalign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemConst::MergeFrom(const SchemaItemConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_floatvalue()) {
      set_floatvalue(from.floatvalue());
    }
    if (from.has_discretevalue()) {
      set_discretevalue(from.discretevalue());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_horzalign()) {
      set_horzalign(from.horzalign());
    }
    if (from.has_vertalign()) {
      set_vertalign(from.vertalign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemConst::CopyFrom(const SchemaItemConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemConst::IsInitialized() const {

  return true;
}

void SchemaItemConst::Swap(SchemaItemConst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(floatvalue_, other->floatvalue_);
    std::swap(discretevalue_, other->discretevalue_);
    std::swap(precision_, other->precision_);
    std::swap(horzalign_, other->horzalign_);
    std::swap(vertalign_, other->vertalign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemConst_descriptor_;
  metadata.reflection = SchemaItemConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemConnection::kConnectionidFieldNumber;
#endif  // !_MSC_VER

SchemaItemConnection::SchemaItemConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemConnection::InitAsDefaultInstance() {
}

SchemaItemConnection::SchemaItemConnection(const SchemaItemConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemConnection::SharedCtor() {
  _cached_size_ = 0;
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemConnection::~SchemaItemConnection() {
  SharedDtor();
}

void SchemaItemConnection::SharedDtor() {
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemConnection_descriptor_;
}

const SchemaItemConnection& SchemaItemConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemConnection* SchemaItemConnection::default_instance_ = NULL;

SchemaItemConnection* SchemaItemConnection::New() const {
  return new SchemaItemConnection;
}

void SchemaItemConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string connectionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string connectionid = 1;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string connectionid = 1;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string connectionid = 1;
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemConnection::MergeFrom(const SchemaItemConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemConnection::CopyFrom(const SchemaItemConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemConnection::IsInitialized() const {

  return true;
}

void SchemaItemConnection::Swap(SchemaItemConnection* other) {
  if (other != this) {
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemConnection_descriptor_;
  metadata.reflection = SchemaItemConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemTransmitter::kPinCountFieldNumber;
#endif  // !_MSC_VER

SchemaItemTransmitter::SchemaItemTransmitter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemTransmitter::InitAsDefaultInstance() {
}

SchemaItemTransmitter::SchemaItemTransmitter(const SchemaItemTransmitter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemTransmitter::SharedCtor() {
  _cached_size_ = 0;
  pincount_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemTransmitter::~SchemaItemTransmitter() {
  SharedDtor();
}

void SchemaItemTransmitter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemTransmitter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemTransmitter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemTransmitter_descriptor_;
}

const SchemaItemTransmitter& SchemaItemTransmitter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemTransmitter* SchemaItemTransmitter::default_instance_ = NULL;

SchemaItemTransmitter* SchemaItemTransmitter::New() const {
  return new SchemaItemTransmitter;
}

void SchemaItemTransmitter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pincount_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemTransmitter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pinCount = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pincount_)));
          set_has_pincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemTransmitter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pinCount = 1 [default = 1];
  if (has_pincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pincount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemTransmitter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pinCount = 1 [default = 1];
  if (has_pincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pincount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemTransmitter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pinCount = 1 [default = 1];
    if (has_pincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pincount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemTransmitter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemTransmitter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemTransmitter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemTransmitter::MergeFrom(const SchemaItemTransmitter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pincount()) {
      set_pincount(from.pincount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemTransmitter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemTransmitter::CopyFrom(const SchemaItemTransmitter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemTransmitter::IsInitialized() const {

  return true;
}

void SchemaItemTransmitter::Swap(SchemaItemTransmitter* other) {
  if (other != this) {
    std::swap(pincount_, other->pincount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemTransmitter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemTransmitter_descriptor_;
  metadata.reflection = SchemaItemTransmitter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemReceiver::kShowValidityFieldNumber;
const int SchemaItemReceiver::kAppSignalIdFieldNumber;
const int SchemaItemReceiver::kDataTypeFieldNumber;
const int SchemaItemReceiver::kPrecisionFieldNumber;
const int SchemaItemReceiver::kAnalogFormatFieldNumber;
#endif  // !_MSC_VER

SchemaItemReceiver::SchemaItemReceiver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemReceiver::InitAsDefaultInstance() {
}

SchemaItemReceiver::SchemaItemReceiver(const SchemaItemReceiver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemReceiver::SharedCtor() {
  _cached_size_ = 0;
  showvalidity_ = true;
  appsignalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datatype_ = 0;
  precision_ = 2;
  analogformat_ = 102;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemReceiver::~SchemaItemReceiver() {
  SharedDtor();
}

void SchemaItemReceiver::SharedDtor() {
  if (appsignalid_ != &::google::protobuf::internal::kEmptyString) {
    delete appsignalid_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemReceiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemReceiver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemReceiver_descriptor_;
}

const SchemaItemReceiver& SchemaItemReceiver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemReceiver* SchemaItemReceiver::default_instance_ = NULL;

SchemaItemReceiver* SchemaItemReceiver::New() const {
  return new SchemaItemReceiver;
}

void SchemaItemReceiver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    showvalidity_ = true;
    if (has_appsignalid()) {
      if (appsignalid_ != &::google::protobuf::internal::kEmptyString) {
        appsignalid_->clear();
      }
    }
    datatype_ = 0;
    precision_ = 2;
    analogformat_ = 102;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemReceiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showValidity = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showvalidity_)));
          set_has_showvalidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appSignalId;
        break;
      }

      // optional string appSignalId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appsignalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appsignalid().data(), this->appsignalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataType;
        break;
      }

      // optional int32 dataType = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_precision;
        break;
      }

      // optional int32 precision = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_analogFormat;
        break;
      }

      // optional int32 analogFormat = 5 [default = 102];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analogFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analogformat_)));
          set_has_analogformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemReceiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool showValidity = 1 [default = true];
  if (has_showvalidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showvalidity(), output);
  }

  // optional string appSignalId = 2;
  if (has_appsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalid().data(), this->appsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appsignalid(), output);
  }

  // optional int32 dataType = 3 [default = 0];
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datatype(), output);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->precision(), output);
  }

  // optional int32 analogFormat = 5 [default = 102];
  if (has_analogformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->analogformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemReceiver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool showValidity = 1 [default = true];
  if (has_showvalidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showvalidity(), target);
  }

  // optional string appSignalId = 2;
  if (has_appsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalid().data(), this->appsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appsignalid(), target);
  }

  // optional int32 dataType = 3 [default = 0];
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->datatype(), target);
  }

  // optional int32 precision = 4 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->precision(), target);
  }

  // optional int32 analogFormat = 5 [default = 102];
  if (has_analogformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->analogformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemReceiver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool showValidity = 1 [default = true];
    if (has_showvalidity()) {
      total_size += 1 + 1;
    }

    // optional string appSignalId = 2;
    if (has_appsignalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appsignalid());
    }

    // optional int32 dataType = 3 [default = 0];
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype());
    }

    // optional int32 precision = 4 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 analogFormat = 5 [default = 102];
    if (has_analogformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analogformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemReceiver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemReceiver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemReceiver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemReceiver::MergeFrom(const SchemaItemReceiver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showvalidity()) {
      set_showvalidity(from.showvalidity());
    }
    if (from.has_appsignalid()) {
      set_appsignalid(from.appsignalid());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_analogformat()) {
      set_analogformat(from.analogformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemReceiver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemReceiver::CopyFrom(const SchemaItemReceiver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemReceiver::IsInitialized() const {

  return true;
}

void SchemaItemReceiver::Swap(SchemaItemReceiver* other) {
  if (other != this) {
    std::swap(showvalidity_, other->showvalidity_);
    std::swap(appsignalid_, other->appsignalid_);
    std::swap(datatype_, other->datatype_);
    std::swap(precision_, other->precision_);
    std::swap(analogformat_, other->analogformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemReceiver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemReceiver_descriptor_;
  metadata.reflection = SchemaItemReceiver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemUfb::kUfbSchemaIdFieldNumber;
const int SchemaItemUfb::kUfbCaptionFieldNumber;
const int SchemaItemUfb::kUfbVersionFieldNumber;
#endif  // !_MSC_VER

SchemaItemUfb::SchemaItemUfb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemUfb::InitAsDefaultInstance() {
}

SchemaItemUfb::SchemaItemUfb(const SchemaItemUfb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemUfb::SharedCtor() {
  _cached_size_ = 0;
  ufbschemaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ufbcaption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ufbversion_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemUfb::~SchemaItemUfb() {
  SharedDtor();
}

void SchemaItemUfb::SharedDtor() {
  if (ufbschemaid_ != &::google::protobuf::internal::kEmptyString) {
    delete ufbschemaid_;
  }
  if (ufbcaption_ != &::google::protobuf::internal::kEmptyString) {
    delete ufbcaption_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemUfb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemUfb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemUfb_descriptor_;
}

const SchemaItemUfb& SchemaItemUfb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemUfb* SchemaItemUfb::default_instance_ = NULL;

SchemaItemUfb* SchemaItemUfb::New() const {
  return new SchemaItemUfb;
}

void SchemaItemUfb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ufbschemaid()) {
      if (ufbschemaid_ != &::google::protobuf::internal::kEmptyString) {
        ufbschemaid_->clear();
      }
    }
    if (has_ufbcaption()) {
      if (ufbcaption_ != &::google::protobuf::internal::kEmptyString) {
        ufbcaption_->clear();
      }
    }
    ufbversion_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemUfb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ufbSchemaId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ufbschemaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ufbschemaid().data(), this->ufbschemaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ufbCaption;
        break;
      }

      // optional string ufbCaption = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ufbCaption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ufbcaption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ufbcaption().data(), this->ufbcaption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ufbVersion;
        break;
      }

      // optional int32 ufbVersion = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ufbVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ufbversion_)));
          set_has_ufbversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemUfb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ufbSchemaId = 1;
  if (has_ufbschemaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ufbschemaid().data(), this->ufbschemaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ufbschemaid(), output);
  }

  // optional string ufbCaption = 2;
  if (has_ufbcaption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ufbcaption().data(), this->ufbcaption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ufbcaption(), output);
  }

  // optional int32 ufbVersion = 3 [default = -1];
  if (has_ufbversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ufbversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemUfb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ufbSchemaId = 1;
  if (has_ufbschemaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ufbschemaid().data(), this->ufbschemaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ufbschemaid(), target);
  }

  // optional string ufbCaption = 2;
  if (has_ufbcaption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ufbcaption().data(), this->ufbcaption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ufbcaption(), target);
  }

  // optional int32 ufbVersion = 3 [default = -1];
  if (has_ufbversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ufbversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemUfb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ufbSchemaId = 1;
    if (has_ufbschemaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ufbschemaid());
    }

    // optional string ufbCaption = 2;
    if (has_ufbcaption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ufbcaption());
    }

    // optional int32 ufbVersion = 3 [default = -1];
    if (has_ufbversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ufbversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemUfb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemUfb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemUfb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemUfb::MergeFrom(const SchemaItemUfb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ufbschemaid()) {
      set_ufbschemaid(from.ufbschemaid());
    }
    if (from.has_ufbcaption()) {
      set_ufbcaption(from.ufbcaption());
    }
    if (from.has_ufbversion()) {
      set_ufbversion(from.ufbversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemUfb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemUfb::CopyFrom(const SchemaItemUfb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemUfb::IsInitialized() const {

  return true;
}

void SchemaItemUfb::Swap(SchemaItemUfb* other) {
  if (other != this) {
    std::swap(ufbschemaid_, other->ufbschemaid_);
    std::swap(ufbcaption_, other->ufbcaption_);
    std::swap(ufbversion_, other->ufbversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemUfb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemUfb_descriptor_;
  metadata.reflection = SchemaItemUfb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemTerminator::SchemaItemTerminator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemTerminator::InitAsDefaultInstance() {
}

SchemaItemTerminator::SchemaItemTerminator(const SchemaItemTerminator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemTerminator::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemTerminator::~SchemaItemTerminator() {
  SharedDtor();
}

void SchemaItemTerminator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemTerminator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemTerminator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemTerminator_descriptor_;
}

const SchemaItemTerminator& SchemaItemTerminator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemTerminator* SchemaItemTerminator::default_instance_ = NULL;

SchemaItemTerminator* SchemaItemTerminator::New() const {
  return new SchemaItemTerminator;
}

void SchemaItemTerminator::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemTerminator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemTerminator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemTerminator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemTerminator::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemTerminator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemTerminator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemTerminator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemTerminator::MergeFrom(const SchemaItemTerminator& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemTerminator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemTerminator::CopyFrom(const SchemaItemTerminator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemTerminator::IsInitialized() const {

  return true;
}

void SchemaItemTerminator::Swap(SchemaItemTerminator* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemTerminator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemTerminator_descriptor_;
  metadata.reflection = SchemaItemTerminator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemValue::kSignalIdsFieldNumber;
const int SchemaItemValue::kSignalSourceFieldNumber;
const int SchemaItemValue::kLineWeightFieldNumber;
const int SchemaItemValue::kLineColorFieldNumber;
const int SchemaItemValue::kFillColorFieldNumber;
const int SchemaItemValue::kTextColorFieldNumber;
const int SchemaItemValue::kTextFieldNumber;
const int SchemaItemValue::kFontFieldNumber;
const int SchemaItemValue::kDrawRectFieldNumber;
const int SchemaItemValue::kHorzAlignFieldNumber;
const int SchemaItemValue::kVertAlignFieldNumber;
const int SchemaItemValue::kPrecisionFieldNumber;
const int SchemaItemValue::kAnalogFormatFieldNumber;
#endif  // !_MSC_VER

SchemaItemValue::SchemaItemValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemValue::InitAsDefaultInstance() {
  font_ = const_cast< ::Proto::FontParam*>(&::Proto::FontParam::default_instance());
}

SchemaItemValue::SchemaItemValue(const SchemaItemValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemValue::SharedCtor() {
  _cached_size_ = 0;
  signalids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signalsource_ = 0;
  lineweight_ = 0;
  linecolor_ = 0u;
  fillcolor_ = 0u;
  textcolor_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  font_ = NULL;
  drawrect_ = true;
  horzalign_ = 4;
  vertalign_ = 128;
  precision_ = -1;
  analogformat_ = 102;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemValue::~SchemaItemValue() {
  SharedDtor();
}

void SchemaItemValue::SharedDtor() {
  if (signalids_ != &::google::protobuf::internal::kEmptyString) {
    delete signalids_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete font_;
  }
}

void SchemaItemValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemValue_descriptor_;
}

const SchemaItemValue& SchemaItemValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemValue* SchemaItemValue::default_instance_ = NULL;

SchemaItemValue* SchemaItemValue::New() const {
  return new SchemaItemValue;
}

void SchemaItemValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signalids()) {
      if (signalids_ != &::google::protobuf::internal::kEmptyString) {
        signalids_->clear();
      }
    }
    signalsource_ = 0;
    lineweight_ = 0;
    linecolor_ = 0u;
    fillcolor_ = 0u;
    textcolor_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_font()) {
      if (font_ != NULL) font_->::Proto::FontParam::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    drawrect_ = true;
    horzalign_ = 4;
    vertalign_ = 128;
    precision_ = -1;
    analogformat_ = 102;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signalIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalids().data(), this->signalids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signalSource;
        break;
      }

      // optional int32 signalSource = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalsource_)));
          set_has_signalsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lineWeight;
        break;
      }

      // optional double lineWeight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lineWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineweight_)));
          set_has_lineweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lineColor;
        break;
      }

      // optional uint32 lineColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linecolor_)));
          set_has_linecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fillColor;
        break;
      }

      // optional uint32 fillColor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fillcolor_)));
          set_has_fillcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_textColor;
        break;
      }

      // optional uint32 textColor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textcolor_)));
          set_has_textcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text;
        break;
      }

      // optional string text = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_font;
        break;
      }

      // optional .Proto.FontParam font = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_drawRect;
        break;
      }

      // optional bool drawRect = 10 [default = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawRect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drawrect_)));
          set_has_drawrect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_horzAlign;
        break;
      }

      // optional int32 horzAlign = 11 [default = 4];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horzAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horzalign_)));
          set_has_horzalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vertAlign;
        break;
      }

      // optional int32 vertAlign = 12 [default = 128];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertalign_)));
          set_has_vertalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_precision;
        break;
      }

      // optional int32 precision = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_analogFormat;
        break;
      }

      // optional int32 analogFormat = 14 [default = 102];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analogFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analogformat_)));
          set_has_analogformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string signalIds = 1;
  if (has_signalids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalids().data(), this->signalids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signalids(), output);
  }

  // optional int32 signalSource = 2 [default = 0];
  if (has_signalsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signalsource(), output);
  }

  // optional double lineWeight = 4;
  if (has_lineweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lineweight(), output);
  }

  // optional uint32 lineColor = 5;
  if (has_linecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->linecolor(), output);
  }

  // optional uint32 fillColor = 6;
  if (has_fillcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fillcolor(), output);
  }

  // optional uint32 textColor = 7;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->textcolor(), output);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->text(), output);
  }

  // optional .Proto.FontParam font = 9;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->font(), output);
  }

  // optional bool drawRect = 10 [default = true];
  if (has_drawrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->drawrect(), output);
  }

  // optional int32 horzAlign = 11 [default = 4];
  if (has_horzalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->horzalign(), output);
  }

  // optional int32 vertAlign = 12 [default = 128];
  if (has_vertalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vertalign(), output);
  }

  // optional int32 precision = 13 [default = -1];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->precision(), output);
  }

  // optional int32 analogFormat = 14 [default = 102];
  if (has_analogformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->analogformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string signalIds = 1;
  if (has_signalids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalids().data(), this->signalids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signalids(), target);
  }

  // optional int32 signalSource = 2 [default = 0];
  if (has_signalsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signalsource(), target);
  }

  // optional double lineWeight = 4;
  if (has_lineweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lineweight(), target);
  }

  // optional uint32 lineColor = 5;
  if (has_linecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->linecolor(), target);
  }

  // optional uint32 fillColor = 6;
  if (has_fillcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fillcolor(), target);
  }

  // optional uint32 textColor = 7;
  if (has_textcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->textcolor(), target);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->text(), target);
  }

  // optional .Proto.FontParam font = 9;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->font(), target);
  }

  // optional bool drawRect = 10 [default = true];
  if (has_drawrect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->drawrect(), target);
  }

  // optional int32 horzAlign = 11 [default = 4];
  if (has_horzalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->horzalign(), target);
  }

  // optional int32 vertAlign = 12 [default = 128];
  if (has_vertalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vertalign(), target);
  }

  // optional int32 precision = 13 [default = -1];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->precision(), target);
  }

  // optional int32 analogFormat = 14 [default = 102];
  if (has_analogformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->analogformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string signalIds = 1;
    if (has_signalids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalids());
    }

    // optional int32 signalSource = 2 [default = 0];
    if (has_signalsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalsource());
    }

    // optional double lineWeight = 4;
    if (has_lineweight()) {
      total_size += 1 + 8;
    }

    // optional uint32 lineColor = 5;
    if (has_linecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linecolor());
    }

    // optional uint32 fillColor = 6;
    if (has_fillcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fillcolor());
    }

    // optional uint32 textColor = 7;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textcolor());
    }

    // optional string text = 8;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Proto.FontParam font = 9;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool drawRect = 10 [default = true];
    if (has_drawrect()) {
      total_size += 1 + 1;
    }

    // optional int32 horzAlign = 11 [default = 4];
    if (has_horzalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horzalign());
    }

    // optional int32 vertAlign = 12 [default = 128];
    if (has_vertalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertalign());
    }

    // optional int32 precision = 13 [default = -1];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 analogFormat = 14 [default = 102];
    if (has_analogformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analogformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemValue::MergeFrom(const SchemaItemValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalids()) {
      set_signalids(from.signalids());
    }
    if (from.has_signalsource()) {
      set_signalsource(from.signalsource());
    }
    if (from.has_lineweight()) {
      set_lineweight(from.lineweight());
    }
    if (from.has_linecolor()) {
      set_linecolor(from.linecolor());
    }
    if (from.has_fillcolor()) {
      set_fillcolor(from.fillcolor());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_font()) {
      mutable_font()->::Proto::FontParam::MergeFrom(from.font());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_drawrect()) {
      set_drawrect(from.drawrect());
    }
    if (from.has_horzalign()) {
      set_horzalign(from.horzalign());
    }
    if (from.has_vertalign()) {
      set_vertalign(from.vertalign());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_analogformat()) {
      set_analogformat(from.analogformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemValue::CopyFrom(const SchemaItemValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemValue::IsInitialized() const {

  if (has_font()) {
    if (!this->font().IsInitialized()) return false;
  }
  return true;
}

void SchemaItemValue::Swap(SchemaItemValue* other) {
  if (other != this) {
    std::swap(signalids_, other->signalids_);
    std::swap(signalsource_, other->signalsource_);
    std::swap(lineweight_, other->lineweight_);
    std::swap(linecolor_, other->linecolor_);
    std::swap(fillcolor_, other->fillcolor_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(text_, other->text_);
    std::swap(font_, other->font_);
    std::swap(drawrect_, other->drawrect_);
    std::swap(horzalign_, other->horzalign_);
    std::swap(vertalign_, other->vertalign_);
    std::swap(precision_, other->precision_);
    std::swap(analogformat_, other->analogformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemValue_descriptor_;
  metadata.reflection = SchemaItemValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemBus::kBusTypeIdFieldNumber;
const int SchemaItemBus::kBusTypeHashFieldNumber;
const int SchemaItemBus::kBusFieldNumber;
#endif  // !_MSC_VER

SchemaItemBus::SchemaItemBus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemBus::InitAsDefaultInstance() {
  bus_ = const_cast< ::Proto::Bus*>(&::Proto::Bus::default_instance());
}

SchemaItemBus::SchemaItemBus(const SchemaItemBus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemBus::SharedCtor() {
  _cached_size_ = 0;
  bustypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bustypehash_ = GOOGLE_ULONGLONG(0);
  bus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemBus::~SchemaItemBus() {
  SharedDtor();
}

void SchemaItemBus::SharedDtor() {
  if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete bustypeid_;
  }
  if (this != default_instance_) {
    delete bus_;
  }
}

void SchemaItemBus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemBus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemBus_descriptor_;
}

const SchemaItemBus& SchemaItemBus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemBus* SchemaItemBus::default_instance_ = NULL;

SchemaItemBus* SchemaItemBus::New() const {
  return new SchemaItemBus;
}

void SchemaItemBus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bustypeid()) {
      if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
        bustypeid_->clear();
      }
    }
    bustypehash_ = GOOGLE_ULONGLONG(0);
    if (has_bus()) {
      if (bus_ != NULL) bus_->::Proto::Bus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemBus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string busTypeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bustypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bustypeid().data(), this->bustypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_busTypeHash;
        break;
      }

      // optional fixed64 busTypeHash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_busTypeHash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bustypehash_)));
          set_has_bustypehash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bus;
        break;
      }

      // optional .Proto.Bus bus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemBus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string busTypeId = 2;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bustypeid(), output);
  }

  // optional fixed64 busTypeHash = 3;
  if (has_bustypehash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->bustypehash(), output);
  }

  // optional .Proto.Bus bus = 5;
  if (has_bus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemBus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string busTypeId = 2;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bustypeid(), target);
  }

  // optional fixed64 busTypeHash = 3;
  if (has_bustypehash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->bustypehash(), target);
  }

  // optional .Proto.Bus bus = 5;
  if (has_bus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemBus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string busTypeId = 2;
    if (has_bustypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bustypeid());
    }

    // optional fixed64 busTypeHash = 3;
    if (has_bustypehash()) {
      total_size += 1 + 8;
    }

    // optional .Proto.Bus bus = 5;
    if (has_bus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemBus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemBus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemBus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemBus::MergeFrom(const SchemaItemBus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bustypeid()) {
      set_bustypeid(from.bustypeid());
    }
    if (from.has_bustypehash()) {
      set_bustypehash(from.bustypehash());
    }
    if (from.has_bus()) {
      mutable_bus()->::Proto::Bus::MergeFrom(from.bus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemBus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemBus::CopyFrom(const SchemaItemBus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemBus::IsInitialized() const {

  if (has_bus()) {
    if (!this->bus().IsInitialized()) return false;
  }
  return true;
}

void SchemaItemBus::Swap(SchemaItemBus* other) {
  if (other != this) {
    std::swap(bustypeid_, other->bustypeid_);
    std::swap(bustypehash_, other->bustypehash_);
    std::swap(bus_, other->bus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemBus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemBus_descriptor_;
  metadata.reflection = SchemaItemBus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemBusComposer::SchemaItemBusComposer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemBusComposer::InitAsDefaultInstance() {
}

SchemaItemBusComposer::SchemaItemBusComposer(const SchemaItemBusComposer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemBusComposer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemBusComposer::~SchemaItemBusComposer() {
  SharedDtor();
}

void SchemaItemBusComposer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemBusComposer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemBusComposer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemBusComposer_descriptor_;
}

const SchemaItemBusComposer& SchemaItemBusComposer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemBusComposer* SchemaItemBusComposer::default_instance_ = NULL;

SchemaItemBusComposer* SchemaItemBusComposer::New() const {
  return new SchemaItemBusComposer;
}

void SchemaItemBusComposer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemBusComposer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemBusComposer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemBusComposer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemBusComposer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemBusComposer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemBusComposer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemBusComposer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemBusComposer::MergeFrom(const SchemaItemBusComposer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemBusComposer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemBusComposer::CopyFrom(const SchemaItemBusComposer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemBusComposer::IsInitialized() const {

  return true;
}

void SchemaItemBusComposer::Swap(SchemaItemBusComposer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemBusComposer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemBusComposer_descriptor_;
  metadata.reflection = SchemaItemBusComposer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemBusExtractor::kPropertiesFieldNumber;
#endif  // !_MSC_VER

SchemaItemBusExtractor::SchemaItemBusExtractor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemBusExtractor::InitAsDefaultInstance() {
}

SchemaItemBusExtractor::SchemaItemBusExtractor(const SchemaItemBusExtractor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemBusExtractor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemBusExtractor::~SchemaItemBusExtractor() {
  SharedDtor();
}

void SchemaItemBusExtractor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemBusExtractor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemBusExtractor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemBusExtractor_descriptor_;
}

const SchemaItemBusExtractor& SchemaItemBusExtractor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemBusExtractor* SchemaItemBusExtractor::default_instance_ = NULL;

SchemaItemBusExtractor* SchemaItemBusExtractor::New() const {
  return new SchemaItemBusExtractor;
}

void SchemaItemBusExtractor::Clear() {
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemBusExtractor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.Property properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemBusExtractor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.Property properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemBusExtractor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.Property properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemBusExtractor::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.Property properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemBusExtractor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemBusExtractor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemBusExtractor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemBusExtractor::MergeFrom(const SchemaItemBusExtractor& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemBusExtractor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemBusExtractor::CopyFrom(const SchemaItemBusExtractor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemBusExtractor::IsInitialized() const {

  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaItemBusExtractor::Swap(SchemaItemBusExtractor* other) {
  if (other != this) {
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemBusExtractor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemBusExtractor_descriptor_;
  metadata.reflection = SchemaItemBusExtractor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemLoopback::kLoopbackIdFieldNumber;
#endif  // !_MSC_VER

SchemaItemLoopback::SchemaItemLoopback()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLoopback::InitAsDefaultInstance() {
}

SchemaItemLoopback::SchemaItemLoopback(const SchemaItemLoopback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLoopback::SharedCtor() {
  _cached_size_ = 0;
  loopbackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLoopback::~SchemaItemLoopback() {
  SharedDtor();
}

void SchemaItemLoopback::SharedDtor() {
  if (loopbackid_ != &::google::protobuf::internal::kEmptyString) {
    delete loopbackid_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemLoopback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLoopback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLoopback_descriptor_;
}

const SchemaItemLoopback& SchemaItemLoopback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLoopback* SchemaItemLoopback::default_instance_ = NULL;

SchemaItemLoopback* SchemaItemLoopback::New() const {
  return new SchemaItemLoopback;
}

void SchemaItemLoopback::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loopbackid()) {
      if (loopbackid_ != &::google::protobuf::internal::kEmptyString) {
        loopbackid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLoopback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loopbackId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loopbackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loopbackid().data(), this->loopbackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemLoopback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string loopbackId = 2;
  if (has_loopbackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loopbackid().data(), this->loopbackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loopbackid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLoopback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string loopbackId = 2;
  if (has_loopbackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loopbackid().data(), this->loopbackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loopbackid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLoopback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string loopbackId = 2;
    if (has_loopbackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loopbackid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLoopback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLoopback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLoopback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLoopback::MergeFrom(const SchemaItemLoopback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loopbackid()) {
      set_loopbackid(from.loopbackid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLoopback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLoopback::CopyFrom(const SchemaItemLoopback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLoopback::IsInitialized() const {

  return true;
}

void SchemaItemLoopback::Swap(SchemaItemLoopback* other) {
  if (other != this) {
    std::swap(loopbackid_, other->loopbackid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLoopback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLoopback_descriptor_;
  metadata.reflection = SchemaItemLoopback_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemLoopbackSource::SchemaItemLoopbackSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLoopbackSource::InitAsDefaultInstance() {
}

SchemaItemLoopbackSource::SchemaItemLoopbackSource(const SchemaItemLoopbackSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLoopbackSource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLoopbackSource::~SchemaItemLoopbackSource() {
  SharedDtor();
}

void SchemaItemLoopbackSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemLoopbackSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLoopbackSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLoopbackSource_descriptor_;
}

const SchemaItemLoopbackSource& SchemaItemLoopbackSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLoopbackSource* SchemaItemLoopbackSource::default_instance_ = NULL;

SchemaItemLoopbackSource* SchemaItemLoopbackSource::New() const {
  return new SchemaItemLoopbackSource;
}

void SchemaItemLoopbackSource::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLoopbackSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemLoopbackSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLoopbackSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLoopbackSource::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLoopbackSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLoopbackSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLoopbackSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLoopbackSource::MergeFrom(const SchemaItemLoopbackSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLoopbackSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLoopbackSource::CopyFrom(const SchemaItemLoopbackSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLoopbackSource::IsInitialized() const {

  return true;
}

void SchemaItemLoopbackSource::Swap(SchemaItemLoopbackSource* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLoopbackSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLoopbackSource_descriptor_;
  metadata.reflection = SchemaItemLoopbackSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SchemaItemLoopbackTarget::SchemaItemLoopbackTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLoopbackTarget::InitAsDefaultInstance() {
}

SchemaItemLoopbackTarget::SchemaItemLoopbackTarget(const SchemaItemLoopbackTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLoopbackTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLoopbackTarget::~SchemaItemLoopbackTarget() {
  SharedDtor();
}

void SchemaItemLoopbackTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaItemLoopbackTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLoopbackTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLoopbackTarget_descriptor_;
}

const SchemaItemLoopbackTarget& SchemaItemLoopbackTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLoopbackTarget* SchemaItemLoopbackTarget::default_instance_ = NULL;

SchemaItemLoopbackTarget* SchemaItemLoopbackTarget::New() const {
  return new SchemaItemLoopbackTarget;
}

void SchemaItemLoopbackTarget::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLoopbackTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SchemaItemLoopbackTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLoopbackTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLoopbackTarget::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLoopbackTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLoopbackTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLoopbackTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLoopbackTarget::MergeFrom(const SchemaItemLoopbackTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLoopbackTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLoopbackTarget::CopyFrom(const SchemaItemLoopbackTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLoopbackTarget::IsInitialized() const {

  return true;
}

void SchemaItemLoopbackTarget::Swap(SchemaItemLoopbackTarget* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLoopbackTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLoopbackTarget_descriptor_;
  metadata.reflection = SchemaItemLoopbackTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemControl::kStyleSheetFieldNumber;
const int SchemaItemControl::kToolTipFieldNumber;
#endif  // !_MSC_VER

SchemaItemControl::SchemaItemControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemControl::InitAsDefaultInstance() {
}

SchemaItemControl::SchemaItemControl(const SchemaItemControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemControl::SharedCtor() {
  _cached_size_ = 0;
  stylesheet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemControl::~SchemaItemControl() {
  SharedDtor();
}

void SchemaItemControl::SharedDtor() {
  if (stylesheet_ != &::google::protobuf::internal::kEmptyString) {
    delete stylesheet_;
  }
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    delete tooltip_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemControl_descriptor_;
}

const SchemaItemControl& SchemaItemControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemControl* SchemaItemControl::default_instance_ = NULL;

SchemaItemControl* SchemaItemControl::New() const {
  return new SchemaItemControl;
}

void SchemaItemControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stylesheet()) {
      if (stylesheet_ != &::google::protobuf::internal::kEmptyString) {
        stylesheet_->clear();
      }
    }
    if (has_tooltip()) {
      if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
        tooltip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string styleSheet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stylesheet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stylesheet().data(), this->stylesheet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toolTip;
        break;
      }

      // optional string toolTip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toolTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tooltip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tooltip().data(), this->tooltip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string styleSheet = 1;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stylesheet().data(), this->stylesheet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stylesheet(), output);
  }

  // optional string toolTip = 2;
  if (has_tooltip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tooltip().data(), this->tooltip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tooltip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string styleSheet = 1;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stylesheet().data(), this->stylesheet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stylesheet(), target);
  }

  // optional string toolTip = 2;
  if (has_tooltip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tooltip().data(), this->tooltip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tooltip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string styleSheet = 1;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stylesheet());
    }

    // optional string toolTip = 2;
    if (has_tooltip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tooltip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemControl::MergeFrom(const SchemaItemControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stylesheet()) {
      set_stylesheet(from.stylesheet());
    }
    if (from.has_tooltip()) {
      set_tooltip(from.tooltip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemControl::CopyFrom(const SchemaItemControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemControl::IsInitialized() const {

  return true;
}

void SchemaItemControl::Swap(SchemaItemControl* other) {
  if (other != this) {
    std::swap(stylesheet_, other->stylesheet_);
    std::swap(tooltip_, other->tooltip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemControl_descriptor_;
  metadata.reflection = SchemaItemControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemPushButton::kTextFieldNumber;
const int SchemaItemPushButton::kCheckableFieldNumber;
const int SchemaItemPushButton::kCheckedDefaultFieldNumber;
const int SchemaItemPushButton::kAutoRepeatFieldNumber;
const int SchemaItemPushButton::kAutoRepeatDelayFieldNumber;
const int SchemaItemPushButton::kAutoRepeatIntervalFieldNumber;
const int SchemaItemPushButton::kScriptAfterCreateFieldNumber;
const int SchemaItemPushButton::kScriptClickedFieldNumber;
const int SchemaItemPushButton::kScriptPressedFieldNumber;
const int SchemaItemPushButton::kScriptReleasedFieldNumber;
const int SchemaItemPushButton::kScriptToggledFieldNumber;
#endif  // !_MSC_VER

SchemaItemPushButton::SchemaItemPushButton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemPushButton::InitAsDefaultInstance() {
}

SchemaItemPushButton::SchemaItemPushButton(const SchemaItemPushButton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemPushButton::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checkable_ = false;
  checkeddefault_ = false;
  autorepeat_ = false;
  autorepeatdelay_ = 0;
  autorepeatinterval_ = 0;
  scriptaftercreate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scriptclicked_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scriptpressed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scriptreleased_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scripttoggled_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemPushButton::~SchemaItemPushButton() {
  SharedDtor();
}

void SchemaItemPushButton::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (scriptaftercreate_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptaftercreate_;
  }
  if (scriptclicked_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptclicked_;
  }
  if (scriptpressed_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptpressed_;
  }
  if (scriptreleased_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptreleased_;
  }
  if (scripttoggled_ != &::google::protobuf::internal::kEmptyString) {
    delete scripttoggled_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemPushButton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemPushButton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemPushButton_descriptor_;
}

const SchemaItemPushButton& SchemaItemPushButton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemPushButton* SchemaItemPushButton::default_instance_ = NULL;

SchemaItemPushButton* SchemaItemPushButton::New() const {
  return new SchemaItemPushButton;
}

void SchemaItemPushButton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    checkable_ = false;
    checkeddefault_ = false;
    autorepeat_ = false;
    autorepeatdelay_ = 0;
    autorepeatinterval_ = 0;
    if (has_scriptaftercreate()) {
      if (scriptaftercreate_ != &::google::protobuf::internal::kEmptyString) {
        scriptaftercreate_->clear();
      }
    }
    if (has_scriptclicked()) {
      if (scriptclicked_ != &::google::protobuf::internal::kEmptyString) {
        scriptclicked_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scriptpressed()) {
      if (scriptpressed_ != &::google::protobuf::internal::kEmptyString) {
        scriptpressed_->clear();
      }
    }
    if (has_scriptreleased()) {
      if (scriptreleased_ != &::google::protobuf::internal::kEmptyString) {
        scriptreleased_->clear();
      }
    }
    if (has_scripttoggled()) {
      if (scripttoggled_ != &::google::protobuf::internal::kEmptyString) {
        scripttoggled_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemPushButton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checkable;
        break;
      }

      // optional bool checkable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkable_)));
          set_has_checkable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checkedDefault;
        break;
      }

      // optional bool checkedDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkedDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkeddefault_)));
          set_has_checkeddefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_autoRepeat;
        break;
      }

      // optional bool autoRepeat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autorepeat_)));
          set_has_autorepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_autoRepeatDelay;
        break;
      }

      // optional int32 autoRepeatDelay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoRepeatDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autorepeatdelay_)));
          set_has_autorepeatdelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_autoRepeatInterval;
        break;
      }

      // optional int32 autoRepeatInterval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoRepeatInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autorepeatinterval_)));
          set_has_autorepeatinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_scriptAfterCreate;
        break;
      }

      // optional string scriptAfterCreate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptAfterCreate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptaftercreate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptaftercreate().data(), this->scriptaftercreate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_scriptClicked;
        break;
      }

      // optional string scriptClicked = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptClicked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptclicked()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptclicked().data(), this->scriptclicked().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_scriptPressed;
        break;
      }

      // optional string scriptPressed = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptPressed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptpressed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptpressed().data(), this->scriptpressed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_scriptReleased;
        break;
      }

      // optional string scriptReleased = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptReleased:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptreleased()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptreleased().data(), this->scriptreleased().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_scriptToggled;
        break;
      }

      // optional string scriptToggled = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptToggled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scripttoggled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scripttoggled().data(), this->scripttoggled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemPushButton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional bool checkable = 2;
  if (has_checkable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->checkable(), output);
  }

  // optional bool checkedDefault = 3;
  if (has_checkeddefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->checkeddefault(), output);
  }

  // optional bool autoRepeat = 4;
  if (has_autorepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autorepeat(), output);
  }

  // optional int32 autoRepeatDelay = 5;
  if (has_autorepeatdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->autorepeatdelay(), output);
  }

  // optional int32 autoRepeatInterval = 6;
  if (has_autorepeatinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->autorepeatinterval(), output);
  }

  // optional string scriptAfterCreate = 21;
  if (has_scriptaftercreate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptaftercreate().data(), this->scriptaftercreate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->scriptaftercreate(), output);
  }

  // optional string scriptClicked = 22;
  if (has_scriptclicked()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptclicked().data(), this->scriptclicked().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->scriptclicked(), output);
  }

  // optional string scriptPressed = 23;
  if (has_scriptpressed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptpressed().data(), this->scriptpressed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->scriptpressed(), output);
  }

  // optional string scriptReleased = 24;
  if (has_scriptreleased()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptreleased().data(), this->scriptreleased().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->scriptreleased(), output);
  }

  // optional string scriptToggled = 25;
  if (has_scripttoggled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scripttoggled().data(), this->scripttoggled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->scripttoggled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemPushButton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool checkable = 2;
  if (has_checkable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->checkable(), target);
  }

  // optional bool checkedDefault = 3;
  if (has_checkeddefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->checkeddefault(), target);
  }

  // optional bool autoRepeat = 4;
  if (has_autorepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autorepeat(), target);
  }

  // optional int32 autoRepeatDelay = 5;
  if (has_autorepeatdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->autorepeatdelay(), target);
  }

  // optional int32 autoRepeatInterval = 6;
  if (has_autorepeatinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->autorepeatinterval(), target);
  }

  // optional string scriptAfterCreate = 21;
  if (has_scriptaftercreate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptaftercreate().data(), this->scriptaftercreate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->scriptaftercreate(), target);
  }

  // optional string scriptClicked = 22;
  if (has_scriptclicked()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptclicked().data(), this->scriptclicked().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->scriptclicked(), target);
  }

  // optional string scriptPressed = 23;
  if (has_scriptpressed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptpressed().data(), this->scriptpressed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->scriptpressed(), target);
  }

  // optional string scriptReleased = 24;
  if (has_scriptreleased()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptreleased().data(), this->scriptreleased().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->scriptreleased(), target);
  }

  // optional string scriptToggled = 25;
  if (has_scripttoggled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scripttoggled().data(), this->scripttoggled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->scripttoggled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemPushButton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool checkable = 2;
    if (has_checkable()) {
      total_size += 1 + 1;
    }

    // optional bool checkedDefault = 3;
    if (has_checkeddefault()) {
      total_size += 1 + 1;
    }

    // optional bool autoRepeat = 4;
    if (has_autorepeat()) {
      total_size += 1 + 1;
    }

    // optional int32 autoRepeatDelay = 5;
    if (has_autorepeatdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autorepeatdelay());
    }

    // optional int32 autoRepeatInterval = 6;
    if (has_autorepeatinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autorepeatinterval());
    }

    // optional string scriptAfterCreate = 21;
    if (has_scriptaftercreate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptaftercreate());
    }

    // optional string scriptClicked = 22;
    if (has_scriptclicked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptclicked());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string scriptPressed = 23;
    if (has_scriptpressed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptpressed());
    }

    // optional string scriptReleased = 24;
    if (has_scriptreleased()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptreleased());
    }

    // optional string scriptToggled = 25;
    if (has_scripttoggled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scripttoggled());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemPushButton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemPushButton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemPushButton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemPushButton::MergeFrom(const SchemaItemPushButton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_checkable()) {
      set_checkable(from.checkable());
    }
    if (from.has_checkeddefault()) {
      set_checkeddefault(from.checkeddefault());
    }
    if (from.has_autorepeat()) {
      set_autorepeat(from.autorepeat());
    }
    if (from.has_autorepeatdelay()) {
      set_autorepeatdelay(from.autorepeatdelay());
    }
    if (from.has_autorepeatinterval()) {
      set_autorepeatinterval(from.autorepeatinterval());
    }
    if (from.has_scriptaftercreate()) {
      set_scriptaftercreate(from.scriptaftercreate());
    }
    if (from.has_scriptclicked()) {
      set_scriptclicked(from.scriptclicked());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scriptpressed()) {
      set_scriptpressed(from.scriptpressed());
    }
    if (from.has_scriptreleased()) {
      set_scriptreleased(from.scriptreleased());
    }
    if (from.has_scripttoggled()) {
      set_scripttoggled(from.scripttoggled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemPushButton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemPushButton::CopyFrom(const SchemaItemPushButton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemPushButton::IsInitialized() const {

  return true;
}

void SchemaItemPushButton::Swap(SchemaItemPushButton* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(checkable_, other->checkable_);
    std::swap(checkeddefault_, other->checkeddefault_);
    std::swap(autorepeat_, other->autorepeat_);
    std::swap(autorepeatdelay_, other->autorepeatdelay_);
    std::swap(autorepeatinterval_, other->autorepeatinterval_);
    std::swap(scriptaftercreate_, other->scriptaftercreate_);
    std::swap(scriptclicked_, other->scriptclicked_);
    std::swap(scriptpressed_, other->scriptpressed_);
    std::swap(scriptreleased_, other->scriptreleased_);
    std::swap(scripttoggled_, other->scripttoggled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemPushButton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemPushButton_descriptor_;
  metadata.reflection = SchemaItemPushButton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaItemLineEdit::kTextFieldNumber;
const int SchemaItemLineEdit::kHorzAlignFieldNumber;
const int SchemaItemLineEdit::kVertAlignFieldNumber;
const int SchemaItemLineEdit::kMaxLengthFieldNumber;
const int SchemaItemLineEdit::kPlaceholderTextFieldNumber;
const int SchemaItemLineEdit::kReadOnlyFieldNumber;
const int SchemaItemLineEdit::kScriptAfterCreateFieldNumber;
const int SchemaItemLineEdit::kScriptEditingFinishedFieldNumber;
const int SchemaItemLineEdit::kScriptReturnPressedFieldNumber;
const int SchemaItemLineEdit::kScriptTextChangedFieldNumber;
#endif  // !_MSC_VER

SchemaItemLineEdit::SchemaItemLineEdit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaItemLineEdit::InitAsDefaultInstance() {
}

SchemaItemLineEdit::SchemaItemLineEdit(const SchemaItemLineEdit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaItemLineEdit::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  horzalign_ = 0;
  vertalign_ = 0;
  maxlength_ = 0;
  placeholdertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readonly_ = false;
  scriptaftercreate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scripteditingfinished_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scriptreturnpressed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scripttextchanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaItemLineEdit::~SchemaItemLineEdit() {
  SharedDtor();
}

void SchemaItemLineEdit::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (placeholdertext_ != &::google::protobuf::internal::kEmptyString) {
    delete placeholdertext_;
  }
  if (scriptaftercreate_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptaftercreate_;
  }
  if (scripteditingfinished_ != &::google::protobuf::internal::kEmptyString) {
    delete scripteditingfinished_;
  }
  if (scriptreturnpressed_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptreturnpressed_;
  }
  if (scripttextchanged_ != &::google::protobuf::internal::kEmptyString) {
    delete scripttextchanged_;
  }
  if (this != default_instance_) {
  }
}

void SchemaItemLineEdit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaItemLineEdit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaItemLineEdit_descriptor_;
}

const SchemaItemLineEdit& SchemaItemLineEdit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaItemLineEdit* SchemaItemLineEdit::default_instance_ = NULL;

SchemaItemLineEdit* SchemaItemLineEdit::New() const {
  return new SchemaItemLineEdit;
}

void SchemaItemLineEdit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    horzalign_ = 0;
    vertalign_ = 0;
    maxlength_ = 0;
    if (has_placeholdertext()) {
      if (placeholdertext_ != &::google::protobuf::internal::kEmptyString) {
        placeholdertext_->clear();
      }
    }
    readonly_ = false;
    if (has_scriptaftercreate()) {
      if (scriptaftercreate_ != &::google::protobuf::internal::kEmptyString) {
        scriptaftercreate_->clear();
      }
    }
    if (has_scripteditingfinished()) {
      if (scripteditingfinished_ != &::google::protobuf::internal::kEmptyString) {
        scripteditingfinished_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scriptreturnpressed()) {
      if (scriptreturnpressed_ != &::google::protobuf::internal::kEmptyString) {
        scriptreturnpressed_->clear();
      }
    }
    if (has_scripttextchanged()) {
      if (scripttextchanged_ != &::google::protobuf::internal::kEmptyString) {
        scripttextchanged_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaItemLineEdit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_horzAlign;
        break;
      }

      // optional int32 horzAlign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horzAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horzalign_)));
          set_has_horzalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertAlign;
        break;
      }

      // optional int32 vertAlign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertAlign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertalign_)));
          set_has_vertalign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxLength;
        break;
      }

      // optional int32 maxLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlength_)));
          set_has_maxlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_placeholderText;
        break;
      }

      // optional string placeholderText = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeholderText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placeholdertext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placeholdertext().data(), this->placeholdertext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_readOnly;
        break;
      }

      // optional bool readOnly = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
          set_has_readonly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_scriptAfterCreate;
        break;
      }

      // optional string scriptAfterCreate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptAfterCreate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptaftercreate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptaftercreate().data(), this->scriptaftercreate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_scriptEditingFinished;
        break;
      }

      // optional string scriptEditingFinished = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptEditingFinished:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scripteditingfinished()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scripteditingfinished().data(), this->scripteditingfinished().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_scriptReturnPressed;
        break;
      }

      // optional string scriptReturnPressed = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptReturnPressed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptreturnpressed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptreturnpressed().data(), this->scriptreturnpressed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_scriptTextChanged;
        break;
      }

      // optional string scriptTextChanged = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptTextChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scripttextchanged()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scripttextchanged().data(), this->scripttextchanged().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaItemLineEdit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional int32 horzAlign = 2;
  if (has_horzalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->horzalign(), output);
  }

  // optional int32 vertAlign = 3;
  if (has_vertalign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertalign(), output);
  }

  // optional int32 maxLength = 4;
  if (has_maxlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxlength(), output);
  }

  // optional string placeholderText = 5;
  if (has_placeholdertext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholdertext().data(), this->placeholdertext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->placeholdertext(), output);
  }

  // optional bool readOnly = 6;
  if (has_readonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->readonly(), output);
  }

  // optional string scriptAfterCreate = 21;
  if (has_scriptaftercreate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptaftercreate().data(), this->scriptaftercreate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->scriptaftercreate(), output);
  }

  // optional string scriptEditingFinished = 22;
  if (has_scripteditingfinished()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scripteditingfinished().data(), this->scripteditingfinished().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->scripteditingfinished(), output);
  }

  // optional string scriptReturnPressed = 23;
  if (has_scriptreturnpressed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptreturnpressed().data(), this->scriptreturnpressed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->scriptreturnpressed(), output);
  }

  // optional string scriptTextChanged = 24;
  if (has_scripttextchanged()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scripttextchanged().data(), this->scripttextchanged().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->scripttextchanged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaItemLineEdit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional int32 horzAlign = 2;
  if (has_horzalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->horzalign(), target);
  }

  // optional int32 vertAlign = 3;
  if (has_vertalign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertalign(), target);
  }

  // optional int32 maxLength = 4;
  if (has_maxlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxlength(), target);
  }

  // optional string placeholderText = 5;
  if (has_placeholdertext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholdertext().data(), this->placeholdertext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->placeholdertext(), target);
  }

  // optional bool readOnly = 6;
  if (has_readonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->readonly(), target);
  }

  // optional string scriptAfterCreate = 21;
  if (has_scriptaftercreate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptaftercreate().data(), this->scriptaftercreate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->scriptaftercreate(), target);
  }

  // optional string scriptEditingFinished = 22;
  if (has_scripteditingfinished()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scripteditingfinished().data(), this->scripteditingfinished().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->scripteditingfinished(), target);
  }

  // optional string scriptReturnPressed = 23;
  if (has_scriptreturnpressed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptreturnpressed().data(), this->scriptreturnpressed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->scriptreturnpressed(), target);
  }

  // optional string scriptTextChanged = 24;
  if (has_scripttextchanged()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scripttextchanged().data(), this->scripttextchanged().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->scripttextchanged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaItemLineEdit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 horzAlign = 2;
    if (has_horzalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horzalign());
    }

    // optional int32 vertAlign = 3;
    if (has_vertalign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertalign());
    }

    // optional int32 maxLength = 4;
    if (has_maxlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlength());
    }

    // optional string placeholderText = 5;
    if (has_placeholdertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placeholdertext());
    }

    // optional bool readOnly = 6;
    if (has_readonly()) {
      total_size += 1 + 1;
    }

    // optional string scriptAfterCreate = 21;
    if (has_scriptaftercreate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptaftercreate());
    }

    // optional string scriptEditingFinished = 22;
    if (has_scripteditingfinished()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scripteditingfinished());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string scriptReturnPressed = 23;
    if (has_scriptreturnpressed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptreturnpressed());
    }

    // optional string scriptTextChanged = 24;
    if (has_scripttextchanged()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scripttextchanged());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaItemLineEdit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaItemLineEdit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaItemLineEdit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaItemLineEdit::MergeFrom(const SchemaItemLineEdit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_horzalign()) {
      set_horzalign(from.horzalign());
    }
    if (from.has_vertalign()) {
      set_vertalign(from.vertalign());
    }
    if (from.has_maxlength()) {
      set_maxlength(from.maxlength());
    }
    if (from.has_placeholdertext()) {
      set_placeholdertext(from.placeholdertext());
    }
    if (from.has_readonly()) {
      set_readonly(from.readonly());
    }
    if (from.has_scriptaftercreate()) {
      set_scriptaftercreate(from.scriptaftercreate());
    }
    if (from.has_scripteditingfinished()) {
      set_scripteditingfinished(from.scripteditingfinished());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scriptreturnpressed()) {
      set_scriptreturnpressed(from.scriptreturnpressed());
    }
    if (from.has_scripttextchanged()) {
      set_scripttextchanged(from.scripttextchanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaItemLineEdit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaItemLineEdit::CopyFrom(const SchemaItemLineEdit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItemLineEdit::IsInitialized() const {

  return true;
}

void SchemaItemLineEdit::Swap(SchemaItemLineEdit* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(horzalign_, other->horzalign_);
    std::swap(vertalign_, other->vertalign_);
    std::swap(maxlength_, other->maxlength_);
    std::swap(placeholdertext_, other->placeholdertext_);
    std::swap(readonly_, other->readonly_);
    std::swap(scriptaftercreate_, other->scriptaftercreate_);
    std::swap(scripteditingfinished_, other->scripteditingfinished_);
    std::swap(scriptreturnpressed_, other->scriptreturnpressed_);
    std::swap(scripttextchanged_, other->scripttextchanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaItemLineEdit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaItemLineEdit_descriptor_;
  metadata.reflection = SchemaItemLineEdit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceObject::kUuidFieldNumber;
const int DeviceObject::kEquipmentIdFieldNumber;
const int DeviceObject::kCaptionFieldNumber;
const int DeviceObject::kChildRestrictionFieldNumber;
const int DeviceObject::kPlaceFieldNumber;
const int DeviceObject::kSpecificPropertiesStructFieldNumber;
const int DeviceObject::kPropertiesFieldNumber;
const int DeviceObject::kPresetFieldNumber;
const int DeviceObject::kPresetRootFieldNumber;
const int DeviceObject::kPresetNameFieldNumber;
const int DeviceObject::kPresetObjectUuidFieldNumber;
const int DeviceObject::kChildCountHintFieldNumber;
const int DeviceObject::kRootFieldNumber;
const int DeviceObject::kSystemFieldNumber;
const int DeviceObject::kRackFieldNumber;
const int DeviceObject::kChassisFieldNumber;
const int DeviceObject::kModuleFieldNumber;
const int DeviceObject::kControllerFieldNumber;
const int DeviceObject::kSignalFieldNumber;
const int DeviceObject::kWorkstationFieldNumber;
const int DeviceObject::kSoftwareFieldNumber;
const int DeviceObject::kChildrenFieldNumber;
#endif  // !_MSC_VER

DeviceObject::DeviceObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceObject::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  equipmentid_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  caption_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  childrestriction_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  presetname_ = const_cast< ::Proto::wstring*>(&::Proto::wstring::default_instance());
  presetobjectuuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
  root_ = const_cast< ::Proto::DeviceRoot*>(&::Proto::DeviceRoot::default_instance());
  system_ = const_cast< ::Proto::DeviceSystem*>(&::Proto::DeviceSystem::default_instance());
  rack_ = const_cast< ::Proto::DeviceRack*>(&::Proto::DeviceRack::default_instance());
  chassis_ = const_cast< ::Proto::DeviceChassis*>(&::Proto::DeviceChassis::default_instance());
  module_ = const_cast< ::Proto::DeviceModule*>(&::Proto::DeviceModule::default_instance());
  controller_ = const_cast< ::Proto::DeviceController*>(&::Proto::DeviceController::default_instance());
  signal_ = const_cast< ::Proto::DeviceSignal*>(&::Proto::DeviceSignal::default_instance());
  workstation_ = const_cast< ::Proto::Workstation*>(&::Proto::Workstation::default_instance());
  software_ = const_cast< ::Proto::Software*>(&::Proto::Software::default_instance());
}

DeviceObject::DeviceObject(const DeviceObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceObject::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  equipmentid_ = NULL;
  caption_ = NULL;
  childrestriction_ = NULL;
  place_ = 0;
  specific_properties_struct_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preset_ = false;
  presetroot_ = false;
  presetname_ = NULL;
  presetobjectuuid_ = NULL;
  childcounthint_ = 0;
  root_ = NULL;
  system_ = NULL;
  rack_ = NULL;
  chassis_ = NULL;
  module_ = NULL;
  controller_ = NULL;
  signal_ = NULL;
  workstation_ = NULL;
  software_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceObject::~DeviceObject() {
  SharedDtor();
}

void DeviceObject::SharedDtor() {
  if (specific_properties_struct_ != &::google::protobuf::internal::kEmptyString) {
    delete specific_properties_struct_;
  }
  if (this != default_instance_) {
    delete uuid_;
    delete equipmentid_;
    delete caption_;
    delete childrestriction_;
    delete presetname_;
    delete presetobjectuuid_;
    delete root_;
    delete system_;
    delete rack_;
    delete chassis_;
    delete module_;
    delete controller_;
    delete signal_;
    delete workstation_;
    delete software_;
  }
}

void DeviceObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceObject_descriptor_;
}

const DeviceObject& DeviceObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceObject* DeviceObject::default_instance_ = NULL;

DeviceObject* DeviceObject::New() const {
  return new DeviceObject;
}

void DeviceObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_equipmentid()) {
      if (equipmentid_ != NULL) equipmentid_->::Proto::wstring::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::Proto::wstring::Clear();
    }
    if (has_childrestriction()) {
      if (childrestriction_ != NULL) childrestriction_->::Proto::wstring::Clear();
    }
    place_ = 0;
    if (has_specific_properties_struct()) {
      if (specific_properties_struct_ != &::google::protobuf::internal::kEmptyString) {
        specific_properties_struct_->clear();
      }
    }
    preset_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    presetroot_ = false;
    if (has_presetname()) {
      if (presetname_ != NULL) presetname_->::Proto::wstring::Clear();
    }
    if (has_presetobjectuuid()) {
      if (presetobjectuuid_ != NULL) presetobjectuuid_->::Proto::Uuid::Clear();
    }
    childcounthint_ = 0;
    if (has_root()) {
      if (root_ != NULL) root_->::Proto::DeviceRoot::Clear();
    }
    if (has_system()) {
      if (system_ != NULL) system_->::Proto::DeviceSystem::Clear();
    }
    if (has_rack()) {
      if (rack_ != NULL) rack_->::Proto::DeviceRack::Clear();
    }
    if (has_chassis()) {
      if (chassis_ != NULL) chassis_->::Proto::DeviceChassis::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_module()) {
      if (module_ != NULL) module_->::Proto::DeviceModule::Clear();
    }
    if (has_controller()) {
      if (controller_ != NULL) controller_->::Proto::DeviceController::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::Proto::DeviceSignal::Clear();
    }
    if (has_workstation()) {
      if (workstation_ != NULL) workstation_->::Proto::Workstation::Clear();
    }
    if (has_software()) {
      if (software_ != NULL) software_->::Proto::Software::Clear();
    }
  }
  properties_.Clear();
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipmentId;
        break;
      }

      // required .Proto.wstring equipmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // required .Proto.wstring caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_childRestriction;
        break;
      }

      // optional .Proto.wstring childRestriction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childRestriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_childrestriction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_place;
        break;
      }

      // optional int32 place = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_specific_properties_struct;
        break;
      }

      // optional string specific_properties_struct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specific_properties_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specific_properties_struct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specific_properties_struct().data(), this->specific_properties_struct().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_properties;
        break;
      }

      // repeated .Proto.Property properties = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_properties;
        if (input->ExpectTag(256)) goto parse_preset;
        break;
      }

      // optional bool preset = 32 [default = false];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preset_)));
          set_has_preset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_presetRoot;
        break;
      }

      // optional bool presetRoot = 33 [default = false];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presetRoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presetroot_)));
          set_has_presetroot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_presetName;
        break;
      }

      // optional .Proto.wstring presetName = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_presetObjectUuid;
        break;
      }

      // optional .Proto.Uuid presetObjectUuid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presetObjectUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presetobjectuuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_childCountHint;
        break;
      }

      // optional int32 childCountHint = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childCountHint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childcounthint_)));
          set_has_childcounthint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_Root;
        break;
      }

      // optional .Proto.DeviceRoot Root = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_System;
        break;
      }

      // optional .Proto.DeviceSystem System = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_System:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_Rack;
        break;
      }

      // optional .Proto.DeviceRack Rack = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_Chassis;
        break;
      }

      // optional .Proto.DeviceChassis Chassis = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chassis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_Module;
        break;
      }

      // optional .Proto.DeviceModule Module = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_Controller;
        break;
      }

      // optional .Proto.DeviceController Controller = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Controller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_Signal;
        break;
      }

      // optional .Proto.DeviceSignal Signal = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_Workstation;
        break;
      }

      // optional .Proto.Workstation Workstation = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Workstation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_workstation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_Software;
        break;
      }

      // optional .Proto.Software Software = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_software()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_children;
        break;
      }

      // repeated .Proto.Envelope children = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // required .Proto.wstring equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipmentid(), output);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->caption(), output);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (has_childrestriction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->childrestriction(), output);
  }

  // optional int32 place = 5 [default = 0];
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->place(), output);
  }

  // optional string specific_properties_struct = 6;
  if (has_specific_properties_struct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specific_properties_struct().data(), this->specific_properties_struct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->specific_properties_struct(), output);
  }

  // repeated .Proto.Property properties = 7;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->properties(i), output);
  }

  // optional bool preset = 32 [default = false];
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->preset(), output);
  }

  // optional bool presetRoot = 33 [default = false];
  if (has_presetroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->presetroot(), output);
  }

  // optional .Proto.wstring presetName = 34;
  if (has_presetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->presetname(), output);
  }

  // optional .Proto.Uuid presetObjectUuid = 35;
  if (has_presetobjectuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->presetobjectuuid(), output);
  }

  // optional int32 childCountHint = 36 [default = 0];
  if (has_childcounthint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->childcounthint(), output);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->root(), output);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->system(), output);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (has_rack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->rack(), output);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (has_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->chassis(), output);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->module(), output);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->controller(), output);
  }

  // optional .Proto.DeviceSignal Signal = 106;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->signal(), output);
  }

  // optional .Proto.Workstation Workstation = 107;
  if (has_workstation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->workstation(), output);
  }

  // optional .Proto.Software Software = 108;
  if (has_software()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->software(), output);
  }

  // repeated .Proto.Envelope children = 200;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // required .Proto.wstring equipmentId = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipmentid(), target);
  }

  // required .Proto.wstring caption = 3;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->caption(), target);
  }

  // optional .Proto.wstring childRestriction = 4;
  if (has_childrestriction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->childrestriction(), target);
  }

  // optional int32 place = 5 [default = 0];
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->place(), target);
  }

  // optional string specific_properties_struct = 6;
  if (has_specific_properties_struct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specific_properties_struct().data(), this->specific_properties_struct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->specific_properties_struct(), target);
  }

  // repeated .Proto.Property properties = 7;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->properties(i), target);
  }

  // optional bool preset = 32 [default = false];
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->preset(), target);
  }

  // optional bool presetRoot = 33 [default = false];
  if (has_presetroot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->presetroot(), target);
  }

  // optional .Proto.wstring presetName = 34;
  if (has_presetname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->presetname(), target);
  }

  // optional .Proto.Uuid presetObjectUuid = 35;
  if (has_presetobjectuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->presetobjectuuid(), target);
  }

  // optional int32 childCountHint = 36 [default = 0];
  if (has_childcounthint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->childcounthint(), target);
  }

  // optional .Proto.DeviceRoot Root = 100;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->root(), target);
  }

  // optional .Proto.DeviceSystem System = 101;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->system(), target);
  }

  // optional .Proto.DeviceRack Rack = 102;
  if (has_rack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->rack(), target);
  }

  // optional .Proto.DeviceChassis Chassis = 103;
  if (has_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->chassis(), target);
  }

  // optional .Proto.DeviceModule Module = 104;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->module(), target);
  }

  // optional .Proto.DeviceController Controller = 105;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->controller(), target);
  }

  // optional .Proto.DeviceSignal Signal = 106;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->signal(), target);
  }

  // optional .Proto.Workstation Workstation = 107;
  if (has_workstation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->workstation(), target);
  }

  // optional .Proto.Software Software = 108;
  if (has_software()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->software(), target);
  }

  // repeated .Proto.Envelope children = 200;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // required .Proto.wstring equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentid());
    }

    // required .Proto.wstring caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }

    // optional .Proto.wstring childRestriction = 4;
    if (has_childrestriction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->childrestriction());
    }

    // optional int32 place = 5 [default = 0];
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

    // optional string specific_properties_struct = 6;
    if (has_specific_properties_struct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specific_properties_struct());
    }

    // optional bool preset = 32 [default = false];
    if (has_preset()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool presetRoot = 33 [default = false];
    if (has_presetroot()) {
      total_size += 2 + 1;
    }

    // optional .Proto.wstring presetName = 34;
    if (has_presetname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presetname());
    }

    // optional .Proto.Uuid presetObjectUuid = 35;
    if (has_presetobjectuuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presetobjectuuid());
    }

    // optional int32 childCountHint = 36 [default = 0];
    if (has_childcounthint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childcounthint());
    }

    // optional .Proto.DeviceRoot Root = 100;
    if (has_root()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root());
    }

    // optional .Proto.DeviceSystem System = 101;
    if (has_system()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
    }

    // optional .Proto.DeviceRack Rack = 102;
    if (has_rack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rack());
    }

    // optional .Proto.DeviceChassis Chassis = 103;
    if (has_chassis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chassis());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Proto.DeviceModule Module = 104;
    if (has_module()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module());
    }

    // optional .Proto.DeviceController Controller = 105;
    if (has_controller()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller());
    }

    // optional .Proto.DeviceSignal Signal = 106;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .Proto.Workstation Workstation = 107;
    if (has_workstation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workstation());
    }

    // optional .Proto.Software Software = 108;
    if (has_software()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->software());
    }

  }
  // repeated .Proto.Property properties = 7;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .Proto.Envelope children = 200;
  total_size += 2 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceObject::MergeFrom(const DeviceObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_equipmentid()) {
      mutable_equipmentid()->::Proto::wstring::MergeFrom(from.equipmentid());
    }
    if (from.has_caption()) {
      mutable_caption()->::Proto::wstring::MergeFrom(from.caption());
    }
    if (from.has_childrestriction()) {
      mutable_childrestriction()->::Proto::wstring::MergeFrom(from.childrestriction());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_specific_properties_struct()) {
      set_specific_properties_struct(from.specific_properties_struct());
    }
    if (from.has_preset()) {
      set_preset(from.preset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_presetroot()) {
      set_presetroot(from.presetroot());
    }
    if (from.has_presetname()) {
      mutable_presetname()->::Proto::wstring::MergeFrom(from.presetname());
    }
    if (from.has_presetobjectuuid()) {
      mutable_presetobjectuuid()->::Proto::Uuid::MergeFrom(from.presetobjectuuid());
    }
    if (from.has_childcounthint()) {
      set_childcounthint(from.childcounthint());
    }
    if (from.has_root()) {
      mutable_root()->::Proto::DeviceRoot::MergeFrom(from.root());
    }
    if (from.has_system()) {
      mutable_system()->::Proto::DeviceSystem::MergeFrom(from.system());
    }
    if (from.has_rack()) {
      mutable_rack()->::Proto::DeviceRack::MergeFrom(from.rack());
    }
    if (from.has_chassis()) {
      mutable_chassis()->::Proto::DeviceChassis::MergeFrom(from.chassis());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_module()) {
      mutable_module()->::Proto::DeviceModule::MergeFrom(from.module());
    }
    if (from.has_controller()) {
      mutable_controller()->::Proto::DeviceController::MergeFrom(from.controller());
    }
    if (from.has_signal()) {
      mutable_signal()->::Proto::DeviceSignal::MergeFrom(from.signal());
    }
    if (from.has_workstation()) {
      mutable_workstation()->::Proto::Workstation::MergeFrom(from.workstation());
    }
    if (from.has_software()) {
      mutable_software()->::Proto::Software::MergeFrom(from.software());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceObject::CopyFrom(const DeviceObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  if (has_equipmentid()) {
    if (!this->equipmentid().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_childrestriction()) {
    if (!this->childrestriction().IsInitialized()) return false;
  }
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  if (has_presetname()) {
    if (!this->presetname().IsInitialized()) return false;
  }
  if (has_presetobjectuuid()) {
    if (!this->presetobjectuuid().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void DeviceObject::Swap(DeviceObject* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(caption_, other->caption_);
    std::swap(childrestriction_, other->childrestriction_);
    std::swap(place_, other->place_);
    std::swap(specific_properties_struct_, other->specific_properties_struct_);
    properties_.Swap(&other->properties_);
    std::swap(preset_, other->preset_);
    std::swap(presetroot_, other->presetroot_);
    std::swap(presetname_, other->presetname_);
    std::swap(presetobjectuuid_, other->presetobjectuuid_);
    std::swap(childcounthint_, other->childcounthint_);
    std::swap(root_, other->root_);
    std::swap(system_, other->system_);
    std::swap(rack_, other->rack_);
    std::swap(chassis_, other->chassis_);
    std::swap(module_, other->module_);
    std::swap(controller_, other->controller_);
    std::swap(signal_, other->signal_);
    std::swap(workstation_, other->workstation_);
    std::swap(software_, other->software_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceObject_descriptor_;
  metadata.reflection = DeviceObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceRoot::DeviceRoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceRoot::InitAsDefaultInstance() {
}

DeviceRoot::DeviceRoot(const DeviceRoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceRoot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRoot::~DeviceRoot() {
  SharedDtor();
}

void DeviceRoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceRoot_descriptor_;
}

const DeviceRoot& DeviceRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceRoot* DeviceRoot::default_instance_ = NULL;

DeviceRoot* DeviceRoot::New() const {
  return new DeviceRoot;
}

void DeviceRoot::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceRoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceRoot::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceRoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceRoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceRoot::MergeFrom(const DeviceRoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceRoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRoot::CopyFrom(const DeviceRoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRoot::IsInitialized() const {

  return true;
}

void DeviceRoot::Swap(DeviceRoot* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceRoot_descriptor_;
  metadata.reflection = DeviceRoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceSystem::DeviceSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceSystem::InitAsDefaultInstance() {
}

DeviceSystem::DeviceSystem(const DeviceSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSystem::~DeviceSystem() {
  SharedDtor();
}

void DeviceSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSystem_descriptor_;
}

const DeviceSystem& DeviceSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceSystem* DeviceSystem::default_instance_ = NULL;

DeviceSystem* DeviceSystem::New() const {
  return new DeviceSystem;
}

void DeviceSystem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceSystem::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSystem::MergeFrom(const DeviceSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSystem::CopyFrom(const DeviceSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSystem::IsInitialized() const {

  return true;
}

void DeviceSystem::Swap(DeviceSystem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSystem_descriptor_;
  metadata.reflection = DeviceSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceRack::DeviceRack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceRack::InitAsDefaultInstance() {
}

DeviceRack::DeviceRack(const DeviceRack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceRack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRack::~DeviceRack() {
  SharedDtor();
}

void DeviceRack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceRack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceRack_descriptor_;
}

const DeviceRack& DeviceRack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceRack* DeviceRack::default_instance_ = NULL;

DeviceRack* DeviceRack::New() const {
  return new DeviceRack;
}

void DeviceRack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceRack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceRack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceRack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceRack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceRack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceRack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceRack::MergeFrom(const DeviceRack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceRack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRack::CopyFrom(const DeviceRack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRack::IsInitialized() const {

  return true;
}

void DeviceRack::Swap(DeviceRack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceRack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceRack_descriptor_;
  metadata.reflection = DeviceRack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceChassis::kTypeFieldNumber;
#endif  // !_MSC_VER

DeviceChassis::DeviceChassis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceChassis::InitAsDefaultInstance() {
}

DeviceChassis::DeviceChassis(const DeviceChassis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceChassis::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceChassis::~DeviceChassis() {
  SharedDtor();
}

void DeviceChassis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceChassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceChassis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceChassis_descriptor_;
}

const DeviceChassis& DeviceChassis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceChassis* DeviceChassis::default_instance_ = NULL;

DeviceChassis* DeviceChassis::New() const {
  return new DeviceChassis;
}

void DeviceChassis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceChassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceChassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceChassis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceChassis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceChassis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceChassis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceChassis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceChassis::MergeFrom(const DeviceChassis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceChassis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceChassis::CopyFrom(const DeviceChassis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceChassis::IsInitialized() const {

  return true;
}

void DeviceChassis::Swap(DeviceChassis* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceChassis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceChassis_descriptor_;
  metadata.reflection = DeviceChassis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceModule::kTypeObsoleteFieldNumber;
const int DeviceModule::kConfigurationScriptFieldNumber;
const int DeviceModule::kModuleTypeFieldNumber;
const int DeviceModule::kRawDataDescriptionFieldNumber;
const int DeviceModule::kCustomModuleFamilyFieldNumber;
#endif  // !_MSC_VER

DeviceModule::DeviceModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceModule::InitAsDefaultInstance() {
}

DeviceModule::DeviceModule(const DeviceModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceModule::SharedCtor() {
  _cached_size_ = 0;
  typeobsolete_ = 0;
  configurationscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moduletype_ = 0;
  rawdatadescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custommodulefamily_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceModule::~DeviceModule() {
  SharedDtor();
}

void DeviceModule::SharedDtor() {
  if (configurationscript_ != &::google::protobuf::internal::kEmptyString) {
    delete configurationscript_;
  }
  if (rawdatadescription_ != &::google::protobuf::internal::kEmptyString) {
    delete rawdatadescription_;
  }
  if (this != default_instance_) {
  }
}

void DeviceModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceModule_descriptor_;
}

const DeviceModule& DeviceModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceModule* DeviceModule::default_instance_ = NULL;

DeviceModule* DeviceModule::New() const {
  return new DeviceModule;
}

void DeviceModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeobsolete_ = 0;
    if (has_configurationscript()) {
      if (configurationscript_ != &::google::protobuf::internal::kEmptyString) {
        configurationscript_->clear();
      }
    }
    moduletype_ = 0;
    if (has_rawdatadescription()) {
      if (rawdatadescription_ != &::google::protobuf::internal::kEmptyString) {
        rawdatadescription_->clear();
      }
    }
    custommodulefamily_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeObsolete = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeobsolete_)));
          set_has_typeobsolete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configurationScript;
        break;
      }

      // optional string configurationScript = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configurationScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configurationscript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configurationscript().data(), this->configurationscript().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moduleType;
        break;
      }

      // optional int32 moduleType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moduleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moduletype_)));
          set_has_moduletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rawDataDescription;
        break;
      }

      // optional string rawDataDescription = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rawDataDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rawdatadescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rawdatadescription().data(), this->rawdatadescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_customModuleFamily;
        break;
      }

      // optional int32 customModuleFamily = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customModuleFamily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &custommodulefamily_)));
          set_has_custommodulefamily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 typeObsolete = 1 [default = 0];
  if (has_typeobsolete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeobsolete(), output);
  }

  // optional string configurationScript = 2;
  if (has_configurationscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configurationscript().data(), this->configurationscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->configurationscript(), output);
  }

  // optional int32 moduleType = 3;
  if (has_moduletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->moduletype(), output);
  }

  // optional string rawDataDescription = 4;
  if (has_rawdatadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rawdatadescription().data(), this->rawdatadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rawdatadescription(), output);
  }

  // optional int32 customModuleFamily = 5 [default = 0];
  if (has_custommodulefamily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->custommodulefamily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 typeObsolete = 1 [default = 0];
  if (has_typeobsolete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeobsolete(), target);
  }

  // optional string configurationScript = 2;
  if (has_configurationscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configurationscript().data(), this->configurationscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->configurationscript(), target);
  }

  // optional int32 moduleType = 3;
  if (has_moduletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->moduletype(), target);
  }

  // optional string rawDataDescription = 4;
  if (has_rawdatadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rawdatadescription().data(), this->rawdatadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rawdatadescription(), target);
  }

  // optional int32 customModuleFamily = 5 [default = 0];
  if (has_custommodulefamily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->custommodulefamily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 typeObsolete = 1 [default = 0];
    if (has_typeobsolete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeobsolete());
    }

    // optional string configurationScript = 2;
    if (has_configurationscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configurationscript());
    }

    // optional int32 moduleType = 3;
    if (has_moduletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moduletype());
    }

    // optional string rawDataDescription = 4;
    if (has_rawdatadescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rawdatadescription());
    }

    // optional int32 customModuleFamily = 5 [default = 0];
    if (has_custommodulefamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->custommodulefamily());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceModule::MergeFrom(const DeviceModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeobsolete()) {
      set_typeobsolete(from.typeobsolete());
    }
    if (from.has_configurationscript()) {
      set_configurationscript(from.configurationscript());
    }
    if (from.has_moduletype()) {
      set_moduletype(from.moduletype());
    }
    if (from.has_rawdatadescription()) {
      set_rawdatadescription(from.rawdatadescription());
    }
    if (from.has_custommodulefamily()) {
      set_custommodulefamily(from.custommodulefamily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceModule::CopyFrom(const DeviceModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceModule::IsInitialized() const {

  return true;
}

void DeviceModule::Swap(DeviceModule* other) {
  if (other != this) {
    std::swap(typeobsolete_, other->typeobsolete_);
    std::swap(configurationscript_, other->configurationscript_);
    std::swap(moduletype_, other->moduletype_);
    std::swap(rawdatadescription_, other->rawdatadescription_);
    std::swap(custommodulefamily_, other->custommodulefamily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceModule_descriptor_;
  metadata.reflection = DeviceModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeviceController::DeviceController()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceController::InitAsDefaultInstance() {
}

DeviceController::DeviceController(const DeviceController& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceController::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceController::~DeviceController() {
  SharedDtor();
}

void DeviceController::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceController::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceController::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceController_descriptor_;
}

const DeviceController& DeviceController::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceController* DeviceController::default_instance_ = NULL;

DeviceController* DeviceController::New() const {
  return new DeviceController;
}

void DeviceController::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeviceController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceController::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceController::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceController::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceController* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceController*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceController::MergeFrom(const DeviceController& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceController::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceController::CopyFrom(const DeviceController& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceController::IsInitialized() const {

  return true;
}

void DeviceController::Swap(DeviceController* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceController::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceController_descriptor_;
  metadata.reflection = DeviceController_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceSignal::kObsoletetypeFieldNumber;
const int DeviceSignal::kByteOrderFieldNumber;
const int DeviceSignal::kFormatFieldNumber;
const int DeviceSignal::kSizeFieldNumber;
const int DeviceSignal::kValueOffsetFieldNumber;
const int DeviceSignal::kValueBitFieldNumber;
const int DeviceSignal::kTypeFieldNumber;
const int DeviceSignal::kFunctionFieldNumber;
const int DeviceSignal::kMemoryAreaFieldNumber;
const int DeviceSignal::kAppSignalLowAdcFieldNumber;
const int DeviceSignal::kAppSignalHighAdcFieldNumber;
const int DeviceSignal::kAppSignalLowEngUnitsFieldNumber;
const int DeviceSignal::kAppSignalHighEngUnitsFieldNumber;
const int DeviceSignal::kAppSignalDataFormatFieldNumber;
const int DeviceSignal::kValiditySignalIdFieldNumber;
const int DeviceSignal::kSignalSpecPropsStrucFieldNumber;
#endif  // !_MSC_VER

DeviceSignal::DeviceSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceSignal::InitAsDefaultInstance() {
}

DeviceSignal::DeviceSignal(const DeviceSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceSignal::SharedCtor() {
  _cached_size_ = 0;
  obsoletetype_ = 0;
  byteorder_ = 0;
  format_ = 0;
  size_ = 0;
  valueoffset_ = 0;
  valuebit_ = 0;
  type_ = 0;
  function_ = 0;
  memoryarea_ = 0;
  appsignallowadc_ = 0;
  appsignalhighadc_ = 65535;
  appsignallowengunits_ = 0;
  appsignalhighengunits_ = 100;
  appsignaldataformat_ = 2;
  validitysignalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signalspecpropsstruc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSignal::~DeviceSignal() {
  SharedDtor();
}

void DeviceSignal::SharedDtor() {
  if (validitysignalid_ != &::google::protobuf::internal::kEmptyString) {
    delete validitysignalid_;
  }
  if (signalspecpropsstruc_ != &::google::protobuf::internal::kEmptyString) {
    delete signalspecpropsstruc_;
  }
  if (this != default_instance_) {
  }
}

void DeviceSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSignal_descriptor_;
}

const DeviceSignal& DeviceSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

DeviceSignal* DeviceSignal::default_instance_ = NULL;

DeviceSignal* DeviceSignal::New() const {
  return new DeviceSignal;
}

void DeviceSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obsoletetype_ = 0;
    byteorder_ = 0;
    format_ = 0;
    size_ = 0;
    valueoffset_ = 0;
    valuebit_ = 0;
    type_ = 0;
    function_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    memoryarea_ = 0;
    appsignallowadc_ = 0;
    appsignalhighadc_ = 65535;
    appsignallowengunits_ = 0;
    appsignalhighengunits_ = 100;
    appsignaldataformat_ = 2;
    if (has_validitysignalid()) {
      if (validitysignalid_ != &::google::protobuf::internal::kEmptyString) {
        validitysignalid_->clear();
      }
    }
    if (has_signalspecpropsstruc()) {
      if (signalspecpropsstruc_ != &::google::protobuf::internal::kEmptyString) {
        signalspecpropsstruc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obsoletetype = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsoletetype_)));
          set_has_obsoletetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byteOrder;
        break;
      }

      // optional int32 byteOrder = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byteOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byteorder_)));
          set_has_byteorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format;
        break;
      }

      // optional int32 format = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_valueOffset;
        break;
      }

      // optional int32 valueOffset = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueoffset_)));
          set_has_valueoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_valueBit;
        break;
      }

      // optional int32 valueBit = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuebit_)));
          set_has_valuebit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional int32 type = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_function;
        break;
      }

      // optional int32 function = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &function_)));
          set_has_function();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_memoryArea;
        break;
      }

      // optional int32 memoryArea = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memoryArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memoryarea_)));
          set_has_memoryarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_appSignalLowAdc;
        break;
      }

      // optional int32 appSignalLowAdc = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appSignalLowAdc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appsignallowadc_)));
          set_has_appsignallowadc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_appSignalHighAdc;
        break;
      }

      // optional int32 appSignalHighAdc = 13 [default = 65535];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appSignalHighAdc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appsignalhighadc_)));
          set_has_appsignalhighadc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_appSignalLowEngUnits;
        break;
      }

      // optional double appSignalLowEngUnits = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_appSignalLowEngUnits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &appsignallowengunits_)));
          set_has_appsignallowengunits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_appSignalHighEngUnits;
        break;
      }

      // optional double appSignalHighEngUnits = 15 [default = 100];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_appSignalHighEngUnits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &appsignalhighengunits_)));
          set_has_appsignalhighengunits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_appSignalDataFormat;
        break;
      }

      // optional int32 appSignalDataFormat = 16 [default = 2];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appSignalDataFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appsignaldataformat_)));
          set_has_appsignaldataformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_validitySignalId;
        break;
      }

      // optional string validitySignalId = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validitySignalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validitysignalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validitysignalid().data(), this->validitysignalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_signalSpecPropsStruc;
        break;
      }

      // optional string signalSpecPropsStruc = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalSpecPropsStruc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalspecpropsstruc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalspecpropsstruc().data(), this->signalspecpropsstruc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obsoletetype = 1 [default = 0];
  if (has_obsoletetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obsoletetype(), output);
  }

  // optional int32 byteOrder = 2 [default = 0];
  if (has_byteorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byteorder(), output);
  }

  // optional int32 format = 3 [default = 0];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->format(), output);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional int32 valueOffset = 7 [default = 0];
  if (has_valueoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->valueoffset(), output);
  }

  // optional int32 valueBit = 8 [default = 0];
  if (has_valuebit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->valuebit(), output);
  }

  // optional int32 type = 9 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // optional int32 function = 10 [default = 0];
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->function(), output);
  }

  // optional int32 memoryArea = 11 [default = 0];
  if (has_memoryarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->memoryarea(), output);
  }

  // optional int32 appSignalLowAdc = 12 [default = 0];
  if (has_appsignallowadc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->appsignallowadc(), output);
  }

  // optional int32 appSignalHighAdc = 13 [default = 65535];
  if (has_appsignalhighadc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->appsignalhighadc(), output);
  }

  // optional double appSignalLowEngUnits = 14 [default = 0];
  if (has_appsignallowengunits()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->appsignallowengunits(), output);
  }

  // optional double appSignalHighEngUnits = 15 [default = 100];
  if (has_appsignalhighengunits()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->appsignalhighengunits(), output);
  }

  // optional int32 appSignalDataFormat = 16 [default = 2];
  if (has_appsignaldataformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->appsignaldataformat(), output);
  }

  // optional string validitySignalId = 20;
  if (has_validitysignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validitysignalid().data(), this->validitysignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->validitysignalid(), output);
  }

  // optional string signalSpecPropsStruc = 40;
  if (has_signalspecpropsstruc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalspecpropsstruc().data(), this->signalspecpropsstruc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->signalspecpropsstruc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obsoletetype = 1 [default = 0];
  if (has_obsoletetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obsoletetype(), target);
  }

  // optional int32 byteOrder = 2 [default = 0];
  if (has_byteorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->byteorder(), target);
  }

  // optional int32 format = 3 [default = 0];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->format(), target);
  }

  // optional int32 size = 4 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional int32 valueOffset = 7 [default = 0];
  if (has_valueoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->valueoffset(), target);
  }

  // optional int32 valueBit = 8 [default = 0];
  if (has_valuebit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->valuebit(), target);
  }

  // optional int32 type = 9 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // optional int32 function = 10 [default = 0];
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->function(), target);
  }

  // optional int32 memoryArea = 11 [default = 0];
  if (has_memoryarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->memoryarea(), target);
  }

  // optional int32 appSignalLowAdc = 12 [default = 0];
  if (has_appsignallowadc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->appsignallowadc(), target);
  }

  // optional int32 appSignalHighAdc = 13 [default = 65535];
  if (has_appsignalhighadc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->appsignalhighadc(), target);
  }

  // optional double appSignalLowEngUnits = 14 [default = 0];
  if (has_appsignallowengunits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->appsignallowengunits(), target);
  }

  // optional double appSignalHighEngUnits = 15 [default = 100];
  if (has_appsignalhighengunits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->appsignalhighengunits(), target);
  }

  // optional int32 appSignalDataFormat = 16 [default = 2];
  if (has_appsignaldataformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->appsignaldataformat(), target);
  }

  // optional string validitySignalId = 20;
  if (has_validitysignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validitysignalid().data(), this->validitysignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->validitysignalid(), target);
  }

  // optional string signalSpecPropsStruc = 40;
  if (has_signalspecpropsstruc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalspecpropsstruc().data(), this->signalspecpropsstruc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->signalspecpropsstruc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obsoletetype = 1 [default = 0];
    if (has_obsoletetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obsoletetype());
    }

    // optional int32 byteOrder = 2 [default = 0];
    if (has_byteorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byteorder());
    }

    // optional int32 format = 3 [default = 0];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->format());
    }

    // optional int32 size = 4 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 valueOffset = 7 [default = 0];
    if (has_valueoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueoffset());
    }

    // optional int32 valueBit = 8 [default = 0];
    if (has_valuebit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuebit());
    }

    // optional int32 type = 9 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 function = 10 [default = 0];
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->function());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 memoryArea = 11 [default = 0];
    if (has_memoryarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memoryarea());
    }

    // optional int32 appSignalLowAdc = 12 [default = 0];
    if (has_appsignallowadc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appsignallowadc());
    }

    // optional int32 appSignalHighAdc = 13 [default = 65535];
    if (has_appsignalhighadc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appsignalhighadc());
    }

    // optional double appSignalLowEngUnits = 14 [default = 0];
    if (has_appsignallowengunits()) {
      total_size += 1 + 8;
    }

    // optional double appSignalHighEngUnits = 15 [default = 100];
    if (has_appsignalhighengunits()) {
      total_size += 1 + 8;
    }

    // optional int32 appSignalDataFormat = 16 [default = 2];
    if (has_appsignaldataformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appsignaldataformat());
    }

    // optional string validitySignalId = 20;
    if (has_validitysignalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validitysignalid());
    }

    // optional string signalSpecPropsStruc = 40;
    if (has_signalspecpropsstruc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalspecpropsstruc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSignal::MergeFrom(const DeviceSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obsoletetype()) {
      set_obsoletetype(from.obsoletetype());
    }
    if (from.has_byteorder()) {
      set_byteorder(from.byteorder());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_valueoffset()) {
      set_valueoffset(from.valueoffset());
    }
    if (from.has_valuebit()) {
      set_valuebit(from.valuebit());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_memoryarea()) {
      set_memoryarea(from.memoryarea());
    }
    if (from.has_appsignallowadc()) {
      set_appsignallowadc(from.appsignallowadc());
    }
    if (from.has_appsignalhighadc()) {
      set_appsignalhighadc(from.appsignalhighadc());
    }
    if (from.has_appsignallowengunits()) {
      set_appsignallowengunits(from.appsignallowengunits());
    }
    if (from.has_appsignalhighengunits()) {
      set_appsignalhighengunits(from.appsignalhighengunits());
    }
    if (from.has_appsignaldataformat()) {
      set_appsignaldataformat(from.appsignaldataformat());
    }
    if (from.has_validitysignalid()) {
      set_validitysignalid(from.validitysignalid());
    }
    if (from.has_signalspecpropsstruc()) {
      set_signalspecpropsstruc(from.signalspecpropsstruc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSignal::CopyFrom(const DeviceSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSignal::IsInitialized() const {

  return true;
}

void DeviceSignal::Swap(DeviceSignal* other) {
  if (other != this) {
    std::swap(obsoletetype_, other->obsoletetype_);
    std::swap(byteorder_, other->byteorder_);
    std::swap(format_, other->format_);
    std::swap(size_, other->size_);
    std::swap(valueoffset_, other->valueoffset_);
    std::swap(valuebit_, other->valuebit_);
    std::swap(type_, other->type_);
    std::swap(function_, other->function_);
    std::swap(memoryarea_, other->memoryarea_);
    std::swap(appsignallowadc_, other->appsignallowadc_);
    std::swap(appsignalhighadc_, other->appsignalhighadc_);
    std::swap(appsignallowengunits_, other->appsignallowengunits_);
    std::swap(appsignalhighengunits_, other->appsignalhighengunits_);
    std::swap(appsignaldataformat_, other->appsignaldataformat_);
    std::swap(validitysignalid_, other->validitysignalid_);
    std::swap(signalspecpropsstruc_, other->signalspecpropsstruc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSignal_descriptor_;
  metadata.reflection = DeviceSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Workstation::kTypeFieldNumber;
#endif  // !_MSC_VER

Workstation::Workstation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Workstation::InitAsDefaultInstance() {
}

Workstation::Workstation(const Workstation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Workstation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Workstation::~Workstation() {
  SharedDtor();
}

void Workstation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Workstation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Workstation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Workstation_descriptor_;
}

const Workstation& Workstation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Workstation* Workstation::default_instance_ = NULL;

Workstation* Workstation::New() const {
  return new Workstation;
}

void Workstation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Workstation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Workstation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Workstation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Workstation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Workstation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Workstation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Workstation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Workstation::MergeFrom(const Workstation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Workstation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workstation::CopyFrom(const Workstation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workstation::IsInitialized() const {

  return true;
}

void Workstation::Swap(Workstation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Workstation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Workstation_descriptor_;
  metadata.reflection = Workstation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Software::kTypeFieldNumber;
#endif  // !_MSC_VER

Software::Software()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Software::InitAsDefaultInstance() {
}

Software::Software(const Software& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Software::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Software::~Software() {
  SharedDtor();
}

void Software::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Software::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Software::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Software_descriptor_;
}

const Software& Software::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Software* Software::default_instance_ = NULL;

Software* Software::New() const {
  return new Software;
}

void Software::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Software::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Software::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Software::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Software::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Software::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Software* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Software*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Software::MergeFrom(const Software& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Software::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Software::CopyFrom(const Software& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {

  return true;
}

void Software::Swap(Software* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Software::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Software_descriptor_;
  metadata.reflection = Software_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleConfiguration::kStructDescriptionFieldNumber;
const int ModuleConfiguration::kValuesFieldNumber;
const int ModuleConfiguration::kNameFieldNumber;
#endif  // !_MSC_VER

ModuleConfiguration::ModuleConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleConfiguration::InitAsDefaultInstance() {
}

ModuleConfiguration::ModuleConfiguration(const ModuleConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleConfiguration::SharedCtor() {
  _cached_size_ = 0;
  struct_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleConfiguration::~ModuleConfiguration() {
  SharedDtor();
}

void ModuleConfiguration::SharedDtor() {
  if (struct_description_ != &::google::protobuf::internal::kEmptyString) {
    delete struct_description_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModuleConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleConfiguration_descriptor_;
}

const ModuleConfiguration& ModuleConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ModuleConfiguration* ModuleConfiguration::default_instance_ = NULL;

ModuleConfiguration* ModuleConfiguration::New() const {
  return new ModuleConfiguration;
}

void ModuleConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_struct_description()) {
      if (struct_description_ != &::google::protobuf::internal::kEmptyString) {
        struct_description_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string struct_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_struct_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->struct_description().data(), this->struct_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .Proto.ModuleConfigurationValue values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string struct_description = 1;
  if (has_struct_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struct_description().data(), this->struct_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->struct_description(), output);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string struct_description = 1;
  if (has_struct_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struct_description().data(), this->struct_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->struct_description(), target);
  }

  // repeated .Proto.ModuleConfigurationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string struct_description = 1;
    if (has_struct_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struct_description());
    }

    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Proto.ModuleConfigurationValue values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleConfiguration::MergeFrom(const ModuleConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_struct_description()) {
      set_struct_description(from.struct_description());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfiguration::CopyFrom(const ModuleConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfiguration::IsInitialized() const {

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void ModuleConfiguration::Swap(ModuleConfiguration* other) {
  if (other != this) {
    std::swap(struct_description_, other->struct_description_);
    values_.Swap(&other->values_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleConfiguration_descriptor_;
  metadata.reflection = ModuleConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleConfigurationValue::kNameFieldNumber;
const int ModuleConfigurationValue::kValueFieldNumber;
#endif  // !_MSC_VER

ModuleConfigurationValue::ModuleConfigurationValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleConfigurationValue::InitAsDefaultInstance() {
}

ModuleConfigurationValue::ModuleConfigurationValue(const ModuleConfigurationValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleConfigurationValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleConfigurationValue::~ModuleConfigurationValue() {
  SharedDtor();
}

void ModuleConfigurationValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ModuleConfigurationValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleConfigurationValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleConfigurationValue_descriptor_;
}

const ModuleConfigurationValue& ModuleConfigurationValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ModuleConfigurationValue* ModuleConfigurationValue::default_instance_ = NULL;

ModuleConfigurationValue* ModuleConfigurationValue::New() const {
  return new ModuleConfigurationValue;
}

void ModuleConfigurationValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleConfigurationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleConfigurationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleConfigurationValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleConfigurationValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleConfigurationValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleConfigurationValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleConfigurationValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleConfigurationValue::MergeFrom(const ModuleConfigurationValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleConfigurationValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfigurationValue::CopyFrom(const ModuleConfigurationValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfigurationValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModuleConfigurationValue::Swap(ModuleConfigurationValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleConfigurationValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleConfigurationValue_descriptor_;
  metadata.reflection = ModuleConfigurationValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kNameFieldNumber;
const int Property::kValueFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  SharedDtor();
}

void Property::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalSpecPropValue::kNameFieldNumber;
const int SignalSpecPropValue::kTypeFieldNumber;
const int SignalSpecPropValue::kIsEnumFieldNumber;
const int SignalSpecPropValue::kInt32ValFieldNumber;
const int SignalSpecPropValue::kUint32ValFieldNumber;
const int SignalSpecPropValue::kInt64ValFieldNumber;
const int SignalSpecPropValue::kUint64ValFieldNumber;
const int SignalSpecPropValue::kDoubleValFieldNumber;
const int SignalSpecPropValue::kBoolValFieldNumber;
const int SignalSpecPropValue::kStringValFieldNumber;
#endif  // !_MSC_VER

SignalSpecPropValue::SignalSpecPropValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalSpecPropValue::InitAsDefaultInstance() {
}

SignalSpecPropValue::SignalSpecPropValue(const SignalSpecPropValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalSpecPropValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  isenum_ = false;
  int32val_ = 0;
  uint32val_ = 0u;
  int64val_ = GOOGLE_LONGLONG(0);
  uint64val_ = GOOGLE_ULONGLONG(0);
  doubleval_ = 0;
  boolval_ = false;
  stringval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalSpecPropValue::~SignalSpecPropValue() {
  SharedDtor();
}

void SignalSpecPropValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (stringval_ != &::google::protobuf::internal::kEmptyString) {
    delete stringval_;
  }
  if (this != default_instance_) {
  }
}

void SignalSpecPropValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalSpecPropValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalSpecPropValue_descriptor_;
}

const SignalSpecPropValue& SignalSpecPropValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SignalSpecPropValue* SignalSpecPropValue::default_instance_ = NULL;

SignalSpecPropValue* SignalSpecPropValue::New() const {
  return new SignalSpecPropValue;
}

void SignalSpecPropValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    isenum_ = false;
    int32val_ = 0;
    uint32val_ = 0u;
    int64val_ = GOOGLE_LONGLONG(0);
    uint64val_ = GOOGLE_ULONGLONG(0);
    doubleval_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boolval_ = false;
    if (has_stringval()) {
      if (stringval_ != &::google::protobuf::internal::kEmptyString) {
        stringval_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalSpecPropValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isEnum;
        break;
      }

      // required bool isEnum = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isenum_)));
          set_has_isenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_int32Val;
        break;
      }

      // optional int32 int32Val = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32val_)));
          set_has_int32val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_uint32Val;
        break;
      }

      // optional uint32 uint32Val = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32val_)));
          set_has_uint32val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_int64Val;
        break;
      }

      // optional int64 int64Val = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64val_)));
          set_has_int64val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_uint64Val;
        break;
      }

      // optional uint64 uint64Val = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64val_)));
          set_has_uint64val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_doubleVal;
        break;
      }

      // optional double doubleVal = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doubleval_)));
          set_has_doubleval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_boolVal;
        break;
      }

      // optional bool boolVal = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolval_)));
          set_has_boolval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_stringVal;
        break;
      }

      // optional string stringVal = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringval().data(), this->stringval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalSpecPropValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bool isEnum = 3 [default = false];
  if (has_isenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isenum(), output);
  }

  // optional int32 int32Val = 10;
  if (has_int32val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->int32val(), output);
  }

  // optional uint32 uint32Val = 11;
  if (has_uint32val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uint32val(), output);
  }

  // optional int64 int64Val = 12;
  if (has_int64val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->int64val(), output);
  }

  // optional uint64 uint64Val = 13;
  if (has_uint64val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->uint64val(), output);
  }

  // optional double doubleVal = 14;
  if (has_doubleval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->doubleval(), output);
  }

  // optional bool boolVal = 15;
  if (has_boolval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->boolval(), output);
  }

  // optional string stringVal = 16;
  if (has_stringval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringval().data(), this->stringval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->stringval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalSpecPropValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bool isEnum = 3 [default = false];
  if (has_isenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isenum(), target);
  }

  // optional int32 int32Val = 10;
  if (has_int32val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->int32val(), target);
  }

  // optional uint32 uint32Val = 11;
  if (has_uint32val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uint32val(), target);
  }

  // optional int64 int64Val = 12;
  if (has_int64val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->int64val(), target);
  }

  // optional uint64 uint64Val = 13;
  if (has_uint64val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->uint64val(), target);
  }

  // optional double doubleVal = 14;
  if (has_doubleval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->doubleval(), target);
  }

  // optional bool boolVal = 15;
  if (has_boolval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->boolval(), target);
  }

  // optional string stringVal = 16;
  if (has_stringval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringval().data(), this->stringval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->stringval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalSpecPropValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool isEnum = 3 [default = false];
    if (has_isenum()) {
      total_size += 1 + 1;
    }

    // optional int32 int32Val = 10;
    if (has_int32val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32val());
    }

    // optional uint32 uint32Val = 11;
    if (has_uint32val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32val());
    }

    // optional int64 int64Val = 12;
    if (has_int64val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64val());
    }

    // optional uint64 uint64Val = 13;
    if (has_uint64val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64val());
    }

    // optional double doubleVal = 14;
    if (has_doubleval()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool boolVal = 15;
    if (has_boolval()) {
      total_size += 1 + 1;
    }

    // optional string stringVal = 16;
    if (has_stringval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalSpecPropValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalSpecPropValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalSpecPropValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalSpecPropValue::MergeFrom(const SignalSpecPropValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isenum()) {
      set_isenum(from.isenum());
    }
    if (from.has_int32val()) {
      set_int32val(from.int32val());
    }
    if (from.has_uint32val()) {
      set_uint32val(from.uint32val());
    }
    if (from.has_int64val()) {
      set_int64val(from.int64val());
    }
    if (from.has_uint64val()) {
      set_uint64val(from.uint64val());
    }
    if (from.has_doubleval()) {
      set_doubleval(from.doubleval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boolval()) {
      set_boolval(from.boolval());
    }
    if (from.has_stringval()) {
      set_stringval(from.stringval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalSpecPropValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSpecPropValue::CopyFrom(const SignalSpecPropValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSpecPropValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignalSpecPropValue::Swap(SignalSpecPropValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(isenum_, other->isenum_);
    std::swap(int32val_, other->int32val_);
    std::swap(uint32val_, other->uint32val_);
    std::swap(int64val_, other->int64val_);
    std::swap(uint64val_, other->uint64val_);
    std::swap(doubleval_, other->doubleval_);
    std::swap(boolval_, other->boolval_);
    std::swap(stringval_, other->stringval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalSpecPropValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalSpecPropValue_descriptor_;
  metadata.reflection = SignalSpecPropValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalSpecPropValues::kValueFieldNumber;
#endif  // !_MSC_VER

SignalSpecPropValues::SignalSpecPropValues()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalSpecPropValues::InitAsDefaultInstance() {
}

SignalSpecPropValues::SignalSpecPropValues(const SignalSpecPropValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalSpecPropValues::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalSpecPropValues::~SignalSpecPropValues() {
  SharedDtor();
}

void SignalSpecPropValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalSpecPropValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalSpecPropValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalSpecPropValues_descriptor_;
}

const SignalSpecPropValues& SignalSpecPropValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SignalSpecPropValues* SignalSpecPropValues::default_instance_ = NULL;

SignalSpecPropValues* SignalSpecPropValues::New() const {
  return new SignalSpecPropValues;
}

void SignalSpecPropValues::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalSpecPropValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.SignalSpecPropValue value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalSpecPropValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.SignalSpecPropValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalSpecPropValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.SignalSpecPropValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalSpecPropValues::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.SignalSpecPropValue value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalSpecPropValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalSpecPropValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalSpecPropValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalSpecPropValues::MergeFrom(const SignalSpecPropValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalSpecPropValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSpecPropValues::CopyFrom(const SignalSpecPropValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSpecPropValues::IsInitialized() const {

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  return true;
}

void SignalSpecPropValues::Swap(SignalSpecPropValues* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalSpecPropValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalSpecPropValues_descriptor_;
  metadata.reflection = SignalSpecPropValues_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Address16::kOffsetFieldNumber;
const int Address16::kBitFieldNumber;
#endif  // !_MSC_VER

Address16::Address16()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address16::InitAsDefaultInstance() {
}

Address16::Address16(const Address16& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address16::SharedCtor() {
  _cached_size_ = 0;
  offset_ = -1;
  bit_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address16::~Address16() {
  SharedDtor();
}

void Address16::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Address16::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address16_descriptor_;
}

const Address16& Address16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Address16* Address16::default_instance_ = NULL;

Address16* Address16::New() const {
  return new Address16;
}

void Address16::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = -1;
    bit_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit;
        break;
      }

      // required int32 bit = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_)));
          set_has_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1 [default = -1];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 bit = 2 [default = -1];
  if (has_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address16::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1 [default = -1];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 bit = 2 [default = -1];
  if (has_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address16::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1 [default = -1];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 bit = 2 [default = -1];
    if (has_bit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address16::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address16* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address16*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address16::MergeFrom(const Address16& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_bit()) {
      set_bit(from.bit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address16::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address16::CopyFrom(const Address16& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address16::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Address16::Swap(Address16* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(bit_, other->bit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address16_descriptor_;
  metadata.reflection = Address16_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Unit::kIdFieldNumber;
const int Unit::kCaptionFieldNumber;
#endif  // !_MSC_VER

Unit::Unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unit::InitAsDefaultInstance() {
}

Unit::Unit(const Unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unit::~Unit() {
  SharedDtor();
}

void Unit::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (this != default_instance_) {
  }
}

void Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unit_descriptor_;
}

const Unit& Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Unit* Unit::default_instance_ = NULL;

Unit* Unit::New() const {
  return new Unit;
}

void Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caption;
        break;
      }

      // required string caption = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string caption = 2;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->caption(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string caption = 2;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caption(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string caption = 2;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Unit::Swap(Unit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(caption_, other->caption_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unit_descriptor_;
  metadata.reflection = Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitSet::kUnitFieldNumber;
#endif  // !_MSC_VER

UnitSet::UnitSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitSet::InitAsDefaultInstance() {
}

UnitSet::UnitSet(const UnitSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitSet::~UnitSet() {
  SharedDtor();
}

void UnitSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitSet_descriptor_;
}

const UnitSet& UnitSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

UnitSet* UnitSet::default_instance_ = NULL;

UnitSet* UnitSet::New() const {
  return new UnitSet;
}

void UnitSet::Clear() {
  unit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.Unit unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_unit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.Unit unit = 1;
  for (int i = 0; i < this->unit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.Unit unit = 1;
  for (int i = 0; i < this->unit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitSet::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.Unit unit = 1;
  total_size += 1 * this->unit_size();
  for (int i = 0; i < this->unit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitSet::MergeFrom(const UnitSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  unit_.MergeFrom(from.unit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitSet::CopyFrom(const UnitSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitSet::IsInitialized() const {

  for (int i = 0; i < unit_size(); i++) {
    if (!this->unit(i).IsInitialized()) return false;
  }
  return true;
}

void UnitSet::Swap(UnitSet* other) {
  if (other != this) {
    unit_.Swap(&other->unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitSet_descriptor_;
  metadata.reflection = UnitSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TuningValue::kTypeFieldNumber;
const int TuningValue::kIntValueFieldNumber;
const int TuningValue::kDoubleValueFieldNumber;
#endif  // !_MSC_VER

TuningValue::TuningValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuningValue::InitAsDefaultInstance() {
}

TuningValue::TuningValue(const TuningValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuningValue::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  intvalue_ = GOOGLE_LONGLONG(0);
  doublevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuningValue::~TuningValue() {
  SharedDtor();
}

void TuningValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TuningValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuningValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuningValue_descriptor_;
}

const TuningValue& TuningValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

TuningValue* TuningValue::default_instance_ = NULL;

TuningValue* TuningValue::New() const {
  return new TuningValue;
}

void TuningValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    intvalue_ = GOOGLE_LONGLONG(0);
    doublevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuningValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intValue;
        break;
      }

      // optional int64 intValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_doubleValue;
        break;
      }

      // optional double doubleValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doublevalue_)));
          set_has_doublevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuningValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 intValue = 2 [default = 0];
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->intvalue(), output);
  }

  // optional double doubleValue = 3 [default = 0];
  if (has_doublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->doublevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuningValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 intValue = 2 [default = 0];
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->intvalue(), target);
  }

  // optional double doubleValue = 3 [default = 0];
  if (has_doublevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->doublevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuningValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 intValue = 2 [default = 0];
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intvalue());
    }

    // optional double doubleValue = 3 [default = 0];
    if (has_doublevalue()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuningValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuningValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuningValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuningValue::MergeFrom(const TuningValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_doublevalue()) {
      set_doublevalue(from.doublevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuningValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningValue::CopyFrom(const TuningValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningValue::IsInitialized() const {

  return true;
}

void TuningValue::Swap(TuningValue* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(doublevalue_, other->doublevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuningValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuningValue_descriptor_;
  metadata.reflection = TuningValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppSignalDbField::kIDFieldNumber;
const int AppSignalDbField::kSignalGroupIDFieldNumber;
const int AppSignalDbField::kSignalInstanceIDFieldNumber;
const int AppSignalDbField::kChangesetIDFieldNumber;
const int AppSignalDbField::kCheckedOutFieldNumber;
const int AppSignalDbField::kUserIDFieldNumber;
const int AppSignalDbField::kCreatedFieldNumber;
const int AppSignalDbField::kDeletedFieldNumber;
const int AppSignalDbField::kInstanceCreatedFieldNumber;
const int AppSignalDbField::kInstanceActionFieldNumber;
#endif  // !_MSC_VER

AppSignalDbField::AppSignalDbField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppSignalDbField::InitAsDefaultInstance() {
}

AppSignalDbField::AppSignalDbField(const AppSignalDbField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppSignalDbField::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  signalgroupid_ = -1;
  signalinstanceid_ = -1;
  changesetid_ = -1;
  checkedout_ = false;
  userid_ = -1;
  created_ = GOOGLE_LONGLONG(0);
  deleted_ = false;
  instancecreated_ = GOOGLE_LONGLONG(0);
  instanceaction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppSignalDbField::~AppSignalDbField() {
  SharedDtor();
}

void AppSignalDbField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppSignalDbField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppSignalDbField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppSignalDbField_descriptor_;
}

const AppSignalDbField& AppSignalDbField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AppSignalDbField* AppSignalDbField::default_instance_ = NULL;

AppSignalDbField* AppSignalDbField::New() const {
  return new AppSignalDbField;
}

void AppSignalDbField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    signalgroupid_ = -1;
    signalinstanceid_ = -1;
    changesetid_ = -1;
    checkedout_ = false;
    userid_ = -1;
    created_ = GOOGLE_LONGLONG(0);
    deleted_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    instancecreated_ = GOOGLE_LONGLONG(0);
    instanceaction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppSignalDbField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signalGroupID;
        break;
      }

      // optional int32 signalGroupID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalgroupid_)));
          set_has_signalgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signalInstanceID;
        break;
      }

      // optional int32 signalInstanceID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalinstanceid_)));
          set_has_signalinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_changesetID;
        break;
      }

      // optional int32 changesetID = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changesetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changesetid_)));
          set_has_changesetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_checkedOut;
        break;
      }

      // optional bool checkedOut = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkedOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkedout_)));
          set_has_checkedout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userID;
        break;
      }

      // optional int32 userID = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_created;
        break;
      }

      // optional int64 created = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_instanceCreated;
        break;
      }

      // optional int64 instanceCreated = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instancecreated_)));
          set_has_instancecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_instanceAction;
        break;
      }

      // optional int32 instanceAction = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceaction_)));
          set_has_instanceaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppSignalDbField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 signalGroupID = 2 [default = -1];
  if (has_signalgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signalgroupid(), output);
  }

  // optional int32 signalInstanceID = 3 [default = -1];
  if (has_signalinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signalinstanceid(), output);
  }

  // optional int32 changesetID = 4 [default = -1];
  if (has_changesetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->changesetid(), output);
  }

  // optional bool checkedOut = 5 [default = false];
  if (has_checkedout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->checkedout(), output);
  }

  // optional int32 userID = 6 [default = -1];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->userid(), output);
  }

  // optional int64 created = 7 [default = 0];
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->created(), output);
  }

  // optional bool deleted = 8 [default = false];
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->deleted(), output);
  }

  // optional int64 instanceCreated = 9 [default = 0];
  if (has_instancecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->instancecreated(), output);
  }

  // optional int32 instanceAction = 10 [default = 0];
  if (has_instanceaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->instanceaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppSignalDbField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 signalGroupID = 2 [default = -1];
  if (has_signalgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signalgroupid(), target);
  }

  // optional int32 signalInstanceID = 3 [default = -1];
  if (has_signalinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signalinstanceid(), target);
  }

  // optional int32 changesetID = 4 [default = -1];
  if (has_changesetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->changesetid(), target);
  }

  // optional bool checkedOut = 5 [default = false];
  if (has_checkedout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->checkedout(), target);
  }

  // optional int32 userID = 6 [default = -1];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->userid(), target);
  }

  // optional int64 created = 7 [default = 0];
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->created(), target);
  }

  // optional bool deleted = 8 [default = false];
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->deleted(), target);
  }

  // optional int64 instanceCreated = 9 [default = 0];
  if (has_instancecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->instancecreated(), target);
  }

  // optional int32 instanceAction = 10 [default = 0];
  if (has_instanceaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->instanceaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppSignalDbField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 signalGroupID = 2 [default = -1];
    if (has_signalgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalgroupid());
    }

    // optional int32 signalInstanceID = 3 [default = -1];
    if (has_signalinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalinstanceid());
    }

    // optional int32 changesetID = 4 [default = -1];
    if (has_changesetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changesetid());
    }

    // optional bool checkedOut = 5 [default = false];
    if (has_checkedout()) {
      total_size += 1 + 1;
    }

    // optional int32 userID = 6 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int64 created = 7 [default = 0];
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created());
    }

    // optional bool deleted = 8 [default = false];
    if (has_deleted()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 instanceCreated = 9 [default = 0];
    if (has_instancecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instancecreated());
    }

    // optional int32 instanceAction = 10 [default = 0];
    if (has_instanceaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppSignalDbField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppSignalDbField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppSignalDbField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppSignalDbField::MergeFrom(const AppSignalDbField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_signalgroupid()) {
      set_signalgroupid(from.signalgroupid());
    }
    if (from.has_signalinstanceid()) {
      set_signalinstanceid(from.signalinstanceid());
    }
    if (from.has_changesetid()) {
      set_changesetid(from.changesetid());
    }
    if (from.has_checkedout()) {
      set_checkedout(from.checkedout());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_instancecreated()) {
      set_instancecreated(from.instancecreated());
    }
    if (from.has_instanceaction()) {
      set_instanceaction(from.instanceaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppSignalDbField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalDbField::CopyFrom(const AppSignalDbField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalDbField::IsInitialized() const {

  return true;
}

void AppSignalDbField::Swap(AppSignalDbField* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(signalgroupid_, other->signalgroupid_);
    std::swap(signalinstanceid_, other->signalinstanceid_);
    std::swap(changesetid_, other->changesetid_);
    std::swap(checkedout_, other->checkedout_);
    std::swap(userid_, other->userid_);
    std::swap(created_, other->created_);
    std::swap(deleted_, other->deleted_);
    std::swap(instancecreated_, other->instancecreated_);
    std::swap(instanceaction_, other->instanceaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppSignalDbField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppSignalDbField_descriptor_;
  metadata.reflection = AppSignalDbField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppSignalCalculatedParam::kHashFieldNumber;
const int AppSignalCalculatedParam::kIoBufAddrFieldNumber;
const int AppSignalCalculatedParam::kTuningAddrFieldNumber;
const int AppSignalCalculatedParam::kUalAddrFieldNumber;
const int AppSignalCalculatedParam::kRegBufAddrFieldNumber;
const int AppSignalCalculatedParam::kRegValueAddrFieldNumber;
const int AppSignalCalculatedParam::kRegValidityAddrFieldNumber;
const int AppSignalCalculatedParam::kLmRamAccessFieldNumber;
const int AppSignalCalculatedParam::kIsConstFieldNumber;
const int AppSignalCalculatedParam::kConstValueFieldNumber;
#endif  // !_MSC_VER

AppSignalCalculatedParam::AppSignalCalculatedParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppSignalCalculatedParam::InitAsDefaultInstance() {
  iobufaddr_ = const_cast< ::Proto::Address16*>(&::Proto::Address16::default_instance());
  tuningaddr_ = const_cast< ::Proto::Address16*>(&::Proto::Address16::default_instance());
  ualaddr_ = const_cast< ::Proto::Address16*>(&::Proto::Address16::default_instance());
  regbufaddr_ = const_cast< ::Proto::Address16*>(&::Proto::Address16::default_instance());
  regvalueaddr_ = const_cast< ::Proto::Address16*>(&::Proto::Address16::default_instance());
  regvalidityaddr_ = const_cast< ::Proto::Address16*>(&::Proto::Address16::default_instance());
}

AppSignalCalculatedParam::AppSignalCalculatedParam(const AppSignalCalculatedParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppSignalCalculatedParam::SharedCtor() {
  _cached_size_ = 0;
  hash_ = GOOGLE_ULONGLONG(0);
  iobufaddr_ = NULL;
  tuningaddr_ = NULL;
  ualaddr_ = NULL;
  regbufaddr_ = NULL;
  regvalueaddr_ = NULL;
  regvalidityaddr_ = NULL;
  lmramaccess_ = 0;
  isconst_ = false;
  constvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppSignalCalculatedParam::~AppSignalCalculatedParam() {
  SharedDtor();
}

void AppSignalCalculatedParam::SharedDtor() {
  if (this != default_instance_) {
    delete iobufaddr_;
    delete tuningaddr_;
    delete ualaddr_;
    delete regbufaddr_;
    delete regvalueaddr_;
    delete regvalidityaddr_;
  }
}

void AppSignalCalculatedParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppSignalCalculatedParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppSignalCalculatedParam_descriptor_;
}

const AppSignalCalculatedParam& AppSignalCalculatedParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AppSignalCalculatedParam* AppSignalCalculatedParam::default_instance_ = NULL;

AppSignalCalculatedParam* AppSignalCalculatedParam::New() const {
  return new AppSignalCalculatedParam;
}

void AppSignalCalculatedParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = GOOGLE_ULONGLONG(0);
    if (has_iobufaddr()) {
      if (iobufaddr_ != NULL) iobufaddr_->::Proto::Address16::Clear();
    }
    if (has_tuningaddr()) {
      if (tuningaddr_ != NULL) tuningaddr_->::Proto::Address16::Clear();
    }
    if (has_ualaddr()) {
      if (ualaddr_ != NULL) ualaddr_->::Proto::Address16::Clear();
    }
    if (has_regbufaddr()) {
      if (regbufaddr_ != NULL) regbufaddr_->::Proto::Address16::Clear();
    }
    if (has_regvalueaddr()) {
      if (regvalueaddr_ != NULL) regvalueaddr_->::Proto::Address16::Clear();
    }
    if (has_regvalidityaddr()) {
      if (regvalidityaddr_ != NULL) regvalidityaddr_->::Proto::Address16::Clear();
    }
    lmramaccess_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isconst_ = false;
    constvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppSignalCalculatedParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hash = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ioBufAddr;
        break;
      }

      // optional .Proto.Address16 ioBufAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioBufAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iobufaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tuningAddr;
        break;
      }

      // optional .Proto.Address16 tuningAddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuningaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ualAddr;
        break;
      }

      // optional .Proto.Address16 ualAddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ualAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ualaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_regBufAddr;
        break;
      }

      // optional .Proto.Address16 regBufAddr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regBufAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regbufaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_regValueAddr;
        break;
      }

      // optional .Proto.Address16 regValueAddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regValueAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regvalueaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_regValidityAddr;
        break;
      }

      // optional .Proto.Address16 regValidityAddr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regValidityAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regvalidityaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lmRamAccess;
        break;
      }

      // optional int32 lmRamAccess = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmRamAccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmramaccess_)));
          set_has_lmramaccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isConst;
        break;
      }

      // optional bool isConst = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isConst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconst_)));
          set_has_isconst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_constValue;
        break;
      }

      // optional double constValue = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_constValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &constvalue_)));
          set_has_constvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppSignalCalculatedParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hash = 1 [default = 0];
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // optional .Proto.Address16 ioBufAddr = 2;
  if (has_iobufaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iobufaddr(), output);
  }

  // optional .Proto.Address16 tuningAddr = 3;
  if (has_tuningaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tuningaddr(), output);
  }

  // optional .Proto.Address16 ualAddr = 4;
  if (has_ualaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ualaddr(), output);
  }

  // optional .Proto.Address16 regBufAddr = 5;
  if (has_regbufaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->regbufaddr(), output);
  }

  // optional .Proto.Address16 regValueAddr = 6;
  if (has_regvalueaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->regvalueaddr(), output);
  }

  // optional .Proto.Address16 regValidityAddr = 7;
  if (has_regvalidityaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->regvalidityaddr(), output);
  }

  // optional int32 lmRamAccess = 8 [default = 0];
  if (has_lmramaccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lmramaccess(), output);
  }

  // optional bool isConst = 9 [default = false];
  if (has_isconst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isconst(), output);
  }

  // optional double constValue = 10 [default = 0];
  if (has_constvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->constvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppSignalCalculatedParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hash = 1 [default = 0];
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // optional .Proto.Address16 ioBufAddr = 2;
  if (has_iobufaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iobufaddr(), target);
  }

  // optional .Proto.Address16 tuningAddr = 3;
  if (has_tuningaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tuningaddr(), target);
  }

  // optional .Proto.Address16 ualAddr = 4;
  if (has_ualaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ualaddr(), target);
  }

  // optional .Proto.Address16 regBufAddr = 5;
  if (has_regbufaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->regbufaddr(), target);
  }

  // optional .Proto.Address16 regValueAddr = 6;
  if (has_regvalueaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->regvalueaddr(), target);
  }

  // optional .Proto.Address16 regValidityAddr = 7;
  if (has_regvalidityaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->regvalidityaddr(), target);
  }

  // optional int32 lmRamAccess = 8 [default = 0];
  if (has_lmramaccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lmramaccess(), target);
  }

  // optional bool isConst = 9 [default = false];
  if (has_isconst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isconst(), target);
  }

  // optional double constValue = 10 [default = 0];
  if (has_constvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->constvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppSignalCalculatedParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hash = 1 [default = 0];
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional .Proto.Address16 ioBufAddr = 2;
    if (has_iobufaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iobufaddr());
    }

    // optional .Proto.Address16 tuningAddr = 3;
    if (has_tuningaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuningaddr());
    }

    // optional .Proto.Address16 ualAddr = 4;
    if (has_ualaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ualaddr());
    }

    // optional .Proto.Address16 regBufAddr = 5;
    if (has_regbufaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regbufaddr());
    }

    // optional .Proto.Address16 regValueAddr = 6;
    if (has_regvalueaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regvalueaddr());
    }

    // optional .Proto.Address16 regValidityAddr = 7;
    if (has_regvalidityaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regvalidityaddr());
    }

    // optional int32 lmRamAccess = 8 [default = 0];
    if (has_lmramaccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmramaccess());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isConst = 9 [default = false];
    if (has_isconst()) {
      total_size += 1 + 1;
    }

    // optional double constValue = 10 [default = 0];
    if (has_constvalue()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppSignalCalculatedParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppSignalCalculatedParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppSignalCalculatedParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppSignalCalculatedParam::MergeFrom(const AppSignalCalculatedParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_iobufaddr()) {
      mutable_iobufaddr()->::Proto::Address16::MergeFrom(from.iobufaddr());
    }
    if (from.has_tuningaddr()) {
      mutable_tuningaddr()->::Proto::Address16::MergeFrom(from.tuningaddr());
    }
    if (from.has_ualaddr()) {
      mutable_ualaddr()->::Proto::Address16::MergeFrom(from.ualaddr());
    }
    if (from.has_regbufaddr()) {
      mutable_regbufaddr()->::Proto::Address16::MergeFrom(from.regbufaddr());
    }
    if (from.has_regvalueaddr()) {
      mutable_regvalueaddr()->::Proto::Address16::MergeFrom(from.regvalueaddr());
    }
    if (from.has_regvalidityaddr()) {
      mutable_regvalidityaddr()->::Proto::Address16::MergeFrom(from.regvalidityaddr());
    }
    if (from.has_lmramaccess()) {
      set_lmramaccess(from.lmramaccess());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isconst()) {
      set_isconst(from.isconst());
    }
    if (from.has_constvalue()) {
      set_constvalue(from.constvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppSignalCalculatedParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalCalculatedParam::CopyFrom(const AppSignalCalculatedParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalCalculatedParam::IsInitialized() const {

  if (has_iobufaddr()) {
    if (!this->iobufaddr().IsInitialized()) return false;
  }
  if (has_tuningaddr()) {
    if (!this->tuningaddr().IsInitialized()) return false;
  }
  if (has_ualaddr()) {
    if (!this->ualaddr().IsInitialized()) return false;
  }
  if (has_regbufaddr()) {
    if (!this->regbufaddr().IsInitialized()) return false;
  }
  if (has_regvalueaddr()) {
    if (!this->regvalueaddr().IsInitialized()) return false;
  }
  if (has_regvalidityaddr()) {
    if (!this->regvalidityaddr().IsInitialized()) return false;
  }
  return true;
}

void AppSignalCalculatedParam::Swap(AppSignalCalculatedParam* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(iobufaddr_, other->iobufaddr_);
    std::swap(tuningaddr_, other->tuningaddr_);
    std::swap(ualaddr_, other->ualaddr_);
    std::swap(regbufaddr_, other->regbufaddr_);
    std::swap(regvalueaddr_, other->regvalueaddr_);
    std::swap(regvalidityaddr_, other->regvalidityaddr_);
    std::swap(lmramaccess_, other->lmramaccess_);
    std::swap(isconst_, other->isconst_);
    std::swap(constvalue_, other->constvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppSignalCalculatedParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppSignalCalculatedParam_descriptor_;
  metadata.reflection = AppSignalCalculatedParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppSignal::kAppSignalIDFieldNumber;
const int AppSignal::kCustomAppSignalIDFieldNumber;
const int AppSignal::kCaptionFieldNumber;
const int AppSignal::kEquipmentIDFieldNumber;
const int AppSignal::kLmEquipmentIDFieldNumber;
const int AppSignal::kBusTypeIDFieldNumber;
const int AppSignal::kChannelFieldNumber;
const int AppSignal::kExcludeFromBuildFieldNumber;
const int AppSignal::kSignalTypeFieldNumber;
const int AppSignal::kInOutTypeFieldNumber;
const int AppSignal::kDataSizeFieldNumber;
const int AppSignal::kByteOrderFieldNumber;
const int AppSignal::kAnalogSignalFormatFieldNumber;
const int AppSignal::kUnitFieldNumber;
const int AppSignal::kEnableTuningFieldNumber;
const int AppSignal::kTuningDefaultValueFieldNumber;
const int AppSignal::kTuningLowBoundFieldNumber;
const int AppSignal::kTuningHighBoundFieldNumber;
const int AppSignal::kAcquireFieldNumber;
const int AppSignal::kArchiveFieldNumber;
const int AppSignal::kDecimalPlacesFieldNumber;
const int AppSignal::kCoarseApertureFieldNumber;
const int AppSignal::kFineApertureFieldNumber;
const int AppSignal::kAdaptiveApertureFieldNumber;
const int AppSignal::kSpecPropStructFieldNumber;
const int AppSignal::kSpecPropValuesFieldNumber;
const int AppSignal::kDbFieldFieldNumber;
const int AppSignal::kCalcParamFieldNumber;
#endif  // !_MSC_VER

AppSignal::AppSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppSignal::InitAsDefaultInstance() {
  tuningdefaultvalue_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  tuninglowbound_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  tuninghighbound_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  dbfield_ = const_cast< ::Proto::AppSignalDbField*>(&::Proto::AppSignalDbField::default_instance());
  calcparam_ = const_cast< ::Proto::AppSignalCalculatedParam*>(&::Proto::AppSignalCalculatedParam::default_instance());
}

AppSignal::AppSignal(const AppSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppSignal::SharedCtor() {
  _cached_size_ = 0;
  appsignalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customappsignalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmequipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bustypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  excludefrombuild_ = false;
  signaltype_ = 1;
  inouttype_ = 2;
  datasize_ = 0;
  byteorder_ = 1;
  analogsignalformat_ = 1;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabletuning_ = false;
  tuningdefaultvalue_ = NULL;
  tuninglowbound_ = NULL;
  tuninghighbound_ = NULL;
  acquire_ = false;
  archive_ = false;
  decimalplaces_ = 2;
  coarseaperture_ = 1;
  fineaperture_ = 0.5;
  adaptiveaperture_ = false;
  specpropstruct_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specpropvalues_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbfield_ = NULL;
  calcparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppSignal::~AppSignal() {
  SharedDtor();
}

void AppSignal::SharedDtor() {
  if (appsignalid_ != &::google::protobuf::internal::kEmptyString) {
    delete appsignalid_;
  }
  if (customappsignalid_ != &::google::protobuf::internal::kEmptyString) {
    delete customappsignalid_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmentid_;
  }
  if (lmequipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete lmequipmentid_;
  }
  if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete bustypeid_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (specpropstruct_ != &::google::protobuf::internal::kEmptyString) {
    delete specpropstruct_;
  }
  if (specpropvalues_ != &::google::protobuf::internal::kEmptyString) {
    delete specpropvalues_;
  }
  if (this != default_instance_) {
    delete tuningdefaultvalue_;
    delete tuninglowbound_;
    delete tuninghighbound_;
    delete dbfield_;
    delete calcparam_;
  }
}

void AppSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppSignal_descriptor_;
}

const AppSignal& AppSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AppSignal* AppSignal::default_instance_ = NULL;

AppSignal* AppSignal::New() const {
  return new AppSignal;
}

void AppSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appsignalid()) {
      if (appsignalid_ != &::google::protobuf::internal::kEmptyString) {
        appsignalid_->clear();
      }
    }
    if (has_customappsignalid()) {
      if (customappsignalid_ != &::google::protobuf::internal::kEmptyString) {
        customappsignalid_->clear();
      }
    }
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    if (has_equipmentid()) {
      if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        equipmentid_->clear();
      }
    }
    if (has_lmequipmentid()) {
      if (lmequipmentid_ != &::google::protobuf::internal::kEmptyString) {
        lmequipmentid_->clear();
      }
    }
    if (has_bustypeid()) {
      if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
        bustypeid_->clear();
      }
    }
    channel_ = 0;
    excludefrombuild_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    signaltype_ = 1;
    inouttype_ = 2;
    datasize_ = 0;
    byteorder_ = 1;
    analogsignalformat_ = 1;
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
    enabletuning_ = false;
    if (has_tuningdefaultvalue()) {
      if (tuningdefaultvalue_ != NULL) tuningdefaultvalue_->::Proto::TuningValue::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tuninglowbound()) {
      if (tuninglowbound_ != NULL) tuninglowbound_->::Proto::TuningValue::Clear();
    }
    if (has_tuninghighbound()) {
      if (tuninghighbound_ != NULL) tuninghighbound_->::Proto::TuningValue::Clear();
    }
    acquire_ = false;
    archive_ = false;
    decimalplaces_ = 2;
    coarseaperture_ = 1;
    fineaperture_ = 0.5;
    adaptiveaperture_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_specpropstruct()) {
      if (specpropstruct_ != &::google::protobuf::internal::kEmptyString) {
        specpropstruct_->clear();
      }
    }
    if (has_specpropvalues()) {
      if (specpropvalues_ != &::google::protobuf::internal::kEmptyString) {
        specpropvalues_->clear();
      }
    }
    if (has_dbfield()) {
      if (dbfield_ != NULL) dbfield_->::Proto::AppSignalDbField::Clear();
    }
    if (has_calcparam()) {
      if (calcparam_ != NULL) calcparam_->::Proto::AppSignalCalculatedParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appSignalID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appsignalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appsignalid().data(), this->appsignalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_customAppSignalID;
        break;
      }

      // optional string customAppSignalID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customAppSignalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customappsignalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customappsignalid().data(), this->customappsignalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_caption;
        break;
      }

      // optional string caption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equipmentID;
        break;
      }

      // optional string equipmentID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipmentid().data(), this->equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lmEquipmentID;
        break;
      }

      // optional string lmEquipmentID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmEquipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmequipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmequipmentid().data(), this->lmequipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_busTypeID;
        break;
      }

      // optional string busTypeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_busTypeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bustypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bustypeid().data(), this->bustypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channel;
        break;
      }

      // optional int32 channel = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_excludeFromBuild;
        break;
      }

      // optional bool excludeFromBuild = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludeFromBuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excludefrombuild_)));
          set_has_excludefrombuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_signalType;
        break;
      }

      // optional int32 signalType = 16 [default = 1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signaltype_)));
          set_has_signaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_inOutType;
        break;
      }

      // optional int32 inOutType = 17 [default = 2];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inOutType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inouttype_)));
          set_has_inouttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_dataSize;
        break;
      }

      // optional int32 dataSize = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_byteOrder;
        break;
      }

      // optional int32 byteOrder = 22 [default = 1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byteOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byteorder_)));
          set_has_byteorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_analogSignalFormat;
        break;
      }

      // optional int32 analogSignalFormat = 26 [default = 1];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analogSignalFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analogsignalformat_)));
          set_has_analogsignalformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_unit;
        break;
      }

      // optional string unit = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_enableTuning;
        break;
      }

      // optional bool enableTuning = 71 [default = false];
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableTuning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabletuning_)));
          set_has_enabletuning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_tuningDefaultValue;
        break;
      }

      // optional .Proto.TuningValue tuningDefaultValue = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningDefaultValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuningdefaultvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_tuningLowBound;
        break;
      }

      // optional .Proto.TuningValue tuningLowBound = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningLowBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuninglowbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_tuningHighBound;
        break;
      }

      // optional .Proto.TuningValue tuningHighBound = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningHighBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuninghighbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_acquire;
        break;
      }

      // optional bool acquire = 81 [default = false];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acquire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acquire_)));
          set_has_acquire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_archive;
        break;
      }

      // optional bool archive = 82 [default = false];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &archive_)));
          set_has_archive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_decimalPlaces;
        break;
      }

      // optional int32 decimalPlaces = 83 [default = 2];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimalPlaces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimalplaces_)));
          set_has_decimalplaces();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(673)) goto parse_coarseAperture;
        break;
      }

      // optional double coarseAperture = 84 [default = 1];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_coarseAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coarseaperture_)));
          set_has_coarseaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(681)) goto parse_fineAperture;
        break;
      }

      // optional double fineAperture = 85 [default = 0.5];
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fineAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fineaperture_)));
          set_has_fineaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_adaptiveAperture;
        break;
      }

      // optional bool adaptiveAperture = 86 [default = false];
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adaptiveAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adaptiveaperture_)));
          set_has_adaptiveaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_specPropStruct;
        break;
      }

      // optional string specPropStruct = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specPropStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specpropstruct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specpropstruct().data(), this->specpropstruct().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_specPropValues;
        break;
      }

      // optional bytes specPropValues = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specPropValues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_specpropvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(962)) goto parse_dbField;
        break;
      }

      // optional .Proto.AppSignalDbField dbField = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dbfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(970)) goto parse_calcParam;
        break;
      }

      // optional .Proto.AppSignalCalculatedParam calcParam = 121;
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calcParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calcparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string appSignalID = 1;
  if (has_appsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalid().data(), this->appsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appsignalid(), output);
  }

  // optional string customAppSignalID = 2;
  if (has_customappsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customappsignalid().data(), this->customappsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->customappsignalid(), output);
  }

  // optional string caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->caption(), output);
  }

  // optional string equipmentID = 4;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->equipmentid(), output);
  }

  // optional string lmEquipmentID = 5;
  if (has_lmequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmequipmentid().data(), this->lmequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lmequipmentid(), output);
  }

  // optional string busTypeID = 6;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bustypeid(), output);
  }

  // optional int32 channel = 7 [default = 0];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->channel(), output);
  }

  // optional bool excludeFromBuild = 8 [default = false];
  if (has_excludefrombuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->excludefrombuild(), output);
  }

  // optional int32 signalType = 16 [default = 1];
  if (has_signaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->signaltype(), output);
  }

  // optional int32 inOutType = 17 [default = 2];
  if (has_inouttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->inouttype(), output);
  }

  // optional int32 dataSize = 21 [default = 0];
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->datasize(), output);
  }

  // optional int32 byteOrder = 22 [default = 1];
  if (has_byteorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->byteorder(), output);
  }

  // optional int32 analogSignalFormat = 26 [default = 1];
  if (has_analogsignalformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->analogsignalformat(), output);
  }

  // optional string unit = 27;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->unit(), output);
  }

  // optional bool enableTuning = 71 [default = false];
  if (has_enabletuning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->enabletuning(), output);
  }

  // optional .Proto.TuningValue tuningDefaultValue = 72;
  if (has_tuningdefaultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->tuningdefaultvalue(), output);
  }

  // optional .Proto.TuningValue tuningLowBound = 73;
  if (has_tuninglowbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->tuninglowbound(), output);
  }

  // optional .Proto.TuningValue tuningHighBound = 74;
  if (has_tuninghighbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->tuninghighbound(), output);
  }

  // optional bool acquire = 81 [default = false];
  if (has_acquire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->acquire(), output);
  }

  // optional bool archive = 82 [default = false];
  if (has_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->archive(), output);
  }

  // optional int32 decimalPlaces = 83 [default = 2];
  if (has_decimalplaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(83, this->decimalplaces(), output);
  }

  // optional double coarseAperture = 84 [default = 1];
  if (has_coarseaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(84, this->coarseaperture(), output);
  }

  // optional double fineAperture = 85 [default = 0.5];
  if (has_fineaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(85, this->fineaperture(), output);
  }

  // optional bool adaptiveAperture = 86 [default = false];
  if (has_adaptiveaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->adaptiveaperture(), output);
  }

  // optional string specPropStruct = 90;
  if (has_specpropstruct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specpropstruct().data(), this->specpropstruct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      90, this->specpropstruct(), output);
  }

  // optional bytes specPropValues = 91;
  if (has_specpropvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      91, this->specpropvalues(), output);
  }

  // optional .Proto.AppSignalDbField dbField = 120;
  if (has_dbfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->dbfield(), output);
  }

  // optional .Proto.AppSignalCalculatedParam calcParam = 121;
  if (has_calcparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->calcparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string appSignalID = 1;
  if (has_appsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalid().data(), this->appsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appsignalid(), target);
  }

  // optional string customAppSignalID = 2;
  if (has_customappsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customappsignalid().data(), this->customappsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->customappsignalid(), target);
  }

  // optional string caption = 3;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->caption(), target);
  }

  // optional string equipmentID = 4;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->equipmentid(), target);
  }

  // optional string lmEquipmentID = 5;
  if (has_lmequipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmequipmentid().data(), this->lmequipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lmequipmentid(), target);
  }

  // optional string busTypeID = 6;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bustypeid(), target);
  }

  // optional int32 channel = 7 [default = 0];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->channel(), target);
  }

  // optional bool excludeFromBuild = 8 [default = false];
  if (has_excludefrombuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->excludefrombuild(), target);
  }

  // optional int32 signalType = 16 [default = 1];
  if (has_signaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->signaltype(), target);
  }

  // optional int32 inOutType = 17 [default = 2];
  if (has_inouttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->inouttype(), target);
  }

  // optional int32 dataSize = 21 [default = 0];
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->datasize(), target);
  }

  // optional int32 byteOrder = 22 [default = 1];
  if (has_byteorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->byteorder(), target);
  }

  // optional int32 analogSignalFormat = 26 [default = 1];
  if (has_analogsignalformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->analogsignalformat(), target);
  }

  // optional string unit = 27;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->unit(), target);
  }

  // optional bool enableTuning = 71 [default = false];
  if (has_enabletuning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->enabletuning(), target);
  }

  // optional .Proto.TuningValue tuningDefaultValue = 72;
  if (has_tuningdefaultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->tuningdefaultvalue(), target);
  }

  // optional .Proto.TuningValue tuningLowBound = 73;
  if (has_tuninglowbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->tuninglowbound(), target);
  }

  // optional .Proto.TuningValue tuningHighBound = 74;
  if (has_tuninghighbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->tuninghighbound(), target);
  }

  // optional bool acquire = 81 [default = false];
  if (has_acquire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->acquire(), target);
  }

  // optional bool archive = 82 [default = false];
  if (has_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->archive(), target);
  }

  // optional int32 decimalPlaces = 83 [default = 2];
  if (has_decimalplaces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(83, this->decimalplaces(), target);
  }

  // optional double coarseAperture = 84 [default = 1];
  if (has_coarseaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(84, this->coarseaperture(), target);
  }

  // optional double fineAperture = 85 [default = 0.5];
  if (has_fineaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(85, this->fineaperture(), target);
  }

  // optional bool adaptiveAperture = 86 [default = false];
  if (has_adaptiveaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->adaptiveaperture(), target);
  }

  // optional string specPropStruct = 90;
  if (has_specpropstruct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specpropstruct().data(), this->specpropstruct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->specpropstruct(), target);
  }

  // optional bytes specPropValues = 91;
  if (has_specpropvalues()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        91, this->specpropvalues(), target);
  }

  // optional .Proto.AppSignalDbField dbField = 120;
  if (has_dbfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->dbfield(), target);
  }

  // optional .Proto.AppSignalCalculatedParam calcParam = 121;
  if (has_calcparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, this->calcparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string appSignalID = 1;
    if (has_appsignalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appsignalid());
    }

    // optional string customAppSignalID = 2;
    if (has_customappsignalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customappsignalid());
    }

    // optional string caption = 3;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string equipmentID = 4;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmentid());
    }

    // optional string lmEquipmentID = 5;
    if (has_lmequipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmequipmentid());
    }

    // optional string busTypeID = 6;
    if (has_bustypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bustypeid());
    }

    // optional int32 channel = 7 [default = 0];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional bool excludeFromBuild = 8 [default = false];
    if (has_excludefrombuild()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 signalType = 16 [default = 1];
    if (has_signaltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signaltype());
    }

    // optional int32 inOutType = 17 [default = 2];
    if (has_inouttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inouttype());
    }

    // optional int32 dataSize = 21 [default = 0];
    if (has_datasize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datasize());
    }

    // optional int32 byteOrder = 22 [default = 1];
    if (has_byteorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byteorder());
    }

    // optional int32 analogSignalFormat = 26 [default = 1];
    if (has_analogsignalformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analogsignalformat());
    }

    // optional string unit = 27;
    if (has_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional bool enableTuning = 71 [default = false];
    if (has_enabletuning()) {
      total_size += 2 + 1;
    }

    // optional .Proto.TuningValue tuningDefaultValue = 72;
    if (has_tuningdefaultvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuningdefaultvalue());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Proto.TuningValue tuningLowBound = 73;
    if (has_tuninglowbound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuninglowbound());
    }

    // optional .Proto.TuningValue tuningHighBound = 74;
    if (has_tuninghighbound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuninghighbound());
    }

    // optional bool acquire = 81 [default = false];
    if (has_acquire()) {
      total_size += 2 + 1;
    }

    // optional bool archive = 82 [default = false];
    if (has_archive()) {
      total_size += 2 + 1;
    }

    // optional int32 decimalPlaces = 83 [default = 2];
    if (has_decimalplaces()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decimalplaces());
    }

    // optional double coarseAperture = 84 [default = 1];
    if (has_coarseaperture()) {
      total_size += 2 + 8;
    }

    // optional double fineAperture = 85 [default = 0.5];
    if (has_fineaperture()) {
      total_size += 2 + 8;
    }

    // optional bool adaptiveAperture = 86 [default = false];
    if (has_adaptiveaperture()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string specPropStruct = 90;
    if (has_specpropstruct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specpropstruct());
    }

    // optional bytes specPropValues = 91;
    if (has_specpropvalues()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->specpropvalues());
    }

    // optional .Proto.AppSignalDbField dbField = 120;
    if (has_dbfield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dbfield());
    }

    // optional .Proto.AppSignalCalculatedParam calcParam = 121;
    if (has_calcparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calcparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppSignal::MergeFrom(const AppSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appsignalid()) {
      set_appsignalid(from.appsignalid());
    }
    if (from.has_customappsignalid()) {
      set_customappsignalid(from.customappsignalid());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_lmequipmentid()) {
      set_lmequipmentid(from.lmequipmentid());
    }
    if (from.has_bustypeid()) {
      set_bustypeid(from.bustypeid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_excludefrombuild()) {
      set_excludefrombuild(from.excludefrombuild());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signaltype()) {
      set_signaltype(from.signaltype());
    }
    if (from.has_inouttype()) {
      set_inouttype(from.inouttype());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_byteorder()) {
      set_byteorder(from.byteorder());
    }
    if (from.has_analogsignalformat()) {
      set_analogsignalformat(from.analogsignalformat());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_enabletuning()) {
      set_enabletuning(from.enabletuning());
    }
    if (from.has_tuningdefaultvalue()) {
      mutable_tuningdefaultvalue()->::Proto::TuningValue::MergeFrom(from.tuningdefaultvalue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tuninglowbound()) {
      mutable_tuninglowbound()->::Proto::TuningValue::MergeFrom(from.tuninglowbound());
    }
    if (from.has_tuninghighbound()) {
      mutable_tuninghighbound()->::Proto::TuningValue::MergeFrom(from.tuninghighbound());
    }
    if (from.has_acquire()) {
      set_acquire(from.acquire());
    }
    if (from.has_archive()) {
      set_archive(from.archive());
    }
    if (from.has_decimalplaces()) {
      set_decimalplaces(from.decimalplaces());
    }
    if (from.has_coarseaperture()) {
      set_coarseaperture(from.coarseaperture());
    }
    if (from.has_fineaperture()) {
      set_fineaperture(from.fineaperture());
    }
    if (from.has_adaptiveaperture()) {
      set_adaptiveaperture(from.adaptiveaperture());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_specpropstruct()) {
      set_specpropstruct(from.specpropstruct());
    }
    if (from.has_specpropvalues()) {
      set_specpropvalues(from.specpropvalues());
    }
    if (from.has_dbfield()) {
      mutable_dbfield()->::Proto::AppSignalDbField::MergeFrom(from.dbfield());
    }
    if (from.has_calcparam()) {
      mutable_calcparam()->::Proto::AppSignalCalculatedParam::MergeFrom(from.calcparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignal::CopyFrom(const AppSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignal::IsInitialized() const {

  if (has_calcparam()) {
    if (!this->calcparam().IsInitialized()) return false;
  }
  return true;
}

void AppSignal::Swap(AppSignal* other) {
  if (other != this) {
    std::swap(appsignalid_, other->appsignalid_);
    std::swap(customappsignalid_, other->customappsignalid_);
    std::swap(caption_, other->caption_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(lmequipmentid_, other->lmequipmentid_);
    std::swap(bustypeid_, other->bustypeid_);
    std::swap(channel_, other->channel_);
    std::swap(excludefrombuild_, other->excludefrombuild_);
    std::swap(signaltype_, other->signaltype_);
    std::swap(inouttype_, other->inouttype_);
    std::swap(datasize_, other->datasize_);
    std::swap(byteorder_, other->byteorder_);
    std::swap(analogsignalformat_, other->analogsignalformat_);
    std::swap(unit_, other->unit_);
    std::swap(enabletuning_, other->enabletuning_);
    std::swap(tuningdefaultvalue_, other->tuningdefaultvalue_);
    std::swap(tuninglowbound_, other->tuninglowbound_);
    std::swap(tuninghighbound_, other->tuninghighbound_);
    std::swap(acquire_, other->acquire_);
    std::swap(archive_, other->archive_);
    std::swap(decimalplaces_, other->decimalplaces_);
    std::swap(coarseaperture_, other->coarseaperture_);
    std::swap(fineaperture_, other->fineaperture_);
    std::swap(adaptiveaperture_, other->adaptiveaperture_);
    std::swap(specpropstruct_, other->specpropstruct_);
    std::swap(specpropvalues_, other->specpropvalues_);
    std::swap(dbfield_, other->dbfield_);
    std::swap(calcparam_, other->calcparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppSignal_descriptor_;
  metadata.reflection = AppSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppSignalSet::kAppSignalFieldNumber;
#endif  // !_MSC_VER

AppSignalSet::AppSignalSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppSignalSet::InitAsDefaultInstance() {
}

AppSignalSet::AppSignalSet(const AppSignalSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppSignalSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppSignalSet::~AppSignalSet() {
  SharedDtor();
}

void AppSignalSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppSignalSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppSignalSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppSignalSet_descriptor_;
}

const AppSignalSet& AppSignalSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AppSignalSet* AppSignalSet::default_instance_ = NULL;

AppSignalSet* AppSignalSet::New() const {
  return new AppSignalSet;
}

void AppSignalSet::Clear() {
  appsignal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppSignalSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AppSignal appSignal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appsignal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_appSignal;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppSignalSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.AppSignal appSignal = 1;
  for (int i = 0; i < this->appsignal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->appsignal(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppSignalSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.AppSignal appSignal = 1;
  for (int i = 0; i < this->appsignal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->appsignal(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppSignalSet::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.AppSignal appSignal = 1;
  total_size += 1 * this->appsignal_size();
  for (int i = 0; i < this->appsignal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appsignal(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppSignalSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppSignalSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppSignalSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppSignalSet::MergeFrom(const AppSignalSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  appsignal_.MergeFrom(from.appsignal_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppSignalSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalSet::CopyFrom(const AppSignalSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalSet::IsInitialized() const {

  for (int i = 0; i < appsignal_size(); i++) {
    if (!this->appsignal(i).IsInitialized()) return false;
  }
  return true;
}

void AppSignalSet::Swap(AppSignalSet* other) {
  if (other != this) {
    appsignal_.Swap(&other->appsignal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppSignalSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppSignalSet_descriptor_;
  metadata.reflection = AppSignalSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAppSignalData::kBusTypeIDFieldNumber;
const int ProtoAppSignalData::kCaptionFieldNumber;
const int ProtoAppSignalData::kChannelFieldNumber;
const int ProtoAppSignalData::kDataSizeFieldNumber;
const int ProtoAppSignalData::kByteOrderFieldNumber;
const int ProtoAppSignalData::kAnalogSignalFormatFieldNumber;
const int ProtoAppSignalData::kUnitFieldNumber;
const int ProtoAppSignalData::kEnableTuningFieldNumber;
const int ProtoAppSignalData::kTuningDefaultValueFieldNumber;
const int ProtoAppSignalData::kTuningLowBoundFieldNumber;
const int ProtoAppSignalData::kTuningHighBoundFieldNumber;
const int ProtoAppSignalData::kAcquireFieldNumber;
const int ProtoAppSignalData::kArchiveFieldNumber;
const int ProtoAppSignalData::kDecimalPlacesFieldNumber;
const int ProtoAppSignalData::kCoarseApertureFieldNumber;
const int ProtoAppSignalData::kFineApertureFieldNumber;
const int ProtoAppSignalData::kAdaptiveApertureFieldNumber;
const int ProtoAppSignalData::kExcludefromBuildFieldNumber;
#endif  // !_MSC_VER

ProtoAppSignalData::ProtoAppSignalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAppSignalData::InitAsDefaultInstance() {
  tuningdefaultvalue_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  tuninglowbound_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
  tuninghighbound_ = const_cast< ::Proto::TuningValue*>(&::Proto::TuningValue::default_instance());
}

ProtoAppSignalData::ProtoAppSignalData(const ProtoAppSignalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAppSignalData::SharedCtor() {
  _cached_size_ = 0;
  bustypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  datasize_ = 32;
  byteorder_ = 1;
  analogsignalformat_ = 2;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabletuning_ = false;
  tuningdefaultvalue_ = NULL;
  tuninglowbound_ = NULL;
  tuninghighbound_ = NULL;
  acquire_ = true;
  archive_ = true;
  decimalplaces_ = 2;
  coarseaperture_ = 1;
  fineaperture_ = 0.5;
  adaptiveaperture_ = false;
  excludefrombuild_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAppSignalData::~ProtoAppSignalData() {
  SharedDtor();
}

void ProtoAppSignalData::SharedDtor() {
  if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete bustypeid_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (this != default_instance_) {
    delete tuningdefaultvalue_;
    delete tuninglowbound_;
    delete tuninghighbound_;
  }
}

void ProtoAppSignalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAppSignalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAppSignalData_descriptor_;
}

const ProtoAppSignalData& ProtoAppSignalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ProtoAppSignalData* ProtoAppSignalData::default_instance_ = NULL;

ProtoAppSignalData* ProtoAppSignalData::New() const {
  return new ProtoAppSignalData;
}

void ProtoAppSignalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bustypeid()) {
      if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
        bustypeid_->clear();
      }
    }
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    channel_ = 0;
    datasize_ = 32;
    byteorder_ = 1;
    analogsignalformat_ = 2;
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
    enabletuning_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tuningdefaultvalue()) {
      if (tuningdefaultvalue_ != NULL) tuningdefaultvalue_->::Proto::TuningValue::Clear();
    }
    if (has_tuninglowbound()) {
      if (tuninglowbound_ != NULL) tuninglowbound_->::Proto::TuningValue::Clear();
    }
    if (has_tuninghighbound()) {
      if (tuninghighbound_ != NULL) tuninghighbound_->::Proto::TuningValue::Clear();
    }
    acquire_ = true;
    archive_ = true;
    decimalplaces_ = 2;
    coarseaperture_ = 1;
    fineaperture_ = 0.5;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    adaptiveaperture_ = false;
    excludefrombuild_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAppSignalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string busTypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bustypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bustypeid().data(), this->bustypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caption;
        break;
      }

      // optional string caption = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataSize;
        break;
      }

      // optional int32 dataSize = 4 [default = 32];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_byteOrder;
        break;
      }

      // optional int32 byteOrder = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byteOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byteorder_)));
          set_has_byteorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_analogSignalFormat;
        break;
      }

      // optional int32 analogSignalFormat = 6 [default = 2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analogSignalFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analogsignalformat_)));
          set_has_analogsignalformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_unit;
        break;
      }

      // optional string unit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_enableTuning;
        break;
      }

      // optional bool enableTuning = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableTuning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabletuning_)));
          set_has_enabletuning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tuningDefaultValue;
        break;
      }

      // optional .Proto.TuningValue tuningDefaultValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningDefaultValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuningdefaultvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tuningLowBound;
        break;
      }

      // optional .Proto.TuningValue tuningLowBound = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningLowBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuninglowbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tuningHighBound;
        break;
      }

      // optional .Proto.TuningValue tuningHighBound = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuningHighBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuninghighbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_acquire;
        break;
      }

      // optional bool acquire = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acquire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acquire_)));
          set_has_acquire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_archive;
        break;
      }

      // optional bool archive = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &archive_)));
          set_has_archive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_decimalPlaces;
        break;
      }

      // optional int32 decimalPlaces = 14 [default = 2];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimalPlaces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimalplaces_)));
          set_has_decimalplaces();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_coarseAperture;
        break;
      }

      // optional double coarseAperture = 15 [default = 1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_coarseAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coarseaperture_)));
          set_has_coarseaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_fineAperture;
        break;
      }

      // optional double fineAperture = 16 [default = 0.5];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fineAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fineaperture_)));
          set_has_fineaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_adaptiveAperture;
        break;
      }

      // optional bool adaptiveAperture = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adaptiveAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adaptiveaperture_)));
          set_has_adaptiveaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_excludefromBuild;
        break;
      }

      // optional bool excludefromBuild = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludefromBuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excludefrombuild_)));
          set_has_excludefrombuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAppSignalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string busTypeID = 1;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bustypeid(), output);
  }

  // optional string caption = 2;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->caption(), output);
  }

  // optional int32 channel = 3 [default = 0];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // optional int32 dataSize = 4 [default = 32];
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datasize(), output);
  }

  // optional int32 byteOrder = 5 [default = 1];
  if (has_byteorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->byteorder(), output);
  }

  // optional int32 analogSignalFormat = 6 [default = 2];
  if (has_analogsignalformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->analogsignalformat(), output);
  }

  // optional string unit = 7;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->unit(), output);
  }

  // optional bool enableTuning = 8 [default = false];
  if (has_enabletuning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enabletuning(), output);
  }

  // optional .Proto.TuningValue tuningDefaultValue = 9;
  if (has_tuningdefaultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tuningdefaultvalue(), output);
  }

  // optional .Proto.TuningValue tuningLowBound = 10;
  if (has_tuninglowbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tuninglowbound(), output);
  }

  // optional .Proto.TuningValue tuningHighBound = 11;
  if (has_tuninghighbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tuninghighbound(), output);
  }

  // optional bool acquire = 12 [default = true];
  if (has_acquire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->acquire(), output);
  }

  // optional bool archive = 13 [default = true];
  if (has_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->archive(), output);
  }

  // optional int32 decimalPlaces = 14 [default = 2];
  if (has_decimalplaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->decimalplaces(), output);
  }

  // optional double coarseAperture = 15 [default = 1];
  if (has_coarseaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->coarseaperture(), output);
  }

  // optional double fineAperture = 16 [default = 0.5];
  if (has_fineaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->fineaperture(), output);
  }

  // optional bool adaptiveAperture = 17 [default = false];
  if (has_adaptiveaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->adaptiveaperture(), output);
  }

  // optional bool excludefromBuild = 18 [default = false];
  if (has_excludefrombuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->excludefrombuild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAppSignalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string busTypeID = 1;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bustypeid(), target);
  }

  // optional string caption = 2;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caption(), target);
  }

  // optional int32 channel = 3 [default = 0];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // optional int32 dataSize = 4 [default = 32];
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datasize(), target);
  }

  // optional int32 byteOrder = 5 [default = 1];
  if (has_byteorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->byteorder(), target);
  }

  // optional int32 analogSignalFormat = 6 [default = 2];
  if (has_analogsignalformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->analogsignalformat(), target);
  }

  // optional string unit = 7;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unit(), target);
  }

  // optional bool enableTuning = 8 [default = false];
  if (has_enabletuning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enabletuning(), target);
  }

  // optional .Proto.TuningValue tuningDefaultValue = 9;
  if (has_tuningdefaultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tuningdefaultvalue(), target);
  }

  // optional .Proto.TuningValue tuningLowBound = 10;
  if (has_tuninglowbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tuninglowbound(), target);
  }

  // optional .Proto.TuningValue tuningHighBound = 11;
  if (has_tuninghighbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tuninghighbound(), target);
  }

  // optional bool acquire = 12 [default = true];
  if (has_acquire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->acquire(), target);
  }

  // optional bool archive = 13 [default = true];
  if (has_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->archive(), target);
  }

  // optional int32 decimalPlaces = 14 [default = 2];
  if (has_decimalplaces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->decimalplaces(), target);
  }

  // optional double coarseAperture = 15 [default = 1];
  if (has_coarseaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->coarseaperture(), target);
  }

  // optional double fineAperture = 16 [default = 0.5];
  if (has_fineaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->fineaperture(), target);
  }

  // optional bool adaptiveAperture = 17 [default = false];
  if (has_adaptiveaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->adaptiveaperture(), target);
  }

  // optional bool excludefromBuild = 18 [default = false];
  if (has_excludefrombuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->excludefrombuild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAppSignalData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string busTypeID = 1;
    if (has_bustypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bustypeid());
    }

    // optional string caption = 2;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional int32 channel = 3 [default = 0];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 dataSize = 4 [default = 32];
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datasize());
    }

    // optional int32 byteOrder = 5 [default = 1];
    if (has_byteorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byteorder());
    }

    // optional int32 analogSignalFormat = 6 [default = 2];
    if (has_analogsignalformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analogsignalformat());
    }

    // optional string unit = 7;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional bool enableTuning = 8 [default = false];
    if (has_enabletuning()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Proto.TuningValue tuningDefaultValue = 9;
    if (has_tuningdefaultvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuningdefaultvalue());
    }

    // optional .Proto.TuningValue tuningLowBound = 10;
    if (has_tuninglowbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuninglowbound());
    }

    // optional .Proto.TuningValue tuningHighBound = 11;
    if (has_tuninghighbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuninghighbound());
    }

    // optional bool acquire = 12 [default = true];
    if (has_acquire()) {
      total_size += 1 + 1;
    }

    // optional bool archive = 13 [default = true];
    if (has_archive()) {
      total_size += 1 + 1;
    }

    // optional int32 decimalPlaces = 14 [default = 2];
    if (has_decimalplaces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decimalplaces());
    }

    // optional double coarseAperture = 15 [default = 1];
    if (has_coarseaperture()) {
      total_size += 1 + 8;
    }

    // optional double fineAperture = 16 [default = 0.5];
    if (has_fineaperture()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool adaptiveAperture = 17 [default = false];
    if (has_adaptiveaperture()) {
      total_size += 2 + 1;
    }

    // optional bool excludefromBuild = 18 [default = false];
    if (has_excludefrombuild()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAppSignalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAppSignalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAppSignalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAppSignalData::MergeFrom(const ProtoAppSignalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bustypeid()) {
      set_bustypeid(from.bustypeid());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_byteorder()) {
      set_byteorder(from.byteorder());
    }
    if (from.has_analogsignalformat()) {
      set_analogsignalformat(from.analogsignalformat());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_enabletuning()) {
      set_enabletuning(from.enabletuning());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tuningdefaultvalue()) {
      mutable_tuningdefaultvalue()->::Proto::TuningValue::MergeFrom(from.tuningdefaultvalue());
    }
    if (from.has_tuninglowbound()) {
      mutable_tuninglowbound()->::Proto::TuningValue::MergeFrom(from.tuninglowbound());
    }
    if (from.has_tuninghighbound()) {
      mutable_tuninghighbound()->::Proto::TuningValue::MergeFrom(from.tuninghighbound());
    }
    if (from.has_acquire()) {
      set_acquire(from.acquire());
    }
    if (from.has_archive()) {
      set_archive(from.archive());
    }
    if (from.has_decimalplaces()) {
      set_decimalplaces(from.decimalplaces());
    }
    if (from.has_coarseaperture()) {
      set_coarseaperture(from.coarseaperture());
    }
    if (from.has_fineaperture()) {
      set_fineaperture(from.fineaperture());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_adaptiveaperture()) {
      set_adaptiveaperture(from.adaptiveaperture());
    }
    if (from.has_excludefrombuild()) {
      set_excludefrombuild(from.excludefrombuild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAppSignalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAppSignalData::CopyFrom(const ProtoAppSignalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAppSignalData::IsInitialized() const {

  return true;
}

void ProtoAppSignalData::Swap(ProtoAppSignalData* other) {
  if (other != this) {
    std::swap(bustypeid_, other->bustypeid_);
    std::swap(caption_, other->caption_);
    std::swap(channel_, other->channel_);
    std::swap(datasize_, other->datasize_);
    std::swap(byteorder_, other->byteorder_);
    std::swap(analogsignalformat_, other->analogsignalformat_);
    std::swap(unit_, other->unit_);
    std::swap(enabletuning_, other->enabletuning_);
    std::swap(tuningdefaultvalue_, other->tuningdefaultvalue_);
    std::swap(tuninglowbound_, other->tuninglowbound_);
    std::swap(tuninghighbound_, other->tuninghighbound_);
    std::swap(acquire_, other->acquire_);
    std::swap(archive_, other->archive_);
    std::swap(decimalplaces_, other->decimalplaces_);
    std::swap(coarseaperture_, other->coarseaperture_);
    std::swap(fineaperture_, other->fineaperture_);
    std::swap(adaptiveaperture_, other->adaptiveaperture_);
    std::swap(excludefrombuild_, other->excludefrombuild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAppSignalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAppSignalData_descriptor_;
  metadata.reflection = ProtoAppSignalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppSignalState::kHashFieldNumber;
const int AppSignalState::kValueFieldNumber;
const int AppSignalState::kFlagsFieldNumber;
const int AppSignalState::kSystemTimeFieldNumber;
const int AppSignalState::kLocalTimeFieldNumber;
const int AppSignalState::kPlantTimeFieldNumber;
const int AppSignalState::kArchiveIdFieldNumber;
const int AppSignalState::kPacketNoFieldNumber;
#endif  // !_MSC_VER

AppSignalState::AppSignalState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppSignalState::InitAsDefaultInstance() {
}

AppSignalState::AppSignalState(const AppSignalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppSignalState::SharedCtor() {
  _cached_size_ = 0;
  hash_ = GOOGLE_ULONGLONG(0);
  value_ = 0;
  flags_ = 0u;
  systemtime_ = GOOGLE_LONGLONG(0);
  localtime_ = GOOGLE_LONGLONG(0);
  planttime_ = GOOGLE_LONGLONG(0);
  archiveid_ = GOOGLE_LONGLONG(-1);
  packetno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppSignalState::~AppSignalState() {
  SharedDtor();
}

void AppSignalState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppSignalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppSignalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppSignalState_descriptor_;
}

const AppSignalState& AppSignalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

AppSignalState* AppSignalState::default_instance_ = NULL;

AppSignalState* AppSignalState::New() const {
  return new AppSignalState;
}

void AppSignalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = GOOGLE_ULONGLONG(0);
    value_ = 0;
    flags_ = 0u;
    systemtime_ = GOOGLE_LONGLONG(0);
    localtime_ = GOOGLE_LONGLONG(0);
    planttime_ = GOOGLE_LONGLONG(0);
    archiveid_ = GOOGLE_LONGLONG(-1);
    packetno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppSignalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hash = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_systemTime;
        break;
      }

      // optional sfixed64 systemTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_systemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &systemtime_)));
          set_has_systemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_localTime;
        break;
      }

      // optional sfixed64 localTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_localTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &localtime_)));
          set_has_localtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_plantTime;
        break;
      }

      // optional sfixed64 plantTime = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_plantTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &planttime_)));
          set_has_planttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_archiveId;
        break;
      }

      // optional sfixed64 archiveId = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_archiveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &archiveid_)));
          set_has_archiveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_packetNo;
        break;
      }

      // optional uint32 packetNo = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packetNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packetno_)));
          set_has_packetno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppSignalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hash = 1 [default = 0];
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // optional double value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional sfixed64 systemTime = 4 [default = 0];
  if (has_systemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->systemtime(), output);
  }

  // optional sfixed64 localTime = 5 [default = 0];
  if (has_localtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->localtime(), output);
  }

  // optional sfixed64 plantTime = 6 [default = 0];
  if (has_planttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->planttime(), output);
  }

  // optional sfixed64 archiveId = 7 [default = -1];
  if (has_archiveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->archiveid(), output);
  }

  // optional uint32 packetNo = 8 [default = 0];
  if (has_packetno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->packetno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppSignalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hash = 1 [default = 0];
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // optional double value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional sfixed64 systemTime = 4 [default = 0];
  if (has_systemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->systemtime(), target);
  }

  // optional sfixed64 localTime = 5 [default = 0];
  if (has_localtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->localtime(), target);
  }

  // optional sfixed64 plantTime = 6 [default = 0];
  if (has_planttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->planttime(), target);
  }

  // optional sfixed64 archiveId = 7 [default = -1];
  if (has_archiveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->archiveid(), target);
  }

  // optional uint32 packetNo = 8 [default = 0];
  if (has_packetno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->packetno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppSignalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hash = 1 [default = 0];
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional double value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional uint32 flags = 3 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional sfixed64 systemTime = 4 [default = 0];
    if (has_systemtime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 localTime = 5 [default = 0];
    if (has_localtime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 plantTime = 6 [default = 0];
    if (has_planttime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 archiveId = 7 [default = -1];
    if (has_archiveid()) {
      total_size += 1 + 8;
    }

    // optional uint32 packetNo = 8 [default = 0];
    if (has_packetno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packetno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppSignalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppSignalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppSignalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppSignalState::MergeFrom(const AppSignalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_systemtime()) {
      set_systemtime(from.systemtime());
    }
    if (from.has_localtime()) {
      set_localtime(from.localtime());
    }
    if (from.has_planttime()) {
      set_planttime(from.planttime());
    }
    if (from.has_archiveid()) {
      set_archiveid(from.archiveid());
    }
    if (from.has_packetno()) {
      set_packetno(from.packetno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppSignalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppSignalState::CopyFrom(const AppSignalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSignalState::IsInitialized() const {

  return true;
}

void AppSignalState::Swap(AppSignalState* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(value_, other->value_);
    std::swap(flags_, other->flags_);
    std::swap(systemtime_, other->systemtime_);
    std::swap(localtime_, other->localtime_);
    std::swap(planttime_, other->planttime_);
    std::swap(archiveid_, other->archiveid_);
    std::swap(packetno_, other->packetno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppSignalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppSignalState_descriptor_;
  metadata.reflection = AppSignalState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Connection::kConnectionIDFieldNumber;
const int Connection::kPort1EquipmentIDFieldNumber;
const int Connection::kPort2EquipmentIDFieldNumber;
const int Connection::kPort1RawDataDescriptionFieldNumber;
const int Connection::kPort2RawDataDescriptionFieldNumber;
const int Connection::kManualSettingsFieldNumber;
const int Connection::kDisableDataIDFieldNumber;
const int Connection::kGenerateVHDFileFieldNumber;
const int Connection::kPort1TxStartAddressFieldNumber;
const int Connection::kPort1TxWordsQuantityFieldNumber;
const int Connection::kPort1RxWordsQuantityFieldNumber;
const int Connection::kPort2TxStartAddressFieldNumber;
const int Connection::kPort2TxWordsQuantityFieldNumber;
const int Connection::kPort2RxWordsQuantityFieldNumber;
const int Connection::kUuidFieldNumber;
const int Connection::kPort1EnableSerialFieldNumber;
const int Connection::kPort1SerialModeFieldNumber;
const int Connection::kPort1EnableDuplexFieldNumber;
const int Connection::kPort2EnableSerialFieldNumber;
const int Connection::kPort2SerialModeFieldNumber;
const int Connection::kPort2EnableDuplexFieldNumber;
const int Connection::kTypeFieldNumber;
const int Connection::kObsoleteModeFieldNumber;
const int Connection::kObsoleteSerialModeFieldNumber;
const int Connection::kObsoleteEnableDuplexFieldNumber;
#endif  // !_MSC_VER

Connection::Connection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Connection::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
}

Connection::Connection(const Connection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Connection::SharedCtor() {
  _cached_size_ = 0;
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port1equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port2equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port1rawdatadescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port2rawdatadescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manualsettings_ = false;
  disabledataid_ = false;
  generatevhdfile_ = false;
  port1txstartaddress_ = 0;
  port1txwordsquantity_ = 479;
  port1rxwordsquantity_ = 479;
  port2txstartaddress_ = 0;
  port2txwordsquantity_ = 479;
  port2rxwordsquantity_ = 479;
  uuid_ = NULL;
  port1enableserial_ = false;
  port1serialmode_ = 0;
  port1enableduplex_ = false;
  port2enableserial_ = false;
  port2serialmode_ = 0;
  port2enableduplex_ = false;
  type_ = 0;
  obsoletemode_ = 0;
  obsoleteserialmode_ = 0;
  obsoleteenableduplex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connection::~Connection() {
  SharedDtor();
}

void Connection::SharedDtor() {
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (port1equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete port1equipmentid_;
  }
  if (port2equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete port2equipmentid_;
  }
  if (port1rawdatadescription_ != &::google::protobuf::internal::kEmptyString) {
    delete port1rawdatadescription_;
  }
  if (port2rawdatadescription_ != &::google::protobuf::internal::kEmptyString) {
    delete port2rawdatadescription_;
  }
  if (this != default_instance_) {
    delete uuid_;
  }
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connection_descriptor_;
}

const Connection& Connection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Connection* Connection::default_instance_ = NULL;

Connection* Connection::New() const {
  return new Connection;
}

void Connection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
    if (has_port1equipmentid()) {
      if (port1equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        port1equipmentid_->clear();
      }
    }
    if (has_port2equipmentid()) {
      if (port2equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        port2equipmentid_->clear();
      }
    }
    if (has_port1rawdatadescription()) {
      if (port1rawdatadescription_ != &::google::protobuf::internal::kEmptyString) {
        port1rawdatadescription_->clear();
      }
    }
    if (has_port2rawdatadescription()) {
      if (port2rawdatadescription_ != &::google::protobuf::internal::kEmptyString) {
        port2rawdatadescription_->clear();
      }
    }
    manualsettings_ = false;
    disabledataid_ = false;
    generatevhdfile_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    port1txstartaddress_ = 0;
    port1txwordsquantity_ = 479;
    port1rxwordsquantity_ = 479;
    port2txstartaddress_ = 0;
    port2txwordsquantity_ = 479;
    port2rxwordsquantity_ = 479;
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    port1enableserial_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    port1serialmode_ = 0;
    port1enableduplex_ = false;
    port2enableserial_ = false;
    port2serialmode_ = 0;
    port2enableduplex_ = false;
    type_ = 0;
    obsoletemode_ = 0;
    obsoleteserialmode_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    obsoleteenableduplex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ConnectionID = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Port1EquipmentID;
        break;
      }

      // optional string Port1EquipmentID = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Port1EquipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port1equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port1equipmentid().data(), this->port1equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Port2EquipmentID;
        break;
      }

      // optional string Port2EquipmentID = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Port2EquipmentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port2equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port2equipmentid().data(), this->port2equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Port1RawDataDescription;
        break;
      }

      // optional string Port1RawDataDescription = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Port1RawDataDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port1rawdatadescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port1rawdatadescription().data(), this->port1rawdatadescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Port2RawDataDescription;
        break;
      }

      // optional string Port2RawDataDescription = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Port2RawDataDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port2rawdatadescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port2rawdatadescription().data(), this->port2rawdatadescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ObsoleteSerialMode;
        break;
      }

      // optional int32 ObsoleteSerialMode = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObsoleteSerialMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsoleteserialmode_)));
          set_has_obsoleteserialmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ObsoleteMode;
        break;
      }

      // optional int32 ObsoleteMode = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObsoleteMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsoletemode_)));
          set_has_obsoletemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ObsoleteEnableDuplex;
        break;
      }

      // optional bool ObsoleteEnableDuplex = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObsoleteEnableDuplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsoleteenableduplex_)));
          set_has_obsoleteenableduplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ManualSettings;
        break;
      }

      // optional bool ManualSettings = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ManualSettings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manualsettings_)));
          set_has_manualsettings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DisableDataID;
        break;
      }

      // optional bool DisableDataID = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DisableDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabledataid_)));
          set_has_disabledataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_GenerateVHDFile;
        break;
      }

      // optional bool GenerateVHDFile = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GenerateVHDFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generatevhdfile_)));
          set_has_generatevhdfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_Port1TxStartAddress;
        break;
      }

      // optional int32 Port1TxStartAddress = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port1TxStartAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port1txstartaddress_)));
          set_has_port1txstartaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Port1TxWordsQuantity;
        break;
      }

      // optional int32 Port1TxWordsQuantity = 15 [default = 479];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port1TxWordsQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port1txwordsquantity_)));
          set_has_port1txwordsquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Port1RxWordsQuantity;
        break;
      }

      // optional int32 Port1RxWordsQuantity = 16 [default = 479];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port1RxWordsQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port1rxwordsquantity_)));
          set_has_port1rxwordsquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Port2TxStartAddress;
        break;
      }

      // optional int32 Port2TxStartAddress = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port2TxStartAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port2txstartaddress_)));
          set_has_port2txstartaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Port2TxWordsQuantity;
        break;
      }

      // optional int32 Port2TxWordsQuantity = 18 [default = 479];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port2TxWordsQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port2txwordsquantity_)));
          set_has_port2txwordsquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Port2RxWordsQuantity;
        break;
      }

      // optional int32 Port2RxWordsQuantity = 19 [default = 479];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port2RxWordsQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port2rxwordsquantity_)));
          set_has_port2rxwordsquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_uuid;
        break;
      }

      // optional .Proto.Uuid uuid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Port1EnableSerial;
        break;
      }

      // optional bool Port1EnableSerial = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port1EnableSerial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &port1enableserial_)));
          set_has_port1enableserial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_Port1SerialMode;
        break;
      }

      // optional int32 Port1SerialMode = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port1SerialMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port1serialmode_)));
          set_has_port1serialmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_Port1EnableDuplex;
        break;
      }

      // optional bool Port1EnableDuplex = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port1EnableDuplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &port1enableduplex_)));
          set_has_port1enableduplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_Port2EnableSerial;
        break;
      }

      // optional bool Port2EnableSerial = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port2EnableSerial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &port2enableserial_)));
          set_has_port2enableserial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_Port2SerialMode;
        break;
      }

      // optional int32 Port2SerialMode = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port2SerialMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port2serialmode_)));
          set_has_port2serialmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_Port2EnableDuplex;
        break;
      }

      // optional bool Port2EnableDuplex = 26 [default = false];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port2EnableDuplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &port2enableduplex_)));
          set_has_port2enableduplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_Type;
        break;
      }

      // optional int32 Type = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ConnectionID = 2 [default = ""];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connectionid(), output);
  }

  // optional string Port1EquipmentID = 3 [default = ""];
  if (has_port1equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port1equipmentid().data(), this->port1equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->port1equipmentid(), output);
  }

  // optional string Port2EquipmentID = 4 [default = ""];
  if (has_port2equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port2equipmentid().data(), this->port2equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port2equipmentid(), output);
  }

  // optional string Port1RawDataDescription = 5 [default = ""];
  if (has_port1rawdatadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port1rawdatadescription().data(), this->port1rawdatadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->port1rawdatadescription(), output);
  }

  // optional string Port2RawDataDescription = 6 [default = ""];
  if (has_port2rawdatadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port2rawdatadescription().data(), this->port2rawdatadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->port2rawdatadescription(), output);
  }

  // optional int32 ObsoleteSerialMode = 7 [default = 0];
  if (has_obsoleteserialmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->obsoleteserialmode(), output);
  }

  // optional int32 ObsoleteMode = 8 [default = 0];
  if (has_obsoletemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->obsoletemode(), output);
  }

  // optional bool ObsoleteEnableDuplex = 10 [default = false];
  if (has_obsoleteenableduplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->obsoleteenableduplex(), output);
  }

  // optional bool ManualSettings = 11 [default = false];
  if (has_manualsettings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->manualsettings(), output);
  }

  // optional bool DisableDataID = 12 [default = false];
  if (has_disabledataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->disabledataid(), output);
  }

  // optional bool GenerateVHDFile = 13 [default = false];
  if (has_generatevhdfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->generatevhdfile(), output);
  }

  // optional int32 Port1TxStartAddress = 14 [default = 0];
  if (has_port1txstartaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->port1txstartaddress(), output);
  }

  // optional int32 Port1TxWordsQuantity = 15 [default = 479];
  if (has_port1txwordsquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->port1txwordsquantity(), output);
  }

  // optional int32 Port1RxWordsQuantity = 16 [default = 479];
  if (has_port1rxwordsquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->port1rxwordsquantity(), output);
  }

  // optional int32 Port2TxStartAddress = 17 [default = 0];
  if (has_port2txstartaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->port2txstartaddress(), output);
  }

  // optional int32 Port2TxWordsQuantity = 18 [default = 479];
  if (has_port2txwordsquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->port2txwordsquantity(), output);
  }

  // optional int32 Port2RxWordsQuantity = 19 [default = 479];
  if (has_port2rxwordsquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->port2rxwordsquantity(), output);
  }

  // optional .Proto.Uuid uuid = 20;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->uuid(), output);
  }

  // optional bool Port1EnableSerial = 21 [default = false];
  if (has_port1enableserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->port1enableserial(), output);
  }

  // optional int32 Port1SerialMode = 22 [default = 0];
  if (has_port1serialmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->port1serialmode(), output);
  }

  // optional bool Port1EnableDuplex = 23 [default = false];
  if (has_port1enableduplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->port1enableduplex(), output);
  }

  // optional bool Port2EnableSerial = 24 [default = false];
  if (has_port2enableserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->port2enableserial(), output);
  }

  // optional int32 Port2SerialMode = 25 [default = 0];
  if (has_port2serialmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->port2serialmode(), output);
  }

  // optional bool Port2EnableDuplex = 26 [default = false];
  if (has_port2enableduplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->port2enableduplex(), output);
  }

  // optional int32 Type = 27 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Connection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ConnectionID = 2 [default = ""];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connectionid(), target);
  }

  // optional string Port1EquipmentID = 3 [default = ""];
  if (has_port1equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port1equipmentid().data(), this->port1equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port1equipmentid(), target);
  }

  // optional string Port2EquipmentID = 4 [default = ""];
  if (has_port2equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port2equipmentid().data(), this->port2equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port2equipmentid(), target);
  }

  // optional string Port1RawDataDescription = 5 [default = ""];
  if (has_port1rawdatadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port1rawdatadescription().data(), this->port1rawdatadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->port1rawdatadescription(), target);
  }

  // optional string Port2RawDataDescription = 6 [default = ""];
  if (has_port2rawdatadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port2rawdatadescription().data(), this->port2rawdatadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->port2rawdatadescription(), target);
  }

  // optional int32 ObsoleteSerialMode = 7 [default = 0];
  if (has_obsoleteserialmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->obsoleteserialmode(), target);
  }

  // optional int32 ObsoleteMode = 8 [default = 0];
  if (has_obsoletemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->obsoletemode(), target);
  }

  // optional bool ObsoleteEnableDuplex = 10 [default = false];
  if (has_obsoleteenableduplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->obsoleteenableduplex(), target);
  }

  // optional bool ManualSettings = 11 [default = false];
  if (has_manualsettings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->manualsettings(), target);
  }

  // optional bool DisableDataID = 12 [default = false];
  if (has_disabledataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->disabledataid(), target);
  }

  // optional bool GenerateVHDFile = 13 [default = false];
  if (has_generatevhdfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->generatevhdfile(), target);
  }

  // optional int32 Port1TxStartAddress = 14 [default = 0];
  if (has_port1txstartaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->port1txstartaddress(), target);
  }

  // optional int32 Port1TxWordsQuantity = 15 [default = 479];
  if (has_port1txwordsquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->port1txwordsquantity(), target);
  }

  // optional int32 Port1RxWordsQuantity = 16 [default = 479];
  if (has_port1rxwordsquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->port1rxwordsquantity(), target);
  }

  // optional int32 Port2TxStartAddress = 17 [default = 0];
  if (has_port2txstartaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->port2txstartaddress(), target);
  }

  // optional int32 Port2TxWordsQuantity = 18 [default = 479];
  if (has_port2txwordsquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->port2txwordsquantity(), target);
  }

  // optional int32 Port2RxWordsQuantity = 19 [default = 479];
  if (has_port2rxwordsquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->port2rxwordsquantity(), target);
  }

  // optional .Proto.Uuid uuid = 20;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->uuid(), target);
  }

  // optional bool Port1EnableSerial = 21 [default = false];
  if (has_port1enableserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->port1enableserial(), target);
  }

  // optional int32 Port1SerialMode = 22 [default = 0];
  if (has_port1serialmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->port1serialmode(), target);
  }

  // optional bool Port1EnableDuplex = 23 [default = false];
  if (has_port1enableduplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->port1enableduplex(), target);
  }

  // optional bool Port2EnableSerial = 24 [default = false];
  if (has_port2enableserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->port2enableserial(), target);
  }

  // optional int32 Port2SerialMode = 25 [default = 0];
  if (has_port2serialmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->port2serialmode(), target);
  }

  // optional bool Port2EnableDuplex = 26 [default = false];
  if (has_port2enableduplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->port2enableduplex(), target);
  }

  // optional int32 Type = 27 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Connection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ConnectionID = 2 [default = ""];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

    // optional string Port1EquipmentID = 3 [default = ""];
    if (has_port1equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port1equipmentid());
    }

    // optional string Port2EquipmentID = 4 [default = ""];
    if (has_port2equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port2equipmentid());
    }

    // optional string Port1RawDataDescription = 5 [default = ""];
    if (has_port1rawdatadescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port1rawdatadescription());
    }

    // optional string Port2RawDataDescription = 6 [default = ""];
    if (has_port2rawdatadescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port2rawdatadescription());
    }

    // optional bool ManualSettings = 11 [default = false];
    if (has_manualsettings()) {
      total_size += 1 + 1;
    }

    // optional bool DisableDataID = 12 [default = false];
    if (has_disabledataid()) {
      total_size += 1 + 1;
    }

    // optional bool GenerateVHDFile = 13 [default = false];
    if (has_generatevhdfile()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Port1TxStartAddress = 14 [default = 0];
    if (has_port1txstartaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port1txstartaddress());
    }

    // optional int32 Port1TxWordsQuantity = 15 [default = 479];
    if (has_port1txwordsquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port1txwordsquantity());
    }

    // optional int32 Port1RxWordsQuantity = 16 [default = 479];
    if (has_port1rxwordsquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port1rxwordsquantity());
    }

    // optional int32 Port2TxStartAddress = 17 [default = 0];
    if (has_port2txstartaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port2txstartaddress());
    }

    // optional int32 Port2TxWordsQuantity = 18 [default = 479];
    if (has_port2txwordsquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port2txwordsquantity());
    }

    // optional int32 Port2RxWordsQuantity = 19 [default = 479];
    if (has_port2rxwordsquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port2rxwordsquantity());
    }

    // optional .Proto.Uuid uuid = 20;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // optional bool Port1EnableSerial = 21 [default = false];
    if (has_port1enableserial()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 Port1SerialMode = 22 [default = 0];
    if (has_port1serialmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port1serialmode());
    }

    // optional bool Port1EnableDuplex = 23 [default = false];
    if (has_port1enableduplex()) {
      total_size += 2 + 1;
    }

    // optional bool Port2EnableSerial = 24 [default = false];
    if (has_port2enableserial()) {
      total_size += 2 + 1;
    }

    // optional int32 Port2SerialMode = 25 [default = 0];
    if (has_port2serialmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port2serialmode());
    }

    // optional bool Port2EnableDuplex = 26 [default = false];
    if (has_port2enableduplex()) {
      total_size += 2 + 1;
    }

    // optional int32 Type = 27 [default = 0];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ObsoleteMode = 8 [default = 0];
    if (has_obsoletemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obsoletemode());
    }

    // optional int32 ObsoleteSerialMode = 7 [default = 0];
    if (has_obsoleteserialmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obsoleteserialmode());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool ObsoleteEnableDuplex = 10 [default = false];
    if (has_obsoleteenableduplex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
    if (from.has_port1equipmentid()) {
      set_port1equipmentid(from.port1equipmentid());
    }
    if (from.has_port2equipmentid()) {
      set_port2equipmentid(from.port2equipmentid());
    }
    if (from.has_port1rawdatadescription()) {
      set_port1rawdatadescription(from.port1rawdatadescription());
    }
    if (from.has_port2rawdatadescription()) {
      set_port2rawdatadescription(from.port2rawdatadescription());
    }
    if (from.has_manualsettings()) {
      set_manualsettings(from.manualsettings());
    }
    if (from.has_disabledataid()) {
      set_disabledataid(from.disabledataid());
    }
    if (from.has_generatevhdfile()) {
      set_generatevhdfile(from.generatevhdfile());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_port1txstartaddress()) {
      set_port1txstartaddress(from.port1txstartaddress());
    }
    if (from.has_port1txwordsquantity()) {
      set_port1txwordsquantity(from.port1txwordsquantity());
    }
    if (from.has_port1rxwordsquantity()) {
      set_port1rxwordsquantity(from.port1rxwordsquantity());
    }
    if (from.has_port2txstartaddress()) {
      set_port2txstartaddress(from.port2txstartaddress());
    }
    if (from.has_port2txwordsquantity()) {
      set_port2txwordsquantity(from.port2txwordsquantity());
    }
    if (from.has_port2rxwordsquantity()) {
      set_port2rxwordsquantity(from.port2rxwordsquantity());
    }
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_port1enableserial()) {
      set_port1enableserial(from.port1enableserial());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_port1serialmode()) {
      set_port1serialmode(from.port1serialmode());
    }
    if (from.has_port1enableduplex()) {
      set_port1enableduplex(from.port1enableduplex());
    }
    if (from.has_port2enableserial()) {
      set_port2enableserial(from.port2enableserial());
    }
    if (from.has_port2serialmode()) {
      set_port2serialmode(from.port2serialmode());
    }
    if (from.has_port2enableduplex()) {
      set_port2enableduplex(from.port2enableduplex());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_obsoletemode()) {
      set_obsoletemode(from.obsoletemode());
    }
    if (from.has_obsoleteserialmode()) {
      set_obsoleteserialmode(from.obsoleteserialmode());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_obsoleteenableduplex()) {
      set_obsoleteenableduplex(from.obsoleteenableduplex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  return true;
}

void Connection::Swap(Connection* other) {
  if (other != this) {
    std::swap(connectionid_, other->connectionid_);
    std::swap(port1equipmentid_, other->port1equipmentid_);
    std::swap(port2equipmentid_, other->port2equipmentid_);
    std::swap(port1rawdatadescription_, other->port1rawdatadescription_);
    std::swap(port2rawdatadescription_, other->port2rawdatadescription_);
    std::swap(manualsettings_, other->manualsettings_);
    std::swap(disabledataid_, other->disabledataid_);
    std::swap(generatevhdfile_, other->generatevhdfile_);
    std::swap(port1txstartaddress_, other->port1txstartaddress_);
    std::swap(port1txwordsquantity_, other->port1txwordsquantity_);
    std::swap(port1rxwordsquantity_, other->port1rxwordsquantity_);
    std::swap(port2txstartaddress_, other->port2txstartaddress_);
    std::swap(port2txwordsquantity_, other->port2txwordsquantity_);
    std::swap(port2rxwordsquantity_, other->port2rxwordsquantity_);
    std::swap(uuid_, other->uuid_);
    std::swap(port1enableserial_, other->port1enableserial_);
    std::swap(port1serialmode_, other->port1serialmode_);
    std::swap(port1enableduplex_, other->port1enableduplex_);
    std::swap(port2enableserial_, other->port2enableserial_);
    std::swap(port2serialmode_, other->port2serialmode_);
    std::swap(port2enableduplex_, other->port2enableduplex_);
    std::swap(type_, other->type_);
    std::swap(obsoletemode_, other->obsoletemode_);
    std::swap(obsoleteserialmode_, other->obsoleteserialmode_);
    std::swap(obsoleteenableduplex_, other->obsoleteenableduplex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connection_descriptor_;
  metadata.reflection = Connection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaDetailsSet::kSchemasDetailsFieldNumber;
#endif  // !_MSC_VER

SchemaDetailsSet::SchemaDetailsSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaDetailsSet::InitAsDefaultInstance() {
}

SchemaDetailsSet::SchemaDetailsSet(const SchemaDetailsSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaDetailsSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaDetailsSet::~SchemaDetailsSet() {
  SharedDtor();
}

void SchemaDetailsSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaDetailsSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaDetailsSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaDetailsSet_descriptor_;
}

const SchemaDetailsSet& SchemaDetailsSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaDetailsSet* SchemaDetailsSet::default_instance_ = NULL;

SchemaDetailsSet* SchemaDetailsSet::New() const {
  return new SchemaDetailsSet;
}

void SchemaDetailsSet::Clear() {
  schemasdetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaDetailsSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.SchemaDetails schemasDetails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemasDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemasdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schemasDetails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaDetailsSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.SchemaDetails schemasDetails = 2;
  for (int i = 0; i < this->schemasdetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schemasdetails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaDetailsSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.SchemaDetails schemasDetails = 2;
  for (int i = 0; i < this->schemasdetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schemasdetails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaDetailsSet::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.SchemaDetails schemasDetails = 2;
  total_size += 1 * this->schemasdetails_size();
  for (int i = 0; i < this->schemasdetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemasdetails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaDetailsSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaDetailsSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaDetailsSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaDetailsSet::MergeFrom(const SchemaDetailsSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  schemasdetails_.MergeFrom(from.schemasdetails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaDetailsSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaDetailsSet::CopyFrom(const SchemaDetailsSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaDetailsSet::IsInitialized() const {

  for (int i = 0; i < schemasdetails_size(); i++) {
    if (!this->schemasdetails(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaDetailsSet::Swap(SchemaDetailsSet* other) {
  if (other != this) {
    schemasdetails_.Swap(&other->schemasdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaDetailsSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaDetailsSet_descriptor_;
  metadata.reflection = SchemaDetailsSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaDetails::kVersionFieldNumber;
const int SchemaDetails::kSchemaIdFieldNumber;
const int SchemaDetails::kCaptionFieldNumber;
const int SchemaDetails::kExcludedfromBuildFieldNumber;
const int SchemaDetails::kEquipmentIdFieldNumber;
const int SchemaDetails::kLmDescriptionFileFieldNumber;
const int SchemaDetails::kSignalIdsFieldNumber;
const int SchemaDetails::kLabelsFieldNumber;
const int SchemaDetails::kConnectionsFieldNumber;
const int SchemaDetails::kGuidsFieldNumber;
const int SchemaDetails::kTagsFieldNumber;
#endif  // !_MSC_VER

SchemaDetails::SchemaDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaDetails::InitAsDefaultInstance() {
}

SchemaDetails::SchemaDetails(const SchemaDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaDetails::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  schemaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  excludedfrombuild_ = false;
  equipmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmdescriptionfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaDetails::~SchemaDetails() {
  SharedDtor();
}

void SchemaDetails::SharedDtor() {
  if (schemaid_ != &::google::protobuf::internal::kEmptyString) {
    delete schemaid_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmentid_;
  }
  if (lmdescriptionfile_ != &::google::protobuf::internal::kEmptyString) {
    delete lmdescriptionfile_;
  }
  if (this != default_instance_) {
  }
}

void SchemaDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaDetails_descriptor_;
}

const SchemaDetails& SchemaDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

SchemaDetails* SchemaDetails::default_instance_ = NULL;

SchemaDetails* SchemaDetails::New() const {
  return new SchemaDetails;
}

void SchemaDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_schemaid()) {
      if (schemaid_ != &::google::protobuf::internal::kEmptyString) {
        schemaid_->clear();
      }
    }
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    excludedfrombuild_ = false;
    if (has_equipmentid()) {
      if (equipmentid_ != &::google::protobuf::internal::kEmptyString) {
        equipmentid_->clear();
      }
    }
    if (has_lmdescriptionfile()) {
      if (lmdescriptionfile_ != &::google::protobuf::internal::kEmptyString) {
        lmdescriptionfile_->clear();
      }
    }
  }
  signalids_.Clear();
  labels_.Clear();
  connections_.Clear();
  guids_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_schemaId;
        break;
      }

      // optional string schemaId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schemaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->schemaid().data(), this->schemaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_caption;
        break;
      }

      // optional string caption = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_excludedfromBuild;
        break;
      }

      // optional bool excludedfromBuild = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludedfromBuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excludedfrombuild_)));
          set_has_excludedfrombuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equipmentId;
        break;
      }

      // optional string equipmentId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipmentid().data(), this->equipmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lmDescriptionFile;
        break;
      }

      // optional string lmDescriptionFile = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmDescriptionFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmdescriptionfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_signalIds;
        break;
      }

      // repeated string signalIds = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signalids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalids(this->signalids_size() - 1).data(),
            this->signalids(this->signalids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_signalIds;
        if (input->ExpectTag(170)) goto parse_labels;
        break;
      }

      // repeated string labels = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_labels;
        if (input->ExpectTag(178)) goto parse_connections;
        break;
      }

      // repeated string connections = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_connections()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connections(this->connections_size() - 1).data(),
            this->connections(this->connections_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_connections;
        if (input->ExpectTag(186)) goto parse_guids;
        break;
      }

      // repeated .Proto.Uuid guids = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_guids;
        if (input->ExpectTag(194)) goto parse_tags;
        break;
      }

      // repeated string tags = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional string schemaId = 4;
  if (has_schemaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schemaid().data(), this->schemaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->schemaid(), output);
  }

  // optional string caption = 5;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->caption(), output);
  }

  // optional bool excludedfromBuild = 6;
  if (has_excludedfrombuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->excludedfrombuild(), output);
  }

  // optional string equipmentId = 7;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->equipmentid(), output);
  }

  // optional string lmDescriptionFile = 8;
  if (has_lmdescriptionfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lmdescriptionfile(), output);
  }

  // repeated string signalIds = 20;
  for (int i = 0; i < this->signalids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->signalids(i).data(), this->signalids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->signalids(i), output);
  }

  // repeated string labels = 21;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->labels(i), output);
  }

  // repeated string connections = 22;
  for (int i = 0; i < this->connections_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->connections(i).data(), this->connections(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->connections(i), output);
  }

  // repeated .Proto.Uuid guids = 23;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->guids(i), output);
  }

  // repeated string tags = 24;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional string schemaId = 4;
  if (has_schemaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schemaid().data(), this->schemaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->schemaid(), target);
  }

  // optional string caption = 5;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->caption(), target);
  }

  // optional bool excludedfromBuild = 6;
  if (has_excludedfrombuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->excludedfrombuild(), target);
  }

  // optional string equipmentId = 7;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipmentid().data(), this->equipmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->equipmentid(), target);
  }

  // optional string lmDescriptionFile = 8;
  if (has_lmdescriptionfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lmdescriptionfile().data(), this->lmdescriptionfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lmdescriptionfile(), target);
  }

  // repeated string signalIds = 20;
  for (int i = 0; i < this->signalids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalids(i).data(), this->signalids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->signalids(i), target);
  }

  // repeated string labels = 21;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->labels(i), target);
  }

  // repeated string connections = 22;
  for (int i = 0; i < this->connections_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connections(i).data(), this->connections(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->connections(i), target);
  }

  // repeated .Proto.Uuid guids = 23;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->guids(i), target);
  }

  // repeated string tags = 24;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string schemaId = 4;
    if (has_schemaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schemaid());
    }

    // optional string caption = 5;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional bool excludedfromBuild = 6;
    if (has_excludedfrombuild()) {
      total_size += 1 + 1;
    }

    // optional string equipmentId = 7;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmentid());
    }

    // optional string lmDescriptionFile = 8;
    if (has_lmdescriptionfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lmdescriptionfile());
    }

  }
  // repeated string signalIds = 20;
  total_size += 2 * this->signalids_size();
  for (int i = 0; i < this->signalids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signalids(i));
  }

  // repeated string labels = 21;
  total_size += 2 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  // repeated string connections = 22;
  total_size += 2 * this->connections_size();
  for (int i = 0; i < this->connections_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->connections(i));
  }

  // repeated .Proto.Uuid guids = 23;
  total_size += 2 * this->guids_size();
  for (int i = 0; i < this->guids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guids(i));
  }

  // repeated string tags = 24;
  total_size += 2 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaDetails::MergeFrom(const SchemaDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalids_.MergeFrom(from.signalids_);
  labels_.MergeFrom(from.labels_);
  connections_.MergeFrom(from.connections_);
  guids_.MergeFrom(from.guids_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_schemaid()) {
      set_schemaid(from.schemaid());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_excludedfrombuild()) {
      set_excludedfrombuild(from.excludedfrombuild());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_lmdescriptionfile()) {
      set_lmdescriptionfile(from.lmdescriptionfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaDetails::CopyFrom(const SchemaDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaDetails::IsInitialized() const {

  for (int i = 0; i < guids_size(); i++) {
    if (!this->guids(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaDetails::Swap(SchemaDetails* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(schemaid_, other->schemaid_);
    std::swap(caption_, other->caption_);
    std::swap(excludedfrombuild_, other->excludedfrombuild_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(lmdescriptionfile_, other->lmdescriptionfile_);
    signalids_.Swap(&other->signalids_);
    labels_.Swap(&other->labels_);
    connections_.Swap(&other->connections_);
    guids_.Swap(&other->guids_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaDetails_descriptor_;
  metadata.reflection = SchemaDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArchSignal::kHashFieldNumber;
const int ArchSignal::kIsAnalogFieldNumber;
const int ArchSignal::kAppSignalIDFieldNumber;
#endif  // !_MSC_VER

ArchSignal::ArchSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchSignal::InitAsDefaultInstance() {
}

ArchSignal::ArchSignal(const ArchSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchSignal::SharedCtor() {
  _cached_size_ = 0;
  hash_ = GOOGLE_ULONGLONG(0);
  isanalog_ = false;
  appsignalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchSignal::~ArchSignal() {
  SharedDtor();
}

void ArchSignal::SharedDtor() {
  if (appsignalid_ != &::google::protobuf::internal::kEmptyString) {
    delete appsignalid_;
  }
  if (this != default_instance_) {
  }
}

void ArchSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchSignal_descriptor_;
}

const ArchSignal& ArchSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ArchSignal* ArchSignal::default_instance_ = NULL;

ArchSignal* ArchSignal::New() const {
  return new ArchSignal;
}

void ArchSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = GOOGLE_ULONGLONG(0);
    isanalog_ = false;
    if (has_appsignalid()) {
      if (appsignalid_ != &::google::protobuf::internal::kEmptyString) {
        appsignalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAnalog;
        break;
      }

      // required bool isAnalog = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAnalog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isanalog_)));
          set_has_isanalog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appSignalID;
        break;
      }

      // required string appSignalID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSignalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appsignalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appsignalid().data(), this->appsignalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // required bool isAnalog = 2;
  if (has_isanalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isanalog(), output);
  }

  // required string appSignalID = 3;
  if (has_appsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalid().data(), this->appsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appsignalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // required bool isAnalog = 2;
  if (has_isanalog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isanalog(), target);
  }

  // required string appSignalID = 3;
  if (has_appsignalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appsignalid().data(), this->appsignalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appsignalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // required bool isAnalog = 2;
    if (has_isanalog()) {
      total_size += 1 + 1;
    }

    // required string appSignalID = 3;
    if (has_appsignalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appsignalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchSignal::MergeFrom(const ArchSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_isanalog()) {
      set_isanalog(from.isanalog());
    }
    if (from.has_appsignalid()) {
      set_appsignalid(from.appsignalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchSignal::CopyFrom(const ArchSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ArchSignal::Swap(ArchSignal* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(isanalog_, other->isanalog_);
    std::swap(appsignalid_, other->appsignalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchSignal_descriptor_;
  metadata.reflection = ArchSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArchSignals::kArchSignalsFieldNumber;
#endif  // !_MSC_VER

ArchSignals::ArchSignals()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchSignals::InitAsDefaultInstance() {
}

ArchSignals::ArchSignals(const ArchSignals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchSignals::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchSignals::~ArchSignals() {
  SharedDtor();
}

void ArchSignals::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArchSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchSignals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchSignals_descriptor_;
}

const ArchSignals& ArchSignals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

ArchSignals* ArchSignals::default_instance_ = NULL;

ArchSignals* ArchSignals::New() const {
  return new ArchSignals;
}

void ArchSignals::Clear() {
  archsignals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.ArchSignal archSignals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_archsignals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_archSignals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.ArchSignal archSignals = 1;
  for (int i = 0; i < this->archsignals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->archsignals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchSignals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.ArchSignal archSignals = 1;
  for (int i = 0; i < this->archsignals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->archsignals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchSignals::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.ArchSignal archSignals = 1;
  total_size += 1 * this->archsignals_size();
  for (int i = 0; i < this->archsignals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->archsignals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchSignals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchSignals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchSignals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchSignals::MergeFrom(const ArchSignals& from) {
  GOOGLE_CHECK_NE(&from, this);
  archsignals_.MergeFrom(from.archsignals_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchSignals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchSignals::CopyFrom(const ArchSignals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchSignals::IsInitialized() const {

  for (int i = 0; i < archsignals_size(); i++) {
    if (!this->archsignals(i).IsInitialized()) return false;
  }
  return true;
}

void ArchSignals::Swap(ArchSignals* other) {
  if (other != this) {
    archsignals_.Swap(&other->archsignals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchSignals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchSignals_descriptor_;
  metadata.reflection = ArchSignals_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusSignal::kSignalIdFieldNumber;
const int BusSignal::kCaptionFieldNumber;
const int BusSignal::kTypeFieldNumber;
const int BusSignal::kUnitsFieldNumber;
const int BusSignal::kAnalogFormatFieldNumber;
const int BusSignal::kPrecisionFieldNumber;
const int BusSignal::kCoarseApertureFieldNumber;
const int BusSignal::kFineApertureFieldNumber;
const int BusSignal::kAdaptiveApertureFieldNumber;
const int BusSignal::kBusTypeIdFieldNumber;
const int BusSignal::kInbusOffsetFieldNumber;
const int BusSignal::kInbusDiscreteBitNoFieldNumber;
const int BusSignal::kInbusAnalogSizeFieldNumber;
const int BusSignal::kInbusAnalogFormatFieldNumber;
const int BusSignal::kInbusAnalogByteOrderFieldNumber;
const int BusSignal::kBusAnalogLowLimitFieldNumber;
const int BusSignal::kBusAnalogHighLimitFieldNumber;
const int BusSignal::kInbusAnalogLowLimitFieldNumber;
const int BusSignal::kInbusAnalogHighLimitFieldNumber;
#endif  // !_MSC_VER

BusSignal::BusSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BusSignal::InitAsDefaultInstance() {
}

BusSignal::BusSignal(const BusSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BusSignal::SharedCtor() {
  _cached_size_ = 0;
  signalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  analogformat_ = 0;
  precision_ = 2;
  coarseaperture_ = 1;
  fineaperture_ = 0.5;
  adaptiveaperture_ = false;
  bustypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inbusoffset_ = 0;
  inbusdiscretebitno_ = 0;
  inbusanalogsize_ = 0;
  inbusanalogformat_ = 0;
  inbusanalogbyteorder_ = 0;
  busanaloglowlimit_ = 0;
  busanaloghighlimit_ = 0;
  inbusanaloglowlimit_ = 0;
  inbusanaloghighlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusSignal::~BusSignal() {
  SharedDtor();
}

void BusSignal::SharedDtor() {
  if (signalid_ != &::google::protobuf::internal::kEmptyString) {
    delete signalid_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete bustypeid_;
  }
  if (this != default_instance_) {
  }
}

void BusSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusSignal_descriptor_;
}

const BusSignal& BusSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

BusSignal* BusSignal::default_instance_ = NULL;

BusSignal* BusSignal::New() const {
  return new BusSignal;
}

void BusSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signalid()) {
      if (signalid_ != &::google::protobuf::internal::kEmptyString) {
        signalid_->clear();
      }
    }
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    type_ = 0;
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    analogformat_ = 0;
    precision_ = 2;
    coarseaperture_ = 1;
    fineaperture_ = 0.5;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adaptiveaperture_ = false;
    if (has_bustypeid()) {
      if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
        bustypeid_->clear();
      }
    }
    inbusoffset_ = 0;
    inbusdiscretebitno_ = 0;
    inbusanalogsize_ = 0;
    inbusanalogformat_ = 0;
    inbusanalogbyteorder_ = 0;
    busanaloglowlimit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    busanaloghighlimit_ = 0;
    inbusanaloglowlimit_ = 0;
    inbusanaloghighlimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signalId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalid().data(), this->signalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caption;
        break;
      }

      // optional string caption = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_units;
        break;
      }

      // optional string units = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_analogFormat;
        break;
      }

      // optional int32 analogFormat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analogFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analogformat_)));
          set_has_analogformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_precision;
        break;
      }

      // optional int32 precision = 11 [default = 2];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_coarseAperture;
        break;
      }

      // optional double coarseAperture = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_coarseAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coarseaperture_)));
          set_has_coarseaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_fineAperture;
        break;
      }

      // optional double fineAperture = 13 [default = 0.5];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fineAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fineaperture_)));
          set_has_fineaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_adaptiveAperture;
        break;
      }

      // optional bool adaptiveAperture = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adaptiveAperture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adaptiveaperture_)));
          set_has_adaptiveaperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_busTypeId;
        break;
      }

      // optional string busTypeId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_busTypeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bustypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bustypeid().data(), this->bustypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_inbusOffset;
        break;
      }

      // optional int32 inbusOffset = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inbusOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inbusoffset_)));
          set_has_inbusoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_inbusDiscreteBitNo;
        break;
      }

      // optional int32 inbusDiscreteBitNo = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inbusDiscreteBitNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inbusdiscretebitno_)));
          set_has_inbusdiscretebitno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_inbusAnalogSize;
        break;
      }

      // optional int32 inbusAnalogSize = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inbusAnalogSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inbusanalogsize_)));
          set_has_inbusanalogsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_inbusAnalogFormat;
        break;
      }

      // optional int32 inbusAnalogFormat = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inbusAnalogFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inbusanalogformat_)));
          set_has_inbusanalogformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_inbusAnalogByteOrder;
        break;
      }

      // optional int32 inbusAnalogByteOrder = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inbusAnalogByteOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inbusanalogbyteorder_)));
          set_has_inbusanalogbyteorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(425)) goto parse_busAnalogLowLimit;
        break;
      }

      // optional double busAnalogLowLimit = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_busAnalogLowLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &busanaloglowlimit_)));
          set_has_busanaloglowlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(433)) goto parse_busAnalogHighLimit;
        break;
      }

      // optional double busAnalogHighLimit = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_busAnalogHighLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &busanaloghighlimit_)));
          set_has_busanaloghighlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(441)) goto parse_inbusAnalogLowLimit;
        break;
      }

      // optional double inbusAnalogLowLimit = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_inbusAnalogLowLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inbusanaloglowlimit_)));
          set_has_inbusanaloglowlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_inbusAnalogHighLimit;
        break;
      }

      // optional double inbusAnalogHighLimit = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_inbusAnalogHighLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inbusanaloghighlimit_)));
          set_has_inbusanaloghighlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BusSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string signalId = 1;
  if (has_signalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalid().data(), this->signalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signalid(), output);
  }

  // optional string caption = 2;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->caption(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional string units = 4;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->units(), output);
  }

  // optional int32 analogFormat = 10;
  if (has_analogformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->analogformat(), output);
  }

  // optional int32 precision = 11 [default = 2];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->precision(), output);
  }

  // optional double coarseAperture = 12 [default = 1];
  if (has_coarseaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->coarseaperture(), output);
  }

  // optional double fineAperture = 13 [default = 0.5];
  if (has_fineaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->fineaperture(), output);
  }

  // optional bool adaptiveAperture = 14 [default = false];
  if (has_adaptiveaperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->adaptiveaperture(), output);
  }

  // optional string busTypeId = 15;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->bustypeid(), output);
  }

  // optional int32 inbusOffset = 32;
  if (has_inbusoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->inbusoffset(), output);
  }

  // optional int32 inbusDiscreteBitNo = 40;
  if (has_inbusdiscretebitno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->inbusdiscretebitno(), output);
  }

  // optional int32 inbusAnalogSize = 50;
  if (has_inbusanalogsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->inbusanalogsize(), output);
  }

  // optional int32 inbusAnalogFormat = 51;
  if (has_inbusanalogformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->inbusanalogformat(), output);
  }

  // optional int32 inbusAnalogByteOrder = 52;
  if (has_inbusanalogbyteorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->inbusanalogbyteorder(), output);
  }

  // optional double busAnalogLowLimit = 53;
  if (has_busanaloglowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->busanaloglowlimit(), output);
  }

  // optional double busAnalogHighLimit = 54;
  if (has_busanaloghighlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->busanaloghighlimit(), output);
  }

  // optional double inbusAnalogLowLimit = 55;
  if (has_inbusanaloglowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->inbusanaloglowlimit(), output);
  }

  // optional double inbusAnalogHighLimit = 56;
  if (has_inbusanaloghighlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->inbusanaloghighlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BusSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string signalId = 1;
  if (has_signalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalid().data(), this->signalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signalid(), target);
  }

  // optional string caption = 2;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caption(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional string units = 4;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->units(), target);
  }

  // optional int32 analogFormat = 10;
  if (has_analogformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->analogformat(), target);
  }

  // optional int32 precision = 11 [default = 2];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->precision(), target);
  }

  // optional double coarseAperture = 12 [default = 1];
  if (has_coarseaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->coarseaperture(), target);
  }

  // optional double fineAperture = 13 [default = 0.5];
  if (has_fineaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->fineaperture(), target);
  }

  // optional bool adaptiveAperture = 14 [default = false];
  if (has_adaptiveaperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->adaptiveaperture(), target);
  }

  // optional string busTypeId = 15;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bustypeid(), target);
  }

  // optional int32 inbusOffset = 32;
  if (has_inbusoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->inbusoffset(), target);
  }

  // optional int32 inbusDiscreteBitNo = 40;
  if (has_inbusdiscretebitno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->inbusdiscretebitno(), target);
  }

  // optional int32 inbusAnalogSize = 50;
  if (has_inbusanalogsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->inbusanalogsize(), target);
  }

  // optional int32 inbusAnalogFormat = 51;
  if (has_inbusanalogformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->inbusanalogformat(), target);
  }

  // optional int32 inbusAnalogByteOrder = 52;
  if (has_inbusanalogbyteorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->inbusanalogbyteorder(), target);
  }

  // optional double busAnalogLowLimit = 53;
  if (has_busanaloglowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->busanaloglowlimit(), target);
  }

  // optional double busAnalogHighLimit = 54;
  if (has_busanaloghighlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->busanaloghighlimit(), target);
  }

  // optional double inbusAnalogLowLimit = 55;
  if (has_inbusanaloglowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->inbusanaloglowlimit(), target);
  }

  // optional double inbusAnalogHighLimit = 56;
  if (has_inbusanaloghighlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->inbusanaloghighlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BusSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string signalId = 1;
    if (has_signalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalid());
    }

    // optional string caption = 2;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string units = 4;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional int32 analogFormat = 10;
    if (has_analogformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analogformat());
    }

    // optional int32 precision = 11 [default = 2];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional double coarseAperture = 12 [default = 1];
    if (has_coarseaperture()) {
      total_size += 1 + 8;
    }

    // optional double fineAperture = 13 [default = 0.5];
    if (has_fineaperture()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool adaptiveAperture = 14 [default = false];
    if (has_adaptiveaperture()) {
      total_size += 1 + 1;
    }

    // optional string busTypeId = 15;
    if (has_bustypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bustypeid());
    }

    // optional int32 inbusOffset = 32;
    if (has_inbusoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbusoffset());
    }

    // optional int32 inbusDiscreteBitNo = 40;
    if (has_inbusdiscretebitno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbusdiscretebitno());
    }

    // optional int32 inbusAnalogSize = 50;
    if (has_inbusanalogsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbusanalogsize());
    }

    // optional int32 inbusAnalogFormat = 51;
    if (has_inbusanalogformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbusanalogformat());
    }

    // optional int32 inbusAnalogByteOrder = 52;
    if (has_inbusanalogbyteorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbusanalogbyteorder());
    }

    // optional double busAnalogLowLimit = 53;
    if (has_busanaloglowlimit()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double busAnalogHighLimit = 54;
    if (has_busanaloghighlimit()) {
      total_size += 2 + 8;
    }

    // optional double inbusAnalogLowLimit = 55;
    if (has_inbusanaloglowlimit()) {
      total_size += 2 + 8;
    }

    // optional double inbusAnalogHighLimit = 56;
    if (has_inbusanaloghighlimit()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusSignal::MergeFrom(const BusSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalid()) {
      set_signalid(from.signalid());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_analogformat()) {
      set_analogformat(from.analogformat());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_coarseaperture()) {
      set_coarseaperture(from.coarseaperture());
    }
    if (from.has_fineaperture()) {
      set_fineaperture(from.fineaperture());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adaptiveaperture()) {
      set_adaptiveaperture(from.adaptiveaperture());
    }
    if (from.has_bustypeid()) {
      set_bustypeid(from.bustypeid());
    }
    if (from.has_inbusoffset()) {
      set_inbusoffset(from.inbusoffset());
    }
    if (from.has_inbusdiscretebitno()) {
      set_inbusdiscretebitno(from.inbusdiscretebitno());
    }
    if (from.has_inbusanalogsize()) {
      set_inbusanalogsize(from.inbusanalogsize());
    }
    if (from.has_inbusanalogformat()) {
      set_inbusanalogformat(from.inbusanalogformat());
    }
    if (from.has_inbusanalogbyteorder()) {
      set_inbusanalogbyteorder(from.inbusanalogbyteorder());
    }
    if (from.has_busanaloglowlimit()) {
      set_busanaloglowlimit(from.busanaloglowlimit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_busanaloghighlimit()) {
      set_busanaloghighlimit(from.busanaloghighlimit());
    }
    if (from.has_inbusanaloglowlimit()) {
      set_inbusanaloglowlimit(from.inbusanaloglowlimit());
    }
    if (from.has_inbusanaloghighlimit()) {
      set_inbusanaloghighlimit(from.inbusanaloghighlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusSignal::CopyFrom(const BusSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusSignal::IsInitialized() const {

  return true;
}

void BusSignal::Swap(BusSignal* other) {
  if (other != this) {
    std::swap(signalid_, other->signalid_);
    std::swap(caption_, other->caption_);
    std::swap(type_, other->type_);
    std::swap(units_, other->units_);
    std::swap(analogformat_, other->analogformat_);
    std::swap(precision_, other->precision_);
    std::swap(coarseaperture_, other->coarseaperture_);
    std::swap(fineaperture_, other->fineaperture_);
    std::swap(adaptiveaperture_, other->adaptiveaperture_);
    std::swap(bustypeid_, other->bustypeid_);
    std::swap(inbusoffset_, other->inbusoffset_);
    std::swap(inbusdiscretebitno_, other->inbusdiscretebitno_);
    std::swap(inbusanalogsize_, other->inbusanalogsize_);
    std::swap(inbusanalogformat_, other->inbusanalogformat_);
    std::swap(inbusanalogbyteorder_, other->inbusanalogbyteorder_);
    std::swap(busanaloglowlimit_, other->busanaloglowlimit_);
    std::swap(busanaloghighlimit_, other->busanaloghighlimit_);
    std::swap(inbusanaloglowlimit_, other->inbusanaloglowlimit_);
    std::swap(inbusanaloghighlimit_, other->inbusanaloghighlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusSignal_descriptor_;
  metadata.reflection = BusSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bus::kUuidFieldNumber;
const int Bus::kBusTypeIdFieldNumber;
const int Bus::kBusSignalsFieldNumber;
const int Bus::kAutoSignalPlacementFieldNumber;
const int Bus::kManualBusSizeFieldNumber;
#endif  // !_MSC_VER

Bus::Bus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bus::InitAsDefaultInstance() {
  uuid_ = const_cast< ::Proto::Uuid*>(&::Proto::Uuid::default_instance());
}

Bus::Bus(const Bus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bus::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  bustypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autosignalplacement_ = true;
  manualbussize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bus::~Bus() {
  SharedDtor();
}

void Bus::SharedDtor() {
  if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete bustypeid_;
  }
  if (this != default_instance_) {
    delete uuid_;
  }
}

void Bus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bus_descriptor_;
}

const Bus& Bus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();
  return *default_instance_;
}

Bus* Bus::default_instance_ = NULL;

Bus* Bus::New() const {
  return new Bus;
}

void Bus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::Proto::Uuid::Clear();
    }
    if (has_bustypeid()) {
      if (bustypeid_ != &::google::protobuf::internal::kEmptyString) {
        bustypeid_->clear();
      }
    }
    autosignalplacement_ = true;
    manualbussize_ = 0;
  }
  bussignals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.Uuid uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_busTypeId;
        break;
      }

      // optional string busTypeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_busTypeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bustypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bustypeid().data(), this->bustypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_busSignals;
        break;
      }

      // repeated .Proto.BusSignal busSignals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_busSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bussignals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_busSignals;
        if (input->ExpectTag(80)) goto parse_autoSignalPlacement;
        break;
      }

      // optional bool autoSignalPlacement = 10 [default = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoSignalPlacement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autosignalplacement_)));
          set_has_autosignalplacement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_manualBusSize;
        break;
      }

      // optional int32 manualBusSize = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manualBusSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manualbussize_)));
          set_has_manualbussize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // optional string busTypeId = 2;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bustypeid(), output);
  }

  // repeated .Proto.BusSignal busSignals = 3;
  for (int i = 0; i < this->bussignals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bussignals(i), output);
  }

  // optional bool autoSignalPlacement = 10 [default = true];
  if (has_autosignalplacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->autosignalplacement(), output);
  }

  // optional int32 manualBusSize = 11 [default = 0];
  if (has_manualbussize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->manualbussize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Proto.Uuid uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // optional string busTypeId = 2;
  if (has_bustypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bustypeid().data(), this->bustypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bustypeid(), target);
  }

  // repeated .Proto.BusSignal busSignals = 3;
  for (int i = 0; i < this->bussignals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bussignals(i), target);
  }

  // optional bool autoSignalPlacement = 10 [default = true];
  if (has_autosignalplacement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->autosignalplacement(), target);
  }

  // optional int32 manualBusSize = 11 [default = 0];
  if (has_manualbussize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->manualbussize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Proto.Uuid uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

    // optional string busTypeId = 2;
    if (has_bustypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bustypeid());
    }

    // optional bool autoSignalPlacement = 10 [default = true];
    if (has_autosignalplacement()) {
      total_size += 1 + 1;
    }

    // optional int32 manualBusSize = 11 [default = 0];
    if (has_manualbussize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manualbussize());
    }

  }
  // repeated .Proto.BusSignal busSignals = 3;
  total_size += 1 * this->bussignals_size();
  for (int i = 0; i < this->bussignals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bussignals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bus::MergeFrom(const Bus& from) {
  GOOGLE_CHECK_NE(&from, this);
  bussignals_.MergeFrom(from.bussignals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::Proto::Uuid::MergeFrom(from.uuid());
    }
    if (from.has_bustypeid()) {
      set_bustypeid(from.bustypeid());
    }
    if (from.has_autosignalplacement()) {
      set_autosignalplacement(from.autosignalplacement());
    }
    if (from.has_manualbussize()) {
      set_manualbussize(from.manualbussize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bus::CopyFrom(const Bus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {

  if (has_uuid()) {
    if (!this->uuid().IsInitialized()) return false;
  }
  return true;
}

void Bus::Swap(Bus* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(bustypeid_, other->bustypeid_);
    bussignals_.Swap(&other->bussignals_);
    std::swap(autosignalplacement_, other->autosignalplacement_);
    std::swap(manualbussize_, other->manualbussize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bus_descriptor_;
  metadata.reflection = Bus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#pragma warning(pop)
#endif